{
	"schemaVersion": "2.0.0",
	"contractName": "OrderValidationUtils",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"name": "decodeERC721AssetData",
				"outputs": [
					{
						"name": "assetProxyId",
						"type": "bytes4"
					},
					{
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "ownerAddress",
						"type": "address"
					},
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"name": "getBalanceAndAssetProxyAllowance",
				"outputs": [
					{
						"name": "balance",
						"type": "uint256"
					},
					{
						"name": "allowance",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "ERC1155_PROXY_ID",
				"outputs": [
					{
						"name": "",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "ownerAddress",
						"type": "address"
					},
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"name": "getTransferableAssetAmount",
				"outputs": [
					{
						"name": "transferableAssetAmount",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "ownerAddress",
						"type": "address"
					},
					{
						"name": "assetData",
						"type": "bytes[]"
					}
				],
				"name": "getBatchAssetProxyAllowances",
				"outputs": [
					{
						"name": "allowances",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "tokenAddress",
						"type": "address"
					}
				],
				"name": "encodeERC20AssetData",
				"outputs": [
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "ownerAddress",
						"type": "address"
					},
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"name": "getBalance",
				"outputs": [
					{
						"name": "balance",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "getOrderRelevantStates",
				"outputs": [
					{
						"components": [
							{
								"name": "orderStatus",
								"type": "uint8"
							},
							{
								"name": "orderHash",
								"type": "bytes32"
							},
							{
								"name": "orderTakerAssetFilledAmount",
								"type": "uint256"
							}
						],
						"name": "ordersInfo",
						"type": "tuple[]"
					},
					{
						"name": "fillableTakerAssetAmounts",
						"type": "uint256[]"
					},
					{
						"name": "isValidSignature",
						"type": "bool[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "ERC20_PROXY_ID",
				"outputs": [
					{
						"name": "",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"name": "decodeERC20AssetData",
				"outputs": [
					{
						"name": "assetProxyId",
						"type": "bytes4"
					},
					{
						"name": "tokenAddress",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "order",
						"type": "tuple"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "getOrderRelevantState",
				"outputs": [
					{
						"components": [
							{
								"name": "orderStatus",
								"type": "uint8"
							},
							{
								"name": "orderHash",
								"type": "bytes32"
							},
							{
								"name": "orderTakerAssetFilledAmount",
								"type": "uint256"
							}
						],
						"name": "orderInfo",
						"type": "tuple"
					},
					{
						"name": "fillableTakerAssetAmount",
						"type": "uint256"
					},
					{
						"name": "isValidSignature",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"name": "decodeERC1155AssetData",
				"outputs": [
					{
						"name": "assetProxyId",
						"type": "bytes4"
					},
					{
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"name": "tokenIds",
						"type": "uint256[]"
					},
					{
						"name": "tokenValues",
						"type": "uint256[]"
					},
					{
						"name": "callbackData",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "ERC721_PROXY_ID",
				"outputs": [
					{
						"name": "",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "encodeERC721AssetData",
				"outputs": [
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "MULTI_ASSET_PROXY_ID",
				"outputs": [
					{
						"name": "",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"name": "tokenIds",
						"type": "uint256[]"
					},
					{
						"name": "tokenValues",
						"type": "uint256[]"
					},
					{
						"name": "callbackData",
						"type": "bytes"
					}
				],
				"name": "encodeERC1155AssetData",
				"outputs": [
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getERC721TokenOwner",
				"outputs": [
					{
						"name": "ownerAddress",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"name": "decodeMultiAssetData",
				"outputs": [
					{
						"name": "assetProxyId",
						"type": "bytes4"
					},
					{
						"name": "amounts",
						"type": "uint256[]"
					},
					{
						"name": "nestedAssetData",
						"type": "bytes[]"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "ownerAddress",
						"type": "address"
					},
					{
						"name": "assetData",
						"type": "bytes[]"
					}
				],
				"name": "getBatchBalances",
				"outputs": [
					{
						"name": "balances",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "ownerAddress",
						"type": "address"
					},
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"name": "getAssetProxyAllowance",
				"outputs": [
					{
						"name": "allowance",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "amounts",
						"type": "uint256[]"
					},
					{
						"name": "nestedAssetData",
						"type": "bytes[]"
					}
				],
				"name": "encodeMultiAssetData",
				"outputs": [
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "ownerAddress",
						"type": "address"
					},
					{
						"name": "assetData",
						"type": "bytes[]"
					}
				],
				"name": "getBatchBalancesAndAssetProxyAllowances",
				"outputs": [
					{
						"name": "balances",
						"type": "uint256[]"
					},
					{
						"name": "allowances",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "_exchange",
						"type": "address"
					},
					{
						"name": "_zrxAssetData",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x60806040523480156200001157600080fd5b5060405162003539380380620035398339810160408190526200003491620003d7565b600080546001600160a01b0319166001600160a01b0384811691909117918290556040517f60704108000000000000000000000000000000000000000000000000000000008152849290911690636070410890620000b7907ff47261b00000000000000000000000000000000000000000000000000000000090600401620004b2565b60206040518083038186803b158015620000d057600080fd5b505afa158015620000e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200010b9190810190620003b1565b600180546001600160a01b0319166001600160a01b039283161790556000546040517f6070410800000000000000000000000000000000000000000000000000000000815291169063607041089062000189907f025717920000000000000000000000000000000000000000000000000000000090600401620004b2565b60206040518083038186803b158015620001a257600080fd5b505afa158015620001b7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620001dd9190810190620003b1565b600280546001600160a01b0319166001600160a01b039283161790556000546040517f607041080000000000000000000000000000000000000000000000000000000081529116906360704108906200025b907fa7cb5fb70000000000000000000000000000000000000000000000000000000090600401620004b2565b60206040518083038186803b1580156200027457600080fd5b505afa15801562000289573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620002af9190810190620003b1565b600380546001600160a01b0319166001600160a01b0392909216919091179055508051620002e5906004906020840190620002ee565b505050620004df565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200033157805160ff191683800117855562000361565b8280016001018555821562000361579182015b828111156200036157825182559160200191906001019062000344565b506200036f92915062000373565b5090565b6200039091905b808211156200036f57600081556001016200037a565b90565b80516001600160a01b0381168114620003ab57600080fd5b92915050565b600060208284031215620003c457600080fd5b620003d0838362000393565b9392505050565b60008060408385031215620003ea578081fd5b620003f6848462000393565b602084810151919350906001600160401b038082111562000415578384fd5b81860187601f82011262000427578485fd5b805192508183111562000438578485fd5b604051601f8401601f191681018501838111828210171562000458578687fd5b60405283815281840185018910156200046f578586fd5b8592505b8383101562000492578183018501518184018601529184019162000473565b83831115620004a357858585830101525b80955050505050509250929050565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b61304a80620004ef6000396000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c80639eadc835116100d8578063b69884631161008c578063d186037f11610066578063d186037f14610377578063d3d862d11461038a578063e4e6e7da1461039d57610182565b8063b698846314610322578063bbb2dcf614610342578063d001c5dc1461036457610182565b8063a6627e9f116100bd578063a6627e9f146102f4578063b37fda0414610307578063b43cffe11461030f57610182565b80639eadc835146102c8578063a28fe02e146102ec57610182565b8063590aa8751161013a5780638ee1a642116101145780638ee1a6421461027d5780638f4ce479146102855780638f5afa52146102a657610182565b8063590aa875146102285780637d727512146102485780637f46448d1461025b57610182565b80631bd0eb8f1161016b5780631bd0eb8f146101d35780632322cf76146101e85780634dfdac201461020857610182565b806304a5618a146101875780630d7b7d76146101b2575b600080fd5b61019a6101953660046125d7565b6103be565b6040516101a993929190612ae1565b60405180910390f35b6101c56101c036600461239e565b610484565b6040516101a9929190612f19565b6101db6104a6565b6040516101a991906129e4565b6101fb6101f636600461239e565b6104ca565b6040516101a99190612f10565b61021b6102163660046122b7565b6104f2565b6040516101a99190612949565b61023b61023636600461229b565b610575565b6040516101a99190612b7e565b6101fb61025636600461239e565b610614565b61026e61026936600461240f565b610b12565b6040516101a9939291906128ad565b6101db610c4a565b6102986102933660046125d7565b610c6e565b6040516101a9929190612a11565b6102b96102b4366004612662565b610d16565b6040516101a993929190612df2565b6102db6102d63660046125d7565b61100c565b6040516101a9959493929190612a59565b6101db6110cf565b61023b6103023660046123e4565b6110f3565b6101db611195565b61023b61031d366004612307565b6111b9565b6103356103303660046123e4565b611261565b6040516101a991906127ec565b6103556103503660046125d7565b61137f565b6040516101a993929190612b31565b61021b6103723660046122b7565b611444565b6101fb61038536600461239e565b6114b2565b61023b6103983660046124b7565b611b49565b6103b06103ab3660046122b7565b611b66565b6040516101a992919061298a565b600080806103d2848263ffffffff611b7f16565b92507fffffffff0000000000000000000000000000000000000000000000000000000083167f025717920000000000000000000000000000000000000000000000000000000014610458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044f90612dbb565b60405180910390fd5b61046984601063ffffffff611bea16565b915061047c84602463ffffffff611c4916565b929491935050565b6000806104918484610614565b915061049d84846114b2565b90509250929050565b7fa7cb5fb70000000000000000000000000000000000000000000000000000000081565b60008060006104d98585610484565b915091506104e78282611c5c565b925050505b92915050565b606060008251905080604051908082528060200260200182016040528015610524578160200160208202803883390190505b50915060005b81811461056d5761054e8585838151811061054157fe5b60200260200101516114b2565b83828151811061055a57fe5b602090810291909101015260010161052a565b505092915050565b606063f47261b060e01b8260405160240161059091906127ec565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050919050565b600080610627838263ffffffff611b7f16565b90507fffffffff0000000000000000000000000000000000000000000000000000000081167ff47261b00000000000000000000000000000000000000000000000000000000014156107a557600061068684601063ffffffff611bea16565b905060606370a0823160e01b866040516024016106a391906127ec565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608373ffffffffffffffffffffffffffffffffffffffff168360405161072b91906127d0565b600060405180830381855afa9150503d8060008114610766576040519150601f19603f3d011682016040523d82523d6000602084013e61076b565b606091505b509150915081801561077e575080516020145b61078957600061079a565b61079a81600063ffffffff611c4916565b955050505050610b0b565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f02571792000000000000000000000000000000000000000000000000000000001415610852576000806107fb856103be565b92509250508573ffffffffffffffffffffffffffffffffffffffff166108218383611261565b73ffffffffffffffffffffffffffffffffffffffff1614610843576000610846565b60015b60ff1693505050610b0b565b7fffffffff0000000000000000000000000000000000000000000000000000000081167fa7cb5fb7000000000000000000000000000000000000000000000000000000001415610a3c5760006060806108aa8661100c565b5081519296509094509250905060005b818114610a3257606062fdd58e60e01b8a8684815181106108d757fe5b60200260200101516040516024016108f0929190612887565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608773ffffffffffffffffffffffffffffffffffffffff168360405161097891906127d0565b600060405180830381855afa9150503d80600081146109b3576040519150601f19603f3d011682016040523d82523d6000602084013e6109b8565b606091505b509150915060008280156109cd575081516020145b6109d85760006109e9565b6109e982600063ffffffff611c4916565b905060008786815181106109f957fe5b60200260200101518281610a0957fe5b0490508b811080610a1857508b155b15610a2157809b505b5050600190930192506108ba915050565b5050505050610b0b565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f94cfcdd7000000000000000000000000000000000000000000000000000000001415610b0b57606080610a928561137f565b80519194509250905060005b818114610b06576000610ac489858481518110610ab757fe5b6020026020010151610614565b90506000858381518110610ad457fe5b60200260200101518281610ae457fe5b04905087811080610af3575087155b15610afc578097505b5050600101610a9e565b505050505b5092915050565b606080606060008551905080604051908082528060200260200182016040528015610b5757816020015b610b44611faf565b815260200190600190039081610b3c5790505b50935080604051908082528060200260200182016040528015610b84578160200160208202803883390190505b50925080604051908082528060200260200182016040528015610bb1578160200160208202803883390190505b50915060005b818114610c4157610bee878281518110610bcd57fe5b6020026020010151878381518110610be157fe5b6020026020010151610d16565b8751889085908110610bfc57fe5b60200260200101878581518110610c0f57fe5b60200260200101878681518110610c2257fe5b9315156020948502919091019093019290925291905252600101610bb7565b50509250925092565b7ff47261b00000000000000000000000000000000000000000000000000000000081565b600080610c81838263ffffffff611b7f16565b91507fffffffff0000000000000000000000000000000000000000000000000000000082167ff47261b00000000000000000000000000000000000000000000000000000000014610cfe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044f90612dbb565b610d0f83601063ffffffff611bea16565b9050915091565b610d1e611faf565b600080546040517fc75e0a81000000000000000000000000000000000000000000000000000000008152829173ffffffffffffffffffffffffffffffffffffffff169063c75e0a8190610d75908890600401612e16565b60606040518083038186803b158015610d8d57600080fd5b505afa158015610da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610dc5919081019061260c565b855160005460208301516040517f93634702000000000000000000000000000000000000000000000000000000008152939650919273ffffffffffffffffffffffffffffffffffffffff90911691639363470291610e2a919085908a906004016129af565b60206040518083038186803b158015610e4257600080fd5b505afa158015610e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e7a91908101906125b5565b91506000610e8d828861014001516104ca565b60a088015160c08901516004805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f8101849004840282018401909252818152959650939492936060939291830182828015610f455780601f10610f1a57610100808354040283529160200191610f45565b820191906000526020600020905b815481529060010190602001808311610f2857829003601f168201915b505050505090506000610f66828c6101400151611c7290919063ffffffff16565b15610f8a57610f8385610f7d8d6080015186611c97565b86611cd6565b9050610fe6565b6000610f9687846104ca565b905083610fb357610fac868d6080015187611cd6565b9150610fe4565b6000610fc4878e6080015188611cd6565b90506000610fd3838789611cd6565b9050610fdf8282611c5c565b935050505b505b610ffd610ff7858b60400151611d2c565b82611c5c565b97505050505050509250925092565b60008060608080611023868563ffffffff611b7f16565b94507fffffffff0000000000000000000000000000000000000000000000000000000085167fa7cb5fb700000000000000000000000000000000000000000000000000000000146110a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044f90612dbb565b505050506024828101516044840151606485015160848601519496929591820184019490820184019391010190565b7f025717920000000000000000000000000000000000000000000000000000000081565b6060630257179260e01b8383604051602401611110929190612887565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b7f94cfcdd70000000000000000000000000000000000000000000000000000000081565b606063a7cb5fb760e01b858585856040516024016111da9493929190612834565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050949350505050565b60006060636352211e60e01b8360405160240161127e9190612f10565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608573ffffffffffffffffffffffffffffffffffffffff168360405161130691906127d0565b600060405180830381855afa9150503d8060008114611341576040519150601f19603f3d011682016040523d82523d6000602084013e611346565b606091505b5091509150818015611359575080516020145b611364576000611375565b61137581600c63ffffffff611bea16565b9695505050505050565b6000606080611394848463ffffffff611b7f16565b92507fffffffff0000000000000000000000000000000000000000000000000000000083167f94cfcdd70000000000000000000000000000000000000000000000000000000014611411576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044f90612dbb565b835161142790859060049063ffffffff611d6e16565b80602001905161143a9190810190612504565b9395909450915050565b606060008251905080604051908082528060200260200182016040528015611476578160200160208202803883390190505b50915060005b81811461056d5761149385858381518110610ab757fe5b83828151811061149f57fe5b602090810291909101015260010161147c565b6000806114c5838263ffffffff611b7f16565b90507fffffffff0000000000000000000000000000000000000000000000000000000081167f94cfcdd700000000000000000000000000000000000000000000000000000000141561158f5760608061151d8561137f565b80519194509250905060005b8181146115845760006115428985848151811061054157fe5b9050600085838151811061155257fe5b6020026020010151828161156257fe5b04905087811080611571575087155b1561157a578097505b5050600101611529565b506104ec9350505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081167ff47261b000000000000000000000000000000000000000000000000000000000141561163f5760006115ec84601063ffffffff611bea16565b6001546040519192506060917fdd62ed3e00000000000000000000000000000000000000000000000000000000916106a391899173ffffffffffffffffffffffffffffffffffffffff169060240161280d565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f0257179200000000000000000000000000000000000000000000000000000000141561196d57600080611695856103be565b600254604051929550909350606092507fe985e9c500000000000000000000000000000000000000000000000000000000916116ee918a9173ffffffffffffffffffffffffffffffffffffffff9091169060240161280d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608473ffffffffffffffffffffffffffffffffffffffff168360405161177691906127d0565b600060405180830381855afa9150503d80600081146117b1576040519150601f19603f3d011682016040523d82523d6000602084013e6117b6565b606091505b50915091508115806117ca57508051602014155b806117e657506117e181600063ffffffff611c4916565b600114155b1561194057606063081812fc60e01b856040516024016118069190612f10565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508573ffffffffffffffffffffffffffffffffffffffff168160405161188a91906127d0565b600060405180830381855afa9150503d80600081146118c5576040519150601f19603f3d011682016040523d82523d6000602084013e6118ca565b606091505b5090935091508280156118de575081516020145b8015611927575060025473ffffffffffffffffffffffffffffffffffffffff1661190f83600c63ffffffff611bea16565b73ffffffffffffffffffffffffffffffffffffffff16145b611932576000611935565b60015b60ff16975050610a32565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96505050505050610b0b565b7fffffffff0000000000000000000000000000000000000000000000000000000081167fa7cb5fb7000000000000000000000000000000000000000000000000000000001415610b0b5760006119c28461100c565b5050600354604051929450606093507fe985e9c50000000000000000000000000000000000000000000000000000000092611a199250899173ffffffffffffffffffffffffffffffffffffffff169060240161280d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608373ffffffffffffffffffffffffffffffffffffffff1683604051611aa191906127d0565b600060405180830381855afa9150503d8060008114611adc576040519150601f19603f3d011682016040523d82523d6000602084013e611ae1565b606091505b5091509150818015611af4575080516020145b8015611b105750611b0c81600063ffffffff611c4916565b6001145b611b1b576000611b3d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b98975050505050505050565b60606394cfcdd760e01b838360405160240161111092919061295c565b606080611b738484611444565b915061049d84846104f2565b60008160040183511015611bbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044f90612d5e565b5001602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b60008160140183511015611c2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044f90612d01565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b6000611c558383611e33565b9392505050565b6000818310611c6b5781611c55565b5090919050565b600081518351148015611c555750508051602091820120825192909101919091201490565b600082820183811015611c55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044f90612cca565b6000808311611d11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044f90612c93565b611d24611d1e8584611e7c565b84611ed0565b949350505050565b600082821115611d68576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044f90612bff565b50900390565b606081831115611daa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044f90612b91565b8351821115611de5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044f90612bc8565b8282036040519080825280601f01601f191660200182016040528015611e12576020820181803883390190505b509050611c55611e2182611ee5565b84611e2b87611ee5565b018351611eeb565b60008160200183511015611e73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044f90612c36565b50016020015190565b600082611e8b575060006104ec565b82820282848281611e9857fe5b0414611c55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044f90612cca565b600080828481611edc57fe5b04949350505050565b60200190565b6020811015611f15576001816020036101000a038019835116818551168082178652505050611faa565b82821415611f2257611faa565b82821115611f5c5760208103905080820181840181515b82851015611f54578451865260209586019590940193611f39565b905250611faa565b60208103905080820181840183515b81861215611fa557825182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09283019290910190611f6b565b855250505b505050565b604080516060810182526000808252602082018190529181019190915290565b803573ffffffffffffffffffffffffffffffffffffffff811681146104ec57600080fd5b600082601f830112612003578081fd5b815161201661201182612f4e565b612f27565b818152915060208083019084810160005b84811015610b06578151870188603f82011261204257600080fd5b8381015161205261201182612f6f565b8181528a604083850101111561206757600080fd5b6120778287830160408601612fb2565b865250509282019290820190600101612027565b600082601f83011261209b578081fd5b81356120a961201182612f4e565b8181529150602080830190840160005b838110156120e6576120d1876020843589010161214e565b835260209283019291909101906001016120b9565b5050505092915050565b600082601f830112612100578081fd5b813561210e61201182612f4e565b81815291506020808301908481018184028601820187101561212f57600080fd5b60005b84811015610b0657813584529282019290820190600101612132565b600082601f83011261215e578081fd5b813561216c61201182612f6f565b915080825283602082850101111561218357600080fd5b8060208401602084013760009082016020015292915050565b60006101808083850312156121af578182fd5b6121b881612f27565b9150506121c58383611fcf565b81526121d48360208401611fcf565b60208201526121e68360408401611fcf565b60408201526121f88360608401611fcf565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013567ffffffffffffffff8082111561225a57600080fd5b6122668683870161214e565b8385015261016092508285013591508082111561228257600080fd5b5061228f8582860161214e565b82840152505092915050565b6000602082840312156122ad57600080fd5b611c558383611fcf565b600080604083850312156122ca57600080fd5b82356122d581612fe2565b9150602083013567ffffffffffffffff8111156122f157600080fd5b6122fd8582860161208b565b9150509250929050565b6000806000806080858703121561231c578182fd5b6123268686611fcf565b9350602085013567ffffffffffffffff80821115612342578384fd5b61234e888389016120f0565b94506040870135915080821115612363578384fd5b61236f888389016120f0565b9350606087013591508082111561238557600080fd5b506123928782880161214e565b91505092959194509250565b600080604083850312156123b157600080fd5b82356123bc81612fe2565b9150602083013567ffffffffffffffff8111156123d857600080fd5b6122fd8582860161214e565b600080604083850312156123f757600080fd5b6124018484611fcf565b946020939093013593505050565b60008060408385031215612421578182fd5b823567ffffffffffffffff80821115612438578384fd5b81850186601f820112612449578485fd5b8035925061245961201184612f4e565b83815260208082019190838101885b878110156124915761247f8c84843589010161219c565b85529382019390820190600101612468565b509197508801359450505050808211156124aa57600080fd5b506122fd8582860161208b565b600080604083850312156124ca57600080fd5b823567ffffffffffffffff808211156124e257600080fd5b6124ee868387016120f0565b935060208501359150808211156124aa57600080fd5b60008060408385031215612516578182fd5b825167ffffffffffffffff8082111561252d578384fd5b81850186601f82011261253e578485fd5b8051925061254e61201184612f4e565b80848252602080830192508084018a82838902870101111561256e578889fd5b8894505b86851015612590578051845260019490940193928101928101612572565b5088015190965093505050808211156125a857600080fd5b506122fd85828601611ff3565b6000602082840312156125c757600080fd5b81518015158114611c5557600080fd5b6000602082840312156125e957600080fd5b813567ffffffffffffffff81111561260057600080fd5b611d248482850161214e565b6000606082840312801561261e578182fd5b8015612628578182fd5b506126336060612f27565b825160ff81168114612643578283fd5b8152602083810151908201526040928301519281019290925250919050565b6000806040838503121561267557600080fd5b823567ffffffffffffffff8082111561268d57600080fd5b6126998683870161219c565b935060208501359150808211156126af57600080fd5b506122fd8582860161214e565b73ffffffffffffffffffffffffffffffffffffffff169052565b60008151808452602084018081955060208302810191506020850160005b8481101561272257828403885261270c84835161276a565b60209889019890945091909101906001016126f4565b50919695505050505050565b600081518084526020840193506020830160005b82811015612760578151865260209586019590910190600101612742565b5093949350505050565b60008151808452612782816020860160208601612fb2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b805160ff16825260208082015190830152604090810151910152565b600082516127e2818460208701612fb2565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b600073ffffffffffffffffffffffffffffffffffffffff8616825260806020830152612863608083018661272e565b8281036040840152612875818661272e565b8381036060850152611b3d818661276a565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b606080825284519082018190526000906020906080840190828801845b828110156128f0576128dd8483516127b4565b60609390930192908401906001016128ca565b50505083810382850152612904818761272e565b8481036040860152855180825290830191508286019060005b8181101561293b57825115158452928401929184019160010161291d565b509198975050505050505050565b600060208252611c55602083018461272e565b60006040825261296f604083018561272e565b828103602084015261298181856126d6565b95945050505050565b60006040825261299d604083018561272e565b8281036020840152612981818561272e565b600084825273ffffffffffffffffffffffffffffffffffffffff8416602083015260606040830152612981606083018461276a565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b60007fffffffff000000000000000000000000000000000000000000000000000000008716825273ffffffffffffffffffffffffffffffffffffffff8616602083015260a06040830152612ab060a083018661272e565b8281036060840152612ac2818661272e565b8381036080850152612ad4818661276a565b9998505050505050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000093909316835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b60007fffffffff000000000000000000000000000000000000000000000000000000008516825260606020830152612b6c606083018561272e565b828103604084015261137581856126d6565b600060208252611c55602083018461276a565b6020808252601a908201527f46524f4d5f4c4553535f5448414e5f544f5f5245515549524544000000000000604082015260600190565b6020808252601c908201527f544f5f4c4553535f5448414e5f4c454e4754485f524551554952454400000000604082015260600190565b60208082526011908201527f55494e543235365f554e444552464c4f57000000000000000000000000000000604082015260600190565b60208082526026908201527f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524560408201527f5155495245440000000000000000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f4449564953494f4e5f42595f5a45524f00000000000000000000000000000000604082015260600190565b60208082526010908201527f55494e543235365f4f564552464c4f5700000000000000000000000000000000604082015260600190565b60208082526026908201527f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524560408201527f5155495245440000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f475245415445525f4f525f455155414c5f544f5f345f4c454e4754485f52455160408201527f5549524544000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600e908201527f57524f4e475f50524f58595f4944000000000000000000000000000000000000604082015260600190565b60a08101612e0082866127b4565b8360608301528215156080830152949350505050565b600060208252610180612e2d6020840185516126bc565b6020840151612e3f60408501826126bc565b506040840151612e5260608501826126bc565b506060840151612e6560808501826126bc565b50608084015160a084015260a084015160c084015260c084015160e084015260e08401516101008181860152808601519150506101208181860152808601519150506101408181860152808601519150506101608281860152612ecc6101a086018361276a565b8187015192507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08682030184870152612f05818461276a565b979650505050505050565b90815260200190565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715612f4657600080fd5b604052919050565b600067ffffffffffffffff821115612f6557600080fd5b5060209081020190565b600067ffffffffffffffff821115612f8657600080fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b83811015612fcd578181015183820152602001612fb5565b83811115612fdc576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461300457600080fd5b5056fea365627a7a723058208ed633a72334026aba877c0a5aee33464c32ae7154932d0859088f2019a4cf236c6578706572696d656e74616cf564736f6c63430005090040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3539 CODESIZE SUB DUP1 PUSH3 0x3539 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x3D7 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x6070410800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP5 SWAP3 SWAP1 SWAP2 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH3 0xB7 SWAP1 PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x4 ADD PUSH3 0x4B2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xE5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0x10B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x3B1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x6070410800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH3 0x189 SWAP1 PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x4 ADD PUSH3 0x4B2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x1B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0x1DD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x3B1 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x6070410800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH3 0x25B SWAP1 PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x4 ADD PUSH3 0x4B2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x274 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x289 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0x2AF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x3B1 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP DUP1 MLOAD PUSH3 0x2E5 SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x2EE JUMP JUMPDEST POP POP POP PUSH3 0x4DF JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0x331 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x361 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x361 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x361 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x344 JUMP JUMPDEST POP PUSH3 0x36F SWAP3 SWAP2 POP PUSH3 0x373 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 0x390 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x36F JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x37A JUMP JUMPDEST SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x3AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x3C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x3D0 DUP4 DUP4 PUSH3 0x393 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x3EA JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH3 0x3F6 DUP5 DUP5 PUSH3 0x393 JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD SWAP2 SWAP4 POP SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x415 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP7 ADD DUP8 PUSH1 0x1F DUP3 ADD SLT PUSH3 0x427 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 MLOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH3 0x438 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND DUP2 ADD DUP6 ADD DUP4 DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x458 JUMPI DUP7 DUP8 REVERT JUMPDEST PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP2 DUP5 ADD DUP6 ADD DUP10 LT ISZERO PUSH3 0x46F JUMPI DUP6 DUP7 REVERT JUMPDEST DUP6 SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH3 0x492 JUMPI DUP2 DUP4 ADD DUP6 ADD MLOAD DUP2 DUP5 ADD DUP7 ADD MSTORE SWAP2 DUP5 ADD SWAP2 PUSH3 0x473 JUMP JUMPDEST DUP4 DUP4 GT ISZERO PUSH3 0x4A3 JUMPI DUP6 DUP6 DUP6 DUP4 ADD ADD MSTORE JUMPDEST DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0x304A DUP1 PUSH3 0x4EF PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x182 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9EADC835 GT PUSH2 0xD8 JUMPI DUP1 PUSH4 0xB6988463 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xD186037F GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD186037F EQ PUSH2 0x377 JUMPI DUP1 PUSH4 0xD3D862D1 EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0xE4E6E7DA EQ PUSH2 0x39D JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0xB6988463 EQ PUSH2 0x322 JUMPI DUP1 PUSH4 0xBBB2DCF6 EQ PUSH2 0x342 JUMPI DUP1 PUSH4 0xD001C5DC EQ PUSH2 0x364 JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0xA6627E9F GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xA6627E9F EQ PUSH2 0x2F4 JUMPI DUP1 PUSH4 0xB37FDA04 EQ PUSH2 0x307 JUMPI DUP1 PUSH4 0xB43CFFE1 EQ PUSH2 0x30F JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x9EADC835 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0xA28FE02E EQ PUSH2 0x2EC JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x590AA875 GT PUSH2 0x13A JUMPI DUP1 PUSH4 0x8EE1A642 GT PUSH2 0x114 JUMPI DUP1 PUSH4 0x8EE1A642 EQ PUSH2 0x27D JUMPI DUP1 PUSH4 0x8F4CE479 EQ PUSH2 0x285 JUMPI DUP1 PUSH4 0x8F5AFA52 EQ PUSH2 0x2A6 JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x590AA875 EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0x7D727512 EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0x7F46448D EQ PUSH2 0x25B JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x1BD0EB8F GT PUSH2 0x16B JUMPI DUP1 PUSH4 0x1BD0EB8F EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x2322CF76 EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0x4DFDAC20 EQ PUSH2 0x208 JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x4A5618A EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0xD7B7D76 EQ PUSH2 0x1B2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19A PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D7 JUMP JUMPDEST PUSH2 0x3BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2AE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C5 PUSH2 0x1C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x239E JUMP JUMPDEST PUSH2 0x484 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP3 SWAP2 SWAP1 PUSH2 0x2F19 JUMP JUMPDEST PUSH2 0x1DB PUSH2 0x4A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP2 SWAP1 PUSH2 0x29E4 JUMP JUMPDEST PUSH2 0x1FB PUSH2 0x1F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x239E JUMP JUMPDEST PUSH2 0x4CA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP2 SWAP1 PUSH2 0x2F10 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x216 CALLDATASIZE PUSH1 0x4 PUSH2 0x22B7 JUMP JUMPDEST PUSH2 0x4F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP2 SWAP1 PUSH2 0x2949 JUMP JUMPDEST PUSH2 0x23B PUSH2 0x236 CALLDATASIZE PUSH1 0x4 PUSH2 0x229B JUMP JUMPDEST PUSH2 0x575 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP2 SWAP1 PUSH2 0x2B7E JUMP JUMPDEST PUSH2 0x1FB PUSH2 0x256 CALLDATASIZE PUSH1 0x4 PUSH2 0x239E JUMP JUMPDEST PUSH2 0x614 JUMP JUMPDEST PUSH2 0x26E PUSH2 0x269 CALLDATASIZE PUSH1 0x4 PUSH2 0x240F JUMP JUMPDEST PUSH2 0xB12 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x28AD JUMP JUMPDEST PUSH2 0x1DB PUSH2 0xC4A JUMP JUMPDEST PUSH2 0x298 PUSH2 0x293 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D7 JUMP JUMPDEST PUSH2 0xC6E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP3 SWAP2 SWAP1 PUSH2 0x2A11 JUMP JUMPDEST PUSH2 0x2B9 PUSH2 0x2B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2662 JUMP JUMPDEST PUSH2 0xD16 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2DF2 JUMP JUMPDEST PUSH2 0x2DB PUSH2 0x2D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D7 JUMP JUMPDEST PUSH2 0x100C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A59 JUMP JUMPDEST PUSH2 0x1DB PUSH2 0x10CF JUMP JUMPDEST PUSH2 0x23B PUSH2 0x302 CALLDATASIZE PUSH1 0x4 PUSH2 0x23E4 JUMP JUMPDEST PUSH2 0x10F3 JUMP JUMPDEST PUSH2 0x1DB PUSH2 0x1195 JUMP JUMPDEST PUSH2 0x23B PUSH2 0x31D CALLDATASIZE PUSH1 0x4 PUSH2 0x2307 JUMP JUMPDEST PUSH2 0x11B9 JUMP JUMPDEST PUSH2 0x335 PUSH2 0x330 CALLDATASIZE PUSH1 0x4 PUSH2 0x23E4 JUMP JUMPDEST PUSH2 0x1261 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP2 SWAP1 PUSH2 0x27EC JUMP JUMPDEST PUSH2 0x355 PUSH2 0x350 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D7 JUMP JUMPDEST PUSH2 0x137F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B31 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x372 CALLDATASIZE PUSH1 0x4 PUSH2 0x22B7 JUMP JUMPDEST PUSH2 0x1444 JUMP JUMPDEST PUSH2 0x1FB PUSH2 0x385 CALLDATASIZE PUSH1 0x4 PUSH2 0x239E JUMP JUMPDEST PUSH2 0x14B2 JUMP JUMPDEST PUSH2 0x23B PUSH2 0x398 CALLDATASIZE PUSH1 0x4 PUSH2 0x24B7 JUMP JUMPDEST PUSH2 0x1B49 JUMP JUMPDEST PUSH2 0x3B0 PUSH2 0x3AB CALLDATASIZE PUSH1 0x4 PUSH2 0x22B7 JUMP JUMPDEST PUSH2 0x1B66 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP3 SWAP2 SWAP1 PUSH2 0x298A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x3D2 DUP5 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1B7F AND JUMP JUMPDEST SWAP3 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x458 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2DBB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x469 DUP5 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x1BEA AND JUMP JUMPDEST SWAP2 POP PUSH2 0x47C DUP5 PUSH1 0x24 PUSH4 0xFFFFFFFF PUSH2 0x1C49 AND JUMP JUMPDEST SWAP3 SWAP5 SWAP2 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x491 DUP5 DUP5 PUSH2 0x614 JUMP JUMPDEST SWAP2 POP PUSH2 0x49D DUP5 DUP5 PUSH2 0x14B2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x4D9 DUP6 DUP6 PUSH2 0x484 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x4E7 DUP3 DUP3 PUSH2 0x1C5C JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x524 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x56D JUMPI PUSH2 0x54E DUP6 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x541 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x14B2 JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x55A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x52A JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xF47261B0 PUSH1 0xE0 SHL DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x590 SWAP2 SWAP1 PUSH2 0x27EC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x627 DUP4 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1B7F AND JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x7A5 JUMPI PUSH1 0x0 PUSH2 0x686 DUP5 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x1BEA AND JUMP JUMPDEST SWAP1 POP PUSH1 0x60 PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6A3 SWAP2 SWAP1 PUSH2 0x27EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x72B SWAP2 SWAP1 PUSH2 0x27D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x766 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x76B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x77E JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0x789 JUMPI PUSH1 0x0 PUSH2 0x79A JUMP JUMPDEST PUSH2 0x79A DUP2 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x1C49 AND JUMP JUMPDEST SWAP6 POP POP POP POP POP PUSH2 0xB0B JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x852 JUMPI PUSH1 0x0 DUP1 PUSH2 0x7FB DUP6 PUSH2 0x3BE JUMP JUMPDEST SWAP3 POP SWAP3 POP POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x821 DUP4 DUP4 PUSH2 0x1261 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x843 JUMPI PUSH1 0x0 PUSH2 0x846 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND SWAP4 POP POP POP PUSH2 0xB0B JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xA3C JUMPI PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x8AA DUP7 PUSH2 0x100C JUMP JUMPDEST POP DUP2 MLOAD SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xA32 JUMPI PUSH1 0x60 PUSH3 0xFDD58E PUSH1 0xE0 SHL DUP11 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x8D7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8F0 SWAP3 SWAP2 SWAP1 PUSH2 0x2887 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x978 SWAP2 SWAP1 PUSH2 0x27D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9B3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9B8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 DUP1 ISZERO PUSH2 0x9CD JUMPI POP DUP2 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0x9D8 JUMPI PUSH1 0x0 PUSH2 0x9E9 JUMP JUMPDEST PUSH2 0x9E9 DUP3 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x1C49 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x9F9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP2 PUSH2 0xA09 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP12 DUP2 LT DUP1 PUSH2 0xA18 JUMPI POP DUP12 ISZERO JUMPDEST ISZERO PUSH2 0xA21 JUMPI DUP1 SWAP12 POP JUMPDEST POP POP PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 POP PUSH2 0x8BA SWAP2 POP POP JUMP JUMPDEST POP POP POP POP POP PUSH2 0xB0B JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xB0B JUMPI PUSH1 0x60 DUP1 PUSH2 0xA92 DUP6 PUSH2 0x137F JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xB06 JUMPI PUSH1 0x0 PUSH2 0xAC4 DUP10 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xAB7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x614 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAD4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP2 PUSH2 0xAE4 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP8 DUP2 LT DUP1 PUSH2 0xAF3 JUMPI POP DUP8 ISZERO JUMPDEST ISZERO PUSH2 0xAFC JUMPI DUP1 SWAP8 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0xA9E JUMP JUMPDEST POP POP POP POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH1 0x0 DUP6 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB57 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xB44 PUSH2 0x1FAF JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xB3C JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB84 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xBB1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xC41 JUMPI PUSH2 0xBEE DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBCD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xBE1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xD16 JUMP JUMPDEST DUP8 MLOAD DUP9 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0xBFC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xC0F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xC22 JUMPI INVALID JUMPDEST SWAP4 ISZERO ISZERO PUSH1 0x20 SWAP5 DUP6 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 SWAP1 MSTORE MSTORE PUSH1 0x1 ADD PUSH2 0xBB7 JUMP JUMPDEST POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC81 DUP4 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1B7F AND JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 EQ PUSH2 0xCFE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2DBB JUMP JUMPDEST PUSH2 0xD0F DUP4 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x1BEA AND JUMP JUMPDEST SWAP1 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH2 0xD1E PUSH2 0x1FAF JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0xC75E0A8100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xC75E0A81 SWAP1 PUSH2 0xD75 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2E16 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDA1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xDC5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x260C JUMP JUMPDEST DUP6 MLOAD PUSH1 0x0 SLOAD PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x9363470200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP4 SWAP7 POP SWAP2 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 PUSH4 0x93634702 SWAP2 PUSH2 0xE2A SWAP2 SWAP1 DUP6 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x29AF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE56 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xE7A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x25B5 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0xE8D DUP3 DUP9 PUSH2 0x140 ADD MLOAD PUSH2 0x4CA JUMP JUMPDEST PUSH1 0xA0 DUP9 ADD MLOAD PUSH1 0xC0 DUP10 ADD MLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x2 PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x100 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP6 SWAP7 POP SWAP4 SWAP5 SWAP3 SWAP4 PUSH1 0x60 SWAP4 SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xF45 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF1A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF45 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF28 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0xF66 DUP3 DUP13 PUSH2 0x140 ADD MLOAD PUSH2 0x1C72 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0xF8A JUMPI PUSH2 0xF83 DUP6 PUSH2 0xF7D DUP14 PUSH1 0x80 ADD MLOAD DUP7 PUSH2 0x1C97 JUMP JUMPDEST DUP7 PUSH2 0x1CD6 JUMP JUMPDEST SWAP1 POP PUSH2 0xFE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF96 DUP8 DUP5 PUSH2 0x4CA JUMP JUMPDEST SWAP1 POP DUP4 PUSH2 0xFB3 JUMPI PUSH2 0xFAC DUP7 DUP14 PUSH1 0x80 ADD MLOAD DUP8 PUSH2 0x1CD6 JUMP JUMPDEST SWAP2 POP PUSH2 0xFE4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFC4 DUP8 DUP15 PUSH1 0x80 ADD MLOAD DUP9 PUSH2 0x1CD6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xFD3 DUP4 DUP8 DUP10 PUSH2 0x1CD6 JUMP JUMPDEST SWAP1 POP PUSH2 0xFDF DUP3 DUP3 PUSH2 0x1C5C JUMP JUMPDEST SWAP4 POP POP POP JUMPDEST POP JUMPDEST PUSH2 0xFFD PUSH2 0xFF7 DUP6 DUP12 PUSH1 0x40 ADD MLOAD PUSH2 0x1D2C JUMP JUMPDEST DUP3 PUSH2 0x1C5C JUMP JUMPDEST SWAP8 POP POP POP POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP1 PUSH2 0x1023 DUP7 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x1B7F AND JUMP JUMPDEST SWAP5 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP6 AND PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x10A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2DBB JUMP JUMPDEST POP POP POP POP PUSH1 0x24 DUP3 DUP2 ADD MLOAD PUSH1 0x44 DUP5 ADD MLOAD PUSH1 0x64 DUP6 ADD MLOAD PUSH1 0x84 DUP7 ADD MLOAD SWAP5 SWAP7 SWAP3 SWAP6 SWAP2 DUP3 ADD DUP5 ADD SWAP5 SWAP1 DUP3 ADD DUP5 ADD SWAP4 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x2571792 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1110 SWAP3 SWAP2 SWAP1 PUSH2 0x2887 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xA7CB5FB7 PUSH1 0xE0 SHL DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x11DA SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2834 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH4 0x6352211E PUSH1 0xE0 SHL DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x127E SWAP2 SWAP1 PUSH2 0x2F10 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1306 SWAP2 SWAP1 PUSH2 0x27D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1341 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1346 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1359 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0x1364 JUMPI PUSH1 0x0 PUSH2 0x1375 JUMP JUMPDEST PUSH2 0x1375 DUP2 PUSH1 0xC PUSH4 0xFFFFFFFF PUSH2 0x1BEA AND JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x1394 DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x1B7F AND JUMP JUMPDEST SWAP3 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x1411 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2DBB JUMP JUMPDEST DUP4 MLOAD PUSH2 0x1427 SWAP1 DUP6 SWAP1 PUSH1 0x4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1D6E AND JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x143A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2504 JUMP JUMPDEST SWAP4 SWAP6 SWAP1 SWAP5 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1476 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x56D JUMPI PUSH2 0x1493 DUP6 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAB7 JUMPI INVALID JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x149F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x147C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x14C5 DUP4 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1B7F AND JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x158F JUMPI PUSH1 0x60 DUP1 PUSH2 0x151D DUP6 PUSH2 0x137F JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1584 JUMPI PUSH1 0x0 PUSH2 0x1542 DUP10 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x541 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1552 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP2 PUSH2 0x1562 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP8 DUP2 LT DUP1 PUSH2 0x1571 JUMPI POP DUP8 ISZERO JUMPDEST ISZERO PUSH2 0x157A JUMPI DUP1 SWAP8 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x1529 JUMP JUMPDEST POP PUSH2 0x4EC SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x163F JUMPI PUSH1 0x0 PUSH2 0x15EC DUP5 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x1BEA AND JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 POP PUSH1 0x60 SWAP2 PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 SWAP2 PUSH2 0x6A3 SWAP2 DUP10 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x24 ADD PUSH2 0x280D JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x196D JUMPI PUSH1 0x0 DUP1 PUSH2 0x1695 DUP6 PUSH2 0x3BE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP6 POP SWAP1 SWAP4 POP PUSH1 0x60 SWAP3 POP PUSH32 0xE985E9C500000000000000000000000000000000000000000000000000000000 SWAP2 PUSH2 0x16EE SWAP2 DUP11 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH1 0x24 ADD PUSH2 0x280D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1776 SWAP2 SWAP1 PUSH2 0x27D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x17B1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x17B6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO DUP1 PUSH2 0x17CA JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ ISZERO JUMPDEST DUP1 PUSH2 0x17E6 JUMPI POP PUSH2 0x17E1 DUP2 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x1C49 AND JUMP JUMPDEST PUSH1 0x1 EQ ISZERO JUMPDEST ISZERO PUSH2 0x1940 JUMPI PUSH1 0x60 PUSH4 0x81812FC PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1806 SWAP2 SWAP1 PUSH2 0x2F10 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x40 MLOAD PUSH2 0x188A SWAP2 SWAP1 PUSH2 0x27D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x18C5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x18CA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP4 POP SWAP2 POP DUP3 DUP1 ISZERO PUSH2 0x18DE JUMPI POP DUP2 MLOAD PUSH1 0x20 EQ JUMPDEST DUP1 ISZERO PUSH2 0x1927 JUMPI POP PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x190F DUP4 PUSH1 0xC PUSH4 0xFFFFFFFF PUSH2 0x1BEA AND JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x1932 JUMPI PUSH1 0x0 PUSH2 0x1935 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND SWAP8 POP POP PUSH2 0xA32 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 POP POP POP POP POP POP PUSH2 0xB0B JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xB0B JUMPI PUSH1 0x0 PUSH2 0x19C2 DUP5 PUSH2 0x100C JUMP JUMPDEST POP POP PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP5 POP PUSH1 0x60 SWAP4 POP PUSH32 0xE985E9C500000000000000000000000000000000000000000000000000000000 SWAP3 PUSH2 0x1A19 SWAP3 POP DUP10 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x24 ADD PUSH2 0x280D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1AA1 SWAP2 SWAP1 PUSH2 0x27D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1ADC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1AE1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1AF4 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST DUP1 ISZERO PUSH2 0x1B10 JUMPI POP PUSH2 0x1B0C DUP2 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x1C49 AND JUMP JUMPDEST PUSH1 0x1 EQ JUMPDEST PUSH2 0x1B1B JUMPI PUSH1 0x0 PUSH2 0x1B3D JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x94CFCDD7 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1110 SWAP3 SWAP2 SWAP1 PUSH2 0x295C JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x1B73 DUP5 DUP5 PUSH2 0x1444 JUMP JUMPDEST SWAP2 POP PUSH2 0x49D DUP5 DUP5 PUSH2 0x4F2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1BBF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2D5E JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1C2A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2D01 JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C55 DUP4 DUP4 PUSH2 0x1E33 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1C6B JUMPI DUP2 PUSH2 0x1C55 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0x1C55 JUMPI POP POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 DUP3 MLOAD SWAP3 SWAP1 SWAP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1C55 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2CCA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x1D11 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2C93 JUMP JUMPDEST PUSH2 0x1D24 PUSH2 0x1D1E DUP6 DUP5 PUSH2 0x1E7C JUMP JUMPDEST DUP5 PUSH2 0x1ED0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1D68 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2BFF JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP4 GT ISZERO PUSH2 0x1DAA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2B91 JUMP JUMPDEST DUP4 MLOAD DUP3 GT ISZERO PUSH2 0x1DE5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2BC8 JUMP JUMPDEST DUP3 DUP3 SUB PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1E12 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x1C55 PUSH2 0x1E21 DUP3 PUSH2 0x1EE5 JUMP JUMPDEST DUP5 PUSH2 0x1E2B DUP8 PUSH2 0x1EE5 JUMP JUMPDEST ADD DUP4 MLOAD PUSH2 0x1EEB JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1E73 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2C36 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1E8B JUMPI POP PUSH1 0x0 PUSH2 0x4EC JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x1E98 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1C55 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2CCA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 PUSH2 0x1EDC JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1F15 JUMPI PUSH1 0x1 DUP2 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP4 MLOAD AND DUP2 DUP6 MLOAD AND DUP1 DUP3 OR DUP7 MSTORE POP POP POP PUSH2 0x1FAA JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0x1F22 JUMPI PUSH2 0x1FAA JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x1F5C JUMPI PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP2 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x1F54 JUMPI DUP5 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP5 ADD SWAP4 PUSH2 0x1F39 JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x1FAA JUMP JUMPDEST PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP4 MLOAD JUMPDEST DUP2 DUP7 SLT ISZERO PUSH2 0x1FA5 JUMPI DUP3 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1F6B JUMP JUMPDEST DUP6 MSTORE POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2003 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2016 PUSH2 0x2011 DUP3 PUSH2 0x2F4E JUMP JUMPDEST PUSH2 0x2F27 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xB06 JUMPI DUP2 MLOAD DUP8 ADD DUP9 PUSH1 0x3F DUP3 ADD SLT PUSH2 0x2042 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP2 ADD MLOAD PUSH2 0x2052 PUSH2 0x2011 DUP3 PUSH2 0x2F6F JUMP JUMPDEST DUP2 DUP2 MSTORE DUP11 PUSH1 0x40 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x2067 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2077 DUP3 DUP8 DUP4 ADD PUSH1 0x40 DUP7 ADD PUSH2 0x2FB2 JUMP JUMPDEST DUP7 MSTORE POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2027 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x209B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x20A9 PUSH2 0x2011 DUP3 PUSH2 0x2F4E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20E6 JUMPI PUSH2 0x20D1 DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x214E JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x20B9 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2100 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x210E PUSH2 0x2011 DUP3 PUSH2 0x2F4E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x212F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xB06 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2132 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x215E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x216C PUSH2 0x2011 DUP3 PUSH2 0x2F6F JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2183 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x21AF JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x21B8 DUP2 PUSH2 0x2F27 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x21C5 DUP4 DUP4 PUSH2 0x1FCF JUMP JUMPDEST DUP2 MSTORE PUSH2 0x21D4 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x1FCF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x21E6 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x1FCF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x21F8 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x1FCF JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x225A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2266 DUP7 DUP4 DUP8 ADD PUSH2 0x214E JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228F DUP6 DUP3 DUP7 ADD PUSH2 0x214E JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C55 DUP4 DUP4 PUSH2 0x1FCF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x22CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x22D5 DUP2 PUSH2 0x2FE2 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x22F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22FD DUP6 DUP3 DUP7 ADD PUSH2 0x208B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x231C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2326 DUP7 DUP7 PUSH2 0x1FCF JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2342 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x234E DUP9 DUP4 DUP10 ADD PUSH2 0x20F0 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2363 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x236F DUP9 DUP4 DUP10 ADD PUSH2 0x20F0 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2385 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2392 DUP8 DUP3 DUP9 ADD PUSH2 0x214E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x23BC DUP2 PUSH2 0x2FE2 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22FD DUP6 DUP3 DUP7 ADD PUSH2 0x214E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2401 DUP5 DUP5 PUSH2 0x1FCF JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2421 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2438 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x2449 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP PUSH2 0x2459 PUSH2 0x2011 DUP5 PUSH2 0x2F4E JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP4 DUP2 ADD DUP9 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x2491 JUMPI PUSH2 0x247F DUP13 DUP5 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x219C JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2468 JUMP JUMPDEST POP SWAP2 SWAP8 POP DUP9 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x24AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22FD DUP6 DUP3 DUP7 ADD PUSH2 0x208B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x24E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24EE DUP7 DUP4 DUP8 ADD PUSH2 0x20F0 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x24AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2516 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x252D JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x253E JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 MLOAD SWAP3 POP PUSH2 0x254E PUSH2 0x2011 DUP5 PUSH2 0x2F4E JUMP JUMPDEST DUP1 DUP5 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP5 ADD DUP11 DUP3 DUP4 DUP10 MUL DUP8 ADD ADD GT ISZERO PUSH2 0x256E JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP5 POP JUMPDEST DUP7 DUP6 LT ISZERO PUSH2 0x2590 JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x2572 JUMP JUMPDEST POP DUP9 ADD MLOAD SWAP1 SWAP7 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x25A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22FD DUP6 DUP3 DUP7 ADD PUSH2 0x1FF3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1C55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2600 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D24 DUP5 DUP3 DUP6 ADD PUSH2 0x214E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT DUP1 ISZERO PUSH2 0x261E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x2628 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x2633 PUSH1 0x60 PUSH2 0x2F27 JUMP JUMPDEST DUP3 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2643 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2675 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x268D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2699 DUP7 DUP4 DUP8 ADD PUSH2 0x219C JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x26AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22FD DUP6 DUP3 DUP7 ADD PUSH2 0x214E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD DUP1 DUP2 SWAP6 POP PUSH1 0x20 DUP4 MUL DUP2 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2722 JUMPI DUP3 DUP5 SUB DUP9 MSTORE PUSH2 0x270C DUP5 DUP4 MLOAD PUSH2 0x276A JUMP JUMPDEST PUSH1 0x20 SWAP9 DUP10 ADD SWAP9 SWAP1 SWAP5 POP SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x26F4 JUMP JUMPDEST POP SWAP2 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2760 JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2742 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2782 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2FB2 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0xFF AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x27E2 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2FB2 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP3 MSTORE PUSH1 0x80 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2863 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x272E JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2875 DUP2 DUP7 PUSH2 0x272E JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x1B3D DUP2 DUP7 PUSH2 0x276A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP5 MLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x20 SWAP1 PUSH1 0x80 DUP5 ADD SWAP1 DUP3 DUP9 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x28F0 JUMPI PUSH2 0x28DD DUP5 DUP4 MLOAD PUSH2 0x27B4 JUMP JUMPDEST PUSH1 0x60 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x28CA JUMP JUMPDEST POP POP POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE PUSH2 0x2904 DUP2 DUP8 PUSH2 0x272E JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE SWAP1 DUP4 ADD SWAP2 POP DUP3 DUP7 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x293B JUMPI DUP3 MLOAD ISZERO ISZERO DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x291D JUMP JUMPDEST POP SWAP2 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1C55 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x272E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x296F PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x272E JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2981 DUP2 DUP6 PUSH2 0x26D6 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x299D PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x272E JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2981 DUP2 DUP6 PUSH2 0x272E JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2981 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x276A JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP8 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2AB0 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x272E JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x2AC2 DUP2 DUP7 PUSH2 0x272E JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x2AD4 DUP2 DUP7 PUSH2 0x276A JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP6 AND DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2B6C PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x272E JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1375 DUP2 DUP6 PUSH2 0x26D6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1C55 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x276A JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x46524F4D5F4C4553535F5448414E5F544F5F5245515549524544000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x544F5F4C4553535F5448414E5F4C454E4754485F524551554952454400000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x55494E543235365F554E444552464C4F57000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x4449564953494F4E5F42595F5A45524F00000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x55494E543235365F4F564552464C4F5700000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F345F4C454E4754485F524551 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5549524544000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x57524F4E475F50524F58595F4944000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD PUSH2 0x2E00 DUP3 DUP7 PUSH2 0x27B4 JUMP JUMPDEST DUP4 PUSH1 0x60 DUP4 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x180 PUSH2 0x2E2D PUSH1 0x20 DUP5 ADD DUP6 MLOAD PUSH2 0x26BC JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x2E3F PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x26BC JUMP JUMPDEST POP PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x2E52 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x26BC JUMP JUMPDEST POP PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x2E65 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x26BC JUMP JUMPDEST POP PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xE0 DUP5 ADD MLOAD PUSH2 0x100 DUP2 DUP2 DUP7 ADD MSTORE DUP1 DUP7 ADD MLOAD SWAP2 POP POP PUSH2 0x120 DUP2 DUP2 DUP7 ADD MSTORE DUP1 DUP7 ADD MLOAD SWAP2 POP POP PUSH2 0x140 DUP2 DUP2 DUP7 ADD MSTORE DUP1 DUP7 ADD MLOAD SWAP2 POP POP PUSH2 0x160 DUP3 DUP2 DUP7 ADD MSTORE PUSH2 0x2ECC PUSH2 0x1A0 DUP7 ADD DUP4 PUSH2 0x276A JUMP JUMPDEST DUP2 DUP8 ADD MLOAD SWAP3 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 DUP3 SUB ADD DUP5 DUP8 ADD MSTORE PUSH2 0x2F05 DUP2 DUP5 PUSH2 0x276A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2F46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2F65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2F86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2FCD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2FB5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2FDC JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3004 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723058 KECCAK256 DUP15 0xd6 CALLER 0xa7 0x23 CALLVALUE MUL PUSH11 0xBA877C0A5AEE33464C32AE PUSH18 0x54932D0859088F2019A4CF236C6578706572 PUSH10 0x6D656E74616CF564736F PUSH13 0x63430005090040000000000000 ",
				"sourceMap": "928:7638:1:-;;;1148:159;8:9:-1;5:2;;;30:1;27;20:12;5:2;1148:159:1;;;;;;;;;;;;;;;;;;;;;1905:9:0;:32;;-1:-1:-1;;;;;;1905:32:0;-1:-1:-1;;;;;1905:32:0;;;;;;;;;;;1970:39;;;;;1905:32;;1970:9;;;;:23;;:39;;1994:14;;1970:39;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1970:39:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1970:39:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1970:39:0;;;;;;;;;1947:20;:62;;-1:-1:-1;;;;;;1947:62:0;-1:-1:-1;;;;;1947:62:0;;;;;;-1:-1:-1;2043:9:0;:40;;;;;:9;;;:23;;:40;;2067:15;;2043:40;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2043:40:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2043:40:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2043:40:0;;;;;;;;;2019:21;:64;;-1:-1:-1;;;;;;2019:64:0;-1:-1:-1;;;;;2019:64:0;;;;;;-1:-1:-1;2118:9:0;:41;;;;;:9;;;:23;;:41;;2142:16;;2118:41;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2118:41:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2118:41:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2118:41:0;;;;;;;;;2093:22;:66;;-1:-1:-1;;;;;;2093:66:0;-1:-1:-1;;;;;2093:66:0;;;;;;;;;;-1:-1:-1;1269:31:1;;;;:15;;:31;;;;;:::i;:::-;;1148:159;;928:7638;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;928:7638:1;;;-1:-1:-1;928:7638:1;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;5:134:-1:-;83:13;;-1:-1;;;;;2605:54;;3007:35;;2997:2;;3056:1;;3046:12;2997:2;68:71;;;;;597:263;;712:2;700:9;691:7;687:23;683:32;680:2;;;-1:-1;;718:12;680:2;780:64;836:7;812:22;780:64;;;770:74;674:186;-1:-1;;;674:186;867:496;;;1008:2;996:9;987:7;983:23;979:32;976:2;;;1024:1;1021;1014:12;976:2;1076:64;1132:7;1108:22;1076:64;;;1198:2;1183:18;;;1177:25;1066:74;;-1:-1;1198:2;-1:-1;;;;;1211:30;;;1208:2;;;1254:1;1251;1244:12;1208:2;1330:6;1319:9;1315:22;259:3;252:4;244:6;240:17;236:27;226:2;;277:1;274;267:12;226:2;307:6;301:13;287:27;;2109:18;2101:6;2098:30;2095:2;;;2141:1;2138;2131:12;2095:2;1008;1759:9;2204;2185:17;;-1:-1;;2181:33;1791:17;;;;1851:34;;;1887:22;;;1848:62;1845:2;;;1923:1;1920;1913:12;1845:2;1008;1932:22;399:21;;;499:16;;;;;496:25;-1:-1;493:2;;;534:1;531;524:12;493:2;2728:10;;;2744:101;2758:6;2755:1;2752:13;2744:101;;;2825:11;;;;;2819:18;2806:11;;;;;2799:39;2773:10;;;;2744:101;;;2860:6;2857:1;2854:13;2851:2;;;2925:1;1198:2;2916:6;475:5;2907:16;;2900:27;2851:2;1264:83;;;;;;;;970:393;;;;;;1487:209;2464:66;2453:78;;;;1439:36;;1603:2;1588:18;;1574:122;;928:7638:1;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x182 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9EADC835 GT PUSH2 0xD8 JUMPI DUP1 PUSH4 0xB6988463 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xD186037F GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD186037F EQ PUSH2 0x377 JUMPI DUP1 PUSH4 0xD3D862D1 EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0xE4E6E7DA EQ PUSH2 0x39D JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0xB6988463 EQ PUSH2 0x322 JUMPI DUP1 PUSH4 0xBBB2DCF6 EQ PUSH2 0x342 JUMPI DUP1 PUSH4 0xD001C5DC EQ PUSH2 0x364 JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0xA6627E9F GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xA6627E9F EQ PUSH2 0x2F4 JUMPI DUP1 PUSH4 0xB37FDA04 EQ PUSH2 0x307 JUMPI DUP1 PUSH4 0xB43CFFE1 EQ PUSH2 0x30F JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x9EADC835 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0xA28FE02E EQ PUSH2 0x2EC JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x590AA875 GT PUSH2 0x13A JUMPI DUP1 PUSH4 0x8EE1A642 GT PUSH2 0x114 JUMPI DUP1 PUSH4 0x8EE1A642 EQ PUSH2 0x27D JUMPI DUP1 PUSH4 0x8F4CE479 EQ PUSH2 0x285 JUMPI DUP1 PUSH4 0x8F5AFA52 EQ PUSH2 0x2A6 JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x590AA875 EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0x7D727512 EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0x7F46448D EQ PUSH2 0x25B JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x1BD0EB8F GT PUSH2 0x16B JUMPI DUP1 PUSH4 0x1BD0EB8F EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x2322CF76 EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0x4DFDAC20 EQ PUSH2 0x208 JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x4A5618A EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0xD7B7D76 EQ PUSH2 0x1B2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19A PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D7 JUMP JUMPDEST PUSH2 0x3BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2AE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C5 PUSH2 0x1C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x239E JUMP JUMPDEST PUSH2 0x484 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP3 SWAP2 SWAP1 PUSH2 0x2F19 JUMP JUMPDEST PUSH2 0x1DB PUSH2 0x4A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP2 SWAP1 PUSH2 0x29E4 JUMP JUMPDEST PUSH2 0x1FB PUSH2 0x1F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x239E JUMP JUMPDEST PUSH2 0x4CA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP2 SWAP1 PUSH2 0x2F10 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x216 CALLDATASIZE PUSH1 0x4 PUSH2 0x22B7 JUMP JUMPDEST PUSH2 0x4F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP2 SWAP1 PUSH2 0x2949 JUMP JUMPDEST PUSH2 0x23B PUSH2 0x236 CALLDATASIZE PUSH1 0x4 PUSH2 0x229B JUMP JUMPDEST PUSH2 0x575 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP2 SWAP1 PUSH2 0x2B7E JUMP JUMPDEST PUSH2 0x1FB PUSH2 0x256 CALLDATASIZE PUSH1 0x4 PUSH2 0x239E JUMP JUMPDEST PUSH2 0x614 JUMP JUMPDEST PUSH2 0x26E PUSH2 0x269 CALLDATASIZE PUSH1 0x4 PUSH2 0x240F JUMP JUMPDEST PUSH2 0xB12 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x28AD JUMP JUMPDEST PUSH2 0x1DB PUSH2 0xC4A JUMP JUMPDEST PUSH2 0x298 PUSH2 0x293 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D7 JUMP JUMPDEST PUSH2 0xC6E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP3 SWAP2 SWAP1 PUSH2 0x2A11 JUMP JUMPDEST PUSH2 0x2B9 PUSH2 0x2B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2662 JUMP JUMPDEST PUSH2 0xD16 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2DF2 JUMP JUMPDEST PUSH2 0x2DB PUSH2 0x2D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D7 JUMP JUMPDEST PUSH2 0x100C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A59 JUMP JUMPDEST PUSH2 0x1DB PUSH2 0x10CF JUMP JUMPDEST PUSH2 0x23B PUSH2 0x302 CALLDATASIZE PUSH1 0x4 PUSH2 0x23E4 JUMP JUMPDEST PUSH2 0x10F3 JUMP JUMPDEST PUSH2 0x1DB PUSH2 0x1195 JUMP JUMPDEST PUSH2 0x23B PUSH2 0x31D CALLDATASIZE PUSH1 0x4 PUSH2 0x2307 JUMP JUMPDEST PUSH2 0x11B9 JUMP JUMPDEST PUSH2 0x335 PUSH2 0x330 CALLDATASIZE PUSH1 0x4 PUSH2 0x23E4 JUMP JUMPDEST PUSH2 0x1261 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP2 SWAP1 PUSH2 0x27EC JUMP JUMPDEST PUSH2 0x355 PUSH2 0x350 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D7 JUMP JUMPDEST PUSH2 0x137F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B31 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x372 CALLDATASIZE PUSH1 0x4 PUSH2 0x22B7 JUMP JUMPDEST PUSH2 0x1444 JUMP JUMPDEST PUSH2 0x1FB PUSH2 0x385 CALLDATASIZE PUSH1 0x4 PUSH2 0x239E JUMP JUMPDEST PUSH2 0x14B2 JUMP JUMPDEST PUSH2 0x23B PUSH2 0x398 CALLDATASIZE PUSH1 0x4 PUSH2 0x24B7 JUMP JUMPDEST PUSH2 0x1B49 JUMP JUMPDEST PUSH2 0x3B0 PUSH2 0x3AB CALLDATASIZE PUSH1 0x4 PUSH2 0x22B7 JUMP JUMPDEST PUSH2 0x1B66 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP3 SWAP2 SWAP1 PUSH2 0x298A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x3D2 DUP5 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1B7F AND JUMP JUMPDEST SWAP3 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x458 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2DBB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x469 DUP5 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x1BEA AND JUMP JUMPDEST SWAP2 POP PUSH2 0x47C DUP5 PUSH1 0x24 PUSH4 0xFFFFFFFF PUSH2 0x1C49 AND JUMP JUMPDEST SWAP3 SWAP5 SWAP2 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x491 DUP5 DUP5 PUSH2 0x614 JUMP JUMPDEST SWAP2 POP PUSH2 0x49D DUP5 DUP5 PUSH2 0x14B2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x4D9 DUP6 DUP6 PUSH2 0x484 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x4E7 DUP3 DUP3 PUSH2 0x1C5C JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x524 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x56D JUMPI PUSH2 0x54E DUP6 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x541 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x14B2 JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x55A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x52A JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xF47261B0 PUSH1 0xE0 SHL DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x590 SWAP2 SWAP1 PUSH2 0x27EC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x627 DUP4 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1B7F AND JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x7A5 JUMPI PUSH1 0x0 PUSH2 0x686 DUP5 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x1BEA AND JUMP JUMPDEST SWAP1 POP PUSH1 0x60 PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6A3 SWAP2 SWAP1 PUSH2 0x27EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x72B SWAP2 SWAP1 PUSH2 0x27D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x766 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x76B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x77E JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0x789 JUMPI PUSH1 0x0 PUSH2 0x79A JUMP JUMPDEST PUSH2 0x79A DUP2 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x1C49 AND JUMP JUMPDEST SWAP6 POP POP POP POP POP PUSH2 0xB0B JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x852 JUMPI PUSH1 0x0 DUP1 PUSH2 0x7FB DUP6 PUSH2 0x3BE JUMP JUMPDEST SWAP3 POP SWAP3 POP POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x821 DUP4 DUP4 PUSH2 0x1261 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x843 JUMPI PUSH1 0x0 PUSH2 0x846 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND SWAP4 POP POP POP PUSH2 0xB0B JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xA3C JUMPI PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x8AA DUP7 PUSH2 0x100C JUMP JUMPDEST POP DUP2 MLOAD SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xA32 JUMPI PUSH1 0x60 PUSH3 0xFDD58E PUSH1 0xE0 SHL DUP11 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x8D7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8F0 SWAP3 SWAP2 SWAP1 PUSH2 0x2887 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x978 SWAP2 SWAP1 PUSH2 0x27D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9B3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9B8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 DUP1 ISZERO PUSH2 0x9CD JUMPI POP DUP2 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0x9D8 JUMPI PUSH1 0x0 PUSH2 0x9E9 JUMP JUMPDEST PUSH2 0x9E9 DUP3 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x1C49 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x9F9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP2 PUSH2 0xA09 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP12 DUP2 LT DUP1 PUSH2 0xA18 JUMPI POP DUP12 ISZERO JUMPDEST ISZERO PUSH2 0xA21 JUMPI DUP1 SWAP12 POP JUMPDEST POP POP PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 POP PUSH2 0x8BA SWAP2 POP POP JUMP JUMPDEST POP POP POP POP POP PUSH2 0xB0B JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xB0B JUMPI PUSH1 0x60 DUP1 PUSH2 0xA92 DUP6 PUSH2 0x137F JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xB06 JUMPI PUSH1 0x0 PUSH2 0xAC4 DUP10 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xAB7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x614 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAD4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP2 PUSH2 0xAE4 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP8 DUP2 LT DUP1 PUSH2 0xAF3 JUMPI POP DUP8 ISZERO JUMPDEST ISZERO PUSH2 0xAFC JUMPI DUP1 SWAP8 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0xA9E JUMP JUMPDEST POP POP POP POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH1 0x0 DUP6 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB57 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xB44 PUSH2 0x1FAF JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xB3C JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB84 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xBB1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xC41 JUMPI PUSH2 0xBEE DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBCD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xBE1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xD16 JUMP JUMPDEST DUP8 MLOAD DUP9 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0xBFC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xC0F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xC22 JUMPI INVALID JUMPDEST SWAP4 ISZERO ISZERO PUSH1 0x20 SWAP5 DUP6 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 SWAP1 MSTORE MSTORE PUSH1 0x1 ADD PUSH2 0xBB7 JUMP JUMPDEST POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC81 DUP4 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1B7F AND JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 EQ PUSH2 0xCFE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2DBB JUMP JUMPDEST PUSH2 0xD0F DUP4 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x1BEA AND JUMP JUMPDEST SWAP1 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH2 0xD1E PUSH2 0x1FAF JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0xC75E0A8100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xC75E0A81 SWAP1 PUSH2 0xD75 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2E16 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDA1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xDC5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x260C JUMP JUMPDEST DUP6 MLOAD PUSH1 0x0 SLOAD PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x9363470200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP4 SWAP7 POP SWAP2 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 PUSH4 0x93634702 SWAP2 PUSH2 0xE2A SWAP2 SWAP1 DUP6 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x29AF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE56 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xE7A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x25B5 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0xE8D DUP3 DUP9 PUSH2 0x140 ADD MLOAD PUSH2 0x4CA JUMP JUMPDEST PUSH1 0xA0 DUP9 ADD MLOAD PUSH1 0xC0 DUP10 ADD MLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x2 PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x100 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP6 SWAP7 POP SWAP4 SWAP5 SWAP3 SWAP4 PUSH1 0x60 SWAP4 SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xF45 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF1A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF45 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF28 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0xF66 DUP3 DUP13 PUSH2 0x140 ADD MLOAD PUSH2 0x1C72 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0xF8A JUMPI PUSH2 0xF83 DUP6 PUSH2 0xF7D DUP14 PUSH1 0x80 ADD MLOAD DUP7 PUSH2 0x1C97 JUMP JUMPDEST DUP7 PUSH2 0x1CD6 JUMP JUMPDEST SWAP1 POP PUSH2 0xFE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF96 DUP8 DUP5 PUSH2 0x4CA JUMP JUMPDEST SWAP1 POP DUP4 PUSH2 0xFB3 JUMPI PUSH2 0xFAC DUP7 DUP14 PUSH1 0x80 ADD MLOAD DUP8 PUSH2 0x1CD6 JUMP JUMPDEST SWAP2 POP PUSH2 0xFE4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFC4 DUP8 DUP15 PUSH1 0x80 ADD MLOAD DUP9 PUSH2 0x1CD6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xFD3 DUP4 DUP8 DUP10 PUSH2 0x1CD6 JUMP JUMPDEST SWAP1 POP PUSH2 0xFDF DUP3 DUP3 PUSH2 0x1C5C JUMP JUMPDEST SWAP4 POP POP POP JUMPDEST POP JUMPDEST PUSH2 0xFFD PUSH2 0xFF7 DUP6 DUP12 PUSH1 0x40 ADD MLOAD PUSH2 0x1D2C JUMP JUMPDEST DUP3 PUSH2 0x1C5C JUMP JUMPDEST SWAP8 POP POP POP POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP1 PUSH2 0x1023 DUP7 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x1B7F AND JUMP JUMPDEST SWAP5 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP6 AND PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x10A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2DBB JUMP JUMPDEST POP POP POP POP PUSH1 0x24 DUP3 DUP2 ADD MLOAD PUSH1 0x44 DUP5 ADD MLOAD PUSH1 0x64 DUP6 ADD MLOAD PUSH1 0x84 DUP7 ADD MLOAD SWAP5 SWAP7 SWAP3 SWAP6 SWAP2 DUP3 ADD DUP5 ADD SWAP5 SWAP1 DUP3 ADD DUP5 ADD SWAP4 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x2571792 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1110 SWAP3 SWAP2 SWAP1 PUSH2 0x2887 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xA7CB5FB7 PUSH1 0xE0 SHL DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x11DA SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2834 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH4 0x6352211E PUSH1 0xE0 SHL DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x127E SWAP2 SWAP1 PUSH2 0x2F10 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1306 SWAP2 SWAP1 PUSH2 0x27D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1341 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1346 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1359 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0x1364 JUMPI PUSH1 0x0 PUSH2 0x1375 JUMP JUMPDEST PUSH2 0x1375 DUP2 PUSH1 0xC PUSH4 0xFFFFFFFF PUSH2 0x1BEA AND JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x1394 DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x1B7F AND JUMP JUMPDEST SWAP3 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x1411 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2DBB JUMP JUMPDEST DUP4 MLOAD PUSH2 0x1427 SWAP1 DUP6 SWAP1 PUSH1 0x4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1D6E AND JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x143A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2504 JUMP JUMPDEST SWAP4 SWAP6 SWAP1 SWAP5 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1476 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x56D JUMPI PUSH2 0x1493 DUP6 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAB7 JUMPI INVALID JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x149F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x147C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x14C5 DUP4 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1B7F AND JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x158F JUMPI PUSH1 0x60 DUP1 PUSH2 0x151D DUP6 PUSH2 0x137F JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1584 JUMPI PUSH1 0x0 PUSH2 0x1542 DUP10 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x541 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1552 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP2 PUSH2 0x1562 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP8 DUP2 LT DUP1 PUSH2 0x1571 JUMPI POP DUP8 ISZERO JUMPDEST ISZERO PUSH2 0x157A JUMPI DUP1 SWAP8 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x1529 JUMP JUMPDEST POP PUSH2 0x4EC SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x163F JUMPI PUSH1 0x0 PUSH2 0x15EC DUP5 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x1BEA AND JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 POP PUSH1 0x60 SWAP2 PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 SWAP2 PUSH2 0x6A3 SWAP2 DUP10 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x24 ADD PUSH2 0x280D JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x196D JUMPI PUSH1 0x0 DUP1 PUSH2 0x1695 DUP6 PUSH2 0x3BE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP6 POP SWAP1 SWAP4 POP PUSH1 0x60 SWAP3 POP PUSH32 0xE985E9C500000000000000000000000000000000000000000000000000000000 SWAP2 PUSH2 0x16EE SWAP2 DUP11 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH1 0x24 ADD PUSH2 0x280D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1776 SWAP2 SWAP1 PUSH2 0x27D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x17B1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x17B6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO DUP1 PUSH2 0x17CA JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ ISZERO JUMPDEST DUP1 PUSH2 0x17E6 JUMPI POP PUSH2 0x17E1 DUP2 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x1C49 AND JUMP JUMPDEST PUSH1 0x1 EQ ISZERO JUMPDEST ISZERO PUSH2 0x1940 JUMPI PUSH1 0x60 PUSH4 0x81812FC PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1806 SWAP2 SWAP1 PUSH2 0x2F10 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x40 MLOAD PUSH2 0x188A SWAP2 SWAP1 PUSH2 0x27D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x18C5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x18CA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP4 POP SWAP2 POP DUP3 DUP1 ISZERO PUSH2 0x18DE JUMPI POP DUP2 MLOAD PUSH1 0x20 EQ JUMPDEST DUP1 ISZERO PUSH2 0x1927 JUMPI POP PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x190F DUP4 PUSH1 0xC PUSH4 0xFFFFFFFF PUSH2 0x1BEA AND JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x1932 JUMPI PUSH1 0x0 PUSH2 0x1935 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND SWAP8 POP POP PUSH2 0xA32 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 POP POP POP POP POP POP PUSH2 0xB0B JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xB0B JUMPI PUSH1 0x0 PUSH2 0x19C2 DUP5 PUSH2 0x100C JUMP JUMPDEST POP POP PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP5 POP PUSH1 0x60 SWAP4 POP PUSH32 0xE985E9C500000000000000000000000000000000000000000000000000000000 SWAP3 PUSH2 0x1A19 SWAP3 POP DUP10 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x24 ADD PUSH2 0x280D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1AA1 SWAP2 SWAP1 PUSH2 0x27D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1ADC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1AE1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1AF4 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST DUP1 ISZERO PUSH2 0x1B10 JUMPI POP PUSH2 0x1B0C DUP2 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x1C49 AND JUMP JUMPDEST PUSH1 0x1 EQ JUMPDEST PUSH2 0x1B1B JUMPI PUSH1 0x0 PUSH2 0x1B3D JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x94CFCDD7 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1110 SWAP3 SWAP2 SWAP1 PUSH2 0x295C JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x1B73 DUP5 DUP5 PUSH2 0x1444 JUMP JUMPDEST SWAP2 POP PUSH2 0x49D DUP5 DUP5 PUSH2 0x4F2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1BBF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2D5E JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1C2A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2D01 JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C55 DUP4 DUP4 PUSH2 0x1E33 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1C6B JUMPI DUP2 PUSH2 0x1C55 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0x1C55 JUMPI POP POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 DUP3 MLOAD SWAP3 SWAP1 SWAP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1C55 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2CCA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x1D11 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2C93 JUMP JUMPDEST PUSH2 0x1D24 PUSH2 0x1D1E DUP6 DUP5 PUSH2 0x1E7C JUMP JUMPDEST DUP5 PUSH2 0x1ED0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1D68 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2BFF JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP4 GT ISZERO PUSH2 0x1DAA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2B91 JUMP JUMPDEST DUP4 MLOAD DUP3 GT ISZERO PUSH2 0x1DE5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2BC8 JUMP JUMPDEST DUP3 DUP3 SUB PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1E12 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x1C55 PUSH2 0x1E21 DUP3 PUSH2 0x1EE5 JUMP JUMPDEST DUP5 PUSH2 0x1E2B DUP8 PUSH2 0x1EE5 JUMP JUMPDEST ADD DUP4 MLOAD PUSH2 0x1EEB JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1E73 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2C36 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1E8B JUMPI POP PUSH1 0x0 PUSH2 0x4EC JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x1E98 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1C55 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x2CCA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 PUSH2 0x1EDC JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1F15 JUMPI PUSH1 0x1 DUP2 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP4 MLOAD AND DUP2 DUP6 MLOAD AND DUP1 DUP3 OR DUP7 MSTORE POP POP POP PUSH2 0x1FAA JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0x1F22 JUMPI PUSH2 0x1FAA JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x1F5C JUMPI PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP2 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x1F54 JUMPI DUP5 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP5 ADD SWAP4 PUSH2 0x1F39 JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x1FAA JUMP JUMPDEST PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP4 MLOAD JUMPDEST DUP2 DUP7 SLT ISZERO PUSH2 0x1FA5 JUMPI DUP3 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1F6B JUMP JUMPDEST DUP6 MSTORE POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2003 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2016 PUSH2 0x2011 DUP3 PUSH2 0x2F4E JUMP JUMPDEST PUSH2 0x2F27 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xB06 JUMPI DUP2 MLOAD DUP8 ADD DUP9 PUSH1 0x3F DUP3 ADD SLT PUSH2 0x2042 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP2 ADD MLOAD PUSH2 0x2052 PUSH2 0x2011 DUP3 PUSH2 0x2F6F JUMP JUMPDEST DUP2 DUP2 MSTORE DUP11 PUSH1 0x40 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x2067 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2077 DUP3 DUP8 DUP4 ADD PUSH1 0x40 DUP7 ADD PUSH2 0x2FB2 JUMP JUMPDEST DUP7 MSTORE POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2027 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x209B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x20A9 PUSH2 0x2011 DUP3 PUSH2 0x2F4E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20E6 JUMPI PUSH2 0x20D1 DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x214E JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x20B9 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2100 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x210E PUSH2 0x2011 DUP3 PUSH2 0x2F4E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x212F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xB06 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2132 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x215E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x216C PUSH2 0x2011 DUP3 PUSH2 0x2F6F JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2183 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x21AF JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x21B8 DUP2 PUSH2 0x2F27 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x21C5 DUP4 DUP4 PUSH2 0x1FCF JUMP JUMPDEST DUP2 MSTORE PUSH2 0x21D4 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x1FCF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x21E6 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x1FCF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x21F8 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x1FCF JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x225A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2266 DUP7 DUP4 DUP8 ADD PUSH2 0x214E JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228F DUP6 DUP3 DUP7 ADD PUSH2 0x214E JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C55 DUP4 DUP4 PUSH2 0x1FCF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x22CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x22D5 DUP2 PUSH2 0x2FE2 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x22F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22FD DUP6 DUP3 DUP7 ADD PUSH2 0x208B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x231C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2326 DUP7 DUP7 PUSH2 0x1FCF JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2342 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x234E DUP9 DUP4 DUP10 ADD PUSH2 0x20F0 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2363 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x236F DUP9 DUP4 DUP10 ADD PUSH2 0x20F0 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2385 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2392 DUP8 DUP3 DUP9 ADD PUSH2 0x214E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x23BC DUP2 PUSH2 0x2FE2 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22FD DUP6 DUP3 DUP7 ADD PUSH2 0x214E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2401 DUP5 DUP5 PUSH2 0x1FCF JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2421 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2438 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x2449 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP PUSH2 0x2459 PUSH2 0x2011 DUP5 PUSH2 0x2F4E JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP4 DUP2 ADD DUP9 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x2491 JUMPI PUSH2 0x247F DUP13 DUP5 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x219C JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2468 JUMP JUMPDEST POP SWAP2 SWAP8 POP DUP9 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x24AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22FD DUP6 DUP3 DUP7 ADD PUSH2 0x208B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x24E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24EE DUP7 DUP4 DUP8 ADD PUSH2 0x20F0 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x24AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2516 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x252D JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x253E JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 MLOAD SWAP3 POP PUSH2 0x254E PUSH2 0x2011 DUP5 PUSH2 0x2F4E JUMP JUMPDEST DUP1 DUP5 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP5 ADD DUP11 DUP3 DUP4 DUP10 MUL DUP8 ADD ADD GT ISZERO PUSH2 0x256E JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP5 POP JUMPDEST DUP7 DUP6 LT ISZERO PUSH2 0x2590 JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x2572 JUMP JUMPDEST POP DUP9 ADD MLOAD SWAP1 SWAP7 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x25A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22FD DUP6 DUP3 DUP7 ADD PUSH2 0x1FF3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1C55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2600 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D24 DUP5 DUP3 DUP6 ADD PUSH2 0x214E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT DUP1 ISZERO PUSH2 0x261E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x2628 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x2633 PUSH1 0x60 PUSH2 0x2F27 JUMP JUMPDEST DUP3 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2643 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2675 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x268D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2699 DUP7 DUP4 DUP8 ADD PUSH2 0x219C JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x26AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22FD DUP6 DUP3 DUP7 ADD PUSH2 0x214E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD DUP1 DUP2 SWAP6 POP PUSH1 0x20 DUP4 MUL DUP2 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2722 JUMPI DUP3 DUP5 SUB DUP9 MSTORE PUSH2 0x270C DUP5 DUP4 MLOAD PUSH2 0x276A JUMP JUMPDEST PUSH1 0x20 SWAP9 DUP10 ADD SWAP9 SWAP1 SWAP5 POP SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x26F4 JUMP JUMPDEST POP SWAP2 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2760 JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2742 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2782 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2FB2 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0xFF AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x27E2 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2FB2 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP3 MSTORE PUSH1 0x80 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2863 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x272E JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2875 DUP2 DUP7 PUSH2 0x272E JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x1B3D DUP2 DUP7 PUSH2 0x276A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP5 MLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x20 SWAP1 PUSH1 0x80 DUP5 ADD SWAP1 DUP3 DUP9 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x28F0 JUMPI PUSH2 0x28DD DUP5 DUP4 MLOAD PUSH2 0x27B4 JUMP JUMPDEST PUSH1 0x60 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x28CA JUMP JUMPDEST POP POP POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE PUSH2 0x2904 DUP2 DUP8 PUSH2 0x272E JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE SWAP1 DUP4 ADD SWAP2 POP DUP3 DUP7 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x293B JUMPI DUP3 MLOAD ISZERO ISZERO DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x291D JUMP JUMPDEST POP SWAP2 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1C55 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x272E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x296F PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x272E JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2981 DUP2 DUP6 PUSH2 0x26D6 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x299D PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x272E JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2981 DUP2 DUP6 PUSH2 0x272E JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2981 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x276A JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP8 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2AB0 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x272E JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x2AC2 DUP2 DUP7 PUSH2 0x272E JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x2AD4 DUP2 DUP7 PUSH2 0x276A JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP6 AND DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2B6C PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x272E JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1375 DUP2 DUP6 PUSH2 0x26D6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1C55 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x276A JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x46524F4D5F4C4553535F5448414E5F544F5F5245515549524544000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x544F5F4C4553535F5448414E5F4C454E4754485F524551554952454400000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x55494E543235365F554E444552464C4F57000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x4449564953494F4E5F42595F5A45524F00000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x55494E543235365F4F564552464C4F5700000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F345F4C454E4754485F524551 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5549524544000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x57524F4E475F50524F58595F4944000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD PUSH2 0x2E00 DUP3 DUP7 PUSH2 0x27B4 JUMP JUMPDEST DUP4 PUSH1 0x60 DUP4 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x180 PUSH2 0x2E2D PUSH1 0x20 DUP5 ADD DUP6 MLOAD PUSH2 0x26BC JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x2E3F PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x26BC JUMP JUMPDEST POP PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x2E52 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x26BC JUMP JUMPDEST POP PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x2E65 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x26BC JUMP JUMPDEST POP PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xE0 DUP5 ADD MLOAD PUSH2 0x100 DUP2 DUP2 DUP7 ADD MSTORE DUP1 DUP7 ADD MLOAD SWAP2 POP POP PUSH2 0x120 DUP2 DUP2 DUP7 ADD MSTORE DUP1 DUP7 ADD MLOAD SWAP2 POP POP PUSH2 0x140 DUP2 DUP2 DUP7 ADD MSTORE DUP1 DUP7 ADD MLOAD SWAP2 POP POP PUSH2 0x160 DUP3 DUP2 DUP7 ADD MSTORE PUSH2 0x2ECC PUSH2 0x1A0 DUP7 ADD DUP4 PUSH2 0x276A JUMP JUMPDEST DUP2 DUP8 ADD MLOAD SWAP3 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 DUP3 SUB ADD DUP5 DUP8 ADD MSTORE PUSH2 0x2F05 DUP2 DUP5 PUSH2 0x276A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2F46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2F65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2F86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2FCD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2FB5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2FDC JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3004 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723058 KECCAK256 DUP15 0xd6 CALLER 0xa7 0x23 CALLVALUE MUL PUSH11 0xBA877C0A5AEE33464C32AE PUSH18 0x54932D0859088F2019A4CF236C6578706572 PUSH10 0x6D656E74616CF564736F PUSH13 0x63430005090040000000000000 ",
				"sourceMap": "928:7638:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;928:7638:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15906:518:0;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;12408:341;;;;;;;;;:::i;:::-;;;;;;;;;1007:52:2;;;:::i;:::-;;;;;;;;8185:379:1;;;;;;;;;:::i;:::-;;;;;;;;11574:423:0;;;;;;;;;:::i;:::-;;;;;;;;13899:232;;;;;;;;;:::i;:::-;;;;;;;;2680:3130;;;;;;;;;:::i;6699:820:1:-;;;;;;;;;:::i;:::-;;;;;;;;;;800:50:2;;;:::i;14446:433:0:-;;;;;;;;;:::i;:::-;;;;;;;;;2230:3461:1;;;;;;;;;:::i;:::-;;;;;;;;;;18122:1216:0;;;;;;;;;:::i;:::-;;;;;;;;;;;;893:51:2;;;:::i;15223:306:0:-;;;;;;;;;:::i;1103:56:2:-;;;:::i;16959:465:0:-;;;;;;;;;:::i;21383:505::-;;;;;;;;;:::i;:::-;;;;;;;;20489:602;;;;;;;;;:::i;:::-;;;;;;;;;;6207:391;;;;;;;;;:::i;7250:3908::-;;;;;;;;;:::i;19661:332::-;;;;;;;;;:::i;13242:386::-;;;;;;;;;:::i;:::-;;;;;;;;;15906:518;16019:19;;;16141:23;:9;16019:19;16141:23;:20;:23;:::i;:::-;16126:38;-1:-1:-1;16196:31:0;;;16212:15;16196:31;16175:92;;;;;;;;;;;;;;;;;;;;;;16293:25;:9;16315:2;16293:25;:21;:25;:::i;:::-;16278:40;-1:-1:-1;16338:25:0;:9;16360:2;16338:25;:21;:25;:::i;:::-;15906:518;;;;-1:-1:-1;;15906:518:0:o;12408:341::-;12541:15;12558:17;12601:35;12612:12;12626:9;12601:10;:35::i;:::-;12591:45;;12658:47;12681:12;12695:9;12658:22;:47::i;:::-;12646:59;-1:-1:-1;12408:341:0;;;;;:::o;1007:52:2:-;;;:::o;8185:379:1:-;8312:31;8360:15;8377:17;8398:57;8431:12;8445:9;8398:32;:57::i;:::-;8359:96;;;;8491:26;8498:7;8507:9;8491:6;:26::i;:::-;8465:52;-1:-1:-1;;;8185:379:1;;;;;:::o;11574:423:0:-;11705:27;11748:14;11765:9;:16;11748:33;;11818:6;11804:21;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;11804:21:0;-1:-1:-1;11791:34:0;-1:-1:-1;11840:9:0;11835:129;11860:6;11855:1;:11;11835:129;;11903:50;11926:12;11940:9;11950:1;11940:12;;;;;;;;;;;;;;11903:22;:50::i;:::-;11887:10;11898:1;11887:13;;;;;;;;;;;;;;;;;:66;11868:3;;11835:129;;;-1:-1:-1;;11574:423:0;;;;:::o;13899:232::-;13996:22;840:10:2;14069:14:0;;14085:12;14046:52;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;14046:52:0;;;49:4:-1;25:18;;61:17;;14046:52:0;182:15:-1;14046:52:0;;;;179:29:-1;;;;160:49;;;14046:52:0;-1:-1:-1;13899:232:0;;;:::o;2680:3130::-;2791:15;;2885:23;:9;2791:15;2885:23;:20;:23;:::i;:::-;2863:45;-1:-1:-1;2923:30:0;;;2939:14;2923:30;2919:2803;;;3008:20;3031:25;:9;3053:2;3031:25;:21;:25;:::i;:::-;3008:48;;3128:26;1051:10;3180:26;;3208:12;3157:64;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3157:64:0;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;3157:64:0;3128:93;;3266:12;3280:23;3307:12;:23;;3331:13;3307:38;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;3265:80:0;;;;3369:7;:34;;;;;3380:10;:17;3401:2;3380:23;3369:34;:66;;3434:1;3369:66;;;3406:25;:10;3429:1;3406:25;:22;:25;:::i;:::-;3359:76;;2919:2803;;;;;;;3456:31;;;3472:15;3456:31;3452:2270;;;3553:20;3575:15;3594:32;3616:9;3594:21;:32::i;:::-;3550:76;;;;;3749:12;3703:58;;:42;3723:12;3737:7;3703:19;:42::i;:::-;:58;;;:66;;3768:1;3703:66;;;3764:1;3703:66;3693:76;;;;3452:2270;;;;;3790:32;;;3806:16;3790:32;3786:1936;;;3917:20;3939:25;3966:28;3999:33;4022:9;3999:22;:33::i;:::-;-1:-1:-1;4064:15:0;;3914:118;;-1:-1:-1;3914:118:0;;-1:-1:-1;3914:118:0;-1:-1:-1;4064:15:0;-1:-1:-1;4047:14:0;4093:847;4118:6;4113:1;:11;4093:847;;4222:26;1465:10;4295:28;;4345:12;4379:8;4388:1;4379:11;;;;;;;;;;;;;;4251:157;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4251:157:0;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;4251:157:0;4222:186;;4461:12;4475:23;4502:12;:23;;4526:13;4502:38;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4460:80:0;;;;4558:20;4581:7;:34;;;;;4592:10;:17;4613:2;4592:23;4581:34;:66;;4646:1;4581:66;;;4618:25;:10;4641:1;4618:25;:22;:25;:::i;:::-;4558:89;;4746:21;4785:11;4797:1;4785:14;;;;;;;;;;;;;;4770:12;:29;;;;;;4746:53;;4837:7;4821:13;:23;:39;;;-1:-1:-1;4848:12:0;;4821:39;4817:109;;;4894:13;4884:23;;4817:109;-1:-1:-1;;4126:3:0;;;;;-1:-1:-1;4093:847:0;;-1:-1:-1;;4093:847:0;;;3786:1936;;;;;;;4960:36;;;4976:20;4960:36;4956:766;;;5074:29;5105:30;5139:31;5160:9;5139:20;:31::i;:::-;5202:22;;5071:99;;-1:-1:-1;5071:99:0;-1:-1:-1;5202:22:0;-1:-1:-1;5185:14:0;5238:474;5263:6;5258:1;:11;5238:474;;5351:20;5374:44;5385:12;5399:15;5415:1;5399:18;;;;;;;;;;;;;;5374:10;:44::i;:::-;5351:67;;5517:21;5556:12;5569:1;5556:15;;;;;;;;;;;;;;5541:12;:30;;;;;;5517:54;;5609:7;5593:13;:23;:39;;;-1:-1:-1;5620:12:0;;5593:39;5589:109;;;5666:13;5656:23;;5589:109;-1:-1:-1;;5271:3:0;;5238:474;;;;4956:766;;;;-1:-1:-1;2680:3130:0;;;;:::o;6699:820:1:-;6848:38;6900:42;6956:30;7011:14;7028:6;:13;7011:30;;7089:6;7064:32;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;7051:45;;7148:6;7134:21;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;7134:21:1;;7106:49;;7195:6;7184:18;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;7184:18:1;-1:-1:-1;7165:37:1;-1:-1:-1;7218:9:1;7213:225;7238:6;7233:1;:11;7213:225;;7334:93;7373:6;7380:1;7373:9;;;;;;;;;;;;;;7400:10;7411:1;7400:13;;;;;;;;;;;;;;7334:21;:93::i;:::-;7266:13;;:10;;7277:1;;7266:13;;;;;;;;;;;7281:25;7307:1;7281:28;;;;;;;;;;;;;7311:16;7328:1;7311:19;;;;;;;;7265:162;;;7311:19;;;;;;;;;;;7265:162;;;;;;;;7246:3;;7213:225;;;-1:-1:-1;;6699:820:1;;;;;:::o;800:50:2:-;;;:::o;14446:433:0:-;14558:19;;14651:23;:9;14558:19;14651:23;:20;:23;:::i;:::-;14636:38;-1:-1:-1;14706:30:0;;;14722:14;14706:30;14685:91;;;;;;;;;;;;;;14802:25;:9;14824:2;14802:25;:21;:25;:::i;:::-;14787:40;-1:-1:-1;14446:433:0;;;:::o;2230:3461:1:-;2372:35;;:::i;:::-;2421:32;2563:9;;:29;;;;;2421:32;;2563:9;;;:22;;:29;;2586:5;;2563:29;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2563:29:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2563:29:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2563:29:1;;;;;;;;;2668:18;;2645:20;2715:9;2755:19;;;;2715:118;;;;;2551:41;;-1:-1:-1;2668:18:1;;2715:9;;;;;:26;;:118;;2755:19;2668:18;;2814:9;;2715:118;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2715:118:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2715:118:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2715:118:1;;;;;;;;;2696:137;;2903:36;2942:62;2969:12;2983:5;:20;;;2942:26;:62::i;:::-;3113:22;;;;3164:14;;;;3216:15;3188:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2903:101;;-1:-1:-1;3113:22:1;;3164:14;;-1:-1:-1;;3188:43:1;3216:15;3188:43;;3216:15;3188:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3434:36;3484:41;3512:12;3484:5;:20;;;:27;;:41;;;;:::i;:::-;3480:1824;;;3731:174;3770:28;3816:41;3824:5;:22;;;3848:8;3816:7;:41::i;:::-;3875:16;3731:21;:174::i;:::-;3700:205;;3480:1824;;;4002:39;4044:54;4071:12;4085;4044:26;:54::i;:::-;4002:96;-1:-1:-1;4230:13:1;4226:1068;;4294:171;4337:28;4387:5;:22;;;4431:16;4294:21;:171::i;:::-;4263:202;;4226:1068;;;4723:38;4764:171;4807:28;4857:5;:22;;;4901:16;4764:21;:171::i;:::-;4723:212;;4953:41;4997:160;5040:31;5093:8;5123:16;4997:21;:160::i;:::-;4953:204;;5206:73;5213:30;5245:33;5206:6;:73::i;:::-;5175:104;;4226:1068;;;3480:1824;;5475:136;5495:64;5503:16;5521:9;:37;;;5495:7;:64::i;:::-;5573:28;5475:6;:136::i;:::-;5448:163;-1:-1:-1;;;;;;;2230:3461:1;;;;;:::o;18122:1216:0:-;18236:19;;18303:25;;;18449:23;:9;18236:19;18449:23;:20;:23;:::i;:::-;18434:38;-1:-1:-1;18504:32:0;;;18520:16;18504:32;18483:93;;;;;;;;;;;;;;-1:-1:-1;;;;18709:2:0;18694:18;;;18795:16;18908:18;;;18902:25;19028:18;;;19022:25;19149:18;;;19143:25;18122:1216;;18795:16;;18887:41;;;;;;19007;;;;;;19128;;;;18122:1216::o;893:51:2:-;;;:::o;15223:306:0:-;15338:22;934:10:2;15424:15:0;;15453:12;15479:7;15388:108;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;15388:108:0;;;49:4:-1;25:18;;61:17;;15388:108:0;182:15:-1;15388:108:0;;;;179:29:-1;;;;160:49;;;15388:108:0;-1:-1:-1;15223:306:0;;;;:::o;1103:56:2:-;;;:::o;16959:465:0:-;17180:22;1049:10:2;17266:16:0;;17296:12;17322:8;17344:11;17369:12;17230:161;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;17230:161:0;;;49:4:-1;25:18;;61:17;;17230:161:0;182:15:-1;17230:161:0;;;;179:29:-1;;;;160:49;;;17230:161:0;-1:-1:-1;16959:465:0;;;;;;:::o;21383:505::-;21496:20;21532:28;1214:10;21599:25;;21638:7;21563:92;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;21563:92:0;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;21563:92:0;21532:123;;21667:12;21681:23;21708:12;:23;;21732:15;21708:40;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;21666:82:0;;;;21775:7;:34;;;;;21786:10;:17;21807:2;21786:23;21775:34;21774:78;;21850:1;21774:78;;;21813:26;:10;21836:2;21813:26;:22;:26;:::i;:::-;21759:93;21383:505;-1:-1:-1;;;;;;21383:505:0:o;20489:602::-;20601:19;20634:24;;20742:23;:9;20601:19;20742:23;:20;:23;:::i;:::-;20727:38;-1:-1:-1;20797:36:0;;;20813:20;20797:36;20776:97;;;;;;;;;;;;;;20990:16;;20971:36;;20990:9;;20987:1;;20971:36;:15;:36;:::i;:::-;20947:104;;;;;;;;;;;;;;20489:602;;20918:133;;-1:-1:-1;20489:602:0;-1:-1:-1;;20489:602:0:o;6207:391::-;6326:25;6367:14;6384:9;:16;6367:33;;6435:6;6421:21;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;6421:21:0;-1:-1:-1;6410:32:0;-1:-1:-1;6457:9:0;6452:115;6477:6;6472:1;:11;6452:115;;6518:38;6529:12;6543:9;6553:1;6543:12;;;;;;;6518:38;6504:8;6513:1;6504:11;;;;;;;;;;;;;;;;;:52;6485:3;;6452:115;;7250:3908;7373:17;;7469:23;:9;7373:17;7469:23;:20;:23;:::i;:::-;7447:45;-1:-1:-1;7507:36:0;;;7523:20;7507:36;7503:818;;;7621:24;7647:30;7681:31;7702:9;7681:20;:31::i;:::-;7744:22;;7618:94;;-1:-1:-1;7618:94:0;-1:-1:-1;7744:22:0;-1:-1:-1;7727:14:0;7780:501;7805:6;7800:1;:11;7780:501;;7895:22;7920:56;7943:12;7957:15;7973:1;7957:18;;;;;;;7920:56;7895:81;;8077:23;8120:7;8128:1;8120:10;;;;;;;;;;;;;;8103:14;:27;;;;;;8077:53;;8170:9;8152:15;:27;:45;;;-1:-1:-1;8183:14:0;;8152:45;8148:119;;;8233:15;8221:27;;8148:119;-1:-1:-1;;7813:3:0;;7780:501;;;-1:-1:-1;8294:16:0;;-1:-1:-1;;;;8294:16:0;7503:818;8335:30;;;8351:14;8335:30;8331:2732;;;8420:20;8443:25;:9;8465:2;8443:25;:21;:25;:::i;:::-;8704:20;;8591:147;;8420:48;;-1:-1:-1;8562:26:0;;8631:25;;8591:147;;8674:12;;8704:20;;;8591:147;;;;8331:2732;8977:31;;;8993:15;8977:31;8973:2090;;;9074:20;9096:15;9115:32;9137:9;9115:21;:32::i;:::-;9409:21;;9285:159;;9071:76;;-1:-1:-1;9071:76:0;;-1:-1:-1;9249:33:0;;-1:-1:-1;9325:36:0;;9285:159;;9379:12;;9409:21;;;;;9285:159;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;9285:159:0;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;9285:159:0;9249:195;;9460:12;9474:23;9501:12;:23;;9525:20;9501:45;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;9459:87:0;;;;9634:7;9633:8;:35;;;;9645:10;:17;9666:2;9645:23;;9633:35;:69;;;-1:-1:-1;9672:25:0;:10;9695:1;9672:25;:22;:25;:::i;:::-;9701:1;9672:30;;9633:69;9629:702;;;9780:28;1367:10;9834:29;;9865:7;9811:62;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;9811:62:0;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;9811:62:0;9780:93;;9915:12;:23;;9939:15;9915:40;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;9891:64:0;;-1:-1:-1;9891:64:0;-1:-1:-1;9891:64:0;10078:34;;;;;10089:10;:17;10110:2;10089:23;10078:34;:89;;;;-1:-1:-1;10146:21:0;;;;10116:26;:10;10139:2;10116:26;:22;:26;:::i;:::-;:51;;;10078:89;:97;;10174:1;10078:97;;;10170:1;10078:97;10066:109;;;;9629:702;;;;964:2;10292:24;;8973:2090;;;;;;;;10351:32;;;10367:16;10351:32;10347:716;;;10443:20;10473:33;10496:9;10473:22;:33::i;:::-;-1:-1:-1;;10770:22:0;;10645:161;;10440:66;;-1:-1:-1;10609:33:0;;-1:-1:-1;10685:37:0;;10645:161;;-1:-1:-1;10740:12:0;;10770:22;;;10645:161;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;10645:161:0;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;10645:161:0;10609:197;;10853:12;10867:23;10894:12;:23;;10918:20;10894:45;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;10852:87:0;;;;10965:7;:34;;;;;10976:10;:17;10997:2;10976:23;10965:34;:68;;;;-1:-1:-1;11003:25:0;:10;11026:1;11003:25;:22;:25;:::i;:::-;11032:1;11003:30;10965:68;:87;;11051:1;10965:87;;;964:2;10965:87;10953:99;7250:3908;-1:-1:-1;;;;;;;;7250:3908:0:o;19661:332::-;19794:22;1149:10:2;19880:20:0;;19914:7;19935:15;19844:116;;;;;;;;;;13242:386;13384:25;13411:27;13465:41;13482:12;13496:9;13465:16;:41::i;:::-;13454:52;;13529:53;13558:12;13572:9;13529:28;:53::i;15595:687:14:-;15715:13;15777:5;15785:1;15777:9;15765:1;:8;:21;;15744:105;;;;;;;;;;;;;;-1:-1:-1;16023:13:14;15926:2;16023:13;16017:20;16176:66;16164:79;;15595:687::o;10270:886::-;10391:14;10454:5;10462:2;10454:10;10442:1;:8;:22;;10421:135;;;;;;;;;;;;;;-1:-1:-1;11058:13:14;10803:2;11058:13;11052:20;11074:42;11048:69;;10270:886::o;14710:220::-;14831:14;14878:21;14890:1;14893:5;14878:11;:21::i;:::-;14870:30;14710:220;-1:-1:-1;;;14710:220:14:o;1371:135:15:-;1456:7;1490:1;1486;:5;:13;;1498:1;1486:13;;;-1:-1:-1;1494:1:15;;1479:20;-1:-1:-1;1371:135:15:o;9653:403:14:-;9774:10;10003:3;:10;9989:3;:10;:24;:60;;;;-1:-1:-1;;10035:14:14;;;;;;;10017;;;;;;;;;;:32;;9653:403::o;716:230:15:-;802:7;837:5;;;873:6;;;;852:69;;;;;;;;;;;;;3133:425:5;3297:21;3369:1;3355:11;:15;3334:78;;;;;;;;;;;;;;3439:82;3460:26;3468:9;3479:6;3460:7;:26::i;:::-;3500:11;3439:7;:82::i;:::-;3423:98;3133:425;-1:-1:-1;;;;3133:425:5:o;502:208:15:-;588:7;637:1;632;:6;;611:70;;;;;;;;;;;;;;-1:-1:-1;698:5:15;;;502:208::o;6453:617:14:-;6587:19;6651:2;6643:4;:10;;6622:83;;;;;;;;;;;;;;6742:1;:8;6736:2;:14;;6715:89;;;;;;;;;;;;;;6905:4;6900:2;:9;6890:20;;;;;;;;;;;;;;;;;;;;;;;;;21:6:-1;;104:10;6890:20:14;87:34:-1;135:17;;-1:-1;6890:20:14;;6881:29;;6920:120;6941:23;:6;:21;:23::i;:::-;6999:4;6978:18;:1;:16;:18::i;:::-;:25;7017:6;:13;6920:7;:120::i;13292:490::-;13413:14;13476:5;13484:2;13476:10;13464:1;:8;:22;;13443:107;;;;;;;;;;;;;;-1:-1:-1;13729:13:14;13631:2;13729:13;13723:20;;13292:490::o;51:288:15:-;137:7;164:6;160:45;;-1:-1:-1;193:1:15;186:8;;160:45;226:5;;;230:1;226;:5;:1;262:5;;;;;:10;241:73;;;;;;;;;;;;;345:151;431:7;454:9;470:1;466;:5;;;;;;;345:151;-1:-1:-1;;;;345:151:15:o;1341:228:14:-;1520:2;1509:14;;1341:228::o;1808:4337::-;1958:2;1949:6;:11;1945:4194;;;2247:1;2237:6;2233:2;2229:15;2224:3;2220:25;2216:33;2298:4;2294:9;2285:6;2279:13;2275:29;2347:4;2340;2334:11;2330:22;2388:1;2385;2382:8;2376:4;2369:22;;;;2186:219;;;2509:4;2499:6;:14;2495:59;;;2533:7;;2495:59;3243:4;3234:6;:13;3230:2899;;;3569:2;3561:6;3557:15;3547:25;;3617:6;3609;3605:19;3667:6;3661:4;3657:17;3974:4;3968:11;4242:198;4260:4;4252:6;4249:16;4242:198;;;4308:13;;4295:27;;4369:2;4405:13;;;;4357:15;;;;4242:198;;;4529:18;;-1:-1:-1;3276:1289:14;;;4810:2;4802:6;4798:15;4788:25;;4858:6;4850;4846:19;4908:6;4902:4;4898:17;5218:6;5212:13;5797:191;5814:4;5808;5804:15;5797:191;;;5862:11;;5849:25;;5907:13;;;;;5953;;;;5797:191;;;6078:19;;-1:-1:-1;;4612:1503:14;1808:4337;;;:::o;928:7638:1:-;;;;;;;;;-1:-1:-1;928:7638:1;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;50847:42;50836:54;;51664:35;;51654:2;;51713:1;;51703:12;158:693;;287:3;280:4;272:6;268:17;264:27;254:2;;-1:-1;;295:12;254:2;335:6;329:13;357:81;372:65;430:6;372:65;;;357:81;;;466:21;;;348:90;-1:-1;510:4;523:14;;;;498:17;;;618:1;603:242;628:6;625:1;622:13;603:242;;;704:3;698:10;502:6;686:23;4650:3;4631:17;686:23;4631:17;4627:27;4617:2;;618:1;;4658:12;4617:2;510:4;686:23;;4692:13;4720:60;4735:44;4772:6;4735:44;;4720:60;4800:6;4793:5;4786:21;4904:3;4824:17;4895:6;686:23;4886:16;;4883:25;4880:2;;;618:1;;4911:12;4880:2;4931:39;4963:6;4869:4;4862:5;4858:16;4824:17;686:23;4824:17;4931:39;;;716:66;;-1:-1;;796:14;;;;824;;;;650:1;643:9;603:242;;875:693;;997:3;990:4;982:6;978:17;974:27;964:2;;-1:-1;;1005:12;964:2;1052:6;1039:20;1074:85;1089:69;1151:6;1089:69;;1074:85;1187:21;;;1065:94;-1:-1;1231:4;1244:14;;;;1219:17;;1339:1;1324:238;1349:6;1346:1;1343:13;1324:238;;;1456:42;1494:3;1231:4;1432:3;1419:17;1223:6;1407:30;;1456:42;;;1444:55;;1231:4;1513:14;;;;1541;;;;;1371:1;1364:9;1324:238;;;1328:14;;;;957:611;;;;;3109:707;;3226:3;3219:4;3211:6;3207:17;3203:27;3193:2;;-1:-1;;3234:12;3193:2;3281:6;3268:20;3303:80;3318:64;3375:6;3318:64;;3303:80;3411:21;;;3294:89;-1:-1;3455:4;3468:14;;;;3443:17;;;3557;;;3548:27;;;;3545:36;-1:-1;3542:2;;;3594:1;;3584:12;3542:2;3619:1;3604:206;3629:6;3626:1;3623:13;3604:206;;;10712:20;;3697:50;;3761:14;;;;3789;;;;3651:1;3644:9;3604:206;;4101:432;;4198:3;4191:4;4183:6;4179:17;4175:27;4165:2;;-1:-1;;4206:12;4165:2;4253:6;4240:20;4275:60;4290:44;4327:6;4290:44;;4275:60;4266:69;;4355:6;4348:5;4341:21;4459:3;4391:4;4450:6;4383;4441:16;;4438:25;4435:2;;;4476:1;;4466:12;4435:2;51151:6;4391:4;4383:6;4379:17;4391:4;4417:5;4413:16;51128:30;51207:1;51189:16;;;4391:4;51189:16;51182:27;4417:5;4158:375;-1:-1;;4158:375;6189:2205;;6297:5;;6285:9;6280:3;6276:19;6272:31;6269:2;;;-1:-1;;6306:12;6269:2;6334:21;6349:5;6334:21;;;6325:30;;;6444:49;6489:3;6465:22;6444:49;;;6427:15;6420:74;6596:49;6641:3;6563:2;6621:9;6617:22;6596:49;;;6563:2;6582:5;6578:16;6571:75;6755:49;6800:3;6722:2;6780:9;6776:22;6755:49;;;6722:2;6741:5;6737:16;6730:75;6908:49;6953:3;6875:2;6933:9;6929:22;6908:49;;;6875:2;6894:5;6890:16;6883:75;7031:3;7090:9;7086:22;10712:20;7031:3;7051:5;7047:16;7040:75;7188:3;7247:9;7243:22;10712:20;7188:3;7208:5;7204:16;7197:75;7337:3;7396:9;7392:22;10712:20;7337:3;7357:5;7353:16;7346:75;7486:3;7545:9;7541:22;10712:20;7486:3;7506:5;7502:16;7495:75;7648:3;7719:6;7708:9;7704:22;10712:20;7675:5;7668;7664:17;7657:76;;7794:3;7865:6;7854:9;7850:22;10712:20;7821:5;7814;7810:17;7803:76;;7978:3;;7967:9;7963:19;7950:33;8003:18;;7995:6;7992:30;7989:2;;;6413:1;;8025:12;7989:2;8071:54;8121:3;8112:6;8101:9;8097:22;8071:54;;;8063:5;8056;8052:17;8045:81;8225:3;;;;8214:9;8210:19;8197:33;8183:47;;8250:18;8242:6;8239:30;8236:2;;;6413:1;;8272:12;8236:2;;8318:54;8368:3;8359:6;8348:9;8344:22;8318:54;;;8310:5;8303;8299:17;8292:81;;;6263:2131;;;;;11060:241;;11164:2;11152:9;11143:7;11139:23;11135:32;11132:2;;;-1:-1;;11170:12;11132:2;11232:53;11277:7;11253:22;11232:53;;11308:512;;;11459:2;11447:9;11438:7;11434:23;11430:32;11427:2;;;-1:-1;;11465:12;11427:2;85:6;72:20;97:33;124:5;97:33;;;11517:63;-1:-1;11645:2;11630:18;;11617:32;11669:18;11658:30;;11655:2;;;-1:-1;;11691:12;11655:2;11721:83;11796:7;11787:6;11776:9;11772:22;11721:83;;;11711:93;;;11421:399;;;;;;11827:993;;;;;12041:3;12029:9;12020:7;12016:23;12012:33;12009:2;;;12058:1;12055;12048:12;12009:2;12110:53;12155:7;12131:22;12110:53;;;12100:63;;12228:2;12217:9;12213:18;12200:32;12252:18;;12244:6;12241:30;12238:2;;;12284:1;12281;12274:12;12238:2;12304:78;12374:7;12365:6;12354:9;12350:22;12304:78;;;12294:88;;12447:2;12436:9;12432:18;12419:32;12405:46;;12471:18;12463:6;12460:30;12457:2;;;12503:1;12500;12493:12;12457:2;12523:78;12593:7;12584:6;12573:9;12569:22;12523:78;;;12513:88;;12666:2;12655:9;12651:18;12638:32;12624:46;;12690:18;12682:6;12679:30;12676:2;;;-1:-1;;12712:12;12676:2;;12742:62;12796:7;12787:6;12776:9;12772:22;12742:62;;;12732:72;;;12003:817;;;;;;;;12827:470;;;12957:2;12945:9;12936:7;12932:23;12928:32;12925:2;;;-1:-1;;12963:12;12925:2;85:6;72:20;97:33;124:5;97:33;;;13015:63;-1:-1;13143:2;13128:18;;13115:32;13167:18;13156:30;;13153:2;;;-1:-1;;13189:12;13153:2;13219:62;13273:7;13264:6;13253:9;13249:22;13219:62;;13304:366;;;13425:2;13413:9;13404:7;13400:23;13396:32;13393:2;;;-1:-1;;13431:12;13393:2;13493:53;13538:7;13514:22;13493:53;;;13483:63;13583:2;13622:22;;;;10712:20;;-1:-1;;;13387:283;13677:686;;;13872:2;13860:9;13851:7;13847:23;13843:32;13840:2;;;13888:1;13885;13878:12;13840:2;13936:17;13923:31;13974:18;;13966:6;13963:30;13960:2;;;14006:1;14003;13996:12;13960:2;14106:6;14095:9;14091:22;1744:3;1737:4;1729:6;1725:17;1721:27;1711:2;;1762:1;1759;1752:12;1711:2;1799:6;1786:20;1772:34;;1821:99;1836:83;1912:6;1836:83;;1821:99;1948:21;;;1992:4;2005:14;;;;1926:16;1980:17;;;2091:10;2085:252;2110:6;2107:1;2104:13;2085:252;;;2217:56;2269:3;1992:4;2193:3;2180:17;1984:6;2168:30;;2217:56;;;2205:69;;2288:14;;;;2316;;;;2132:1;2125:9;2085:252;;;-1:-1;14016:107;;-1:-1;14173:18;;14160:32;;-1:-1;;;;14201:30;;;14198:2;;;-1:-1;;14234:12;14198:2;;14264:83;14339:7;14330:6;14319:9;14315:22;14264:83;;14370:648;;;14546:2;14534:9;14525:7;14521:23;14517:32;14514:2;;;-1:-1;;14552:12;14514:2;14610:17;14597:31;14648:18;;14640:6;14637:30;14634:2;;;-1:-1;;14670:12;14634:2;14700:78;14770:7;14761:6;14750:9;14746:22;14700:78;;;14690:88;;14843:2;14832:9;14828:18;14815:32;14801:46;;14867:18;14859:6;14856:30;14853:2;;;-1:-1;;14889:12;15025:651;;;15204:2;15192:9;15183:7;15179:23;15175:32;15172:2;;;15220:1;15217;15210:12;15172:2;15261:17;15255:24;15299:18;;15291:6;15288:30;15285:2;;;15331:1;15328;15321:12;15285:2;15419:6;15408:9;15404:22;2493:3;2486:4;2478:6;2474:17;2470:27;2460:2;;2511:1;2508;2501:12;2460:2;2541:6;2535:13;2521:27;;2563:76;2578:60;2631:6;2578:60;;2563:76;2645:16;2681:6;2674:5;2667:21;2711:4;2733;2728:3;2724:14;2717:21;;2711:4;2703:6;2699:17;2833:3;2711:4;2825;2817:6;2813:17;2703:6;2804:27;;2801:36;2798:2;;;2850:1;2847;2840:12;2798:2;2866:10;;;2860:217;2885:6;2882:1;2879:13;2860:217;;;10860:13;;2953:61;;2907:1;2900:9;;;;;3028:14;;;;3056;;2860:217;;;-1:-1;15479:18;;15473:25;15341:95;;-1:-1;15473:25;-1:-1;;;15507:30;;;15504:2;;;-1:-1;;15540:12;15504:2;;15570:90;15652:7;15643:6;15632:9;15628:22;15570:90;;15683:257;;15795:2;15783:9;15774:7;15770:23;15766:32;15763:2;;;-1:-1;;15801:12;15763:2;3905:6;3899:13;51810:5;50518:13;50511:21;51788:5;51785:32;51775:2;;-1:-1;;51821:12;15947:345;;16060:2;16048:9;16039:7;16035:23;16031:32;16028:2;;;-1:-1;;16066:12;16028:2;16124:17;16111:31;16162:18;16154:6;16151:30;16148:2;;;-1:-1;;16184:12;16148:2;16214:62;16268:7;16259:6;16248:9;16244:22;16214:62;;16299:317;;16441:2;16429:9;16420:7;16416:23;16412:32;;16409:2;;;16457:1;16454;16447:12;16409:2;5567:30;5564:2;;;5610:1;5607;5600:12;5564:2;;5628:20;16441:2;5628:20;;;11005:6;10999:13;51052:4;52178:5;51041:16;52155:5;52152:33;52142:2;;52199:1;52196;52189:12;52142:2;5712:83;;5861:2;5926:22;;;4037:13;5876:16;;;5869:86;6039:2;6104:22;;;10860:13;6054:16;;;6047:86;;;;-1:-1;5719:15;16403:213;-1:-1;16403:213;16623:602;;;16776:2;16764:9;16755:7;16751:23;16747:32;16744:2;;;-1:-1;;16782:12;16744:2;16840:17;16827:31;16878:18;;16870:6;16867:30;16864:2;;;-1:-1;;16900:12;16864:2;16930:76;16998:7;16989:6;16978:9;16974:22;16930:76;;;16920:86;;17071:2;17060:9;17056:18;17043:32;17029:46;;17095:18;17087:6;17084:30;17081:2;;;-1:-1;;17117:12;17081:2;;17147:62;17201:7;17192:6;17181:9;17177:22;17147:62;;18048:103;50847:42;50836:54;18109:37;;18103:48;19004:888;;19212:5;47686:12;49052:6;49047:3;49040:19;49089:4;49084:3;49080:14;19224:98;;;;49089:4;19379:6;19375:17;19370:3;19366:27;19354:39;;49089:4;19469:5;47041:14;-1:-1;19508:345;19533:6;19530:1;19527:13;19508:345;;;19595:9;19589:4;19585:20;19580:3;19573:33;17514:60;17570:3;19640:6;19634:13;17514:60;;;49089:4;19832:14;;;;19654:82;;-1:-1;48525:14;;;;;19555:1;19548:9;19508:345;;;-1:-1;19876:10;;19138:754;-1:-1;;;;;;19138:754;20880:690;;21073:5;47686:12;49052:6;49047:3;49040:19;49089:4;49084:3;49080:14;21085:93;;49089:4;21249:5;47041:14;-1:-1;21288:260;21313:6;21310:1;21307:13;21288:260;;;21374:13;;21851:37;;49089:4;18020:14;;;;48525;;;;21335:1;21328:9;21288:260;;;-1:-1;21554:10;;21004:566;-1:-1;;;;21004:566;22137:343;;22279:5;47686:12;49052:6;49047:3;49040:19;22372:52;22417:6;49089:4;49084:3;49080:14;49089:4;22398:5;22394:16;22372:52;;;51588:2;51568:14;51584:7;51564:28;22436:39;;;;49089:4;22436:39;;22227:253;-1:-1;;22227:253;26893:663;27113:22;;51052:4;51041:16;30914:35;;27283:4;27272:16;;;27266:23;27343:14;;;21851:37;27460:4;27449:16;;;27443:23;27520:14;;21851:37;27013:543;30961:262;;22647:5;47686:12;22758:52;22803:6;22798:3;22791:4;22784:5;22780:16;22758:52;;;22822:16;;;;;31086:137;-1:-1;;31086:137;31230:213;50847:42;50836:54;;;;18109:37;;31348:2;31333:18;;31319:124;31450:324;50847:42;50836:54;;;18109:37;;50836:54;;31760:2;31745:18;;18109:37;31596:2;31581:18;;31567:207;31781:927;;50847:42;50840:5;50836:54;18116:3;18109:37;32101:3;32220:2;32209:9;32205:18;32198:48;32260:108;32101:3;32090:9;32086:19;32354:6;32260:108;;;32416:9;32410:4;32406:20;32401:2;32390:9;32386:18;32379:48;32441:108;32544:4;32535:6;32441:108;;;32597:9;32591:4;32587:20;32582:2;32571:9;32567:18;32560:48;32622:76;32693:4;32684:6;32622:76;;32715:324;50847:42;50836:54;;;;18109:37;;33025:2;33010:18;;21851:37;32861:2;32846:18;;32832:207;33046:959;33410:2;33424:47;;;47686:12;;33395:18;;;49040:19;;;33046:959;;49089:4;;49080:14;;;;47041;;;33046:959;20490:329;20515:6;20512:1;20509:13;20490:329;;;17722:96;17814:3;20582:6;20576:13;17722:96;;;33410:2;17838:14;;;;;48525;;;;20537:1;20530:9;20490:329;;;20494:14;;;33687:9;33681:4;33677:20;33672:2;33661:9;33657:18;33650:48;33712:108;33815:4;33806:6;33712:108;;;33858:20;;;33853:2;33838:18;;33831:48;47686:12;;49040:19;;;49080:14;;;;-1:-1;47041:14;;;;-1:-1;18696:251;18721:6;18718:1;18715:13;18696:251;;;18782:13;;50518;50511:21;21633:34;;17374:14;;;;48525;;;;18743:1;18736:9;18696:251;;;-1:-1;33885:110;;33381:624;-1:-1;;;;;;;;33381:624;34012:361;;34180:2;34201:17;34194:47;34255:108;34180:2;34169:9;34165:18;34349:6;34255:108;;34380:640;;34636:2;34657:17;34650:47;34711:108;34636:2;34625:9;34621:18;34805:6;34711:108;;;34867:9;34861:4;34857:20;34852:2;34841:9;34837:18;34830:48;34892:118;35005:4;34996:6;34892:118;;;34884:126;34607:413;-1:-1;;;;;34607:413;35027:620;;35273:2;35294:17;35287:47;35348:108;35273:2;35262:9;35258:18;35442:6;35348:108;;;35504:9;35498:4;35494:20;35489:2;35478:9;35474:18;35467:48;35529:108;35632:4;35623:6;35529:108;;35654:519;;21881:5;21858:3;21851:37;50847:42;50840:5;50836:54;36010:2;35999:9;35995:18;18109:37;35846:2;36047;36036:9;36032:18;36025:48;36087:76;35846:2;35835:9;35831:18;36149:6;36087:76;;36180:209;50695:66;50684:78;;;;22089:36;;36296:2;36281:18;;36267:122;36396:320;50695:66;50684:78;;;;22089:36;;50847:42;50836:54;36702:2;36687:18;;18109:37;36540:2;36525:18;;36511:205;36723:1035;;50695:66;22118:5;50684:78;22096:3;22089:36;50847:42;50840:5;50836:54;37232:2;37221:9;37217:18;18109:37;37069:3;37269:2;37258:9;37254:18;37247:48;37309:108;37069:3;37058:9;37054:19;37403:6;37309:108;;;37465:9;37459:4;37455:20;37450:2;37439:9;37435:18;37428:48;37490:108;37593:4;37584:6;37490:108;;;37647:9;37641:4;37637:20;37631:3;37620:9;37616:19;37609:49;37672:76;37743:4;37734:6;37672:76;;;37664:84;37040:718;-1:-1;;;;;;;;;37040:718;37765:431;50695:66;50684:78;;;;22089:36;;50847:42;50836:54;;;;38099:2;38084:18;;18109:37;38182:2;38167:18;;21851:37;37937:2;37922:18;;37908:288;38203:747;;50695:66;22118:5;50684:78;22096:3;22089:36;38485:2;38601;38590:9;38586:18;38579:48;38641:108;38485:2;38474:9;38470:18;38735:6;38641:108;;;38797:9;38791:4;38787:20;38782:2;38771:9;38767:18;38760:48;38822:118;38935:4;38926:6;38822:118;;38957:297;;39093:2;39114:17;39107:47;39168:76;39093:2;39082:9;39078:18;39230:6;39168:76;;39261:407;39452:2;39466:47;;;23397:2;39437:18;;;49040:19;23433:66;49080:14;;;23413:87;23519:12;;;39423:245;39675:407;39866:2;39880:47;;;23770:2;39851:18;;;49040:19;23806:66;49080:14;;;23786:87;23892:12;;;39837:245;40089:407;40280:2;40294:47;;;24143:2;40265:18;;;49040:19;24179:66;49080:14;;;24159:87;24265:12;;;40251:245;40503:407;40694:2;40708:47;;;24516:2;40679:18;;;49040:19;24552:66;49080:14;;;24532:87;24653:66;24639:12;;;24632:88;24739:12;;;40665:245;40917:407;41108:2;41122:47;;;24990:2;41093:18;;;49040:19;25026:66;49080:14;;;25006:87;25112:12;;;41079:245;41331:407;41522:2;41536:47;;;25363:2;41507:18;;;49040:19;25399:66;49080:14;;;25379:87;25485:12;;;41493:245;41745:407;41936:2;41950:47;;;25736:2;41921:18;;;49040:19;25772:66;49080:14;;;25752:87;25873:66;25859:12;;;25852:88;25959:12;;;41907:245;42159:407;42350:2;42364:47;;;26210:2;42335:18;;;49040:19;26246:66;49080:14;;;26226:87;26347:66;26333:12;;;26326:88;26433:12;;;42321:245;42573:407;42764:2;42778:47;;;26684:2;42749:18;;;49040:19;26720:66;49080:14;;;26700:87;26806:12;;;42735:245;42987:533;43209:3;43194:19;;43224:125;43198:9;43322:6;43224:125;;;21881:5;43428:2;43417:9;43413:18;21851:37;21660:5;50518:13;50511:21;43505:3;43494:9;43490:19;21633:34;43180:340;;;;;;;43527:353;;43691:2;43712:17;43705:47;28480:5;28583:62;43691:2;43680:9;43676:18;28561:15;28555:22;28583:62;;;43691:2;28725:5;28721:16;28715:23;28744:63;28792:14;43680:9;28792:14;28778:12;28744:63;;;;28792:14;28894:5;28890:16;28884:23;28913:63;28961:14;43680:9;28961:14;28947:12;28913:63;;;;28961:14;29057:5;29053:16;29047:23;29076:63;29124:14;43680:9;29124:14;29110:12;29076:63;;;;29124:14;29223:5;29219:16;29213:23;29290:14;43680:9;29290:14;21851:37;29290:14;29389:5;29385:16;29379:23;29456:14;43680:9;29456:14;21851:37;29456:14;29547:5;29543:16;29537:23;29614:14;43680:9;29614:14;21851:37;29614:14;29705:5;29701:16;29695:23;29772:14;21881:5;29772:14;43680:9;29772:14;21851:37;29883:5;29876;29872:17;29866:24;29846:44;;;29944:15;21881:5;29944:15;43680:9;29944:15;21851:37;30039:5;30032;30028:17;30022:24;30002:44;;;30100:15;21881:5;30100:15;43680:9;30100:15;21851:37;30205:5;30198;30194:17;30188:24;30168:44;;;30232:15;30249:14;30232:15;43680:9;30232:15;30225:39;30279:67;28471:15;43680:9;28471:15;30327:12;30279:67;;;30441:5;30434;30430:17;30424:24;30404:44;;30485:14;43680:9;30489:4;30485:14;;30468:15;43680:9;30468:15;30461:39;30515:67;30577:4;30563:12;30515:67;;;43758:112;43662:218;-1:-1;;;;;;;43662:218;43887:213;21851:37;;;44005:2;43990:18;;43976:124;44107:324;21851:37;;;44417:2;44402:18;;21851:37;44253:2;44238:18;;44224:207;44438:256;44500:2;44494:9;44526:17;;;44601:18;44586:34;;44622:22;;;44583:62;44580:2;;;44658:1;;44648:12;44580:2;44500;44667:22;44478:216;;-1:-1;44478:216;44701:305;;44861:18;44853:6;44850:30;44847:2;;;-1:-1;;44883:12;44847:2;-1:-1;44928:4;44916:17;;;44981:15;;44784:222;46277:317;;46416:18;46408:6;46405:30;46402:2;;;-1:-1;;46438:12;46402:2;-1:-1;46515:4;46492:17;46511:9;46488:33;46579:4;46569:15;;46339:255;51224:268;51289:1;51296:101;51310:6;51307:1;51304:13;51296:101;;;51377:11;;;51371:18;51358:11;;;51351:39;51332:2;51325:10;51296:101;;;51412:6;51409:1;51406:13;51403:2;;;51289:1;51468:6;51463:3;51459:16;51452:27;51403:2;;51273:219;;;;51605:117;50847:42;51692:5;50836:54;51667:5;51664:35;51654:2;;51713:1;;51703:12;51654:2;51648:74;"
			}
		}
	},
	"sources": {
		"src/OrderValidationUtils.sol": {
			"id": 1
		},
		"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol": {
			"id": 8
		},
		"@0x/contracts-exchange/contracts/src/interfaces/IExchangeCore.sol": {
			"id": 9
		},
		"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": {
			"id": 6
		},
		"@0x/contracts-exchange-libs/contracts/src/LibEIP712.sol": {
			"id": 3
		},
		"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": {
			"id": 4
		},
		"@0x/contracts-utils/contracts/src/SafeMath.sol": {
			"id": 15
		},
		"@0x/contracts-exchange/contracts/src/interfaces/IMatchOrders.sol": {
			"id": 10
		},
		"@0x/contracts-exchange/contracts/src/interfaces/ISignatureValidator.sol": {
			"id": 11
		},
		"@0x/contracts-exchange/contracts/src/interfaces/ITransactions.sol": {
			"id": 12
		},
		"@0x/contracts-exchange/contracts/src/interfaces/IAssetProxyDispatcher.sol": {
			"id": 7
		},
		"@0x/contracts-exchange/contracts/src/interfaces/IWrapperFunctions.sol": {
			"id": 13
		},
		"@0x/contracts-exchange-libs/contracts/src/LibMath.sol": {
			"id": 5
		},
		"@0x/contracts-utils/contracts/src/LibBytes.sol": {
			"id": 14
		},
		"src/LibAssetData.sol": {
			"id": 0
		},
		"@0x/contracts-asset-proxy/contracts/src/libs/LibAssetProxyIds.sol": {
			"id": 2
		}
	},
	"sourceCodes": {
		"src/OrderValidationUtils.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"./LibAssetData.sol\";\n\n\ncontract OrderValidationUtils is\n    LibAssetData,\n    LibMath\n{\n    using LibBytes for bytes;\n\n    // solhint-disable var-name-mixedcase\n    bytes internal _ZRX_ASSET_DATA;\n    // solhint-enable var-name-mixedcase\n\n    constructor (address _exchange, bytes memory _zrxAssetData)\n        public\n        LibAssetData(_exchange)\n    {\n        _ZRX_ASSET_DATA = _zrxAssetData;\n    }\n\n    /// @dev Fetches all order-relevant information needed to validate if the supplied order is fillable.\n    /// @param order The order structure.\n    /// @param signature Signature provided by maker that proves the order's authenticity.\n    /// `0x01` can always be provided if the signature does not need to be validated.\n    /// @return The orderInfo (hash, status, and `takerAssetAmount` already filled for the given order),\n    /// fillableTakerAssetAmount (amount of the order's `takerAssetAmount` that is fillable given all on-chain state),\n    /// and isValidSignature (validity of the provided signature).\n    /// NOTE: If the `takerAssetData` encodes data for multiple assets, `fillableTakerAssetAmount` will represent a \"scaled\"\n    /// amount, meaning it must be multiplied by all the individual asset amounts within the `takerAssetData` to get the final\n    /// amount of each asset that can be filled.\n    function getOrderRelevantState(LibOrder.Order memory order, bytes memory signature)\n        public\n        view\n        returns (\n            LibOrder.OrderInfo memory orderInfo,\n            uint256 fillableTakerAssetAmount,\n            bool isValidSignature\n        )\n    {\n        // Get info specific to order\n        orderInfo = _EXCHANGE.getOrderInfo(order);\n\n        // Validate the maker's signature\n        address makerAddress = order.makerAddress;\n        isValidSignature = _EXCHANGE.isValidSignature(\n            orderInfo.orderHash,\n            makerAddress,\n            signature\n        );\n\n        // Get the transferable amount of the `makerAsset`\n        uint256 transferableMakerAssetAmount = getTransferableAssetAmount(makerAddress, order.makerAssetData);\n\n        // Assign to stack variables to reduce redundant mloads/sloads\n        uint256 takerAssetAmount = order.takerAssetAmount;\n        uint256 makerFee = order.makerFee;\n        bytes memory zrxAssetData = _ZRX_ASSET_DATA;\n    \n        // Get the amount of `takerAsset` that is transferable to maker given the transferability of `makerAsset`, `makerFeeAsset`,\n        // and the total amounts specified in the order\n        uint256 transferableTakerAssetAmount;\n        if (order.makerAssetData.equals(zrxAssetData)) {\n            // If `makerAsset` equals `makerFeeAsset`, the % that can be filled is\n            // transferableMakerAssetAmount / (makerAssetAmount + makerFee)\n            transferableTakerAssetAmount = getPartialAmountFloor(\n                transferableMakerAssetAmount,\n                safeAdd(order.makerAssetAmount, makerFee),\n                takerAssetAmount\n            );\n        } else {\n            // Get the transferable amount of the `makerFeeAsset`\n            uint256 transferableMakerFeeAssetAmount = getTransferableAssetAmount(makerAddress, zrxAssetData);\n\n            // If `makerFee` is 0, the % that can be filled is (transferableMakerAssetAmount / makerAssetAmount)\n            if (makerFee == 0) {\n                transferableTakerAssetAmount = getPartialAmountFloor(\n                    transferableMakerAssetAmount,\n                    order.makerAssetAmount,\n                    takerAssetAmount\n                );\n\n            // If `makerAsset` does not equal `makerFeeAsset`, the % that can be filled is the lower of\n            // (transferableMakerAssetAmount / makerAssetAmount) and (transferableMakerAssetFeeAmount / makerFee)\n            } else {\n                uint256 transferableMakerToTakerAmount = getPartialAmountFloor(\n                    transferableMakerAssetAmount,\n                    order.makerAssetAmount,\n                    takerAssetAmount\n                );\n                uint256 transferableMakerFeeToTakerAmount = getPartialAmountFloor(\n                    transferableMakerFeeAssetAmount,\n                    makerFee,\n                    takerAssetAmount\n                );\n                transferableTakerAssetAmount = min256(transferableMakerToTakerAmount, transferableMakerFeeToTakerAmount);\n            }\n        }\n\n        // `fillableTakerAssetAmount` is the lower of the order's remaining `takerAssetAmount` and the `transferableTakerAssetAmount`\n        fillableTakerAssetAmount = min256(\n            safeSub(takerAssetAmount, orderInfo.orderTakerAssetFilledAmount),\n            transferableTakerAssetAmount\n        );\n\n        return (orderInfo, fillableTakerAssetAmount, isValidSignature);\n    }\n\n    /// @dev Fetches all order-relevant information needed to validate if the supplied orders are fillable.\n    /// @param orders Array of order structures.\n    /// @param signatures Array of signatures provided by makers that prove the authenticity of the orders.\n    /// `0x01` can always be provided if a signature does not need to be validated.\n    /// @return The ordersInfo (array of the hash, status, and `takerAssetAmount` already filled for each order),\n    /// fillableTakerAssetAmounts (array of amounts for each order's `takerAssetAmount` that is fillable given all on-chain state),\n    /// and isValidSignature (array containing the validity of each provided signature).\n    /// NOTE: If the `takerAssetData` encodes data for multiple assets, each element of `fillableTakerAssetAmounts`\n    /// will represent a \"scaled\" amount, meaning it must be multiplied by all the individual asset amounts within\n    /// the `takerAssetData` to get the final amount of each asset that can be filled.\n    function getOrderRelevantStates(LibOrder.Order[] memory orders, bytes[] memory signatures)\n        public\n        view\n        returns (\n            LibOrder.OrderInfo[] memory ordersInfo,\n            uint256[] memory fillableTakerAssetAmounts,\n            bool[] memory isValidSignature\n        )\n    {\n        uint256 length = orders.length;\n        ordersInfo = new LibOrder.OrderInfo[](length);\n        fillableTakerAssetAmounts = new uint256[](length);\n        isValidSignature = new bool[](length);\n\n        for (uint256 i = 0; i != length; i++) {\n            (ordersInfo[i], fillableTakerAssetAmounts[i], isValidSignature[i]) = getOrderRelevantState(\n                orders[i],\n                signatures[i]\n            );\n        }\n\n        return (ordersInfo, fillableTakerAssetAmounts, isValidSignature);\n    }\n\n    /// @dev Gets the amount of an asset transferable by the owner.\n    /// @param ownerAddress Address of the owner of the asset.\n    /// @param assetData Description of tokens, per the AssetProxy contract specification.\n    /// @return The amount of the asset tranferable by the owner.\n    /// NOTE: If the `assetData` encodes data for multiple assets, the `transferableAssetAmount`\n    /// will represent the amount of times the entire `assetData` can be transferred. To calculate\n    /// the total individual transferable amounts, this scaled `transferableAmount` must be multiplied by \n    /// the individual asset amounts located within the `assetData`.\n    function getTransferableAssetAmount(address ownerAddress, bytes memory assetData)\n        public\n        view\n        returns (uint256 transferableAssetAmount)\n    {\n        (uint256 balance, uint256 allowance) = getBalanceAndAssetProxyAllowance(ownerAddress, assetData);\n        transferableAssetAmount = min256(balance, allowance);\n        return transferableAssetAmount;\n    }\n}\n",
		"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"./IExchangeCore.sol\";\nimport \"./IMatchOrders.sol\";\nimport \"./ISignatureValidator.sol\";\nimport \"./ITransactions.sol\";\nimport \"./IAssetProxyDispatcher.sol\";\nimport \"./IWrapperFunctions.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract IExchange is\n    IExchangeCore,\n    IMatchOrders,\n    ISignatureValidator,\n    ITransactions,\n    IAssetProxyDispatcher,\n    IWrapperFunctions\n{}\n",
		"@0x/contracts-exchange/contracts/src/interfaces/IExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IExchangeCore {\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrder(LibOrder.Order memory order)\n        public;\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n}\n",
		"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"./LibEIP712.sol\";\n\n\ncontract LibOrder is\n    LibEIP712\n{\n    // Hash for the EIP712 Order Schema\n    bytes32 constant internal EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"Order(\",\n        \"address makerAddress,\",\n        \"address takerAddress,\",\n        \"address feeRecipientAddress,\",\n        \"address senderAddress,\",\n        \"uint256 makerAssetAmount,\",\n        \"uint256 takerAssetAmount,\",\n        \"uint256 makerFee,\",\n        \"uint256 takerFee,\",\n        \"uint256 expirationTimeSeconds,\",\n        \"uint256 salt,\",\n        \"bytes makerAssetData,\",\n        \"bytes takerAssetData\",\n        \")\"\n    ));\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's state is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    struct Order {\n        address makerAddress;           // Address that created the order.      \n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.          \n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.      \n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.        \n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.        \n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.          \n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.     \n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\n    }\n    // solhint-enable max-line-length\n\n    struct OrderInfo {\n        uint8 orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 hash of the order (see LibOrder.getOrderHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates Keccak-256 hash of the order.\n    /// @param order The order structure.\n    /// @return Keccak-256 EIP712 hash of the order.\n    function getOrderHash(Order memory order)\n        internal\n        view\n        returns (bytes32 orderHash)\n    {\n        orderHash = hashEIP712Message(hashOrder(order));\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order.\n    function hashOrder(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = EIP712_ORDER_SCHEMA_HASH;\n        bytes32 makerAssetDataHash = keccak256(order.makerAssetData);\n        bytes32 takerAssetDataHash = keccak256(order.takerAssetData);\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     bytes32(order.makerAddress),\n        //     bytes32(order.takerAddress),\n        //     bytes32(order.feeRecipientAddress),\n        //     bytes32(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData)\n        // ));\n\n        assembly {\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n            \n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, makerAssetDataHash)\n            mstore(pos3, takerAssetDataHash)\n            result := keccak256(pos1, 416)\n            \n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n        }\n        return result;\n    }\n}\n",
		"@0x/contracts-exchange-libs/contracts/src/LibEIP712.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract LibEIP712 {\n\n    // EIP191 header for EIP712 prefix\n    string constant internal EIP191_HEADER = \"\\x19\\x01\";\n\n    // EIP712 Domain Name value\n    string constant internal EIP712_DOMAIN_NAME = \"0x Protocol\";\n\n    // EIP712 Domain Version value\n    string constant internal EIP712_DOMAIN_VERSION = \"2\";\n\n    // Hash of the EIP712 Domain Separator Schema\n    bytes32 constant internal EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"EIP712Domain(\",\n        \"string name,\",\n        \"string version,\",\n        \"address verifyingContract\",\n        \")\"\n    ));\n\n    // Hash of the EIP712 Domain Separator data\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 public EIP712_DOMAIN_HASH;\n\n    constructor ()\n        public\n    {\n        EIP712_DOMAIN_HASH = keccak256(abi.encodePacked(\n            EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n            keccak256(bytes(EIP712_DOMAIN_NAME)),\n            keccak256(bytes(EIP712_DOMAIN_VERSION)),\n            uint256(address(this))\n        ));\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct in this EIP712 Domain.\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to this EIP712 Domain.\n    function hashEIP712Message(bytes32 hashStruct)\n        internal\n        view\n        returns (bytes32 result)\n    {\n        bytes32 eip712DomainHash = EIP712_DOMAIN_HASH;\n\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct    \n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n",
		"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"@0x/contracts-utils/contracts/src/SafeMath.sol\";\n\n\ncontract LibFillResults is\n    SafeMath\n{\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of ZRX paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of ZRX paid by taker to feeRecipients(s).\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                    // Amounts filled and fees paid of left order.\n        FillResults right;                   // Amounts filled and fees paid of right order.\n        uint256 leftMakerAssetSpreadAmount;  // Spread between price of left and right order, denominated in the left order's makerAsset, paid to taker.\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    ///      Modifies the first FillResults instance specified.\n    /// @param totalFillResults Fill results instance that will be added onto.\n    /// @param singleFillResults Fill results instance that will be added to totalFillResults.\n    function addFillResults(FillResults memory totalFillResults, FillResults memory singleFillResults)\n        internal\n        pure\n    {\n        totalFillResults.makerAssetFilledAmount = safeAdd(totalFillResults.makerAssetFilledAmount, singleFillResults.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = safeAdd(totalFillResults.takerAssetFilledAmount, singleFillResults.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = safeAdd(totalFillResults.makerFeePaid, singleFillResults.makerFeePaid);\n        totalFillResults.takerFeePaid = safeAdd(totalFillResults.takerFeePaid, singleFillResults.takerFeePaid);\n    }\n}\n",
		"@0x/contracts-utils/contracts/src/SafeMath.sol": "pragma solidity ^0.5.5;\n\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(\n            c / a == b,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(\n            b <= a,\n            \"UINT256_UNDERFLOW\"\n        );\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        require(\n            c >= a,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
		"@0x/contracts-exchange/contracts/src/interfaces/IMatchOrders.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IMatchOrders {\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n",
		"@0x/contracts-exchange/contracts/src/interfaces/ISignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract ISignatureValidator {\n\n    /// @dev Approves a hash on-chain using any valid signature type.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    function preSign(\n        bytes32 hash,\n        address signerAddress,\n        bytes calldata signature\n    )\n        external;\n    \n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external;\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signerAddress Address of signer.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n}\n",
		"@0x/contracts-exchange/contracts/src/interfaces/ITransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract ITransactions {\n\n    /// @dev Executes an exchange method call in the context of signer.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @param signature Proof of signer transaction by signer.\n    function executeTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes calldata data,\n        bytes calldata signature\n    )\n        external;\n}\n",
		"@0x/contracts-exchange/contracts/src/interfaces/IAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract IAssetProxyDispatcher {\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n",
		"@0x/contracts-exchange/contracts/src/interfaces/IWrapperFunctions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IWrapperFunctions {\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrKill.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrders(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrders(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously cancels multiple orders in a single transaction.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public;\n\n    /// @dev Fetches information for all passed in orders\n    /// @param orders Array of order specifications.\n    /// @return Array of OrderInfo instances that correspond to each order.\n    function getOrdersInfo(LibOrder.Order[] memory orders)\n        public\n        view\n        returns (LibOrder.OrderInfo[] memory);\n}\n",
		"@0x/contracts-exchange-libs/contracts/src/LibMath.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"@0x/contracts-utils/contracts/src/SafeMath.sol\";\n\n\ncontract LibMath is\n    SafeMath\n{\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        require(\n            !isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n            ),\n            \"ROUNDING_ERROR\"\n        );\n        \n        partialAmount = safeDiv(\n            safeMul(numerator, target),\n            denominator\n        );\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        require(\n            !isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n            ),\n            \"ROUNDING_ERROR\"\n        );\n        \n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = safeDiv(\n            safeAdd(\n                safeMul(numerator, target),\n                safeSub(denominator, 1)\n            ),\n            denominator\n        );\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        partialAmount = safeDiv(\n            safeMul(numerator, target),\n            denominator\n        );\n        return partialAmount;\n    }\n    \n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = safeDiv(\n            safeAdd(\n                safeMul(numerator, target),\n                safeSub(denominator, 1)\n            ),\n            denominator\n        );\n        return partialAmount;\n    }\n    \n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n        \n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero. \n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n        \n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = safeMul(1000, remainder) >= safeMul(numerator, target);\n        return isError;\n    }\n    \n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n        \n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = safeSub(denominator, remainder) % denominator;\n        isError = safeMul(1000, remainder) >= safeMul(numerator, target);\n        return isError;\n    }\n}\n",
		"@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n    \n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n                    \n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n                    \n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to <= b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n    \n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to <= b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            \"GREATER_THAN_ZERO_LENGTH_REQUIRED\"\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n            \n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= index + 4,\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @dev NOTE: the returned value overlaps with the input value.\n    ///            Both should be treated as immutable.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytesWithLength(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n        \n        // Return a pointer to the byte array as it exists inside `b`\n        assembly {\n            result := add(b, index)\n        }\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytesWithLength(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            b.contentAddress() + index,\n            input.rawAddress(), // includes length of <input>\n            input.length + 32   // +32 bytes to store <input> length\n        );\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function deepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        internal\n        pure\n    {\n        uint256 sourceLen = source.length;\n        // Dest length must be >= source length, or some bytes would not be copied.\n        require(\n            dest.length >= sourceLen,\n            \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\"\n        );\n        memCopy(\n            dest.contentAddress(),\n            source.contentAddress(),\n            sourceLen\n        );\n    }\n}\n",
		"src/LibAssetData.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-asset-proxy/contracts/src/libs/LibAssetProxyIds.sol\";\nimport \"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol\";\n\n\ncontract LibAssetData is\n    LibAssetProxyIds\n{\n    // 2^256 - 1\n    uint256 constant internal _MAX_UINT256 = uint256(-1);\n\n    // ERC20 selectors\n    bytes4 constant internal _ERC20_BALANCE_OF_SELECTOR = 0x70a08231;\n    bytes4 constant internal _ERC20_ALLOWANCE_SELECTOR = 0xdd62ed3e;\n\n    // ERC721 selectors\n    bytes4 constant internal _ERC721_OWNER_OF_SELECTOR = 0x6352211e;\n    bytes4 constant internal _ERC721_IS_APPROVED_FOR_ALL_SELECTOR = 0xe985e9c5;\n    bytes4 constant internal _ERC721_GET_APPROVED_SELECTOR = 0x081812fc;\n\n    // ERC1155 selectors\n    bytes4 constant internal _ERC1155_BALANCE_OF_SELECTOR = 0x00fdd58e;\n    bytes4 constant internal _ERC1155_IS_APPROVED_FOR_ALL_SELECTOR = 0xe985e9c5;\n\n    using LibBytes for bytes;\n\n    // solhint-disable var-name-mixedcase\n    IExchange internal _EXCHANGE;\n    address internal _ERC20_PROXY_ADDRESS;\n    address internal _ERC721_PROXY_ADDRESS;\n    address internal _ERC1155_PROXY_ADDRESS;\n    // solhint-enable var-name-mixedcase\n\n    constructor (address _exchange)\n        public\n    {\n        _EXCHANGE = IExchange(_exchange);\n        _ERC20_PROXY_ADDRESS = _EXCHANGE.getAssetProxy(ERC20_PROXY_ID);\n        _ERC721_PROXY_ADDRESS = _EXCHANGE.getAssetProxy(ERC721_PROXY_ID);\n        _ERC1155_PROXY_ADDRESS = _EXCHANGE.getAssetProxy(ERC1155_PROXY_ID);\n    }\n\n    /// @dev Returns the owner's balance of the assets(s) specified in\n    /// assetData.  When the asset data contains multiple assets (eg in\n    /// ERC1155 or Multi-Asset), the return value indicates how many\n    /// complete \"baskets\" of those assets are owned by owner.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Details of asset, encoded per the AssetProxy contract specification.\n    /// @return Number of assets (or asset baskets) held by owner.\n    function getBalance(address ownerAddress, bytes memory assetData)\n        public\n        view\n        returns (uint256 balance)\n    {\n        // Get id of AssetProxy contract\n        bytes4 assetProxyId = assetData.readBytes4(0);\n\n        if (assetProxyId == ERC20_PROXY_ID) {\n            // Get ERC20 token address\n            address tokenAddress = assetData.readAddress(16);\n\n            // Encode data for `balanceOf(ownerAddress)`\n            bytes memory balanceOfData = abi.encodeWithSelector(_ERC20_BALANCE_OF_SELECTOR, ownerAddress);\n\n            // Query balance\n            (bool success, bytes memory returnData) = tokenAddress.staticcall(balanceOfData);\n            balance = success && returnData.length == 32 ? returnData.readUint256(0) : 0;\n        } else if (assetProxyId == ERC721_PROXY_ID) {\n            // Get ERC721 token address and id\n            (, address tokenAddress, uint256 tokenId) = decodeERC721AssetData(assetData);\n\n            // Check if id is owned by ownerAddress\n            balance = getERC721TokenOwner(tokenAddress, tokenId) == ownerAddress ? 1 : 0;\n        } else if (assetProxyId == ERC1155_PROXY_ID) {\n            // Get ERC1155 token address, array of ids, and array of values\n            (, address tokenAddress, uint256[] memory tokenIds, uint256[] memory tokenValues,) = decodeERC1155AssetData(assetData);\n\n            uint256 length = tokenIds.length;\n            for (uint256 i = 0; i != length; i++) {\n                // Encode data for `balanceOf(ownerAddress, tokenIds[i])\n                bytes memory balanceOfData = abi.encodeWithSelector(\n                    _ERC1155_BALANCE_OF_SELECTOR,\n                    ownerAddress,\n                    tokenIds[i]\n                );\n\n                // Query balance\n                (bool success, bytes memory returnData) = tokenAddress.staticcall(balanceOfData);\n                uint256 totalBalance = success && returnData.length == 32 ? returnData.readUint256(0) : 0;\n\n                // Scale total balance down by corresponding value in assetData\n                uint256 scaledBalance = totalBalance / tokenValues[i];\n                if (scaledBalance < balance || balance == 0) {\n                    balance = scaledBalance;\n                }\n            }\n        } else if (assetProxyId == MULTI_ASSET_PROXY_ID) {\n            // Get array of values and array of assetDatas\n            (, uint256[] memory assetAmounts, bytes[] memory nestedAssetData) = decodeMultiAssetData(assetData);\n\n            uint256 length = nestedAssetData.length;\n            for (uint256 i = 0; i != length; i++) {\n                // Query balance of individual assetData\n                uint256 totalBalance = getBalance(ownerAddress, nestedAssetData[i]);\n\n                // Scale total balance down by corresponding value in assetData\n                uint256 scaledBalance = totalBalance / assetAmounts[i];\n                if (scaledBalance < balance || balance == 0) {\n                    balance = scaledBalance;\n                }\n            }\n        } \n\n        // Balance will be 0 if assetProxyId is unknown\n        return balance;\n    }\n\n    /// @dev Calls getBalance() for each element of assetData.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\n    /// @return Array of asset balances from getBalance(), with each element\n    /// corresponding to the same-indexed element in the assetData input.\n    function getBatchBalances(address ownerAddress, bytes[] memory assetData)\n        public\n        view\n        returns (uint256[] memory balances)\n    {\n        uint256 length = assetData.length;\n        balances = new uint256[](length);\n        for (uint256 i = 0; i != length; i++) {\n            balances[i] = getBalance(ownerAddress, assetData[i]);\n        }\n        return balances;\n    }\n\n    /// @dev Returns the number of asset(s) (described by assetData) that\n    /// the corresponding AssetProxy contract is authorized to spend.  When the asset data contains\n    /// multiple assets (eg for Multi-Asset), the return value indicates\n    /// how many complete \"baskets\" of those assets may be spent by all of the corresponding\n    /// AssetProxy contracts.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Details of asset, encoded per the AssetProxy contract specification.\n    /// @return Number of assets (or asset baskets) that the corresponding AssetProxy is authorized to spend.\n    function getAssetProxyAllowance(address ownerAddress, bytes memory assetData)\n        public\n        view\n        returns (uint256 allowance)\n    {\n        // Get id of AssetProxy contract\n        bytes4 assetProxyId = assetData.readBytes4(0);\n\n        if (assetProxyId == MULTI_ASSET_PROXY_ID) {\n            // Get array of values and array of assetDatas\n            (, uint256[] memory amounts, bytes[] memory nestedAssetData) = decodeMultiAssetData(assetData);\n\n            uint256 length = nestedAssetData.length;\n            for (uint256 i = 0; i != length; i++) {\n                // Query allowance of individual assetData\n                uint256 totalAllowance = getAssetProxyAllowance(ownerAddress, nestedAssetData[i]);\n\n                // Scale total allowance down by corresponding value in assetData\n                uint256 scaledAllowance = totalAllowance / amounts[i];\n                if (scaledAllowance < allowance || allowance == 0) {\n                    allowance = scaledAllowance;\n                }\n            }\n            return allowance;\n        }\n\n        if (assetProxyId == ERC20_PROXY_ID) {\n            // Get ERC20 token address\n            address tokenAddress = assetData.readAddress(16);\n\n            // Encode data for `allowance(ownerAddress, _ERC20_PROXY_ADDRESS)`\n            bytes memory allowanceData = abi.encodeWithSelector(\n                _ERC20_ALLOWANCE_SELECTOR,\n                ownerAddress,\n                _ERC20_PROXY_ADDRESS\n            );\n\n            // Query allowance\n            (bool success, bytes memory returnData) = tokenAddress.staticcall(allowanceData);\n            allowance = success && returnData.length == 32 ? returnData.readUint256(0) : 0;\n        } else if (assetProxyId == ERC721_PROXY_ID) {\n            // Get ERC721 token address and id\n            (, address tokenAddress, uint256 tokenId) = decodeERC721AssetData(assetData);\n\n            // Encode data for `isApprovedForAll(ownerAddress, _ERC721_PROXY_ADDRESS)`\n            bytes memory isApprovedForAllData = abi.encodeWithSelector(\n                _ERC721_IS_APPROVED_FOR_ALL_SELECTOR,\n                ownerAddress,\n                _ERC721_PROXY_ADDRESS\n            );\n\n            (bool success, bytes memory returnData) = tokenAddress.staticcall(isApprovedForAllData);\n\n            // If not approved for all, call `getApproved(tokenId)`\n            if (!success || returnData.length != 32 || returnData.readUint256(0) != 1) {\n                // Encode data for `getApproved(tokenId)`\n                bytes memory getApprovedData = abi.encodeWithSelector(_ERC721_GET_APPROVED_SELECTOR, tokenId);\n                (success, returnData) = tokenAddress.staticcall(getApprovedData);\n\n                // Allowance is 1 if successful and the approved address is the ERC721Proxy\n                allowance = success && returnData.length == 32 && returnData.readAddress(12) == _ERC721_PROXY_ADDRESS ? 1 : 0;\n            } else {\n                // Allowance is 2^256 - 1 if `isApprovedForAll` returned true\n                allowance = _MAX_UINT256;\n            }\n        } else if (assetProxyId == ERC1155_PROXY_ID) {\n            // Get ERC1155 token address\n            (, address tokenAddress, , , ) = decodeERC1155AssetData(assetData);\n\n            // Encode data for `isApprovedForAll(ownerAddress, _ERC1155_PROXY_ADDRESS)`\n            bytes memory isApprovedForAllData = abi.encodeWithSelector(\n                _ERC1155_IS_APPROVED_FOR_ALL_SELECTOR,\n                ownerAddress,\n                _ERC1155_PROXY_ADDRESS\n            );\n\n            // Query allowance\n            (bool success, bytes memory returnData) = tokenAddress.staticcall(isApprovedForAllData);\n            allowance = success && returnData.length == 32 && returnData.readUint256(0) == 1 ? _MAX_UINT256 : 0;\n        }\n\n        // Allowance will be 0 if the assetProxyId is unknown\n        return allowance;\n    }\n\n    /// @dev Calls getAssetProxyAllowance() for each element of assetData.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\n    /// @return An array of asset allowances from getAllowance(), with each\n    /// element corresponding to the same-indexed element in the assetData input.\n    function getBatchAssetProxyAllowances(address ownerAddress, bytes[] memory assetData)\n        public\n        view\n        returns (uint256[] memory allowances)\n    {\n        uint256 length = assetData.length;\n        allowances = new uint256[](length);\n        for (uint256 i = 0; i != length; i++) {\n            allowances[i] = getAssetProxyAllowance(ownerAddress, assetData[i]);\n        }\n        return allowances;\n    }\n\n    /// @dev Calls getBalance() and getAllowance() for assetData.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Details of asset, encoded per the AssetProxy contract specification.\n    /// @return Number of assets (or asset baskets) held by owner, and number\n    /// of assets (or asset baskets) that the corresponding AssetProxy is authorized to spend.\n    function getBalanceAndAssetProxyAllowance(address ownerAddress, bytes memory assetData)\n        public\n        view\n        returns (uint256 balance, uint256 allowance)\n    {\n        balance = getBalance(ownerAddress, assetData);\n        allowance = getAssetProxyAllowance(ownerAddress, assetData);\n        return (balance, allowance);\n    }\n\n    /// @dev Calls getBatchBalances() and getBatchAllowances() for each element of assetData.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\n    /// @return An array of asset balances from getBalance(), and an array of\n    /// asset allowances from getAllowance(), with each element\n    /// corresponding to the same-indexed element in the assetData input.\n    function getBatchBalancesAndAssetProxyAllowances(address ownerAddress, bytes[] memory assetData)\n        public\n        view\n        returns (uint256[] memory balances, uint256[] memory allowances)\n    {\n        balances = getBatchBalances(ownerAddress, assetData);\n        allowances = getBatchAssetProxyAllowances(ownerAddress, assetData);\n        return (balances, allowances);\n    }\n\n    /// @dev Encode ERC-20 asset data into the format described in the AssetProxy contract specification.\n    /// @param tokenAddress The address of the ERC-20 contract hosting the asset to be traded.\n    /// @return AssetProxy-compliant data describing the asset.\n    function encodeERC20AssetData(address tokenAddress)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(ERC20_PROXY_ID, tokenAddress);\n        return assetData;\n    }\n\n    /// @dev Decode ERC-20 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-20 asset.\n    /// @return The ERC-20 AssetProxy identifier, and the address of the ERC-20 \n    /// contract hosting this asset.\n    function decodeERC20AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == ERC20_PROXY_ID,\n            \"WRONG_PROXY_ID\"\n        );\n\n        tokenAddress = assetData.readAddress(16);\n        return (assetProxyId, tokenAddress);\n    }\n\n    /// @dev Encode ERC-721 asset data into the format described in the AssetProxy specification.\n    /// @param tokenAddress The address of the ERC-721 contract hosting the asset to be traded.\n    /// @param tokenId The identifier of the specific asset to be traded.\n    /// @return AssetProxy-compliant asset data describing the asset.\n    function encodeERC721AssetData(address tokenAddress, uint256 tokenId)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(\n            ERC721_PROXY_ID,\n            tokenAddress,\n            tokenId\n        );\n        return assetData;\n    }\n\n    /// @dev Decode ERC-721 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-721 asset.\n    /// @return The ERC-721 AssetProxy identifier, the address of the ERC-721\n    /// contract hosting this asset, and the identifier of the specific\n    /// asset to be traded.\n    function decodeERC721AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress,\n            uint256 tokenId\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == ERC721_PROXY_ID,\n            \"WRONG_PROXY_ID\"\n        );\n\n        tokenAddress = assetData.readAddress(16);\n        tokenId = assetData.readUint256(36);\n        return (assetProxyId, tokenAddress, tokenId);\n    }\n\n    /// @dev Encode ERC-1155 asset data into the format described in the AssetProxy contract specification.\n    /// @param tokenAddress The address of the ERC-1155 contract hosting the asset(s) to be traded.\n    /// @param tokenIds The identifiers of the specific assets to be traded.\n    /// @param tokenValues The amounts of each asset to be traded.\n    /// @param callbackData Data to be passed to receiving contracts when a transfer is performed.\n    /// @return AssetProxy-compliant asset data describing the set of assets.\n    function encodeERC1155AssetData(\n        address tokenAddress,\n        uint256[] memory tokenIds,\n        uint256[] memory tokenValues,\n        bytes memory callbackData\n    )\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(\n            ERC1155_PROXY_ID,\n            tokenAddress,\n            tokenIds,\n            tokenValues,\n            callbackData\n        );\n        return assetData;\n    }\n\n    /// @dev Decode ERC-1155 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-1155 set of assets.\n    /// @return The ERC-1155 AssetProxy identifier, the address of the ERC-1155\n    /// contract hosting the assets, an array of the identifiers of the\n    /// assets to be traded, an array of asset amounts to be traded, and\n    /// callback data.  Each element of the arrays corresponds to the\n    /// same-indexed element of the other array.  Return values specified as\n    /// `memory` are returned as pointers to locations within the memory of\n    /// the input parameter `assetData`.\n    function decodeERC1155AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress,\n            uint256[] memory tokenIds,\n            uint256[] memory tokenValues,\n            bytes memory callbackData\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == ERC1155_PROXY_ID,\n            \"WRONG_PROXY_ID\"\n        );\n\n        assembly {\n            // Skip selector and length to get to the first parameter:\n            assetData := add(assetData, 36)\n            // Read the value of the first parameter:\n            tokenAddress := mload(assetData)\n            // Point to the next parameter's data:\n            tokenIds := add(assetData, mload(add(assetData, 32)))\n            // Point to the next parameter's data:\n            tokenValues := add(assetData, mload(add(assetData, 64)))\n            // Point to the next parameter's data:\n            callbackData := add(assetData, mload(add(assetData, 96)))\n        }\n\n        return (\n            assetProxyId,\n            tokenAddress,\n            tokenIds,\n            tokenValues,\n            callbackData\n        );\n    }\n\n    /// @dev Encode data for multiple assets, per the AssetProxy contract specification.\n    /// @param amounts The amounts of each asset to be traded.\n    /// @param nestedAssetData AssetProxy-compliant data describing each asset to be traded.\n    /// @return AssetProxy-compliant data describing the set of assets.\n    function encodeMultiAssetData(uint256[] memory amounts, bytes[] memory nestedAssetData)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(\n            MULTI_ASSET_PROXY_ID,\n            amounts,\n            nestedAssetData\n        );\n        return assetData;\n    }\n\n    /// @dev Decode multi-asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant data describing a multi-asset basket.\n    /// @return The Multi-Asset AssetProxy identifier, an array of the amounts\n    /// of the assets to be traded, and an array of the\n    /// AssetProxy-compliant data describing each asset to be traded.  Each\n    /// element of the arrays corresponds to the same-indexed element of the other array.\n    function decodeMultiAssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            uint256[] memory amounts,\n            bytes[] memory nestedAssetData\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == MULTI_ASSET_PROXY_ID,\n            \"WRONG_PROXY_ID\"\n        );\n\n        // solhint-disable indent\n        (amounts, nestedAssetData) = abi.decode(\n            assetData.slice(4, assetData.length),\n            (uint256[], bytes[])\n        );\n        // solhint-enable indent\n    }\n\n    /// @dev Calls `asset.ownerOf(tokenId)`, but returns a null owner instead of reverting on an unowned asset.\n    /// @param tokenAddress Address of ERC721 asset.\n    /// @param tokenId The identifier for the specific NFT.\n    /// @return Owner of tokenId or null address if unowned.\n    function getERC721TokenOwner(address tokenAddress, uint256 tokenId)\n        public\n        view\n        returns (address ownerAddress)\n    {\n        bytes memory ownerOfCalldata = abi.encodeWithSelector(\n            _ERC721_OWNER_OF_SELECTOR,\n            tokenId\n        );\n\n        (bool success, bytes memory returnData) = tokenAddress.staticcall(ownerOfCalldata);\n\n        ownerAddress = (success && returnData.length == 32) ? returnData.readAddress(12) : address(0);\n        return ownerAddress;\n    }\n}\n",
		"@0x/contracts-asset-proxy/contracts/src/libs/LibAssetProxyIds.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract LibAssetProxyIds {\n\n    // AssetProxy Ids are equiavalent the first 4 bytes of the keccak256 hash of the function signature assigned to each AssetProxy.\n\n    // ERC20Token(address)\n    bytes4 constant public ERC20_PROXY_ID = 0xf47261b0;\n\n    // ERC721Token(address,uint256)\n    bytes4 constant public ERC721_PROXY_ID = 0x02571792;\n\n    // ERC1155Assets(address,uint256[],uint256[],bytes)\n    bytes4 constant public ERC1155_PROXY_ID = 0xa7cb5fb7;\n\n    // MultiAsset(uint256[],bytes[])\n    bytes4 constant public MULTI_ASSET_PROXY_ID = 0x94cfcdd7;\n}\n"
	},
	"sourceTreeHashHex": "0x55a0f83f0bce606aed5c945527bbd092c3d21a105e4f8ae7bf3decff21d8666d",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.9+commit.e560f70d.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": [
				"@0x/contracts-exchange=/Users/fabioberger/Documents/projects/0x_project/0x-monorepo-one/contracts/dev-utils/node_modules/@0x/contracts-exchange",
				"@0x/contracts-exchange-libs=/Users/fabioberger/Documents/projects/0x_project/0x-monorepo-one/contracts/dev-utils/node_modules/@0x/contracts-exchange-libs",
				"@0x/contracts-utils=/Users/fabioberger/Documents/projects/0x_project/0x-monorepo-one/contracts/dev-utils/node_modules/@0x/contracts-utils",
				"@0x/contracts-asset-proxy=/Users/fabioberger/Documents/projects/0x_project/0x-monorepo-one/contracts/dev-utils/node_modules/@0x/contracts-asset-proxy"
			]
		}
	},
	"networks": {}
}
