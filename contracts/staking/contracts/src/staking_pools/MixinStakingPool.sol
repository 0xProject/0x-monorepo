/*

  Copyright 2019 ZeroEx Intl.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

*/

pragma solidity ^0.5.9;
pragma experimental ABIEncoderV2;

import "@0x/contracts-utils/contracts/src/LibRichErrors.sol";
import "@0x/contracts-utils/contracts/src/LibSafeMath.sol";
import "../libs/LibStakingRichErrors.sol";
import "../interfaces/IStructs.sol";
import "../interfaces/IStakingEvents.sol";
import "../immutable/MixinConstants.sol";
import "../immutable/MixinStorage.sol";
import "./MixinStakingPoolRewards.sol";


/// @dev This mixin contains logic for staking pools.
/// A pool has a single operator and any number of delegators (members).
/// Any staker can create a pool, although at present it is only beneficial
/// for market makers to create staking pools. A market maker *must* create a
/// pool in order to receive fee-based rewards at the end of each epoch (see MixinExchangeFees).
/// Moreover, creating a staking pool leverages the delegated stake within the pool,
/// which is counted towards a maker's total stake when computing rewards. A market maker
/// can register any number of makerAddresses with their pool, and can incentivize delegators
/// to join their pool by specifying a fixed percentage of their fee-based rewards to be split amonst
/// the members of their pool. Any rewards set aside for members of the pool is divided based on
/// how much stake each member delegated.
///
/// Terminology:
/// "Pool Id"       - A unique id generated by this contract and assigned to each pool when it is created.
/// "Pool Operator" - The creator and operator of the pool.
/// "Pool Members"  - Members of the pool who opted-in by delegating to the pool.
/// "Market Makers" - Market makers on the 0x protocol.
///
/// How-To for Market Makers:
/// 1. Create a pool, specifying what percentage of rewards kept for yourself.
///     The remaining is divided among members of your pool.
/// 2. Add the addresses that you use to market make on 0x.
/// 3. Leverage the staking power of others by convincing them to delegate to your pool.
contract MixinStakingPool is
    IStakingEvents,
    MixinConstants,
    MixinStorage,
    MixinStakingPoolRewards
{
    using LibSafeMath for uint256;

    /// @dev Create a new staking pool. The sender will be the operator of this pool.
    /// Note that an operator must be payable.
    /// @param operatorShare Portion of rewards owned by the operator, in ppm.
    /// @param addOperatorAsMaker Adds operator to the created pool as a maker for convenience iff true.
    /// @return poolId The unique pool id generated for this pool.
    function createStakingPool(uint32 operatorShare, bool addOperatorAsMaker)
        external
        returns (bytes32 poolId)
    {
        // note that an operator must be payable
        address payable operatorAddress = msg.sender;

        // assign pool id and generate next id
        poolId = nextPoolId;
        nextPoolId = _computeNextStakingPoolId(poolId);

        // initialize cumulative rewards for this pool;
        // this is used to track rewards earned by delegators.
        _initializeCumulativeRewards(poolId);

        // register pool in reward vault
        rewardVault.registerStakingPool(poolId, operatorAddress, operatorShare);

        // Staking pool has been created
        emit StakingPoolCreated(poolId, operatorAddress, operatorShare);

        if (addOperatorAsMaker) {
            // Is the maker already in a pool?
            if (isMakerAssignedToStakingPool(operatorAddress)) {
                LibRichErrors.rrevert(LibStakingRichErrors.MakerPoolAssignmentError(
                    LibStakingRichErrors.MakerPoolAssignmentErrorCodes.MAKER_ADDRESS_ALREADY_REGISTERED,
                    operatorAddress,
                    getStakingPoolIdOfMaker(operatorAddress)
                ));
            }

            IStructs.MakerPoolJoinStatus memory poolJoinStatus = IStructs.MakerPoolJoinStatus({
                poolId: poolId,
                confirmed: true
            });
            poolJoinedByMakerAddress[operatorAddress] = poolJoinStatus;
            numMakersByPoolId[poolId] += 1;

            // Operator has been added as a maker to tbe pool
            emit MakerAddedToStakingPool(
                poolId,
                operatorAddress
            );
        }

        return poolId;
    }

    function joinStakingPoolAsMaker(
        bytes32 poolId
    )
        external
    {
        // Is the maker already in a pool?
        address makerAddress = msg.sender;
        if (isMakerAssignedToStakingPool(makerAddress)) {
            LibRichErrors.rrevert(LibStakingRichErrors.MakerPoolAssignmentError(
                LibStakingRichErrors.MakerPoolAssignmentErrorCodes.MAKER_ADDRESS_ALREADY_REGISTERED,
                makerAddress,
                getStakingPoolIdOfMaker(makerAddress)
            ));
        }

        IStructs.MakerPoolJoinStatus memory poolJoinStatus = IStructs.MakerPoolJoinStatus({
            poolId: poolId,
            confirmed: false
        });
        poolJoinedByMakerAddress[makerAddress] = poolJoinStatus;

        // Maker has joined to the pool, awaiting operator confirmation
        emit PendingAddMakerToPool(
            poolId,
            makerAddress
        );
    }

    /// @dev Adds a maker to a staking pool. Note that this is only callable by the pool operator.
    /// Note also that the maker must have previously called joinStakingPoolAsMaker.
    /// @param poolId Unique id of pool.
    /// @param makerAddress Address of maker.
    function addMakerToStakingPool(
        bytes32 poolId,
        address makerAddress
    )
        external
        onlyStakingPoolOperator(poolId)
    {
        // Is the maker already in a pool?
        if (isMakerAssignedToStakingPool(makerAddress)) {
            LibRichErrors.rrevert(LibStakingRichErrors.MakerPoolAssignmentError(
                LibStakingRichErrors.MakerPoolAssignmentErrorCodes.MAKER_ADDRESS_ALREADY_REGISTERED,
                makerAddress,
                getStakingPoolIdOfMaker(makerAddress)
            ));
        }

        // Is the maker trying to join this pool?
        bytes32 makerPendingPoolId = poolJoinedByMakerAddress[makerAddress].poolId;
        if (makerPendingPoolId != poolId) {
            LibRichErrors.rrevert(LibStakingRichErrors.MakerPoolAssignmentError(
                LibStakingRichErrors.MakerPoolAssignmentErrorCodes.MAKER_ADDRESS_NOT_PENDING_ADD,
                makerAddress,
                makerPendingPoolId
            ));
        }

        // Is the pool already full?
        if (getNumberOfMakersInStakingPool(poolId) == MAX_MAKERS_IN_POOL) {
            LibRichErrors.rrevert(LibStakingRichErrors.MakerPoolAssignmentError(
                LibStakingRichErrors.MakerPoolAssignmentErrorCodes.POOL_IS_FULL,
                makerAddress,
                poolId
            ));
        }

        // Add maker to pool
        IStructs.MakerPoolJoinStatus memory poolJoinStatus = IStructs.MakerPoolJoinStatus({
            poolId: poolId,
            confirmed: true
        });
        poolJoinedByMakerAddress[makerAddress] = poolJoinStatus;
        numMakersByPoolId[poolId] += 1;

        // Maker has been added to the pool
        emit MakerAddedToStakingPool(
            poolId,
            makerAddress
        );
    }

    /// @dev Removes a maker from a staking pool. Note that this is only callable by the pool operator or maker.
    /// Note also that the maker does not have to *agree* to leave the pool; this action is
    /// at the sole discretion of the pool operator.
    /// @param poolId Unique id of pool.
    /// @param makerAddress Address of maker.
    function removeMakerFromStakingPool(
        bytes32 poolId,
        address makerAddress
    )
        external
        onlyStakingPoolOperatorOrMaker(poolId, makerAddress)
    {
        bytes32 makerPoolId = getStakingPoolIdOfMaker(makerAddress);
        if (makerPoolId != poolId) {
            LibRichErrors.rrevert(LibStakingRichErrors.MakerPoolAssignmentError(
                LibStakingRichErrors.MakerPoolAssignmentErrorCodes.MAKER_ADDRESS_NOT_REGISTERED,
                makerAddress,
                makerPoolId
            ));
        }

        // remove the pool and confirmation from the maker status
        IStructs.MakerPoolJoinStatus memory poolJoinStatus = IStructs.MakerPoolJoinStatus({
            poolId: NIL_POOL_ID,
            confirmed: false
        });
        poolJoinedByMakerAddress[makerAddress] = poolJoinStatus;
        numMakersByPoolId[poolId] -= 1;

        // Maker has been removed from the pool`
        emit MakerRemovedFromStakingPool(
            poolId,
            makerAddress
        );
    }

    /// @dev Returns the pool id of the input maker.
    /// @param makerAddress Address of maker
    /// @return Pool id, nil if maker is not yet assigned to a pool.
    function getStakingPoolIdOfMaker(address makerAddress)
        public
        view
        returns (bytes32)
    {
        if (isMakerAssignedToStakingPool(makerAddress)) {
            return poolJoinedByMakerAddress[makerAddress].poolId;
        } else {
            return NIL_POOL_ID;
        }
    }

    /// @dev Returns true iff the maker is assigned to a staking pool.
    /// @param makerAddress Address of maker
    /// @return True iff assigned.
    function isMakerAssignedToStakingPool(address makerAddress)
        public
        view
        returns (bool)
    {
        return poolJoinedByMakerAddress[makerAddress].confirmed;
    }

    /// @dev Returns the current number of makers in a given pool.
    /// @param poolId Unique id of pool.
    /// @return Size of pool.
    function getNumberOfMakersInStakingPool(bytes32 poolId)
        public
        view
        returns (uint256)
    {
        return numMakersByPoolId[poolId];
    }

    /// @dev Returns the unique id that will be assigned to the next pool that is created.
    /// @return Pool id.
    function getNextStakingPoolId()
        public
        view
        returns (bytes32)
    {
        return nextPoolId;
    }

    /// @dev Computes the unique id that comes after the input pool id.
    /// @param poolId Unique id of pool.
    /// @return Next pool id after input pool.
    function _computeNextStakingPoolId(bytes32 poolId)
        internal
        pure
        returns (bytes32)
    {
        return bytes32(uint256(poolId).safeAdd(POOL_ID_INCREMENT_AMOUNT));
    }
}
