{
	"schemaVersion": "2.0.0",
	"contractName": "LibAssetData",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"name": "decodeERC721AssetData",
				"outputs": [
					{
						"name": "assetProxyId",
						"type": "bytes4"
					},
					{
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "ownerAddress",
						"type": "address"
					},
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"name": "getBalanceAndAssetProxyAllowance",
				"outputs": [
					{
						"name": "balance",
						"type": "uint256"
					},
					{
						"name": "allowance",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "ERC1155_PROXY_ID",
				"outputs": [
					{
						"name": "",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "ownerAddress",
						"type": "address"
					},
					{
						"name": "assetData",
						"type": "bytes[]"
					}
				],
				"name": "getBatchAssetProxyAllowances",
				"outputs": [
					{
						"name": "allowances",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "tokenAddress",
						"type": "address"
					}
				],
				"name": "encodeERC20AssetData",
				"outputs": [
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "ownerAddress",
						"type": "address"
					},
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"name": "getBalance",
				"outputs": [
					{
						"name": "balance",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "ERC20_PROXY_ID",
				"outputs": [
					{
						"name": "",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"name": "decodeERC20AssetData",
				"outputs": [
					{
						"name": "assetProxyId",
						"type": "bytes4"
					},
					{
						"name": "tokenAddress",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"name": "decodeERC1155AssetData",
				"outputs": [
					{
						"name": "assetProxyId",
						"type": "bytes4"
					},
					{
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"name": "tokenIds",
						"type": "uint256[]"
					},
					{
						"name": "tokenValues",
						"type": "uint256[]"
					},
					{
						"name": "callbackData",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "ERC721_PROXY_ID",
				"outputs": [
					{
						"name": "",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "encodeERC721AssetData",
				"outputs": [
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "MULTI_ASSET_PROXY_ID",
				"outputs": [
					{
						"name": "",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"name": "tokenIds",
						"type": "uint256[]"
					},
					{
						"name": "tokenValues",
						"type": "uint256[]"
					},
					{
						"name": "callbackData",
						"type": "bytes"
					}
				],
				"name": "encodeERC1155AssetData",
				"outputs": [
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getERC721TokenOwner",
				"outputs": [
					{
						"name": "ownerAddress",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"name": "decodeMultiAssetData",
				"outputs": [
					{
						"name": "assetProxyId",
						"type": "bytes4"
					},
					{
						"name": "amounts",
						"type": "uint256[]"
					},
					{
						"name": "nestedAssetData",
						"type": "bytes[]"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "ownerAddress",
						"type": "address"
					},
					{
						"name": "assetData",
						"type": "bytes[]"
					}
				],
				"name": "getBatchBalances",
				"outputs": [
					{
						"name": "balances",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "ownerAddress",
						"type": "address"
					},
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"name": "getAssetProxyAllowance",
				"outputs": [
					{
						"name": "allowance",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "amounts",
						"type": "uint256[]"
					},
					{
						"name": "nestedAssetData",
						"type": "bytes[]"
					}
				],
				"name": "encodeMultiAssetData",
				"outputs": [
					{
						"name": "assetData",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "ownerAddress",
						"type": "address"
					},
					{
						"name": "assetData",
						"type": "bytes[]"
					}
				],
				"name": "getBatchBalancesAndAssetProxyAllowances",
				"outputs": [
					{
						"name": "balances",
						"type": "uint256[]"
					},
					{
						"name": "allowances",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "_exchange",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x60806040523480156200001157600080fd5b50604051620027e6380380620027e68339810160408190526200003491620002d3565b600080546001600160a01b0319166001600160a01b0383811691909117918290556040517f60704108000000000000000000000000000000000000000000000000000000008152911690636070410890620000b4907ff47261b0000000000000000000000000000000000000000000000000000000009060040162000305565b60206040518083038186803b158015620000cd57600080fd5b505afa158015620000e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620001089190810190620002d3565b600180546001600160a01b0319166001600160a01b039283161790556000546040517f6070410800000000000000000000000000000000000000000000000000000000815291169063607041089062000186907f02571792000000000000000000000000000000000000000000000000000000009060040162000305565b60206040518083038186803b1580156200019f57600080fd5b505afa158015620001b4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620001da9190810190620002d3565b600280546001600160a01b0319166001600160a01b039283161790556000546040517f6070410800000000000000000000000000000000000000000000000000000000815291169063607041089062000258907fa7cb5fb7000000000000000000000000000000000000000000000000000000009060040162000305565b60206040518083038186803b1580156200027157600080fd5b505afa15801562000286573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620002ac9190810190620002d3565b600380546001600160a01b0319166001600160a01b03929092169190911790555062000332565b600060208284031215620002e657600080fd5b81516001600160a01b0381168114620002fe57600080fd5b9392505050565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b6124a480620003426000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063a28fe02e116100cd578063bbb2dcf611610081578063d186037f11610066578063d186037f146102ef578063d3d862d114610302578063e4e6e7da1461031557610151565b8063bbb2dcf6146102ba578063d001c5dc146102dc57610151565b8063b37fda04116100b2578063b37fda041461027f578063b43cffe114610287578063b69884631461029a57610151565b8063a28fe02e14610264578063a6627e9f1461026c57610151565b8063590aa875116101245780638ee1a642116101095780638ee1a642146102175780638f4ce4791461021f5780639eadc8351461024057610151565b8063590aa875146101d75780637d727512146101f757610151565b806304a5618a146101565780630d7b7d76146101815780631bd0eb8f146101a25780634dfdac20146101b7575b600080fd5b610169610164366004611da3565b610336565b604051610178939291906120fe565b60405180910390f35b61019461018f366004611c27565b6103fc565b604051610178929190612373565b6101aa61041e565b6040516101789190612001565b6101ca6101c5366004611b40565b610442565b6040516101789190611f9b565b6101ea6101e5366004611b24565b6104c6565b604051610178919061219b565b61020a610205366004611c27565b610565565b604051610178919061236a565b6101aa610a63565b61023261022d366004611da3565b610a87565b60405161017892919061202e565b61025361024e366004611da3565b610b2f565b604051610178959493929190612076565b6101aa610bf2565b6101ea61027a366004611c6d565b610c16565b6101aa610cb8565b6101ea610295366004611b90565b610cdc565b6102ad6102a8366004611c6d565b610d84565b6040516101789190611eda565b6102cd6102c8366004611da3565b610ea2565b6040516101789392919061214e565b6101ca6102ea366004611b40565b610f67565b61020a6102fd366004611c27565b610fd5565b6101ea610310366004611c98565b61166c565b610328610323366004611b40565b611689565b604051610178929190611fdc565b6000808061034a848263ffffffff6116a216565b92507fffffffff0000000000000000000000000000000000000000000000000000000083167f0257179200000000000000000000000000000000000000000000000000000000146103d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c790612333565b60405180910390fd5b6103e184601063ffffffff61170d16565b91506103f484602463ffffffff61176c16565b929491935050565b6000806104098484610565565b91506104158484610fd5565b90509250929050565b7fa7cb5fb70000000000000000000000000000000000000000000000000000000081565b606060008251905080604051908082528060200260200182016040528015610474578160200160208202803883390190505b50915060005b8181146104bd5761049e8585838151811061049157fe5b6020026020010151610fd5565b8382815181106104aa57fe5b602090810291909101015260010161047a565b50505b92915050565b606063f47261b060e01b826040516024016104e19190611eda565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050919050565b600080610578838263ffffffff6116a216565b90507fffffffff0000000000000000000000000000000000000000000000000000000081167ff47261b00000000000000000000000000000000000000000000000000000000014156106f65760006105d784601063ffffffff61170d16565b905060606370a0823160e01b866040516024016105f49190611eda565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608373ffffffffffffffffffffffffffffffffffffffff168360405161067c9190611ebe565b600060405180830381855afa9150503d80600081146106b7576040519150601f19603f3d011682016040523d82523d6000602084013e6106bc565b606091505b50915091508180156106cf575080516020145b6106da5760006106eb565b6106eb81600063ffffffff61176c16565b955050505050610a5c565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f025717920000000000000000000000000000000000000000000000000000000014156107a35760008061074c85610336565b92509250508573ffffffffffffffffffffffffffffffffffffffff166107728383610d84565b73ffffffffffffffffffffffffffffffffffffffff1614610794576000610797565b60015b60ff1693505050610a5c565b7fffffffff0000000000000000000000000000000000000000000000000000000081167fa7cb5fb700000000000000000000000000000000000000000000000000000000141561098d5760006060806107fb86610b2f565b5081519296509094509250905060005b81811461098357606062fdd58e60e01b8a86848151811061082857fe5b6020026020010151604051602401610841929190611f75565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608773ffffffffffffffffffffffffffffffffffffffff16836040516108c99190611ebe565b600060405180830381855afa9150503d8060008114610904576040519150601f19603f3d011682016040523d82523d6000602084013e610909565b606091505b5091509150600082801561091e575081516020145b61092957600061093a565b61093a82600063ffffffff61176c16565b9050600087868151811061094a57fe5b6020026020010151828161095a57fe5b0490508b81108061096957508b155b1561097257809b505b50506001909301925061080b915050565b5050505050610a5c565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f94cfcdd7000000000000000000000000000000000000000000000000000000001415610a5c576060806109e385610ea2565b80519194509250905060005b818114610a57576000610a1589858481518110610a0857fe5b6020026020010151610565565b90506000858381518110610a2557fe5b60200260200101518281610a3557fe5b04905087811080610a44575087155b15610a4d578097505b50506001016109ef565b505050505b5092915050565b7ff47261b00000000000000000000000000000000000000000000000000000000081565b600080610a9a838263ffffffff6116a216565b91507fffffffff0000000000000000000000000000000000000000000000000000000082167ff47261b00000000000000000000000000000000000000000000000000000000014610b17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c790612333565b610b2883601063ffffffff61170d16565b9050915091565b60008060608080610b46868563ffffffff6116a216565b94507fffffffff0000000000000000000000000000000000000000000000000000000085167fa7cb5fb70000000000000000000000000000000000000000000000000000000014610bc3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c790612333565b505050506024828101516044840151606485015160848601519496929591820184019490820184019391010190565b7f025717920000000000000000000000000000000000000000000000000000000081565b6060630257179260e01b8383604051602401610c33929190611f75565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b7f94cfcdd70000000000000000000000000000000000000000000000000000000081565b606063a7cb5fb760e01b85858585604051602401610cfd9493929190611f22565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050949350505050565b60006060636352211e60e01b83604051602401610da1919061236a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608573ffffffffffffffffffffffffffffffffffffffff1683604051610e299190611ebe565b600060405180830381855afa9150503d8060008114610e64576040519150601f19603f3d011682016040523d82523d6000602084013e610e69565b606091505b5091509150818015610e7c575080516020145b610e87576000610e98565b610e9881600c63ffffffff61170d16565b9695505050505050565b6000606080610eb7848463ffffffff6116a216565b92507fffffffff0000000000000000000000000000000000000000000000000000000083167f94cfcdd70000000000000000000000000000000000000000000000000000000014610f34576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c790612333565b8351610f4a90859060049063ffffffff61177f16565b806020019051610f5d9190810190611cf2565b9395909450915050565b606060008251905080604051908082528060200260200182016040528015610f99578160200160208202803883390190505b50915060005b8181146104bd57610fb685858381518110610a0857fe5b838281518110610fc257fe5b6020908102919091010152600101610f9f565b600080610fe8838263ffffffff6116a216565b90507fffffffff0000000000000000000000000000000000000000000000000000000081167f94cfcdd70000000000000000000000000000000000000000000000000000000014156110b25760608061104085610ea2565b80519194509250905060005b8181146110a75760006110658985848151811061049157fe5b9050600085838151811061107557fe5b6020026020010151828161108557fe5b04905087811080611094575087155b1561109d578097505b505060010161104c565b506104c09350505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081167ff47261b000000000000000000000000000000000000000000000000000000000141561116257600061110f84601063ffffffff61170d16565b6001546040519192506060917fdd62ed3e00000000000000000000000000000000000000000000000000000000916105f491899173ffffffffffffffffffffffffffffffffffffffff1690602401611efb565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f02571792000000000000000000000000000000000000000000000000000000001415611490576000806111b885610336565b600254604051929550909350606092507fe985e9c50000000000000000000000000000000000000000000000000000000091611211918a9173ffffffffffffffffffffffffffffffffffffffff90911690602401611efb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608473ffffffffffffffffffffffffffffffffffffffff16836040516112999190611ebe565b600060405180830381855afa9150503d80600081146112d4576040519150601f19603f3d011682016040523d82523d6000602084013e6112d9565b606091505b50915091508115806112ed57508051602014155b80611309575061130481600063ffffffff61176c16565b600114155b1561146357606063081812fc60e01b85604051602401611329919061236a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508573ffffffffffffffffffffffffffffffffffffffff16816040516113ad9190611ebe565b600060405180830381855afa9150503d80600081146113e8576040519150601f19603f3d011682016040523d82523d6000602084013e6113ed565b606091505b509093509150828015611401575081516020145b801561144a575060025473ffffffffffffffffffffffffffffffffffffffff1661143283600c63ffffffff61170d16565b73ffffffffffffffffffffffffffffffffffffffff16145b611455576000611458565b60015b60ff16975050610983565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96505050505050610a5c565b7fffffffff0000000000000000000000000000000000000000000000000000000081167fa7cb5fb7000000000000000000000000000000000000000000000000000000001415610a5c5760006114e584610b2f565b5050600354604051929450606093507fe985e9c5000000000000000000000000000000000000000000000000000000009261153c9250899173ffffffffffffffffffffffffffffffffffffffff1690602401611efb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608373ffffffffffffffffffffffffffffffffffffffff16836040516115c49190611ebe565b600060405180830381855afa9150503d80600081146115ff576040519150601f19603f3d011682016040523d82523d6000602084013e611604565b606091505b5091509150818015611617575080516020145b8015611633575061162f81600063ffffffff61176c16565b6001145b61163e576000611660565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b98975050505050505050565b60606394cfcdd760e01b8383604051602401610c33929190611fae565b6060806116968484610f67565b91506104158484610442565b600081600401835110156116e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c7906122d6565b5001602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b6000816014018351101561174d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c790612279565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b60006117788383611844565b9392505050565b6060818311156117bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c7906121ae565b83518211156117f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c7906121e5565b8282036040519080825280601f01601f191660200182016040528015611823576020820181803883390190505b5090506117786118328261188d565b8461183c8761188d565b018351611893565b60008160200183511015611884576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c79061221c565b50016020015190565b60200190565b60208110156118bd576001816020036101000a038019835116818551168082178652505050611952565b828214156118ca57611952565b828211156119045760208103905080820181840181515b828510156118fc5784518652602095860195909401936118e1565b905250611952565b60208103905080820181840183515b8186121561194d57825182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09283019290910190611913565b855250505b505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146104c057600080fd5b600082601f83011261198b578081fd5b815161199e611999826123a8565b612381565b818152915060208083019084810160005b84811015610a57578151870188603f8201126119ca57600080fd5b838101516119da611999826123c9565b8181528a60408385010111156119ef57600080fd5b6119ff828783016040860161240c565b8652505092820192908201906001016119af565b600082601f830112611a23578081fd5b8135611a31611999826123a8565b8181529150602080830190840160005b83811015611a6e57611a598760208435890101611ad6565b83526020928301929190910190600101611a41565b5050505092915050565b600082601f830112611a88578081fd5b8135611a96611999826123a8565b818152915060208083019084810181840286018201871015611ab757600080fd5b60005b84811015610a5757813584529282019290820190600101611aba565b600082601f830112611ae6578081fd5b8135611af4611999826123c9565b9150808252836020828501011115611b0b57600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215611b3657600080fd5b6117788383611957565b60008060408385031215611b5357600080fd5b8235611b5e8161243c565b9150602083013567ffffffffffffffff811115611b7a57600080fd5b611b8685828601611a13565b9150509250929050565b60008060008060808587031215611ba5578182fd5b611baf8686611957565b9350602085013567ffffffffffffffff80821115611bcb578384fd5b611bd788838901611a78565b94506040870135915080821115611bec578384fd5b611bf888838901611a78565b93506060870135915080821115611c0e57600080fd5b50611c1b87828801611ad6565b91505092959194509250565b60008060408385031215611c3a57600080fd5b8235611c458161243c565b9150602083013567ffffffffffffffff811115611c6157600080fd5b611b8685828601611ad6565b60008060408385031215611c8057600080fd5b611c8a8484611957565b946020939093013593505050565b60008060408385031215611cab57600080fd5b823567ffffffffffffffff80821115611cc357600080fd5b611ccf86838701611a78565b93506020850135915080821115611ce557600080fd5b50611b8685828601611a13565b60008060408385031215611d04578182fd5b825167ffffffffffffffff80821115611d1b578384fd5b81850186601f820112611d2c578485fd5b80519250611d3c611999846123a8565b80848252602080830192508084018a828389028701011115611d5c578889fd5b8894505b86851015611d7e578051845260019490940193928101928101611d60565b508801519096509350505080821115611d9657600080fd5b50611b868582860161197b565b600060208284031215611db557600080fd5b813567ffffffffffffffff811115611dcc57600080fd5b611dd884828501611ad6565b949350505050565b60008151808452602084018081955060208302810191506020850160005b84811015611e2c578284038852611e16848351611e74565b6020988901989094509190910190600101611dfe565b50919695505050505050565b600081518084526020840193506020830160005b82811015611e6a578151865260209586019590910190600101611e4c565b5093949350505050565b60008151808452611e8c81602086016020860161240c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251611ed081846020870161240c565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b600073ffffffffffffffffffffffffffffffffffffffff8616825260806020830152611f516080830186611e38565b8281036040840152611f638186611e38565b83810360608501526116608186611e74565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6000602082526117786020830184611e38565b600060408252611fc16040830185611e38565b8281036020840152611fd38185611de0565b95945050505050565b600060408252611fef6040830185611e38565b8281036020840152611fd38185611e38565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b60007fffffffff000000000000000000000000000000000000000000000000000000008716825273ffffffffffffffffffffffffffffffffffffffff8616602083015260a060408301526120cd60a0830186611e38565b82810360608401526120df8186611e38565b83810360808501526120f18186611e74565b9998505050505050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000093909316835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b60007fffffffff0000000000000000000000000000000000000000000000000000000085168252606060208301526121896060830185611e38565b8281036040840152610e988185611de0565b6000602082526117786020830184611e74565b6020808252601a908201527f46524f4d5f4c4553535f5448414e5f544f5f5245515549524544000000000000604082015260600190565b6020808252601c908201527f544f5f4c4553535f5448414e5f4c454e4754485f524551554952454400000000604082015260600190565b60208082526026908201527f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524560408201527f5155495245440000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524560408201527f5155495245440000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f475245415445525f4f525f455155414c5f544f5f345f4c454e4754485f52455160408201527f5549524544000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600e908201527f57524f4e475f50524f58595f4944000000000000000000000000000000000000604082015260600190565b90815260200190565b918252602082015260400190565b60405181810167ffffffffffffffff811182821017156123a057600080fd5b604052919050565b600067ffffffffffffffff8211156123bf57600080fd5b5060209081020190565b600067ffffffffffffffff8211156123e057600080fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381101561242757818101518382015260200161240f565b83811115612436576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461245e57600080fd5b5056fea365627a7a72305820b081f61e9a9bf60164c995e953ed8eb67559197846002c4295a5d3696fade9766c6578706572696d656e74616cf564736f6c63430005090040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x27E6 CODESIZE SUB DUP1 PUSH3 0x27E6 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x2D3 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x6070410800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH3 0xB4 SWAP1 PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x4 ADD PUSH3 0x305 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xE2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0x108 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x2D3 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x6070410800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH3 0x186 SWAP1 PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x4 ADD PUSH3 0x305 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x19F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x1B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0x1DA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x2D3 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x6070410800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH3 0x258 SWAP1 PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x4 ADD PUSH3 0x305 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x271 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x286 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0x2AC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x2D3 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x332 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x2E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x2FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0x24A4 DUP1 PUSH3 0x342 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x151 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA28FE02E GT PUSH2 0xCD JUMPI DUP1 PUSH4 0xBBB2DCF6 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xD186037F GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD186037F EQ PUSH2 0x2EF JUMPI DUP1 PUSH4 0xD3D862D1 EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0xE4E6E7DA EQ PUSH2 0x315 JUMPI PUSH2 0x151 JUMP JUMPDEST DUP1 PUSH4 0xBBB2DCF6 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0xD001C5DC EQ PUSH2 0x2DC JUMPI PUSH2 0x151 JUMP JUMPDEST DUP1 PUSH4 0xB37FDA04 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0xB37FDA04 EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0xB43CFFE1 EQ PUSH2 0x287 JUMPI DUP1 PUSH4 0xB6988463 EQ PUSH2 0x29A JUMPI PUSH2 0x151 JUMP JUMPDEST DUP1 PUSH4 0xA28FE02E EQ PUSH2 0x264 JUMPI DUP1 PUSH4 0xA6627E9F EQ PUSH2 0x26C JUMPI PUSH2 0x151 JUMP JUMPDEST DUP1 PUSH4 0x590AA875 GT PUSH2 0x124 JUMPI DUP1 PUSH4 0x8EE1A642 GT PUSH2 0x109 JUMPI DUP1 PUSH4 0x8EE1A642 EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0x8F4CE479 EQ PUSH2 0x21F JUMPI DUP1 PUSH4 0x9EADC835 EQ PUSH2 0x240 JUMPI PUSH2 0x151 JUMP JUMPDEST DUP1 PUSH4 0x590AA875 EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x7D727512 EQ PUSH2 0x1F7 JUMPI PUSH2 0x151 JUMP JUMPDEST DUP1 PUSH4 0x4A5618A EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0xD7B7D76 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x1BD0EB8F EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x4DFDAC20 EQ PUSH2 0x1B7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x169 PUSH2 0x164 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DA3 JUMP JUMPDEST PUSH2 0x336 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x20FE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x194 PUSH2 0x18F CALLDATASIZE PUSH1 0x4 PUSH2 0x1C27 JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP3 SWAP2 SWAP1 PUSH2 0x2373 JUMP JUMPDEST PUSH2 0x1AA PUSH2 0x41E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP2 SWAP1 PUSH2 0x2001 JUMP JUMPDEST PUSH2 0x1CA PUSH2 0x1C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B40 JUMP JUMPDEST PUSH2 0x442 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP2 SWAP1 PUSH2 0x1F9B JUMP JUMPDEST PUSH2 0x1EA PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B24 JUMP JUMPDEST PUSH2 0x4C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP2 SWAP1 PUSH2 0x219B JUMP JUMPDEST PUSH2 0x20A PUSH2 0x205 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C27 JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP2 SWAP1 PUSH2 0x236A JUMP JUMPDEST PUSH2 0x1AA PUSH2 0xA63 JUMP JUMPDEST PUSH2 0x232 PUSH2 0x22D CALLDATASIZE PUSH1 0x4 PUSH2 0x1DA3 JUMP JUMPDEST PUSH2 0xA87 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP3 SWAP2 SWAP1 PUSH2 0x202E JUMP JUMPDEST PUSH2 0x253 PUSH2 0x24E CALLDATASIZE PUSH1 0x4 PUSH2 0x1DA3 JUMP JUMPDEST PUSH2 0xB2F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2076 JUMP JUMPDEST PUSH2 0x1AA PUSH2 0xBF2 JUMP JUMPDEST PUSH2 0x1EA PUSH2 0x27A CALLDATASIZE PUSH1 0x4 PUSH2 0x1C6D JUMP JUMPDEST PUSH2 0xC16 JUMP JUMPDEST PUSH2 0x1AA PUSH2 0xCB8 JUMP JUMPDEST PUSH2 0x1EA PUSH2 0x295 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B90 JUMP JUMPDEST PUSH2 0xCDC JUMP JUMPDEST PUSH2 0x2AD PUSH2 0x2A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C6D JUMP JUMPDEST PUSH2 0xD84 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP2 SWAP1 PUSH2 0x1EDA JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x2C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DA3 JUMP JUMPDEST PUSH2 0xEA2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x214E JUMP JUMPDEST PUSH2 0x1CA PUSH2 0x2EA CALLDATASIZE PUSH1 0x4 PUSH2 0x1B40 JUMP JUMPDEST PUSH2 0xF67 JUMP JUMPDEST PUSH2 0x20A PUSH2 0x2FD CALLDATASIZE PUSH1 0x4 PUSH2 0x1C27 JUMP JUMPDEST PUSH2 0xFD5 JUMP JUMPDEST PUSH2 0x1EA PUSH2 0x310 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C98 JUMP JUMPDEST PUSH2 0x166C JUMP JUMPDEST PUSH2 0x328 PUSH2 0x323 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B40 JUMP JUMPDEST PUSH2 0x1689 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP3 SWAP2 SWAP1 PUSH2 0x1FDC JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x34A DUP5 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x16A2 AND JUMP JUMPDEST SWAP3 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x3D0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3E1 DUP5 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x170D AND JUMP JUMPDEST SWAP2 POP PUSH2 0x3F4 DUP5 PUSH1 0x24 PUSH4 0xFFFFFFFF PUSH2 0x176C AND JUMP JUMPDEST SWAP3 SWAP5 SWAP2 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x409 DUP5 DUP5 PUSH2 0x565 JUMP JUMPDEST SWAP2 POP PUSH2 0x415 DUP5 DUP5 PUSH2 0xFD5 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x474 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x4BD JUMPI PUSH2 0x49E DUP6 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x491 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xFD5 JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4AA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x47A JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xF47261B0 PUSH1 0xE0 SHL DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4E1 SWAP2 SWAP1 PUSH2 0x1EDA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x578 DUP4 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x16A2 AND JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x6F6 JUMPI PUSH1 0x0 PUSH2 0x5D7 DUP5 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x170D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x60 PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5F4 SWAP2 SWAP1 PUSH2 0x1EDA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x67C SWAP2 SWAP1 PUSH2 0x1EBE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6B7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6BC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x6CF JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0x6DA JUMPI PUSH1 0x0 PUSH2 0x6EB JUMP JUMPDEST PUSH2 0x6EB DUP2 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x176C AND JUMP JUMPDEST SWAP6 POP POP POP POP POP PUSH2 0xA5C JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x7A3 JUMPI PUSH1 0x0 DUP1 PUSH2 0x74C DUP6 PUSH2 0x336 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x772 DUP4 DUP4 PUSH2 0xD84 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x794 JUMPI PUSH1 0x0 PUSH2 0x797 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND SWAP4 POP POP POP PUSH2 0xA5C JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x98D JUMPI PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x7FB DUP7 PUSH2 0xB2F JUMP JUMPDEST POP DUP2 MLOAD SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x983 JUMPI PUSH1 0x60 PUSH3 0xFDD58E PUSH1 0xE0 SHL DUP11 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x828 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x841 SWAP3 SWAP2 SWAP1 PUSH2 0x1F75 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x8C9 SWAP2 SWAP1 PUSH2 0x1EBE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x904 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x909 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 DUP1 ISZERO PUSH2 0x91E JUMPI POP DUP2 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0x929 JUMPI PUSH1 0x0 PUSH2 0x93A JUMP JUMPDEST PUSH2 0x93A DUP3 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x176C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x94A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP2 PUSH2 0x95A JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP12 DUP2 LT DUP1 PUSH2 0x969 JUMPI POP DUP12 ISZERO JUMPDEST ISZERO PUSH2 0x972 JUMPI DUP1 SWAP12 POP JUMPDEST POP POP PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 POP PUSH2 0x80B SWAP2 POP POP JUMP JUMPDEST POP POP POP POP POP PUSH2 0xA5C JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xA5C JUMPI PUSH1 0x60 DUP1 PUSH2 0x9E3 DUP6 PUSH2 0xEA2 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xA57 JUMPI PUSH1 0x0 PUSH2 0xA15 DUP10 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xA08 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x565 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA25 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP2 PUSH2 0xA35 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP8 DUP2 LT DUP1 PUSH2 0xA44 JUMPI POP DUP8 ISZERO JUMPDEST ISZERO PUSH2 0xA4D JUMPI DUP1 SWAP8 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x9EF JUMP JUMPDEST POP POP POP POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xA9A DUP4 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x16A2 AND JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 EQ PUSH2 0xB17 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0x2333 JUMP JUMPDEST PUSH2 0xB28 DUP4 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x170D AND JUMP JUMPDEST SWAP1 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP1 PUSH2 0xB46 DUP7 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x16A2 AND JUMP JUMPDEST SWAP5 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP6 AND PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 EQ PUSH2 0xBC3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0x2333 JUMP JUMPDEST POP POP POP POP PUSH1 0x24 DUP3 DUP2 ADD MLOAD PUSH1 0x44 DUP5 ADD MLOAD PUSH1 0x64 DUP6 ADD MLOAD PUSH1 0x84 DUP7 ADD MLOAD SWAP5 SWAP7 SWAP3 SWAP6 SWAP2 DUP3 ADD DUP5 ADD SWAP5 SWAP1 DUP3 ADD DUP5 ADD SWAP4 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x2571792 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xC33 SWAP3 SWAP2 SWAP1 PUSH2 0x1F75 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xA7CB5FB7 PUSH1 0xE0 SHL DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xCFD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F22 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH4 0x6352211E PUSH1 0xE0 SHL DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xDA1 SWAP2 SWAP1 PUSH2 0x236A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0xE29 SWAP2 SWAP1 PUSH2 0x1EBE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE64 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE69 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0xE7C JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0xE87 JUMPI PUSH1 0x0 PUSH2 0xE98 JUMP JUMPDEST PUSH2 0xE98 DUP2 PUSH1 0xC PUSH4 0xFFFFFFFF PUSH2 0x170D AND JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0xEB7 DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x16A2 AND JUMP JUMPDEST SWAP3 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 EQ PUSH2 0xF34 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0x2333 JUMP JUMPDEST DUP4 MLOAD PUSH2 0xF4A SWAP1 DUP6 SWAP1 PUSH1 0x4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x177F AND JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xF5D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1CF2 JUMP JUMPDEST SWAP4 SWAP6 SWAP1 SWAP5 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xF99 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x4BD JUMPI PUSH2 0xFB6 DUP6 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA08 JUMPI INVALID JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xFC2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0xF9F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xFE8 DUP4 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x16A2 AND JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x10B2 JUMPI PUSH1 0x60 DUP1 PUSH2 0x1040 DUP6 PUSH2 0xEA2 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x10A7 JUMPI PUSH1 0x0 PUSH2 0x1065 DUP10 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x491 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1075 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP2 PUSH2 0x1085 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP8 DUP2 LT DUP1 PUSH2 0x1094 JUMPI POP DUP8 ISZERO JUMPDEST ISZERO PUSH2 0x109D JUMPI DUP1 SWAP8 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x104C JUMP JUMPDEST POP PUSH2 0x4C0 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1162 JUMPI PUSH1 0x0 PUSH2 0x110F DUP5 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x170D AND JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 POP PUSH1 0x60 SWAP2 PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 SWAP2 PUSH2 0x5F4 SWAP2 DUP10 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x24 ADD PUSH2 0x1EFB JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1490 JUMPI PUSH1 0x0 DUP1 PUSH2 0x11B8 DUP6 PUSH2 0x336 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP6 POP SWAP1 SWAP4 POP PUSH1 0x60 SWAP3 POP PUSH32 0xE985E9C500000000000000000000000000000000000000000000000000000000 SWAP2 PUSH2 0x1211 SWAP2 DUP11 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH1 0x24 ADD PUSH2 0x1EFB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1299 SWAP2 SWAP1 PUSH2 0x1EBE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x12D4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x12D9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO DUP1 PUSH2 0x12ED JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ ISZERO JUMPDEST DUP1 PUSH2 0x1309 JUMPI POP PUSH2 0x1304 DUP2 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x176C AND JUMP JUMPDEST PUSH1 0x1 EQ ISZERO JUMPDEST ISZERO PUSH2 0x1463 JUMPI PUSH1 0x60 PUSH4 0x81812FC PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1329 SWAP2 SWAP1 PUSH2 0x236A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x40 MLOAD PUSH2 0x13AD SWAP2 SWAP1 PUSH2 0x1EBE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x13E8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13ED JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP4 POP SWAP2 POP DUP3 DUP1 ISZERO PUSH2 0x1401 JUMPI POP DUP2 MLOAD PUSH1 0x20 EQ JUMPDEST DUP1 ISZERO PUSH2 0x144A JUMPI POP PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1432 DUP4 PUSH1 0xC PUSH4 0xFFFFFFFF PUSH2 0x170D AND JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x1455 JUMPI PUSH1 0x0 PUSH2 0x1458 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND SWAP8 POP POP PUSH2 0x983 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 POP POP POP POP POP POP PUSH2 0xA5C JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xA5C JUMPI PUSH1 0x0 PUSH2 0x14E5 DUP5 PUSH2 0xB2F JUMP JUMPDEST POP POP PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP5 POP PUSH1 0x60 SWAP4 POP PUSH32 0xE985E9C500000000000000000000000000000000000000000000000000000000 SWAP3 PUSH2 0x153C SWAP3 POP DUP10 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x24 ADD PUSH2 0x1EFB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x15C4 SWAP2 SWAP1 PUSH2 0x1EBE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x15FF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1604 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1617 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST DUP1 ISZERO PUSH2 0x1633 JUMPI POP PUSH2 0x162F DUP2 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x176C AND JUMP JUMPDEST PUSH1 0x1 EQ JUMPDEST PUSH2 0x163E JUMPI PUSH1 0x0 PUSH2 0x1660 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x94CFCDD7 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xC33 SWAP3 SWAP2 SWAP1 PUSH2 0x1FAE JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x1696 DUP5 DUP5 PUSH2 0xF67 JUMP JUMPDEST SWAP2 POP PUSH2 0x415 DUP5 DUP5 PUSH2 0x442 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0x16E2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0x22D6 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x174D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0x2279 JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1778 DUP4 DUP4 PUSH2 0x1844 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 DUP4 GT ISZERO PUSH2 0x17BB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0x21AE JUMP JUMPDEST DUP4 MLOAD DUP3 GT ISZERO PUSH2 0x17F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0x21E5 JUMP JUMPDEST DUP3 DUP3 SUB PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1823 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x1778 PUSH2 0x1832 DUP3 PUSH2 0x188D JUMP JUMPDEST DUP5 PUSH2 0x183C DUP8 PUSH2 0x188D JUMP JUMPDEST ADD DUP4 MLOAD PUSH2 0x1893 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1884 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0x221C JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x18BD JUMPI PUSH1 0x1 DUP2 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP4 MLOAD AND DUP2 DUP6 MLOAD AND DUP1 DUP3 OR DUP7 MSTORE POP POP POP PUSH2 0x1952 JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0x18CA JUMPI PUSH2 0x1952 JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x1904 JUMPI PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP2 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x18FC JUMPI DUP5 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP5 ADD SWAP4 PUSH2 0x18E1 JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x1952 JUMP JUMPDEST PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP4 MLOAD JUMPDEST DUP2 DUP7 SLT ISZERO PUSH2 0x194D JUMPI DUP3 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1913 JUMP JUMPDEST DUP6 MSTORE POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x198B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x199E PUSH2 0x1999 DUP3 PUSH2 0x23A8 JUMP JUMPDEST PUSH2 0x2381 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xA57 JUMPI DUP2 MLOAD DUP8 ADD DUP9 PUSH1 0x3F DUP3 ADD SLT PUSH2 0x19CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP2 ADD MLOAD PUSH2 0x19DA PUSH2 0x1999 DUP3 PUSH2 0x23C9 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP11 PUSH1 0x40 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x19EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19FF DUP3 DUP8 DUP4 ADD PUSH1 0x40 DUP7 ADD PUSH2 0x240C JUMP JUMPDEST DUP7 MSTORE POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x19AF JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A23 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1A31 PUSH2 0x1999 DUP3 PUSH2 0x23A8 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1A6E JUMPI PUSH2 0x1A59 DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x1AD6 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1A41 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A88 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1A96 PUSH2 0x1999 DUP3 PUSH2 0x23A8 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1AB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xA57 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1ABA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1AE6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1AF4 PUSH2 0x1999 DUP3 PUSH2 0x23C9 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1B0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1778 DUP4 DUP4 PUSH2 0x1957 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1B5E DUP2 PUSH2 0x243C JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B86 DUP6 DUP3 DUP7 ADD PUSH2 0x1A13 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1BA5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1BAF DUP7 DUP7 PUSH2 0x1957 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1BCB JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1BD7 DUP9 DUP4 DUP10 ADD PUSH2 0x1A78 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1BEC JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1BF8 DUP9 DUP4 DUP10 ADD PUSH2 0x1A78 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1C0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C1B DUP8 DUP3 DUP9 ADD PUSH2 0x1AD6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1C45 DUP2 PUSH2 0x243C JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B86 DUP6 DUP3 DUP7 ADD PUSH2 0x1AD6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C8A DUP5 DUP5 PUSH2 0x1957 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1CC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CCF DUP7 DUP4 DUP8 ADD PUSH2 0x1A78 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1CE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B86 DUP6 DUP3 DUP7 ADD PUSH2 0x1A13 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D04 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1D1B JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x1D2C JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 MLOAD SWAP3 POP PUSH2 0x1D3C PUSH2 0x1999 DUP5 PUSH2 0x23A8 JUMP JUMPDEST DUP1 DUP5 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP5 ADD DUP11 DUP3 DUP4 DUP10 MUL DUP8 ADD ADD GT ISZERO PUSH2 0x1D5C JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP5 POP JUMPDEST DUP7 DUP6 LT ISZERO PUSH2 0x1D7E JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x1D60 JUMP JUMPDEST POP DUP9 ADD MLOAD SWAP1 SWAP7 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x1D96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B86 DUP6 DUP3 DUP7 ADD PUSH2 0x197B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1DCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DD8 DUP5 DUP3 DUP6 ADD PUSH2 0x1AD6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD DUP1 DUP2 SWAP6 POP PUSH1 0x20 DUP4 MUL DUP2 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1E2C JUMPI DUP3 DUP5 SUB DUP9 MSTORE PUSH2 0x1E16 DUP5 DUP4 MLOAD PUSH2 0x1E74 JUMP JUMPDEST PUSH1 0x20 SWAP9 DUP10 ADD SWAP9 SWAP1 SWAP5 POP SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1DFE JUMP JUMPDEST POP SWAP2 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1E6A JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1E4C JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1E8C DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x240C JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1ED0 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x240C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP3 MSTORE PUSH1 0x80 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1F51 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x1E38 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1F63 DUP2 DUP7 PUSH2 0x1E38 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x1660 DUP2 DUP7 PUSH2 0x1E74 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1778 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1E38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x1FC1 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1E38 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1FD3 DUP2 DUP6 PUSH2 0x1DE0 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x1FEF PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1E38 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1FD3 DUP2 DUP6 PUSH2 0x1E38 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP8 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x20CD PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x1E38 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x20DF DUP2 DUP7 PUSH2 0x1E38 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x20F1 DUP2 DUP7 PUSH2 0x1E74 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP6 AND DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2189 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1E38 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xE98 DUP2 DUP6 PUSH2 0x1DE0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1778 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1E74 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x46524F4D5F4C4553535F5448414E5F544F5F5245515549524544000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x544F5F4C4553535F5448414E5F4C454E4754485F524551554952454400000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F345F4C454E4754485F524551 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5549524544000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x57524F4E475F50524F58595F4944000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x23A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x23BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x23E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2427 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x240F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2436 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x245E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723058 KECCAK256 0xb0 DUP2 0xf6 0x1e SWAP11 SWAP12 0xf6 ADD PUSH5 0xC995E953ED DUP15 0xb6 PUSH22 0x59197846002C4295A5D3696FADE9766C657870657269 PUSH14 0x656E74616CF564736F6C63430005 MULMOD STOP BLOCKHASH ",
				"sourceMap": "846:21044:1:-;;;1844:322;8:9:-1;5:2;;;30:1;27;20:12;5:2;1844:322:1;;;;;;;;;;;;;;;;;;;;;1905:9;:32;;-1:-1:-1;;;;;;1905:32:1;-1:-1:-1;;;;;1905:32:1;;;;;;;;;;;1970:39;;;;;:9;;;:23;;:39;;1994:14;;1970:39;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1970:39:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1970:39:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1970:39:1;;;;;;;;;1947:20;:62;;-1:-1:-1;;;;;;1947:62:1;-1:-1:-1;;;;;1947:62:1;;;;;;-1:-1:-1;2043:9:1;:40;;;;;:9;;;:23;;:40;;2067:15;;2043:40;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2043:40:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2043:40:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2043:40:1;;;;;;;;;2019:21;:64;;-1:-1:-1;;;;;;2019:64:1;-1:-1:-1;;;;;2019:64:1;;;;;;-1:-1:-1;2118:9:1;:41;;;;;:9;;;:23;;:41;;2142:16;;2118:41;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2118:41:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2118:41:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2118:41:1;;;;;;;;;2093:22;:66;;-1:-1:-1;;;;;;2093:66:1;-1:-1:-1;;;;;2093:66:1;;;;;;;;;;-1:-1:-1;846:21044:1;;146:263:-1;;261:2;249:9;240:7;236:23;232:32;229:2;;;-1:-1;;267:12;229:2;83:13;;-1:-1;;;;;1060:54;;1185:35;;1175:2;;-1:-1;;1224:12;1175:2;319:74;223:186;-1:-1;;;223:186;533:209;919:66;908:78;;;;485:36;;649:2;634:18;;620:122;;846:21044:1;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c8063a28fe02e116100cd578063bbb2dcf611610081578063d186037f11610066578063d186037f146102ef578063d3d862d114610302578063e4e6e7da1461031557610151565b8063bbb2dcf6146102ba578063d001c5dc146102dc57610151565b8063b37fda04116100b2578063b37fda041461027f578063b43cffe114610287578063b69884631461029a57610151565b8063a28fe02e14610264578063a6627e9f1461026c57610151565b8063590aa875116101245780638ee1a642116101095780638ee1a642146102175780638f4ce4791461021f5780639eadc8351461024057610151565b8063590aa875146101d75780637d727512146101f757610151565b806304a5618a146101565780630d7b7d76146101815780631bd0eb8f146101a25780634dfdac20146101b7575b600080fd5b610169610164366004611da3565b610336565b604051610178939291906120fe565b60405180910390f35b61019461018f366004611c27565b6103fc565b604051610178929190612373565b6101aa61041e565b6040516101789190612001565b6101ca6101c5366004611b40565b610442565b6040516101789190611f9b565b6101ea6101e5366004611b24565b6104c6565b604051610178919061219b565b61020a610205366004611c27565b610565565b604051610178919061236a565b6101aa610a63565b61023261022d366004611da3565b610a87565b60405161017892919061202e565b61025361024e366004611da3565b610b2f565b604051610178959493929190612076565b6101aa610bf2565b6101ea61027a366004611c6d565b610c16565b6101aa610cb8565b6101ea610295366004611b90565b610cdc565b6102ad6102a8366004611c6d565b610d84565b6040516101789190611eda565b6102cd6102c8366004611da3565b610ea2565b6040516101789392919061214e565b6101ca6102ea366004611b40565b610f67565b61020a6102fd366004611c27565b610fd5565b6101ea610310366004611c98565b61166c565b610328610323366004611b40565b611689565b604051610178929190611fdc565b6000808061034a848263ffffffff6116a216565b92507fffffffff0000000000000000000000000000000000000000000000000000000083167f0257179200000000000000000000000000000000000000000000000000000000146103d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c790612333565b60405180910390fd5b6103e184601063ffffffff61170d16565b91506103f484602463ffffffff61176c16565b929491935050565b6000806104098484610565565b91506104158484610fd5565b90509250929050565b7fa7cb5fb70000000000000000000000000000000000000000000000000000000081565b606060008251905080604051908082528060200260200182016040528015610474578160200160208202803883390190505b50915060005b8181146104bd5761049e8585838151811061049157fe5b6020026020010151610fd5565b8382815181106104aa57fe5b602090810291909101015260010161047a565b50505b92915050565b606063f47261b060e01b826040516024016104e19190611eda565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050919050565b600080610578838263ffffffff6116a216565b90507fffffffff0000000000000000000000000000000000000000000000000000000081167ff47261b00000000000000000000000000000000000000000000000000000000014156106f65760006105d784601063ffffffff61170d16565b905060606370a0823160e01b866040516024016105f49190611eda565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608373ffffffffffffffffffffffffffffffffffffffff168360405161067c9190611ebe565b600060405180830381855afa9150503d80600081146106b7576040519150601f19603f3d011682016040523d82523d6000602084013e6106bc565b606091505b50915091508180156106cf575080516020145b6106da5760006106eb565b6106eb81600063ffffffff61176c16565b955050505050610a5c565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f025717920000000000000000000000000000000000000000000000000000000014156107a35760008061074c85610336565b92509250508573ffffffffffffffffffffffffffffffffffffffff166107728383610d84565b73ffffffffffffffffffffffffffffffffffffffff1614610794576000610797565b60015b60ff1693505050610a5c565b7fffffffff0000000000000000000000000000000000000000000000000000000081167fa7cb5fb700000000000000000000000000000000000000000000000000000000141561098d5760006060806107fb86610b2f565b5081519296509094509250905060005b81811461098357606062fdd58e60e01b8a86848151811061082857fe5b6020026020010151604051602401610841929190611f75565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608773ffffffffffffffffffffffffffffffffffffffff16836040516108c99190611ebe565b600060405180830381855afa9150503d8060008114610904576040519150601f19603f3d011682016040523d82523d6000602084013e610909565b606091505b5091509150600082801561091e575081516020145b61092957600061093a565b61093a82600063ffffffff61176c16565b9050600087868151811061094a57fe5b6020026020010151828161095a57fe5b0490508b81108061096957508b155b1561097257809b505b50506001909301925061080b915050565b5050505050610a5c565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f94cfcdd7000000000000000000000000000000000000000000000000000000001415610a5c576060806109e385610ea2565b80519194509250905060005b818114610a57576000610a1589858481518110610a0857fe5b6020026020010151610565565b90506000858381518110610a2557fe5b60200260200101518281610a3557fe5b04905087811080610a44575087155b15610a4d578097505b50506001016109ef565b505050505b5092915050565b7ff47261b00000000000000000000000000000000000000000000000000000000081565b600080610a9a838263ffffffff6116a216565b91507fffffffff0000000000000000000000000000000000000000000000000000000082167ff47261b00000000000000000000000000000000000000000000000000000000014610b17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c790612333565b610b2883601063ffffffff61170d16565b9050915091565b60008060608080610b46868563ffffffff6116a216565b94507fffffffff0000000000000000000000000000000000000000000000000000000085167fa7cb5fb70000000000000000000000000000000000000000000000000000000014610bc3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c790612333565b505050506024828101516044840151606485015160848601519496929591820184019490820184019391010190565b7f025717920000000000000000000000000000000000000000000000000000000081565b6060630257179260e01b8383604051602401610c33929190611f75565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b7f94cfcdd70000000000000000000000000000000000000000000000000000000081565b606063a7cb5fb760e01b85858585604051602401610cfd9493929190611f22565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050949350505050565b60006060636352211e60e01b83604051602401610da1919061236a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608573ffffffffffffffffffffffffffffffffffffffff1683604051610e299190611ebe565b600060405180830381855afa9150503d8060008114610e64576040519150601f19603f3d011682016040523d82523d6000602084013e610e69565b606091505b5091509150818015610e7c575080516020145b610e87576000610e98565b610e9881600c63ffffffff61170d16565b9695505050505050565b6000606080610eb7848463ffffffff6116a216565b92507fffffffff0000000000000000000000000000000000000000000000000000000083167f94cfcdd70000000000000000000000000000000000000000000000000000000014610f34576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c790612333565b8351610f4a90859060049063ffffffff61177f16565b806020019051610f5d9190810190611cf2565b9395909450915050565b606060008251905080604051908082528060200260200182016040528015610f99578160200160208202803883390190505b50915060005b8181146104bd57610fb685858381518110610a0857fe5b838281518110610fc257fe5b6020908102919091010152600101610f9f565b600080610fe8838263ffffffff6116a216565b90507fffffffff0000000000000000000000000000000000000000000000000000000081167f94cfcdd70000000000000000000000000000000000000000000000000000000014156110b25760608061104085610ea2565b80519194509250905060005b8181146110a75760006110658985848151811061049157fe5b9050600085838151811061107557fe5b6020026020010151828161108557fe5b04905087811080611094575087155b1561109d578097505b505060010161104c565b506104c09350505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081167ff47261b000000000000000000000000000000000000000000000000000000000141561116257600061110f84601063ffffffff61170d16565b6001546040519192506060917fdd62ed3e00000000000000000000000000000000000000000000000000000000916105f491899173ffffffffffffffffffffffffffffffffffffffff1690602401611efb565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f02571792000000000000000000000000000000000000000000000000000000001415611490576000806111b885610336565b600254604051929550909350606092507fe985e9c50000000000000000000000000000000000000000000000000000000091611211918a9173ffffffffffffffffffffffffffffffffffffffff90911690602401611efb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608473ffffffffffffffffffffffffffffffffffffffff16836040516112999190611ebe565b600060405180830381855afa9150503d80600081146112d4576040519150601f19603f3d011682016040523d82523d6000602084013e6112d9565b606091505b50915091508115806112ed57508051602014155b80611309575061130481600063ffffffff61176c16565b600114155b1561146357606063081812fc60e01b85604051602401611329919061236a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508573ffffffffffffffffffffffffffffffffffffffff16816040516113ad9190611ebe565b600060405180830381855afa9150503d80600081146113e8576040519150601f19603f3d011682016040523d82523d6000602084013e6113ed565b606091505b509093509150828015611401575081516020145b801561144a575060025473ffffffffffffffffffffffffffffffffffffffff1661143283600c63ffffffff61170d16565b73ffffffffffffffffffffffffffffffffffffffff16145b611455576000611458565b60015b60ff16975050610983565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96505050505050610a5c565b7fffffffff0000000000000000000000000000000000000000000000000000000081167fa7cb5fb7000000000000000000000000000000000000000000000000000000001415610a5c5760006114e584610b2f565b5050600354604051929450606093507fe985e9c5000000000000000000000000000000000000000000000000000000009261153c9250899173ffffffffffffffffffffffffffffffffffffffff1690602401611efb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608373ffffffffffffffffffffffffffffffffffffffff16836040516115c49190611ebe565b600060405180830381855afa9150503d80600081146115ff576040519150601f19603f3d011682016040523d82523d6000602084013e611604565b606091505b5091509150818015611617575080516020145b8015611633575061162f81600063ffffffff61176c16565b6001145b61163e576000611660565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b98975050505050505050565b60606394cfcdd760e01b8383604051602401610c33929190611fae565b6060806116968484610f67565b91506104158484610442565b600081600401835110156116e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c7906122d6565b5001602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b6000816014018351101561174d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c790612279565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b60006117788383611844565b9392505050565b6060818311156117bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c7906121ae565b83518211156117f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c7906121e5565b8282036040519080825280601f01601f191660200182016040528015611823576020820181803883390190505b5090506117786118328261188d565b8461183c8761188d565b018351611893565b60008160200183511015611884576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c79061221c565b50016020015190565b60200190565b60208110156118bd576001816020036101000a038019835116818551168082178652505050611952565b828214156118ca57611952565b828211156119045760208103905080820181840181515b828510156118fc5784518652602095860195909401936118e1565b905250611952565b60208103905080820181840183515b8186121561194d57825182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09283019290910190611913565b855250505b505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146104c057600080fd5b600082601f83011261198b578081fd5b815161199e611999826123a8565b612381565b818152915060208083019084810160005b84811015610a57578151870188603f8201126119ca57600080fd5b838101516119da611999826123c9565b8181528a60408385010111156119ef57600080fd5b6119ff828783016040860161240c565b8652505092820192908201906001016119af565b600082601f830112611a23578081fd5b8135611a31611999826123a8565b8181529150602080830190840160005b83811015611a6e57611a598760208435890101611ad6565b83526020928301929190910190600101611a41565b5050505092915050565b600082601f830112611a88578081fd5b8135611a96611999826123a8565b818152915060208083019084810181840286018201871015611ab757600080fd5b60005b84811015610a5757813584529282019290820190600101611aba565b600082601f830112611ae6578081fd5b8135611af4611999826123c9565b9150808252836020828501011115611b0b57600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215611b3657600080fd5b6117788383611957565b60008060408385031215611b5357600080fd5b8235611b5e8161243c565b9150602083013567ffffffffffffffff811115611b7a57600080fd5b611b8685828601611a13565b9150509250929050565b60008060008060808587031215611ba5578182fd5b611baf8686611957565b9350602085013567ffffffffffffffff80821115611bcb578384fd5b611bd788838901611a78565b94506040870135915080821115611bec578384fd5b611bf888838901611a78565b93506060870135915080821115611c0e57600080fd5b50611c1b87828801611ad6565b91505092959194509250565b60008060408385031215611c3a57600080fd5b8235611c458161243c565b9150602083013567ffffffffffffffff811115611c6157600080fd5b611b8685828601611ad6565b60008060408385031215611c8057600080fd5b611c8a8484611957565b946020939093013593505050565b60008060408385031215611cab57600080fd5b823567ffffffffffffffff80821115611cc357600080fd5b611ccf86838701611a78565b93506020850135915080821115611ce557600080fd5b50611b8685828601611a13565b60008060408385031215611d04578182fd5b825167ffffffffffffffff80821115611d1b578384fd5b81850186601f820112611d2c578485fd5b80519250611d3c611999846123a8565b80848252602080830192508084018a828389028701011115611d5c578889fd5b8894505b86851015611d7e578051845260019490940193928101928101611d60565b508801519096509350505080821115611d9657600080fd5b50611b868582860161197b565b600060208284031215611db557600080fd5b813567ffffffffffffffff811115611dcc57600080fd5b611dd884828501611ad6565b949350505050565b60008151808452602084018081955060208302810191506020850160005b84811015611e2c578284038852611e16848351611e74565b6020988901989094509190910190600101611dfe565b50919695505050505050565b600081518084526020840193506020830160005b82811015611e6a578151865260209586019590910190600101611e4c565b5093949350505050565b60008151808452611e8c81602086016020860161240c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251611ed081846020870161240c565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b600073ffffffffffffffffffffffffffffffffffffffff8616825260806020830152611f516080830186611e38565b8281036040840152611f638186611e38565b83810360608501526116608186611e74565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6000602082526117786020830184611e38565b600060408252611fc16040830185611e38565b8281036020840152611fd38185611de0565b95945050505050565b600060408252611fef6040830185611e38565b8281036020840152611fd38185611e38565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b60007fffffffff000000000000000000000000000000000000000000000000000000008716825273ffffffffffffffffffffffffffffffffffffffff8616602083015260a060408301526120cd60a0830186611e38565b82810360608401526120df8186611e38565b83810360808501526120f18186611e74565b9998505050505050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000093909316835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b60007fffffffff0000000000000000000000000000000000000000000000000000000085168252606060208301526121896060830185611e38565b8281036040840152610e988185611de0565b6000602082526117786020830184611e74565b6020808252601a908201527f46524f4d5f4c4553535f5448414e5f544f5f5245515549524544000000000000604082015260600190565b6020808252601c908201527f544f5f4c4553535f5448414e5f4c454e4754485f524551554952454400000000604082015260600190565b60208082526026908201527f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524560408201527f5155495245440000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524560408201527f5155495245440000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f475245415445525f4f525f455155414c5f544f5f345f4c454e4754485f52455160408201527f5549524544000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600e908201527f57524f4e475f50524f58595f4944000000000000000000000000000000000000604082015260600190565b90815260200190565b918252602082015260400190565b60405181810167ffffffffffffffff811182821017156123a057600080fd5b604052919050565b600067ffffffffffffffff8211156123bf57600080fd5b5060209081020190565b600067ffffffffffffffff8211156123e057600080fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381101561242757818101518382015260200161240f565b83811115612436576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461245e57600080fd5b5056fea365627a7a72305820b081f61e9a9bf60164c995e953ed8eb67559197846002c4295a5d3696fade9766c6578706572696d656e74616cf564736f6c63430005090040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x151 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA28FE02E GT PUSH2 0xCD JUMPI DUP1 PUSH4 0xBBB2DCF6 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xD186037F GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD186037F EQ PUSH2 0x2EF JUMPI DUP1 PUSH4 0xD3D862D1 EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0xE4E6E7DA EQ PUSH2 0x315 JUMPI PUSH2 0x151 JUMP JUMPDEST DUP1 PUSH4 0xBBB2DCF6 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0xD001C5DC EQ PUSH2 0x2DC JUMPI PUSH2 0x151 JUMP JUMPDEST DUP1 PUSH4 0xB37FDA04 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0xB37FDA04 EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0xB43CFFE1 EQ PUSH2 0x287 JUMPI DUP1 PUSH4 0xB6988463 EQ PUSH2 0x29A JUMPI PUSH2 0x151 JUMP JUMPDEST DUP1 PUSH4 0xA28FE02E EQ PUSH2 0x264 JUMPI DUP1 PUSH4 0xA6627E9F EQ PUSH2 0x26C JUMPI PUSH2 0x151 JUMP JUMPDEST DUP1 PUSH4 0x590AA875 GT PUSH2 0x124 JUMPI DUP1 PUSH4 0x8EE1A642 GT PUSH2 0x109 JUMPI DUP1 PUSH4 0x8EE1A642 EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0x8F4CE479 EQ PUSH2 0x21F JUMPI DUP1 PUSH4 0x9EADC835 EQ PUSH2 0x240 JUMPI PUSH2 0x151 JUMP JUMPDEST DUP1 PUSH4 0x590AA875 EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x7D727512 EQ PUSH2 0x1F7 JUMPI PUSH2 0x151 JUMP JUMPDEST DUP1 PUSH4 0x4A5618A EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0xD7B7D76 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x1BD0EB8F EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x4DFDAC20 EQ PUSH2 0x1B7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x169 PUSH2 0x164 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DA3 JUMP JUMPDEST PUSH2 0x336 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x20FE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x194 PUSH2 0x18F CALLDATASIZE PUSH1 0x4 PUSH2 0x1C27 JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP3 SWAP2 SWAP1 PUSH2 0x2373 JUMP JUMPDEST PUSH2 0x1AA PUSH2 0x41E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP2 SWAP1 PUSH2 0x2001 JUMP JUMPDEST PUSH2 0x1CA PUSH2 0x1C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B40 JUMP JUMPDEST PUSH2 0x442 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP2 SWAP1 PUSH2 0x1F9B JUMP JUMPDEST PUSH2 0x1EA PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B24 JUMP JUMPDEST PUSH2 0x4C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP2 SWAP1 PUSH2 0x219B JUMP JUMPDEST PUSH2 0x20A PUSH2 0x205 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C27 JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP2 SWAP1 PUSH2 0x236A JUMP JUMPDEST PUSH2 0x1AA PUSH2 0xA63 JUMP JUMPDEST PUSH2 0x232 PUSH2 0x22D CALLDATASIZE PUSH1 0x4 PUSH2 0x1DA3 JUMP JUMPDEST PUSH2 0xA87 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP3 SWAP2 SWAP1 PUSH2 0x202E JUMP JUMPDEST PUSH2 0x253 PUSH2 0x24E CALLDATASIZE PUSH1 0x4 PUSH2 0x1DA3 JUMP JUMPDEST PUSH2 0xB2F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2076 JUMP JUMPDEST PUSH2 0x1AA PUSH2 0xBF2 JUMP JUMPDEST PUSH2 0x1EA PUSH2 0x27A CALLDATASIZE PUSH1 0x4 PUSH2 0x1C6D JUMP JUMPDEST PUSH2 0xC16 JUMP JUMPDEST PUSH2 0x1AA PUSH2 0xCB8 JUMP JUMPDEST PUSH2 0x1EA PUSH2 0x295 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B90 JUMP JUMPDEST PUSH2 0xCDC JUMP JUMPDEST PUSH2 0x2AD PUSH2 0x2A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C6D JUMP JUMPDEST PUSH2 0xD84 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP2 SWAP1 PUSH2 0x1EDA JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x2C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DA3 JUMP JUMPDEST PUSH2 0xEA2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x214E JUMP JUMPDEST PUSH2 0x1CA PUSH2 0x2EA CALLDATASIZE PUSH1 0x4 PUSH2 0x1B40 JUMP JUMPDEST PUSH2 0xF67 JUMP JUMPDEST PUSH2 0x20A PUSH2 0x2FD CALLDATASIZE PUSH1 0x4 PUSH2 0x1C27 JUMP JUMPDEST PUSH2 0xFD5 JUMP JUMPDEST PUSH2 0x1EA PUSH2 0x310 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C98 JUMP JUMPDEST PUSH2 0x166C JUMP JUMPDEST PUSH2 0x328 PUSH2 0x323 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B40 JUMP JUMPDEST PUSH2 0x1689 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP3 SWAP2 SWAP1 PUSH2 0x1FDC JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x34A DUP5 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x16A2 AND JUMP JUMPDEST SWAP3 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x3D0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3E1 DUP5 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x170D AND JUMP JUMPDEST SWAP2 POP PUSH2 0x3F4 DUP5 PUSH1 0x24 PUSH4 0xFFFFFFFF PUSH2 0x176C AND JUMP JUMPDEST SWAP3 SWAP5 SWAP2 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x409 DUP5 DUP5 PUSH2 0x565 JUMP JUMPDEST SWAP2 POP PUSH2 0x415 DUP5 DUP5 PUSH2 0xFD5 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x474 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x4BD JUMPI PUSH2 0x49E DUP6 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x491 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xFD5 JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4AA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x47A JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xF47261B0 PUSH1 0xE0 SHL DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4E1 SWAP2 SWAP1 PUSH2 0x1EDA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x578 DUP4 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x16A2 AND JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x6F6 JUMPI PUSH1 0x0 PUSH2 0x5D7 DUP5 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x170D AND JUMP JUMPDEST SWAP1 POP PUSH1 0x60 PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5F4 SWAP2 SWAP1 PUSH2 0x1EDA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x67C SWAP2 SWAP1 PUSH2 0x1EBE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6B7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6BC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x6CF JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0x6DA JUMPI PUSH1 0x0 PUSH2 0x6EB JUMP JUMPDEST PUSH2 0x6EB DUP2 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x176C AND JUMP JUMPDEST SWAP6 POP POP POP POP POP PUSH2 0xA5C JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x7A3 JUMPI PUSH1 0x0 DUP1 PUSH2 0x74C DUP6 PUSH2 0x336 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x772 DUP4 DUP4 PUSH2 0xD84 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x794 JUMPI PUSH1 0x0 PUSH2 0x797 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND SWAP4 POP POP POP PUSH2 0xA5C JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x98D JUMPI PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x7FB DUP7 PUSH2 0xB2F JUMP JUMPDEST POP DUP2 MLOAD SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x983 JUMPI PUSH1 0x60 PUSH3 0xFDD58E PUSH1 0xE0 SHL DUP11 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x828 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x841 SWAP3 SWAP2 SWAP1 PUSH2 0x1F75 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x8C9 SWAP2 SWAP1 PUSH2 0x1EBE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x904 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x909 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 DUP1 ISZERO PUSH2 0x91E JUMPI POP DUP2 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0x929 JUMPI PUSH1 0x0 PUSH2 0x93A JUMP JUMPDEST PUSH2 0x93A DUP3 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x176C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x94A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP2 PUSH2 0x95A JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP12 DUP2 LT DUP1 PUSH2 0x969 JUMPI POP DUP12 ISZERO JUMPDEST ISZERO PUSH2 0x972 JUMPI DUP1 SWAP12 POP JUMPDEST POP POP PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 POP PUSH2 0x80B SWAP2 POP POP JUMP JUMPDEST POP POP POP POP POP PUSH2 0xA5C JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xA5C JUMPI PUSH1 0x60 DUP1 PUSH2 0x9E3 DUP6 PUSH2 0xEA2 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xA57 JUMPI PUSH1 0x0 PUSH2 0xA15 DUP10 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xA08 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x565 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA25 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP2 PUSH2 0xA35 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP8 DUP2 LT DUP1 PUSH2 0xA44 JUMPI POP DUP8 ISZERO JUMPDEST ISZERO PUSH2 0xA4D JUMPI DUP1 SWAP8 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x9EF JUMP JUMPDEST POP POP POP POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xA9A DUP4 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x16A2 AND JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 EQ PUSH2 0xB17 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0x2333 JUMP JUMPDEST PUSH2 0xB28 DUP4 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x170D AND JUMP JUMPDEST SWAP1 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP1 PUSH2 0xB46 DUP7 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x16A2 AND JUMP JUMPDEST SWAP5 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP6 AND PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 EQ PUSH2 0xBC3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0x2333 JUMP JUMPDEST POP POP POP POP PUSH1 0x24 DUP3 DUP2 ADD MLOAD PUSH1 0x44 DUP5 ADD MLOAD PUSH1 0x64 DUP6 ADD MLOAD PUSH1 0x84 DUP7 ADD MLOAD SWAP5 SWAP7 SWAP3 SWAP6 SWAP2 DUP3 ADD DUP5 ADD SWAP5 SWAP1 DUP3 ADD DUP5 ADD SWAP4 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x2571792 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xC33 SWAP3 SWAP2 SWAP1 PUSH2 0x1F75 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xA7CB5FB7 PUSH1 0xE0 SHL DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xCFD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F22 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH4 0x6352211E PUSH1 0xE0 SHL DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xDA1 SWAP2 SWAP1 PUSH2 0x236A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0xE29 SWAP2 SWAP1 PUSH2 0x1EBE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE64 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE69 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0xE7C JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0xE87 JUMPI PUSH1 0x0 PUSH2 0xE98 JUMP JUMPDEST PUSH2 0xE98 DUP2 PUSH1 0xC PUSH4 0xFFFFFFFF PUSH2 0x170D AND JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0xEB7 DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x16A2 AND JUMP JUMPDEST SWAP3 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 EQ PUSH2 0xF34 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0x2333 JUMP JUMPDEST DUP4 MLOAD PUSH2 0xF4A SWAP1 DUP6 SWAP1 PUSH1 0x4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x177F AND JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xF5D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1CF2 JUMP JUMPDEST SWAP4 SWAP6 SWAP1 SWAP5 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xF99 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x4BD JUMPI PUSH2 0xFB6 DUP6 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA08 JUMPI INVALID JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xFC2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0xF9F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xFE8 DUP4 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x16A2 AND JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x10B2 JUMPI PUSH1 0x60 DUP1 PUSH2 0x1040 DUP6 PUSH2 0xEA2 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x10A7 JUMPI PUSH1 0x0 PUSH2 0x1065 DUP10 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x491 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1075 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP2 PUSH2 0x1085 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP8 DUP2 LT DUP1 PUSH2 0x1094 JUMPI POP DUP8 ISZERO JUMPDEST ISZERO PUSH2 0x109D JUMPI DUP1 SWAP8 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x104C JUMP JUMPDEST POP PUSH2 0x4C0 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1162 JUMPI PUSH1 0x0 PUSH2 0x110F DUP5 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x170D AND JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 POP PUSH1 0x60 SWAP2 PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 SWAP2 PUSH2 0x5F4 SWAP2 DUP10 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x24 ADD PUSH2 0x1EFB JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1490 JUMPI PUSH1 0x0 DUP1 PUSH2 0x11B8 DUP6 PUSH2 0x336 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP6 POP SWAP1 SWAP4 POP PUSH1 0x60 SWAP3 POP PUSH32 0xE985E9C500000000000000000000000000000000000000000000000000000000 SWAP2 PUSH2 0x1211 SWAP2 DUP11 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH1 0x24 ADD PUSH2 0x1EFB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1299 SWAP2 SWAP1 PUSH2 0x1EBE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x12D4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x12D9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO DUP1 PUSH2 0x12ED JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ ISZERO JUMPDEST DUP1 PUSH2 0x1309 JUMPI POP PUSH2 0x1304 DUP2 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x176C AND JUMP JUMPDEST PUSH1 0x1 EQ ISZERO JUMPDEST ISZERO PUSH2 0x1463 JUMPI PUSH1 0x60 PUSH4 0x81812FC PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1329 SWAP2 SWAP1 PUSH2 0x236A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x40 MLOAD PUSH2 0x13AD SWAP2 SWAP1 PUSH2 0x1EBE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x13E8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13ED JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP4 POP SWAP2 POP DUP3 DUP1 ISZERO PUSH2 0x1401 JUMPI POP DUP2 MLOAD PUSH1 0x20 EQ JUMPDEST DUP1 ISZERO PUSH2 0x144A JUMPI POP PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1432 DUP4 PUSH1 0xC PUSH4 0xFFFFFFFF PUSH2 0x170D AND JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x1455 JUMPI PUSH1 0x0 PUSH2 0x1458 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND SWAP8 POP POP PUSH2 0x983 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 POP POP POP POP POP POP PUSH2 0xA5C JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xA5C JUMPI PUSH1 0x0 PUSH2 0x14E5 DUP5 PUSH2 0xB2F JUMP JUMPDEST POP POP PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP5 POP PUSH1 0x60 SWAP4 POP PUSH32 0xE985E9C500000000000000000000000000000000000000000000000000000000 SWAP3 PUSH2 0x153C SWAP3 POP DUP10 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x24 ADD PUSH2 0x1EFB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x15C4 SWAP2 SWAP1 PUSH2 0x1EBE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x15FF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1604 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1617 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST DUP1 ISZERO PUSH2 0x1633 JUMPI POP PUSH2 0x162F DUP2 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x176C AND JUMP JUMPDEST PUSH1 0x1 EQ JUMPDEST PUSH2 0x163E JUMPI PUSH1 0x0 PUSH2 0x1660 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x94CFCDD7 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xC33 SWAP3 SWAP2 SWAP1 PUSH2 0x1FAE JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x1696 DUP5 DUP5 PUSH2 0xF67 JUMP JUMPDEST SWAP2 POP PUSH2 0x415 DUP5 DUP5 PUSH2 0x442 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0x16E2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0x22D6 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x174D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0x2279 JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1778 DUP4 DUP4 PUSH2 0x1844 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 DUP4 GT ISZERO PUSH2 0x17BB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0x21AE JUMP JUMPDEST DUP4 MLOAD DUP3 GT ISZERO PUSH2 0x17F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0x21E5 JUMP JUMPDEST DUP3 DUP3 SUB PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1823 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x1778 PUSH2 0x1832 DUP3 PUSH2 0x188D JUMP JUMPDEST DUP5 PUSH2 0x183C DUP8 PUSH2 0x188D JUMP JUMPDEST ADD DUP4 MLOAD PUSH2 0x1893 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1884 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C7 SWAP1 PUSH2 0x221C JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x18BD JUMPI PUSH1 0x1 DUP2 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP4 MLOAD AND DUP2 DUP6 MLOAD AND DUP1 DUP3 OR DUP7 MSTORE POP POP POP PUSH2 0x1952 JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0x18CA JUMPI PUSH2 0x1952 JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x1904 JUMPI PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP2 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x18FC JUMPI DUP5 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP5 ADD SWAP4 PUSH2 0x18E1 JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x1952 JUMP JUMPDEST PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP4 MLOAD JUMPDEST DUP2 DUP7 SLT ISZERO PUSH2 0x194D JUMPI DUP3 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1913 JUMP JUMPDEST DUP6 MSTORE POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x198B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x199E PUSH2 0x1999 DUP3 PUSH2 0x23A8 JUMP JUMPDEST PUSH2 0x2381 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xA57 JUMPI DUP2 MLOAD DUP8 ADD DUP9 PUSH1 0x3F DUP3 ADD SLT PUSH2 0x19CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP2 ADD MLOAD PUSH2 0x19DA PUSH2 0x1999 DUP3 PUSH2 0x23C9 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP11 PUSH1 0x40 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x19EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19FF DUP3 DUP8 DUP4 ADD PUSH1 0x40 DUP7 ADD PUSH2 0x240C JUMP JUMPDEST DUP7 MSTORE POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x19AF JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A23 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1A31 PUSH2 0x1999 DUP3 PUSH2 0x23A8 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1A6E JUMPI PUSH2 0x1A59 DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x1AD6 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1A41 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A88 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1A96 PUSH2 0x1999 DUP3 PUSH2 0x23A8 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1AB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xA57 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1ABA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1AE6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1AF4 PUSH2 0x1999 DUP3 PUSH2 0x23C9 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1B0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1778 DUP4 DUP4 PUSH2 0x1957 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1B5E DUP2 PUSH2 0x243C JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B86 DUP6 DUP3 DUP7 ADD PUSH2 0x1A13 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1BA5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1BAF DUP7 DUP7 PUSH2 0x1957 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1BCB JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1BD7 DUP9 DUP4 DUP10 ADD PUSH2 0x1A78 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1BEC JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1BF8 DUP9 DUP4 DUP10 ADD PUSH2 0x1A78 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1C0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C1B DUP8 DUP3 DUP9 ADD PUSH2 0x1AD6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1C45 DUP2 PUSH2 0x243C JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B86 DUP6 DUP3 DUP7 ADD PUSH2 0x1AD6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C8A DUP5 DUP5 PUSH2 0x1957 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1CC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CCF DUP7 DUP4 DUP8 ADD PUSH2 0x1A78 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1CE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B86 DUP6 DUP3 DUP7 ADD PUSH2 0x1A13 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D04 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1D1B JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x1D2C JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 MLOAD SWAP3 POP PUSH2 0x1D3C PUSH2 0x1999 DUP5 PUSH2 0x23A8 JUMP JUMPDEST DUP1 DUP5 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP5 ADD DUP11 DUP3 DUP4 DUP10 MUL DUP8 ADD ADD GT ISZERO PUSH2 0x1D5C JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP5 POP JUMPDEST DUP7 DUP6 LT ISZERO PUSH2 0x1D7E JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x1D60 JUMP JUMPDEST POP DUP9 ADD MLOAD SWAP1 SWAP7 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x1D96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B86 DUP6 DUP3 DUP7 ADD PUSH2 0x197B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1DCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DD8 DUP5 DUP3 DUP6 ADD PUSH2 0x1AD6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD DUP1 DUP2 SWAP6 POP PUSH1 0x20 DUP4 MUL DUP2 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1E2C JUMPI DUP3 DUP5 SUB DUP9 MSTORE PUSH2 0x1E16 DUP5 DUP4 MLOAD PUSH2 0x1E74 JUMP JUMPDEST PUSH1 0x20 SWAP9 DUP10 ADD SWAP9 SWAP1 SWAP5 POP SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1DFE JUMP JUMPDEST POP SWAP2 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1E6A JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1E4C JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1E8C DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x240C JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1ED0 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x240C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP3 MSTORE PUSH1 0x80 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1F51 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x1E38 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1F63 DUP2 DUP7 PUSH2 0x1E38 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x1660 DUP2 DUP7 PUSH2 0x1E74 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1778 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1E38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x1FC1 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1E38 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1FD3 DUP2 DUP6 PUSH2 0x1DE0 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x1FEF PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1E38 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1FD3 DUP2 DUP6 PUSH2 0x1E38 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP8 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x20CD PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x1E38 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x20DF DUP2 DUP7 PUSH2 0x1E38 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x20F1 DUP2 DUP7 PUSH2 0x1E74 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP6 AND DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2189 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1E38 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xE98 DUP2 DUP6 PUSH2 0x1DE0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1778 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1E74 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x46524F4D5F4C4553535F5448414E5F544F5F5245515549524544000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x544F5F4C4553535F5448414E5F4C454E4754485F524551554952454400000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F345F4C454E4754485F524551 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5549524544000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x57524F4E475F50524F58595F4944000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x23A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x23BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x23E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2427 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x240F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2436 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x245E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723058 KECCAK256 0xb0 DUP2 0xf6 0x1e SWAP11 SWAP12 0xf6 ADD PUSH5 0xC995E953ED DUP15 0xb6 PUSH22 0x59197846002C4295A5D3696FADE9766C657870657269 PUSH14 0x656E74616CF564736F6C63430005 MULMOD STOP BLOCKHASH ",
				"sourceMap": "846:21044:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;846:21044:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15906:518;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;12408:341;;;;;;;;;:::i;:::-;;;;;;;;;1007:52:4;;;:::i;:::-;;;;;;;;11574:423:1;;;;;;;;;:::i;:::-;;;;;;;;13899:232;;;;;;;;;:::i;:::-;;;;;;;;2680:3130;;;;;;;;;:::i;:::-;;;;;;;;800:50:4;;;:::i;14446:433:1:-;;;;;;;;;:::i;:::-;;;;;;;;;18122:1216;;;;;;;;;:::i;:::-;;;;;;;;;;;;893:51:4;;;:::i;15223:306:1:-;;;;;;;;;:::i;1103:56:4:-;;;:::i;16959:465:1:-;;;;;;;;;:::i;21383:505::-;;;;;;;;;:::i;:::-;;;;;;;;20489:602;;;;;;;;;:::i;:::-;;;;;;;;;;6207:391;;;;;;;;;:::i;7250:3908::-;;;;;;;;;:::i;19661:332::-;;;;;;;;;:::i;13242:386::-;;;;;;;;;:::i;:::-;;;;;;;;;15906:518;16019:19;;;16141:23;:9;16019:19;16141:23;:20;:23;:::i;:::-;16126:38;-1:-1:-1;16196:31:1;;;16212:15;16196:31;16175:92;;;;;;;;;;;;;;;;;;;;;;16293:25;:9;16315:2;16293:25;:21;:25;:::i;:::-;16278:40;-1:-1:-1;16338:25:1;:9;16360:2;16338:25;:21;:25;:::i;:::-;15906:518;;;;-1:-1:-1;;15906:518:1:o;12408:341::-;12541:15;12558:17;12601:35;12612:12;12626:9;12601:10;:35::i;:::-;12591:45;;12658:47;12681:12;12695:9;12658:22;:47::i;:::-;12646:59;-1:-1:-1;12408:341:1;;;;;:::o;1007:52:4:-;;;:::o;11574:423:1:-;11705:27;11748:14;11765:9;:16;11748:33;;11818:6;11804:21;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;11804:21:1;-1:-1:-1;11791:34:1;-1:-1:-1;11840:9:1;11835:129;11860:6;11855:1;:11;11835:129;;11903:50;11926:12;11940:9;11950:1;11940:12;;;;;;;;;;;;;;11903:22;:50::i;:::-;11887:10;11898:1;11887:13;;;;;;;;;;;;;;;;;:66;11868:3;;11835:129;;;-1:-1:-1;;11574:423:1;;;;;:::o;13899:232::-;13996:22;840:10:4;14069:14:1;;14085:12;14046:52;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;14046:52:1;;;49:4:-1;25:18;;61:17;;14046:52:1;182:15:-1;14046:52:1;;;;179:29:-1;;;;160:49;;;14046:52:1;-1:-1:-1;13899:232:1;;;:::o;2680:3130::-;2791:15;;2885:23;:9;2791:15;2885:23;:20;:23;:::i;:::-;2863:45;-1:-1:-1;2923:30:1;;;2939:14;2923:30;2919:2803;;;3008:20;3031:25;:9;3053:2;3031:25;:21;:25;:::i;:::-;3008:48;;3128:26;1051:10;3180:26;;3208:12;3157:64;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3157:64:1;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;3157:64:1;3128:93;;3266:12;3280:23;3307:12;:23;;3331:13;3307:38;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;3265:80:1;;;;3369:7;:34;;;;;3380:10;:17;3401:2;3380:23;3369:34;:66;;3434:1;3369:66;;;3406:25;:10;3429:1;3406:25;:22;:25;:::i;:::-;3359:76;;2919:2803;;;;;;;3456:31;;;3472:15;3456:31;3452:2270;;;3553:20;3575:15;3594:32;3616:9;3594:21;:32::i;:::-;3550:76;;;;;3749:12;3703:58;;:42;3723:12;3737:7;3703:19;:42::i;:::-;:58;;;:66;;3768:1;3703:66;;;3764:1;3703:66;3693:76;;;;3452:2270;;;;;3790:32;;;3806:16;3790:32;3786:1936;;;3917:20;3939:25;3966:28;3999:33;4022:9;3999:22;:33::i;:::-;-1:-1:-1;4064:15:1;;3914:118;;-1:-1:-1;3914:118:1;;-1:-1:-1;3914:118:1;-1:-1:-1;4064:15:1;-1:-1:-1;4047:14:1;4093:847;4118:6;4113:1;:11;4093:847;;4222:26;1465:10;4295:28;;4345:12;4379:8;4388:1;4379:11;;;;;;;;;;;;;;4251:157;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4251:157:1;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;4251:157:1;4222:186;;4461:12;4475:23;4502:12;:23;;4526:13;4502:38;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4460:80:1;;;;4558:20;4581:7;:34;;;;;4592:10;:17;4613:2;4592:23;4581:34;:66;;4646:1;4581:66;;;4618:25;:10;4641:1;4618:25;:22;:25;:::i;:::-;4558:89;;4746:21;4785:11;4797:1;4785:14;;;;;;;;;;;;;;4770:12;:29;;;;;;4746:53;;4837:7;4821:13;:23;:39;;;-1:-1:-1;4848:12:1;;4821:39;4817:109;;;4894:13;4884:23;;4817:109;-1:-1:-1;;4126:3:1;;;;;-1:-1:-1;4093:847:1;;-1:-1:-1;;4093:847:1;;;3786:1936;;;;;;;4960:36;;;4976:20;4960:36;4956:766;;;5074:29;5105:30;5139:31;5160:9;5139:20;:31::i;:::-;5202:22;;5071:99;;-1:-1:-1;5071:99:1;-1:-1:-1;5202:22:1;-1:-1:-1;5185:14:1;5238:474;5263:6;5258:1;:11;5238:474;;5351:20;5374:44;5385:12;5399:15;5415:1;5399:18;;;;;;;;;;;;;;5374:10;:44::i;:::-;5351:67;;5517:21;5556:12;5569:1;5556:15;;;;;;;;;;;;;;5541:12;:30;;;;;;5517:54;;5609:7;5593:13;:23;:39;;;-1:-1:-1;5620:12:1;;5593:39;5589:109;;;5666:13;5656:23;;5589:109;-1:-1:-1;;5271:3:1;;5238:474;;;;4956:766;;;;-1:-1:-1;2680:3130:1;;;;:::o;800:50:4:-;;;:::o;14446:433:1:-;14558:19;;14651:23;:9;14558:19;14651:23;:20;:23;:::i;:::-;14636:38;-1:-1:-1;14706:30:1;;;14722:14;14706:30;14685:91;;;;;;;;;;;;;;14802:25;:9;14824:2;14802:25;:21;:25;:::i;:::-;14787:40;-1:-1:-1;14446:433:1;;;:::o;18122:1216::-;18236:19;;18303:25;;;18449:23;:9;18236:19;18449:23;:20;:23;:::i;:::-;18434:38;-1:-1:-1;18504:32:1;;;18520:16;18504:32;18483:93;;;;;;;;;;;;;;-1:-1:-1;;;;18709:2:1;18694:18;;;18795:16;18908:18;;;18902:25;19028:18;;;19022:25;19149:18;;;19143:25;18122:1216;;18795:16;;18887:41;;;;;;19007;;;;;;19128;;;;18122:1216::o;893:51:4:-;;;:::o;15223:306:1:-;15338:22;934:10:4;15424:15:1;;15453:12;15479:7;15388:108;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;15388:108:1;;;49:4:-1;25:18;;61:17;;15388:108:1;182:15:-1;15388:108:1;;;;179:29:-1;;;;160:49;;;15388:108:1;-1:-1:-1;15223:306:1;;;;:::o;1103:56:4:-;;;:::o;16959:465:1:-;17180:22;1049:10:4;17266:16:1;;17296:12;17322:8;17344:11;17369:12;17230:161;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;17230:161:1;;;49:4:-1;25:18;;61:17;;17230:161:1;182:15:-1;17230:161:1;;;;179:29:-1;;;;160:49;;;17230:161:1;-1:-1:-1;16959:465:1;;;;;;:::o;21383:505::-;21496:20;21532:28;1214:10;21599:25;;21638:7;21563:92;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;21563:92:1;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;21563:92:1;21532:123;;21667:12;21681:23;21708:12;:23;;21732:15;21708:40;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;21666:82:1;;;;21775:7;:34;;;;;21786:10;:17;21807:2;21786:23;21775:34;21774:78;;21850:1;21774:78;;;21813:26;:10;21836:2;21813:26;:22;:26;:::i;:::-;21759:93;21383:505;-1:-1:-1;;;;;;21383:505:1:o;20489:602::-;20601:19;20634:24;;20742:23;:9;20601:19;20742:23;:20;:23;:::i;:::-;20727:38;-1:-1:-1;20797:36:1;;;20813:20;20797:36;20776:97;;;;;;;;;;;;;;20990:16;;20971:36;;20990:9;;20987:1;;20971:36;:15;:36;:::i;:::-;20947:104;;;;;;;;;;;;;;20489:602;;20918:133;;-1:-1:-1;20489:602:1;-1:-1:-1;;20489:602:1:o;6207:391::-;6326:25;6367:14;6384:9;:16;6367:33;;6435:6;6421:21;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;6421:21:1;-1:-1:-1;6410:32:1;-1:-1:-1;6457:9:1;6452:115;6477:6;6472:1;:11;6452:115;;6518:38;6529:12;6543:9;6553:1;6543:12;;;;;;;6518:38;6504:8;6513:1;6504:11;;;;;;;;;;;;;;;;;:52;6485:3;;6452:115;;7250:3908;7373:17;;7469:23;:9;7373:17;7469:23;:20;:23;:::i;:::-;7447:45;-1:-1:-1;7507:36:1;;;7523:20;7507:36;7503:818;;;7621:24;7647:30;7681:31;7702:9;7681:20;:31::i;:::-;7744:22;;7618:94;;-1:-1:-1;7618:94:1;-1:-1:-1;7744:22:1;-1:-1:-1;7727:14:1;7780:501;7805:6;7800:1;:11;7780:501;;7895:22;7920:56;7943:12;7957:15;7973:1;7957:18;;;;;;;7920:56;7895:81;;8077:23;8120:7;8128:1;8120:10;;;;;;;;;;;;;;8103:14;:27;;;;;;8077:53;;8170:9;8152:15;:27;:45;;;-1:-1:-1;8183:14:1;;8152:45;8148:119;;;8233:15;8221:27;;8148:119;-1:-1:-1;;7813:3:1;;7780:501;;;-1:-1:-1;8294:16:1;;-1:-1:-1;;;;8294:16:1;7503:818;8335:30;;;8351:14;8335:30;8331:2732;;;8420:20;8443:25;:9;8465:2;8443:25;:21;:25;:::i;:::-;8704:20;;8591:147;;8420:48;;-1:-1:-1;8562:26:1;;8631:25;;8591:147;;8674:12;;8704:20;;;8591:147;;;;8331:2732;8977:31;;;8993:15;8977:31;8973:2090;;;9074:20;9096:15;9115:32;9137:9;9115:21;:32::i;:::-;9409:21;;9285:159;;9071:76;;-1:-1:-1;9071:76:1;;-1:-1:-1;9249:33:1;;-1:-1:-1;9325:36:1;;9285:159;;9379:12;;9409:21;;;;;9285:159;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;9285:159:1;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;9285:159:1;9249:195;;9460:12;9474:23;9501:12;:23;;9525:20;9501:45;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;9459:87:1;;;;9634:7;9633:8;:35;;;;9645:10;:17;9666:2;9645:23;;9633:35;:69;;;-1:-1:-1;9672:25:1;:10;9695:1;9672:25;:22;:25;:::i;:::-;9701:1;9672:30;;9633:69;9629:702;;;9780:28;1367:10;9834:29;;9865:7;9811:62;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;9811:62:1;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;9811:62:1;9780:93;;9915:12;:23;;9939:15;9915:40;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;9891:64:1;;-1:-1:-1;9891:64:1;-1:-1:-1;9891:64:1;10078:34;;;;;10089:10;:17;10110:2;10089:23;10078:34;:89;;;;-1:-1:-1;10146:21:1;;;;10116:26;:10;10139:2;10116:26;:22;:26;:::i;:::-;:51;;;10078:89;:97;;10174:1;10078:97;;;10170:1;10078:97;10066:109;;;;9629:702;;;;964:2;10292:24;;8973:2090;;;;;;;;10351:32;;;10367:16;10351:32;10347:716;;;10443:20;10473:33;10496:9;10473:22;:33::i;:::-;-1:-1:-1;;10770:22:1;;10645:161;;10440:66;;-1:-1:-1;10609:33:1;;-1:-1:-1;10685:37:1;;10645:161;;-1:-1:-1;10740:12:1;;10770:22;;;10645:161;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;10645:161:1;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;10645:161:1;10609:197;;10853:12;10867:23;10894:12;:23;;10918:20;10894:45;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;10852:87:1;;;;10965:7;:34;;;;;10976:10;:17;10997:2;10976:23;10965:34;:68;;;;-1:-1:-1;11003:25:1;:10;11026:1;11003:25;:22;:25;:::i;:::-;11032:1;11003:30;10965:68;:87;;11051:1;10965:87;;;964:2;10965:87;10953:99;7250:3908;-1:-1:-1;;;;;;;;7250:3908:1:o;19661:332::-;19794:22;1149:10:4;19880:20:1;;19914:7;19935:15;19844:116;;;;;;;;;;13242:386;13384:25;13411:27;13465:41;13482:12;13496:9;13465:16;:41::i;:::-;13454:52;;13529:53;13558:12;13572:9;13529:28;:53::i;15595:687:18:-;15715:13;15777:5;15785:1;15777:9;15765:1;:8;:21;;15744:105;;;;;;;;;;;;;;-1:-1:-1;16023:13:18;15926:2;16023:13;16017:20;16176:66;16164:79;;15595:687::o;10270:886::-;10391:14;10454:5;10462:2;10454:10;10442:1;:8;:22;;10421:135;;;;;;;;;;;;;;-1:-1:-1;11058:13:18;10803:2;11058:13;11052:20;11074:42;11048:69;;10270:886::o;14710:220::-;14831:14;14878:21;14890:1;14893:5;14878:11;:21::i;:::-;14870:30;14710:220;-1:-1:-1;;;14710:220:18:o;6453:617::-;6587:19;6651:2;6643:4;:10;;6622:83;;;;;;;;;;;;;;6742:1;:8;6736:2;:14;;6715:89;;;;;;;;;;;;;;6905:4;6900:2;:9;6890:20;;;;;;;;;;;;;;;;;;;;;;;;;21:6:-1;;104:10;6890:20:18;87:34:-1;135:17;;-1:-1;6890:20:18;;6881:29;;6920:120;6941:23;:6;:21;:23::i;:::-;6999:4;6978:18;:1;:16;:18::i;:::-;:25;7017:6;:13;6920:7;:120::i;13292:490::-;13413:14;13476:5;13484:2;13476:10;13464:1;:8;:22;;13443:107;;;;;;;;;;;;;;-1:-1:-1;13729:13:18;13631:2;13729:13;13723:20;;13292:490::o;1341:228::-;1520:2;1509:14;;1341:228::o;1808:4337::-;1958:2;1949:6;:11;1945:4194;;;2247:1;2237:6;2233:2;2229:15;2224:3;2220:25;2216:33;2298:4;2294:9;2285:6;2279:13;2275:29;2347:4;2340;2334:11;2330:22;2388:1;2385;2382:8;2376:4;2369:22;;;;2186:219;;;2509:4;2499:6;:14;2495:59;;;2533:7;;2495:59;3243:4;3234:6;:13;3230:2899;;;3569:2;3561:6;3557:15;3547:25;;3617:6;3609;3605:19;3667:6;3661:4;3657:17;3974:4;3968:11;4242:198;4260:4;4252:6;4249:16;4242:198;;;4308:13;;4295:27;;4369:2;4405:13;;;;4357:15;;;;4242:198;;;4529:18;;-1:-1:-1;3276:1289:18;;;4810:2;4802:6;4798:15;4788:25;;4858:6;4850;4846:19;4908:6;4902:4;4898:17;5218:6;5212:13;5797:191;5814:4;5808;5804:15;5797:191;;;5862:11;;5849:25;;5907:13;;;;;5953;;;;5797:191;;;6078:19;;-1:-1:-1;;4612:1503:18;1808:4337;;;:::o;5:130:-1:-;72:20;;29468:42;29457:54;;30197:35;;30187:2;;30246:1;;30236:12;158:693;;287:3;280:4;272:6;268:17;264:27;254:2;;-1:-1;;295:12;254:2;335:6;329:13;357:81;372:65;430:6;372:65;;;357:81;;;466:21;;;348:90;-1:-1;510:4;523:14;;;;498:17;;;618:1;603:242;628:6;625:1;622:13;603:242;;;704:3;698:10;502:6;686:23;3599:3;3580:17;686:23;3580:17;3576:27;3566:2;;618:1;;3607:12;3566:2;510:4;686:23;;3641:13;3669:60;3684:44;3721:6;3684:44;;3669:60;3749:6;3742:5;3735:21;3853:3;3773:17;3844:6;686:23;3835:16;;3832:25;3829:2;;;618:1;;3860:12;3829:2;3880:39;3912:6;3818:4;3811:5;3807:16;3773:17;686:23;3773:17;3880:39;;;716:66;;-1:-1;;796:14;;;;824;;;;650:1;643:9;603:242;;875:693;;997:3;990:4;982:6;978:17;974:27;964:2;;-1:-1;;1005:12;964:2;1052:6;1039:20;1074:85;1089:69;1151:6;1089:69;;1074:85;1187:21;;;1065:94;-1:-1;1231:4;1244:14;;;;1219:17;;1339:1;1324:238;1349:6;1346:1;1343:13;1324:238;;;1456:42;1494:3;1231:4;1432:3;1419:17;1223:6;1407:30;;1456:42;;;1444:55;;1231:4;1513:14;;;;1541;;;;;1371:1;1364:9;1324:238;;;1328:14;;;;957:611;;;;;2334:707;;2451:3;2444:4;2436:6;2432:17;2428:27;2418:2;;-1:-1;;2459:12;2418:2;2506:6;2493:20;2528:80;2543:64;2600:6;2543:64;;2528:80;2636:21;;;2519:89;-1:-1;2680:4;2693:14;;;;2668:17;;;2782;;;2773:27;;;;2770:36;-1:-1;2767:2;;;2819:1;;2809:12;2767:2;2844:1;2829:206;2854:6;2851:1;2848:13;2829:206;;;4449:20;;2922:50;;2986:14;;;;3014;;;;2876:1;2869:9;2829:206;;3050:432;;3147:3;3140:4;3132:6;3128:17;3124:27;3114:2;;-1:-1;;3155:12;3114:2;3202:6;3189:20;3224:60;3239:44;3276:6;3239:44;;3224:60;3215:69;;3304:6;3297:5;3290:21;3408:3;3340:4;3399:6;3332;3390:16;;3387:25;3384:2;;;3425:1;;3415:12;3384:2;29684:6;3340:4;3332:6;3328:17;3340:4;3366:5;3362:16;29661:30;29740:1;29722:16;;;3340:4;29722:16;29715:27;3366:5;3107:375;-1:-1;;3107:375;4660:241;;4764:2;4752:9;4743:7;4739:23;4735:32;4732:2;;;-1:-1;;4770:12;4732:2;4832:53;4877:7;4853:22;4832:53;;4908:512;;;5059:2;5047:9;5038:7;5034:23;5030:32;5027:2;;;-1:-1;;5065:12;5027:2;85:6;72:20;97:33;124:5;97:33;;;5117:63;-1:-1;5245:2;5230:18;;5217:32;5269:18;5258:30;;5255:2;;;-1:-1;;5291:12;5255:2;5321:83;5396:7;5387:6;5376:9;5372:22;5321:83;;;5311:93;;;5021:399;;;;;;5427:993;;;;;5641:3;5629:9;5620:7;5616:23;5612:33;5609:2;;;5658:1;5655;5648:12;5609:2;5710:53;5755:7;5731:22;5710:53;;;5700:63;;5828:2;5817:9;5813:18;5800:32;5852:18;;5844:6;5841:30;5838:2;;;5884:1;5881;5874:12;5838:2;5904:78;5974:7;5965:6;5954:9;5950:22;5904:78;;;5894:88;;6047:2;6036:9;6032:18;6019:32;6005:46;;6071:18;6063:6;6060:30;6057:2;;;6103:1;6100;6093:12;6057:2;6123:78;6193:7;6184:6;6173:9;6169:22;6123:78;;;6113:88;;6266:2;6255:9;6251:18;6238:32;6224:46;;6290:18;6282:6;6279:30;6276:2;;;-1:-1;;6312:12;6276:2;;6342:62;6396:7;6387:6;6376:9;6372:22;6342:62;;;6332:72;;;5603:817;;;;;;;;6427:470;;;6557:2;6545:9;6536:7;6532:23;6528:32;6525:2;;;-1:-1;;6563:12;6525:2;85:6;72:20;97:33;124:5;97:33;;;6615:63;-1:-1;6743:2;6728:18;;6715:32;6767:18;6756:30;;6753:2;;;-1:-1;;6789:12;6753:2;6819:62;6873:7;6864:6;6853:9;6849:22;6819:62;;6904:366;;;7025:2;7013:9;7004:7;7000:23;6996:32;6993:2;;;-1:-1;;7031:12;6993:2;7093:53;7138:7;7114:22;7093:53;;;7083:63;7183:2;7222:22;;;;4449:20;;-1:-1;;;6987:283;7277:648;;;7453:2;7441:9;7432:7;7428:23;7424:32;7421:2;;;-1:-1;;7459:12;7421:2;7517:17;7504:31;7555:18;;7547:6;7544:30;7541:2;;;-1:-1;;7577:12;7541:2;7607:78;7677:7;7668:6;7657:9;7653:22;7607:78;;;7597:88;;7750:2;7739:9;7735:18;7722:32;7708:46;;7774:18;7766:6;7763:30;7760:2;;;-1:-1;;7796:12;7760:2;;7826:83;7901:7;7892:6;7881:9;7877:22;7826:83;;7932:651;;;8111:2;8099:9;8090:7;8086:23;8082:32;8079:2;;;8127:1;8124;8117:12;8079:2;8168:17;8162:24;8206:18;;8198:6;8195:30;8192:2;;;8238:1;8235;8228:12;8192:2;8326:6;8315:9;8311:22;1718:3;1711:4;1703:6;1699:17;1695:27;1685:2;;1736:1;1733;1726:12;1685:2;1766:6;1760:13;1746:27;;1788:76;1803:60;1856:6;1803:60;;1788:76;1870:16;1906:6;1899:5;1892:21;1936:4;1958;1953:3;1949:14;1942:21;;1936:4;1928:6;1924:17;2058:3;1936:4;2050;2042:6;2038:17;1928:6;2029:27;;2026:36;2023:2;;;2075:1;2072;2065:12;2023:2;2091:10;;;2085:217;2110:6;2107:1;2104:13;2085:217;;;4597:13;;2178:61;;2132:1;2125:9;;;;;2253:14;;;;2281;;2085:217;;;-1:-1;8386:18;;8380:25;8248:95;;-1:-1;8380:25;-1:-1;;;8414:30;;;8411:2;;;-1:-1;;8447:12;8411:2;;8477:90;8559:7;8550:6;8539:9;8535:22;8477:90;;8590:345;;8703:2;8691:9;8682:7;8678:23;8674:32;8671:2;;;-1:-1;;8709:12;8671:2;8767:17;8754:31;8805:18;8797:6;8794:30;8791:2;;;-1:-1;;8827:12;8791:2;8857:62;8911:7;8902:6;8891:9;8887:22;8857:62;;;8847:72;8665:270;-1:-1;;;;8665:270;9457:888;;9665:5;27438:12;28246:6;28241:3;28234:19;28283:4;28278:3;28274:14;9677:98;;;;28283:4;9832:6;9828:17;9823:3;9819:27;9807:39;;28283:4;9922:5;27129:14;-1:-1;9961:345;9986:6;9983:1;9980:13;9961:345;;;10048:9;10042:4;10038:20;10033:3;10026:33;9054:60;9110:3;10093:6;10087:13;9054:60;;;28283:4;10285:14;;;;10107:82;;-1:-1;27969:14;;;;;10008:1;10001:9;9961:345;;;-1:-1;10329:10;;9591:754;-1:-1;;;;;;9591:754;10384:690;;10577:5;27438:12;28246:6;28241:3;28234:19;28283:4;28278:3;28274:14;10589:93;;28283:4;10753:5;27129:14;-1:-1;10792:260;10817:6;10814:1;10811:13;10792:260;;;10878:13;;14836:37;;28283:4;9282:14;;;;27969;;;;10839:1;10832:9;10792:260;;;-1:-1;11058:10;;10508:566;-1:-1;;;;10508:566;11199:343;;11341:5;27438:12;28246:6;28241:3;28234:19;11434:52;11479:6;28283:4;28278:3;28274:14;28283:4;11460:5;11456:16;11434:52;;;30121:2;30101:14;30117:7;30097:28;11498:39;;;;28283:4;11498:39;;11289:253;-1:-1;;11289:253;15005:262;;11709:5;27438:12;11820:52;11865:6;11860:3;11853:4;11846:5;11842:16;11820:52;;;11884:16;;;;;15130:137;-1:-1;;15130:137;15274:213;29468:42;29457:54;;;;9381:37;;15392:2;15377:18;;15363:124;15494:324;29468:42;29457:54;;;9381:37;;29457:54;;15804:2;15789:18;;9381:37;15640:2;15625:18;;15611:207;15825:927;;29468:42;29461:5;29457:54;9388:3;9381:37;16145:3;16264:2;16253:9;16249:18;16242:48;16304:108;16145:3;16134:9;16130:19;16398:6;16304:108;;;16460:9;16454:4;16450:20;16445:2;16434:9;16430:18;16423:48;16485:108;16588:4;16579:6;16485:108;;;16641:9;16635:4;16631:20;16626:2;16615:9;16611:18;16604:48;16666:76;16737:4;16728:6;16666:76;;16759:324;29468:42;29457:54;;;;9381:37;;17069:2;17054:18;;14836:37;16905:2;16890:18;;16876:207;17090:361;;17258:2;17279:17;17272:47;17333:108;17258:2;17247:9;17243:18;17427:6;17333:108;;17458:640;;17714:2;17735:17;17728:47;17789:108;17714:2;17703:9;17699:18;17883:6;17789:108;;;17945:9;17939:4;17935:20;17930:2;17919:9;17915:18;17908:48;17970:118;18083:4;18074:6;17970:118;;;17962:126;17685:413;-1:-1;;;;;17685:413;18105:620;;18351:2;18372:17;18365:47;18426:108;18351:2;18340:9;18336:18;18520:6;18426:108;;;18582:9;18576:4;18572:20;18567:2;18556:9;18552:18;18545:48;18607:108;18710:4;18701:6;18607:108;;18732:209;29316:66;29305:78;;;;11151:36;;18848:2;18833:18;;18819:122;18948:320;29316:66;29305:78;;;;11151:36;;29468:42;29457:54;19254:2;19239:18;;9381:37;19092:2;19077:18;;19063:205;19275:1035;;29316:66;11180:5;29305:78;11158:3;11151:36;29468:42;29461:5;29457:54;19784:2;19773:9;19769:18;9381:37;19621:3;19821:2;19810:9;19806:18;19799:48;19861:108;19621:3;19610:9;19606:19;19955:6;19861:108;;;20017:9;20011:4;20007:20;20002:2;19991:9;19987:18;19980:48;20042:108;20145:4;20136:6;20042:108;;;20199:9;20193:4;20189:20;20183:3;20172:9;20168:19;20161:49;20224:76;20295:4;20286:6;20224:76;;;20216:84;19592:718;-1:-1;;;;;;;;;19592:718;20317:431;29316:66;29305:78;;;;11151:36;;29468:42;29457:54;;;;20651:2;20636:18;;9381:37;20734:2;20719:18;;14836:37;20489:2;20474:18;;20460:288;20755:747;;29316:66;11180:5;29305:78;11158:3;11151:36;21037:2;21153;21142:9;21138:18;21131:48;21193:108;21037:2;21026:9;21022:18;21287:6;21193:108;;;21349:9;21343:4;21339:20;21334:2;21323:9;21319:18;21312:48;21374:118;21487:4;21478:6;21374:118;;21509:297;;21645:2;21666:17;21659:47;21720:76;21645:2;21634:9;21630:18;21782:6;21720:76;;21813:407;22004:2;22018:47;;;12459:2;21989:18;;;28234:19;12495:66;28274:14;;;12475:87;12581:12;;;21975:245;22227:407;22418:2;22432:47;;;12832:2;22403:18;;;28234:19;12868:66;28274:14;;;12848:87;12954:12;;;22389:245;22641:407;22832:2;22846:47;;;13205:2;22817:18;;;28234:19;13241:66;28274:14;;;13221:87;13342:66;13328:12;;;13321:88;13428:12;;;22803:245;23055:407;23246:2;23260:47;;;13679:2;23231:18;;;28234:19;13715:66;28274:14;;;13695:87;13816:66;13802:12;;;13795:88;13902:12;;;23217:245;23469:407;23660:2;23674:47;;;14153:2;23645:18;;;28234:19;14189:66;28274:14;;;14169:87;14290:66;14276:12;;;14269:88;14376:12;;;23631:245;23883:407;24074:2;24088:47;;;14627:2;24059:18;;;28234:19;14663:66;28274:14;;;14643:87;14749:12;;;24045:245;24297:213;14836:37;;;24415:2;24400:18;;24386:124;24517:324;14836:37;;;24827:2;24812:18;;14836:37;24663:2;24648:18;;24634:207;24848:256;24910:2;24904:9;24936:17;;;25011:18;24996:34;;25032:22;;;24993:62;24990:2;;;25068:1;;25058:12;24990:2;24910;25077:22;24888:216;;-1:-1;24888:216;25111:305;;25271:18;25263:6;25260:30;25257:2;;;-1:-1;;25293:12;25257:2;-1:-1;25338:4;25326:17;;;25391:15;;25194:222;26357:317;;26496:18;26488:6;26485:30;26482:2;;;-1:-1;;26518:12;26482:2;-1:-1;26595:4;26572:17;26591:9;26568:33;26659:4;26649:15;;26419:255;29757:268;29822:1;29829:101;29843:6;29840:1;29837:13;29829:101;;;29910:11;;;29904:18;29891:11;;;29884:39;29865:2;29858:10;29829:101;;;29945:6;29942:1;29939:13;29936:2;;;29822:1;30001:6;29996:3;29992:16;29985:27;29936:2;;29806:219;;;;30138:117;29468:42;30225:5;29457:54;30200:5;30197:35;30187:2;;30246:1;;30236:12;30187:2;30181:74;"
			}
		}
	},
	"sources": {
		"src/LibAssetData.sol": {
			"id": 1
		},
		"@0x/contracts-utils/contracts/src/LibBytes.sol": {
			"id": 18
		},
		"@0x/contracts-asset-proxy/contracts/src/libs/LibAssetProxyIds.sol": {
			"id": 4
		},
		"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol": {
			"id": 12
		},
		"@0x/contracts-exchange/contracts/src/interfaces/IExchangeCore.sol": {
			"id": 13
		},
		"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": {
			"id": 9
		},
		"@0x/contracts-exchange-libs/contracts/src/LibEIP712ExchangeDomain.sol": {
			"id": 5
		},
		"@0x/contracts-utils/contracts/src/LibEIP712.sol": {
			"id": 19
		},
		"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": {
			"id": 7
		},
		"@0x/contracts-utils/contracts/src/SafeMath.sol": {
			"id": 20
		},
		"@0x/contracts-exchange/contracts/src/interfaces/IMatchOrders.sol": {
			"id": 14
		},
		"@0x/contracts-exchange/contracts/src/interfaces/ISignatureValidator.sol": {
			"id": 15
		},
		"@0x/contracts-exchange/contracts/src/interfaces/ITransactions.sol": {
			"id": 16
		},
		"@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol": {
			"id": 10
		},
		"@0x/contracts-exchange/contracts/src/interfaces/IAssetProxyDispatcher.sol": {
			"id": 11
		},
		"@0x/contracts-exchange/contracts/src/interfaces/IWrapperFunctions.sol": {
			"id": 17
		}
	},
	"sourceCodes": {
		"src/LibAssetData.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-asset-proxy/contracts/src/libs/LibAssetProxyIds.sol\";\nimport \"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol\";\n\n\ncontract LibAssetData is\n    LibAssetProxyIds\n{\n    // 2^256 - 1\n    uint256 constant internal _MAX_UINT256 = uint256(-1);\n\n    // ERC20 selectors\n    bytes4 constant internal _ERC20_BALANCE_OF_SELECTOR = 0x70a08231;\n    bytes4 constant internal _ERC20_ALLOWANCE_SELECTOR = 0xdd62ed3e;\n\n    // ERC721 selectors\n    bytes4 constant internal _ERC721_OWNER_OF_SELECTOR = 0x6352211e;\n    bytes4 constant internal _ERC721_IS_APPROVED_FOR_ALL_SELECTOR = 0xe985e9c5;\n    bytes4 constant internal _ERC721_GET_APPROVED_SELECTOR = 0x081812fc;\n\n    // ERC1155 selectors\n    bytes4 constant internal _ERC1155_BALANCE_OF_SELECTOR = 0x00fdd58e;\n    bytes4 constant internal _ERC1155_IS_APPROVED_FOR_ALL_SELECTOR = 0xe985e9c5;\n\n    using LibBytes for bytes;\n\n    // solhint-disable var-name-mixedcase\n    IExchange internal _EXCHANGE;\n    address internal _ERC20_PROXY_ADDRESS;\n    address internal _ERC721_PROXY_ADDRESS;\n    address internal _ERC1155_PROXY_ADDRESS;\n    // solhint-enable var-name-mixedcase\n\n    constructor (address _exchange)\n        public\n    {\n        _EXCHANGE = IExchange(_exchange);\n        _ERC20_PROXY_ADDRESS = _EXCHANGE.getAssetProxy(ERC20_PROXY_ID);\n        _ERC721_PROXY_ADDRESS = _EXCHANGE.getAssetProxy(ERC721_PROXY_ID);\n        _ERC1155_PROXY_ADDRESS = _EXCHANGE.getAssetProxy(ERC1155_PROXY_ID);\n    }\n\n    /// @dev Returns the owner's balance of the assets(s) specified in\n    /// assetData.  When the asset data contains multiple assets (eg in\n    /// ERC1155 or Multi-Asset), the return value indicates how many\n    /// complete \"baskets\" of those assets are owned by owner.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Details of asset, encoded per the AssetProxy contract specification.\n    /// @return Number of assets (or asset baskets) held by owner.\n    function getBalance(address ownerAddress, bytes memory assetData)\n        public\n        view\n        returns (uint256 balance)\n    {\n        // Get id of AssetProxy contract\n        bytes4 assetProxyId = assetData.readBytes4(0);\n\n        if (assetProxyId == ERC20_PROXY_ID) {\n            // Get ERC20 token address\n            address tokenAddress = assetData.readAddress(16);\n\n            // Encode data for `balanceOf(ownerAddress)`\n            bytes memory balanceOfData = abi.encodeWithSelector(_ERC20_BALANCE_OF_SELECTOR, ownerAddress);\n\n            // Query balance\n            (bool success, bytes memory returnData) = tokenAddress.staticcall(balanceOfData);\n            balance = success && returnData.length == 32 ? returnData.readUint256(0) : 0;\n        } else if (assetProxyId == ERC721_PROXY_ID) {\n            // Get ERC721 token address and id\n            (, address tokenAddress, uint256 tokenId) = decodeERC721AssetData(assetData);\n\n            // Check if id is owned by ownerAddress\n            balance = getERC721TokenOwner(tokenAddress, tokenId) == ownerAddress ? 1 : 0;\n        } else if (assetProxyId == ERC1155_PROXY_ID) {\n            // Get ERC1155 token address, array of ids, and array of values\n            (, address tokenAddress, uint256[] memory tokenIds, uint256[] memory tokenValues,) = decodeERC1155AssetData(assetData);\n\n            uint256 length = tokenIds.length;\n            for (uint256 i = 0; i != length; i++) {\n                // Encode data for `balanceOf(ownerAddress, tokenIds[i])\n                bytes memory balanceOfData = abi.encodeWithSelector(\n                    _ERC1155_BALANCE_OF_SELECTOR,\n                    ownerAddress,\n                    tokenIds[i]\n                );\n\n                // Query balance\n                (bool success, bytes memory returnData) = tokenAddress.staticcall(balanceOfData);\n                uint256 totalBalance = success && returnData.length == 32 ? returnData.readUint256(0) : 0;\n\n                // Scale total balance down by corresponding value in assetData\n                uint256 scaledBalance = totalBalance / tokenValues[i];\n                if (scaledBalance < balance || balance == 0) {\n                    balance = scaledBalance;\n                }\n            }\n        } else if (assetProxyId == MULTI_ASSET_PROXY_ID) {\n            // Get array of values and array of assetDatas\n            (, uint256[] memory assetAmounts, bytes[] memory nestedAssetData) = decodeMultiAssetData(assetData);\n\n            uint256 length = nestedAssetData.length;\n            for (uint256 i = 0; i != length; i++) {\n                // Query balance of individual assetData\n                uint256 totalBalance = getBalance(ownerAddress, nestedAssetData[i]);\n\n                // Scale total balance down by corresponding value in assetData\n                uint256 scaledBalance = totalBalance / assetAmounts[i];\n                if (scaledBalance < balance || balance == 0) {\n                    balance = scaledBalance;\n                }\n            }\n        } \n\n        // Balance will be 0 if assetProxyId is unknown\n        return balance;\n    }\n\n    /// @dev Calls getBalance() for each element of assetData.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\n    /// @return Array of asset balances from getBalance(), with each element\n    /// corresponding to the same-indexed element in the assetData input.\n    function getBatchBalances(address ownerAddress, bytes[] memory assetData)\n        public\n        view\n        returns (uint256[] memory balances)\n    {\n        uint256 length = assetData.length;\n        balances = new uint256[](length);\n        for (uint256 i = 0; i != length; i++) {\n            balances[i] = getBalance(ownerAddress, assetData[i]);\n        }\n        return balances;\n    }\n\n    /// @dev Returns the number of asset(s) (described by assetData) that\n    /// the corresponding AssetProxy contract is authorized to spend.  When the asset data contains\n    /// multiple assets (eg for Multi-Asset), the return value indicates\n    /// how many complete \"baskets\" of those assets may be spent by all of the corresponding\n    /// AssetProxy contracts.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Details of asset, encoded per the AssetProxy contract specification.\n    /// @return Number of assets (or asset baskets) that the corresponding AssetProxy is authorized to spend.\n    function getAssetProxyAllowance(address ownerAddress, bytes memory assetData)\n        public\n        view\n        returns (uint256 allowance)\n    {\n        // Get id of AssetProxy contract\n        bytes4 assetProxyId = assetData.readBytes4(0);\n\n        if (assetProxyId == MULTI_ASSET_PROXY_ID) {\n            // Get array of values and array of assetDatas\n            (, uint256[] memory amounts, bytes[] memory nestedAssetData) = decodeMultiAssetData(assetData);\n\n            uint256 length = nestedAssetData.length;\n            for (uint256 i = 0; i != length; i++) {\n                // Query allowance of individual assetData\n                uint256 totalAllowance = getAssetProxyAllowance(ownerAddress, nestedAssetData[i]);\n\n                // Scale total allowance down by corresponding value in assetData\n                uint256 scaledAllowance = totalAllowance / amounts[i];\n                if (scaledAllowance < allowance || allowance == 0) {\n                    allowance = scaledAllowance;\n                }\n            }\n            return allowance;\n        }\n\n        if (assetProxyId == ERC20_PROXY_ID) {\n            // Get ERC20 token address\n            address tokenAddress = assetData.readAddress(16);\n\n            // Encode data for `allowance(ownerAddress, _ERC20_PROXY_ADDRESS)`\n            bytes memory allowanceData = abi.encodeWithSelector(\n                _ERC20_ALLOWANCE_SELECTOR,\n                ownerAddress,\n                _ERC20_PROXY_ADDRESS\n            );\n\n            // Query allowance\n            (bool success, bytes memory returnData) = tokenAddress.staticcall(allowanceData);\n            allowance = success && returnData.length == 32 ? returnData.readUint256(0) : 0;\n        } else if (assetProxyId == ERC721_PROXY_ID) {\n            // Get ERC721 token address and id\n            (, address tokenAddress, uint256 tokenId) = decodeERC721AssetData(assetData);\n\n            // Encode data for `isApprovedForAll(ownerAddress, _ERC721_PROXY_ADDRESS)`\n            bytes memory isApprovedForAllData = abi.encodeWithSelector(\n                _ERC721_IS_APPROVED_FOR_ALL_SELECTOR,\n                ownerAddress,\n                _ERC721_PROXY_ADDRESS\n            );\n\n            (bool success, bytes memory returnData) = tokenAddress.staticcall(isApprovedForAllData);\n\n            // If not approved for all, call `getApproved(tokenId)`\n            if (!success || returnData.length != 32 || returnData.readUint256(0) != 1) {\n                // Encode data for `getApproved(tokenId)`\n                bytes memory getApprovedData = abi.encodeWithSelector(_ERC721_GET_APPROVED_SELECTOR, tokenId);\n                (success, returnData) = tokenAddress.staticcall(getApprovedData);\n\n                // Allowance is 1 if successful and the approved address is the ERC721Proxy\n                allowance = success && returnData.length == 32 && returnData.readAddress(12) == _ERC721_PROXY_ADDRESS ? 1 : 0;\n            } else {\n                // Allowance is 2^256 - 1 if `isApprovedForAll` returned true\n                allowance = _MAX_UINT256;\n            }\n        } else if (assetProxyId == ERC1155_PROXY_ID) {\n            // Get ERC1155 token address\n            (, address tokenAddress, , , ) = decodeERC1155AssetData(assetData);\n\n            // Encode data for `isApprovedForAll(ownerAddress, _ERC1155_PROXY_ADDRESS)`\n            bytes memory isApprovedForAllData = abi.encodeWithSelector(\n                _ERC1155_IS_APPROVED_FOR_ALL_SELECTOR,\n                ownerAddress,\n                _ERC1155_PROXY_ADDRESS\n            );\n\n            // Query allowance\n            (bool success, bytes memory returnData) = tokenAddress.staticcall(isApprovedForAllData);\n            allowance = success && returnData.length == 32 && returnData.readUint256(0) == 1 ? _MAX_UINT256 : 0;\n        }\n\n        // Allowance will be 0 if the assetProxyId is unknown\n        return allowance;\n    }\n\n    /// @dev Calls getAssetProxyAllowance() for each element of assetData.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\n    /// @return An array of asset allowances from getAllowance(), with each\n    /// element corresponding to the same-indexed element in the assetData input.\n    function getBatchAssetProxyAllowances(address ownerAddress, bytes[] memory assetData)\n        public\n        view\n        returns (uint256[] memory allowances)\n    {\n        uint256 length = assetData.length;\n        allowances = new uint256[](length);\n        for (uint256 i = 0; i != length; i++) {\n            allowances[i] = getAssetProxyAllowance(ownerAddress, assetData[i]);\n        }\n        return allowances;\n    }\n\n    /// @dev Calls getBalance() and getAllowance() for assetData.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Details of asset, encoded per the AssetProxy contract specification.\n    /// @return Number of assets (or asset baskets) held by owner, and number\n    /// of assets (or asset baskets) that the corresponding AssetProxy is authorized to spend.\n    function getBalanceAndAssetProxyAllowance(address ownerAddress, bytes memory assetData)\n        public\n        view\n        returns (uint256 balance, uint256 allowance)\n    {\n        balance = getBalance(ownerAddress, assetData);\n        allowance = getAssetProxyAllowance(ownerAddress, assetData);\n        return (balance, allowance);\n    }\n\n    /// @dev Calls getBatchBalances() and getBatchAllowances() for each element of assetData.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\n    /// @return An array of asset balances from getBalance(), and an array of\n    /// asset allowances from getAllowance(), with each element\n    /// corresponding to the same-indexed element in the assetData input.\n    function getBatchBalancesAndAssetProxyAllowances(address ownerAddress, bytes[] memory assetData)\n        public\n        view\n        returns (uint256[] memory balances, uint256[] memory allowances)\n    {\n        balances = getBatchBalances(ownerAddress, assetData);\n        allowances = getBatchAssetProxyAllowances(ownerAddress, assetData);\n        return (balances, allowances);\n    }\n\n    /// @dev Encode ERC-20 asset data into the format described in the AssetProxy contract specification.\n    /// @param tokenAddress The address of the ERC-20 contract hosting the asset to be traded.\n    /// @return AssetProxy-compliant data describing the asset.\n    function encodeERC20AssetData(address tokenAddress)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(ERC20_PROXY_ID, tokenAddress);\n        return assetData;\n    }\n\n    /// @dev Decode ERC-20 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-20 asset.\n    /// @return The ERC-20 AssetProxy identifier, and the address of the ERC-20 \n    /// contract hosting this asset.\n    function decodeERC20AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == ERC20_PROXY_ID,\n            \"WRONG_PROXY_ID\"\n        );\n\n        tokenAddress = assetData.readAddress(16);\n        return (assetProxyId, tokenAddress);\n    }\n\n    /// @dev Encode ERC-721 asset data into the format described in the AssetProxy specification.\n    /// @param tokenAddress The address of the ERC-721 contract hosting the asset to be traded.\n    /// @param tokenId The identifier of the specific asset to be traded.\n    /// @return AssetProxy-compliant asset data describing the asset.\n    function encodeERC721AssetData(address tokenAddress, uint256 tokenId)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(\n            ERC721_PROXY_ID,\n            tokenAddress,\n            tokenId\n        );\n        return assetData;\n    }\n\n    /// @dev Decode ERC-721 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-721 asset.\n    /// @return The ERC-721 AssetProxy identifier, the address of the ERC-721\n    /// contract hosting this asset, and the identifier of the specific\n    /// asset to be traded.\n    function decodeERC721AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress,\n            uint256 tokenId\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == ERC721_PROXY_ID,\n            \"WRONG_PROXY_ID\"\n        );\n\n        tokenAddress = assetData.readAddress(16);\n        tokenId = assetData.readUint256(36);\n        return (assetProxyId, tokenAddress, tokenId);\n    }\n\n    /// @dev Encode ERC-1155 asset data into the format described in the AssetProxy contract specification.\n    /// @param tokenAddress The address of the ERC-1155 contract hosting the asset(s) to be traded.\n    /// @param tokenIds The identifiers of the specific assets to be traded.\n    /// @param tokenValues The amounts of each asset to be traded.\n    /// @param callbackData Data to be passed to receiving contracts when a transfer is performed.\n    /// @return AssetProxy-compliant asset data describing the set of assets.\n    function encodeERC1155AssetData(\n        address tokenAddress,\n        uint256[] memory tokenIds,\n        uint256[] memory tokenValues,\n        bytes memory callbackData\n    )\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(\n            ERC1155_PROXY_ID,\n            tokenAddress,\n            tokenIds,\n            tokenValues,\n            callbackData\n        );\n        return assetData;\n    }\n\n    /// @dev Decode ERC-1155 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-1155 set of assets.\n    /// @return The ERC-1155 AssetProxy identifier, the address of the ERC-1155\n    /// contract hosting the assets, an array of the identifiers of the\n    /// assets to be traded, an array of asset amounts to be traded, and\n    /// callback data.  Each element of the arrays corresponds to the\n    /// same-indexed element of the other array.  Return values specified as\n    /// `memory` are returned as pointers to locations within the memory of\n    /// the input parameter `assetData`.\n    function decodeERC1155AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress,\n            uint256[] memory tokenIds,\n            uint256[] memory tokenValues,\n            bytes memory callbackData\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == ERC1155_PROXY_ID,\n            \"WRONG_PROXY_ID\"\n        );\n\n        assembly {\n            // Skip selector and length to get to the first parameter:\n            assetData := add(assetData, 36)\n            // Read the value of the first parameter:\n            tokenAddress := mload(assetData)\n            // Point to the next parameter's data:\n            tokenIds := add(assetData, mload(add(assetData, 32)))\n            // Point to the next parameter's data:\n            tokenValues := add(assetData, mload(add(assetData, 64)))\n            // Point to the next parameter's data:\n            callbackData := add(assetData, mload(add(assetData, 96)))\n        }\n\n        return (\n            assetProxyId,\n            tokenAddress,\n            tokenIds,\n            tokenValues,\n            callbackData\n        );\n    }\n\n    /// @dev Encode data for multiple assets, per the AssetProxy contract specification.\n    /// @param amounts The amounts of each asset to be traded.\n    /// @param nestedAssetData AssetProxy-compliant data describing each asset to be traded.\n    /// @return AssetProxy-compliant data describing the set of assets.\n    function encodeMultiAssetData(uint256[] memory amounts, bytes[] memory nestedAssetData)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(\n            MULTI_ASSET_PROXY_ID,\n            amounts,\n            nestedAssetData\n        );\n        return assetData;\n    }\n\n    /// @dev Decode multi-asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant data describing a multi-asset basket.\n    /// @return The Multi-Asset AssetProxy identifier, an array of the amounts\n    /// of the assets to be traded, and an array of the\n    /// AssetProxy-compliant data describing each asset to be traded.  Each\n    /// element of the arrays corresponds to the same-indexed element of the other array.\n    function decodeMultiAssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            uint256[] memory amounts,\n            bytes[] memory nestedAssetData\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == MULTI_ASSET_PROXY_ID,\n            \"WRONG_PROXY_ID\"\n        );\n\n        // solhint-disable indent\n        (amounts, nestedAssetData) = abi.decode(\n            assetData.slice(4, assetData.length),\n            (uint256[], bytes[])\n        );\n        // solhint-enable indent\n    }\n\n    /// @dev Calls `asset.ownerOf(tokenId)`, but returns a null owner instead of reverting on an unowned asset.\n    /// @param tokenAddress Address of ERC721 asset.\n    /// @param tokenId The identifier for the specific NFT.\n    /// @return Owner of tokenId or null address if unowned.\n    function getERC721TokenOwner(address tokenAddress, uint256 tokenId)\n        public\n        view\n        returns (address ownerAddress)\n    {\n        bytes memory ownerOfCalldata = abi.encodeWithSelector(\n            _ERC721_OWNER_OF_SELECTOR,\n            tokenId\n        );\n\n        (bool success, bytes memory returnData) = tokenAddress.staticcall(ownerOfCalldata);\n\n        ownerAddress = (success && returnData.length == 32) ? returnData.readAddress(12) : address(0);\n        return ownerAddress;\n    }\n}\n",
		"@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n    \n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n                    \n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n                    \n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to <= b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n    \n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to <= b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            \"GREATER_THAN_ZERO_LENGTH_REQUIRED\"\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n            \n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= index + 4,\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @dev NOTE: the returned value overlaps with the input value.\n    ///            Both should be treated as immutable.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytesWithLength(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n        \n        // Return a pointer to the byte array as it exists inside `b`\n        assembly {\n            result := add(b, index)\n        }\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytesWithLength(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            b.contentAddress() + index,\n            input.rawAddress(), // includes length of <input>\n            input.length + 32   // +32 bytes to store <input> length\n        );\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function deepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        internal\n        pure\n    {\n        uint256 sourceLen = source.length;\n        // Dest length must be >= source length, or some bytes would not be copied.\n        require(\n            dest.length >= sourceLen,\n            \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\"\n        );\n        memCopy(\n            dest.contentAddress(),\n            source.contentAddress(),\n            sourceLen\n        );\n    }\n}\n",
		"@0x/contracts-asset-proxy/contracts/src/libs/LibAssetProxyIds.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract LibAssetProxyIds {\n\n    // AssetProxy Ids are equiavalent the first 4 bytes of the keccak256 hash of the function signature assigned to each AssetProxy.\n\n    // ERC20Token(address)\n    bytes4 constant public ERC20_PROXY_ID = 0xf47261b0;\n\n    // ERC721Token(address,uint256)\n    bytes4 constant public ERC721_PROXY_ID = 0x02571792;\n\n    // ERC1155Assets(address,uint256[],uint256[],bytes)\n    bytes4 constant public ERC1155_PROXY_ID = 0xa7cb5fb7;\n\n    // MultiAsset(uint256[],bytes[])\n    bytes4 constant public MULTI_ASSET_PROXY_ID = 0x94cfcdd7;\n}\n",
		"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./IExchangeCore.sol\";\nimport \"./IMatchOrders.sol\";\nimport \"./ISignatureValidator.sol\";\nimport \"./ITransactions.sol\";\nimport \"./IAssetProxyDispatcher.sol\";\nimport \"./IWrapperFunctions.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract IExchange is\n    IExchangeCore,\n    IMatchOrders,\n    ISignatureValidator,\n    ITransactions,\n    IAssetProxyDispatcher,\n    IWrapperFunctions\n{}\n",
		"@0x/contracts-exchange/contracts/src/interfaces/IExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\n\n\ncontract IExchangeCore {\n\n    // Fill event is emitted whenever an order is filled.\n    event Fill(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that received fees.\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData,                 // Encoded data specific to takerAsset.\n        bytes makerFeeAssetData,              // Encoded data specific to makerFeeAsset.\n        bytes takerFeeAssetData,               // Encoded data specific to takerFeeAsset.\n        uint256 makerAssetFilledAmount,       // Amount of makerAsset sold by maker and bought by taker.\n        uint256 takerAssetFilledAmount,       // Amount of takerAsset sold by taker and bought by maker.\n        uint256 makerFeePaid,                 // Amount of makerFeeAssetData paid to feeRecipient by maker.\n        uint256 takerFeePaid,                 // Amount of takerFeeAssetData paid to feeRecipient by taker.\n        address takerAddress,                 // Address that filled the order.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        bytes32 indexed orderHash            // EIP712 hash of order (see LibOrder.getOrderHash).\n    );\n\n    // Cancel event is emitted whenever an individual order is cancelled.\n    event Cancel(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that would have recieved fees if order was filled.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        bytes32 indexed orderHash,            // EIP712 hash of order (see LibOrder.getOrderHash).\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData                  // Encoded data specific to takerAsset.\n    );\n\n    // CancelUpTo event is emitted whenever `cancelOrdersUpTo` is executed succesfully.\n    event CancelUpTo(\n        address indexed makerAddress,         // Orders cancelled must have been created by this address.\n        address indexed orderSenderAddress,   // Orders cancelled must have a `senderAddress` equal to this address.\n        uint256 orderEpoch                    // Orders with specified makerAddress and senderAddress with a salt less than this value are considered cancelled.\n    );\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrder(LibOrder.Order memory order)\n        public;\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n}\n",
		"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./LibEIP712ExchangeDomain.sol\";\n\n\ncontract LibOrder is\n    LibEIP712ExchangeDomain\n{\n    // Hash for the EIP712 Order Schema:\n    // keccak256(abi.encodePacked(\n    //     \"Order(\",\n    //     \"address makerAddress,\",\n    //     \"address takerAddress,\",\n    //     \"address feeRecipientAddress,\",\n    //     \"address senderAddress,\",\n    //     \"uint256 makerAssetAmount,\",\n    //     \"uint256 takerAssetAmount,\",\n    //     \"uint256 makerFee,\",\n    //     \"uint256 takerFee,\",\n    //     \"uint256 expirationTimeSeconds,\",\n    //     \"uint256 salt,\",\n    //     \"bytes makerAssetData,\",\n    //     \"bytes takerAssetData,\",\n    //     \"bytes makerFeeAssetData,\",\n    //     \"bytes takerFeeAssetData\",\n    //     \")\"\n    // ))\n    bytes32 constant public EIP712_ORDER_SCHEMA_HASH =\n        0xf80322eb8376aafb64eadf8f0d7623f22130fd9491a221e902b713cb984a7534;\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's state is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    struct Order {\n        address makerAddress;           // Address that created the order.\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes makerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset fees. The leading bytes4 references the id of the asset proxy.\n        bytes takerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset fees. The leading bytes4 references the id of the asset proxy.\n    }\n    // solhint-enable max-line-length\n\n    struct OrderInfo {\n        uint8 orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 hash of the order (see LibOrder.getOrderHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates Keccak-256 hash of the order.\n    /// @param order The order structure.\n    /// @return Keccak-256 EIP712 hash of the order.\n    function getOrderHash(Order memory order)\n        public\n        view\n        returns (bytes32 orderHash)\n    {\n        orderHash = _hashEIP712ExchangeMessage(_hashOrder(order));\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order.\n    function _hashOrder(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = EIP712_ORDER_SCHEMA_HASH;\n        bytes memory makerAssetData = order.makerAssetData;\n        bytes memory takerAssetData = order.takerAssetData;\n        bytes memory makerFeeAssetData = order.makerFeeAssetData;\n        bytes memory takerFeeAssetData = order.takerFeeAssetData;\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     bytes32(order.makerAddress),\n        //     bytes32(order.takerAddress),\n        //     bytes32(order.feeRecipientAddress),\n        //     bytes32(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData),\n        //     keccak256(order.makerFeeAssetData),\n        //     keccak256(order.takerFeeAssetData)\n        // ));\n\n        assembly {\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n            let pos4 := add(order, 384)\n            let pos5 := add(order, 416)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n            let temp4 := mload(pos4)\n            let temp5 := mload(pos5)\n\n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, keccak256(add(makerAssetData, 32), mload(makerAssetData)))        // store hash of makerAssetData\n            mstore(pos3, keccak256(add(takerAssetData, 32), mload(takerAssetData)))        // store hash of takerAssetData\n            mstore(pos4, keccak256(add(makerFeeAssetData, 32), mload(makerFeeAssetData)))  // store hash of makerFeeAssetData\n            mstore(pos5, keccak256(add(takerFeeAssetData, 32), mload(takerFeeAssetData)))  // store hash of takerFeeAssetData\n            result := keccak256(pos1, 480)\n\n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n            mstore(pos4, temp4)\n            mstore(pos5, temp5)\n        }\n        return result;\n    }\n}\n",
		"@0x/contracts-exchange-libs/contracts/src/LibEIP712ExchangeDomain.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\ncontract LibEIP712ExchangeDomain is\n    LibEIP712\n{\n    // EIP712 Exchange Domain Name value\n    string constant public EIP712_EXCHANGE_DOMAIN_NAME = \"0x Protocol\";\n\n    // EIP712 Exchange Domain Version value\n    string constant public EIP712_EXCHANGE_DOMAIN_VERSION = \"3.0.0\";\n\n    // Hash of the EIP712 Domain Separator data\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 public EIP712_EXCHANGE_DOMAIN_HASH;\n\n    /// @param chainId Chain ID of the network this contract is deployed on.\n    /// @param verifyingContractAddressIfExists Address of the verifying contract (null if the address of this contract)\n    constructor (\n        uint256 chainId,\n        address verifyingContractAddressIfExists\n    )\n        public\n    {\n        address verifyingContractAddress = verifyingContractAddressIfExists == address(0) ? address(this) : verifyingContractAddressIfExists;\n        EIP712_EXCHANGE_DOMAIN_HASH = _hashEIP712Domain(\n            EIP712_EXCHANGE_DOMAIN_NAME,\n            EIP712_EXCHANGE_DOMAIN_VERSION,\n            chainId,\n            verifyingContractAddress\n        );\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct in the EIP712 domain\n    ///      of the Exchange contract.\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to the Exchange EIP712 Domain.\n    function _hashEIP712ExchangeMessage(bytes32 hashStruct)\n        internal\n        view\n        returns (bytes32 result)\n    {\n        return _hashEIP712Message(EIP712_EXCHANGE_DOMAIN_HASH, hashStruct);\n    }\n}\n",
		"@0x/contracts-utils/contracts/src/LibEIP712.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract LibEIP712 {\n\n    // Hash of the EIP712 Domain Separator Schema\n    bytes32 constant internal EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"EIP712Domain(\",\n        \"string name,\",\n        \"string version,\",\n        \"uint256 chainId,\",\n        \"address verifyingContractAddress\",\n        \")\"\n    ));\n\n    /// @dev Calculates a EIP712 domain separator.\n    /// @param name The EIP712 domain name.\n    /// @param version The EIP712 domain version.\n    /// @param verifyingContractAddress The EIP712 verifying contract.\n    /// @return EIP712 domain separator.\n    function _hashEIP712Domain(\n        string memory name,\n        string memory version,\n        uint256 chainId,\n        address verifyingContractAddress\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        return keccak256(abi.encodePacked(\n            EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n            keccak256(bytes(name)),\n            keccak256(bytes(version)),\n            chainId,\n            uint256(verifyingContractAddress)\n        ));\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct with a given domain hash.\n    /// @param eip712DomainHash Hash of the domain domain separator data, computed\n    ///                         with getDomainHash().\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to the given EIP712 Domain.\n    function _hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct\n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n",
		"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/SafeMath.sol\";\n\n\ncontract LibFillResults is\n    SafeMath\n{\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of ZRX paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of ZRX paid by taker to feeRecipients(s).\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                    // Amounts filled and fees paid of left order.\n        FillResults right;                   // Amounts filled and fees paid of right order.\n        uint256 leftMakerAssetSpreadAmount;  // Spread between price of left and right order, denominated in the left order's makerAsset, paid to taker.\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    ///      Modifies the first FillResults instance specified.\n    /// @param totalFillResults Fill results instance that will be added onto.\n    /// @param singleFillResults Fill results instance that will be added to totalFillResults.\n    function _addFillResults(FillResults memory totalFillResults, FillResults memory singleFillResults)\n        internal\n        pure\n    {\n        totalFillResults.makerAssetFilledAmount = _safeAdd(totalFillResults.makerAssetFilledAmount, singleFillResults.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = _safeAdd(totalFillResults.takerAssetFilledAmount, singleFillResults.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = _safeAdd(totalFillResults.makerFeePaid, singleFillResults.makerFeePaid);\n        totalFillResults.takerFeePaid = _safeAdd(totalFillResults.takerFeePaid, singleFillResults.takerFeePaid);\n    }\n}\n",
		"@0x/contracts-utils/contracts/src/SafeMath.sol": "pragma solidity ^0.5.9;\n\n\ncontract SafeMath {\n\n    function _safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(\n            c / a == b,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function _safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function _safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(\n            b <= a,\n            \"UINT256_UNDERFLOW\"\n        );\n        return a - b;\n    }\n\n    function _safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        require(\n            c >= a,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function _max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function _min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
		"@0x/contracts-exchange/contracts/src/interfaces/IMatchOrders.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IMatchOrders {\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n",
		"@0x/contracts-exchange/contracts/src/interfaces/ISignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\n\n\ncontract ISignatureValidator {\n\n   // Allowed signature types.\n    enum SignatureType {\n        Illegal,                // 0x00, default value\n        Invalid,                // 0x01\n        EIP712,                 // 0x02\n        EthSign,                // 0x03\n        Wallet,                 // 0x04\n        Validator,              // 0x05\n        PreSigned,              // 0x06\n        OrderValidator,         // 0x07\n        WalletOrderValidator,   // 0x08\n        NSignatureTypes         // 0x09, number of signature types. Always leave at end.\n    }\n\n    event SignatureValidatorApproval(\n        address indexed signerAddress,     // Address that approves or disapproves a contract to verify signatures.\n        address indexed validatorAddress,  // Address of signature validator contract.\n        bool approved                      // Approval or disapproval of validator contract.\n    );\n\n    /// @dev Approves a hash on-chain.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param hash Any 32-byte hash.\n    function preSign(bytes32 hash)\n        external;\n\n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external;\n\n    /// @dev Approves/unnapproves an OrderValidator contract to verify signatures on signer's behalf\n    ///      using the `OrderValidator` signature type.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setOrderValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external;\n\n    /// @dev Verifies that a signature for a hash is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signerAddress Address of signer.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidHashSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a signature for an order is valid.\n    /// @param order The order.\n    /// @param signerAddress Address of signer.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidOrderSignature(\n        LibOrder.Order memory order,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n}\n",
		"@0x/contracts-exchange/contracts/src/interfaces/ITransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol\";\n\n\ncontract ITransactions {\n\n    // TransactionExecution event is emitted when a ZeroExTransaction is executed.\n    event TransactionExecution(bytes32 indexed transactionHash);\n\n    /// @dev Executes an Exchange method call in the context of signer.\n    /// @param transaction 0x transaction containing salt, signerAddress, and data.\n    /// @param signature Proof that transaction has been signed by signer.\n    /// @return ABI encoded return data of the underlying Exchange function call.\n    function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        returns (bytes memory);\n\n    /// @dev Executes a batch of Exchange method calls in the context of signer(s).\n    /// @param transactions Array of 0x transactions containing salt, signerAddress, and data.\n    /// @param signatures Array of proofs that transactions have been signed by signer(s).\n    /// @return Array containing ABI encoded return data for each of the underlying Exchange function calls.\n    function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] memory transactions,\n        bytes[] memory signatures\n    )\n        public\n        returns (bytes[] memory);\n}\n",
		"@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./LibEIP712ExchangeDomain.sol\";\n\n\ncontract LibZeroExTransaction is\n    LibEIP712ExchangeDomain\n{\n    // Hash for the EIP712 0x transaction schema\n    // keccak256(abi.encodePacked(\n    //    \"ZeroExTransaction(\",\n    //    \"uint256 salt,\",\n    //    \"uint256 expirationTimeSeconds,\"\n    //    \"address signerAddress,\",\n    //    \"bytes data\",\n    //    \")\"\n    // ));\n    bytes32 constant public EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH = 0x6b4c70d217b44d0ff0d3bf7aeb18eb8604c5cd06f615a4b497aeefa4f01d2775;\n\n    struct ZeroExTransaction {\n        uint256 salt;                   // Arbitrary number to ensure uniqueness of transaction hash.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which transaction expires.\n        address signerAddress;          // Address of transaction signer.\n        bytes data;                     // AbiV2 encoded calldata.\n    }\n\n    /// @dev Calculates the EIP712 hash of a 0x transaction using the domain separator of the Exchange contract.\n    /// @param transaction 0x transaction containing salt, signerAddress, and data.\n    /// @return EIP712 hash of the transaction with the domain separator of this contract.\n    function getTransactionHash(ZeroExTransaction memory transaction)\n        public\n        view\n        returns (bytes32 transactionHash)\n    {\n        // Hash the transaction with the domain separator of the Exchange contract.\n        transactionHash = _hashEIP712ExchangeMessage(_hashZeroExTransaction(transaction));\n        return transactionHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the 0x transaction with no domain separator.\n    /// @param transaction 0x transaction containing salt, signerAddress, and data.\n    /// @return EIP712 hash of the transaction with no domain separator.\n    function _hashZeroExTransaction(ZeroExTransaction memory transaction)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH;\n        bytes memory data = transaction.data;\n        uint256 salt = transaction.salt;\n        uint256 expirationTimeSeconds = transaction.expirationTimeSeconds;\n        address signerAddress = transaction.signerAddress;\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH,\n        //     transaction.salt,\n        //     transaction.expirationTimeSeconds,\n        //     uint256(transaction.signerAddress),\n        //     keccak256(transaction.data)\n        // ));\n\n        assembly {\n            // Compute hash of data\n            let dataHash := keccak256(add(data, 32), mload(data))\n\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, schemaHash)                                                               // hash of schema\n            mstore(add(memPtr, 32), salt)                                                            // salt\n            mstore(add(memPtr, 64), expirationTimeSeconds)                                           // expirationTimeSeconds\n            mstore(add(memPtr, 96), and(signerAddress, 0xffffffffffffffffffffffffffffffffffffffff))  // signerAddress\n            mstore(add(memPtr, 128), dataHash)                                                       // hash of data\n\n            // Compute hash\n            result := keccak256(memPtr, 160)\n        }\n        return result;\n    }\n}\n",
		"@0x/contracts-exchange/contracts/src/interfaces/IAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IAssetProxyDispatcher {\n\n    // Logs registration of new asset proxy\n    event AssetProxyRegistered(\n        bytes4 id,              // Id of new registered AssetProxy.\n        address assetProxy      // Address of new registered AssetProxy.\n    );\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n",
		"@0x/contracts-exchange/contracts/src/interfaces/IWrapperFunctions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IWrapperFunctions {\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrKill.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrders(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrders(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Synchronously cancels multiple orders in a single transaction.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public;\n\n    /// @dev Fetches information for all passed in orders\n    /// @param orders Array of order specifications.\n    /// @return Array of OrderInfo instances that correspond to each order.\n    function getOrdersInfo(LibOrder.Order[] memory orders)\n        public\n        view\n        returns (LibOrder.OrderInfo[] memory);\n}\n"
	},
	"sourceTreeHashHex": "0xb86bc09485df75e4be56348e2c68557c973cb096cc0ab9faa5ad10caee927140",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.9+commit.e560f70d.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": [
				"@0x/contracts-exchange=/Users/alextowle/0x-monorepo/contracts/dev-utils/node_modules/@0x/contracts-exchange",
				"@0x/contracts-exchange-libs=/Users/alextowle/0x-monorepo/contracts/dev-utils/node_modules/@0x/contracts-exchange-libs",
				"@0x/contracts-utils=/Users/alextowle/0x-monorepo/contracts/dev-utils/node_modules/@0x/contracts-utils",
				"@0x/contracts-asset-proxy=/Users/alextowle/0x-monorepo/contracts/dev-utils/node_modules/@0x/contracts-asset-proxy"
			]
		}
	},
	"networks": {}
}