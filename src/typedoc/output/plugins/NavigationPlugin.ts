module TypeDoc.Output
{
    /**
     * A plugin that exposes the navigation structure of the documentation
     * to the rendered templates.
     *
     * The navigation structure is generated using the current themes
     * [[BaseTheme.getNavigation]] function. This plugins takes care that the navigation
     * is updated and passed to the render context.
     */
    export class NavigationPlugin extends BasePlugin
    {
        /**
         * The navigation structure generated by the current theme.
         */
        navigation:Models.NavigationItem;


        /**
         * Create a new NavigationPlugin instance.
         *
         * @param renderer  The renderer this plugin should be attached to.
         */
        constructor(renderer:Renderer) {
            super(renderer);
            renderer.on(Renderer.EVENT_BEGIN, this.onRendererBegin, this);
            renderer.on(Renderer.EVENT_BEGIN_PAGE, this.onRendererBeginPage, this);
        }


        /**
         * Triggered before the renderer starts rendering a project.
         *
         * @param event  An event object describing the current render operation.
         */
        private onRendererBegin(event:OutputEvent) {
            this.navigation = this.renderer.theme.getNavigation(event.project);
        }


        /**
         * Triggered before a document will be rendered.
         *
         * @param page  An event object describing the current render operation.
         */
        private onRendererBeginPage(page:OutputPageEvent) {
            var currentItems:Models.NavigationItem[] = [];
            var secondary:Models.NavigationItem[] = [];
            function updateItem(item:Models.NavigationItem) {
                item.isCurrent = false;
                item.isInPath = false;
                if (item.url == page.url) {
                    currentItems.push(item);
                }

                if (item.children) {
                    item.children.forEach((child) => {
                        updateItem(child);
                    });
                }
            }

            updateItem(this.navigation);
            currentItems.forEach((item:Models.NavigationItem) => {
                item.isCurrent = true;

                var primary = item;
                while (primary && !primary.isPrimary) {
                    primary = primary.parent;
                }
                if (primary) secondary.push(primary);

                while (item) {
                    item.isInPath = true;
                    item = item.parent;
                }
            });

            page.navigation = this.navigation;
            page.secondary  = secondary;
        }
    }


    /**
     * Register this plugin.
     */
    Renderer.PLUGIN_CLASSES.push(NavigationPlugin);
}