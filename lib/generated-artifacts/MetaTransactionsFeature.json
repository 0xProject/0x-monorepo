{
    "schemaVersion": "2.0.0",
    "contractName": "MetaTransactionsFeature",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "zeroExAddress",
                        "type": "address"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "bytes32",
                        "name": "hash",
                        "type": "bytes32"
                    },
                    {
                        "indexed": true,
                        "internalType": "bytes4",
                        "name": "selector",
                        "type": "bytes4"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "signer",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "sender",
                        "type": "address"
                    }
                ],
                "name": "MetaTransactionExecuted",
                "type": "event"
            },
            {
                "inputs": [],
                "name": "EIP712_DOMAIN_SEPARATOR",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "FEATURE_NAME",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "FEATURE_VERSION",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "MTX_EIP712_TYPEHASH",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sender",
                        "type": "address"
                    },
                    {
                        "components": [
                            {
                                "internalType": "address payable",
                                "name": "signer",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "minGasPrice",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "maxGasPrice",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "callData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "uint256",
                                "name": "value",
                                "type": "uint256"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "feeToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "feeAmount",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IMetaTransactionsFeature.MetaTransactionData",
                        "name": "mtx",
                        "type": "tuple"
                    },
                    {
                        "internalType": "bytes",
                        "name": "signature",
                        "type": "bytes"
                    }
                ],
                "name": "_executeMetaTransaction",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "returnResult",
                        "type": "bytes"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address payable",
                                "name": "signer",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "minGasPrice",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "maxGasPrice",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "callData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "uint256",
                                "name": "value",
                                "type": "uint256"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "feeToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "feeAmount",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IMetaTransactionsFeature.MetaTransactionData[]",
                        "name": "mtxs",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "signatures",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchExecuteMetaTransactions",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "returnResults",
                        "type": "bytes[]"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address payable",
                                "name": "signer",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "minGasPrice",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "maxGasPrice",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "callData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "uint256",
                                "name": "value",
                                "type": "uint256"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "feeToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "feeAmount",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IMetaTransactionsFeature.MetaTransactionData",
                        "name": "mtx",
                        "type": "tuple"
                    },
                    {
                        "internalType": "bytes",
                        "name": "signature",
                        "type": "bytes"
                    }
                ],
                "name": "executeMetaTransaction",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "returnResult",
                        "type": "bytes"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address payable",
                                "name": "signer",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "minGasPrice",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "maxGasPrice",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "callData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "uint256",
                                "name": "value",
                                "type": "uint256"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "feeToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "feeAmount",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IMetaTransactionsFeature.MetaTransactionData",
                        "name": "mtx",
                        "type": "tuple"
                    }
                ],
                "name": "getMetaTransactionExecutedBlock",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "blockNumber",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address payable",
                                "name": "signer",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "minGasPrice",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "maxGasPrice",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "callData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "uint256",
                                "name": "value",
                                "type": "uint256"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "feeToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "feeAmount",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IMetaTransactionsFeature.MetaTransactionData",
                        "name": "mtx",
                        "type": "tuple"
                    }
                ],
                "name": "getMetaTransactionHash",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "mtxHash",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "mtxHash",
                        "type": "bytes32"
                    }
                ],
                "name": "getMetaTransactionHashExecutedBlock",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "blockNumber",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "migrate",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "success",
                        "type": "bytes4"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "details": "MetaTransactions feature.",
            "kind": "dev",
            "methods": {
                "_executeMetaTransaction(address,(address,address,uint256,uint256,uint256,uint256,bytes,uint256,address,uint256),bytes)": {
                    "details": "Execute a meta-transaction via `sender`. Privileged variant.      Only callable from within.",
                    "params": {
                        "mtx": "The meta-transaction.",
                        "sender": "Who is executing the meta-transaction.",
                        "signature": "The signature by `mtx.signer`."
                    },
                    "returns": {
                        "returnResult": "The ABI-encoded result of the underlying call."
                    }
                },
                "batchExecuteMetaTransactions((address,address,uint256,uint256,uint256,uint256,bytes,uint256,address,uint256)[],bytes[])": {
                    "details": "Execute multiple meta-transactions.",
                    "params": {
                        "mtxs": "The meta-transactions.",
                        "signatures": "The signature by each respective `mtx.signer`."
                    },
                    "returns": {
                        "returnResults": "The ABI-encoded results of the underlying calls."
                    }
                },
                "executeMetaTransaction((address,address,uint256,uint256,uint256,uint256,bytes,uint256,address,uint256),bytes)": {
                    "details": "Execute a single meta-transaction.",
                    "params": {
                        "mtx": "The meta-transaction.",
                        "signature": "The signature by `mtx.signer`."
                    },
                    "returns": {
                        "returnResult": "The ABI-encoded result of the underlying call."
                    }
                },
                "getMetaTransactionExecutedBlock((address,address,uint256,uint256,uint256,uint256,bytes,uint256,address,uint256))": {
                    "details": "Get the block at which a meta-transaction has been executed.",
                    "params": {
                        "mtx": "The meta-transaction."
                    },
                    "returns": {
                        "blockNumber": "The block height when the meta-transactioin was executed."
                    }
                },
                "getMetaTransactionHash((address,address,uint256,uint256,uint256,uint256,bytes,uint256,address,uint256))": {
                    "details": "Get the EIP712 hash of a meta-transaction.",
                    "params": {
                        "mtx": "The meta-transaction."
                    },
                    "returns": {
                        "mtxHash": "The EIP712 hash of `mtx`."
                    }
                },
                "getMetaTransactionHashExecutedBlock(bytes32)": {
                    "details": "Get the block at which a meta-transaction hash has been executed.",
                    "params": {
                        "mtxHash": "The meta-transaction hash."
                    },
                    "returns": {
                        "blockNumber": "The block height when the meta-transactioin was executed."
                    }
                },
                "migrate()": {
                    "details": "Initialize and register this feature.      Should be delegatecalled by `Migrate.migrate()`.",
                    "returns": {
                        "success": "`LibMigrate.SUCCESS` on success."
                    }
                }
            },
            "stateVariables": {
                "FEATURE_NAME": {
                    "details": "Name of this feature."
                },
                "FEATURE_VERSION": {
                    "details": "Version of this feature."
                },
                "MTX_EIP712_TYPEHASH": {
                    "details": "EIP712 typehash of the `MetaTransactionData` struct."
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x61010060405262000014600160008062000116565b60c0527fe866282978e74dc892efa3621df30a058ca4d374a338824c0b89f1dfdcb0ea0460e0523480156200004857600080fd5b5060405162002444380380620024448339810160408190526200006b9162000148565b3060601b60805260405181904690620000f1907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f907f9e5dae0addaf20578aeb5d70341d092b53b4e14480ac5726438fd436df7ba427907f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c908590879060200162000178565b60408051601f19818403018152919052805160209091012060a05250620001a4915050565b6bffffffff0000000000000000604084901b1667ffffffff00000000602084901b161763ffffffff8216179392505050565b6000602082840312156200015a578081fd5b81516001600160a01b038116811462000171578182fd5b9392505050565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b60805160601c60a05160c05160e05161225d620001e7600039806105bd528061064e5250806102025250806106725280610ab2525080610a51525061225d6000f3fe6080604052600436106100bc5760003560e01c80638fd3ab8011610074578063d036092d1161004e578063d036092d146101c3578063dab400f3146101d8578063e4263936146101ed576100bc565b80638fd3ab801461016e5780639b05181814610190578063ae550497146101a3576100bc565b80636ae4b4f7116100a55780636ae4b4f71461010c57806372d17d031461012e578063769250ea1461014e576100bc565b8063031b905c146100c15780633fb2da38146100ec575b600080fd5b3480156100cd57600080fd5b506100d6610200565b6040516100e39190611e17565b60405180910390f35b3480156100f857600080fd5b506100d6610107366004611bc6565b610224565b34801561011857600080fd5b50610121610238565b6040516100e39190612032565b34801561013a57600080fd5b506100d6610149366004611ab8565b610271565b61016161015c366004611a07565b61028c565b6040516100e39190611d99565b34801561017a57600080fd5b50610183610417565b6040516100e39190611f8b565b61012161019e366004611c01565b610534565b3480156101af57600080fd5b506100d66101be366004611bc6565b6105b6565b3480156101cf57600080fd5b506100d661064c565b3480156101e457600080fd5b506100d6610670565b6101216101fb366004611994565b610694565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610232610149836105b6565b92915050565b6040518060400160405280601081526020017f4d6574615472616e73616374696f6e730000000000000000000000000000000081525081565b600061027b6106be565b600092835260205250604090205490565b60606001600061029a6106cb565b8054909150828116156102fc576102fc6102f76102f1600080368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506106d89050565b85610724565b6107df565b821781558351855114610318576103186102f7865186516107e7565b845167ffffffffffffffff8111801561033057600080fd5b5060405190808252806020026020018201604052801561036457816020015b606081526020019060019003908161034f5790505b50925060005b85518110156103c3576103a43387838151811061038357fe5b602002602001015187848151811061039757fe5b602002602001015161081d565b8482815181106103b057fe5b602090810291909101015260010161036a565b5060006103d03447610a05565b9050801561040757604051339082156108fc029083906000818181858888f19350505050158015610405573d6000803e3d6000fd5b505b5080549119909116905592915050565b60006104427f9b05181800000000000000000000000000000000000000000000000000000000610a1b565b61046b7f769250ea00000000000000000000000000000000000000000000000000000000610a1b565b6104947fe426393600000000000000000000000000000000000000000000000000000000610a1b565b6104bd7f3fb2da3800000000000000000000000000000000000000000000000000000000610a1b565b6104e67f72d17d0300000000000000000000000000000000000000000000000000000000610a1b565b61050f7fae55049700000000000000000000000000000000000000000000000000000000610a1b565b507f2c64c5ef0000000000000000000000000000000000000000000000000000000090565b6060600160006105426106cb565b805490915082811615610599576105996102f76102f1600080368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506106d89050565b821781556105a833868661081d565b925060006103d03447610a05565b60006102327f0000000000000000000000000000000000000000000000000000000000000000836000015184602001518560400151866060015187608001518860a001518960c00151805190602001208a60e001518b61010001518c61012001516040516020016106319b9a99989796959493929190611e4c565b60405160208183030381529060405280519060200120610aae565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60603330146106a9576106a96102f733610b00565b6106b484848461081d565b90505b9392505050565b6000806102326005610bb8565b6000806102326006610bb8565b600081600401835110156106f9576106f96102f76003855185600401610bd3565b5001602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b60607fc7a7103e21e41a5c3158b3028d34cb9bb9593b10b1892f49d7187efa71219d4e838360405160240161075a929190612000565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b805160208201fd5b60607f52974c3a86e985173f72e2fb84ba2bfca8fb3b7c5031eb8077ebd59458abf2a4838360405160240161075a929190611f4c565b6060610827611622565b73ffffffffffffffffffffffffffffffffffffffff85168152610849846105b6565b6020820152604081018490526060810183905261086581610c78565b4361086e6106be565b602080840151600090815291905260409020556101208401511561090d5761010084015184516101208601516040517f89dd02e700000000000000000000000000000000000000000000000000000000815230936389dd02e7936108da93919290918b91600401612045565b600060405180830381600087803b1580156108f457600080fd5b505af1158015610908573d6000803e3d6000fd5b505050505b60c084015161091d9060006106d8565b7fffffffff0000000000000000000000000000000000000000000000000000000016608082018190527f415565b000000000000000000000000000000000000000000000000000000000141561097d5761097681610ea3565b9150610992565b6109926102f7826020015183608001516110d9565b80608001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f7f4fe3ff8ae440e1570c558da08440b26f89fb1c1f2910cd91ca6452955f121a8260200151866000015187602001516040516109f593929190611e20565b60405180910390a2509392505050565b6000818310610a1457816106b7565b5090919050565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081523090636eb224cb90610a799084907f000000000000000000000000000000000000000000000000000000000000000090600401611fb8565b600060405180830381600087803b158015610a9357600080fd5b505af1158015610aa7573d6000803e3d6000fd5b5050505050565b60007f000000000000000000000000000000000000000000000000000000000000000082604051602001610ae3929190611d42565b604051602081830303815290604052805190602001209050919050565b60607ff0ec779b0bcda6d84abf99ee2c67647d1100ebbb553a9c2d1c2ba1579592832c82604051602401610b349190611d78565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050919050565b60006080826007811115610bc857fe5b600101901b92915050565b6060632800659560e01b848484604051602401610bf29392919061207c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b60408101516020015173ffffffffffffffffffffffffffffffffffffffff1615801590610cdd5750806000015173ffffffffffffffffffffffffffffffffffffffff1681604001516020015173ffffffffffffffffffffffffffffffffffffffff1614155b15610d0057610d006102f78260200151836000015184604001516020015161110f565b4281604001516080015111610d2957610d296102f7826020015142846040015160800151611147565b3a8160400151604001511180610d4657503a816040015160600151105b15610d6e57610d6e6102f782602001513a84604001516040015185604001516060015161117f565b4760a08201819052604082015160e001511115610da357610da36102f782602001518360a00151846040015160e00151611240565b602081015160408083015151606084015191517ff68fd38d000000000000000000000000000000000000000000000000000000008152309363f68fd38d93610def939192600401611eb2565b60006040518083038186803b158015610e0757600080fd5b505afa925050508015610e18575060015b610e64573d808015610e46576040519150601f19603f3d011682016040523d82523d6000602084013e610e4b565b606091505b50610e626102f78360200151846060015184611278565b505b610e6c6106be565b6020808301516000908152919052604090205460c0820181905215610ea057610ea06102f782602001518360c001516112b0565b50565b6060610ead611682565b604083015160c0015151606090601c0167ffffffffffffffff81118015610ed357600080fd5b506040519080825280601f01601f191660200182016040528015610efe576020820181803683370190505b5090506060846040015160c00151905060a081511015610f1a57fe5b602082810152805160248201906040840190610f5b90829084907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc016112e6565b83806020019051810190610f6f9190611ad0565b94505050505060006060610f8a856040015160c001516113c7565b915091506110d0856020015163c853c96960e01b60405180610100016040528089604001516000015173ffffffffffffffffffffffffffffffffffffffff168152602001876000015173ffffffffffffffffffffffffffffffffffffffff168152602001876020015173ffffffffffffffffffffffffffffffffffffffff16815260200187604001518152602001876060015181526020018760800151815260200186815260200185815250604051602401611046919061209e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529088015160e001516114c1565b95945050505050565b60607f547a32a328d8a78dbe9bf090fa60ba3d4d1c6833a592a2c942666ce3249c1210838360405160240161075a929190611ee7565b60607fa78002a166fcae5236d89e3ff35c53dadb775f7818de4a020714cba4bf360822848484604051602401610bf293929190611e20565b60607fbea726efdf9868bbc5755dce9f13d585b3cf731177be75300d15bb8f5e286158848484604051602401610bf293929190611f5a565b60607f6fec11a99ebb0ff14b6648f609f57864dadeba8b29869c4df2b3b76894147849858585856040516024016111b99493929190611f70565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050949350505050565b60607f0a5ade45208123132815e1591a1c7e64045fd006152f5e85d100aee42ba02c75848484604051602401610bf293929190611f5a565b60607f06b99cf1d367dbdbc495802261a500bf6e1319cfa7ecaa23ae929f5cd4c70795848484604051602401610bf293929190611f17565b60607ffe251a07f3cbffd23c1c1db9ec776d259099c832333d99ef48cacfa93a4d7b32838360405160240161075a929190611f4c565b602081101561132d578151835160208390036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01801990921691161783526113c2565b8282141561133a576113c2565b828211156113745760208103905080820181840181515b8285101561136c578451865260209586019590940193611351565b9052506113c2565b60208103905080820181840183515b818612156113bd57825182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09283019290910190611383565b855250505b505050565b6000606060468351108061144b575082516114059084907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffba016106d8565b7fffffffff00000000000000000000000000000000000000000000000000000000167ff86d1d920000000000000000000000000000000000000000000000000000000014155b1561145e578251602084012091506114bc565b82517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffba8101602085012092506114b99084907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbe81019061154d565b90505b915091565b606060003073ffffffffffffffffffffffffffffffffffffffff1683856040516114eb9190611d26565b60006040518083038185875af1925050503d8060008114611528576040519150601f19603f3d011682016040523d82523d6000602084013e61152d565b606091505b509250905080611545576115456102f78686856115e4565b509392505050565b606081831115611566576115666102f760008585610bd3565b835182111561157f5761157f6102f76001848751610bd3565b82820367ffffffffffffffff8111801561159857600080fd5b506040519080825280601f01601f1916602001820160405280156115c3576020820181803683370190505b5090506106b76115d28261161c565b846115dc8761161c565b0183516112e6565b60607fa9f0c547643c02afed4cf2699e794bc383effca840eed62fddb64a15a4e55bc4848484604051602401610bf293929190611f17565b60200190565b6040805160e081018252600080825260208201529081016116416116dd565b81526020016060815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200160008152602001600081525090565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b803561023281612205565b600082601f83011261178d578081fd5b81356117a061179b82612173565b61214c565b818152915060208083019084810160005b848110156117da576117c8888484358a01016117e5565b845292820192908201906001016117b1565b505050505092915050565b600082601f8301126117f5578081fd5b813561180361179b82612193565b915080825283602082850101111561181a57600080fd5b8060208401602084013760009082016020015292915050565b6000610140808385031215611846578182fd5b61184f8161214c565b91505061185c8383611772565b815261186b8360208401611772565b602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013567ffffffffffffffff8111156118b257600080fd5b6118be848285016117e5565b60c08301525060e082013560e08201526101006118dd84828501611772565b818301525061012080830135818301525092915050565b600060408284031215611905578081fd5b61190f604061214c565b9050815163ffffffff8116811461192557600080fd5b8152602082015167ffffffffffffffff81111561194157600080fd5b8201601f8101841361195257600080fd5b805161196061179b82612193565b81815285602083850101111561197557600080fd5b6119868260208301602086016121d5565b602084015250909392505050565b6000806000606084860312156119a8578283fd5b83356119b381612205565b9250602084013567ffffffffffffffff808211156119cf578384fd5b6119db87838801611833565b935060408601359150808211156119f0578283fd5b506119fd868287016117e5565b9150509250925092565b60008060408385031215611a19578182fd5b823567ffffffffffffffff80821115611a30578384fd5b818501915085601f830112611a43578384fd5b8135611a5161179b82612173565b81815260208082019190858101885b85811015611a8957611a778c8484358b0101611833565b85529382019390820190600101611a60565b50919750880135945050505080821115611aa1578283fd5b50611aae8582860161177d565b9150509250929050565b600060208284031215611ac9578081fd5b5035919050565b60006020808385031215611ae2578182fd5b825167ffffffffffffffff80821115611af9578384fd5b9084019060a08287031215611b0c578384fd5b611b1660a061214c565b8251611b2181612205565b815282840151611b3081612205565b8085830152506040830151604082015260608301516060820152608083015182811115611b5b578586fd5b80840193505086601f840112611b6f578485fd5b82519150611b7f61179b83612173565b82815284810190848601875b85811015611bb457611ba28b8984518a01016118f4565b84529287019290870190600101611b8b565b50506080830152509695505050505050565b600060208284031215611bd7578081fd5b813567ffffffffffffffff811115611bed578182fd5b611bf984828501611833565b949350505050565b60008060408385031215611c13578182fd5b823567ffffffffffffffff80821115611c2a578384fd5b611c3686838701611833565b93506020850135915080821115611c4b578283fd5b50611aae858286016117e5565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208085019450848183028601828601855b85811015611ccf5783830389528151805163ffffffff1684528501516040868501819052611cbb81860183611cdc565b9a87019a9450505090840190600101611c8b565b5090979650505050505050565b60008151808452611cf48160208601602086016121d5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251611d388184602087016121d5565b9190910192915050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015611e0a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611df8858351611cdc565b94509285019290850190600101611dbe565b5092979650505050505050565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b9a8b5273ffffffffffffffffffffffffffffffffffffffff998a1660208c015297891660408b015260608a0196909652608089019490945260a088019290925260c087015260e08601526101008501529091166101208301526101408201526101600190565b600084825273ffffffffffffffffffffffffffffffffffffffff84166020830152606060408301526110d06060830184611cdc565b9182527fffffffff0000000000000000000000000000000000000000000000000000000016602082015260400190565b600084825260606020830152611f306060830185611cdc565b8281036040840152611f428185611cdc565b9695505050505050565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b7fffffffff00000000000000000000000000000000000000000000000000000000929092168252602082015260400190565b6000602082526106b76020830184611cdc565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b606081016008851061208a57fe5b938152602081019290925260409091015290565b6000602082526120b2602083018451611c58565b60208301516120c46040840182611c58565b5060408301516120d76060840182611c58565b5060608301516080830152608083015160a083015260a08301516101008060c0850152612108610120850183611c72565b915060c085015160e085015260e08501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08584030182860152611f428382611cdc565b60405181810167ffffffffffffffff8111828210171561216b57600080fd5b604052919050565b600067ffffffffffffffff821115612189578081fd5b5060209081020190565b600067ffffffffffffffff8211156121a9578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110156121f05781810151838201526020016121d8565b838111156121ff576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610ea057600080fdfea2646970667358221220df036675a23c35f5bf10eadb3212d6e74e46859ef0122b97414a3ad56b2aadc164736f6c634300060c0033",
                "opcodes": "PUSH2 0x100 PUSH1 0x40 MSTORE PUSH3 0x14 PUSH1 0x1 PUSH1 0x0 DUP1 PUSH3 0x116 JUMP JUMPDEST PUSH1 0xC0 MSTORE PUSH32 0xE866282978E74DC892EFA3621DF30A058CA4D374A338824C0B89F1DFDCB0EA04 PUSH1 0xE0 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2444 CODESIZE SUB DUP1 PUSH3 0x2444 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x6B SWAP2 PUSH3 0x148 JUMP JUMPDEST ADDRESS PUSH1 0x60 SHL PUSH1 0x80 MSTORE PUSH1 0x40 MLOAD DUP2 SWAP1 CHAINID SWAP1 PUSH3 0xF1 SWAP1 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F SWAP1 PUSH32 0x9E5DAE0ADDAF20578AEB5D70341D092B53B4E14480AC5726438FD436DF7BA427 SWAP1 PUSH32 0x6C015BD22B4C69690933C1058878EBDFEF31F9AAAE40BBE86D8A09FE1B2972C SWAP1 DUP6 SWAP1 DUP8 SWAP1 PUSH1 0x20 ADD PUSH3 0x178 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0xA0 MSTORE POP PUSH3 0x1A4 SWAP2 POP POP JUMP JUMPDEST PUSH12 0xFFFFFFFF0000000000000000 PUSH1 0x40 DUP5 SWAP1 SHL AND PUSH8 0xFFFFFFFF00000000 PUSH1 0x20 DUP5 SWAP1 SHL AND OR PUSH4 0xFFFFFFFF DUP3 AND OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x15A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x171 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x225D PUSH3 0x1E7 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x5BD MSTORE DUP1 PUSH2 0x64E MSTORE POP DUP1 PUSH2 0x202 MSTORE POP DUP1 PUSH2 0x672 MSTORE DUP1 PUSH2 0xAB2 MSTORE POP DUP1 PUSH2 0xA51 MSTORE POP PUSH2 0x225D PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBC JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8FD3AB80 GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xD036092D GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xD036092D EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0xDAB400F3 EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0xE4263936 EQ PUSH2 0x1ED JUMPI PUSH2 0xBC JUMP JUMPDEST DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x9B051818 EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0xAE550497 EQ PUSH2 0x1A3 JUMPI PUSH2 0xBC JUMP JUMPDEST DUP1 PUSH4 0x6AE4B4F7 GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0x6AE4B4F7 EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x72D17D03 EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0x769250EA EQ PUSH2 0x14E JUMPI PUSH2 0xBC JUMP JUMPDEST DUP1 PUSH4 0x31B905C EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x3FB2DA38 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x200 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x1E17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x107 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BC6 JUMP JUMPDEST PUSH2 0x224 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x118 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH2 0x238 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x2032 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x149 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AB8 JUMP JUMPDEST PUSH2 0x271 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x15C CALLDATASIZE PUSH1 0x4 PUSH2 0x1A07 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x1D99 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x183 PUSH2 0x417 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x1F8B JUMP JUMPDEST PUSH2 0x121 PUSH2 0x19E CALLDATASIZE PUSH1 0x4 PUSH2 0x1C01 JUMP JUMPDEST PUSH2 0x534 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x1BE CALLDATASIZE PUSH1 0x4 PUSH2 0x1BC6 JUMP JUMPDEST PUSH2 0x5B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x64C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x670 JUMP JUMPDEST PUSH2 0x121 PUSH2 0x1FB CALLDATASIZE PUSH1 0x4 PUSH2 0x1994 JUMP JUMPDEST PUSH2 0x694 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x232 PUSH2 0x149 DUP4 PUSH2 0x5B6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x10 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D6574615472616E73616374696F6E7300000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27B PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 MSTORE POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x0 PUSH2 0x29A PUSH2 0x6CB JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP DUP3 DUP2 AND ISZERO PUSH2 0x2FC JUMPI PUSH2 0x2FC PUSH2 0x2F7 PUSH2 0x2F1 PUSH1 0x0 DUP1 CALLDATASIZE DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP4 SWAP3 POP POP PUSH2 0x6D8 SWAP1 POP JUMP JUMPDEST DUP6 PUSH2 0x724 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST DUP3 OR DUP2 SSTORE DUP4 MLOAD DUP6 MLOAD EQ PUSH2 0x318 JUMPI PUSH2 0x318 PUSH2 0x2F7 DUP7 MLOAD DUP7 MLOAD PUSH2 0x7E7 JUMP JUMPDEST DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x330 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x364 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x34F JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x3C3 JUMPI PUSH2 0x3A4 CALLER DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x383 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x397 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x81D JUMP JUMPDEST DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3B0 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x36A JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x3D0 CALLVALUE SELFBALANCE PUSH2 0xA05 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x407 JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x405 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST POP DUP1 SLOAD SWAP2 NOT SWAP1 SWAP2 AND SWAP1 SSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x442 PUSH32 0x9B05181800000000000000000000000000000000000000000000000000000000 PUSH2 0xA1B JUMP JUMPDEST PUSH2 0x46B PUSH32 0x769250EA00000000000000000000000000000000000000000000000000000000 PUSH2 0xA1B JUMP JUMPDEST PUSH2 0x494 PUSH32 0xE426393600000000000000000000000000000000000000000000000000000000 PUSH2 0xA1B JUMP JUMPDEST PUSH2 0x4BD PUSH32 0x3FB2DA3800000000000000000000000000000000000000000000000000000000 PUSH2 0xA1B JUMP JUMPDEST PUSH2 0x4E6 PUSH32 0x72D17D0300000000000000000000000000000000000000000000000000000000 PUSH2 0xA1B JUMP JUMPDEST PUSH2 0x50F PUSH32 0xAE55049700000000000000000000000000000000000000000000000000000000 PUSH2 0xA1B JUMP JUMPDEST POP PUSH32 0x2C64C5EF00000000000000000000000000000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x0 PUSH2 0x542 PUSH2 0x6CB JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP DUP3 DUP2 AND ISZERO PUSH2 0x599 JUMPI PUSH2 0x599 PUSH2 0x2F7 PUSH2 0x2F1 PUSH1 0x0 DUP1 CALLDATASIZE DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP4 SWAP3 POP POP PUSH2 0x6D8 SWAP1 POP JUMP JUMPDEST DUP3 OR DUP2 SSTORE PUSH2 0x5A8 CALLER DUP7 DUP7 PUSH2 0x81D JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH2 0x3D0 CALLVALUE SELFBALANCE PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x232 PUSH32 0x0 DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD DUP9 PUSH1 0xA0 ADD MLOAD DUP10 PUSH1 0xC0 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP11 PUSH1 0xE0 ADD MLOAD DUP12 PUSH2 0x100 ADD MLOAD DUP13 PUSH2 0x120 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x631 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E4C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0xAAE JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x60 CALLER ADDRESS EQ PUSH2 0x6A9 JUMPI PUSH2 0x6A9 PUSH2 0x2F7 CALLER PUSH2 0xB00 JUMP JUMPDEST PUSH2 0x6B4 DUP5 DUP5 DUP5 PUSH2 0x81D JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x232 PUSH1 0x5 PUSH2 0xBB8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x232 PUSH1 0x6 PUSH2 0xBB8 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0x6F9 JUMPI PUSH2 0x6F9 PUSH2 0x2F7 PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0xBD3 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xC7A7103E21E41A5C3158B3028D34CB9BB9593B10B1892F49D7187EFA71219D4E DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x75A SWAP3 SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH32 0x52974C3A86E985173F72E2FB84BA2BFCA8FB3B7C5031EB8077EBD59458ABF2A4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x75A SWAP3 SWAP2 SWAP1 PUSH2 0x1F4C JUMP JUMPDEST PUSH1 0x60 PUSH2 0x827 PUSH2 0x1622 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP2 MSTORE PUSH2 0x849 DUP5 PUSH2 0x5B6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH2 0x865 DUP2 PUSH2 0xC78 JUMP JUMPDEST NUMBER PUSH2 0x86E PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x120 DUP5 ADD MLOAD ISZERO PUSH2 0x90D JUMPI PUSH2 0x100 DUP5 ADD MLOAD DUP5 MLOAD PUSH2 0x120 DUP7 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x89DD02E700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP4 PUSH4 0x89DD02E7 SWAP4 PUSH2 0x8DA SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP12 SWAP2 PUSH1 0x4 ADD PUSH2 0x2045 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x908 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0xC0 DUP5 ADD MLOAD PUSH2 0x91D SWAP1 PUSH1 0x0 PUSH2 0x6D8 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH32 0x415565B000000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x97D JUMPI PUSH2 0x976 DUP2 PUSH2 0xEA3 JUMP JUMPDEST SWAP2 POP PUSH2 0x992 JUMP JUMPDEST PUSH2 0x992 PUSH2 0x2F7 DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x80 ADD MLOAD PUSH2 0x10D9 JUMP JUMPDEST DUP1 PUSH1 0x80 ADD MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH32 0x7F4FE3FF8AE440E1570C558DA08440B26F89FB1C1F2910CD91CA6452955F121A DUP3 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x9F5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xA14 JUMPI DUP2 PUSH2 0x6B7 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x6EB224CB SWAP1 PUSH2 0xA79 SWAP1 DUP5 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FB8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xAA7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xAE3 SWAP3 SWAP2 SWAP1 PUSH2 0x1D42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0xF0EC779B0BCDA6D84ABF99EE2C67647D1100EBBB553A9C2D1C2BA1579592832C DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xB34 SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xBC8 JUMPI INVALID JUMPDEST PUSH1 0x1 ADD SWAP1 SHL SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xBF2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x207C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0xCDD JUMPI POP DUP1 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xD00 JUMPI PUSH2 0xD00 PUSH2 0x2F7 DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x110F JUMP JUMPDEST TIMESTAMP DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x80 ADD MLOAD GT PUSH2 0xD29 JUMPI PUSH2 0xD29 PUSH2 0x2F7 DUP3 PUSH1 0x20 ADD MLOAD TIMESTAMP DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH2 0x1147 JUMP JUMPDEST GASPRICE DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x40 ADD MLOAD GT DUP1 PUSH2 0xD46 JUMPI POP GASPRICE DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD LT JUMPDEST ISZERO PUSH2 0xD6E JUMPI PUSH2 0xD6E PUSH2 0x2F7 DUP3 PUSH1 0x20 ADD MLOAD GASPRICE DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x117F JUMP JUMPDEST SELFBALANCE PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0xE0 ADD MLOAD GT ISZERO PUSH2 0xDA3 JUMPI PUSH2 0xDA3 PUSH2 0x2F7 DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0xA0 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH2 0x1240 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 DUP1 DUP4 ADD MLOAD MLOAD PUSH1 0x60 DUP5 ADD MLOAD SWAP2 MLOAD PUSH32 0xF68FD38D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP4 PUSH4 0xF68FD38D SWAP4 PUSH2 0xDEF SWAP4 SWAP2 SWAP3 PUSH1 0x4 ADD PUSH2 0x1EB2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xE18 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0xE64 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xE46 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE4B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0xE62 PUSH2 0x2F7 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD DUP5 PUSH2 0x1278 JUMP JUMPDEST POP JUMPDEST PUSH2 0xE6C PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xC0 DUP3 ADD DUP2 SWAP1 MSTORE ISZERO PUSH2 0xEA0 JUMPI PUSH2 0xEA0 PUSH2 0x2F7 DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0xC0 ADD MLOAD PUSH2 0x12B0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xEAD PUSH2 0x1682 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0xC0 ADD MLOAD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1C ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xED3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xEFE JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0xC0 ADD MLOAD SWAP1 POP PUSH1 0xA0 DUP2 MLOAD LT ISZERO PUSH2 0xF1A JUMPI INVALID JUMPDEST PUSH1 0x20 DUP3 DUP2 ADD MSTORE DUP1 MLOAD PUSH1 0x24 DUP3 ADD SWAP1 PUSH1 0x40 DUP5 ADD SWAP1 PUSH2 0xF5B SWAP1 DUP3 SWAP1 DUP5 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC ADD PUSH2 0x12E6 JUMP JUMPDEST DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xF6F SWAP2 SWAP1 PUSH2 0x1AD0 JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH1 0x0 PUSH1 0x60 PUSH2 0xF8A DUP6 PUSH1 0x40 ADD MLOAD PUSH1 0xC0 ADD MLOAD PUSH2 0x13C7 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x10D0 DUP6 PUSH1 0x20 ADD MLOAD PUSH4 0xC853C969 PUSH1 0xE0 SHL PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x40 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x80 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1046 SWAP2 SWAP1 PUSH2 0x209E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 DUP9 ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH2 0x14C1 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x547A32A328D8A78DBE9BF090FA60BA3D4D1C6833A592A2C942666CE3249C1210 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x75A SWAP3 SWAP2 SWAP1 PUSH2 0x1EE7 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xA78002A166FCAE5236D89E3FF35C53DADB775F7818DE4A020714CBA4BF360822 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xBF2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xBEA726EFDF9868BBC5755DCE9F13D585B3CF731177BE75300D15BB8F5E286158 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xBF2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F5A JUMP JUMPDEST PUSH1 0x60 PUSH32 0x6FEC11A99EBB0FF14B6648F609F57864DADEBA8B29869C4DF2B3B76894147849 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x11B9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F70 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0xA5ADE45208123132815E1591A1C7E64045FD006152F5E85D100AEE42BA02C75 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xBF2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F5A JUMP JUMPDEST PUSH1 0x60 PUSH32 0x6B99CF1D367DBDBC495802261A500BF6E1319CFA7ECAA23AE929F5CD4C70795 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xBF2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F17 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xFE251A07F3CBFFD23C1C1DB9EC776D259099C832333D99EF48CACFA93A4D7B32 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x75A SWAP3 SWAP2 SWAP1 PUSH2 0x1F4C JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x132D JUMPI DUP2 MLOAD DUP4 MLOAD PUSH1 0x20 DUP4 SWAP1 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR DUP4 MSTORE PUSH2 0x13C2 JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0x133A JUMPI PUSH2 0x13C2 JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x1374 JUMPI PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP2 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x136C JUMPI DUP5 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP5 ADD SWAP4 PUSH2 0x1351 JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x13C2 JUMP JUMPDEST PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP4 MLOAD JUMPDEST DUP2 DUP7 SLT ISZERO PUSH2 0x13BD JUMPI DUP3 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1383 JUMP JUMPDEST DUP6 MSTORE POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x46 DUP4 MLOAD LT DUP1 PUSH2 0x144B JUMPI POP DUP3 MLOAD PUSH2 0x1405 SWAP1 DUP5 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBA ADD PUSH2 0x6D8 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xF86D1D9200000000000000000000000000000000000000000000000000000000 EQ ISZERO JUMPDEST ISZERO PUSH2 0x145E JUMPI DUP3 MLOAD PUSH1 0x20 DUP5 ADD KECCAK256 SWAP2 POP PUSH2 0x14BC JUMP JUMPDEST DUP3 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBA DUP2 ADD PUSH1 0x20 DUP6 ADD KECCAK256 SWAP3 POP PUSH2 0x14B9 SWAP1 DUP5 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBE DUP2 ADD SWAP1 PUSH2 0x154D JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP6 PUSH1 0x40 MLOAD PUSH2 0x14EB SWAP2 SWAP1 PUSH2 0x1D26 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1528 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x152D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP3 POP SWAP1 POP DUP1 PUSH2 0x1545 JUMPI PUSH2 0x1545 PUSH2 0x2F7 DUP7 DUP7 DUP6 PUSH2 0x15E4 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 DUP4 GT ISZERO PUSH2 0x1566 JUMPI PUSH2 0x1566 PUSH2 0x2F7 PUSH1 0x0 DUP6 DUP6 PUSH2 0xBD3 JUMP JUMPDEST DUP4 MLOAD DUP3 GT ISZERO PUSH2 0x157F JUMPI PUSH2 0x157F PUSH2 0x2F7 PUSH1 0x1 DUP5 DUP8 MLOAD PUSH2 0xBD3 JUMP JUMPDEST DUP3 DUP3 SUB PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1598 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x15C3 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x6B7 PUSH2 0x15D2 DUP3 PUSH2 0x161C JUMP JUMPDEST DUP5 PUSH2 0x15DC DUP8 PUSH2 0x161C JUMP JUMPDEST ADD DUP4 MLOAD PUSH2 0x12E6 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xA9F0C547643C02AFED4CF2699E794BC383EFFCA840EED62FDDB64A15A4E55BC4 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xBF2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F17 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD PUSH2 0x1641 PUSH2 0x16DD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x232 DUP2 PUSH2 0x2205 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x178D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x17A0 PUSH2 0x179B DUP3 PUSH2 0x2173 JUMP JUMPDEST PUSH2 0x214C JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x17DA JUMPI PUSH2 0x17C8 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x17E5 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x17B1 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x17F5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1803 PUSH2 0x179B DUP3 PUSH2 0x2193 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x181A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1846 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x184F DUP2 PUSH2 0x214C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x185C DUP4 DUP4 PUSH2 0x1772 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x186B DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x1772 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18BE DUP5 DUP3 DUP6 ADD PUSH2 0x17E5 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x18DD DUP5 DUP3 DUP6 ADD PUSH2 0x1772 JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1905 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x190F PUSH1 0x40 PUSH2 0x214C JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1925 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1941 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x1952 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1960 PUSH2 0x179B DUP3 PUSH2 0x2193 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x1975 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1986 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x21D5 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x19A8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x19B3 DUP2 PUSH2 0x2205 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x19CF JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x19DB DUP8 DUP4 DUP9 ADD PUSH2 0x1833 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x19F0 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x19FD DUP7 DUP3 DUP8 ADD PUSH2 0x17E5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A19 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1A30 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A43 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1A51 PUSH2 0x179B DUP3 PUSH2 0x2173 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP6 DUP2 ADD DUP9 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x1A89 JUMPI PUSH2 0x1A77 DUP13 DUP5 DUP5 CALLDATALOAD DUP12 ADD ADD PUSH2 0x1833 JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1A60 JUMP JUMPDEST POP SWAP2 SWAP8 POP DUP9 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x1AA1 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x1AAE DUP6 DUP3 DUP7 ADD PUSH2 0x177D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AC9 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1AE2 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1AF9 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0xA0 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x1B0C JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1B16 PUSH1 0xA0 PUSH2 0x214C JUMP JUMPDEST DUP3 MLOAD PUSH2 0x1B21 DUP2 PUSH2 0x2205 JUMP JUMPDEST DUP2 MSTORE DUP3 DUP5 ADD MLOAD PUSH2 0x1B30 DUP2 PUSH2 0x2205 JUMP JUMPDEST DUP1 DUP6 DUP4 ADD MSTORE POP PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x1B5B JUMPI DUP6 DUP7 REVERT JUMPDEST DUP1 DUP5 ADD SWAP4 POP POP DUP7 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1B6F JUMPI DUP5 DUP6 REVERT JUMPDEST DUP3 MLOAD SWAP2 POP PUSH2 0x1B7F PUSH2 0x179B DUP4 PUSH2 0x2173 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP8 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x1BB4 JUMPI PUSH2 0x1BA2 DUP12 DUP10 DUP5 MLOAD DUP11 ADD ADD PUSH2 0x18F4 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP8 ADD SWAP3 SWAP1 DUP8 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1B8B JUMP JUMPDEST POP POP PUSH1 0x80 DUP4 ADD MSTORE POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BD7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1BED JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1BF9 DUP5 DUP3 DUP6 ADD PUSH2 0x1833 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C13 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1C2A JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1C36 DUP7 DUP4 DUP8 ADD PUSH2 0x1833 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1C4B JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x1AAE DUP6 DUP3 DUP7 ADD PUSH2 0x17E5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP5 DUP2 DUP4 MUL DUP7 ADD DUP3 DUP7 ADD DUP6 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x1CCF JUMPI DUP4 DUP4 SUB DUP10 MSTORE DUP2 MLOAD DUP1 MLOAD PUSH4 0xFFFFFFFF AND DUP5 MSTORE DUP6 ADD MLOAD PUSH1 0x40 DUP7 DUP6 ADD DUP2 SWAP1 MSTORE PUSH2 0x1CBB DUP2 DUP7 ADD DUP4 PUSH2 0x1CDC JUMP JUMPDEST SWAP11 DUP8 ADD SWAP11 SWAP5 POP POP POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1C8B JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1CF4 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x21D5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1D38 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x21D5 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1E0A JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x1DF8 DUP6 DUP4 MLOAD PUSH2 0x1CDC JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1DBE JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP11 DUP12 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP10 DUP11 AND PUSH1 0x20 DUP13 ADD MSTORE SWAP8 DUP10 AND PUSH1 0x40 DUP12 ADD MSTORE PUSH1 0x60 DUP11 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x80 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xA0 DUP9 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xC0 DUP8 ADD MSTORE PUSH1 0xE0 DUP7 ADD MSTORE PUSH2 0x100 DUP6 ADD MSTORE SWAP1 SWAP2 AND PUSH2 0x120 DUP4 ADD MSTORE PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x10D0 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1CDC JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1F30 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1CDC JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1F42 DUP2 DUP6 PUSH2 0x1CDC JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x6B7 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1CDC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x208A JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x20B2 PUSH1 0x20 DUP4 ADD DUP5 MLOAD PUSH2 0x1C58 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x20C4 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x1C58 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x20D7 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x1C58 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x100 DUP1 PUSH1 0xC0 DUP6 ADD MSTORE PUSH2 0x2108 PUSH2 0x120 DUP6 ADD DUP4 PUSH2 0x1C72 JUMP JUMPDEST SWAP2 POP PUSH1 0xC0 DUP6 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH1 0xE0 DUP6 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP6 DUP5 SUB ADD DUP3 DUP7 ADD MSTORE PUSH2 0x1F42 DUP4 DUP3 PUSH2 0x1CDC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x216B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2189 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x21A9 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x21F0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x21D8 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x21FF JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xEA0 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF SUB PUSH7 0x75A23C35F5BF10 0xEA 0xDB ORIGIN SLT 0xD6 0xE7 0x4E CHAINID DUP6 SWAP15 CREATE SLT 0x2B SWAP8 COINBASE 0x4A GASPRICE 0xD5 PUSH12 0x2AADC164736F6C634300060C STOP CALLER ",
                "sourceMap": "1369:16412:28:-:0;;;2839:23;2854:1;2857;;2839:14;:23::i;:::-;2787:75;;2981:385;2934:432;;3704:171;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1859:4:36;1833:31;;;;1247:487:37;;3796:13:28;;1170:9:37;;1247:487;;1279:292;;1593:19;;1634:18;;1170:9;;3796:13:28;;1247:487:37;;;:::i;:::-;;;;-1:-1:-1;;1247:487:37;;;;;;;;;1220:528;;1247:487;1220:528;;;;1194:554;;-1:-1:-1;1369:16412:28;;-1:-1:-1;;1369:16412:28;2611:235:36;2773:20;2791:2;2773:20;;;;2798;2816:2;2798:20;;;;2772:47;2822:17;;;2772:67;2611:235;;;;;:::o;146:263:-1:-;;261:2;249:9;240:7;236:23;232:32;229:2;;;-1:-1;;267:12;229:2;83:13;;-1:-1;;;;;1690:54;;1894:35;;1884:2;;-1:-1;;1933:12;1884:2;319:74;223:186;-1:-1;;;223:186::o;776:668::-;607:37;;;1180:2;1165:18;;607:37;;;;1263:2;1248:18;;607:37;;;;1346:2;1331:18;;607:37;-1:-1;;;;;1690:54;1429:3;1414:19;;487:37;1015:3;1000:19;;986:458::o;:::-;1369:16412:28;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "2515": [
                        {
                            "length": 32,
                            "start": 514
                        }
                    ],
                    "2521": [
                        {
                            "length": 32,
                            "start": 1469
                        },
                        {
                            "length": 32,
                            "start": 1614
                        }
                    ],
                    "5430": [
                        {
                            "length": 32,
                            "start": 2641
                        }
                    ],
                    "5560": [
                        {
                            "length": 32,
                            "start": 1650
                        },
                        {
                            "length": 32,
                            "start": 2738
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x6080604052600436106100bc5760003560e01c80638fd3ab8011610074578063d036092d1161004e578063d036092d146101c3578063dab400f3146101d8578063e4263936146101ed576100bc565b80638fd3ab801461016e5780639b05181814610190578063ae550497146101a3576100bc565b80636ae4b4f7116100a55780636ae4b4f71461010c57806372d17d031461012e578063769250ea1461014e576100bc565b8063031b905c146100c15780633fb2da38146100ec575b600080fd5b3480156100cd57600080fd5b506100d6610200565b6040516100e39190611e17565b60405180910390f35b3480156100f857600080fd5b506100d6610107366004611bc6565b610224565b34801561011857600080fd5b50610121610238565b6040516100e39190612032565b34801561013a57600080fd5b506100d6610149366004611ab8565b610271565b61016161015c366004611a07565b61028c565b6040516100e39190611d99565b34801561017a57600080fd5b50610183610417565b6040516100e39190611f8b565b61012161019e366004611c01565b610534565b3480156101af57600080fd5b506100d66101be366004611bc6565b6105b6565b3480156101cf57600080fd5b506100d661064c565b3480156101e457600080fd5b506100d6610670565b6101216101fb366004611994565b610694565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610232610149836105b6565b92915050565b6040518060400160405280601081526020017f4d6574615472616e73616374696f6e730000000000000000000000000000000081525081565b600061027b6106be565b600092835260205250604090205490565b60606001600061029a6106cb565b8054909150828116156102fc576102fc6102f76102f1600080368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506106d89050565b85610724565b6107df565b821781558351855114610318576103186102f7865186516107e7565b845167ffffffffffffffff8111801561033057600080fd5b5060405190808252806020026020018201604052801561036457816020015b606081526020019060019003908161034f5790505b50925060005b85518110156103c3576103a43387838151811061038357fe5b602002602001015187848151811061039757fe5b602002602001015161081d565b8482815181106103b057fe5b602090810291909101015260010161036a565b5060006103d03447610a05565b9050801561040757604051339082156108fc029083906000818181858888f19350505050158015610405573d6000803e3d6000fd5b505b5080549119909116905592915050565b60006104427f9b05181800000000000000000000000000000000000000000000000000000000610a1b565b61046b7f769250ea00000000000000000000000000000000000000000000000000000000610a1b565b6104947fe426393600000000000000000000000000000000000000000000000000000000610a1b565b6104bd7f3fb2da3800000000000000000000000000000000000000000000000000000000610a1b565b6104e67f72d17d0300000000000000000000000000000000000000000000000000000000610a1b565b61050f7fae55049700000000000000000000000000000000000000000000000000000000610a1b565b507f2c64c5ef0000000000000000000000000000000000000000000000000000000090565b6060600160006105426106cb565b805490915082811615610599576105996102f76102f1600080368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506106d89050565b821781556105a833868661081d565b925060006103d03447610a05565b60006102327f0000000000000000000000000000000000000000000000000000000000000000836000015184602001518560400151866060015187608001518860a001518960c00151805190602001208a60e001518b61010001518c61012001516040516020016106319b9a99989796959493929190611e4c565b60405160208183030381529060405280519060200120610aae565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60603330146106a9576106a96102f733610b00565b6106b484848461081d565b90505b9392505050565b6000806102326005610bb8565b6000806102326006610bb8565b600081600401835110156106f9576106f96102f76003855185600401610bd3565b5001602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b60607fc7a7103e21e41a5c3158b3028d34cb9bb9593b10b1892f49d7187efa71219d4e838360405160240161075a929190612000565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b805160208201fd5b60607f52974c3a86e985173f72e2fb84ba2bfca8fb3b7c5031eb8077ebd59458abf2a4838360405160240161075a929190611f4c565b6060610827611622565b73ffffffffffffffffffffffffffffffffffffffff85168152610849846105b6565b6020820152604081018490526060810183905261086581610c78565b4361086e6106be565b602080840151600090815291905260409020556101208401511561090d5761010084015184516101208601516040517f89dd02e700000000000000000000000000000000000000000000000000000000815230936389dd02e7936108da93919290918b91600401612045565b600060405180830381600087803b1580156108f457600080fd5b505af1158015610908573d6000803e3d6000fd5b505050505b60c084015161091d9060006106d8565b7fffffffff0000000000000000000000000000000000000000000000000000000016608082018190527f415565b000000000000000000000000000000000000000000000000000000000141561097d5761097681610ea3565b9150610992565b6109926102f7826020015183608001516110d9565b80608001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f7f4fe3ff8ae440e1570c558da08440b26f89fb1c1f2910cd91ca6452955f121a8260200151866000015187602001516040516109f593929190611e20565b60405180910390a2509392505050565b6000818310610a1457816106b7565b5090919050565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081523090636eb224cb90610a799084907f000000000000000000000000000000000000000000000000000000000000000090600401611fb8565b600060405180830381600087803b158015610a9357600080fd5b505af1158015610aa7573d6000803e3d6000fd5b5050505050565b60007f000000000000000000000000000000000000000000000000000000000000000082604051602001610ae3929190611d42565b604051602081830303815290604052805190602001209050919050565b60607ff0ec779b0bcda6d84abf99ee2c67647d1100ebbb553a9c2d1c2ba1579592832c82604051602401610b349190611d78565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050919050565b60006080826007811115610bc857fe5b600101901b92915050565b6060632800659560e01b848484604051602401610bf29392919061207c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b60408101516020015173ffffffffffffffffffffffffffffffffffffffff1615801590610cdd5750806000015173ffffffffffffffffffffffffffffffffffffffff1681604001516020015173ffffffffffffffffffffffffffffffffffffffff1614155b15610d0057610d006102f78260200151836000015184604001516020015161110f565b4281604001516080015111610d2957610d296102f7826020015142846040015160800151611147565b3a8160400151604001511180610d4657503a816040015160600151105b15610d6e57610d6e6102f782602001513a84604001516040015185604001516060015161117f565b4760a08201819052604082015160e001511115610da357610da36102f782602001518360a00151846040015160e00151611240565b602081015160408083015151606084015191517ff68fd38d000000000000000000000000000000000000000000000000000000008152309363f68fd38d93610def939192600401611eb2565b60006040518083038186803b158015610e0757600080fd5b505afa925050508015610e18575060015b610e64573d808015610e46576040519150601f19603f3d011682016040523d82523d6000602084013e610e4b565b606091505b50610e626102f78360200151846060015184611278565b505b610e6c6106be565b6020808301516000908152919052604090205460c0820181905215610ea057610ea06102f782602001518360c001516112b0565b50565b6060610ead611682565b604083015160c0015151606090601c0167ffffffffffffffff81118015610ed357600080fd5b506040519080825280601f01601f191660200182016040528015610efe576020820181803683370190505b5090506060846040015160c00151905060a081511015610f1a57fe5b602082810152805160248201906040840190610f5b90829084907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc016112e6565b83806020019051810190610f6f9190611ad0565b94505050505060006060610f8a856040015160c001516113c7565b915091506110d0856020015163c853c96960e01b60405180610100016040528089604001516000015173ffffffffffffffffffffffffffffffffffffffff168152602001876000015173ffffffffffffffffffffffffffffffffffffffff168152602001876020015173ffffffffffffffffffffffffffffffffffffffff16815260200187604001518152602001876060015181526020018760800151815260200186815260200185815250604051602401611046919061209e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529088015160e001516114c1565b95945050505050565b60607f547a32a328d8a78dbe9bf090fa60ba3d4d1c6833a592a2c942666ce3249c1210838360405160240161075a929190611ee7565b60607fa78002a166fcae5236d89e3ff35c53dadb775f7818de4a020714cba4bf360822848484604051602401610bf293929190611e20565b60607fbea726efdf9868bbc5755dce9f13d585b3cf731177be75300d15bb8f5e286158848484604051602401610bf293929190611f5a565b60607f6fec11a99ebb0ff14b6648f609f57864dadeba8b29869c4df2b3b76894147849858585856040516024016111b99493929190611f70565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050949350505050565b60607f0a5ade45208123132815e1591a1c7e64045fd006152f5e85d100aee42ba02c75848484604051602401610bf293929190611f5a565b60607f06b99cf1d367dbdbc495802261a500bf6e1319cfa7ecaa23ae929f5cd4c70795848484604051602401610bf293929190611f17565b60607ffe251a07f3cbffd23c1c1db9ec776d259099c832333d99ef48cacfa93a4d7b32838360405160240161075a929190611f4c565b602081101561132d578151835160208390036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01801990921691161783526113c2565b8282141561133a576113c2565b828211156113745760208103905080820181840181515b8285101561136c578451865260209586019590940193611351565b9052506113c2565b60208103905080820181840183515b818612156113bd57825182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09283019290910190611383565b855250505b505050565b6000606060468351108061144b575082516114059084907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffba016106d8565b7fffffffff00000000000000000000000000000000000000000000000000000000167ff86d1d920000000000000000000000000000000000000000000000000000000014155b1561145e578251602084012091506114bc565b82517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffba8101602085012092506114b99084907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbe81019061154d565b90505b915091565b606060003073ffffffffffffffffffffffffffffffffffffffff1683856040516114eb9190611d26565b60006040518083038185875af1925050503d8060008114611528576040519150601f19603f3d011682016040523d82523d6000602084013e61152d565b606091505b509250905080611545576115456102f78686856115e4565b509392505050565b606081831115611566576115666102f760008585610bd3565b835182111561157f5761157f6102f76001848751610bd3565b82820367ffffffffffffffff8111801561159857600080fd5b506040519080825280601f01601f1916602001820160405280156115c3576020820181803683370190505b5090506106b76115d28261161c565b846115dc8761161c565b0183516112e6565b60607fa9f0c547643c02afed4cf2699e794bc383effca840eed62fddb64a15a4e55bc4848484604051602401610bf293929190611f17565b60200190565b6040805160e081018252600080825260208201529081016116416116dd565b81526020016060815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200160008152602001600081525090565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b803561023281612205565b600082601f83011261178d578081fd5b81356117a061179b82612173565b61214c565b818152915060208083019084810160005b848110156117da576117c8888484358a01016117e5565b845292820192908201906001016117b1565b505050505092915050565b600082601f8301126117f5578081fd5b813561180361179b82612193565b915080825283602082850101111561181a57600080fd5b8060208401602084013760009082016020015292915050565b6000610140808385031215611846578182fd5b61184f8161214c565b91505061185c8383611772565b815261186b8360208401611772565b602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013567ffffffffffffffff8111156118b257600080fd5b6118be848285016117e5565b60c08301525060e082013560e08201526101006118dd84828501611772565b818301525061012080830135818301525092915050565b600060408284031215611905578081fd5b61190f604061214c565b9050815163ffffffff8116811461192557600080fd5b8152602082015167ffffffffffffffff81111561194157600080fd5b8201601f8101841361195257600080fd5b805161196061179b82612193565b81815285602083850101111561197557600080fd5b6119868260208301602086016121d5565b602084015250909392505050565b6000806000606084860312156119a8578283fd5b83356119b381612205565b9250602084013567ffffffffffffffff808211156119cf578384fd5b6119db87838801611833565b935060408601359150808211156119f0578283fd5b506119fd868287016117e5565b9150509250925092565b60008060408385031215611a19578182fd5b823567ffffffffffffffff80821115611a30578384fd5b818501915085601f830112611a43578384fd5b8135611a5161179b82612173565b81815260208082019190858101885b85811015611a8957611a778c8484358b0101611833565b85529382019390820190600101611a60565b50919750880135945050505080821115611aa1578283fd5b50611aae8582860161177d565b9150509250929050565b600060208284031215611ac9578081fd5b5035919050565b60006020808385031215611ae2578182fd5b825167ffffffffffffffff80821115611af9578384fd5b9084019060a08287031215611b0c578384fd5b611b1660a061214c565b8251611b2181612205565b815282840151611b3081612205565b8085830152506040830151604082015260608301516060820152608083015182811115611b5b578586fd5b80840193505086601f840112611b6f578485fd5b82519150611b7f61179b83612173565b82815284810190848601875b85811015611bb457611ba28b8984518a01016118f4565b84529287019290870190600101611b8b565b50506080830152509695505050505050565b600060208284031215611bd7578081fd5b813567ffffffffffffffff811115611bed578182fd5b611bf984828501611833565b949350505050565b60008060408385031215611c13578182fd5b823567ffffffffffffffff80821115611c2a578384fd5b611c3686838701611833565b93506020850135915080821115611c4b578283fd5b50611aae858286016117e5565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208085019450848183028601828601855b85811015611ccf5783830389528151805163ffffffff1684528501516040868501819052611cbb81860183611cdc565b9a87019a9450505090840190600101611c8b565b5090979650505050505050565b60008151808452611cf48160208601602086016121d5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251611d388184602087016121d5565b9190910192915050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015611e0a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611df8858351611cdc565b94509285019290850190600101611dbe565b5092979650505050505050565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b9a8b5273ffffffffffffffffffffffffffffffffffffffff998a1660208c015297891660408b015260608a0196909652608089019490945260a088019290925260c087015260e08601526101008501529091166101208301526101408201526101600190565b600084825273ffffffffffffffffffffffffffffffffffffffff84166020830152606060408301526110d06060830184611cdc565b9182527fffffffff0000000000000000000000000000000000000000000000000000000016602082015260400190565b600084825260606020830152611f306060830185611cdc565b8281036040840152611f428185611cdc565b9695505050505050565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b7fffffffff00000000000000000000000000000000000000000000000000000000929092168252602082015260400190565b6000602082526106b76020830184611cdc565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b606081016008851061208a57fe5b938152602081019290925260409091015290565b6000602082526120b2602083018451611c58565b60208301516120c46040840182611c58565b5060408301516120d76060840182611c58565b5060608301516080830152608083015160a083015260a08301516101008060c0850152612108610120850183611c72565b915060c085015160e085015260e08501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08584030182860152611f428382611cdc565b60405181810167ffffffffffffffff8111828210171561216b57600080fd5b604052919050565b600067ffffffffffffffff821115612189578081fd5b5060209081020190565b600067ffffffffffffffff8211156121a9578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110156121f05781810151838201526020016121d8565b838111156121ff576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610ea057600080fdfea2646970667358221220df036675a23c35f5bf10eadb3212d6e74e46859ef0122b97414a3ad56b2aadc164736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBC JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8FD3AB80 GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xD036092D GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xD036092D EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0xDAB400F3 EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0xE4263936 EQ PUSH2 0x1ED JUMPI PUSH2 0xBC JUMP JUMPDEST DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x9B051818 EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0xAE550497 EQ PUSH2 0x1A3 JUMPI PUSH2 0xBC JUMP JUMPDEST DUP1 PUSH4 0x6AE4B4F7 GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0x6AE4B4F7 EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x72D17D03 EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0x769250EA EQ PUSH2 0x14E JUMPI PUSH2 0xBC JUMP JUMPDEST DUP1 PUSH4 0x31B905C EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x3FB2DA38 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x200 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x1E17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x107 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BC6 JUMP JUMPDEST PUSH2 0x224 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x118 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH2 0x238 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x2032 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x149 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AB8 JUMP JUMPDEST PUSH2 0x271 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x15C CALLDATASIZE PUSH1 0x4 PUSH2 0x1A07 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x1D99 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x183 PUSH2 0x417 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x1F8B JUMP JUMPDEST PUSH2 0x121 PUSH2 0x19E CALLDATASIZE PUSH1 0x4 PUSH2 0x1C01 JUMP JUMPDEST PUSH2 0x534 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x1BE CALLDATASIZE PUSH1 0x4 PUSH2 0x1BC6 JUMP JUMPDEST PUSH2 0x5B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x64C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x670 JUMP JUMPDEST PUSH2 0x121 PUSH2 0x1FB CALLDATASIZE PUSH1 0x4 PUSH2 0x1994 JUMP JUMPDEST PUSH2 0x694 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x232 PUSH2 0x149 DUP4 PUSH2 0x5B6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x10 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D6574615472616E73616374696F6E7300000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27B PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 MSTORE POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x0 PUSH2 0x29A PUSH2 0x6CB JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP DUP3 DUP2 AND ISZERO PUSH2 0x2FC JUMPI PUSH2 0x2FC PUSH2 0x2F7 PUSH2 0x2F1 PUSH1 0x0 DUP1 CALLDATASIZE DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP4 SWAP3 POP POP PUSH2 0x6D8 SWAP1 POP JUMP JUMPDEST DUP6 PUSH2 0x724 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST DUP3 OR DUP2 SSTORE DUP4 MLOAD DUP6 MLOAD EQ PUSH2 0x318 JUMPI PUSH2 0x318 PUSH2 0x2F7 DUP7 MLOAD DUP7 MLOAD PUSH2 0x7E7 JUMP JUMPDEST DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x330 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x364 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x34F JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x3C3 JUMPI PUSH2 0x3A4 CALLER DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x383 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x397 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x81D JUMP JUMPDEST DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3B0 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x36A JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x3D0 CALLVALUE SELFBALANCE PUSH2 0xA05 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x407 JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x405 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST POP DUP1 SLOAD SWAP2 NOT SWAP1 SWAP2 AND SWAP1 SSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x442 PUSH32 0x9B05181800000000000000000000000000000000000000000000000000000000 PUSH2 0xA1B JUMP JUMPDEST PUSH2 0x46B PUSH32 0x769250EA00000000000000000000000000000000000000000000000000000000 PUSH2 0xA1B JUMP JUMPDEST PUSH2 0x494 PUSH32 0xE426393600000000000000000000000000000000000000000000000000000000 PUSH2 0xA1B JUMP JUMPDEST PUSH2 0x4BD PUSH32 0x3FB2DA3800000000000000000000000000000000000000000000000000000000 PUSH2 0xA1B JUMP JUMPDEST PUSH2 0x4E6 PUSH32 0x72D17D0300000000000000000000000000000000000000000000000000000000 PUSH2 0xA1B JUMP JUMPDEST PUSH2 0x50F PUSH32 0xAE55049700000000000000000000000000000000000000000000000000000000 PUSH2 0xA1B JUMP JUMPDEST POP PUSH32 0x2C64C5EF00000000000000000000000000000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x0 PUSH2 0x542 PUSH2 0x6CB JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP DUP3 DUP2 AND ISZERO PUSH2 0x599 JUMPI PUSH2 0x599 PUSH2 0x2F7 PUSH2 0x2F1 PUSH1 0x0 DUP1 CALLDATASIZE DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP4 SWAP3 POP POP PUSH2 0x6D8 SWAP1 POP JUMP JUMPDEST DUP3 OR DUP2 SSTORE PUSH2 0x5A8 CALLER DUP7 DUP7 PUSH2 0x81D JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH2 0x3D0 CALLVALUE SELFBALANCE PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x232 PUSH32 0x0 DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD DUP9 PUSH1 0xA0 ADD MLOAD DUP10 PUSH1 0xC0 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP11 PUSH1 0xE0 ADD MLOAD DUP12 PUSH2 0x100 ADD MLOAD DUP13 PUSH2 0x120 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x631 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E4C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0xAAE JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x60 CALLER ADDRESS EQ PUSH2 0x6A9 JUMPI PUSH2 0x6A9 PUSH2 0x2F7 CALLER PUSH2 0xB00 JUMP JUMPDEST PUSH2 0x6B4 DUP5 DUP5 DUP5 PUSH2 0x81D JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x232 PUSH1 0x5 PUSH2 0xBB8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x232 PUSH1 0x6 PUSH2 0xBB8 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0x6F9 JUMPI PUSH2 0x6F9 PUSH2 0x2F7 PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0xBD3 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xC7A7103E21E41A5C3158B3028D34CB9BB9593B10B1892F49D7187EFA71219D4E DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x75A SWAP3 SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH32 0x52974C3A86E985173F72E2FB84BA2BFCA8FB3B7C5031EB8077EBD59458ABF2A4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x75A SWAP3 SWAP2 SWAP1 PUSH2 0x1F4C JUMP JUMPDEST PUSH1 0x60 PUSH2 0x827 PUSH2 0x1622 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP2 MSTORE PUSH2 0x849 DUP5 PUSH2 0x5B6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH2 0x865 DUP2 PUSH2 0xC78 JUMP JUMPDEST NUMBER PUSH2 0x86E PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x120 DUP5 ADD MLOAD ISZERO PUSH2 0x90D JUMPI PUSH2 0x100 DUP5 ADD MLOAD DUP5 MLOAD PUSH2 0x120 DUP7 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x89DD02E700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP4 PUSH4 0x89DD02E7 SWAP4 PUSH2 0x8DA SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP12 SWAP2 PUSH1 0x4 ADD PUSH2 0x2045 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x908 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0xC0 DUP5 ADD MLOAD PUSH2 0x91D SWAP1 PUSH1 0x0 PUSH2 0x6D8 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH32 0x415565B000000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x97D JUMPI PUSH2 0x976 DUP2 PUSH2 0xEA3 JUMP JUMPDEST SWAP2 POP PUSH2 0x992 JUMP JUMPDEST PUSH2 0x992 PUSH2 0x2F7 DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x80 ADD MLOAD PUSH2 0x10D9 JUMP JUMPDEST DUP1 PUSH1 0x80 ADD MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH32 0x7F4FE3FF8AE440E1570C558DA08440B26F89FB1C1F2910CD91CA6452955F121A DUP3 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x9F5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xA14 JUMPI DUP2 PUSH2 0x6B7 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x6EB224CB SWAP1 PUSH2 0xA79 SWAP1 DUP5 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FB8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xAA7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xAE3 SWAP3 SWAP2 SWAP1 PUSH2 0x1D42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0xF0EC779B0BCDA6D84ABF99EE2C67647D1100EBBB553A9C2D1C2BA1579592832C DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xB34 SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xBC8 JUMPI INVALID JUMPDEST PUSH1 0x1 ADD SWAP1 SHL SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xBF2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x207C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0xCDD JUMPI POP DUP1 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xD00 JUMPI PUSH2 0xD00 PUSH2 0x2F7 DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x110F JUMP JUMPDEST TIMESTAMP DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x80 ADD MLOAD GT PUSH2 0xD29 JUMPI PUSH2 0xD29 PUSH2 0x2F7 DUP3 PUSH1 0x20 ADD MLOAD TIMESTAMP DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH2 0x1147 JUMP JUMPDEST GASPRICE DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x40 ADD MLOAD GT DUP1 PUSH2 0xD46 JUMPI POP GASPRICE DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD LT JUMPDEST ISZERO PUSH2 0xD6E JUMPI PUSH2 0xD6E PUSH2 0x2F7 DUP3 PUSH1 0x20 ADD MLOAD GASPRICE DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x117F JUMP JUMPDEST SELFBALANCE PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0xE0 ADD MLOAD GT ISZERO PUSH2 0xDA3 JUMPI PUSH2 0xDA3 PUSH2 0x2F7 DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0xA0 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH2 0x1240 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 DUP1 DUP4 ADD MLOAD MLOAD PUSH1 0x60 DUP5 ADD MLOAD SWAP2 MLOAD PUSH32 0xF68FD38D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP4 PUSH4 0xF68FD38D SWAP4 PUSH2 0xDEF SWAP4 SWAP2 SWAP3 PUSH1 0x4 ADD PUSH2 0x1EB2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xE18 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0xE64 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xE46 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE4B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0xE62 PUSH2 0x2F7 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD DUP5 PUSH2 0x1278 JUMP JUMPDEST POP JUMPDEST PUSH2 0xE6C PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xC0 DUP3 ADD DUP2 SWAP1 MSTORE ISZERO PUSH2 0xEA0 JUMPI PUSH2 0xEA0 PUSH2 0x2F7 DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0xC0 ADD MLOAD PUSH2 0x12B0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xEAD PUSH2 0x1682 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0xC0 ADD MLOAD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1C ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xED3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xEFE JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0xC0 ADD MLOAD SWAP1 POP PUSH1 0xA0 DUP2 MLOAD LT ISZERO PUSH2 0xF1A JUMPI INVALID JUMPDEST PUSH1 0x20 DUP3 DUP2 ADD MSTORE DUP1 MLOAD PUSH1 0x24 DUP3 ADD SWAP1 PUSH1 0x40 DUP5 ADD SWAP1 PUSH2 0xF5B SWAP1 DUP3 SWAP1 DUP5 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC ADD PUSH2 0x12E6 JUMP JUMPDEST DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xF6F SWAP2 SWAP1 PUSH2 0x1AD0 JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH1 0x0 PUSH1 0x60 PUSH2 0xF8A DUP6 PUSH1 0x40 ADD MLOAD PUSH1 0xC0 ADD MLOAD PUSH2 0x13C7 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x10D0 DUP6 PUSH1 0x20 ADD MLOAD PUSH4 0xC853C969 PUSH1 0xE0 SHL PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x40 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x80 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1046 SWAP2 SWAP1 PUSH2 0x209E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 DUP9 ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH2 0x14C1 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x547A32A328D8A78DBE9BF090FA60BA3D4D1C6833A592A2C942666CE3249C1210 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x75A SWAP3 SWAP2 SWAP1 PUSH2 0x1EE7 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xA78002A166FCAE5236D89E3FF35C53DADB775F7818DE4A020714CBA4BF360822 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xBF2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xBEA726EFDF9868BBC5755DCE9F13D585B3CF731177BE75300D15BB8F5E286158 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xBF2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F5A JUMP JUMPDEST PUSH1 0x60 PUSH32 0x6FEC11A99EBB0FF14B6648F609F57864DADEBA8B29869C4DF2B3B76894147849 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x11B9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F70 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0xA5ADE45208123132815E1591A1C7E64045FD006152F5E85D100AEE42BA02C75 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xBF2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F5A JUMP JUMPDEST PUSH1 0x60 PUSH32 0x6B99CF1D367DBDBC495802261A500BF6E1319CFA7ECAA23AE929F5CD4C70795 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xBF2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F17 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xFE251A07F3CBFFD23C1C1DB9EC776D259099C832333D99EF48CACFA93A4D7B32 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x75A SWAP3 SWAP2 SWAP1 PUSH2 0x1F4C JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x132D JUMPI DUP2 MLOAD DUP4 MLOAD PUSH1 0x20 DUP4 SWAP1 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR DUP4 MSTORE PUSH2 0x13C2 JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0x133A JUMPI PUSH2 0x13C2 JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x1374 JUMPI PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP2 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x136C JUMPI DUP5 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP5 ADD SWAP4 PUSH2 0x1351 JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x13C2 JUMP JUMPDEST PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP4 MLOAD JUMPDEST DUP2 DUP7 SLT ISZERO PUSH2 0x13BD JUMPI DUP3 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1383 JUMP JUMPDEST DUP6 MSTORE POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x46 DUP4 MLOAD LT DUP1 PUSH2 0x144B JUMPI POP DUP3 MLOAD PUSH2 0x1405 SWAP1 DUP5 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBA ADD PUSH2 0x6D8 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xF86D1D9200000000000000000000000000000000000000000000000000000000 EQ ISZERO JUMPDEST ISZERO PUSH2 0x145E JUMPI DUP3 MLOAD PUSH1 0x20 DUP5 ADD KECCAK256 SWAP2 POP PUSH2 0x14BC JUMP JUMPDEST DUP3 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBA DUP2 ADD PUSH1 0x20 DUP6 ADD KECCAK256 SWAP3 POP PUSH2 0x14B9 SWAP1 DUP5 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBE DUP2 ADD SWAP1 PUSH2 0x154D JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP6 PUSH1 0x40 MLOAD PUSH2 0x14EB SWAP2 SWAP1 PUSH2 0x1D26 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1528 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x152D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP3 POP SWAP1 POP DUP1 PUSH2 0x1545 JUMPI PUSH2 0x1545 PUSH2 0x2F7 DUP7 DUP7 DUP6 PUSH2 0x15E4 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 DUP4 GT ISZERO PUSH2 0x1566 JUMPI PUSH2 0x1566 PUSH2 0x2F7 PUSH1 0x0 DUP6 DUP6 PUSH2 0xBD3 JUMP JUMPDEST DUP4 MLOAD DUP3 GT ISZERO PUSH2 0x157F JUMPI PUSH2 0x157F PUSH2 0x2F7 PUSH1 0x1 DUP5 DUP8 MLOAD PUSH2 0xBD3 JUMP JUMPDEST DUP3 DUP3 SUB PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1598 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x15C3 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x6B7 PUSH2 0x15D2 DUP3 PUSH2 0x161C JUMP JUMPDEST DUP5 PUSH2 0x15DC DUP8 PUSH2 0x161C JUMP JUMPDEST ADD DUP4 MLOAD PUSH2 0x12E6 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xA9F0C547643C02AFED4CF2699E794BC383EFFCA840EED62FDDB64A15A4E55BC4 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xBF2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F17 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD PUSH2 0x1641 PUSH2 0x16DD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x232 DUP2 PUSH2 0x2205 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x178D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x17A0 PUSH2 0x179B DUP3 PUSH2 0x2173 JUMP JUMPDEST PUSH2 0x214C JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x17DA JUMPI PUSH2 0x17C8 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x17E5 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x17B1 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x17F5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1803 PUSH2 0x179B DUP3 PUSH2 0x2193 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x181A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1846 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x184F DUP2 PUSH2 0x214C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x185C DUP4 DUP4 PUSH2 0x1772 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x186B DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x1772 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18BE DUP5 DUP3 DUP6 ADD PUSH2 0x17E5 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x18DD DUP5 DUP3 DUP6 ADD PUSH2 0x1772 JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1905 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x190F PUSH1 0x40 PUSH2 0x214C JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1925 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1941 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x1952 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1960 PUSH2 0x179B DUP3 PUSH2 0x2193 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x1975 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1986 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x21D5 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x19A8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x19B3 DUP2 PUSH2 0x2205 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x19CF JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x19DB DUP8 DUP4 DUP9 ADD PUSH2 0x1833 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x19F0 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x19FD DUP7 DUP3 DUP8 ADD PUSH2 0x17E5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A19 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1A30 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A43 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1A51 PUSH2 0x179B DUP3 PUSH2 0x2173 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP6 DUP2 ADD DUP9 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x1A89 JUMPI PUSH2 0x1A77 DUP13 DUP5 DUP5 CALLDATALOAD DUP12 ADD ADD PUSH2 0x1833 JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1A60 JUMP JUMPDEST POP SWAP2 SWAP8 POP DUP9 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x1AA1 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x1AAE DUP6 DUP3 DUP7 ADD PUSH2 0x177D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AC9 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1AE2 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1AF9 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0xA0 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x1B0C JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1B16 PUSH1 0xA0 PUSH2 0x214C JUMP JUMPDEST DUP3 MLOAD PUSH2 0x1B21 DUP2 PUSH2 0x2205 JUMP JUMPDEST DUP2 MSTORE DUP3 DUP5 ADD MLOAD PUSH2 0x1B30 DUP2 PUSH2 0x2205 JUMP JUMPDEST DUP1 DUP6 DUP4 ADD MSTORE POP PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x1B5B JUMPI DUP6 DUP7 REVERT JUMPDEST DUP1 DUP5 ADD SWAP4 POP POP DUP7 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1B6F JUMPI DUP5 DUP6 REVERT JUMPDEST DUP3 MLOAD SWAP2 POP PUSH2 0x1B7F PUSH2 0x179B DUP4 PUSH2 0x2173 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP8 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x1BB4 JUMPI PUSH2 0x1BA2 DUP12 DUP10 DUP5 MLOAD DUP11 ADD ADD PUSH2 0x18F4 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP8 ADD SWAP3 SWAP1 DUP8 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1B8B JUMP JUMPDEST POP POP PUSH1 0x80 DUP4 ADD MSTORE POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BD7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1BED JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1BF9 DUP5 DUP3 DUP6 ADD PUSH2 0x1833 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C13 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1C2A JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1C36 DUP7 DUP4 DUP8 ADD PUSH2 0x1833 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1C4B JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x1AAE DUP6 DUP3 DUP7 ADD PUSH2 0x17E5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP5 DUP2 DUP4 MUL DUP7 ADD DUP3 DUP7 ADD DUP6 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x1CCF JUMPI DUP4 DUP4 SUB DUP10 MSTORE DUP2 MLOAD DUP1 MLOAD PUSH4 0xFFFFFFFF AND DUP5 MSTORE DUP6 ADD MLOAD PUSH1 0x40 DUP7 DUP6 ADD DUP2 SWAP1 MSTORE PUSH2 0x1CBB DUP2 DUP7 ADD DUP4 PUSH2 0x1CDC JUMP JUMPDEST SWAP11 DUP8 ADD SWAP11 SWAP5 POP POP POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1C8B JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1CF4 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x21D5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1D38 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x21D5 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1E0A JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x1DF8 DUP6 DUP4 MLOAD PUSH2 0x1CDC JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1DBE JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP11 DUP12 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP10 DUP11 AND PUSH1 0x20 DUP13 ADD MSTORE SWAP8 DUP10 AND PUSH1 0x40 DUP12 ADD MSTORE PUSH1 0x60 DUP11 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x80 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xA0 DUP9 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xC0 DUP8 ADD MSTORE PUSH1 0xE0 DUP7 ADD MSTORE PUSH2 0x100 DUP6 ADD MSTORE SWAP1 SWAP2 AND PUSH2 0x120 DUP4 ADD MSTORE PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x10D0 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1CDC JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1F30 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1CDC JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1F42 DUP2 DUP6 PUSH2 0x1CDC JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x6B7 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1CDC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x208A JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x20B2 PUSH1 0x20 DUP4 ADD DUP5 MLOAD PUSH2 0x1C58 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x20C4 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x1C58 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x20D7 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x1C58 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x100 DUP1 PUSH1 0xC0 DUP6 ADD MSTORE PUSH2 0x2108 PUSH2 0x120 DUP6 ADD DUP4 PUSH2 0x1C72 JUMP JUMPDEST SWAP2 POP PUSH1 0xC0 DUP6 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH1 0xE0 DUP6 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP6 DUP5 SUB ADD DUP3 DUP7 ADD MSTORE PUSH2 0x1F42 DUP4 DUP3 PUSH2 0x1CDC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x216B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2189 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x21A9 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x21F0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x21D8 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x21FF JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xEA0 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF SUB PUSH7 0x75A23C35F5BF10 0xEA 0xDB ORIGIN SLT 0xD6 0xE7 0x4E CHAINID DUP6 SWAP15 CREATE SLT 0x2B SWAP8 COINBASE 0x4A GASPRICE 0xD5 PUSH12 0x2AADC164736F6C634300060C STOP CALLER ",
                "sourceMap": "1369:16412:28:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2787:75;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7200:248;;;;;;;;;;-1:-1:-1;7200:248:28;;;;;:::i;:::-;;:::i;2678:65::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;7669:250::-;;;;;;;;;;-1:-1:-1;7669:250:28;;;;;:::i;:::-;;:::i;5518:795::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4051:584::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;4862:406::-;;;;;;:::i;:::-;;:::i;8072:531::-;;;;;;;;;;-1:-1:-1;8072:531:28;;;;;:::i;:::-;;:::i;2934:432::-;;;;;;;;;;;;;:::i;951:48:37:-;;;;;;;;;;;;;:::i;6667:326:28:-;;;;;;:::i;:::-;;:::i;2787:75::-;;;:::o;7200:248::-;7335:19;7377:64;7413:27;7436:3;7413:22;:27::i;7377:64::-;7370:71;7200:248;-1:-1:-1;;7200:248:28:o;2678:65::-;;;;;;;;;;;;;;;;;;;:::o;7669:250::-;7793:19;7835:39;:37;:39::i;:::-;:68;:77;;;;;-1:-1:-1;7835:77:28;;;;;7669:250::o;5518:795::-;5769:28;1175:3:38;1327:46;1388:38;:36;:38::i;:::-;1473:20;;1327:99;;-1:-1:-1;1589:30:38;;;1588:37;1584:227;;1645:151;:141;1709:22;1729:1;1709:8;;:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1709:19:38;;:22;-1:-1:-1;;1709:19:38;:22;-1:-1:-1;1709:22:38:i;:::-;1753:15;1645:42;:141::i;:::-;:149;:151::i;:::-;1887:30;;1864:53;;5832:17:28;;5817:11;;:32:::2;5813:221;;5865:158;:148;5953:4;:11;5982:10;:17;5865:70;:148::i;:158::-;6071:4;:11;6059:24;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6043:40;;6098:9;6093:214;6117:4;:11;6113:1;:15;6093:214;;;6168:128;6216:10;6244:4;6249:1;6244:7;;;;;;;;;;;;;;6269:10;6280:1;6269:13;;;;;;;;;;;;;;6168:30;:128::i;:::-;6149:13;6163:1;6149:16;;;;;;;;;::::0;;::::2;::::0;;;;;:147;6130:3:::2;;6093:214;;;;3500:24:::1;3539:55;3561:9;3572:21;3539;:55::i;:::-;3500:94:::0;-1:-1:-1;3608:20:28;;3604:88:::1;;3644:37;::::0;:10:::1;::::0;:37;::::1;;;::::0;3664:16;;3644:37:::1;::::0;;;3664:16;3644:10;:37;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;3604:88;-1:-1:-1::0;2008:20:38;;2032:16;;2008:41;;;1985:64;;5518:795:28;;-1:-1:-1;;5518:795:28:o;4051:584::-;4104:14;4134:62;4159:36;4134:24;:62::i;:::-;4206:68;4231:42;4206:24;:68::i;:::-;4284:63;4309:37;4284:24;:63::i;:::-;4357:71;4382:45;4357:24;:71::i;:::-;4438:75;4463:49;4438:24;:75::i;:::-;4523:62;4548:36;4523:24;:62::i;:::-;-1:-1:-1;4602:26:28;4051:584;:::o;4862:406::-;5101:25;1175:3:38;1327:46;1388:38;:36;:38::i;:::-;1473:20;;1327:99;;-1:-1:-1;1589:30:38;;;1588:37;1584:227;;1645:151;:141;1709:22;1729:1;1709:8;;:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1709:19:38;;:22;-1:-1:-1;;1709:19:38;:22;-1:-1:-1;1709:22:38:i;1645:151::-;1887:30;;1864:53;;5157:104:28::2;5201:10;5225:3:::0;5242:9;5157:30:::2;:104::i;:::-;5142:119;;3500:24:::1;3539:55;3561:9;3572:21;3539;:55::i;8072:531::-:0;8198:15;8236:360;8285:19;8318:3;:10;;;8342:3;:10;;;8366:3;:15;;;8395:3;:15;;;8424:3;:25;;;8463:3;:8;;;8495:3;:12;;;8485:23;;;;;;8522:3;:9;;;8545:3;:12;;;8571:3;:13;;;8261:333;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8251:344;;;;;;8236:14;:360::i;2934:432::-;;;:::o;951:48:37:-;;;:::o;6667:326:28:-;6884:25;1211:10:36;1233:4;1211:27;1207:123;;1254:65;:55;1298:10;1254:43;:55::i;:65::-;6932:54:28::1;6963:6;6971:3;6976:9;6932:30;:54::i;:::-;6925:61;;1339:1:36;6667:326:28::0;;;;;:::o;1021:477:44:-;1066:20;1098:19;1120:86;1159:37;1120:25;:86::i;1092:476:47:-;1137:20;1169:19;1191:85;1230:36;1191:25;:85::i;16975:880:80:-;17095:13;17139:5;17147:1;17139:9;17128:1;:8;:20;17124:299;;;17164:248;17189:222;17254:90;17362:1;:8;17388:5;17396:1;17388:9;17189:47;:222::i;17164:248::-;-1:-1:-1;17596:13:80;17499:2;17596:13;17590:20;17749:66;17737:79;;16975:880::o;948:319:2:-;1069:12;1147:51;1213:8;1235:15;1104:156;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;948:319:2;;;;:::o;1492:170:86:-;1635:9;1629:16;1622:4;1611:9;1607:20;1600:46;695:377:4;856:12;934:70;1019:8;1041:14;891:174;;;;;;;;;:::i;8924:1676:28:-;9099:25;9140;;:::i;:::-;9175:21;;;;;9219:27;9242:3;9219:22;:27::i;:::-;9206:10;;;:40;9256:9;;;:15;;;9281;;;:27;;;9319:31;9206:5;9319:24;:31::i;:::-;9690:12;9594:39;:37;:39::i;:::-;9676:10;;;;;9594:81;:93;;;;;;;;;:108;9755:13;;;;:17;9751:266;;9859:12;;;;9889:10;;9979:13;;;;9788:218;;;;;9817:4;;9788:53;;:218;;9859:12;;9889:10;;9937:6;;9788:218;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9751:266;10095:12;;;;:26;;10119:1;10095:23;:26::i;:::-;10078:43;;:14;;;:43;;;10153:46;10135:64;10131:315;;;10230:33;10257:5;10230:26;:33::i;:::-;10215:48;;10131:315;;;10294:141;:114;10381:5;:10;;;10393:5;:14;;;10294:86;:114::i;:141::-;10521:5;:14;;;10460:133;;;;10497:5;:10;;;10549:3;:10;;;10573:3;:10;;;10460:133;;;;;;;;:::i;:::-;;;;;;;;8924:1676;;;;;;:::o;2505:135:81:-;2590:7;2624:1;2620;:5;:13;;2632:1;2620:13;;;-1:-1:-1;2628:1:81;;2613:20;-1:-1:-1;2505:135:81:o;2140:168:36:-;2222:79;;;;;2261:4;;2222:52;;:79;;2275:8;;2285:15;;2222:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2140:168;:::o;1771:260:37:-;1862:18;1966:23;2003:10;1913:110;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1903:121;;;;;;1896:128;;1771:260;;;:::o;685:257:2:-;781:12;859:45;919:6;816:119;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;685:257:2;;;:::o;1572:335:49:-;1664:12;883:3;1865:9;1857:18;;;;;;;;1878:1;1857:22;1856:44;;;1572:335;-1:-1:-1;;1572:335:49:o;1295:378:84:-;1483:12;1235:10;1554:37;;1605:9;1628:6;1648:8;1518:148;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1295:378:84;;;;;:::o;10667:2516:28:-;10828:9;;;;:16;;;:30;;;;;;:66;;;10882:5;:12;;;10862:32;;:5;:9;;;:16;;;:32;;;;10828:66;10824:307;;;10910:210;:200;11010:5;:10;;;11042:5;:12;;;11076:5;:9;;;:16;;;10910:78;:200::i;:210::-;11211:15;11176:5;:9;;;:31;;;:50;11172:305;;11242:224;:214;11338:5;:10;;;11370:15;11407:5;:9;;;:31;;;11242:74;:214::i;:224::-;11554:11;11530:5;:9;;;:21;;;:35;:74;;;;11593:11;11569:5;:9;;;:21;;;:35;11530:74;11526:359;;;11620:254;:244;11717:5;:10;;;11749:11;11782:5;:9;;;:21;;;11825:5;:9;;;:21;;;11620:75;:244::i;:254::-;11948:21;11927:17;;;:42;;;11983:9;;;;:15;;;:35;11979:284;;;12034:218;:208;12138:5;:10;;;12170:5;:17;;;12209:5;:9;;;:15;;;12034:82;:208::i;:218::-;12406:10;;;;12418:9;;;;;:16;12436:15;;;;12325:127;;;;;12360:4;;12325:80;;:127;;12406:10;;12325:127;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12309:418;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12511:205;:195;12616:5;:10;;;12648:5;:15;;;12685:3;12511:83;:195::i;:205::-;12472:255;12309:418;12824:52;:50;:52::i;:::-;12906:10;;;;;12824:81;:93;;;;;;;;;;12796:25;;;:121;;;12931:30;12927:250;;12977:189;:179;13081:5;:10;;;13113:5;:25;;;12977:82;:179::i;:189::-;10667:2516;:::o;13475:3704::-;13571:25;15034:38;;:::i;:::-;15139:9;;;;:18;;;:25;15096:30;;15139:34;;15129:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15129:45:28;;15096:78;;15277:25;15305:5;:9;;;:18;;;15277:46;;15367:3;15344:12;:19;:26;;15337:34;;;;15619:2;15591:26;;;15584:38;15899:19;;15723:2;15705:21;;;15833:2;15810:26;;;15863:60;;15810:26;;15705:21;;15899:23;;15863:19;:60::i;:::-;16046:17;16035:59;;;;;;;;;;;;:::i;:::-;16028:66;;13475:3704;;;;16230:20;16252:30;16298:51;16330:5;:9;;;:18;;;16298:31;:51::i;:::-;16229:120;;;;16445:727;16468:5;:10;;;16532:47;;;16597:522;;;;;;;;16668:5;:9;;;:16;;;16597:522;;;;;;16741:4;:15;;;16597:522;;;;;;16791:4;:16;;;16597:522;;;;;;16847:4;:21;;;16597:522;;;;16912:4;:25;;;16597:522;;;;16976:4;:20;;;16597:522;;;;17032:12;16597:522;;;;17085:17;16597:522;;;16492:641;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17147:9;;;;:15;;;16445:9;:727::i;:::-;16438:734;13475:3704;-1:-1:-1;;;;;13475:3704:28:o;1078:359:4:-;1230:12;1308:68;1391:7;1412:8;1265:165;;;;;;;;;:::i;1443:409::-;1618:12;1696:69;1780:7;1801:6;1821:14;1653:192;;;;;;;;;;:::i;1858:397::-;2027:12;2105:65;2185:7;2206:4;2224:14;2062:186;;;;;;;;;;:::i;2261:463::-;2461:12;2539:74;2628:7;2649:8;2671:11;2696;2496:221;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2261:463:4;;;;;;:::o;2730:419::-;2910:12;2988:73;3076:7;3097:10;3121:11;2945:197;;;;;;;;;;:::i;3155:417::-;3341:12;3419:70;3504:7;3525:9;3548:7;3376:189;;;;;;;;;;:::i;3578:375::-;3738:12;3816:65;3896:7;3917:19;3773:173;;;;;;;;;:::i;1896:4297:80:-;2046:2;2037:6;:11;2033:4154;;;2367:13;;2422:11;;2321:2;2317:15;;;2312:3;2308:25;2304:33;;2382:9;;2363:29;;;2418:22;;2470:8;2457:22;;2274:219;;;2597:4;2587:6;:14;2583:59;;;2621:7;;2583:59;3331:4;3322:6;:13;3318:2859;;;3657:2;3649:6;3645:15;3635:25;;3705:6;3697;3693:19;3755:6;3749:4;3745:17;4062:4;4056:11;4330:198;4348:4;4340:6;4337:16;4330:198;;;4396:13;;4383:27;;4457:2;4493:13;;;;4445:15;;;;4330:198;;;4597:18;;-1:-1:-1;3364:1269:80;;;4878:2;4870:6;4866:15;4856:25;;4926:6;4918;4914:19;4976:6;4970:4;4966:17;5286:6;5280:13;5865:191;5882:4;5876;5872:15;5865:191;;;5930:11;;5917:25;;5975:13;;;;;6021;;;;5865:191;;;6126:19;;-1:-1:-1;;4680:1483:80;1896:4297;;;:::o;1416:1335:35:-;1509:20;1531:22;2191:2;2173:8;:15;:20;:174;;;-1:-1:-1;2326:15:35;;2306:41;;2326:8;;:20;;2306:19;:41::i;:::-;2284:63;;:18;:63;;2173:174;2091:331;;;2380:19;;;;;;;-1:-1:-1;2372:39:35;;2091:331;2639:15;;2635:24;;;2630:2;2616:17;;2606:54;;-1:-1:-1;2691:53:35;;2645:8;;2706:20;;;;2691:14;:53::i;:::-;2679:65;;1416:1335;;;;:::o;17327:452:28:-;17431:25;17472:12;17528:4;17520:18;;17546:5;17553:8;17520:42;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;17494:68:28;-1:-1:-1;17494:68:28;-1:-1:-1;17494:68:28;17572:201;;17600:162;:152;17678:4;17700:8;17726:12;17600:60;:152::i;:162::-;17327:452;;;;;;:::o;6501:1119:80:-;6635:19;6815:2;6808:4;:9;6804:270;;;6833:230;6858:204;6923:83;7024:4;7046:2;6858:47;:204::i;6833:230::-;7092:1;:8;7087:2;:13;7083:280;;;7116:236;7141:210;7206:85;7309:2;7329:1;:8;7141:47;:210::i;7116:236::-;7455:4;7450:2;:9;7440:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7440:20:80;;7431:29;;7470:120;7491:23;:6;:21;:23::i;:::-;7549:4;7528:18;:1;:16;:18::i;:::-;:25;7567:6;:13;7470:7;:120::i;3959:409:4:-;4141:12;4219:64;4298:7;4319:8;4341:10;4176:185;;;;;;;;;;:::i;1429:228:80:-;1608:2;1597:14;;1429:228::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130::-;72:20;;97:33;72:20;97:33;:::i;311:705::-;;437:3;430:4;422:6;418:17;414:27;404:2;;-1:-1;;445:12;404:2;492:6;479:20;514:89;529:73;595:6;529:73;:::i;:::-;514:89;:::i;:::-;631:21;;;505:98;-1:-1;675:4;688:14;;;;663:17;;;783:1;768:242;793:6;790:1;787:13;768:242;;;900:46;942:3;675:4;876:3;863:17;667:6;851:30;;900:46;:::i;:::-;888:59;;961:14;;;;989;;;;815:1;808:9;768:242;;;772:14;;;;;397:619;;;;:::o;2866:440::-;;2967:3;2960:4;2952:6;2948:17;2944:27;2934:2;;-1:-1;;2975:12;2934:2;3022:6;3009:20;3044:64;3059:48;3100:6;3059:48;:::i;3044:64::-;3035:73;;3128:6;3121:5;3114:21;3232:3;3164:4;3223:6;3156;3214:16;;3211:25;3208:2;;;3249:1;;3239:12;3208:2;37340:6;3164:4;3156:6;3152:17;3164:4;3190:5;3186:16;37317:30;37396:1;37378:16;;;3164:4;37378:16;37371:27;3190:5;2927:379;-1:-1;;2927:379::o;5483:1820::-;;5609:6;;5597:9;5592:3;5588:19;5584:32;5581:2;;;-1:-1;;5619:12;5581:2;5647:22;5609:6;5647:22;:::i;:::-;5638:31;;;5753:57;5806:3;5782:22;5753:57;:::i;:::-;5735:16;5728:83;5907:49;5952:3;5874:2;5932:9;5928:22;5907:49;:::i;:::-;5874:2;5893:5;5889:16;5882:75;6025:2;6083:9;6079:22;8040:20;6025:2;6044:5;6040:16;6033:75;6176:2;6234:9;6230:22;8040:20;6176:2;6195:5;6191:16;6184:75;6337:3;6396:9;6392:22;8040:20;6337:3;6357:5;6353:16;6346:75;6482:3;6541:9;6537:22;8040:20;6482:3;6502:5;6498:16;6491:75;6659:3;6648:9;6644:19;6631:33;6684:18;6676:6;6673:30;6670:2;;;5721:1;;6706:12;6670:2;6751:58;6805:3;6796:6;6785:9;6781:22;6751:58;:::i;:::-;6659:3;6737:5;6733:16;6726:84;;6872:3;6931:9;6927:22;8040:20;6872:3;6892:5;6888:16;6881:75;7021:3;7057:72;7125:3;7021;7105:9;7101:22;7057:72;:::i;:::-;7021:3;7041:5;7037:18;7030:100;;7196:3;;7257:9;7253:22;8040:20;7196:3;7216:5;7212:18;7205:77;;5575:1728;;;;:::o;7361:605::-;;7493:4;7481:9;7476:3;7472:19;7468:30;7465:2;;;-1:-1;;7501:12;7465:2;7529:20;7493:4;7529:20;:::i;:::-;7520:29;;8334:6;8328:13;36359:10;38776:5;36348:22;38752:5;38749:34;38739:2;;-1:-1;;38787:12;38739:2;7617:85;;7784:2;7769:18;;7763:25;7808:18;7797:30;;7794:2;;;-1:-1;;7830:12;7794:2;7916:22;;3420:4;3408:17;;3404:27;-1:-1;3394:2;;-1:-1;;3435:12;3394:2;3475:6;3469:13;3497:64;3512:48;3553:6;3512:48;:::i;3497:64::-;3581:6;3574:5;3567:21;3685:3;7784:2;3676:6;3609;3667:16;;3664:25;3661:2;;;-1:-1;;3692:12;3661:2;3712:39;3744:6;7784:2;3643:5;3639:16;7784:2;3609:6;3605:17;3712:39;:::i;:::-;7784:2;7857:16;;7850:95;-1:-1;7861:5;;7459:507;-1:-1;;;7459:507::o;8390:755::-;;;;8574:2;8562:9;8553:7;8549:23;8545:32;8542:2;;;-1:-1;;8580:12;8542:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;8632:63;-1:-1;8760:2;8745:18;;8732:32;8784:18;8773:30;;;8770:2;;;-1:-1;;8806:12;8770:2;8836:90;8918:7;8909:6;8898:9;8894:22;8836:90;:::i;:::-;8826:100;;8991:2;8980:9;8976:18;8963:32;8949:46;;8784:18;9007:6;9004:30;9001:2;;;-1:-1;;9037:12;9001:2;;9067:62;9121:7;9112:6;9101:9;9097:22;9067:62;:::i;:::-;9057:72;;;8536:609;;;;;:::o;9152:730::-;;;9369:2;9357:9;9348:7;9344:23;9340:32;9337:2;;;-1:-1;;9375:12;9337:2;9433:17;9420:31;9471:18;;9463:6;9460:30;9457:2;;;-1:-1;;9493:12;9457:2;9621:6;9610:9;9606:22;;;1240:3;1233:4;1225:6;1221:17;1217:27;1207:2;;-1:-1;;1248:12;1207:2;1295:6;1282:20;1317:117;1332:101;1426:6;1332:101;:::i;1317:117::-;1462:21;;;1506:4;1519:14;;;;1440:16;1494:17;;;-1:-1;1599:270;1624:6;1621:1;1618:13;1599:270;;;1731:74;1801:3;1506:4;1707:3;1694:17;1498:6;1682:30;;1731:74;:::i;:::-;1719:87;;1820:14;;;;1848;;;;1646:1;1639:9;1599:270;;;-1:-1;9513:125;;-1:-1;9688:18;;9675:32;;-1:-1;;;;9716:30;;;9713:2;;;-1:-1;;9749:12;9713:2;;9779:87;9858:7;9849:6;9838:9;9834:22;9779:87;:::i;:::-;9769:97;;;9331:551;;;;;:::o;9889:241::-;;9993:2;9981:9;9972:7;9968:23;9964:32;9961:2;;;-1:-1;;9999:12;9961:2;-1:-1;2795:20;;9955:175;-1:-1;9955:175::o;10137:430::-;;10296:2;;10284:9;10275:7;10271:23;10267:32;10264:2;;;-1:-1;;10302:12;10264:2;10353:17;10347:24;10391:18;;10383:6;10380:30;10377:2;;;-1:-1;;10413:12;10377:2;10519:22;;;;4343:4;4322:19;;;4318:30;4315:2;;;-1:-1;;4351:12;4315:2;4379:20;4343:4;4379:20;:::i;:::-;4055:6;4049:13;4067:56;4117:5;4067:56;:::i;:::-;4462:109;;4727:22;;;4049:13;4067:56;4049:13;4067:56;:::i;:::-;4672:83;10296:2;4658:5;4654:16;4647:109;;4829:2;4898:9;4894:22;8188:13;4829:2;4848:5;4844:16;4837:86;5000:2;5069:9;5065:22;8188:13;5000:2;5019:5;5015:16;5008:86;5187:3;5176:9;5172:19;5166:26;10391:18;5204:6;5201:30;5198:2;;;-1:-1;;5234:12;5198:2;5383:6;5372:9;5368:22;;;;2098:3;2091:4;2083:6;2079:17;2075:27;2065:2;;-1:-1;;2106:12;2065:2;2146:6;2140:13;2126:27;;2168:112;2183:96;2272:6;2183:96;:::i;2168:112::-;2308:21;;;2365:14;;;;2340:17;;;-1:-1;2445:269;2470:6;2467:1;2464:13;2445:269;;;2570:80;2646:3;10296:2;2546:3;2540:10;2344:6;2528:23;;2570:80;:::i;:::-;2558:93;;2665:14;;;;2693;;;;2492:1;2485:9;2445:269;;;-1:-1;;5187:3;5261:16;;5254:143;-1:-1;5265:5;10258:309;-1:-1;;;;;;10258:309::o;10574:401::-;;10715:2;10703:9;10694:7;10690:23;10686:32;10683:2;;;-1:-1;;10721:12;10683:2;10779:17;10766:31;10817:18;10809:6;10806:30;10803:2;;;-1:-1;;10839:12;10803:2;10869:90;10951:7;10942:6;10931:9;10927:22;10869:90;:::i;:::-;10859:100;10677:298;-1:-1;;;;10677:298::o;10982:630::-;;;11149:2;11137:9;11128:7;11124:23;11120:32;11117:2;;;-1:-1;;11155:12;11117:2;11213:17;11200:31;11251:18;;11243:6;11240:30;11237:2;;;-1:-1;;11273:12;11237:2;11303:90;11385:7;11376:6;11365:9;11361:22;11303:90;:::i;:::-;11293:100;;11458:2;11447:9;11443:18;11430:32;11416:46;;11251:18;11474:6;11471:30;11468:2;;;-1:-1;;11504:12;11468:2;;11534:62;11588:7;11579:6;11568:9;11564:22;11534:62;:::i;12256:127::-;36153:42;36142:54;12333:45;;12327:56::o;13714:1084::-;;13993:5;33379:12;34264:6;34259:3;34252:19;34301:4;;34296:3;34292:14;14005:115;;;34301:4;14177:6;14173:17;14168:3;14164:27;34301:4;14294:5;33034:14;-1:-1;14333:426;14358:6;14355:1;14352:13;14333:426;;;14410:20;;;14398:33;;14459:13;;19933:23;;36359:10;36348:22;20579:36;;20091:16;;20085:23;19856:4;20128:14;;;20121:38;;;20174:71;19847:14;;;20085:23;20174:71;:::i;:::-;14738:14;;;;14479:136;-1:-1;;;33951:14;;;;14380:1;14373:9;14333:426;;;-1:-1;14782:10;;13892:906;-1:-1;;;;;;;13892:906::o;15312:323::-;;15444:5;33379:12;34264:6;34259:3;34252:19;15527:52;15572:6;34301:4;34296:3;34292:14;34301:4;15553:5;15549:16;15527:52;:::i;:::-;37858:2;37838:14;37854:7;37834:28;15591:39;;;;34301:4;15591:39;;15392:243;-1:-1;;15392:243::o;20627:271::-;;16152:5;33379:12;16263:52;16308:6;16303:3;16296:4;16289:5;16285:16;16263:52;:::i;:::-;16327:16;;;;;20761:137;-1:-1;;20761:137::o;20905:659::-;17554:66;17534:87;;17519:1;17640:11;;14867:37;;;;21416:12;;;14867:37;21527:12;;;21150:414::o;21571:222::-;36153:42;36142:54;;;;12333:45;;21698:2;21683:18;;21669:124::o;21800:406::-;;21995:2;;21984:9;21980:18;21995:2;22016:17;22009:47;22070:126;12901:5;33379:12;34264:6;34259:3;34252:19;34292:14;21984:9;34292:14;12913:102;;34292:14;21995:2;13072:6;13068:17;21984:9;13059:27;;13047:39;;21995:2;13166:5;33034:14;-1:-1;13205:357;13230:6;13227:1;13224:13;13205:357;;;13282:20;21984:9;13286:4;13282:20;;13277:3;13270:33;11739:64;11799:3;13337:6;13331:13;11739:64;:::i;:::-;13351:90;-1:-1;13541:14;;;;33951;;;;13252:1;13245:9;13205:357;;;-1:-1;22062:134;;21966:240;-1:-1;;;;;;;21966:240::o;22213:222::-;14867:37;;;22340:2;22325:18;;22311:124::o;22442:460::-;14867:37;;;36153:42;36142:54;;;22805:2;22790:18;;12186:58;36142:54;22888:2;22873:18;;12333:45;22633:2;22618:18;;22604:298::o;22909:1420::-;14867:37;;;36153:42;36142:54;;;23537:2;23522:18;;12333:45;36142:54;;;23620:2;23605:18;;12333:45;23703:2;23688:18;;14867:37;;;;23786:3;23771:19;;14867:37;;;;23870:3;23855:19;;14867:37;;;;23954:3;23939:19;;14867:37;24038:3;24023:19;;14867:37;24122:3;24107:19;;14867:37;36142:54;;;24229:3;24214:19;;12333:45;24314:3;24299:19;;14867:37;23356:3;23341:19;;23327:1002::o;24336:544::-;;14897:5;14874:3;14867:37;36153:42;35420:5;36142:54;24717:2;24706:9;24702:18;12186:58;24545:2;24754;24743:9;24739:18;24732:48;24794:76;24545:2;24534:9;24530:18;24856:6;24794:76;:::i;25338:329::-;14867:37;;;35695:66;35684:78;25653:2;25638:18;;15264:36;25491:2;25476:18;;25462:205::o;25674:612::-;;14897:5;14874:3;14867:37;25893:2;26011;26000:9;25996:18;25989:48;26051:76;25893:2;25882:9;25878:18;26113:6;26051:76;:::i;:::-;26175:9;26169:4;26165:20;26160:2;26149:9;26145:18;26138:48;26200:76;26271:4;26262:6;26200:76;:::i;:::-;26192:84;25864:422;-1:-1;;;;;;25864:422::o;26293:333::-;14867:37;;;26612:2;26597:18;;14867:37;26448:2;26433:18;;26419:207::o;26633:444::-;14867:37;;;26980:2;26965:18;;14867:37;;;;27063:2;27048:18;;14867:37;26816:2;26801:18;;26787:290::o;27084:556::-;14867:37;;;27460:2;27445:18;;14867:37;;;;27543:2;27528:18;;14867:37;27626:2;27611:18;;14867:37;27295:3;27280:19;;27266:374::o;27647:218::-;35695:66;35684:78;;;;15264:36;;27772:2;27757:18;;27743:122::o;27872:329::-;35695:66;35684:78;;;;15264:36;;36153:42;36142:54;28187:2;28172:18;;12333:45;28025:2;28010:18;;27996:205::o;28208:329::-;35695:66;35684:78;;;;15264:36;;28523:2;28508:18;;14867:37;28361:2;28346:18;;28332:205::o;28544:306::-;;28689:2;28710:17;28703:47;28764:76;28689:2;28678:9;28674:18;28826:6;28764:76;:::i;28857:618::-;36153:42;36142:54;;;16439:73;;36142:54;;;29295:2;29280:18;;12186:58;36142:54;;29378:2;29363:18;;12333:45;29461:2;29446:18;;14867:37;;;;29099:3;29084:19;;29070:405::o;29482:512::-;29699:2;29684:18;;37980:1;37970:12;;37960:2;;37986:9;37960:2;16808:84;;;29897:2;29882:18;;14867:37;;;;29980:2;29965:18;;;14867:37;29670:324;:::o;30318:414::-;;30517:2;30538:17;30531:47;18043:79;30517:2;30506:9;30502:18;18020:16;18014:23;18043:79;:::i;:::-;30517:2;18200:5;18196:16;18190:23;18219:86;18290:14;30506:9;18290:14;18276:12;18219:86;:::i;:::-;;18290:14;18384:5;18380:16;18374:23;18403:86;18474:14;30506:9;18474:14;18460:12;18403:86;:::i;:::-;;18474:14;18573:5;18569:16;18563:23;18640:14;30506:9;18640:14;14867:37;18640:14;18743:5;18739:16;18733:23;18810:14;30506:9;18810:14;14867:37;18810:14;18908:5;18904:16;18898:23;17945:6;;18941:14;30506:9;18941:14;18934:38;18987:167;17936:16;30506:9;17936:16;19135:12;18987:167;:::i;:::-;18979:175;;18941:14;19240:5;19236:16;19230:23;19307:14;30506:9;19307:14;14867:37;19307:14;19407:5;19403:16;19397:23;19456:14;30506:9;19460:4;19456:14;;17945:6;30506:9;19440:14;19433:38;19486:71;19552:4;19538:12;19486:71;:::i;31308:256::-;31370:2;31364:9;31396:17;;;31471:18;31456:34;;31492:22;;;31453:62;31450:2;;;31528:1;;31518:12;31450:2;31370;31537:22;31348:216;;-1:-1;31348:216::o;31571:313::-;;31739:18;31731:6;31728:30;31725:2;;;-1:-1;;31761:12;31725:2;-1:-1;31806:4;31794:17;;;31859:15;;31662:222::o;32582:321::-;;32725:18;32717:6;32714:30;32711:2;;;-1:-1;;32747:12;32711:2;-1:-1;32824:4;32801:17;32820:9;32797:33;32888:4;32878:15;;32648:255::o;37413:268::-;37478:1;37485:101;37499:6;37496:1;37493:13;37485:101;;;37566:11;;;37560:18;37547:11;;;37540:39;37521:2;37514:10;37485:101;;;37601:6;37598:1;37595:13;37592:2;;;37478:1;37657:6;37652:3;37648:16;37641:27;37592:2;;37462:219;;;:::o;38009:117::-;36153:42;38096:5;36142:54;38071:5;38068:35;38058:2;;38117:1;;38107:12"
            }
        }
    },
    "sourceTreeHashHex": "0x1f7c0484e3e1df9ca0640fc8211708cfa7915f2098516844f025660ca325f528",
    "sources": {
        "./MetaTransactionsFeature.sol": {
            "id": 28
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 86
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 80
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 84
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 81
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 87
        },
        "../errors/LibMetaTransactionsRichErrors.sol": {
            "id": 4
        },
        "../fixins/FixinCommon.sol": {
            "id": 36
        },
        "../errors/LibCommonRichErrors.sol": {
            "id": 2
        },
        "../errors/LibOwnableRichErrors.sol": {
            "id": 5
        },
        "./IOwnableFeature.sol": {
            "id": 21
        },
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": {
            "id": 89
        },
        "./ISimpleFunctionRegistryFeature.sol": {
            "id": 23
        },
        "../fixins/FixinReentrancyGuard.sol": {
            "id": 38
        },
        "../storage/LibReentrancyGuardStorage.sol": {
            "id": 47
        },
        "../storage/LibStorage.sol": {
            "id": 49
        },
        "../external/IFlashWallet.sol": {
            "id": 15
        },
        "../fixins/FixinEIP712.sol": {
            "id": 37
        },
        "../migrations/LibMigrate.sol": {
            "id": 42
        },
        "../storage/LibMetaTransactionsStorage.sol": {
            "id": 44
        },
        "./libs/LibSignedCallData.sol": {
            "id": 35
        },
        "./IMetaTransactionsFeature.sol": {
            "id": 20
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 76
        },
        "./ITransformERC20Feature.sol": {
            "id": 25
        },
        "../transformers/IERC20Transformer.sol": {
            "id": 52
        },
        "./ISignatureValidatorFeature.sol": {
            "id": 22
        },
        "./ITokenSpenderFeature.sol": {
            "id": 24
        },
        "./IFeature.sol": {
            "id": 18
        }
    },
    "sourceCodes": {
        "./MetaTransactionsFeature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../errors/LibMetaTransactionsRichErrors.sol\";\nimport \"../fixins/FixinCommon.sol\";\nimport \"../fixins/FixinReentrancyGuard.sol\";\nimport \"../fixins/FixinEIP712.sol\";\nimport \"../migrations/LibMigrate.sol\";\nimport \"../storage/LibMetaTransactionsStorage.sol\";\nimport \"./libs/LibSignedCallData.sol\";\nimport \"./IMetaTransactionsFeature.sol\";\nimport \"./ITransformERC20Feature.sol\";\nimport \"./ISignatureValidatorFeature.sol\";\nimport \"./ITokenSpenderFeature.sol\";\nimport \"./IFeature.sol\";\n\n\n/// @dev MetaTransactions feature.\ncontract MetaTransactionsFeature is\n    IFeature,\n    IMetaTransactionsFeature,\n    FixinCommon,\n    FixinReentrancyGuard,\n    FixinEIP712\n{\n    using LibBytesV06 for bytes;\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Intermediate state vars used by `_executeMetaTransactionPrivate()`\n    ///      to avoid stack overflows.\n    struct ExecuteState {\n        // Sender of the meta-transaction.\n        address sender;\n        // Hash of the meta-transaction data.\n        bytes32 hash;\n        // The meta-transaction data.\n        MetaTransactionData mtx;\n        // The meta-transaction signature (by `mtx.signer`).\n        bytes signature;\n        // The selector of the function being called.\n        bytes4 selector;\n        // The ETH balance of this contract before performing the call.\n        uint256 selfBalance;\n        // The block number at which the meta-transaction was executed.\n        uint256 executedBlockNumber;\n    }\n\n    /// @dev Arguments for a `TransformERC20.transformERC20()` call.\n    struct ExternalTransformERC20Args {\n        IERC20TokenV06 inputToken;\n        IERC20TokenV06 outputToken;\n        uint256 inputTokenAmount;\n        uint256 minOutputTokenAmount;\n        ITransformERC20Feature.Transformation[] transformations;\n    }\n\n    /// @dev Name of this feature.\n    string public constant override FEATURE_NAME = \"MetaTransactions\";\n    /// @dev Version of this feature.\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 0, 0);\n    /// @dev EIP712 typehash of the `MetaTransactionData` struct.\n    bytes32 public immutable MTX_EIP712_TYPEHASH = keccak256(\n        \"MetaTransactionData(\"\n            \"address signer,\"\n            \"address sender,\"\n            \"uint256 minGasPrice,\"\n            \"uint256 maxGasPrice,\"\n            \"uint256 expirationTimeSeconds,\"\n            \"uint256 salt,\"\n            \"bytes callData,\"\n            \"uint256 value,\"\n            \"address feeToken,\"\n            \"uint256 feeAmount\"\n        \")\"\n    );\n\n    /// @dev Refunds up to `msg.value` leftover ETH at the end of the call.\n    modifier refundsAttachedEth() {\n        _;\n        uint256 remainingBalance =\n            LibSafeMathV06.min256(msg.value, address(this).balance);\n        if (remainingBalance > 0) {\n            msg.sender.transfer(remainingBalance);\n        }\n    }\n\n    constructor(address zeroExAddress)\n        public\n        FixinCommon()\n        FixinEIP712(zeroExAddress)\n    {\n        // solhint-disable-next-line no-empty-blocks\n    }\n\n    /// @dev Initialize and register this feature.\n    ///      Should be delegatecalled by `Migrate.migrate()`.\n    /// @return success `LibMigrate.SUCCESS` on success.\n    function migrate()\n        external\n        returns (bytes4 success)\n    {\n        _registerFeatureFunction(this.executeMetaTransaction.selector);\n        _registerFeatureFunction(this.batchExecuteMetaTransactions.selector);\n        _registerFeatureFunction(this._executeMetaTransaction.selector);\n        _registerFeatureFunction(this.getMetaTransactionExecutedBlock.selector);\n        _registerFeatureFunction(this.getMetaTransactionHashExecutedBlock.selector);\n        _registerFeatureFunction(this.getMetaTransactionHash.selector);\n        return LibMigrate.MIGRATE_SUCCESS;\n    }\n\n    /// @dev Execute a single meta-transaction.\n    /// @param mtx The meta-transaction.\n    /// @param signature The signature by `mtx.signer`.\n    /// @return returnResult The ABI-encoded result of the underlying call.\n    function executeMetaTransaction(\n        MetaTransactionData memory mtx,\n        bytes memory signature\n    )\n        public\n        payable\n        override\n        nonReentrant(REENTRANCY_MTX)\n        refundsAttachedEth\n        returns (bytes memory returnResult)\n    {\n        returnResult = _executeMetaTransactionPrivate(\n            msg.sender,\n            mtx,\n            signature\n        );\n    }\n\n    /// @dev Execute multiple meta-transactions.\n    /// @param mtxs The meta-transactions.\n    /// @param signatures The signature by each respective `mtx.signer`.\n    /// @return returnResults The ABI-encoded results of the underlying calls.\n    function batchExecuteMetaTransactions(\n        MetaTransactionData[] memory mtxs,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        override\n        nonReentrant(REENTRANCY_MTX)\n        refundsAttachedEth\n        returns (bytes[] memory returnResults)\n    {\n        if (mtxs.length != signatures.length) {\n            LibMetaTransactionsRichErrors.InvalidMetaTransactionsArrayLengthsError(\n                mtxs.length,\n                signatures.length\n            ).rrevert();\n        }\n        returnResults = new bytes[](mtxs.length);\n        for (uint256 i = 0; i < mtxs.length; ++i) {\n            returnResults[i] = _executeMetaTransactionPrivate(\n                msg.sender,\n                mtxs[i],\n                signatures[i]\n            );\n        }\n    }\n\n    /// @dev Execute a meta-transaction via `sender`. Privileged variant.\n    ///      Only callable from within.\n    /// @param sender Who is executing the meta-transaction.\n    /// @param mtx The meta-transaction.\n    /// @param signature The signature by `mtx.signer`.\n    /// @return returnResult The ABI-encoded result of the underlying call.\n    function _executeMetaTransaction(\n        address sender,\n        MetaTransactionData memory mtx,\n        bytes memory signature\n    )\n        public\n        payable\n        override\n        onlySelf\n        returns (bytes memory returnResult)\n    {\n        return _executeMetaTransactionPrivate(sender, mtx, signature);\n    }\n\n    /// @dev Get the block at which a meta-transaction has been executed.\n    /// @param mtx The meta-transaction.\n    /// @return blockNumber The block height when the meta-transactioin was executed.\n    function getMetaTransactionExecutedBlock(MetaTransactionData memory mtx)\n        public\n        override\n        view\n        returns (uint256 blockNumber)\n    {\n        return getMetaTransactionHashExecutedBlock(getMetaTransactionHash(mtx));\n    }\n\n    /// @dev Get the block at which a meta-transaction hash has been executed.\n    /// @param mtxHash The meta-transaction hash.\n    /// @return blockNumber The block height when the meta-transactioin was executed.\n    function getMetaTransactionHashExecutedBlock(bytes32 mtxHash)\n        public\n        override\n        view\n        returns (uint256 blockNumber)\n    {\n        return LibMetaTransactionsStorage.getStorage().mtxHashToExecutedBlockNumber[mtxHash];\n    }\n\n    /// @dev Get the EIP712 hash of a meta-transaction.\n    /// @param mtx The meta-transaction.\n    /// @return mtxHash The EIP712 hash of `mtx`.\n    function getMetaTransactionHash(MetaTransactionData memory mtx)\n        public\n        override\n        view\n        returns (bytes32 mtxHash)\n    {\n        return _getEIP712Hash(keccak256(abi.encode(\n            MTX_EIP712_TYPEHASH,\n            mtx.signer,\n            mtx.sender,\n            mtx.minGasPrice,\n            mtx.maxGasPrice,\n            mtx.expirationTimeSeconds,\n            mtx.salt,\n            keccak256(mtx.callData),\n            mtx.value,\n            mtx.feeToken,\n            mtx.feeAmount\n        )));\n    }\n\n    /// @dev Execute a meta-transaction by `sender`. Low-level, hidden variant.\n    /// @param sender Who is executing the meta-transaction..\n    /// @param mtx The meta-transaction.\n    /// @param signature The signature by `mtx.signer`.\n    /// @return returnResult The ABI-encoded result of the underlying call.\n    function _executeMetaTransactionPrivate(\n        address sender,\n        MetaTransactionData memory mtx,\n        bytes memory signature\n    )\n        private\n        returns (bytes memory returnResult)\n    {\n        ExecuteState memory state;\n        state.sender = sender;\n        state.hash = getMetaTransactionHash(mtx);\n        state.mtx = mtx;\n        state.signature = signature;\n\n        _validateMetaTransaction(state);\n\n        // Mark the transaction executed by storing the block at which it was executed.\n        // Currently the block number just indicates that the mtx was executed and\n        // serves no other purpose from within this contract.\n        LibMetaTransactionsStorage.getStorage()\n            .mtxHashToExecutedBlockNumber[state.hash] = block.number;\n\n        // Pay the fee to the sender.\n        if (mtx.feeAmount > 0) {\n            ITokenSpenderFeature(address(this))._spendERC20Tokens(\n                mtx.feeToken,\n                mtx.signer, // From the signer.\n                sender, // To the sender.\n                mtx.feeAmount\n            );\n        }\n\n        // Execute the call based on the selector.\n        state.selector = mtx.callData.readBytes4(0);\n        if (state.selector == ITransformERC20Feature.transformERC20.selector) {\n            returnResult = _executeTransformERC20Call(state);\n        } else {\n            LibMetaTransactionsRichErrors\n                .MetaTransactionUnsupportedFunctionError(state.hash, state.selector)\n                .rrevert();\n        }\n        emit MetaTransactionExecuted(\n            state.hash,\n            state.selector,\n            mtx.signer,\n            mtx.sender\n        );\n    }\n\n    /// @dev Validate that a meta-transaction is executable.\n    function _validateMetaTransaction(ExecuteState memory state)\n        private\n        view\n    {\n        // Must be from the required sender, if set.\n        if (state.mtx.sender != address(0) && state.mtx.sender != state.sender) {\n            LibMetaTransactionsRichErrors\n                .MetaTransactionWrongSenderError(\n                    state.hash,\n                    state.sender,\n                    state.mtx.sender\n                ).rrevert();\n        }\n        // Must not be expired.\n        if (state.mtx.expirationTimeSeconds <= block.timestamp) {\n            LibMetaTransactionsRichErrors\n                .MetaTransactionExpiredError(\n                    state.hash,\n                    block.timestamp,\n                    state.mtx.expirationTimeSeconds\n                ).rrevert();\n        }\n        // Must have a valid gas price.\n        if (state.mtx.minGasPrice > tx.gasprice || state.mtx.maxGasPrice < tx.gasprice) {\n            LibMetaTransactionsRichErrors\n                .MetaTransactionGasPriceError(\n                    state.hash,\n                    tx.gasprice,\n                    state.mtx.minGasPrice,\n                    state.mtx.maxGasPrice\n                ).rrevert();\n        }\n        // Must have enough ETH.\n        state.selfBalance  = address(this).balance;\n        if (state.mtx.value > state.selfBalance) {\n            LibMetaTransactionsRichErrors\n                .MetaTransactionInsufficientEthError(\n                    state.hash,\n                    state.selfBalance,\n                    state.mtx.value\n                ).rrevert();\n        }\n        // Must be signed by signer.\n        try\n            ISignatureValidatorFeature(address(this))\n                .validateHashSignature(state.hash, state.mtx.signer, state.signature)\n        {}\n        catch (bytes memory err) {\n            LibMetaTransactionsRichErrors\n                .MetaTransactionInvalidSignatureError(\n                    state.hash,\n                    state.signature,\n                    err\n                ).rrevert();\n        }\n        // Transaction must not have been already executed.\n        state.executedBlockNumber = LibMetaTransactionsStorage\n            .getStorage().mtxHashToExecutedBlockNumber[state.hash];\n        if (state.executedBlockNumber != 0) {\n            LibMetaTransactionsRichErrors\n                .MetaTransactionAlreadyExecutedError(\n                    state.hash,\n                    state.executedBlockNumber\n                ).rrevert();\n        }\n    }\n\n    /// @dev Execute a `ITransformERC20Feature.transformERC20()` meta-transaction call\n    ///      by decoding the call args and translating the call to the internal\n    ///      `ITransformERC20Feature._transformERC20()` variant, where we can override\n    ///      the taker address.\n    function _executeTransformERC20Call(ExecuteState memory state)\n        private\n        returns (bytes memory returnResult)\n    {\n        // HACK(dorothy-zbornak): `abi.decode()` with the individual args\n        // will cause a stack overflow. But we can prefix the call data with an\n        // offset to transform it into the encoding for the equivalent single struct arg,\n        // since decoding a single struct arg consumes far less stack space than\n        // decoding multiple struct args.\n\n        // Where the encoding for multiple args (with the selector ommitted)\n        // would typically look like:\n        // | argument                 |  offset |\n        // |--------------------------|---------|\n        // | inputToken               |       0 |\n        // | outputToken              |      32 |\n        // | inputTokenAmount         |      64 |\n        // | minOutputTokenAmount     |      96 |\n        // | transformations (offset) |     128 | = 32\n        // | transformations (data)   |     160 |\n\n        // We will ABI-decode a single struct arg copy with the layout:\n        // | argument                 |  offset |\n        // |--------------------------|---------|\n        // | (arg 1 offset)           |       0 | = 32\n        // | inputToken               |      32 |\n        // | outputToken              |      64 |\n        // | inputTokenAmount         |      96 |\n        // | minOutputTokenAmount     |     128 |\n        // | transformations (offset) |     160 | = 32\n        // | transformations (data)   |     192 |\n\n        ExternalTransformERC20Args memory args;\n        {\n            bytes memory encodedStructArgs = new bytes(state.mtx.callData.length - 4 + 32);\n            // Copy the args data from the original, after the new struct offset prefix.\n            bytes memory fromCallData = state.mtx.callData;\n            assert(fromCallData.length >= 160);\n            uint256 fromMem;\n            uint256 toMem;\n            assembly {\n                // Prefix the calldata with a struct offset,\n                // which points to just one word over.\n                mstore(add(encodedStructArgs, 32), 32)\n                // Copy everything after the selector.\n                fromMem := add(fromCallData, 36)\n                // Start copying after the struct offset.\n                toMem := add(encodedStructArgs, 64)\n            }\n            LibBytesV06.memCopy(toMem, fromMem, fromCallData.length - 4);\n            // Decode call args for `ITransformERC20Feature.transformERC20()` as a struct.\n            args = abi.decode(encodedStructArgs, (ExternalTransformERC20Args));\n        }\n        // Parse the signature and hash out of the calldata so `_transformERC20()`\n        // can authenticate it.\n        (bytes32 callDataHash, bytes memory callDataSignature) =\n            LibSignedCallData.parseCallData(state.mtx.callData);\n        // Call `ITransformERC20Feature._transformERC20()` (internal variant).\n        return _callSelf(\n            state.hash,\n            abi.encodeWithSelector(\n                ITransformERC20Feature._transformERC20.selector,\n                ITransformERC20Feature.TransformERC20Args({\n                    taker: state.mtx.signer, // taker is mtx signer\n                    inputToken: args.inputToken,\n                    outputToken: args.outputToken,\n                    inputTokenAmount: args.inputTokenAmount,\n                    minOutputTokenAmount: args.minOutputTokenAmount,\n                    transformations: args.transformations,\n                    callDataHash: callDataHash,\n                    callDataSignature: callDataSignature\n              })\n            ),\n            state.mtx.value\n        );\n    }\n\n    /// @dev Make an arbitrary internal, meta-transaction call.\n    ///      Warning: Do not let unadulterated `callData` into this function.\n    function _callSelf(bytes32 hash, bytes memory callData, uint256 value)\n        private\n        returns (bytes memory returnResult)\n    {\n        bool success;\n        (success, returnResult) = address(this).call{value: value}(callData);\n        if (!success) {\n            LibMetaTransactionsRichErrors.MetaTransactionCallFailedError(\n                hash,\n                callData,\n                returnResult\n            ).rrevert();\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "../errors/LibMetaTransactionsRichErrors.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMetaTransactionsRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function InvalidMetaTransactionsArrayLengthsError(\n        uint256 mtxCount,\n        uint256 signatureCount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidMetaTransactionsArrayLengthsError(uint256,uint256)\")),\n            mtxCount,\n            signatureCount\n        );\n    }\n\n    function MetaTransactionUnsupportedFunctionError(\n        bytes32 mtxHash,\n        bytes4 selector\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MetaTransactionUnsupportedFunctionError(bytes32,bytes4)\")),\n            mtxHash,\n            selector\n        );\n    }\n\n    function MetaTransactionWrongSenderError(\n        bytes32 mtxHash,\n        address sender,\n        address expectedSender\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MetaTransactionWrongSenderError(bytes32,address,address)\")),\n            mtxHash,\n            sender,\n            expectedSender\n        );\n    }\n\n    function MetaTransactionExpiredError(\n        bytes32 mtxHash,\n        uint256 time,\n        uint256 expirationTime\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MetaTransactionExpiredError(bytes32,uint256,uint256)\")),\n            mtxHash,\n            time,\n            expirationTime\n        );\n    }\n\n    function MetaTransactionGasPriceError(\n        bytes32 mtxHash,\n        uint256 gasPrice,\n        uint256 minGasPrice,\n        uint256 maxGasPrice\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MetaTransactionGasPriceError(bytes32,uint256,uint256,uint256)\")),\n            mtxHash,\n            gasPrice,\n            minGasPrice,\n            maxGasPrice\n        );\n    }\n\n    function MetaTransactionInsufficientEthError(\n        bytes32 mtxHash,\n        uint256 ethBalance,\n        uint256 ethRequired\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MetaTransactionInsufficientEthError(bytes32,uint256,uint256)\")),\n            mtxHash,\n            ethBalance,\n            ethRequired\n        );\n    }\n\n    function MetaTransactionInvalidSignatureError(\n        bytes32 mtxHash,\n        bytes memory signature,\n        bytes memory errData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MetaTransactionInvalidSignatureError(bytes32,bytes,bytes)\")),\n            mtxHash,\n            signature,\n            errData\n        );\n    }\n\n    function MetaTransactionAlreadyExecutedError(\n        bytes32 mtxHash,\n        uint256 executedBlockNumber\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MetaTransactionAlreadyExecutedError(bytes32,uint256)\")),\n            mtxHash,\n            executedBlockNumber\n        );\n    }\n\n    function MetaTransactionCallFailedError(\n        bytes32 mtxHash,\n        bytes memory callData,\n        bytes memory returnData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MetaTransactionCallFailedError(bytes32,bytes,bytes)\")),\n            mtxHash,\n            callData,\n            returnData\n        );\n    }\n}\n",
        "../fixins/FixinCommon.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\nimport \"../features/IOwnableFeature.sol\";\nimport \"../features/ISimpleFunctionRegistryFeature.sol\";\n\n\n/// @dev Common feature utilities.\nabstract contract FixinCommon {\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev The implementation address of this feature.\n    address internal immutable _implementation;\n\n    /// @dev The caller must be this contract.\n    modifier onlySelf() virtual {\n        if (msg.sender != address(this)) {\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\n        }\n        _;\n    }\n\n    /// @dev The caller of this function must be the owner.\n    modifier onlyOwner() virtual {\n        {\n            address owner = IOwnableFeature(address(this)).owner();\n            if (msg.sender != owner) {\n                LibOwnableRichErrors.OnlyOwnerError(\n                    msg.sender,\n                    owner\n                ).rrevert();\n            }\n        }\n        _;\n    }\n\n    constructor() internal {\n        // Remember this feature's original address.\n        _implementation = address(this);\n    }\n\n    /// @dev Registers a function implemented by this feature at `_implementation`.\n    ///      Can and should only be called within a `migrate()`.\n    /// @param selector The selector of the function whose implementation\n    ///        is at `_implementation`.\n    function _registerFeatureFunction(bytes4 selector)\n        internal\n    {\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\n    }\n\n    /// @dev Encode a feature version as a `uint256`.\n    /// @param major The major version number of the feature.\n    /// @param minor The minor version number of the feature.\n    /// @param revision The revision number of the feature.\n    /// @return encodedVersion The encoded version number.\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\n        internal\n        pure\n        returns (uint256 encodedVersion)\n    {\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\n    }\n}\n",
        "../errors/LibCommonRichErrors.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibCommonRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyCallableBySelfError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableBySelfError(address)\")),\n            sender\n        );\n    }\n\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IllegalReentrancyError(bytes4,uint256)\")),\n            selector,\n            reentrancyFlags\n        );\n    }\n}\n",
        "../errors/LibOwnableRichErrors.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOwnerError(address,address)\")),\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n        );\n    }\n\n    function MigrateCallFailedError(address target, bytes memory resultData)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MigrateCallFailedError(address,bytes)\")),\n            target,\n            resultData\n        );\n    }\n}\n",
        "./IOwnableFeature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\n/// @dev Owner management and migration features.\ninterface IOwnableFeature is\n    IOwnableV06\n{\n    /// @dev Emitted when `migrate()` is called.\n    /// @param caller The caller of `migrate()`.\n    /// @param migrator The migration contract.\n    /// @param newOwner The address of the new owner.\n    event Migrated(address caller, address migrator, address newOwner);\n\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\n    ///      The result of the function being called should be the magic bytes\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\n    ///      The owner will be temporarily set to `address(this)` inside the call.\n    ///      Before returning, the owner will be set to `newOwner`.\n    /// @param target The migrator contract address.\n    /// @param newOwner The address of the new owner.\n    /// @param data The call data.\n    function migrate(address target, bytes calldata data, address newOwner) external;\n}\n",
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n",
        "./ISimpleFunctionRegistryFeature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic registry management features.\ninterface ISimpleFunctionRegistryFeature {\n\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\n    /// @param selector The function selector.\n    /// @param oldImpl The implementation contract address being replaced.\n    /// @param newImpl The replacement implementation contract address.\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\n\n    /// @dev Roll back to a prior implementation of a function.\n    /// @param selector The function selector.\n    /// @param targetImpl The address of an older implementation of the function.\n    function rollback(bytes4 selector, address targetImpl) external;\n\n    /// @dev Register or replace a function.\n    /// @param selector The function selector.\n    /// @param impl The implementation contract for the function.\n    function extend(bytes4 selector, address impl) external;\n\n    /// @dev Retrieve the length of the rollback history for a function.\n    /// @param selector The function selector.\n    /// @return rollbackLength The number of items in the rollback history for\n    ///         the function.\n    function getRollbackLength(bytes4 selector)\n        external\n        view\n        returns (uint256 rollbackLength);\n\n    /// @dev Retrieve an entry in the rollback history for a function.\n    /// @param selector The function selector.\n    /// @param idx The index in the rollback history.\n    /// @return impl An implementation address for the function at\n    ///         index `idx`.\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\n        external\n        view\n        returns (address impl);\n}\n",
        "../fixins/FixinReentrancyGuard.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../storage/LibReentrancyGuardStorage.sol\";\n\n\n/// @dev Common feature utilities.\nabstract contract FixinReentrancyGuard {\n\n    using LibRichErrorsV06 for bytes;\n    using LibBytesV06 for bytes;\n\n    // Combinable reentrancy flags.\n    /// @dev Reentrancy guard flag for meta-transaction functions.\n    uint256 constant internal REENTRANCY_MTX = 0x1;\n\n    /// @dev Cannot reenter a function with the same reentrancy guard flags.\n    modifier nonReentrant(uint256 reentrancyFlags) virtual {\n        LibReentrancyGuardStorage.Storage storage stor =\n            LibReentrancyGuardStorage.getStorage();\n        {\n            uint256 currentFlags = stor.reentrancyFlags;\n            // Revert if any bits in `reentrancyFlags` has already been set.\n            if ((currentFlags & reentrancyFlags) != 0) {\n                LibCommonRichErrors.IllegalReentrancyError(\n                    msg.data.readBytes4(0),\n                    reentrancyFlags\n                ).rrevert();\n            }\n            // Update reentrancy flags.\n            stor.reentrancyFlags = currentFlags | reentrancyFlags;\n        }\n\n        _;\n\n        // Clear reentrancy flags.\n        stor.reentrancyFlags = stor.reentrancyFlags & (~reentrancyFlags);\n    }\n}\n",
        "../storage/LibReentrancyGuardStorage.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"./LibStorage.sol\";\nimport \"../external/IFlashWallet.sol\";\n\n\n/// @dev Storage helpers for the `FixinReentrancyGuard` mixin.\nlibrary LibReentrancyGuardStorage {\n\n    /// @dev Storage bucket for this feature.\n    struct Storage {\n        // Reentrancy flags set whenever a non-reentrant function is entered\n        // and cleared when it is exited.\n        uint256 reentrancyFlags;\n    }\n\n    /// @dev Get the storage bucket for this contract.\n    function getStorage() internal pure returns (Storage storage stor) {\n        uint256 storageSlot = LibStorage.getStorageSlot(\n            LibStorage.StorageId.ReentrancyGuard\n        );\n        // Dip into assembly to change the slot pointed to by the local\n        // variable `stor`.\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\n        assembly { stor_slot := storageSlot }\n    }\n}\n",
        "../storage/LibStorage.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Common storage helpers\nlibrary LibStorage {\n\n    /// @dev What to bit-shift a storage ID by to get its slot.\n    ///      This gives us a maximum of 2**128 inline fields in each bucket.\n    uint256 private constant STORAGE_SLOT_EXP = 128;\n\n    /// @dev Storage IDs for feature storage buckets.\n    ///      WARNING: APPEND-ONLY.\n    enum StorageId {\n        Proxy,\n        SimpleFunctionRegistry,\n        Ownable,\n        TokenSpender,\n        TransformERC20,\n        MetaTransactions,\n        ReentrancyGuard,\n        LiquidityProvider\n    }\n\n    /// @dev Get the storage slot given a storage ID. We assign unique, well-spaced\n    ///     slots to storage bucket variables to ensure they do not overlap.\n    ///     See: https://solidity.readthedocs.io/en/v0.6.6/assembly.html#access-to-external-variables-functions-and-libraries\n    /// @param storageId An entry in `StorageId`\n    /// @return slot The storage slot.\n    function getStorageSlot(StorageId storageId)\n        internal\n        pure\n        returns (uint256 slot)\n    {\n        // This should never overflow with a reasonable `STORAGE_SLOT_EXP`\n        // because Solidity will do a range check on `storageId` during the cast.\n        return (uint256(storageId) + 1) << STORAGE_SLOT_EXP;\n    }\n}\n",
        "../external/IFlashWallet.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n/// @dev A contract that can execute arbitrary calls from its owner.\ninterface IFlashWallet {\n\n    /// @dev Execute an arbitrary call. Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @param value Ether to attach to the call.\n    /// @return resultData The data returned by the call.\n    function executeCall(\n        address payable target,\n        bytes calldata callData,\n        uint256 value\n    )\n        external\n        payable\n        returns (bytes memory resultData);\n\n    /// @dev Execute an arbitrary delegatecall, in the context of this puppet.\n    ///      Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @return resultData The data returned by the call.\n    function executeDelegateCall(\n        address payable target,\n        bytes calldata callData\n    )\n        external\n        payable\n        returns (bytes memory resultData);\n\n    /// @dev Allows the puppet to receive ETH.\n    receive() external payable;\n\n    /// @dev Fetch the immutable owner/deployer of this contract.\n    /// @return owner_ The immutable owner/deployer/\n    function owner() external view returns (address owner_);\n}\n",
        "../fixins/FixinEIP712.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\n/// @dev EIP712 helpers for features.\nabstract contract FixinEIP712 {\n\n    /// @dev The domain hash separator for the entire exchange proxy.\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\n\n    constructor(address zeroExAddress) internal {\n        // Compute `EIP712_DOMAIN_SEPARATOR`\n        {\n            uint256 chainId;\n            assembly { chainId := chainid() }\n            EIP712_DOMAIN_SEPARATOR = keccak256(\n                abi.encode(\n                    keccak256(\n                        \"EIP712Domain(\"\n                            \"string name,\"\n                            \"string version,\"\n                            \"uint256 chainId,\"\n                            \"address verifyingContract\"\n                        \")\"\n                    ),\n                    keccak256(\"ZeroEx\"),\n                    keccak256(\"1.0.0\"),\n                    chainId,\n                    zeroExAddress\n                )\n            );\n        }\n    }\n\n    function _getEIP712Hash(bytes32 structHash)\n        internal\n        view\n        returns (bytes32 eip712Hash)\n    {\n        return keccak256(abi.encodePacked(\n            hex\"1901\",\n            EIP712_DOMAIN_SEPARATOR,\n            structHash\n        ));\n    }\n}\n",
        "../migrations/LibMigrate.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\nlibrary LibMigrate {\n\n    /// @dev Magic bytes returned by a migrator to indicate success.\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\n    /// @param target The call target.\n    /// @param data The call data.\n    function delegatecallMigrateFunction(\n        address target,\n        bytes memory data\n    )\n        internal\n    {\n        (bool success, bytes memory resultData) = target.delegatecall(data);\n        if (!success ||\n            resultData.length != 32 ||\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\n        {\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\n        }\n    }\n}\n",
        "../storage/LibMetaTransactionsStorage.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"./LibStorage.sol\";\n\n\n/// @dev Storage helpers for the `MetaTransactions` feature.\nlibrary LibMetaTransactionsStorage {\n\n    /// @dev Storage bucket for this feature.\n    struct Storage {\n        // The block number when a hash was executed.\n        mapping (bytes32 => uint256) mtxHashToExecutedBlockNumber;\n    }\n\n    /// @dev Get the storage bucket for this contract.\n    function getStorage() internal pure returns (Storage storage stor) {\n        uint256 storageSlot = LibStorage.getStorageSlot(\n            LibStorage.StorageId.MetaTransactions\n        );\n        // Dip into assembly to change the slot pointed to by the local\n        // variable `stor`.\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\n        assembly { stor_slot := storageSlot }\n    }\n}\n",
        "./libs/LibSignedCallData.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\n/// @dev Library for working with signed calldata.\nlibrary LibSignedCallData {\n    using LibBytesV06 for bytes;\n\n    // bytes4(keccak256('SignedCallDataSignature(bytes)'))\n    bytes4 constant private SIGNATURE_SELECTOR = 0xf86d1d92;\n\n    /// @dev Try to parse potentially signed calldata into its hash and signature\n    ///      components. Signed calldata has signature data appended to it.\n    /// @param callData the raw call data.\n    /// @return callDataHash If a signature is detected, this will be the hash of\n    ///         the bytes preceding the signature data. Otherwise, this\n    ///         will be the hash of the entire `callData`.\n    /// @return signature The signature bytes, if present.\n    function parseCallData(bytes memory callData)\n        internal\n        pure\n        returns (bytes32 callDataHash, bytes memory signature)\n    {\n        // Signed calldata has a 70 byte signature appended as:\n        // ```\n        //   abi.encodePacked(\n        //     callData,\n        //     bytes4(keccak256('SignedCallDataSignature(bytes)')),\n        //     signature // 66 bytes\n        //   );\n        // ```\n\n        // Try to detect an appended signature. This isn't foolproof, but an\n        // accidental false positive should highly unlikely. Additinally, the\n        // signature would also have to pass verification, so the risk here is\n        // low.\n        if (\n            // Signed callData has to be at least 70 bytes long.\n            callData.length < 70 ||\n            // The bytes4 at offset -70 should equal `SIGNATURE_SELECTOR`.\n            SIGNATURE_SELECTOR != callData.readBytes4(callData.length - 70)\n        ) {\n            return (keccak256(callData), signature);\n        }\n        // Consider everything before the signature selector as the original\n        // calldata and everything after as the signature.\n        assembly {\n            callDataHash := keccak256(add(callData, 32), sub(mload(callData), 70))\n        }\n        signature = callData.slice(callData.length - 66, callData.length);\n    }\n}\n",
        "./IMetaTransactionsFeature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev Meta-transactions feature.\ninterface IMetaTransactionsFeature {\n\n    /// @dev Describes an exchange proxy meta transaction.\n    struct MetaTransactionData {\n        // Signer of meta-transaction. On whose behalf to execute the MTX.\n        address payable signer;\n        // Required sender, or NULL for anyone.\n        address sender;\n        // Minimum gas price.\n        uint256 minGasPrice;\n        // Maximum gas price.\n        uint256 maxGasPrice;\n        // MTX is invalid after this time.\n        uint256 expirationTimeSeconds;\n        // Nonce to make this MTX unique.\n        uint256 salt;\n        // Encoded call data to a function on the exchange proxy.\n        bytes callData;\n        // Amount of ETH to attach to the call.\n        uint256 value;\n        // ERC20 fee `signer` pays `sender`.\n        IERC20TokenV06 feeToken;\n        // ERC20 fee amount.\n        uint256 feeAmount;\n    }\n\n    /// @dev Emitted whenever a meta-transaction is executed via\n    ///      `executeMetaTransaction()` or `executeMetaTransactions()`.\n    /// @param hash The meta-transaction hash.\n    /// @param selector The selector of the function being executed.\n    /// @param signer Who to execute the meta-transaction on behalf of.\n    /// @param sender Who executed the meta-transaction.\n    event MetaTransactionExecuted(\n        bytes32 hash,\n        bytes4 indexed selector,\n        address signer,\n        address sender\n    );\n\n    /// @dev Execute a single meta-transaction.\n    /// @param mtx The meta-transaction.\n    /// @param signature The signature by `mtx.signer`.\n    /// @return returnResult The ABI-encoded result of the underlying call.\n    function executeMetaTransaction(\n        MetaTransactionData calldata mtx,\n        bytes calldata signature\n    )\n        external\n        payable\n        returns (bytes memory returnResult);\n\n    /// @dev Execute multiple meta-transactions.\n    /// @param mtxs The meta-transactions.\n    /// @param signatures The signature by each respective `mtx.signer`.\n    /// @return returnResults The ABI-encoded results of the underlying calls.\n    function batchExecuteMetaTransactions(\n        MetaTransactionData[] calldata mtxs,\n        bytes[] calldata signatures\n    )\n        external\n        payable\n        returns (bytes[] memory returnResults);\n\n    /// @dev Execute a meta-transaction via `sender`. Privileged variant.\n    ///      Only callable from within.\n    /// @param sender Who is executing the meta-transaction..\n    /// @param mtx The meta-transaction.\n    /// @param signature The signature by `mtx.signer`.\n    /// @return returnResult The ABI-encoded result of the underlying call.\n    function _executeMetaTransaction(\n        address sender,\n        MetaTransactionData calldata mtx,\n        bytes calldata signature\n    )\n        external\n        payable\n        returns (bytes memory returnResult);\n\n    /// @dev Get the block at which a meta-transaction has been executed.\n    /// @param mtx The meta-transaction.\n    /// @return blockNumber The block height when the meta-transactioin was executed.\n    function getMetaTransactionExecutedBlock(MetaTransactionData calldata mtx)\n        external\n        view\n        returns (uint256 blockNumber);\n\n    /// @dev Get the block at which a meta-transaction hash has been executed.\n    /// @param mtxHash The meta-transaction hash.\n    /// @return blockNumber The block height when the meta-transactioin was executed.\n    function getMetaTransactionHashExecutedBlock(bytes32 mtxHash)\n        external\n        view\n        returns (uint256 blockNumber);\n\n    /// @dev Get the EIP712 hash of a meta-transaction.\n    /// @param mtx The meta-transaction.\n    /// @return mtxHash The EIP712 hash of `mtx`.\n    function getMetaTransactionHash(MetaTransactionData calldata mtx)\n        external\n        view\n        returns (bytes32 mtxHash);\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "./ITransformERC20Feature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../transformers/IERC20Transformer.sol\";\nimport \"../external/IFlashWallet.sol\";\n\n\n/// @dev Feature to composably transform between ERC20 tokens.\ninterface ITransformERC20Feature {\n\n    /// @dev Defines a transformation to run in `transformERC20()`.\n    struct Transformation {\n        // The deployment nonce for the transformer.\n        // The address of the transformer contract will be derived from this\n        // value.\n        uint32 deploymentNonce;\n        // Arbitrary data to pass to the transformer.\n        bytes data;\n    }\n\n    /// @dev Arguments for `_transformERC20()`.\n    struct TransformERC20Args {\n        // The taker address.\n        address payable taker;\n        // The token being provided by the taker.\n        // If `0xeee...`, ETH is implied and should be provided with the call.`\n        IERC20TokenV06 inputToken;\n        // The token to be acquired by the taker.\n        // `0xeee...` implies ETH.\n        IERC20TokenV06 outputToken;\n        // The amount of `inputToken` to take from the taker.\n        // If set to `uint256(-1)`, the entire spendable balance of the taker\n        // will be solt.\n        uint256 inputTokenAmount;\n        // The minimum amount of `outputToken` the taker\n        // must receive for the entire transformation to succeed. If set to zero,\n        // the minimum output token transfer will not be asserted.\n        uint256 minOutputTokenAmount;\n        // The transformations to execute on the token balance(s)\n        // in sequence.\n        Transformation[] transformations;\n        // The hash of the calldata for the `transformERC20()` call.\n        bytes32 callDataHash;\n        // The signature for `callDataHash` signed by `getQuoteSigner()`.\n        bytes callDataSignature;\n    }\n\n    /// @dev Raised upon a successful `transformERC20`.\n    /// @param taker The taker (caller) address.\n    /// @param inputToken The token being provided by the taker.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the taker.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the taker.\n    /// @param outputTokenAmount The amount of `outputToken` received by the taker.\n    event TransformedERC20(\n        address indexed taker,\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    /// @dev Raised when `setTransformerDeployer()` is called.\n    /// @param transformerDeployer The new deployer address.\n    event TransformerDeployerUpdated(address transformerDeployer);\n\n    /// @dev Raised when `setQuoteSigner()` is called.\n    /// @param quoteSigner The new quote signer.\n    event QuoteSignerUpdated(address quoteSigner);\n\n    /// @dev Replace the allowed deployer for transformers.\n    ///      Only callable by the owner.\n    /// @param transformerDeployer The address of the new trusted deployer\n    ///        for transformers.\n    function setTransformerDeployer(address transformerDeployer)\n        external;\n\n    /// @dev Replace the optional signer for `transformERC20()` calldata.\n    ///      Only callable by the owner.\n    /// @param quoteSigner The address of the new calldata signer.\n    function setQuoteSigner(address quoteSigner)\n        external;\n\n    /// @dev Deploy a new flash wallet instance and replace the current one with it.\n    ///      Useful if we somehow break the current wallet instance.\n    ///       Only callable by the owner.\n    /// @return wallet The new wallet instance.\n    function createTransformWallet()\n        external\n        returns (IFlashWallet wallet);\n\n    /// @dev Executes a series of transformations to convert an ERC20 `inputToken`\n    ///      to an ERC20 `outputToken`.\n    /// @param inputToken The token being provided by the sender.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the sender.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the sender.\n    /// @param minOutputTokenAmount The minimum amount of `outputToken` the sender\n    ///        must receive for the entire transformation to succeed.\n    /// @param transformations The transformations to execute on the token balance(s)\n    ///        in sequence.\n    /// @return outputTokenAmount The amount of `outputToken` received by the sender.\n    function transformERC20(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 minOutputTokenAmount,\n        Transformation[] calldata transformations\n    )\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n\n    /// @dev Internal version of `transformERC20()`. Only callable from within.\n    /// @param args A `TransformERC20Args` struct.\n    /// @return outputTokenAmount The amount of `outputToken` received by the taker.\n    function _transformERC20(TransformERC20Args calldata args)\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n\n    /// @dev Return the current wallet instance that will serve as the execution\n    ///      context for transformations.\n    /// @return wallet The wallet instance.\n    function getTransformWallet()\n        external\n        view\n        returns (IFlashWallet wallet);\n\n    /// @dev Return the allowed deployer for transformers.\n    /// @return deployer The transform deployer address.\n    function getTransformerDeployer()\n        external\n        view\n        returns (address deployer);\n\n    /// @dev Return the optional signer for `transformERC20()` calldata.\n    /// @return signer The transform deployer address.\n    function getQuoteSigner()\n        external\n        view\n        returns (address signer);\n}\n",
        "../transformers/IERC20Transformer.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev A transformation callback used in `TransformERC20.transformERC20()`.\ninterface IERC20Transformer {\n\n    /// @dev Context information to pass into `transform()` by `TransformERC20.transformERC20()`.\n    struct TransformContext {\n        // The hash of the `TransformERC20.transformERC20()` calldata.\n        // Will be null if the calldata is not signed.\n        bytes32 callDataHash;\n        // The caller of `TransformERC20.transformERC20()`.\n        address payable sender;\n        // taker The taker address, which may be distinct from `sender` in the case\n        // meta-transactions.\n        address payable taker;\n        // Arbitrary data to pass to the transformer.\n        bytes data;\n    }\n\n    /// @dev Called from `TransformERC20.transformERC20()`. This will be\n    ///      delegatecalled in the context of the FlashWallet instance being used.\n    /// @param context Context information.\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\n    function transform(TransformContext calldata context)\n        external\n        returns (bytes4 success);\n}\n",
        "./ISignatureValidatorFeature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Feature for validating signatures.\ninterface ISignatureValidatorFeature {\n\n   /// @dev Allowed signature types.\n    enum SignatureType {\n        Illegal,                     // 0x00, default value\n        Invalid,                     // 0x01\n        EIP712,                      // 0x02\n        EthSign,                     // 0x03\n        NSignatureTypes              // 0x04, number of signature types. Always leave at end.\n    }\n\n    /// @dev Validate that `hash` was signed by `signer` given `signature`.\n    ///      Reverts otherwise.\n    /// @param hash The hash that was signed.\n    /// @param signer The signer of the hash.\n    /// @param signature The signature. The last byte of this signature should\n    ///        be a member of the `SignatureType` enum.\n    function validateHashSignature(\n        bytes32 hash,\n        address signer,\n        bytes calldata signature\n    )\n        external\n        view;\n\n    /// @dev Check that `hash` was signed by `signer` given `signature`.\n    /// @param hash The hash that was signed.\n    /// @param signer The signer of the hash.\n    /// @param signature The signature. The last byte of this signature should\n    ///        be a member of the `SignatureType` enum.\n    /// @return isValid `true` on success.\n    function isValidHashSignature(\n        bytes32 hash,\n        address signer,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bool isValid);\n}\n",
        "./ITokenSpenderFeature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev Feature that allows spending token allowances.\ninterface ITokenSpenderFeature {\n\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\n    ///      Only callable from within.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _spendERC20Tokens(\n        IERC20TokenV06 token,\n        address owner,\n        address to,\n        uint256 amount\n    )\n        external;\n\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\n    ///      pulled from `owner`.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @return amount The amount of tokens that can be pulled.\n    function getSpendableERC20BalanceOf(IERC20TokenV06 token, address owner)\n        external\n        view\n        returns (uint256 amount);\n\n    /// @dev Get the address of the allowance target.\n    /// @return target The target of token allowances.\n    function getAllowanceTarget() external view returns (address target);\n}\n",
        "./IFeature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic interface for a feature contract.\ninterface IFeature {\n\n    // solhint-disable func-name-mixedcase\n\n    /// @dev The name of this feature set.\n    function FEATURE_NAME() external view returns (string memory name);\n\n    /// @dev The version of this feature set.\n    function FEATURE_VERSION() external view returns (uint256 version);\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/node_modules/@0x/contracts-erc20"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
