{
    "schemaVersion": "2.0.0",
    "contractName": "BridgeAdapter",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "balancerBridge",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "curveBridge",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "kyberBridge",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "mooniswapBridge",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "mStableBridge",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "oasisBridge",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "shellBridge",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "uniswapBridge",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "uniswapV2Bridge",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "kyberNetworkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "oasis",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "uniswapV2Router",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "uniswapExchangeFactory",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "mStable",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "shell",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MixinAdapterAddresses.AdapterAddresses",
                        "name": "addresses",
                        "type": "tuple"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "contract IERC20TokenV06",
                        "name": "inputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "contract IERC20TokenV06",
                        "name": "outputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "inputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "from",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    }
                ],
                "name": "ERC20BridgeTransfer",
                "type": "event"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes",
                        "name": "makerAssetData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "name": "trade",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "boughtAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "events": {
                "ERC20BridgeTransfer(address,address,uint256,uint256,address,address)": {
                    "details": "Emitted when a trade occurs.",
                    "params": {
                        "from": "The bridge address, indicating the underlying source of the fill.",
                        "inputToken": "The token the bridge is converting from.",
                        "inputTokenAmount": "Amount of input token.",
                        "outputToken": "The token the bridge is converting to.",
                        "outputTokenAmount": "Amount of output token.",
                        "to": "The `to` address, currrently `address(this)`"
                    }
                }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x6102e06040527feeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000006080523480156200003657600080fd5b50604051620030863803806200308683398101604081905262000059916200016e565b6101e080820180516001600160601b0319606091821b811660a090815261012080870151841b831660c09081528551851b841660e09081526101a0808a0151871b8616610100908152610140808c0151891b88169095526101c0808c0151891b88169095529751871b8616610160908152610180808c0151891b881690528a0151871b861690528851861b85169092526020880151851b84169096526040870151841b83166102005283870151841b8316610220526080870151841b83166102405290860151831b82166102605293850151821b81166102805292840151811b83166102a05292015190911b166102c052620002ff565b80516001600160a01b03811681146200016857600080fd5b92915050565b600061020080838503121562000182578182fd5b6200018d81620002d8565b90506200019b848462000150565b8152620001ac846020850162000150565b6020820152620001c0846040850162000150565b6040820152620001d4846060850162000150565b6060820152620001e8846080850162000150565b6080820152620001fc8460a0850162000150565b60a0820152620002108460c0850162000150565b60c0820152620002248460e0850162000150565b60e08201526101006200023a8582860162000150565b908201526101206200024f8585830162000150565b90820152610140620002648585830162000150565b90820152610160620002798585830162000150565b908201526101806200028e8585830162000150565b908201526101a0620002a38585830162000150565b908201526101c0620002b88585830162000150565b908201526101e0620002cd8585830162000150565b908201529392505050565b6040518181016001600160401b0381118282101715620002f757600080fd5b604052919050565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6101405160601c6101605160601c6101805160601c6101a05160601c6101c05160601c6101e05160601c6102005160601c6102205160601c6102405160601c6102605160601c6102805160601c6102a05160601c6102c05160601c612c1a6200046c600039806101625250806101c15250806103fb52508061039c52508061033d5250806102de52508061027f52508060fc52508061022052508061084452806108de525080611c965280611d5d5250806109de5280610a6d5280610b885280610ca85280611c085250806118ad52806119125250806117da528061183c5250806116ad528061170f52508061134f52806113de528061148d52806114e952806115be5280611612525080610faa528061107e525080610f3d528061101452806110bb5280611137528061125052806112a452508061111452806111905250612c1a6000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630e158d4814610030575b600080fd5b61004361003e3660046122a5565b610059565b6040516100509190612a00565b60405180910390f35b60008080606061006c876004818b612b6b565b8101906100799190612329565b9194509250905073ffffffffffffffffffffffffffffffffffffffff821630148015906100bb575073ffffffffffffffffffffffffffffffffffffffff821615155b6100fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f1906129a3565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610160576101598386836104bc565b935061046f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156101bf5761015983868361076d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561021e576101598386836109b5565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561027d57610159838683610e06565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156102dc57610159838683610f1c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561033b5761015983868361132e565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561039a57610159838683611678565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156103f9576101598386836117a5565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561045857610159838683611878565b6104658287858885611952565b93505050506104b4565b7f349fc08071558d8e3aa92dec9396e4e9f2dfecd6bb9065759d1932e7da43b8a98684878786306040516104a896959493929190612707565b60405180910390a15050505b949350505050565b60006104c66120dc565b828060200190518101906104da9190612486565b805160408201519192506105059173ffffffffffffffffffffffffffffffffffffffff169086611af7565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8716906370a082319061055a90309060040161259f565b60206040518083038186803b15801561057257600080fd5b505afa158015610586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105aa91906124fe565b905060006060836000015173ffffffffffffffffffffffffffffffffffffffff168460200151856060015186608001518a60016040516024016105f09493929190612861565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516106799190612583565b6000604051808303816000865af19150503d80600081146106b6576040519150601f19603f3d011682016040523d82523d6000602084013e6106bb565b606091505b5091509150816106ce576106ce81611bd3565b610761838973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161070b919061259f565b60206040518083038186803b15801561072357600080fd5b505afa158015610737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075b91906124fe565b90611bdb565b98975050505050505050565b60006060828060200190518101906107859190612168565b90506002815110156107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f19061290f565b8473ffffffffffffffffffffffffffffffffffffffff16816001835103815181106107ea57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161461083f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f1906128b2565b61089e7f0000000000000000000000000000000000000000000000000000000000000000858360008151811061087157fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16611af79092919063ffffffff16565b6040517f38ed173900000000000000000000000000000000000000000000000000000000815260609073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906338ed17399061091c908890600190879030904290600401612a09565b600060405180830381600087803b15801561093657600080fd5b505af115801561094a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109909190810190612206565b9050806001825103815181106109a257fe5b6020026020010151925050509392505050565b600080828060200190518101906109cc919061214c565b905060006109da8287611c04565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b86576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90610aa2908890600401612a00565b600060405180830381600087803b158015610abc57600080fd5b505af1158015610ad0573d6000803e3d6000fd5b50506040517fad65d76d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416925063ad65d76d91508790610b2d9060019042903090600401612886565b6020604051808303818588803b158015610b4657600080fd5b505af1158015610b5a573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610b7f91906124fe565b9250610dfd565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415610d2c57610bfb73ffffffffffffffffffffffffffffffffffffffff83168287611af7565b6040517f95e3c50b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216906395e3c50b90610c529088906001904290600401612acc565b602060405180830381600087803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca491906124fe565b92507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b5050505050610dfd565b610d4d73ffffffffffffffffffffffffffffffffffffffff83168287611af7565b6040517fddf7e1a700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063ddf7e1a790610da8908890600190819042908d90600401612a93565b602060405180830381600087803b158015610dc257600080fd5b505af1158015610dd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfa91906124fe565b92505b50509392505050565b600080600083806020019051810190610e1f919061244d565b9092509050610e4573ffffffffffffffffffffffffffffffffffffffff83168287611af7565b6040517f8201aa3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690638201aa3f90610ec090859089908b906001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906004016127f0565b6040805180830381600087803b158015610ed957600080fd5b505af1158015610eed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f119190612516565b509695505050505050565b600080606083806020019051810190610f3591906123c4565b9150915060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610fd457610fcf73ffffffffffffffffffffffffffffffffffffffff84167f000000000000000000000000000000000000000000000000000000000000000088611af7565b61107c565b506040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152859073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90611049908490600401612a00565b600060405180830381600087803b15801561106357600080fd5b505af1158015611077573d6000803e3d6000fd5b505050505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166329589f61827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146111125785611134565b7f00000000000000000000000000000000000000000000000000000000000000005b897f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff161461118e578b6111b0565b7f00000000000000000000000000000000000000000000000000000000000000005b307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600160008b6040518a63ffffffff1660e01b81526004016111fa98979695949392919061274e565b6020604051808303818588803b15801561121357600080fd5b505af1158015611227573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061124c91906124fe565b93507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415611324577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561130a57600080fd5b505af115801561131e573d6000803e3d6000fd5b50505050505b5050509392505050565b600080600083806020019051810190611347919061244d565b9150915060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561144d576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90611413908990600401612a00565b600060405180830381600087803b15801561142d57600080fd5b505af1158015611441573d6000803e3d6000fd5b5050505085905061146e565b61146e73ffffffffffffffffffffffffffffffffffffffff84168388611af7565b8173ffffffffffffffffffffffffffffffffffffffff1663d5bcb9b5827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146114e457856114e7565b60005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614611540578a611543565b60005b8a600160006040518763ffffffff1660e01b81526004016115689594939291906126ca565b6020604051808303818588803b15801561158157600080fd5b505af1158015611595573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906115ba91906124fe565b93507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415611324577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561130a57600080fd5b6000808280602001905181019061168f919061214c565b90506116d273ffffffffffffffffffffffffffffffffffffffff82167f000000000000000000000000000000000000000000000000000000000000000086611af7565b6040517f6e81221c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636e81221c9061174a908490899089903090600401612692565b602060405180830381600087803b15801561176457600080fd5b505af1158015611778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179c91906124fe565b95945050505050565b600080828060200190518101906117bc919061214c565b90506117ff73ffffffffffffffffffffffffffffffffffffffff82167f000000000000000000000000000000000000000000000000000000000000000086611af7565b6040517f0621b4f600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630621b4f69061174a90849088908a906001906004016127b9565b6000808280602001905181019061188f919061214c565b90506118d273ffffffffffffffffffffffffffffffffffffffff82167f000000000000000000000000000000000000000000000000000000000000000086611af7565b6040517f0b2583c800000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630b2583c890610da89085908a908a90600190428201906004016125e7565b6000808473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161198e919061259f565b60206040518083038186803b1580156119a657600080fd5b505afa1580156119ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119de91906124fe565b9050611a0173ffffffffffffffffffffffffffffffffffffffff87168886611e31565b6040517fc2df82e600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063c2df82e690611a5c9088908b9030906001908a9060040161264b565b602060405180830381600087803b158015611a7657600080fd5b505af1158015611a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aae919061228a565b50611aec818673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161070b919061259f565b979650505050505050565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152819073ffffffffffffffffffffffffffffffffffffffff85169063dd62ed3e90611b4d90309087906004016125c0565b60206040518083038186803b158015611b6557600080fd5b505afa158015611b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9d91906124fe565b1015611bce57611bce83837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611edd565b505050565b805160208201fd5b600082821115611bf957611bf9611bf460028585611efa565b611bd3565b508082035b92915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611d20576040517f06f2bf6200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906306f2bf6290611ccb90869060040161259f565b60206040518083038186803b158015611ce357600080fd5b505afa158015611cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1b919061214c565b611de2565b6040517f06f2bf6200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906306f2bf6290611d9290859060040161259f565b60206040518083038186803b158015611daa57600080fd5b505afa158015611dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de2919061214c565b905073ffffffffffffffffffffffffffffffffffffffff8116611bfe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f19061296c565b606063a9059cbb60e01b8383604051602401611e4e929190612625565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050611ed78482611f9f565b50505050565b606063095ea7b360e01b8383604051602401611e4e929190612625565b606063e946c1bb60e01b848484604051602401611f1993929190612831565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b600060608373ffffffffffffffffffffffffffffffffffffffff1683604051611fc89190612583565b6000604051808303816000865af19150503d8060008114612005576040519150601f19603f3d011682016040523d82523d6000602084013e61200a565b606091505b5091509150818015612020575061202081612039565b1561202c575050612035565b611ed781611bd3565b5050565b600081516000141561204d5750600161207b565b81516020141561207b576000612064836000612080565b9050806001141561207957600191505061207b565b505b919050565b600061208c8383612093565b9392505050565b600081602001835110156120b4576120b4611bf460058551856020016120bd565b50016020015190565b6060632800659560e01b848484604051602401611f1993929190612853565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b80517fffffffff0000000000000000000000000000000000000000000000000000000081168114611bfe57600080fd5b8051600f81900b8114611bfe57600080fd5b60006020828403121561215d578081fd5b815161208c81612bbf565b6000602080838503121561217a578182fd5b825167ffffffffffffffff811115612190578283fd5b8301601f810185136121a0578283fd5b80516121b36121ae82612b09565b612ae2565b81815283810190838501858402850186018910156121cf578687fd5b8694505b838510156121fa5780516121e681612bbf565b8352600194909401939185019185016121d3565b50979650505050505050565b60006020808385031215612218578182fd5b825167ffffffffffffffff81111561222e578283fd5b8301601f8101851361223e578283fd5b805161224c6121ae82612b09565b8181528381019083850185840285018601891015612268578687fd5b8694505b838510156121fa57805183526001949094019391850191850161226c565b60006020828403121561229b578081fd5b61208c838361210a565b600080600080606085870312156122ba578283fd5b843567ffffffffffffffff808211156122d1578485fd5b818701915087601f8301126122e4578485fd5b8135818111156122f2578586fd5b886020828501011115612303578586fd5b6020928301965094505085013561231981612bbf565b9396929550929360400135925050565b60008060006060848603121561233d578283fd5b833561234881612bbf565b9250602084013561235881612bbf565b9150604084013567ffffffffffffffff811115612373578182fd5b8401601f81018613612383578182fd5b80356123916121ae82612b29565b8181528760208385010111156123a5578384fd5b8160208401602083013783602083830101528093505050509250925092565b600080604083850312156123d6578182fd5b82516123e181612bbf565b602084015190925067ffffffffffffffff8111156123fd578182fd5b8301601f8101851361240d578182fd5b805161241b6121ae82612b29565b81815286602083850101111561242f578384fd5b612440826020830160208601612b93565b8093505050509250929050565b6000806040838503121561245f578182fd5b825161246a81612bbf565b602084015190925061247b81612bbf565b809150509250929050565b600060a08284031215612497578081fd5b6124a160a0612ae2565b82516124ac81612bbf565b81526124bb846020850161210a565b602082015260408301516124ce81612bbf565b60408201526124e0846060850161213a565b60608201526124f2846080850161213a565b60808201529392505050565b60006020828403121561250f578081fd5b5051919050565b60008060408385031215612528578182fd5b505080516020909101519092909150565b60008151808452612551816020860160208601612b93565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251612595818460208701612b93565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff958616815293909416602084015260408301919091526060820152608081019190915260a00190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352808716602084015280861660408401525083606083015260a06080830152611aec60a0830184612539565b73ffffffffffffffffffffffffffffffffffffffff948516815292841660208401526040830191909152909116606082015260800190565b73ffffffffffffffffffffffffffffffffffffffff9586168152938516602085015260408401929092526060830152909116608082015260a00190565b73ffffffffffffffffffffffffffffffffffffffff96871681529486166020860152604085019390935260608401919091528316608083015290911660a082015260c00190565b600061010073ffffffffffffffffffffffffffffffffffffffff808c1684528a6020850152808a16604085015280891660608501528760808501528660a085015280861660c0850152508060e08401526127aa81840185612539565b9b9a5050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff9485168152602081019390935292166040820152606081019190915260800190565b73ffffffffffffffffffffffffffffffffffffffff958616815260208101949094529190931660408301526060820192909252608081019190915260a00190565b606081016004851061283f57fe5b938152602081019290925260409091015290565b606081016008851061283f57fe5b600f94850b81529290930b6020830152604082015260ff909116606082015260800190565b928352602083019190915273ffffffffffffffffffffffffffffffffffffffff16604082015260600190565b6020808252603c908201527f556e697377617056324272696467652f4c4153545f454c454d454e545f4f465f60408201527f504154485f4d5553545f4d415443485f4f55545055545f544f4b454e00000000606082015260800190565b60208082526030908201527f556e697377617056324272696467652f504154485f4c454e4754485f4d55535460408201527f5f42455f41545f4c454153545f54574f00000000000000000000000000000000606082015260800190565b6020808252601d908201527f4e4f5f554e49535741505f45584348414e47455f464f525f544f4b454e000000604082015260600190565b60208082526024908201527f427269646765416461707465722f494e56414c49445f4252494447455f41444460408201527f5245535300000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015612a6557845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101612a33565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b94855260208501939093526040840191909152606083015273ffffffffffffffffffffffffffffffffffffffff16608082015260a00190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff81118282101715612b0157600080fd5b604052919050565b600067ffffffffffffffff821115612b1f578081fd5b5060209081020190565b600067ffffffffffffffff821115612b3f578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60008085851115612b7a578182fd5b83861115612b86578182fd5b5050820193919092039150565b60005b83811015612bae578181015183820152602001612b96565b83811115611ed75750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114612be157600080fd5b5056fea264697066735822122043e47ce416210d98e2cd0a4a7edd5f0170af36a5a0174e9ef590db5f307b959264736f6c634300060c0033",
                "opcodes": "PUSH2 0x2E0 PUSH1 0x40 MSTORE PUSH32 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE000000000000000000000000 PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3086 CODESIZE SUB DUP1 PUSH3 0x3086 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x59 SWAP2 PUSH3 0x16E JUMP JUMPDEST PUSH2 0x1E0 DUP1 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 SWAP2 DUP3 SHL DUP2 AND PUSH1 0xA0 SWAP1 DUP2 MSTORE PUSH2 0x120 DUP1 DUP8 ADD MLOAD DUP5 SHL DUP4 AND PUSH1 0xC0 SWAP1 DUP2 MSTORE DUP6 MLOAD DUP6 SHL DUP5 AND PUSH1 0xE0 SWAP1 DUP2 MSTORE PUSH2 0x1A0 DUP1 DUP11 ADD MLOAD DUP8 SHL DUP7 AND PUSH2 0x100 SWAP1 DUP2 MSTORE PUSH2 0x140 DUP1 DUP13 ADD MLOAD DUP10 SHL DUP9 AND SWAP1 SWAP6 MSTORE PUSH2 0x1C0 DUP1 DUP13 ADD MLOAD DUP10 SHL DUP9 AND SWAP1 SWAP6 MSTORE SWAP8 MLOAD DUP8 SHL DUP7 AND PUSH2 0x160 SWAP1 DUP2 MSTORE PUSH2 0x180 DUP1 DUP13 ADD MLOAD DUP10 SHL DUP9 AND SWAP1 MSTORE DUP11 ADD MLOAD DUP8 SHL DUP7 AND SWAP1 MSTORE DUP9 MLOAD DUP7 SHL DUP6 AND SWAP1 SWAP3 MSTORE PUSH1 0x20 DUP9 ADD MLOAD DUP6 SHL DUP5 AND SWAP1 SWAP7 MSTORE PUSH1 0x40 DUP8 ADD MLOAD DUP5 SHL DUP4 AND PUSH2 0x200 MSTORE DUP4 DUP8 ADD MLOAD DUP5 SHL DUP4 AND PUSH2 0x220 MSTORE PUSH1 0x80 DUP8 ADD MLOAD DUP5 SHL DUP4 AND PUSH2 0x240 MSTORE SWAP1 DUP7 ADD MLOAD DUP4 SHL DUP3 AND PUSH2 0x260 MSTORE SWAP4 DUP6 ADD MLOAD DUP3 SHL DUP2 AND PUSH2 0x280 MSTORE SWAP3 DUP5 ADD MLOAD DUP2 SHL DUP4 AND PUSH2 0x2A0 MSTORE SWAP3 ADD MLOAD SWAP1 SWAP2 SHL AND PUSH2 0x2C0 MSTORE PUSH3 0x2FF JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x200 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x182 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x18D DUP2 PUSH3 0x2D8 JUMP JUMPDEST SWAP1 POP PUSH3 0x19B DUP5 DUP5 PUSH3 0x150 JUMP JUMPDEST DUP2 MSTORE PUSH3 0x1AC DUP5 PUSH1 0x20 DUP6 ADD PUSH3 0x150 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0x1C0 DUP5 PUSH1 0x40 DUP6 ADD PUSH3 0x150 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x1D4 DUP5 PUSH1 0x60 DUP6 ADD PUSH3 0x150 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH3 0x1E8 DUP5 PUSH1 0x80 DUP6 ADD PUSH3 0x150 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH3 0x1FC DUP5 PUSH1 0xA0 DUP6 ADD PUSH3 0x150 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH3 0x210 DUP5 PUSH1 0xC0 DUP6 ADD PUSH3 0x150 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH3 0x224 DUP5 PUSH1 0xE0 DUP6 ADD PUSH3 0x150 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH3 0x23A DUP6 DUP3 DUP7 ADD PUSH3 0x150 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 PUSH3 0x24F DUP6 DUP6 DUP4 ADD PUSH3 0x150 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH3 0x264 DUP6 DUP6 DUP4 ADD PUSH3 0x150 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x160 PUSH3 0x279 DUP6 DUP6 DUP4 ADD PUSH3 0x150 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x180 PUSH3 0x28E DUP6 DUP6 DUP4 ADD PUSH3 0x150 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x1A0 PUSH3 0x2A3 DUP6 DUP6 DUP4 ADD PUSH3 0x150 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x1C0 PUSH3 0x2B8 DUP6 DUP6 DUP4 ADD PUSH3 0x150 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x1E0 PUSH3 0x2CD DUP6 DUP6 DUP4 ADD PUSH3 0x150 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x2F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH1 0xE0 MLOAD PUSH1 0x60 SHR PUSH2 0x100 MLOAD PUSH1 0x60 SHR PUSH2 0x120 MLOAD PUSH1 0x60 SHR PUSH2 0x140 MLOAD PUSH1 0x60 SHR PUSH2 0x160 MLOAD PUSH1 0x60 SHR PUSH2 0x180 MLOAD PUSH1 0x60 SHR PUSH2 0x1A0 MLOAD PUSH1 0x60 SHR PUSH2 0x1C0 MLOAD PUSH1 0x60 SHR PUSH2 0x1E0 MLOAD PUSH1 0x60 SHR PUSH2 0x200 MLOAD PUSH1 0x60 SHR PUSH2 0x220 MLOAD PUSH1 0x60 SHR PUSH2 0x240 MLOAD PUSH1 0x60 SHR PUSH2 0x260 MLOAD PUSH1 0x60 SHR PUSH2 0x280 MLOAD PUSH1 0x60 SHR PUSH2 0x2A0 MLOAD PUSH1 0x60 SHR PUSH2 0x2C0 MLOAD PUSH1 0x60 SHR PUSH2 0x2C1A PUSH3 0x46C PUSH1 0x0 CODECOPY DUP1 PUSH2 0x162 MSTORE POP DUP1 PUSH2 0x1C1 MSTORE POP DUP1 PUSH2 0x3FB MSTORE POP DUP1 PUSH2 0x39C MSTORE POP DUP1 PUSH2 0x33D MSTORE POP DUP1 PUSH2 0x2DE MSTORE POP DUP1 PUSH2 0x27F MSTORE POP DUP1 PUSH1 0xFC MSTORE POP DUP1 PUSH2 0x220 MSTORE POP DUP1 PUSH2 0x844 MSTORE DUP1 PUSH2 0x8DE MSTORE POP DUP1 PUSH2 0x1C96 MSTORE DUP1 PUSH2 0x1D5D MSTORE POP DUP1 PUSH2 0x9DE MSTORE DUP1 PUSH2 0xA6D MSTORE DUP1 PUSH2 0xB88 MSTORE DUP1 PUSH2 0xCA8 MSTORE DUP1 PUSH2 0x1C08 MSTORE POP DUP1 PUSH2 0x18AD MSTORE DUP1 PUSH2 0x1912 MSTORE POP DUP1 PUSH2 0x17DA MSTORE DUP1 PUSH2 0x183C MSTORE POP DUP1 PUSH2 0x16AD MSTORE DUP1 PUSH2 0x170F MSTORE POP DUP1 PUSH2 0x134F MSTORE DUP1 PUSH2 0x13DE MSTORE DUP1 PUSH2 0x148D MSTORE DUP1 PUSH2 0x14E9 MSTORE DUP1 PUSH2 0x15BE MSTORE DUP1 PUSH2 0x1612 MSTORE POP DUP1 PUSH2 0xFAA MSTORE DUP1 PUSH2 0x107E MSTORE POP DUP1 PUSH2 0xF3D MSTORE DUP1 PUSH2 0x1014 MSTORE DUP1 PUSH2 0x10BB MSTORE DUP1 PUSH2 0x1137 MSTORE DUP1 PUSH2 0x1250 MSTORE DUP1 PUSH2 0x12A4 MSTORE POP DUP1 PUSH2 0x1114 MSTORE DUP1 PUSH2 0x1190 MSTORE POP PUSH2 0x2C1A PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xE158D48 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x22A5 JUMP JUMPDEST PUSH2 0x59 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x2A00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x60 PUSH2 0x6C DUP8 PUSH1 0x4 DUP2 DUP12 PUSH2 0x2B6B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x79 SWAP2 SWAP1 PUSH2 0x2329 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ADDRESS EQ DUP1 ISZERO SWAP1 PUSH2 0xBB JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ISZERO ISZERO JUMPDEST PUSH2 0xFA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF1 SWAP1 PUSH2 0x29A3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x160 JUMPI PUSH2 0x159 DUP4 DUP7 DUP4 PUSH2 0x4BC JUMP JUMPDEST SWAP4 POP PUSH2 0x46F JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1BF JUMPI PUSH2 0x159 DUP4 DUP7 DUP4 PUSH2 0x76D JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x21E JUMPI PUSH2 0x159 DUP4 DUP7 DUP4 PUSH2 0x9B5 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x27D JUMPI PUSH2 0x159 DUP4 DUP7 DUP4 PUSH2 0xE06 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2DC JUMPI PUSH2 0x159 DUP4 DUP7 DUP4 PUSH2 0xF1C JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x33B JUMPI PUSH2 0x159 DUP4 DUP7 DUP4 PUSH2 0x132E JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x39A JUMPI PUSH2 0x159 DUP4 DUP7 DUP4 PUSH2 0x1678 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3F9 JUMPI PUSH2 0x159 DUP4 DUP7 DUP4 PUSH2 0x17A5 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x458 JUMPI PUSH2 0x159 DUP4 DUP7 DUP4 PUSH2 0x1878 JUMP JUMPDEST PUSH2 0x465 DUP3 DUP8 DUP6 DUP9 DUP6 PUSH2 0x1952 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x4B4 JUMP JUMPDEST PUSH32 0x349FC08071558D8E3AA92DEC9396E4E9F2DFECD6BB9065759D1932E7DA43B8A9 DUP7 DUP5 DUP8 DUP8 DUP7 ADDRESS PUSH1 0x40 MLOAD PUSH2 0x4A8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2707 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C6 PUSH2 0x20DC JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4DA SWAP2 SWAP1 PUSH2 0x2486 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP3 ADD MLOAD SWAP2 SWAP3 POP PUSH2 0x505 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP7 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x55A SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x259F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x586 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5AA SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP11 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5F0 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2861 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x679 SWAP2 SWAP1 PUSH2 0x2583 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6B6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6BB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x6CE JUMPI PUSH2 0x6CE DUP2 PUSH2 0x1BD3 JUMP JUMPDEST PUSH2 0x761 DUP4 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x70B SWAP2 SWAP1 PUSH2 0x259F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x723 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x737 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x75B SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST SWAP1 PUSH2 0x1BDB JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x785 SWAP2 SWAP1 PUSH2 0x2168 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 MLOAD LT ISZERO PUSH2 0x7C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF1 SWAP1 PUSH2 0x290F JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x7EA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x83F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF1 SWAP1 PUSH2 0x28B2 JUMP JUMPDEST PUSH2 0x89E PUSH32 0x0 DUP6 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x871 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1AF7 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x38ED173900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x38ED1739 SWAP1 PUSH2 0x91C SWAP1 DUP9 SWAP1 PUSH1 0x1 SWAP1 DUP8 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x2A09 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x936 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x94A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x990 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2206 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x9A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x9CC SWAP2 SWAP1 PUSH2 0x214C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9DA DUP3 DUP8 PUSH2 0x1C04 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xB86 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xAA2 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A00 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xABC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xAD0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xAD65D76D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP3 POP PUSH4 0xAD65D76D SWAP2 POP DUP8 SWAP1 PUSH2 0xB2D SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x2886 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB5A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB7F SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST SWAP3 POP PUSH2 0xDFD JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD2C JUMPI PUSH2 0xBFB PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND DUP3 DUP8 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x95E3C50B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0x95E3C50B SWAP1 PUSH2 0xC52 SWAP1 DUP9 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x2ACC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC80 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCA4 SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST SWAP3 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD22 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0xDFD JUMP JUMPDEST PUSH2 0xD4D PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND DUP3 DUP8 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDDF7E1A700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0xDDF7E1A7 SWAP1 PUSH2 0xDA8 SWAP1 DUP9 SWAP1 PUSH1 0x1 SWAP1 DUP2 SWAP1 TIMESTAMP SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A93 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDD6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDFA SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xE1F SWAP2 SWAP1 PUSH2 0x244D JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0xE45 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND DUP3 DUP8 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8201AA3F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0x8201AA3F SWAP1 PUSH2 0xEC0 SWAP1 DUP6 SWAP1 DUP10 SWAP1 DUP12 SWAP1 PUSH1 0x1 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 PUSH1 0x4 ADD PUSH2 0x27F0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xED9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF11 SWAP2 SWAP1 PUSH2 0x2516 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xF35 SWAP2 SWAP1 PUSH2 0x23C4 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xFD4 JUMPI PUSH2 0xFCF PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH32 0x0 DUP9 PUSH2 0x1AF7 JUMP JUMPDEST PUSH2 0x107C JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP6 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x1049 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A00 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1063 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1077 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x29589F61 DUP3 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1112 JUMPI DUP6 PUSH2 0x1134 JUMP JUMPDEST PUSH32 0x0 JUMPDEST DUP10 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x118E JUMPI DUP12 PUSH2 0x11B0 JUMP JUMPDEST PUSH32 0x0 JUMPDEST ADDRESS PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1 PUSH1 0x0 DUP12 PUSH1 0x40 MLOAD DUP11 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11FA SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x274E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1227 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x124C SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST SWAP4 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1324 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x130A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x131E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1347 SWAP2 SWAP1 PUSH2 0x244D JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x144D JUMPI PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x1413 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A00 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x142D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1441 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP6 SWAP1 POP PUSH2 0x146E JUMP JUMPDEST PUSH2 0x146E PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP4 DUP9 PUSH2 0x1AF7 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD5BCB9B5 DUP3 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x14E4 JUMPI DUP6 PUSH2 0x14E7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1540 JUMPI DUP11 PUSH2 0x1543 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP11 PUSH1 0x1 PUSH1 0x0 PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1568 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26CA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1581 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1595 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15BA SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST SWAP4 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1324 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x130A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x168F SWAP2 SWAP1 PUSH2 0x214C JUMP JUMPDEST SWAP1 POP PUSH2 0x16D2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH32 0x0 DUP7 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6E81221C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x6E81221C SWAP1 PUSH2 0x174A SWAP1 DUP5 SWAP1 DUP10 SWAP1 DUP10 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x2692 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1764 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1778 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x179C SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x17BC SWAP2 SWAP1 PUSH2 0x214C JUMP JUMPDEST SWAP1 POP PUSH2 0x17FF PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH32 0x0 DUP7 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x621B4F600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x621B4F6 SWAP1 PUSH2 0x174A SWAP1 DUP5 SWAP1 DUP9 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x4 ADD PUSH2 0x27B9 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x188F SWAP2 SWAP1 PUSH2 0x214C JUMP JUMPDEST SWAP1 POP PUSH2 0x18D2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH32 0x0 DUP7 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xB2583C800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xB2583C8 SWAP1 PUSH2 0xDA8 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP DUP3 ADD SWAP1 PUSH1 0x4 ADD PUSH2 0x25E7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x198E SWAP2 SWAP1 PUSH2 0x259F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19BA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19DE SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST SWAP1 POP PUSH2 0x1A01 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP9 DUP7 PUSH2 0x1E31 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xC2DF82E600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0xC2DF82E6 SWAP1 PUSH2 0x1A5C SWAP1 DUP9 SWAP1 DUP12 SWAP1 ADDRESS SWAP1 PUSH1 0x1 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x264B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A8A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AAE SWAP2 SWAP1 PUSH2 0x228A JUMP JUMPDEST POP PUSH2 0x1AEC DUP2 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x70B SWAP2 SWAP1 PUSH2 0x259F JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x1B4D SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x25C0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B9D SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST LT ISZERO PUSH2 0x1BCE JUMPI PUSH2 0x1BCE DUP4 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x1EDD JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1BF9 JUMPI PUSH2 0x1BF9 PUSH2 0x1BF4 PUSH1 0x2 DUP6 DUP6 PUSH2 0x1EFA JUMP JUMPDEST PUSH2 0x1BD3 JUMP JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1D20 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6F2BF6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x1CCB SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x259F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CF7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D1B SWAP2 SWAP1 PUSH2 0x214C JUMP JUMPDEST PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6F2BF6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x1D92 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x259F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1DAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1DBE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1DE2 SWAP2 SWAP1 PUSH2 0x214C JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1BFE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF1 SWAP1 PUSH2 0x296C JUMP JUMPDEST PUSH1 0x60 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1E4E SWAP3 SWAP2 SWAP1 PUSH2 0x2625 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x1ED7 DUP5 DUP3 PUSH2 0x1F9F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1E4E SWAP3 SWAP2 SWAP1 PUSH2 0x2625 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1F19 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2831 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1FC8 SWAP2 SWAP1 PUSH2 0x2583 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2005 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x200A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x2020 JUMPI POP PUSH2 0x2020 DUP2 PUSH2 0x2039 JUMP JUMPDEST ISZERO PUSH2 0x202C JUMPI POP POP PUSH2 0x2035 JUMP JUMPDEST PUSH2 0x1ED7 DUP2 PUSH2 0x1BD3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x204D JUMPI POP PUSH1 0x1 PUSH2 0x207B JUMP JUMPDEST DUP2 MLOAD PUSH1 0x20 EQ ISZERO PUSH2 0x207B JUMPI PUSH1 0x0 PUSH2 0x2064 DUP4 PUSH1 0x0 PUSH2 0x2080 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x2079 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x207B JUMP JUMPDEST POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x208C DUP4 DUP4 PUSH2 0x2093 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x20B4 JUMPI PUSH2 0x20B4 PUSH2 0x1BF4 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x20BD JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1F19 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2853 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1BFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0xF DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0x1BFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x215D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x208C DUP2 PUSH2 0x2BBF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x217A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2190 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x21A0 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x21B3 PUSH2 0x21AE DUP3 PUSH2 0x2B09 JUMP JUMPDEST PUSH2 0x2AE2 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x21CF JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x21FA JUMPI DUP1 MLOAD PUSH2 0x21E6 DUP2 PUSH2 0x2BBF JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x21D3 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2218 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x222E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x223E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x224C PUSH2 0x21AE DUP3 PUSH2 0x2B09 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x2268 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x21FA JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x226C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x229B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x208C DUP4 DUP4 PUSH2 0x210A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x22BA JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x22D1 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x22E4 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x22F2 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2303 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP7 POP SWAP5 POP POP DUP6 ADD CALLDATALOAD PUSH2 0x2319 DUP2 PUSH2 0x2BBF JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x40 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x233D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2348 DUP2 PUSH2 0x2BBF JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2358 DUP2 PUSH2 0x2BBF JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2373 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 ADD PUSH1 0x1F DUP2 ADD DUP7 SGT PUSH2 0x2383 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x2391 PUSH2 0x21AE DUP3 PUSH2 0x2B29 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP8 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x23A5 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY DUP4 PUSH1 0x20 DUP4 DUP4 ADD ADD MSTORE DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23D6 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x23E1 DUP2 PUSH2 0x2BBF JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23FD JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x240D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x241B PUSH2 0x21AE DUP3 PUSH2 0x2B29 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP7 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x242F JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x2440 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2B93 JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x245F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x246A DUP2 PUSH2 0x2BBF JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x247B DUP2 PUSH2 0x2BBF JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2497 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x24A1 PUSH1 0xA0 PUSH2 0x2AE2 JUMP JUMPDEST DUP3 MLOAD PUSH2 0x24AC DUP2 PUSH2 0x2BBF JUMP JUMPDEST DUP2 MSTORE PUSH2 0x24BB DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x210A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x24CE DUP2 PUSH2 0x2BBF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x24E0 DUP5 PUSH1 0x60 DUP6 ADD PUSH2 0x213A JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x24F2 DUP5 PUSH1 0x80 DUP6 ADD PUSH2 0x213A JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x250F JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2528 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2551 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2B93 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2595 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2B93 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP7 AND PUSH1 0x40 DUP5 ADD MSTORE POP DUP4 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x1AEC PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x2539 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND DUP2 MSTORE SWAP5 DUP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP13 AND DUP5 MSTORE DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP1 DUP11 AND PUSH1 0x40 DUP6 ADD MSTORE DUP1 DUP10 AND PUSH1 0x60 DUP6 ADD MSTORE DUP8 PUSH1 0x80 DUP6 ADD MSTORE DUP7 PUSH1 0xA0 DUP6 ADD MSTORE DUP1 DUP7 AND PUSH1 0xC0 DUP6 ADD MSTORE POP DUP1 PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x27AA DUP2 DUP5 ADD DUP6 PUSH2 0x2539 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x283F JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x283F JUMPI INVALID JUMPDEST PUSH1 0xF SWAP5 DUP6 SIGNEXTEND DUP2 MSTORE SWAP3 SWAP1 SWAP4 SIGNEXTEND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xFF SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3C SWAP1 DUP3 ADD MSTORE PUSH32 0x556E697377617056324272696467652F4C4153545F454C454D454E545F4F465F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x504154485F4D5553545F4D415443485F4F55545055545F544F4B454E00000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x30 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E697377617056324272696467652F504154485F4C454E4754485F4D555354 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F42455F41545F4C454153545F54574F00000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x4E4F5F554E49535741505F45584348414E47455F464F525F544F4B454E000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x427269646765416461707465722F494E56414C49445F4252494447455F414444 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5245535300000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 0xC0 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2A65 JUMPI DUP5 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2A33 JUMP JUMPDEST POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 SWAP1 SWAP7 AND PUSH1 0x60 DUP6 ADD MSTORE POP POP POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2B01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2B1F JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2B3F JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x2B7A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x2B86 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2BAE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2B96 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1ED7 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2BE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER 0xE4 PUSH29 0xE416210D98E2CD0A4A7EDD5F0170AF36A5A0174E9EF590DB5F307B9592 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "1047:5173:54:-:0;;;2153:88:58;;;2429:885:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2566:14:58;;;;;;-1:-1:-1;;;;;;2544:37:58;;;;;;;;;;2632:27;;;;;2591:69;;;;;;;;1566:14:60;;1544:37;;;;;;;;1343:17:59;;;;;1324:37;;;;-1:-1:-1;1324:37:59;;;-1:-1:-1;;;;1734:15:61;1719:31;;;;;;;1337:15:62;;;;;1322:31;;;;;;;4086:14:63;;4064:37;;;;;;;;4162:32;;;;;4111:84;;;;;;2338:25:64;;;2299:65;;;;;;2826:24:54;;2800:50;;;;;;;-1:-1:-1;;;2883:21:54;2860:44;;;;;;;2937:21:::10;::::0;::::10;::::0;2914:44;;;;::::10;::::0;-1:-1:-1;;;2995:25:54;2968:52;;;;::::10;::::0;-1:-1:-1;;;3055:23:54;3030:48;;;;::::10;::::0;-1:-1:-1;;;3111:21:54;3088:44;;;;::::10;::::0;3165:21;;::::10;::::0;3142:44;;;;::::10;::::0;3221:23;;::::10;::::0;3196:48;;;;::::10;::::0;-1:-1:-1;;3282:25:54;3254:53;;;;::::10;::::0;1047:5173;;5:134:-1;83:13;;-1:-1;;;;;3803:54;;3928:35;;3918:2;;3977:1;;3967:12;3918:2;68:71;;;;:::o;3041:332::-;;3190:3;;3178:9;3169:7;3165:23;3161:33;3158:2;;;-1:-1;;3197:12;3158:2;370:22;3190:3;370:22;:::i;:::-;361:31;;484:60;540:3;516:22;484:60;:::i;:::-;466:16;459:86;646:60;702:3;613:2;682:9;678:22;646:60;:::i;:::-;613:2;632:5;628:16;621:86;808:60;864:3;775:2;844:9;840:22;808:60;:::i;:::-;775:2;794:5;790:16;783:86;974:60;1030:3;941:2;1010:9;1006:22;974:60;:::i;:::-;941:2;960:5;956:16;949:86;1139:60;1195:3;1105;1175:9;1171:22;1139:60;:::i;:::-;1105:3;1125:5;1121:16;1114:86;1302:60;1358:3;1268;1338:9;1334:22;1302:60;:::i;:::-;1268:3;1288:5;1284:16;1277:86;1465:60;1521:3;1431;1501:9;1497:22;1465:60;:::i;:::-;1431:3;1451:5;1447:16;1440:86;1630:60;1686:3;1596;1666:9;1662:22;1630:60;:::i;:::-;1596:3;1616:5;1612:16;1605:86;1763:3;1799:60;1855:3;1763;1835:9;1831:22;1799:60;:::i;:::-;1779:18;;;1772:88;1934:3;1970:60;2026:3;2002:22;;;1970:60;:::i;:::-;1950:18;;;1943:88;2093:3;2129:60;2185:3;2161:22;;;2129:60;:::i;:::-;2109:18;;;2102:88;2262:3;2298:60;2354:3;2330:22;;;2298:60;:::i;:::-;2278:18;;;2271:88;2438:3;2474:60;2530:3;2506:22;;;2474:60;:::i;:::-;2454:18;;;2447:88;2599:3;2635:60;2691:3;2667:22;;;2635:60;:::i;:::-;2615:18;;;2608:88;2758:3;2794:60;2850:3;2826:22;;;2794:60;:::i;:::-;2774:18;;;2767:88;2916:3;2952:60;3008:3;2984:22;;;2952:60;:::i;:::-;2932:18;;;2925:88;2936:5;3152:221;-1:-1;;;3152:221::o;3380:256::-;3442:2;3436:9;3468:17;;;-1:-1;;;;;3528:34;;3564:22;;;3525:62;3522:2;;;3600:1;;3590:12;3522:2;3442;3609:22;3420:216;;-1:-1;3420:216::o;:::-;1047:5173:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "7022": [
                        {
                            "length": 32,
                            "start": 544
                        }
                    ],
                    "7024": [
                        {
                            "length": 32,
                            "start": 252
                        }
                    ],
                    "7026": [
                        {
                            "length": 32,
                            "start": 639
                        }
                    ],
                    "7028": [
                        {
                            "length": 32,
                            "start": 734
                        }
                    ],
                    "7030": [
                        {
                            "length": 32,
                            "start": 829
                        }
                    ],
                    "7032": [
                        {
                            "length": 32,
                            "start": 924
                        }
                    ],
                    "7034": [
                        {
                            "length": 32,
                            "start": 1019
                        }
                    ],
                    "7036": [
                        {
                            "length": 32,
                            "start": 449
                        }
                    ],
                    "7038": [
                        {
                            "length": 32,
                            "start": 354
                        }
                    ],
                    "7585": [
                        {
                            "length": 32,
                            "start": 4372
                        },
                        {
                            "length": 32,
                            "start": 4496
                        }
                    ],
                    "7588": [
                        {
                            "length": 32,
                            "start": 3901
                        },
                        {
                            "length": 32,
                            "start": 4116
                        },
                        {
                            "length": 32,
                            "start": 4283
                        },
                        {
                            "length": 32,
                            "start": 4407
                        },
                        {
                            "length": 32,
                            "start": 4688
                        },
                        {
                            "length": 32,
                            "start": 4772
                        }
                    ],
                    "7591": [
                        {
                            "length": 32,
                            "start": 4010
                        },
                        {
                            "length": 32,
                            "start": 4222
                        }
                    ],
                    "7755": [
                        {
                            "length": 32,
                            "start": 5805
                        },
                        {
                            "length": 32,
                            "start": 5903
                        }
                    ],
                    "7849": [
                        {
                            "length": 32,
                            "start": 4943
                        },
                        {
                            "length": 32,
                            "start": 5086
                        },
                        {
                            "length": 32,
                            "start": 5261
                        },
                        {
                            "length": 32,
                            "start": 5353
                        },
                        {
                            "length": 32,
                            "start": 5566
                        },
                        {
                            "length": 32,
                            "start": 5650
                        }
                    ],
                    "7988": [
                        {
                            "length": 32,
                            "start": 6106
                        },
                        {
                            "length": 32,
                            "start": 6204
                        }
                    ],
                    "8075": [
                        {
                            "length": 32,
                            "start": 6317
                        },
                        {
                            "length": 32,
                            "start": 6418
                        }
                    ],
                    "8224": [
                        {
                            "length": 32,
                            "start": 2526
                        },
                        {
                            "length": 32,
                            "start": 2669
                        },
                        {
                            "length": 32,
                            "start": 2952
                        },
                        {
                            "length": 32,
                            "start": 3240
                        },
                        {
                            "length": 32,
                            "start": 7176
                        }
                    ],
                    "8227": [
                        {
                            "length": 32,
                            "start": 7318
                        },
                        {
                            "length": 32,
                            "start": 7517
                        }
                    ],
                    "8431": [
                        {
                            "length": 32,
                            "start": 2116
                        },
                        {
                            "length": 32,
                            "start": 2270
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80630e158d4814610030575b600080fd5b61004361003e3660046122a5565b610059565b6040516100509190612a00565b60405180910390f35b60008080606061006c876004818b612b6b565b8101906100799190612329565b9194509250905073ffffffffffffffffffffffffffffffffffffffff821630148015906100bb575073ffffffffffffffffffffffffffffffffffffffff821615155b6100fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f1906129a3565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610160576101598386836104bc565b935061046f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156101bf5761015983868361076d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561021e576101598386836109b5565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561027d57610159838683610e06565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156102dc57610159838683610f1c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561033b5761015983868361132e565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561039a57610159838683611678565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156103f9576101598386836117a5565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561045857610159838683611878565b6104658287858885611952565b93505050506104b4565b7f349fc08071558d8e3aa92dec9396e4e9f2dfecd6bb9065759d1932e7da43b8a98684878786306040516104a896959493929190612707565b60405180910390a15050505b949350505050565b60006104c66120dc565b828060200190518101906104da9190612486565b805160408201519192506105059173ffffffffffffffffffffffffffffffffffffffff169086611af7565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8716906370a082319061055a90309060040161259f565b60206040518083038186803b15801561057257600080fd5b505afa158015610586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105aa91906124fe565b905060006060836000015173ffffffffffffffffffffffffffffffffffffffff168460200151856060015186608001518a60016040516024016105f09493929190612861565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516106799190612583565b6000604051808303816000865af19150503d80600081146106b6576040519150601f19603f3d011682016040523d82523d6000602084013e6106bb565b606091505b5091509150816106ce576106ce81611bd3565b610761838973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161070b919061259f565b60206040518083038186803b15801561072357600080fd5b505afa158015610737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075b91906124fe565b90611bdb565b98975050505050505050565b60006060828060200190518101906107859190612168565b90506002815110156107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f19061290f565b8473ffffffffffffffffffffffffffffffffffffffff16816001835103815181106107ea57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161461083f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f1906128b2565b61089e7f0000000000000000000000000000000000000000000000000000000000000000858360008151811061087157fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16611af79092919063ffffffff16565b6040517f38ed173900000000000000000000000000000000000000000000000000000000815260609073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906338ed17399061091c908890600190879030904290600401612a09565b600060405180830381600087803b15801561093657600080fd5b505af115801561094a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109909190810190612206565b9050806001825103815181106109a257fe5b6020026020010151925050509392505050565b600080828060200190518101906109cc919061214c565b905060006109da8287611c04565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b86576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90610aa2908890600401612a00565b600060405180830381600087803b158015610abc57600080fd5b505af1158015610ad0573d6000803e3d6000fd5b50506040517fad65d76d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416925063ad65d76d91508790610b2d9060019042903090600401612886565b6020604051808303818588803b158015610b4657600080fd5b505af1158015610b5a573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610b7f91906124fe565b9250610dfd565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415610d2c57610bfb73ffffffffffffffffffffffffffffffffffffffff83168287611af7565b6040517f95e3c50b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216906395e3c50b90610c529088906001904290600401612acc565b602060405180830381600087803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca491906124fe565b92507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b5050505050610dfd565b610d4d73ffffffffffffffffffffffffffffffffffffffff83168287611af7565b6040517fddf7e1a700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063ddf7e1a790610da8908890600190819042908d90600401612a93565b602060405180830381600087803b158015610dc257600080fd5b505af1158015610dd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfa91906124fe565b92505b50509392505050565b600080600083806020019051810190610e1f919061244d565b9092509050610e4573ffffffffffffffffffffffffffffffffffffffff83168287611af7565b6040517f8201aa3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690638201aa3f90610ec090859089908b906001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906004016127f0565b6040805180830381600087803b158015610ed957600080fd5b505af1158015610eed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f119190612516565b509695505050505050565b600080606083806020019051810190610f3591906123c4565b9150915060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610fd457610fcf73ffffffffffffffffffffffffffffffffffffffff84167f000000000000000000000000000000000000000000000000000000000000000088611af7565b61107c565b506040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152859073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90611049908490600401612a00565b600060405180830381600087803b15801561106357600080fd5b505af1158015611077573d6000803e3d6000fd5b505050505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166329589f61827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146111125785611134565b7f00000000000000000000000000000000000000000000000000000000000000005b897f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff161461118e578b6111b0565b7f00000000000000000000000000000000000000000000000000000000000000005b307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600160008b6040518a63ffffffff1660e01b81526004016111fa98979695949392919061274e565b6020604051808303818588803b15801561121357600080fd5b505af1158015611227573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061124c91906124fe565b93507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415611324577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561130a57600080fd5b505af115801561131e573d6000803e3d6000fd5b50505050505b5050509392505050565b600080600083806020019051810190611347919061244d565b9150915060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561144d576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90611413908990600401612a00565b600060405180830381600087803b15801561142d57600080fd5b505af1158015611441573d6000803e3d6000fd5b5050505085905061146e565b61146e73ffffffffffffffffffffffffffffffffffffffff84168388611af7565b8173ffffffffffffffffffffffffffffffffffffffff1663d5bcb9b5827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146114e457856114e7565b60005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614611540578a611543565b60005b8a600160006040518763ffffffff1660e01b81526004016115689594939291906126ca565b6020604051808303818588803b15801561158157600080fd5b505af1158015611595573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906115ba91906124fe565b93507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415611324577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561130a57600080fd5b6000808280602001905181019061168f919061214c565b90506116d273ffffffffffffffffffffffffffffffffffffffff82167f000000000000000000000000000000000000000000000000000000000000000086611af7565b6040517f6e81221c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636e81221c9061174a908490899089903090600401612692565b602060405180830381600087803b15801561176457600080fd5b505af1158015611778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179c91906124fe565b95945050505050565b600080828060200190518101906117bc919061214c565b90506117ff73ffffffffffffffffffffffffffffffffffffffff82167f000000000000000000000000000000000000000000000000000000000000000086611af7565b6040517f0621b4f600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630621b4f69061174a90849088908a906001906004016127b9565b6000808280602001905181019061188f919061214c565b90506118d273ffffffffffffffffffffffffffffffffffffffff82167f000000000000000000000000000000000000000000000000000000000000000086611af7565b6040517f0b2583c800000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630b2583c890610da89085908a908a90600190428201906004016125e7565b6000808473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161198e919061259f565b60206040518083038186803b1580156119a657600080fd5b505afa1580156119ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119de91906124fe565b9050611a0173ffffffffffffffffffffffffffffffffffffffff87168886611e31565b6040517fc2df82e600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063c2df82e690611a5c9088908b9030906001908a9060040161264b565b602060405180830381600087803b158015611a7657600080fd5b505af1158015611a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aae919061228a565b50611aec818673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161070b919061259f565b979650505050505050565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152819073ffffffffffffffffffffffffffffffffffffffff85169063dd62ed3e90611b4d90309087906004016125c0565b60206040518083038186803b158015611b6557600080fd5b505afa158015611b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9d91906124fe565b1015611bce57611bce83837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611edd565b505050565b805160208201fd5b600082821115611bf957611bf9611bf460028585611efa565b611bd3565b508082035b92915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611d20576040517f06f2bf6200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906306f2bf6290611ccb90869060040161259f565b60206040518083038186803b158015611ce357600080fd5b505afa158015611cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1b919061214c565b611de2565b6040517f06f2bf6200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906306f2bf6290611d9290859060040161259f565b60206040518083038186803b158015611daa57600080fd5b505afa158015611dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de2919061214c565b905073ffffffffffffffffffffffffffffffffffffffff8116611bfe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f19061296c565b606063a9059cbb60e01b8383604051602401611e4e929190612625565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050611ed78482611f9f565b50505050565b606063095ea7b360e01b8383604051602401611e4e929190612625565b606063e946c1bb60e01b848484604051602401611f1993929190612831565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b600060608373ffffffffffffffffffffffffffffffffffffffff1683604051611fc89190612583565b6000604051808303816000865af19150503d8060008114612005576040519150601f19603f3d011682016040523d82523d6000602084013e61200a565b606091505b5091509150818015612020575061202081612039565b1561202c575050612035565b611ed781611bd3565b5050565b600081516000141561204d5750600161207b565b81516020141561207b576000612064836000612080565b9050806001141561207957600191505061207b565b505b919050565b600061208c8383612093565b9392505050565b600081602001835110156120b4576120b4611bf460058551856020016120bd565b50016020015190565b6060632800659560e01b848484604051602401611f1993929190612853565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b80517fffffffff0000000000000000000000000000000000000000000000000000000081168114611bfe57600080fd5b8051600f81900b8114611bfe57600080fd5b60006020828403121561215d578081fd5b815161208c81612bbf565b6000602080838503121561217a578182fd5b825167ffffffffffffffff811115612190578283fd5b8301601f810185136121a0578283fd5b80516121b36121ae82612b09565b612ae2565b81815283810190838501858402850186018910156121cf578687fd5b8694505b838510156121fa5780516121e681612bbf565b8352600194909401939185019185016121d3565b50979650505050505050565b60006020808385031215612218578182fd5b825167ffffffffffffffff81111561222e578283fd5b8301601f8101851361223e578283fd5b805161224c6121ae82612b09565b8181528381019083850185840285018601891015612268578687fd5b8694505b838510156121fa57805183526001949094019391850191850161226c565b60006020828403121561229b578081fd5b61208c838361210a565b600080600080606085870312156122ba578283fd5b843567ffffffffffffffff808211156122d1578485fd5b818701915087601f8301126122e4578485fd5b8135818111156122f2578586fd5b886020828501011115612303578586fd5b6020928301965094505085013561231981612bbf565b9396929550929360400135925050565b60008060006060848603121561233d578283fd5b833561234881612bbf565b9250602084013561235881612bbf565b9150604084013567ffffffffffffffff811115612373578182fd5b8401601f81018613612383578182fd5b80356123916121ae82612b29565b8181528760208385010111156123a5578384fd5b8160208401602083013783602083830101528093505050509250925092565b600080604083850312156123d6578182fd5b82516123e181612bbf565b602084015190925067ffffffffffffffff8111156123fd578182fd5b8301601f8101851361240d578182fd5b805161241b6121ae82612b29565b81815286602083850101111561242f578384fd5b612440826020830160208601612b93565b8093505050509250929050565b6000806040838503121561245f578182fd5b825161246a81612bbf565b602084015190925061247b81612bbf565b809150509250929050565b600060a08284031215612497578081fd5b6124a160a0612ae2565b82516124ac81612bbf565b81526124bb846020850161210a565b602082015260408301516124ce81612bbf565b60408201526124e0846060850161213a565b60608201526124f2846080850161213a565b60808201529392505050565b60006020828403121561250f578081fd5b5051919050565b60008060408385031215612528578182fd5b505080516020909101519092909150565b60008151808452612551816020860160208601612b93565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251612595818460208701612b93565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff958616815293909416602084015260408301919091526060820152608081019190915260a00190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352808716602084015280861660408401525083606083015260a06080830152611aec60a0830184612539565b73ffffffffffffffffffffffffffffffffffffffff948516815292841660208401526040830191909152909116606082015260800190565b73ffffffffffffffffffffffffffffffffffffffff9586168152938516602085015260408401929092526060830152909116608082015260a00190565b73ffffffffffffffffffffffffffffffffffffffff96871681529486166020860152604085019390935260608401919091528316608083015290911660a082015260c00190565b600061010073ffffffffffffffffffffffffffffffffffffffff808c1684528a6020850152808a16604085015280891660608501528760808501528660a085015280861660c0850152508060e08401526127aa81840185612539565b9b9a5050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff9485168152602081019390935292166040820152606081019190915260800190565b73ffffffffffffffffffffffffffffffffffffffff958616815260208101949094529190931660408301526060820192909252608081019190915260a00190565b606081016004851061283f57fe5b938152602081019290925260409091015290565b606081016008851061283f57fe5b600f94850b81529290930b6020830152604082015260ff909116606082015260800190565b928352602083019190915273ffffffffffffffffffffffffffffffffffffffff16604082015260600190565b6020808252603c908201527f556e697377617056324272696467652f4c4153545f454c454d454e545f4f465f60408201527f504154485f4d5553545f4d415443485f4f55545055545f544f4b454e00000000606082015260800190565b60208082526030908201527f556e697377617056324272696467652f504154485f4c454e4754485f4d55535460408201527f5f42455f41545f4c454153545f54574f00000000000000000000000000000000606082015260800190565b6020808252601d908201527f4e4f5f554e49535741505f45584348414e47455f464f525f544f4b454e000000604082015260600190565b60208082526024908201527f427269646765416461707465722f494e56414c49445f4252494447455f41444460408201527f5245535300000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015612a6557845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101612a33565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b94855260208501939093526040840191909152606083015273ffffffffffffffffffffffffffffffffffffffff16608082015260a00190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff81118282101715612b0157600080fd5b604052919050565b600067ffffffffffffffff821115612b1f578081fd5b5060209081020190565b600067ffffffffffffffff821115612b3f578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60008085851115612b7a578182fd5b83861115612b86578182fd5b5050820193919092039150565b60005b83811015612bae578181015183820152602001612b96565b83811115611ed75750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114612be157600080fd5b5056fea264697066735822122043e47ce416210d98e2cd0a4a7edd5f0170af36a5a0174e9ef590db5f307b959264736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xE158D48 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x22A5 JUMP JUMPDEST PUSH2 0x59 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x2A00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x60 PUSH2 0x6C DUP8 PUSH1 0x4 DUP2 DUP12 PUSH2 0x2B6B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x79 SWAP2 SWAP1 PUSH2 0x2329 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ADDRESS EQ DUP1 ISZERO SWAP1 PUSH2 0xBB JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ISZERO ISZERO JUMPDEST PUSH2 0xFA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF1 SWAP1 PUSH2 0x29A3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x160 JUMPI PUSH2 0x159 DUP4 DUP7 DUP4 PUSH2 0x4BC JUMP JUMPDEST SWAP4 POP PUSH2 0x46F JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1BF JUMPI PUSH2 0x159 DUP4 DUP7 DUP4 PUSH2 0x76D JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x21E JUMPI PUSH2 0x159 DUP4 DUP7 DUP4 PUSH2 0x9B5 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x27D JUMPI PUSH2 0x159 DUP4 DUP7 DUP4 PUSH2 0xE06 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2DC JUMPI PUSH2 0x159 DUP4 DUP7 DUP4 PUSH2 0xF1C JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x33B JUMPI PUSH2 0x159 DUP4 DUP7 DUP4 PUSH2 0x132E JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x39A JUMPI PUSH2 0x159 DUP4 DUP7 DUP4 PUSH2 0x1678 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3F9 JUMPI PUSH2 0x159 DUP4 DUP7 DUP4 PUSH2 0x17A5 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x458 JUMPI PUSH2 0x159 DUP4 DUP7 DUP4 PUSH2 0x1878 JUMP JUMPDEST PUSH2 0x465 DUP3 DUP8 DUP6 DUP9 DUP6 PUSH2 0x1952 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x4B4 JUMP JUMPDEST PUSH32 0x349FC08071558D8E3AA92DEC9396E4E9F2DFECD6BB9065759D1932E7DA43B8A9 DUP7 DUP5 DUP8 DUP8 DUP7 ADDRESS PUSH1 0x40 MLOAD PUSH2 0x4A8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2707 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C6 PUSH2 0x20DC JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4DA SWAP2 SWAP1 PUSH2 0x2486 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP3 ADD MLOAD SWAP2 SWAP3 POP PUSH2 0x505 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP7 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x55A SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x259F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x586 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5AA SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP11 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5F0 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2861 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x679 SWAP2 SWAP1 PUSH2 0x2583 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6B6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6BB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x6CE JUMPI PUSH2 0x6CE DUP2 PUSH2 0x1BD3 JUMP JUMPDEST PUSH2 0x761 DUP4 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x70B SWAP2 SWAP1 PUSH2 0x259F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x723 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x737 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x75B SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST SWAP1 PUSH2 0x1BDB JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x785 SWAP2 SWAP1 PUSH2 0x2168 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 MLOAD LT ISZERO PUSH2 0x7C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF1 SWAP1 PUSH2 0x290F JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x7EA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x83F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF1 SWAP1 PUSH2 0x28B2 JUMP JUMPDEST PUSH2 0x89E PUSH32 0x0 DUP6 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x871 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1AF7 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x38ED173900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x38ED1739 SWAP1 PUSH2 0x91C SWAP1 DUP9 SWAP1 PUSH1 0x1 SWAP1 DUP8 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x2A09 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x936 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x94A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x990 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2206 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x9A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x9CC SWAP2 SWAP1 PUSH2 0x214C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9DA DUP3 DUP8 PUSH2 0x1C04 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xB86 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xAA2 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A00 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xABC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xAD0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xAD65D76D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP3 POP PUSH4 0xAD65D76D SWAP2 POP DUP8 SWAP1 PUSH2 0xB2D SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x2886 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB5A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB7F SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST SWAP3 POP PUSH2 0xDFD JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD2C JUMPI PUSH2 0xBFB PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND DUP3 DUP8 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x95E3C50B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0x95E3C50B SWAP1 PUSH2 0xC52 SWAP1 DUP9 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x2ACC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC80 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCA4 SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST SWAP3 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD22 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0xDFD JUMP JUMPDEST PUSH2 0xD4D PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND DUP3 DUP8 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDDF7E1A700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0xDDF7E1A7 SWAP1 PUSH2 0xDA8 SWAP1 DUP9 SWAP1 PUSH1 0x1 SWAP1 DUP2 SWAP1 TIMESTAMP SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A93 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDD6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDFA SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xE1F SWAP2 SWAP1 PUSH2 0x244D JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0xE45 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND DUP3 DUP8 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8201AA3F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0x8201AA3F SWAP1 PUSH2 0xEC0 SWAP1 DUP6 SWAP1 DUP10 SWAP1 DUP12 SWAP1 PUSH1 0x1 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 PUSH1 0x4 ADD PUSH2 0x27F0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xED9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF11 SWAP2 SWAP1 PUSH2 0x2516 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xF35 SWAP2 SWAP1 PUSH2 0x23C4 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xFD4 JUMPI PUSH2 0xFCF PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH32 0x0 DUP9 PUSH2 0x1AF7 JUMP JUMPDEST PUSH2 0x107C JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP6 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x1049 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A00 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1063 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1077 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x29589F61 DUP3 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1112 JUMPI DUP6 PUSH2 0x1134 JUMP JUMPDEST PUSH32 0x0 JUMPDEST DUP10 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x118E JUMPI DUP12 PUSH2 0x11B0 JUMP JUMPDEST PUSH32 0x0 JUMPDEST ADDRESS PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1 PUSH1 0x0 DUP12 PUSH1 0x40 MLOAD DUP11 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11FA SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x274E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1227 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x124C SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST SWAP4 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1324 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x130A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x131E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1347 SWAP2 SWAP1 PUSH2 0x244D JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x144D JUMPI PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x1413 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A00 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x142D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1441 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP6 SWAP1 POP PUSH2 0x146E JUMP JUMPDEST PUSH2 0x146E PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP4 DUP9 PUSH2 0x1AF7 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD5BCB9B5 DUP3 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x14E4 JUMPI DUP6 PUSH2 0x14E7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1540 JUMPI DUP11 PUSH2 0x1543 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP11 PUSH1 0x1 PUSH1 0x0 PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1568 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26CA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1581 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1595 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15BA SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST SWAP4 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1324 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x130A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x168F SWAP2 SWAP1 PUSH2 0x214C JUMP JUMPDEST SWAP1 POP PUSH2 0x16D2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH32 0x0 DUP7 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6E81221C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x6E81221C SWAP1 PUSH2 0x174A SWAP1 DUP5 SWAP1 DUP10 SWAP1 DUP10 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x2692 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1764 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1778 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x179C SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x17BC SWAP2 SWAP1 PUSH2 0x214C JUMP JUMPDEST SWAP1 POP PUSH2 0x17FF PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH32 0x0 DUP7 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x621B4F600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x621B4F6 SWAP1 PUSH2 0x174A SWAP1 DUP5 SWAP1 DUP9 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x4 ADD PUSH2 0x27B9 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x188F SWAP2 SWAP1 PUSH2 0x214C JUMP JUMPDEST SWAP1 POP PUSH2 0x18D2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH32 0x0 DUP7 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xB2583C800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xB2583C8 SWAP1 PUSH2 0xDA8 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP DUP3 ADD SWAP1 PUSH1 0x4 ADD PUSH2 0x25E7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x198E SWAP2 SWAP1 PUSH2 0x259F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19BA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19DE SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST SWAP1 POP PUSH2 0x1A01 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP9 DUP7 PUSH2 0x1E31 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xC2DF82E600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0xC2DF82E6 SWAP1 PUSH2 0x1A5C SWAP1 DUP9 SWAP1 DUP12 SWAP1 ADDRESS SWAP1 PUSH1 0x1 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x264B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A8A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AAE SWAP2 SWAP1 PUSH2 0x228A JUMP JUMPDEST POP PUSH2 0x1AEC DUP2 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x70B SWAP2 SWAP1 PUSH2 0x259F JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x1B4D SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x25C0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B9D SWAP2 SWAP1 PUSH2 0x24FE JUMP JUMPDEST LT ISZERO PUSH2 0x1BCE JUMPI PUSH2 0x1BCE DUP4 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x1EDD JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1BF9 JUMPI PUSH2 0x1BF9 PUSH2 0x1BF4 PUSH1 0x2 DUP6 DUP6 PUSH2 0x1EFA JUMP JUMPDEST PUSH2 0x1BD3 JUMP JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1D20 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6F2BF6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x1CCB SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x259F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CF7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D1B SWAP2 SWAP1 PUSH2 0x214C JUMP JUMPDEST PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6F2BF6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x1D92 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x259F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1DAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1DBE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1DE2 SWAP2 SWAP1 PUSH2 0x214C JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1BFE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF1 SWAP1 PUSH2 0x296C JUMP JUMPDEST PUSH1 0x60 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1E4E SWAP3 SWAP2 SWAP1 PUSH2 0x2625 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x1ED7 DUP5 DUP3 PUSH2 0x1F9F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1E4E SWAP3 SWAP2 SWAP1 PUSH2 0x2625 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1F19 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2831 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1FC8 SWAP2 SWAP1 PUSH2 0x2583 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2005 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x200A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x2020 JUMPI POP PUSH2 0x2020 DUP2 PUSH2 0x2039 JUMP JUMPDEST ISZERO PUSH2 0x202C JUMPI POP POP PUSH2 0x2035 JUMP JUMPDEST PUSH2 0x1ED7 DUP2 PUSH2 0x1BD3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x204D JUMPI POP PUSH1 0x1 PUSH2 0x207B JUMP JUMPDEST DUP2 MLOAD PUSH1 0x20 EQ ISZERO PUSH2 0x207B JUMPI PUSH1 0x0 PUSH2 0x2064 DUP4 PUSH1 0x0 PUSH2 0x2080 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x2079 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x207B JUMP JUMPDEST POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x208C DUP4 DUP4 PUSH2 0x2093 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x20B4 JUMPI PUSH2 0x20B4 PUSH2 0x1BF4 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x20BD JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1F19 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2853 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1BFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0xF DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0x1BFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x215D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x208C DUP2 PUSH2 0x2BBF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x217A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2190 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x21A0 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x21B3 PUSH2 0x21AE DUP3 PUSH2 0x2B09 JUMP JUMPDEST PUSH2 0x2AE2 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x21CF JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x21FA JUMPI DUP1 MLOAD PUSH2 0x21E6 DUP2 PUSH2 0x2BBF JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x21D3 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2218 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x222E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x223E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x224C PUSH2 0x21AE DUP3 PUSH2 0x2B09 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x2268 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x21FA JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x226C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x229B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x208C DUP4 DUP4 PUSH2 0x210A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x22BA JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x22D1 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x22E4 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x22F2 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2303 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP7 POP SWAP5 POP POP DUP6 ADD CALLDATALOAD PUSH2 0x2319 DUP2 PUSH2 0x2BBF JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x40 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x233D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2348 DUP2 PUSH2 0x2BBF JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2358 DUP2 PUSH2 0x2BBF JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2373 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 ADD PUSH1 0x1F DUP2 ADD DUP7 SGT PUSH2 0x2383 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x2391 PUSH2 0x21AE DUP3 PUSH2 0x2B29 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP8 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x23A5 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY DUP4 PUSH1 0x20 DUP4 DUP4 ADD ADD MSTORE DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23D6 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x23E1 DUP2 PUSH2 0x2BBF JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23FD JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x240D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x241B PUSH2 0x21AE DUP3 PUSH2 0x2B29 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP7 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x242F JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x2440 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2B93 JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x245F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x246A DUP2 PUSH2 0x2BBF JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x247B DUP2 PUSH2 0x2BBF JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2497 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x24A1 PUSH1 0xA0 PUSH2 0x2AE2 JUMP JUMPDEST DUP3 MLOAD PUSH2 0x24AC DUP2 PUSH2 0x2BBF JUMP JUMPDEST DUP2 MSTORE PUSH2 0x24BB DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x210A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x24CE DUP2 PUSH2 0x2BBF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x24E0 DUP5 PUSH1 0x60 DUP6 ADD PUSH2 0x213A JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x24F2 DUP5 PUSH1 0x80 DUP6 ADD PUSH2 0x213A JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x250F JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2528 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2551 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2B93 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2595 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2B93 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP7 AND PUSH1 0x40 DUP5 ADD MSTORE POP DUP4 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x1AEC PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x2539 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND DUP2 MSTORE SWAP5 DUP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP13 AND DUP5 MSTORE DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP1 DUP11 AND PUSH1 0x40 DUP6 ADD MSTORE DUP1 DUP10 AND PUSH1 0x60 DUP6 ADD MSTORE DUP8 PUSH1 0x80 DUP6 ADD MSTORE DUP7 PUSH1 0xA0 DUP6 ADD MSTORE DUP1 DUP7 AND PUSH1 0xC0 DUP6 ADD MSTORE POP DUP1 PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x27AA DUP2 DUP5 ADD DUP6 PUSH2 0x2539 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x283F JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x283F JUMPI INVALID JUMPDEST PUSH1 0xF SWAP5 DUP6 SIGNEXTEND DUP2 MSTORE SWAP3 SWAP1 SWAP4 SIGNEXTEND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xFF SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3C SWAP1 DUP3 ADD MSTORE PUSH32 0x556E697377617056324272696467652F4C4153545F454C454D454E545F4F465F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x504154485F4D5553545F4D415443485F4F55545055545F544F4B454E00000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x30 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E697377617056324272696467652F504154485F4C454E4754485F4D555354 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F42455F41545F4C454153545F54574F00000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x4E4F5F554E49535741505F45584348414E47455F464F525F544F4B454E000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x427269646765416461707465722F494E56414C49445F4252494447455F414444 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5245535300000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 0xC0 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2A65 JUMPI DUP5 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2A33 JUMP JUMPDEST POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 SWAP1 SWAP7 AND PUSH1 0x60 DUP6 ADD MSTORE POP POP POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2B01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2B1F JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2B3F JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x2B7A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x2B86 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2BAE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2B96 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1ED7 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2BE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER 0xE4 PUSH29 0xE416210D98E2CD0A4A7EDD5F0170AF36A5A0174E9EF590DB5F307B9592 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "1047:5173:54:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3320:2898;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;3476:20;;;3598:23;3658:18;:14;3673:1;3658:14;;:18;:::i;:::-;3634:98;;;;;;;:::i;:::-;3512:220;;-1:-1:-1;3512:220:54;-1:-1:-1;3512:220:54;-1:-1:-1;3763:30:54;;;3788:4;3763:30;;;;:61;;-1:-1:-1;3797:27:54;;;;;3763:61;3742:144;;;;;;;;;;;;:::i;:::-;;;;;;;;;3918:20;3901:37;;:13;:37;;;3897:2121;;;3969:107;3998:8;4024:10;4052;3969:11;:107::i;:::-;3954:122;;3897:2121;;;4114:25;4097:42;;:13;:42;;;4093:1925;;;4170:111;4203:8;4229:10;4257;4170:15;:111::i;4093:1925::-;4319:22;4302:39;;:13;:39;;;4298:1720;;;4372:109;4403:8;4429:10;4457;4372:13;:109::i;4298:1720::-;4519:23;4502:40;;:13;:40;;;4498:1520;;;4573:110;4605:8;4631:10;4659;4573:14;:110::i;4498:1520::-;4721:20;4704:37;;:13;:37;;;4700:1318;;;4772:107;4801:8;4827:10;4855;4772:11;:107::i;4700:1318::-;4917:24;4900:41;;:13;:41;;;4896:1122;;;4972:111;5005:8;5031:10;5059;4972:15;:111::i;4896:1122::-;5121:22;5104:39;;:13;:39;;;5100:918;;;5174:109;5205:8;5231:10;5259;5174:13;:109::i;5100:918::-;5321:20;5304:37;;:13;:37;;;5300:718;;;5372:107;5401:8;5427:10;5455;5372:11;:107::i;5300:718::-;5517:20;5500:37;;:13;:37;;;5496:522;;;5568:107;5597:8;5623:10;5651;5568:11;:107::i;5496:522::-;5721:172;5757:13;5788:9;5815:8;5841:10;5869;5721:18;:172::i;:::-;5706:187;;5988:19;;;;;5496:522;6033:178;6066:9;6089:8;6111:10;6135:12;6161:13;6196:4;6033:178;;;;;;;;;;;:::i;:::-;;;;;;;;3320:2898;;;;;;;;;;:::o;1266:940:57:-;1421:20;1518:27;;:::i;:::-;1559:10;1548:41;;;;;;;;;;;;:::i;:::-;1629:17;;1599:14;;;;1518:71;;-1:-1:-1;1599:60:57;;:29;;;1648:10;1599:29;:60::i;:::-;1693:33;;;;;1669:21;;1693:18;;;;;;:33;;1720:4;;1693:33;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1669:57;;1737:12;1751:23;1790:4;:17;;;:22;;1853:4;:29;;;1900:4;:16;;;1934:4;:14;;;1988:10;2042:1;1813:244;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1790:268;;;;1813:244;1790:268;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1736:322;;;;2073:7;2068:59;;2096:20;:10;:18;:20::i;:::-;2143:56;2185:13;2143:8;:18;;;2170:4;2143:33;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:41;;:56::i;:::-;2136:63;1266:940;-1:-1:-1;;;;;;;;1266:940:57:o;2377:1221:64:-;2536:20;2606:21;2641:10;2630:35;;;;;;;;;;;;:::i;:::-;2606:59;;2732:1;2717:4;:11;:16;;2709:77;;;;;;;;;;;;:::i;:::-;2850:8;2817:42;;:4;2836:1;2822:4;:11;:15;2817:21;;;;;;;;;;;;;;:42;;;2796:149;;;;;;;;;;;;:::i;:::-;3029:112;3089:17;3121:10;3044:4;3049:1;3044:7;;;;;;;;;;;;;;3029:38;;;;:112;;;;;:::i;:::-;3176:373;;;;;3152:21;;3176:42;:17;:42;;;;:373;;3273:10;;3333:1;;3402:4;;3464;;3524:15;;3176:373;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3152:397;;3566:7;3589:1;3574:7;:14;:16;3566:25;;;;;;;;;;;;;;3559:32;;;;2377:1221;;;;;:::o;4208:2452:63:-;4365:20;4460:24;4499:10;4488:40;;;;;;;;;;;;:::i;:::-;4459:69;;4587:25;4615:86;4660:9;4683:8;4615:31;:86::i;:::-;4587:114;;4770:4;4757:17;;:9;:17;;;4753:1871;;;4822:25;;;;;:13;:4;:13;;;;:25;;4836:10;;4822:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4944:274:63;;;;;:32;;;;-1:-1:-1;4944:32:63;;-1:-1:-1;4985:10:63;;4944:274;;5054:1;;5118:15;;5199:4;;4944:274;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4929:289;;4753:1871;;;5293:4;5281:16;;:8;:16;;;5277:1347;;;5361:101;:24;;;5411:8;5438:10;5361:24;:101::i;:::-;5558:250;;;;;:28;;;;;;:250;;5648:10;;5715:1;;5779:15;;5558:250;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5543:265;;5851:4;:12;;;5872;5851:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5277:1347;;;6013:101;:24;;;6063:8;6090:10;6013:24;:101::i;:::-;6210:403;;;;;:30;;;;;;:403;;6302:10;;6369:1;;;;6516:15;;6591:8;;6210:403;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6195:418;;5277:1347;6634:19;;4208:2452;;;;;:::o;1626:813:56:-;1784:20;1856:24;1882:18;1928:10;1904:89;;;;;;;;;;;;:::i;:::-;1855:138;;-1:-1:-1;1855:138:56;-1:-1:-1;2003:85:56;:24;;;1855:138;2068:10;2003:24;:85::i;:::-;2182:221;;;;;:22;;;;;;:221;;2218:9;;2253:10;;2294:8;;2330:1;;2378:2;;2182:221;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2164:239:56;1626:813;-1:-1:-1;;;;;;1626:813:56:o;2673:1731:58:-;2828:20;2865:24;2891:17;2935:10;2924:47;;;;;;;;;;;;:::i;:::-;2864:107;;;;2982:21;3034:4;3021:17;;:9;:17;;;3017:451;;3166:112;:24;;;3216:19;3254:10;3166:24;:112::i;:::-;3017:451;;;-1:-1:-1;3429:28:58;;;;;3405:10;;3429:13;:4;:13;;;;:28;;3405:10;;3429:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3017:451;3607:19;:33;;;3649:13;3719:4;3706:17;;:9;:17;;;:65;;3762:9;3706:65;;;3741:17;3706:65;3813:10;3878:4;3866:16;;:8;:16;;;:63;;3921:8;3866:63;;;3900:17;3866:63;4008:4;4077:2;4140:1;4200;4216:4;3607:623;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3592:638;;4301:4;4289:16;;:8;:16;;;4285:84;;;4321:4;:12;;;4342;4321:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4285:84;4378:19;;;2673:1731;;;;;:::o;1594:1041:60:-;1753:20;1790:24;1816:19;1862:10;1851:56;;;;;;;;;;;;:::i;:::-;1789:118;;;;1950:16;1997:4;1984:17;;:9;:17;;;1980:280;;;2017:25;;;;;:13;:4;:13;;;;:25;;2031:10;;2017:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2067:10;2056:21;;1980:280;;;2152:97;:24;;;2202:4;2225:10;2152:24;:97::i;:::-;2285:4;:9;;;2302:8;2338:4;2325:17;;:9;:17;;;:49;;2365:9;2325:49;;;2360:1;2325:49;2400:4;2388:16;;:8;:16;;;:47;;2427:8;2388:47;;;2422:1;2388:47;2449:10;2473:1;2496;2285:223;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2270:238;;2564:4;2552:16;;:8;:16;;;2548:81;;;2584:4;:12;;;2603;2584:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1374:609:59;1531:20;1626:24;1665:10;1654:40;;;;;;;;;;;;:::i;:::-;1625:69;-1:-1:-1;1778:54:59;:24;;;1811:7;1821:10;1778:24;:54::i;:::-;1858:118;;;;;:12;:7;:12;;;;:118;;1884:9;;1907:8;;1929:10;;1961:4;;1858:118;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1843:133;1374:609;-1:-1:-1;;;;;1374:609:59:o;1763:766:61:-;1918:20;2013:24;2052:10;2041:40;;;;;;;;;;;;:::i;:::-;2012:69;-1:-1:-1;2165:86:61;:24;;;2211:5;2231:10;2165:24;:86::i;:::-;2349:144;;;;;:19;:5;:19;;;;:144;;2382:9;;2405:10;;2429:8;;2482:1;;2349:144;;;:::i;1366:771:62:-;1521:20;1558:24;1597:10;1586:33;;;;;;;;;;;;:::i;:::-;1557:62;-1:-1:-1;1704:109:62;:47;;;1773:5;1793:10;1704:47;:109::i;:::-;1844:260;;;;;1824:17;;1844:16;:5;:16;;;;:260;;1874:16;;1912:8;;1976:10;;2036:1;;2075:15;:19;;;1844:260;;;:::i;1623:780:65:-;1850:20;1886:21;1910:8;:18;;;1937:4;1910:33;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1886:57;-1:-1:-1;1997:85:65;:24;;;2035:13;2062:10;1997:24;:85::i;:::-;2092:223;;;;;:46;;;;;;:223;;2152:8;;2105:13;;2218:4;;2237:1;;2295:10;;2092:223;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2340:56;2382:13;2340:8;:18;;;2367:4;2340:33;;;;;;;;;;;;;;;:::i;:56::-;2325:71;1623:780;-1:-1:-1;;;;;;;1623:780:65:o;1948:267:78:-;2092:39;;;;;2134:6;;2092:15;;;;;;:39;;2116:4;;2123:7;;2092:39;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:48;2088:121;;;2156:42;2170:5;2177:7;2194:2;2156:13;:42::i;:::-;1948:267;;;:::o;1492:170:86:-;1635:9;1629:16;1622:4;1611:9;1607:20;1600:46;1586:373:81;1672:7;1703:1;1699;:5;1695:236;;;1720:200;1745:174;1805:62;1885:1;1904;1745:42;:174::i;:::-;1720:24;:200::i;:::-;-1:-1:-1;1947:5:81;;;1586:373;;;;;:::o;7092:497:63:-;7252:25;7372:4;7359:17;;:9;:17;;;:140;;7452:47;;;;;:36;:24;:36;;;;:47;;7489:9;;7452:47;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7359:140;;;7391:46;;;;;:36;:24;:36;;;;:46;;7428:8;;7391:46;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7348:151;-1:-1:-1;7517:31:63;;;7509:73;;;;;;;;;;;;:::i;2524:337:78:-;2659:21;2719:23;;;2756:2;2772:6;2683:105;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2798:56:78;2837:5;2683:105;2798:30;:56::i;:::-;2524:337;;;;:::o;1178:351::-;1320:21;1380:22;;;1416:7;1437:9;1344:112;;;;;;;;;:::i;1314:322:87:-;1467:12;779:10;1538:28;;1580:9;1603:1;1618;1502:127;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1314:322:87;;;;;:::o;6884:340:78:-;7016:15;7033:23;7060:6;:11;;7072:8;7060:21;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7015:66;;;;7095:10;:44;;;;;7109:30;7128:10;7109:18;:30::i;:::-;7091:81;;;7155:7;;;;7091:81;7181:36;7206:10;7181:24;:36::i;6884:340::-;;;:::o;6198:395::-;6298:17;6335:10;:17;6356:1;6335:22;6331:64;;;-1:-1:-1;6380:4:78;6373:11;;6331:64;6408:10;:17;6429:2;6408:23;6404:183;;;6447:14;6464:38;6488:10;6500:1;6464:23;:38::i;:::-;6447:55;;6520:6;6530:1;6520:11;6516:61;;;6558:4;6551:11;;;;;6516:61;6404:183;;6198:395;;;:::o;16083:220:80:-;16204:14;16251:21;16263:1;16266:5;16251:11;:21::i;:::-;16243:30;16083:220;-1:-1:-1;;;16083:220:80:o;14262:688::-;14383:14;14428:5;14436:2;14428:10;14417:1;:8;:21;14413:306;;;14454:254;14479:228;14544:95;14657:1;:8;14683:5;14691:2;14683:10;14479:47;:228::i;14454:254::-;-1:-1:-1;14897:13:80;14799:2;14897:13;14891:20;;14262:688::o;1295:378:84:-;1483:12;1235:10;1554:37;;1605:9;1628:6;1648:8;1518:148;;;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1952:132::-;2029:13;;33502:66;33491:78;;37179:34;;37169:2;;37227:1;;37217:12;4282:132;4359:13;;34478:2;34467:21;;;37983:34;;37973:2;;38031:1;;38021:12;5785:279;;5908:2;5896:9;5887:7;5883:23;5879:32;5876:2;;;-1:-1;;5914:12;5876:2;391:6;385:13;403:41;438:5;403:41;:::i;6071:392::-;;6211:2;;6199:9;6190:7;6186:23;6182:32;6179:2;;;-1:-1;;6217:12;6179:2;6268:17;6262:24;6306:18;6298:6;6295:30;6292:2;;;-1:-1;;6328:12;6292:2;6415:22;;595:4;583:17;;579:27;-1:-1;569:2;;-1:-1;;610:12;569:2;650:6;644:13;672:80;687:64;744:6;687:64;:::i;:::-;672:80;:::i;:::-;780:21;;;837:14;;;;812:17;;;926;;;917:27;;;;914:36;-1:-1;911:2;;;-1:-1;;953:12;911:2;-1:-1;979:10;;973:217;998:6;995:1;992:13;973:217;;;89:6;83:13;101:33;128:5;101:33;:::i;:::-;1066:61;;1020:1;1013:9;;;;;1141:14;;;;1169;;973:217;;;-1:-1;6348:99;6173:290;-1:-1;;;;;;;6173:290::o;6470:392::-;;6610:2;;6598:9;6589:7;6585:23;6581:32;6578:2;;;-1:-1;;6616:12;6578:2;6667:17;6661:24;6705:18;6697:6;6694:30;6691:2;;;-1:-1;;6727:12;6691:2;6814:22;;1343:4;1331:17;;1327:27;-1:-1;1317:2;;-1:-1;;1358:12;1317:2;1398:6;1392:13;1420:80;1435:64;1492:6;1435:64;:::i;1420:80::-;1528:21;;;1585:14;;;;1560:17;;;1674;;;1665:27;;;;1662:36;-1:-1;1659:2;;;-1:-1;;1701:12;1659:2;-1:-1;1727:10;;1721:217;1746:6;1743:1;1740:13;1721:217;;;5722:13;;1814:61;;1768:1;1761:9;;;;;1889:14;;;;1917;;1721:217;;6869:261;;6983:2;6971:9;6962:7;6958:23;6954:32;6951:2;;;-1:-1;;6989:12;6951:2;7051:63;7106:7;7082:22;7051:63;:::i;7137:661::-;;;;;7317:2;7305:9;7296:7;7292:23;7288:32;7285:2;;;-1:-1;;7323:12;7285:2;7381:17;7368:31;7419:18;;7411:6;7408:30;7405:2;;;-1:-1;;7441:12;7405:2;7526:6;7515:9;7511:22;;;2219:3;2212:4;2204:6;2200:17;2196:27;2186:2;;-1:-1;;2227:12;2186:2;2270:6;2257:20;7419:18;2289:6;2286:30;2283:2;;;-1:-1;;2319:12;2283:2;2414:3;2363:4;2394:17;2355:6;2380:32;;2377:41;2374:2;;;-1:-1;;2421:12;2374:2;2363:4;2351:17;;;;-1:-1;7461:82;-1:-1;;7642:22;;3624:20;3649:56;3624:20;3649:56;:::i;:::-;7279:519;;;;-1:-1;7588:86;;7711:2;7750:22;5574:20;;-1:-1;;7279:519::o;8121:657::-;;;;8299:2;8287:9;8278:7;8274:23;8270:32;8267:2;;;-1:-1;;8305:12;8267:2;3637:6;3624:20;3649:56;3699:5;3649:56;:::i;:::-;8357:86;-1:-1;8480:2;8527:22;;221:20;246:41;221:20;246:41;:::i;:::-;8488:71;-1:-1;8624:2;8609:18;;8596:32;8648:18;8637:30;;8634:2;;;-1:-1;;8670:12;8634:2;8730:22;;2544:4;2532:17;;2528:27;-1:-1;2518:2;;-1:-1;;2559:12;2518:2;2606:6;2593:20;2628:64;2643:48;2684:6;2643:48;:::i;2628:64::-;2712:6;2705:5;2698:21;2816:3;8480:2;2807:6;2740;2798:16;;2795:25;2792:2;;;-1:-1;;2823:12;2792:2;36150:6;8480:2;2740:6;2736:17;8480:2;2774:5;2770:16;36127:30;-1:-1;8480:2;36197:6;2774:5;36188:16;;36181:27;8690:72;;;;;;8261:517;;;;;:::o;8785:542::-;;;8949:2;8937:9;8928:7;8924:23;8920:32;8917:2;;;-1:-1;;8955:12;8917:2;3824:6;3818:13;3836:56;3886:5;3836:56;:::i;:::-;9162:2;9147:18;;9141:25;9007:97;;-1:-1;9186:18;9175:30;;9172:2;;;-1:-1;;9208:12;9172:2;9279:22;;3004:4;2992:17;;2988:27;-1:-1;2978:2;;-1:-1;;3019:12;2978:2;3059:6;3053:13;3081:64;3096:48;3137:6;3096:48;:::i;3081:64::-;3165:6;3158:5;3151:21;3269:3;9162:2;3260:6;3193;3251:16;;3248:25;3245:2;;;-1:-1;;3276:12;3245:2;3296:39;3328:6;9162:2;3227:5;3223:16;9162:2;3193:6;3189:17;3296:39;:::i;:::-;9228:83;;;;;;8911:416;;;;;:::o;9334:489::-;;;9511:2;9499:9;9490:7;9486:23;9482:32;9479:2;;;-1:-1;;9517:12;9479:2;3824:6;3818:13;3836:56;3886:5;3836:56;:::i;:::-;9703:2;9775:22;;3449:13;9569:97;;-1:-1;3467:55;3449:13;3467:55;:::i;:::-;9711:96;;;;9473:350;;;;;:::o;10648:330::-;;10796:3;10784:9;10775:7;10771:23;10767:33;10764:2;;;-1:-1;;10803:12;10764:2;4630:20;10796:3;4630:20;:::i;:::-;89:6;83:13;101:33;128:5;101:33;:::i;:::-;4715:86;;4915:59;4970:3;4882:2;4946:22;;4915:59;:::i;:::-;4882:2;4901:5;4897:16;4890:85;5041:2;5133:9;5129:22;83:13;101:33;128:5;101:33;:::i;:::-;5041:2;5056:16;;5049:109;5259:59;5314:3;5226:2;5290:22;;5259:59;:::i;:::-;5226:2;5245:5;5241:16;5234:85;5419:59;5474:3;5385;5454:9;5450:22;5419:59;:::i;:::-;5385:3;5401:16;;5394:85;5405:5;10758:220;-1:-1;;;10758:220::o;10985:263::-;;11100:2;11088:9;11079:7;11075:23;11071:32;11068:2;;;-1:-1;;11106:12;11068:2;-1:-1;5722:13;;11062:186;-1:-1;11062:186::o;11255:399::-;;;11387:2;11375:9;11366:7;11362:23;11358:32;11355:2;;;-1:-1;;11393:12;11355:2;-1:-1;;5722:13;;11556:2;11606:22;;;5722:13;;;;;-1:-1;11349:305::o;13095:343::-;;13237:5;31934:12;32349:6;32344:3;32337:19;13330:52;13375:6;32386:4;32381:3;32377:14;32386:4;13356:5;13352:16;13330:52;:::i;:::-;36587:2;36567:14;36583:7;36563:28;13394:39;;;;32386:4;13394:39;;13185:253;-1:-1;;13185:253::o;16410:271::-;;13605:5;31934:12;13716:52;13761:6;13756:3;13749:4;13742:5;13738:16;13716:52;:::i;:::-;13780:16;;;;;16544:137;-1:-1;;16544:137::o;16688:222::-;34573:42;34562:54;;;;12079:45;;16815:2;16800:18;;16786:124::o;16917:333::-;34573:42;34562:54;;;12079:45;;34562:54;;17236:2;17221:18;;12079:45;17072:2;17057:18;;17043:207::o;17257:684::-;34573:42;34562:54;;;12079:45;;34562:54;;;;17669:2;17654:18;;12079:45;17752:2;17737:18;;16361:37;;;;17843:2;17828:18;;14555:58;17926:3;17911:19;;16361:37;;;;17504:3;17489:19;;17475:466::o;17948:333::-;34573:42;34562:54;;;;12079:45;;18267:2;18252:18;;16361:37;18103:2;18088:18;;18074:207::o;18563:814::-;;34573:42;;13968:5;34562:54;13909:3;13902:73;34573:42;12117:5;34562:54;19039:2;19028:9;19024:18;12079:45;34573:42;12117:5;34562:54;19122:2;19111:9;19107:18;12079:45;;35670:24;19213:2;19202:9;19198:18;14555:58;18851:3;19250;19239:9;19235:19;19228:49;19291:76;18851:3;18840:9;18836:19;19353:6;19291:76;:::i;19384:648::-;34573:42;34562:54;;;13902:73;;34562:54;;;19852:2;19837:18;;13902:73;19935:2;19920:18;;16361:37;;;;34562:54;;;20018:2;20003:18;;12079:45;19641:3;19626:19;;19612:420::o;20039:792::-;34573:42;34562:54;;;13902:73;;34562:54;;;20551:2;20536:18;;13902:73;20634:2;20619:18;;16361:37;;;;20725:2;20710:18;;14555:58;34562:54;;;20816:3;20801:19;;11922:58;20340:3;20325:19;;20311:520::o;20838:872::-;34573:42;34562:54;;;13902:73;;34562:54;;;21362:2;21347:18;;13902:73;21445:2;21430:18;;16361:37;;;;21528:2;21513:18;;16361:37;;;;34562:54;;21611:3;21596:19;;12079:45;34562:54;;;21695:3;21680:19;;12079:45;21151:3;21136:19;;21122:588::o;21717:1260::-;;22144:3;34573:42;;13968:5;34562:54;13909:3;13902:73;16391:5;22332:2;22321:9;22317:18;16361:37;34573:42;13968:5;34562:54;22438:2;22427:9;22423:18;13902:73;34573:42;12117:5;34562:54;22537:2;22526:9;22522:18;12079:45;16391:5;22620:3;22609:9;22605:19;16361:37;35670:24;22712:3;22701:9;22697:19;14555:58;34573:42;12117:5;34562:54;22812:3;22801:9;22797:19;12079:45;;22144:3;22850;22839:9;22835:19;22828:49;22891:76;22144:3;22133:9;22129:19;22953:6;22891:76;:::i;:::-;22883:84;22115:862;-1:-1;;;;;;;;;;;22115:862::o;22984:664::-;34573:42;34562:54;;;13902:73;;23437:2;23422:18;;16361:37;;;;34562:54;;23543:2;23528:18;;13902:73;23634:2;23619:18;;14555:58;;;;23249:3;23234:19;;23220:428::o;23655:776::-;34573:42;34562:54;;;13902:73;;24136:2;24121:18;;16361:37;;;;34562:54;;;;24242:2;24227:18;;13902:73;24333:2;24318:18;;14555:58;;;;24416:3;24401:19;;16361:37;;;;23948:3;23933:19;;23919:512::o;24438:482::-;24640:2;24625:18;;36694:1;36684:12;;36674:2;;36700:9;36674:2;14077:69;;;24823:2;24808:18;;16361:37;;;;24906:2;24891:18;;;16361:37;24611:309;:::o;24927:512::-;25144:2;25129:18;;36828:1;36818:12;;36808:2;;36834:9;25446:560;34478:2;34467:21;;;14428:36;;34467:21;;;;25820:2;25805:18;;14428:36;25903:2;25888:18;;16361:37;34778:4;34767:16;;;25992:2;25977:18;;14702:56;25659:3;25644:19;;25630:376::o;26013:460::-;14555:58;;;26376:2;26361:18;;16361:37;;;;34573:42;34562:54;26459:2;26444:18;;12079:45;26204:2;26189:18;;26175:298::o;26480:416::-;26680:2;26694:47;;;14995:2;26665:18;;;32337:19;15031:34;32377:14;;;15011:55;15100:30;15086:12;;;15079:52;15150:12;;;26651:245::o;26903:416::-;27103:2;27117:47;;;15401:2;27088:18;;;32337:19;15437:34;32377:14;;;15417:55;15506:18;15492:12;;;15485:40;15544:12;;;27074:245::o;27326:416::-;27526:2;27540:47;;;15795:2;27511:18;;;32337:19;15831:31;32377:14;;;15811:52;15882:12;;;27497:245::o;27749:416::-;27949:2;27963:47;;;16133:2;27934:18;;;32337:19;16169:34;32377:14;;;16149:55;16238:6;16224:12;;;16217:28;16264:12;;;27920:245::o;28172:222::-;16361:37;;;28299:2;28284:18;;28270:124::o;28401:832::-;;28698:3;28687:9;28683:19;16391:5;16368:3;16361:37;28871:2;35670:24;28871:2;28860:9;28856:18;14555:58;28698:3;28908:2;28897:9;28893:18;28886:48;28948:108;12590:5;31934:12;32349:6;32344:3;32337:19;32377:14;28687:9;32377:14;12602:93;;28871:2;12766:5;31788:14;12778:21;;-1:-1;12805:260;12830:6;12827:1;12824:13;12805:260;;;12891:13;;34573:42;34562:54;12079:45;;32192:14;;;;11815;;;;12852:1;12845:9;12805:260;;;-1:-1;;34573:42;34562:54;;;;29135:2;29120:18;;12079:45;-1:-1;;;29218:3;29203:19;16361:37;28940:116;28669:564;-1:-1;;;28669:564::o;29240:746::-;16361:37;;;29691:2;29676:18;;14555:58;;;;29782:2;29767:18;;14555:58;;;;29865:2;29850:18;;16361:37;34573:42;34562:54;29971:3;29956:19;;13902:73;29518:3;29503:19;;29489:497::o;29993:460::-;16361:37;;;30356:2;30341:18;;14555:58;;;;30439:2;30424:18;;16361:37;30184:2;30169:18;;30155:298::o;30460:256::-;30522:2;30516:9;30548:17;;;30623:18;30608:34;;30644:22;;;30605:62;30602:2;;;30680:1;;30670:12;30602:2;30522;30689:22;30500:216;;-1:-1;30500:216::o;30723:304::-;;30882:18;30874:6;30871:30;30868:2;;;-1:-1;;30904:12;30868:2;-1:-1;30949:4;30937:17;;;31002:15;;30805:222::o;31345:321::-;;31488:18;31480:6;31477:30;31474:2;;;-1:-1;;31510:12;31474:2;-1:-1;31587:4;31564:17;31583:9;31560:33;31651:4;31641:15;;31411:255::o;32901:318::-;;;33051:8;33039:10;33036:24;33033:2;;;-1:-1;;33063:12;33033:2;33098:6;33088:8;33085:20;33082:2;;;-1:-1;;33108:12;33082:2;-1:-1;;33140:31;;;33189:25;;;;;-1:-1;33027:192::o;36223:268::-;36288:1;36295:101;36309:6;36306:1;36303:13;36295:101;;;36376:11;;;36370:18;36357:11;;;36350:39;36331:2;36324:10;36295:101;;;36411:6;36408:1;36405:13;36402:2;;;-1:-1;;36288:1;36458:16;;36451:27;36272:219::o;36857:117::-;34573:42;36944:5;34562:54;36919:5;36916:35;36906:2;;36965:1;;36955:12;36906:2;36900:74;:::o"
            }
        }
    },
    "sourceTreeHashHex": "0xca060ac4017a0c637ba8e0abb038a2c9f617ff63b5cc7c00e7ebe887e2b1bdb9",
    "sources": {
        "./BridgeAdapter.sol": {
            "id": 54
        },
        "./mixins/MixinAdapterAddresses.sol": {
            "id": 55
        },
        "./mixins/MixinBalancer.sol": {
            "id": 56
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 78
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 86
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 80
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 84
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 76
        },
        "./mixins/MixinCurve.sol": {
            "id": 57
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 81
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 87
        },
        "./mixins/MixinKyber.sol": {
            "id": 58
        },
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": {
            "id": 77
        },
        "./mixins/MixinMooniswap.sol": {
            "id": 60
        },
        "./mixins/MixinMStable.sol": {
            "id": 59
        },
        "./mixins/MixinOasis.sol": {
            "id": 61
        },
        "./mixins/MixinShell.sol": {
            "id": 62
        },
        "./mixins/MixinUniswap.sol": {
            "id": 63
        },
        "./mixins/MixinUniswapV2.sol": {
            "id": 64
        },
        "./mixins/MixinZeroExBridge.sol": {
            "id": 65
        }
    },
    "sourceCodes": {
        "./BridgeAdapter.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"./mixins/MixinAdapterAddresses.sol\";\nimport \"./mixins/MixinBalancer.sol\";\nimport \"./mixins/MixinCurve.sol\";\nimport \"./mixins/MixinKyber.sol\";\nimport \"./mixins/MixinMooniswap.sol\";\nimport \"./mixins/MixinMStable.sol\";\nimport \"./mixins/MixinOasis.sol\";\nimport \"./mixins/MixinShell.sol\";\nimport \"./mixins/MixinUniswap.sol\";\nimport \"./mixins/MixinUniswapV2.sol\";\nimport \"./mixins/MixinZeroExBridge.sol\";\n\ncontract BridgeAdapter is\n    MixinAdapterAddresses,\n    MixinBalancer,\n    MixinCurve,\n    MixinKyber,\n    MixinMooniswap,\n    MixinMStable,\n    MixinOasis,\n    MixinShell,\n    MixinUniswap,\n    MixinUniswapV2,\n    MixinZeroExBridge\n{\n\n    address private immutable BALANCER_BRIDGE_ADDRESS;\n    address private immutable CURVE_BRIDGE_ADDRESS;\n    address private immutable KYBER_BRIDGE_ADDRESS;\n    address private immutable MOONISWAP_BRIDGE_ADDRESS;\n    address private immutable MSTABLE_BRIDGE_ADDRESS;\n    address private immutable OASIS_BRIDGE_ADDRESS;\n    address private immutable SHELL_BRIDGE_ADDRESS;\n    address private immutable UNISWAP_BRIDGE_ADDRESS;\n    address private immutable UNISWAP_V2_BRIDGE_ADDRESS;\n\n    /// @dev Emitted when a trade occurs.\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token.\n    /// @param outputTokenAmount Amount of output token.\n    /// @param from The bridge address, indicating the underlying source of the fill.\n    /// @param to The `to` address, currrently `address(this)`\n    event ERC20BridgeTransfer(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        address from,\n        address to\n    );\n\n    constructor(AdapterAddresses memory addresses)\n        public\n        MixinBalancer()\n        MixinCurve()\n        MixinKyber(addresses)\n        MixinMooniswap(addresses)\n        MixinMStable(addresses)\n        MixinOasis(addresses)\n        MixinShell(addresses)\n        MixinUniswap(addresses)\n        MixinUniswapV2(addresses)\n        MixinZeroExBridge()\n    {\n        BALANCER_BRIDGE_ADDRESS = addresses.balancerBridge;\n        CURVE_BRIDGE_ADDRESS = addresses.curveBridge;\n        KYBER_BRIDGE_ADDRESS = addresses.kyberBridge;\n        MOONISWAP_BRIDGE_ADDRESS = addresses.mooniswapBridge;\n        MSTABLE_BRIDGE_ADDRESS = addresses.mStableBridge;\n        OASIS_BRIDGE_ADDRESS = addresses.oasisBridge;\n        SHELL_BRIDGE_ADDRESS = addresses.shellBridge;\n        UNISWAP_BRIDGE_ADDRESS = addresses.uniswapBridge;\n        UNISWAP_V2_BRIDGE_ADDRESS = addresses.uniswapV2Bridge;\n    }\n\n    function trade(\n        bytes calldata makerAssetData,\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 boughtAmount)\n    {\n        (\n            IERC20TokenV06 buyToken,\n            address bridgeAddress,\n            bytes memory bridgeData\n        ) = abi.decode(\n            makerAssetData[4:],\n            (IERC20TokenV06, address, bytes)\n        );\n        require(\n            bridgeAddress != address(this) && bridgeAddress != address(0),\n            \"BridgeAdapter/INVALID_BRIDGE_ADDRESS\"\n        );\n\n        if (bridgeAddress == CURVE_BRIDGE_ADDRESS) {\n            boughtAmount = _tradeCurve(\n                buyToken,\n                sellAmount,\n                bridgeData\n            );\n        } else if (bridgeAddress == UNISWAP_V2_BRIDGE_ADDRESS) {\n            boughtAmount = _tradeUniswapV2(\n                buyToken,\n                sellAmount,\n                bridgeData\n            );\n        } else if (bridgeAddress == UNISWAP_BRIDGE_ADDRESS) {\n            boughtAmount = _tradeUniswap(\n                buyToken,\n                sellAmount,\n                bridgeData\n            );\n        } else if (bridgeAddress == BALANCER_BRIDGE_ADDRESS) {\n            boughtAmount = _tradeBalancer(\n                buyToken,\n                sellAmount,\n                bridgeData\n            );\n        } else if (bridgeAddress == KYBER_BRIDGE_ADDRESS) {\n            boughtAmount = _tradeKyber(\n                buyToken,\n                sellAmount,\n                bridgeData\n            );\n        } else if (bridgeAddress == MOONISWAP_BRIDGE_ADDRESS) {\n            boughtAmount = _tradeMooniswap(\n                buyToken,\n                sellAmount,\n                bridgeData\n            );\n        } else if (bridgeAddress == MSTABLE_BRIDGE_ADDRESS) {\n            boughtAmount = _tradeMStable(\n                buyToken,\n                sellAmount,\n                bridgeData\n            );\n        } else if (bridgeAddress == OASIS_BRIDGE_ADDRESS) {\n            boughtAmount = _tradeOasis(\n                buyToken,\n                sellAmount,\n                bridgeData\n            );\n        } else if (bridgeAddress == SHELL_BRIDGE_ADDRESS) {\n            boughtAmount = _tradeShell(\n                buyToken,\n                sellAmount,\n                bridgeData\n            );\n        } else {\n            boughtAmount = _tradeZeroExBridge(\n                bridgeAddress,\n                sellToken,\n                buyToken,\n                sellAmount,\n                bridgeData\n            );\n            // Do not emit an event. The bridge contract should emit one itself.\n            return boughtAmount;\n        }\n\n        emit ERC20BridgeTransfer(\n            sellToken,\n            buyToken,\n            sellAmount,\n            boughtAmount,\n            bridgeAddress,\n            address(this)\n        );\n    }\n}\n",
        "./mixins/MixinAdapterAddresses.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\ncontract MixinAdapterAddresses\n{\n\n    struct AdapterAddresses {\n        // Bridges\n        address balancerBridge;\n        address curveBridge;\n        address kyberBridge;\n        address mooniswapBridge;\n        address mStableBridge;\n        address oasisBridge;\n        address shellBridge;\n        address uniswapBridge;\n        address uniswapV2Bridge;\n        // Exchanges\n        address kyberNetworkProxy;\n        address oasis;\n        address uniswapV2Router;\n        address uniswapExchangeFactory;\n        address mStable;\n        address shell;\n        // Other\n        address weth;\n    }\n}\n",
        "./mixins/MixinBalancer.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\ninterface IBalancerPool {\n    /// @dev Sell `tokenAmountIn` of `tokenIn` and receive `tokenOut`.\n    /// @param tokenIn The token being sold\n    /// @param tokenAmountIn The amount of `tokenIn` to sell.\n    /// @param tokenOut The token being bought.\n    /// @param minAmountOut The minimum amount of `tokenOut` to buy.\n    /// @param maxPrice The maximum value for `spotPriceAfter`.\n    /// @return tokenAmountOut The amount of `tokenOut` bought.\n    /// @return spotPriceAfter The new marginal spot price of the given\n    ///         token pair for this pool.\n    function swapExactAmountIn(\n        IERC20TokenV06 tokenIn,\n        uint tokenAmountIn,\n        IERC20TokenV06 tokenOut,\n        uint minAmountOut,\n        uint maxPrice\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\n}\n\ncontract MixinBalancer {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeBalancer(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data.\n        (IERC20TokenV06 sellToken, IBalancerPool pool) = abi.decode(\n            bridgeData,\n            (IERC20TokenV06, IBalancerPool)\n        );\n        sellToken.approveIfBelow(\n            address(pool),\n            sellAmount\n        );\n        // Sell all of this contract's `sellToken` token balance.\n        (boughtAmount,) = pool.swapExactAmountIn(\n            sellToken,  // tokenIn\n            sellAmount, // tokenAmountIn\n            buyToken,   // tokenOut\n            1,          // minAmountOut\n            uint256(-1) // maxPrice\n        );\n        return boughtAmount;\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length == 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length == 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "./mixins/MixinCurve.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\ncontract MixinCurve {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n\n    struct CurveBridgeData {\n        address curveAddress;\n        bytes4 exchangeFunctionSelector;\n        IERC20TokenV06 sellToken;\n        int128 fromCoinIdx;\n        int128 toCoinIdx;\n    }\n\n    function _tradeCurve(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data to get the Curve metadata.\n        CurveBridgeData memory data = abi.decode(bridgeData, (CurveBridgeData));\n        data.sellToken.approveIfBelow(data.curveAddress, sellAmount);\n        uint256 beforeBalance = buyToken.balanceOf(address(this));\n        (bool success, bytes memory resultData) =\n            data.curveAddress.call(abi.encodeWithSelector(\n                data.exchangeFunctionSelector,\n                data.fromCoinIdx,\n                data.toCoinIdx,\n                // dx\n                sellAmount,\n                // min dy\n                1\n            ));\n        if (!success) {\n            resultData.rrevert();\n        }\n        return buyToken.balanceOf(address(this)).safeSub(beforeBalance);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "./mixins/MixinKyber.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"./MixinAdapterAddresses.sol\";\n\ninterface IKyberNetworkProxy {\n\n    /// @dev Sells `sellTokenAddress` tokens for `buyTokenAddress` tokens\n    /// using a hint for the reserve.\n    /// @param sellToken Token to sell.\n    /// @param sellAmount Amount of tokens to sell.\n    /// @param buyToken Token to buy.\n    /// @param recipientAddress Address to send bought tokens to.\n    /// @param maxBuyTokenAmount A limit on the amount of tokens to buy.\n    /// @param minConversionRate The minimal conversion rate. If actual rate\n    ///        is lower, trade is canceled.\n    /// @param walletId The wallet ID to send part of the fees\n    /// @param hint The hint for the selective inclusion (or exclusion) of reserves\n    /// @return boughtAmount Amount of tokens bought.\n    function tradeWithHint(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        IERC20TokenV06 buyToken,\n        address payable recipientAddress,\n        uint256 maxBuyTokenAmount,\n        uint256 minConversionRate,\n        address payable walletId,\n        bytes calldata hint\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n}\n\ncontract MixinKyber is\n    MixinAdapterAddresses\n{\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev Address indicating the trade is using ETH\n    address private immutable KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev Mainnet address of the WETH contract.\n    IEtherTokenV06 private immutable WETH;\n    /// @dev Mainnet address of the KyberNetworkProxy contract.\n    IKyberNetworkProxy private immutable KYBER_NETWORK_PROXY;\n\n    constructor(AdapterAddresses memory addresses)\n        public\n    {\n        WETH = IEtherTokenV06(addresses.weth);\n        KYBER_NETWORK_PROXY = IKyberNetworkProxy(addresses.kyberNetworkProxy);\n    }\n\n    function _tradeKyber(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IERC20TokenV06 sellToken, bytes memory hint) =\n            abi.decode(bridgeData, (IERC20TokenV06, bytes));\n\n        uint256 payableAmount = 0;\n        if (sellToken != WETH) {\n            // If the input token is not WETH, grant an allowance to the exchange\n            // to spend them.\n            sellToken.approveIfBelow(\n                address(KYBER_NETWORK_PROXY),\n                sellAmount\n            );\n        } else {\n            // If the input token is WETH, unwrap it and attach it to the call.\n            payableAmount = sellAmount;\n            WETH.withdraw(payableAmount);\n        }\n\n        // Try to sell all of this contract's input token balance through\n        // `KyberNetworkProxy.trade()`.\n        boughtAmount = KYBER_NETWORK_PROXY.tradeWithHint{ value: payableAmount }(\n            // Input token.\n            sellToken == WETH ? IERC20TokenV06(KYBER_ETH_ADDRESS) : sellToken,\n            // Sell amount.\n            sellAmount,\n            // Output token.\n            buyToken == WETH ? IERC20TokenV06(KYBER_ETH_ADDRESS) : buyToken,\n            // Transfer to this contract\n            address(uint160(address(this))),\n            // Buy as much as possible.\n            uint256(-1),\n            // Lowest minimum conversion rate\n            1,\n            // No affiliate address.\n            address(0),\n            hint\n        );\n        // If receving ETH, wrap it to WETH.\n        if (buyToken == WETH) {\n            WETH.deposit{ value: boughtAmount }();\n        }\n        return boughtAmount;\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n",
        "./mixins/MixinMooniswap.sol": "\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"./MixinAdapterAddresses.sol\";\n\n\n/// @dev Moooniswap pool interface.\ninterface IMooniswapPool {\n\n    function swap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        uint256 minBoughtAmount,\n        address referrer\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n}\n\n/// @dev BridgeAdapter mixin for mooniswap.\ncontract MixinMooniswap is\n    MixinAdapterAddresses\n{\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibERC20TokenV06 for IEtherTokenV06;\n\n    /// @dev WETH token.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(AdapterAddresses memory addresses)\n        public\n    {\n        WETH = IEtherTokenV06(addresses.weth);\n    }\n\n    function _tradeMooniswap(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IERC20TokenV06 sellToken, IMooniswapPool pool) =\n            abi.decode(bridgeData, (IERC20TokenV06, IMooniswapPool));\n\n        // Convert WETH to ETH.\n        uint256 ethValue = 0;\n        if (sellToken == WETH) {\n            WETH.withdraw(sellAmount);\n            ethValue = sellAmount;\n        } else {\n            // Grant the pool an allowance.\n            sellToken.approveIfBelow(\n                address(pool),\n                sellAmount\n            );\n        }\n\n        boughtAmount = pool.swap{value: ethValue}(\n            sellToken == WETH ? IERC20TokenV06(0) : sellToken,\n            buyToken == WETH ? IERC20TokenV06(0) : buyToken,\n            sellAmount,\n            1,\n            address(0)\n        );\n\n        // Wrap ETH to WETH.\n        if (buyToken == WETH) {\n            WETH.deposit{value:boughtAmount}();\n        }\n    }\n}\n",
        "./mixins/MixinMStable.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"./MixinAdapterAddresses.sol\";\n\n\ninterface IMStable {\n\n    function swap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        address recipient\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n\ncontract MixinMStable is\n    MixinAdapterAddresses\n{\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev Mainnet address of the mStable mUSD contract.\n    IMStable private immutable MSTABLE;\n\n    constructor(AdapterAddresses memory addresses)\n        public\n    {\n        MSTABLE = IMStable(addresses.mStable);\n    }\n\n    function _tradeMStable(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data to get the `sellToken`.\n        (IERC20TokenV06 sellToken) = abi.decode(bridgeData, (IERC20TokenV06));\n        // Grant an allowance to the exchange to spend `sellToken` token.\n        sellToken.approveIfBelow(address(MSTABLE), sellAmount);\n\n        boughtAmount = MSTABLE.swap(\n            sellToken,\n            buyToken,\n            sellAmount,\n            address(this)\n        );\n    }\n}\n",
        "./mixins/MixinOasis.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"./MixinAdapterAddresses.sol\";\n\ninterface IOasis {\n\n    /// @dev Sell `sellAmount` of `sellToken` token and receive `buyToken` token.\n    /// @param sellToken The token being sold.\n    /// @param sellAmount The amount of `sellToken` token being sold.\n    /// @param buyToken The token being bought.\n    /// @param minBoughtAmount Minimum amount of `buyToken` token to buy.\n    /// @return boughtAmount Amount of `buyToken` bought.\n    function sellAllAmount(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        IERC20TokenV06 buyToken,\n        uint256 minBoughtAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n\ncontract MixinOasis is\n    MixinAdapterAddresses\n{\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev Mainnet address of the Oasis `MatchingMarket` contract.\n    IOasis private immutable OASIS;\n\n    constructor(AdapterAddresses memory addresses)\n        public\n    {\n        OASIS = IOasis(addresses.oasis);\n    }\n\n    function _tradeOasis(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data to get the `sellToken`.\n        (IERC20TokenV06 sellToken) = abi.decode(bridgeData, (IERC20TokenV06));\n        // Grant an allowance to the exchange to spend `sellToken` token.\n        sellToken.approveIfBelow(\n            address(OASIS),\n            sellAmount\n        );\n        // Try to sell all of this contract's `sellToken` token balance.\n        boughtAmount = OASIS.sellAllAmount(\n            sellToken,\n            sellAmount,\n            buyToken,\n            // min fill amount\n            1\n        );\n        return boughtAmount;\n    }\n}\n",
        "./mixins/MixinShell.sol": "\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"./MixinAdapterAddresses.sol\";\n\ninterface IShell {\n\n    function originSwap(\n        address from,\n        address to,\n        uint256 fromAmount,\n        uint256 minTargetAmount,\n        uint256 deadline\n    )\n        external\n        returns (uint256 toAmount);\n}\n\n\n\ncontract MixinShell is\n    MixinAdapterAddresses\n{\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev Mainnet address of the `Shell` contract.\n    IShell private immutable SHELL;\n\n    constructor(AdapterAddresses memory addresses)\n        public\n    {\n        SHELL = IShell(addresses.shell);\n    }\n\n    function _tradeShell(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (address fromTokenAddress) = abi.decode(bridgeData, (address));\n\n        // Grant the Shell contract an allowance to sell the first token.\n        IERC20TokenV06(fromTokenAddress).approveIfBelow(\n            address(SHELL),\n            sellAmount\n        );\n\n        uint256 buyAmount = SHELL.originSwap(\n            fromTokenAddress,\n            address(buyToken),\n             // Sell all tokens we hold.\n            sellAmount,\n             // Minimum buy amount.\n            1,\n            // deadline\n            block.timestamp + 1\n        );\n        return buyAmount;\n    }\n}\n",
        "./mixins/MixinUniswap.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"./MixinAdapterAddresses.sol\";\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param token The token contract.\n    function getExchange(IERC20TokenV06 token)\n        external\n        view\n        returns (IUniswapExchange exchange);\n}\n\ninterface IUniswapExchange {\n\n    /// @dev Buys at least `minTokensBought` tokens with ETH and transfer them\n    ///      to `recipient`.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @return tokensBought Amount of tokens bought.\n    function ethToTokenTransferInput(\n        uint256 minTokensBought,\n        uint256 deadline,\n        address recipient\n    )\n        external\n        payable\n        returns (uint256 tokensBought);\n\n    /// @dev Buys at least `minEthBought` ETH with tokens.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minEthBought The minimum amount of ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @return ethBought Amount of tokens bought.\n    function tokenToEthSwapInput(\n        uint256 tokensSold,\n        uint256 minEthBought,\n        uint256 deadline\n    )\n        external\n        returns (uint256 ethBought);\n\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token\n    ///      and transfer them to `recipient`.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @param buyToken The token being bought.\n    /// @return tokensBought Amount of tokens bought.\n    function tokenToTokenTransferInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        address recipient,\n        IERC20TokenV06 buyToken\n    )\n        external\n        returns (uint256 tokensBought);\n\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @param buyToken The token being bought.\n    /// @return tokensBought Amount of tokens bought.\n    function tokenToTokenSwapInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        IERC20TokenV06 buyToken\n    )\n        external\n        returns (uint256 tokensBought);\n}\n\ncontract MixinUniswap is\n    MixinAdapterAddresses\n{\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev Mainnet address of the WETH contract.\n    IEtherTokenV06 private immutable WETH;\n    /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    IUniswapExchangeFactory private immutable UNISWAP_EXCHANGE_FACTORY;\n\n    constructor(AdapterAddresses memory addresses)\n        public\n    {\n        WETH = IEtherTokenV06(addresses.weth);\n        UNISWAP_EXCHANGE_FACTORY = IUniswapExchangeFactory(addresses.uniswapExchangeFactory);\n    }\n\n    function _tradeUniswap(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data to get the `sellToken`.\n        (IERC20TokenV06 sellToken) = abi.decode(bridgeData, (IERC20TokenV06));\n\n        // Get the exchange for the token pair.\n        IUniswapExchange exchange = _getUniswapExchangeForTokenPair(\n            sellToken,\n            buyToken\n        );\n\n        // Convert from WETH to a token.\n        if (sellToken == WETH) {\n            // Unwrap the WETH.\n            WETH.withdraw(sellAmount);\n            // Buy as much of `buyToken` token with ETH as possible\n            boughtAmount = exchange.ethToTokenTransferInput{ value: sellAmount }(\n                // Minimum buy amount.\n                1,\n                // Expires after this block.\n                block.timestamp,\n                // Recipient is `this`.\n                address(this)\n            );\n\n        // Convert from a token to WETH.\n        } else if (buyToken == WETH) {\n            // Grant the exchange an allowance.\n            sellToken.approveIfBelow(\n                address(exchange),\n                sellAmount\n            );\n            // Buy as much ETH with `sellToken` token as possible.\n            boughtAmount = exchange.tokenToEthSwapInput(\n                // Sell all tokens we hold.\n                sellAmount,\n                // Minimum buy amount.\n                1,\n                // Expires after this block.\n                block.timestamp\n            );\n            // Wrap the ETH.\n            WETH.deposit{ value: boughtAmount }();\n        // Convert from one token to another.\n        } else {\n            // Grant the exchange an allowance.\n            sellToken.approveIfBelow(\n                address(exchange),\n                sellAmount\n            );\n            // Buy as much `buyToken` token with `sellToken` token\n            boughtAmount = exchange.tokenToTokenSwapInput(\n                // Sell all tokens we hold.\n                sellAmount,\n                // Minimum buy amount.\n                1,\n                // Must buy at least 1 intermediate wei of ETH.\n                1,\n                // Expires after this block.\n                block.timestamp,\n                // Convert to `buyToken`.\n                buyToken\n            );\n        }\n\n        return boughtAmount;\n    }\n\n    /// @dev Retrieves the uniswap exchange for a given token pair.\n    ///      In the case of a WETH-token exchange, this will be the non-WETH token.\n    ///      In th ecase of a token-token exchange, this will be the first token.\n    /// @param sellToken The address of the token we are converting from.\n    /// @param buyToken The address of the token we are converting to.\n    /// @return exchange The uniswap exchange.\n    function _getUniswapExchangeForTokenPair(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken\n    )\n        private\n        view\n        returns (IUniswapExchange exchange)\n    {\n        // Whichever isn't WETH is the exchange token.\n        exchange = sellToken == WETH\n            ? UNISWAP_EXCHANGE_FACTORY.getExchange(buyToken)\n            : UNISWAP_EXCHANGE_FACTORY.getExchange(sellToken);\n        require(address(exchange) != address(0), \"NO_UNISWAP_EXCHANGE_FOR_TOKEN\");\n    }\n}\n",
        "./mixins/MixinUniswapV2.sol": "\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"./MixinAdapterAddresses.sol\";\n\n/*\n    UniswapV2\n*/\ninterface IUniswapV2Router02 {\n\n    /// @dev Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path.\n    ///      The first element of path is the input token, the last is the output token, and any intermediate elements represent\n    ///      intermediate pairs to trade through (if, for example, a direct pair does not exist).\n    /// @param amountIn The amount of input tokens to send.\n    /// @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n    /// @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\n    /// @param to Recipient of the output tokens.\n    /// @param deadline Unix timestamp after which the transaction will revert.\n    /// @return amounts The input token amount and all subsequent output token amounts.\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n}\n\ncontract MixinUniswapV2 is\n    MixinAdapterAddresses\n{\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev Mainnet address of the `UniswapV2Router02` contract.\n    IUniswapV2Router02 private immutable UNISWAP_V2_ROUTER;\n\n    constructor(AdapterAddresses memory addresses)\n        public\n    {\n        UNISWAP_V2_ROUTER = IUniswapV2Router02(addresses.uniswapV2Router);\n    }\n\n    function _tradeUniswapV2(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // solhint-disable indent\n        address[] memory path = abi.decode(bridgeData, (address[]));\n        // solhint-enable indent\n\n        require(path.length >= 2, \"UniswapV2Bridge/PATH_LENGTH_MUST_BE_AT_LEAST_TWO\");\n        require(\n            path[path.length - 1] == address(buyToken),\n            \"UniswapV2Bridge/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\"\n        );\n        // Grant the Uniswap router an allowance to sell the first token.\n        IERC20TokenV06(path[0]).approveIfBelow(\n            address(UNISWAP_V2_ROUTER),\n            sellAmount\n        );\n\n        uint[] memory amounts = UNISWAP_V2_ROUTER.swapExactTokensForTokens(\n             // Sell all tokens we hold.\n            sellAmount,\n             // Minimum buy amount.\n            1,\n            // Convert to `buyToken` along this path.\n            path,\n            // Recipient is `this`.\n            address(this),\n            // Expires after this block.\n            block.timestamp\n        );\n        return amounts[amounts.length-1];\n    }\n}\n",
        "./mixins/MixinZeroExBridge.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\ninterface IERC20Bridge {\n\n    /// @dev Transfers `amount` of the ERC20 `buyToken` from `from` to `to`.\n    /// @param buyToken The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        IERC20TokenV06 buyToken,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n}\n\ncontract MixinZeroExBridge {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n\n    function _tradeZeroExBridge(\n        address bridgeAddress,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        uint256 balanceBefore = buyToken.balanceOf(address(this));\n        // Trade the good old fashioned way\n        sellToken.compatTransfer(\n            bridgeAddress,\n            sellAmount\n        );\n        IERC20Bridge(bridgeAddress).bridgeTransferFrom(\n            buyToken,\n            address(bridgeAddress),\n            address(this),\n            1, // amount to transfer back from the bridge\n            bridgeData\n        );\n        boughtAmount = buyToken.balanceOf(address(this)).safeSub(balanceBefore);\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/node_modules/@0x/contracts-erc20"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
