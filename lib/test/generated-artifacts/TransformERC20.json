{
    "schemaVersion": "2.0.0",
    "contractName": "TransformERC20",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "taker",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "inputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "outputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "inputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "TransformedERC20",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "transformerDeployer",
                        "type": "address"
                    }
                ],
                "name": "TransformerDeployerUpdated",
                "type": "event"
            },
            {
                "inputs": [],
                "name": "FEATURE_NAME",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "FEATURE_VERSION",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "callDataHash",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address payable",
                        "name": "taker",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "inputToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "outputToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "inputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minOutputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint32",
                                "name": "deploymentNonce",
                                "type": "uint32"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct ITransformERC20.Transformation[]",
                        "name": "transformations",
                        "type": "tuple[]"
                    }
                ],
                "name": "_transformERC20",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "createTransformWallet",
                "outputs": [
                    {
                        "internalType": "contract IFlashWallet",
                        "name": "wallet",
                        "type": "address"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getTransformWallet",
                "outputs": [
                    {
                        "internalType": "contract IFlashWallet",
                        "name": "wallet",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getTransformerDeployer",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "deployer",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "transformerDeployer",
                        "type": "address"
                    }
                ],
                "name": "migrate",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "success",
                        "type": "bytes4"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "transformerDeployer",
                        "type": "address"
                    }
                ],
                "name": "setTransformerDeployer",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "inputToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "outputToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "inputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minOutputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint32",
                                "name": "deploymentNonce",
                                "type": "uint32"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct ITransformERC20.Transformation[]",
                        "name": "transformations",
                        "type": "tuple[]"
                    }
                ],
                "name": "transformERC20",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            }
        ],
        "devdoc": {
            "details": "Feature to composably transform between ERC20 tokens.",
            "methods": {
                "_transformERC20(bytes32,address,address,address,uint256,uint256,(uint32,bytes)[])": {
                    "details": "Internal version of `transformERC20()`. Only callable from within.",
                    "params": {
                        "callDataHash": "Hash of the ingress calldata.",
                        "inputToken": "The token being provided by the taker.        If `0xeee...`, ETH is implied and should be provided with the call.`",
                        "inputTokenAmount": "The amount of `inputToken` to take from the taker.        If set to `uint256(-1)`, the entire spendable balance of the taker        will be solt.",
                        "minOutputTokenAmount": "The minimum amount of `outputToken` the taker        must receive for the entire transformation to succeed. If set to zero,        the minimum output token transfer will not be asserted.",
                        "outputToken": "The token to be acquired by the taker.        `0xeee...` implies ETH.",
                        "taker": "The taker address.",
                        "transformations": "The transformations to execute on the token balance(s)        in sequence."
                    },
                    "returns": {
                        "outputTokenAmount": "The amount of `outputToken` received by the taker."
                    }
                },
                "createTransformWallet()": {
                    "details": "Deploy a new wallet instance and replace the current one with it.      Useful if we somehow break the current wallet instance.      Anyone can call this.",
                    "returns": {
                        "wallet": "The new wallet instance."
                    }
                },
                "getTransformWallet()": {
                    "details": "Return the current wallet instance that will serve as the execution      context for transformations.",
                    "returns": {
                        "wallet": "The wallet instance."
                    }
                },
                "getTransformerDeployer()": {
                    "details": "Return the allowed deployer for transformers.",
                    "returns": {
                        "deployer": "The transform deployer address."
                    }
                },
                "migrate(address)": {
                    "details": "Initialize and register this feature.      Should be delegatecalled by `Migrate.migrate()`.",
                    "params": {
                        "transformerDeployer": "The trusted deployer for transformers."
                    },
                    "returns": {
                        "success": "`LibMigrate.SUCCESS` on success."
                    }
                },
                "setTransformerDeployer(address)": {
                    "details": "Replace the allowed deployer for transformers.      Only callable by the owner.",
                    "params": {
                        "transformerDeployer": "The address of the trusted deployer for transformers."
                    }
                },
                "transformERC20(address,address,uint256,uint256,(uint32,bytes)[])": {
                    "details": "Executes a series of transformations to convert an ERC20 `inputToken`      to an ERC20 `outputToken`.",
                    "params": {
                        "inputToken": "The token being provided by the sender.        If `0xeee...`, ETH is implied and should be provided with the call.`",
                        "inputTokenAmount": "The amount of `inputToken` to take from the sender.        If set to `uint256(-1)`, the entire spendable balance of the taker        will be solt.",
                        "minOutputTokenAmount": "The minimum amount of `outputToken` the sender        must receive for the entire transformation to succeed. If set to zero,        the minimum output token transfer will not be asserted.",
                        "outputToken": "The token to be acquired by the sender.        `0xeee...` implies ETH.",
                        "transformations": "The transformations to execute on the token balance(s)        in sequence."
                    },
                    "returns": {
                        "outputTokenAmount": "The amount of `outputToken` received by the sender."
                    }
                }
            },
            "stateVariables": {
                "FEATURE_NAME": {
                    "details": "Name of this feature."
                },
                "FEATURE_VERSION": {
                    "details": "Version of this feature."
                },
                "_implementation": {
                    "details": "The implementation address of this feature."
                }
            }
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x60c060405261001a60016000806001600160e01b0361003616565b60805234801561002957600080fd5b503060601b60a052610068565b6bffffffff0000000000000000604084901b1667ffffffff00000000602084901b1617811763ffffffff169392505050565b60805160a05160601c612eed6100a7600039806104a35280610553528061060352806106b3528061076352806108135250806101ab5250612eed6000f3fe6080604052600436106100965760003560e01c80634d54cdb61161006957806387c964191161004e57806387c9641914610145578063ce5494bb14610167578063f028e9be1461019457610096565b80634d54cdb61461010e5780636ae4b4f71461012357610096565b8063031b905c1461009b578063287b071b146100c657806329b02306146100e8578063415565b0146100fb575b600080fd5b3480156100a757600080fd5b506100b06101a9565b6040516100bd9190612018565b60405180910390f35b3480156100d257600080fd5b506100db6101cd565b6040516100bd9190611db8565b6100b06100f636600461197f565b610249565b6100b0610109366004611ac5565b61027e565b34801561011a57600080fd5b506100db6102b1565b34801561012f57600080fd5b506101386102da565b6040516100bd9190612005565b34801561015157600080fd5b50610165610160366004611947565b610313565b005b34801561017357600080fd5b50610187610182366004611947565b61044a565b6040516100bd9190611f37565b3480156101a057600080fd5b506100db6108ed565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006040516101db906117c7565b604051809103906000f0801580156101f7573d6000803e3d6000fd5b50905080610203610913565b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905590565b60003330146102635761026361025e33610926565b6109d1565b610272888888888888886109d9565b98975050505050505050565b60006102a7600036604051610294929190611c1a565b60405180910390203388888888886109d9565b9695505050505050565b60006102bb610913565b6001015473ffffffffffffffffffffffffffffffffffffffff16905090565b6040518060400160405280600e81526020017f5472616e73666f726d455243323000000000000000000000000000000000000081525081565b60003073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561035b57600080fd5b505afa15801561036f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103939190611963565b90503373ffffffffffffffffffffffffffffffffffffffff8216146103bf576103bf61025e3383610c14565b50806103c9610913565b60010180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790556040517ffd45604abad79c16e23348a137ed8292661be1b8eba6e4806ebed6833b1c046a9061043f908390611db8565b60405180910390a150565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081526000903090636eb224cb906104cb907f4d54cdb600000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600401611f64565b600060405180830381600087803b1580156104e557600080fd5b505af11580156104f9573d6000803e3d6000fd5b50506040517f6eb224cb000000000000000000000000000000000000000000000000000000008152309250636eb224cb915061057b907f287b071b00000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600401611f64565b600060405180830381600087803b15801561059557600080fd5b505af11580156105a9573d6000803e3d6000fd5b50506040517f6eb224cb000000000000000000000000000000000000000000000000000000008152309250636eb224cb915061062b907ff028e9be00000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600401611f64565b600060405180830381600087803b15801561064557600080fd5b505af1158015610659573d6000803e3d6000fd5b50506040517f6eb224cb000000000000000000000000000000000000000000000000000000008152309250636eb224cb91506106db907f87c9641900000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600401611f64565b600060405180830381600087803b1580156106f557600080fd5b505af1158015610709573d6000803e3d6000fd5b50506040517f6eb224cb000000000000000000000000000000000000000000000000000000008152309250636eb224cb915061078b907f415565b000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600401611f64565b600060405180830381600087803b1580156107a557600080fd5b505af11580156107b9573d6000803e3d6000fd5b50506040517f6eb224cb000000000000000000000000000000000000000000000000000000008152309250636eb224cb915061083b907f29b0230600000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600401611f64565b600060405180830381600087803b15801561085557600080fd5b505af1158015610869573d6000803e3d6000fd5b505050506108756101cd565b508161087f610913565b60010180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055507f2c64c5ef000000000000000000000000000000000000000000000000000000005b919050565b60006108f7610913565b5473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806109206004610cc2565b92915050565b606060405161093490611d40565b60405180910390208260405160240161094d9190611db8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050919050565b805160208201fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff841415610a94576040517f496f471e000000000000000000000000000000000000000000000000000000008152309063496f471e90610a419089908b90600401611e10565b60206040518083038186803b158015610a5957600080fd5b505afa158015610a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a919190611b39565b93505b610a9c6117d4565b610aa46108ed565b73ffffffffffffffffffffffffffffffffffffffff168152610ac46102b1565b73ffffffffffffffffffffffffffffffffffffffff166020820152610ae98689610cdd565b60408201528051610afe9088908a9088610db4565b60005b8351811015610b3a57610b328260000151858381518110610b1e57fe5b602002602001015184602001518c8e610e9f565b600101610b01565b50610b458689610cdd565b6060820181905260408201511015610b775760408101516060820151610b709163ffffffff61108016565b9150610b9e565b806040015181606001511015610b9e57610b9e61025e87836060015184604001510361109f565b83821015610bb457610bb461025e8784876110c8565b8773ffffffffffffffffffffffffffffffffffffffff167f0f6672f78a59ba8e5e5b5d38df3ebc67f3c792e2c9259b8d97d7f00dd78ba1b388888886604051610c009493929190611e37565b60405180910390a250979650505050505050565b6060604051610c2290611c2a565b60405180910390208383604051602401610c3d929190611e10565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b60006080826004811115610cd257fe5b600101901b92915050565b6000610ce883611179565b15610d0b575073ffffffffffffffffffffffffffffffffffffffff811631610920565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190610d5d908590600401611db8565b60206040518083038186803b158015610d7557600080fd5b505afa158015610d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dad9190611b39565b9392505050565b3415610dfe5760405173ffffffffffffffffffffffffffffffffffffffff8316903480156108fc02916000818181858888f19350505050158015610dfc573d6000803e3d6000fd5b505b610e0784611179565b610e84576040517f89dd02e700000000000000000000000000000000000000000000000000000000815230906389dd02e790610e4d908790879087908790600401611fac565b600060405180830381600087803b158015610e6757600080fd5b505af1158015610e7b573d6000803e3d6000fd5b50505050610e99565b80341015610e9957610e9961025e34836111ab565b50505050565b6000610eaf8486600001516111d4565b905060608673ffffffffffffffffffffffffffffffffffffffff1663b68df16d8363e063ed8160e01b86888b60200151604051602401610ef193929190611f02565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e085901b9092168252610f829291600401611dd9565b600060405180830381600087803b158015610f9c57600080fd5b505af1158015610fb0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610ff69190810190611a4f565b905080516020141580611060575080517f13c9929e000000000000000000000000000000000000000000000000000000009061103b9083016020908101908401611a0f565b7fffffffff000000000000000000000000000000000000000000000000000000001614155b156110775761107761025e83886020015184611243565b50505050505050565b6000828211156110995761109961025e6002858561126e565b50900390565b60606040516110ad90611c53565b60405180910390208383604051602401610c3d929190611eae565b60606040516110d690611cf1565b60405180910390208484846040516024016110f393929190611ed4565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b73ffffffffffffffffffffffffffffffffffffffff811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14919050565b60606040516111b990611ca2565b60405180910390208383604051602401610c3d929190612021565b600060606111e18361128d565b9050805160d50160f81b609460f81b85836040516020016112059493929190611b9b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120949350505050565b606060405161125190611d69565b60405180910390208484846040516024016110f393929190611e6d565b606063e946c1bb60e01b8484846040516024016110f393929190611fe3565b606063ffffffff82166112ff5760408051600180825281830190925290602082018180368337019050509050608060f81b816000815181106112cb57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506108e8565b60808263ffffffff16101561133e57604080516001808252818301909252906020820181803683370190505090508160f81b816000815181106112cb57fe5b60ff8263ffffffff16116113bd5760408051600280825281830190925290602082018180368337019050509050608160f81b8160008151811061137d57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b816001815181106112cb57fe5b61ffff8263ffffffff16116114a35760408051600380825281830190925290602082018180368337019050509050608260f81b816000815181106113fd57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060f084901b16908290600190811061146357fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b816002815181106112cb57fe5b62ffffff8263ffffffff16116115f05760408051600480825281830190925290602082018180368337019050509050608360f81b816000815181106114e457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060e884901b16908290600190811061154a57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060f084901b1690829060029081106115b057fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b816003815181106112cb57fe5b60408051600580825281830190925290602082018180368337019050509050608460f81b8160008151811061162157fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060e084901b16908290600190811061168757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060e884901b1690829060029081106116ed57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060f084901b16908290600390811061175357fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b8160048151811061179357fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350919050565b610db08061210883390190565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b600082601f830112611838578081fd5b813567ffffffffffffffff8082111561184f578283fd5b602061185e818285020161202f565b838152935080840185820160005b8581101561193b57813588016040807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838d030112156118ab57600080fd5b6118b48161202f565b868301356118c1816120f5565b815282820135888111156118d457600080fd5b8084018d603f8201126118e657600080fd5b8881013594506118fd6118f886612056565b61202f565b91508482528d8486830101111561191357600080fd5b611922858a8401868401612098565b508188015285525050918301919083019060010161186c565b50505050505092915050565b600060208284031215611958578081fd5b8135610dad816120d0565b600060208284031215611974578081fd5b8151610dad816120d0565b600080600080600080600060e0888a031215611999578283fd5b8735965060208801356119ab816120d0565b955060408801356119bb816120d0565b945060608801356119cb816120d0565b93506080880135925060a0880135915060c088013567ffffffffffffffff8111156119f4578182fd5b611a008a828b01611828565b91505092959891949750929550565b600060208284031215611a20578081fd5b81517fffffffff0000000000000000000000000000000000000000000000000000000081168114610dad578182fd5b600060208284031215611a60578081fd5b815167ffffffffffffffff811115611a76578182fd5b80830184601f820112611a87578283fd5b80519150611a976118f883612056565b828152856020848401011115611aab578384fd5b611abc8360208301602085016120a4565b95945050505050565b600080600080600060a08688031215611adc578081fd5b8535611ae7816120d0565b94506020860135611af7816120d0565b93506040860135925060608601359150608086013567ffffffffffffffff811115611b20578182fd5b611b2c88828901611828565b9150509295509295909350565b600060208284031215611b4a578081fd5b5051919050565b60008151808452611b698160208601602086016120a4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60007fff0000000000000000000000000000000000000000000000000000000000000080871683528086166001840152507fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b1660028301528251611c0a8160168501602087016120a4565b9190910160160195945050505050565b6000828483379101908152919050565b7f4f6e6c794f776e65724572726f7228616464726573732c6164647265737329008152601f0190565b7f4e656761746976655472616e73666f726d45524332304f75747075744572726f81527f7228616464726573732c75696e74323536290000000000000000000000000000602082015260320190565b7f496e73756666696369656e7445746841747461636865644572726f722875696e81527f743235362c75696e7432353629000000000000000000000000000000000000006020820152602d0190565b7f496e636f6d706c6574655472616e73666f726d45524332304572726f7228616481527f64726573732c75696e743235362c75696e743235362900000000000000000000602082015260360190565b7f4f6e6c7943616c6c61626c65427953656c664572726f72286164647265737329815260200190565b7f5472616e73666f726d65724661696c65644572726f7228616464726573732c6281527f797465732c6279746573290000000000000000000000000000000000000000006020820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8416825260406020830152611e086040830184611b51565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff94851681529290931660208301526040820152606081019190915260800190565b600073ffffffffffffffffffffffffffffffffffffffff8516825260606020830152611e9c6060830185611b51565b82810360408401526102a78185611b51565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b600084825273ffffffffffffffffffffffffffffffffffffffff8416602083015260606040830152611abc6060830184611b51565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b6060810160048510611ff157fe5b938152602081019290925260409091015290565b600060208252610dad6020830184611b51565b90815260200190565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171561204e57600080fd5b604052919050565b600067ffffffffffffffff82111561206c578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b82818337506000910152565b60005b838110156120bf5781810151838201526020016120a7565b83811115610e995750506000910152565b73ffffffffffffffffffffffffffffffffffffffff811681146120f257600080fd5b50565b63ffffffff811681146120f257600080fdfe60a060405234801561001057600080fd5b5033606081901b608052610d6b6100456000398061027952806102a7528061039952806103d552806104035250610d6b6000f3fe6080604052600436106100745760003560e01c8063b68df16d1161004e578063b68df16d146100f8578063bc197c811461010b578063c0ee0b8a14610138578063f23a6e611461015a5761007b565b806301ffc9a71461008057806354132d78146100b65780638da5cb5b146100d65761007b565b3661007b57005b600080fd5b34801561008c57600080fd5b506100a061009b366004610a20565b61017a565b6040516100ad9190610cc5565b60405180910390f35b6100c96100c4366004610837565b61025f565b6040516100ad9190610cfd565b3480156100e257600080fd5b506100eb610397565b6040516100ad9190610bca565b6100c96101063660046107e4565b6103bb565b34801561011757600080fd5b5061012b610126366004610891565b6104e8565b6040516100ad9190610cd0565b34801561014457600080fd5b506101586101533660046109c6565b610515565b005b34801561016657600080fd5b5061012b61017536600461094c565b61051b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061020d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000145b8061025957507fffffffff0000000000000000000000000000000000000000000000000000000082167fc0ee0b8a00000000000000000000000000000000000000000000000000000000145b92915050565b60603373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146102d0576102d06102cb337f0000000000000000000000000000000000000000000000000000000000000000610546565b6105e8565b60008573ffffffffffffffffffffffffffffffffffffffff168386866040516102fa929190610ad0565b60006040518083038185875af1925050503d8060008114610337576040519150601f19603f3d011682016040523d82523d6000602084013e61033c565b606091505b50925090508061038e5761038e6102cb308888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92508991506105f09050565b50949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60603373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610427576104276102cb337f0000000000000000000000000000000000000000000000000000000000000000610546565b60008473ffffffffffffffffffffffffffffffffffffffff168484604051610450929190610ad0565b600060405180830381855af49150503d806000811461048b576040519150601f19603f3d011682016040523d82523d6000602084013e610490565b606091505b5092509050806104e0576104e06102cb308787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508992506106a7915050565b509392505050565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b50505050565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b6060631de45ad160e01b8383604051602401610563929190610beb565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b805160208201fd5b60606040516105fe90610b55565b6040518091039020868686868660405160240161061f959493929190610c68565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905095945050505050565b60606040516106b590610ae0565b6040518091039020858585856040516024016106d49493929190610c12565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050949350505050565b60008083601f84011261076c578182fd5b50813567ffffffffffffffff811115610783578182fd5b602083019150836020808302850101111561079d57600080fd5b9250929050565b60008083601f8401126107b5578182fd5b50813567ffffffffffffffff8111156107cc578182fd5b60208301915083602082850101111561079d57600080fd5b6000806000604084860312156107f8578283fd5b833561080381610d10565b9250602084013567ffffffffffffffff81111561081e578283fd5b61082a868287016107a4565b9497909650939450505050565b6000806000806060858703121561084c578081fd5b843561085781610d10565b9350602085013567ffffffffffffffff811115610872578182fd5b61087e878288016107a4565b9598909750949560400135949350505050565b60008060008060008060008060a0898b0312156108ac578384fd5b88356108b781610d10565b975060208901356108c781610d10565b9650604089013567ffffffffffffffff808211156108e3578586fd5b6108ef8c838d0161075b565b909850965060608b0135915080821115610907578586fd5b6109138c838d0161075b565b909650945060808b013591508082111561092b578384fd5b506109388b828c016107a4565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215610964578182fd5b863561096f81610d10565b9550602087013561097f81610d10565b94506040870135935060608701359250608087013567ffffffffffffffff8111156109a8578283fd5b6109b489828a016107a4565b979a9699509497509295939492505050565b600080600080606085870312156109db578384fd5b84356109e681610d10565b935060208501359250604085013567ffffffffffffffff811115610a08578283fd5b610a14878288016107a4565b95989497509550505050565b600060208284031215610a31578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a60578182fd5b9392505050565b60008151808452815b81811015610a8c57602081850181015186830182015201610a70565b81811115610a9d5782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000828483379101908152919050565b7f57616c6c65744578656375746544656c656761746543616c6c4661696c65644581527f72726f7228616464726573732c616464726573732c62797465732c627974657360208201527f2900000000000000000000000000000000000000000000000000000000000000604082015260410190565b7f57616c6c65744578656375746543616c6c4661696c65644572726f722861646481527f726573732c616464726573732c62797465732c75696e743235362c627974657360208201527f2900000000000000000000000000000000000000000000000000000000000000604082015260410190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525060806040830152610c4b6080830185610a67565b8281036060840152610c5d8185610a67565b979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525060a06040830152610ca160a0830186610a67565b8460608401528281036080840152610cb98185610a67565b98975050505050505050565b901515815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b600060208252610a606020830184610a67565b73ffffffffffffffffffffffffffffffffffffffff81168114610d3257600080fd5b5056fea2646970667358221220ea158204983735d9422efefae68a9c1a8366c3e8c79cd5c3bfaa8de256d138df64736f6c634300060a0033a26469706673582212209542118e5451fb25562076f0a19cca7ea8d786388e183cbd82d072f01ab8f66a64736f6c634300060a0033",
                "opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE PUSH2 0x1A PUSH1 0x1 PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH2 0x36 AND JUMP JUMPDEST PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP ADDRESS PUSH1 0x60 SHL PUSH1 0xA0 MSTORE PUSH2 0x68 JUMP JUMPDEST PUSH12 0xFFFFFFFF0000000000000000 PUSH1 0x40 DUP5 SWAP1 SHL AND PUSH8 0xFFFFFFFF00000000 PUSH1 0x20 DUP5 SWAP1 SHL AND OR DUP2 OR PUSH4 0xFFFFFFFF AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH2 0x2EED PUSH2 0xA7 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x4A3 MSTORE DUP1 PUSH2 0x553 MSTORE DUP1 PUSH2 0x603 MSTORE DUP1 PUSH2 0x6B3 MSTORE DUP1 PUSH2 0x763 MSTORE DUP1 PUSH2 0x813 MSTORE POP DUP1 PUSH2 0x1AB MSTORE POP PUSH2 0x2EED PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x96 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4D54CDB6 GT PUSH2 0x69 JUMPI DUP1 PUSH4 0x87C96419 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x87C96419 EQ PUSH2 0x145 JUMPI DUP1 PUSH4 0xCE5494BB EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xF028E9BE EQ PUSH2 0x194 JUMPI PUSH2 0x96 JUMP JUMPDEST DUP1 PUSH4 0x4D54CDB6 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x6AE4B4F7 EQ PUSH2 0x123 JUMPI PUSH2 0x96 JUMP JUMPDEST DUP1 PUSH4 0x31B905C EQ PUSH2 0x9B JUMPI DUP1 PUSH4 0x287B071B EQ PUSH2 0xC6 JUMPI DUP1 PUSH4 0x29B02306 EQ PUSH2 0xE8 JUMPI DUP1 PUSH4 0x415565B0 EQ PUSH2 0xFB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB0 PUSH2 0x1A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBD SWAP2 SWAP1 PUSH2 0x2018 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDB PUSH2 0x1CD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBD SWAP2 SWAP1 PUSH2 0x1DB8 JUMP JUMPDEST PUSH2 0xB0 PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0x197F JUMP JUMPDEST PUSH2 0x249 JUMP JUMPDEST PUSH2 0xB0 PUSH2 0x109 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AC5 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDB PUSH2 0x2B1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x2DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBD SWAP2 SWAP1 PUSH2 0x2005 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x165 PUSH2 0x160 CALLDATASIZE PUSH1 0x4 PUSH2 0x1947 JUMP JUMPDEST PUSH2 0x313 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x187 PUSH2 0x182 CALLDATASIZE PUSH1 0x4 PUSH2 0x1947 JUMP JUMPDEST PUSH2 0x44A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBD SWAP2 SWAP1 PUSH2 0x1F37 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDB PUSH2 0x8ED JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH2 0x1DB SWAP1 PUSH2 0x17C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x1F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x203 PUSH2 0x913 JUMP JUMPDEST DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER ADDRESS EQ PUSH2 0x263 JUMPI PUSH2 0x263 PUSH2 0x25E CALLER PUSH2 0x926 JUMP JUMPDEST PUSH2 0x9D1 JUMP JUMPDEST PUSH2 0x272 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x9D9 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A7 PUSH1 0x0 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x294 SWAP3 SWAP2 SWAP1 PUSH2 0x1C1A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 CALLER DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x9D9 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BB PUSH2 0x913 JUMP JUMPDEST PUSH1 0x1 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5472616E73666F726D4552433230000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x393 SWAP2 SWAP1 PUSH2 0x1963 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ PUSH2 0x3BF JUMPI PUSH2 0x3BF PUSH2 0x25E CALLER DUP4 PUSH2 0xC14 JUMP JUMPDEST POP DUP1 PUSH2 0x3C9 PUSH2 0x913 JUMP JUMPDEST PUSH1 0x1 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xFD45604ABAD79C16E23348A137ED8292661BE1B8EBA6E4806EBED6833B1C046A SWAP1 PUSH2 0x43F SWAP1 DUP4 SWAP1 PUSH2 0x1DB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 ADDRESS SWAP1 PUSH4 0x6EB224CB SWAP1 PUSH2 0x4CB SWAP1 PUSH32 0x4D54CDB600000000000000000000000000000000000000000000000000000000 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x1F64 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4F9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP3 POP PUSH4 0x6EB224CB SWAP2 POP PUSH2 0x57B SWAP1 PUSH32 0x287B071B00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x1F64 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x595 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5A9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP3 POP PUSH4 0x6EB224CB SWAP2 POP PUSH2 0x62B SWAP1 PUSH32 0xF028E9BE00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x1F64 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x645 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x659 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP3 POP PUSH4 0x6EB224CB SWAP2 POP PUSH2 0x6DB SWAP1 PUSH32 0x87C9641900000000000000000000000000000000000000000000000000000000 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x1F64 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x709 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP3 POP PUSH4 0x6EB224CB SWAP2 POP PUSH2 0x78B SWAP1 PUSH32 0x415565B000000000000000000000000000000000000000000000000000000000 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x1F64 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP3 POP PUSH4 0x6EB224CB SWAP2 POP PUSH2 0x83B SWAP1 PUSH32 0x29B0230600000000000000000000000000000000000000000000000000000000 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x1F64 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x855 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x869 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x875 PUSH2 0x1CD JUMP JUMPDEST POP DUP2 PUSH2 0x87F PUSH2 0x913 JUMP JUMPDEST PUSH1 0x1 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH32 0x2C64C5EF00000000000000000000000000000000000000000000000000000000 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8F7 PUSH2 0x913 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x920 PUSH1 0x4 PUSH2 0xCC2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x934 SWAP1 PUSH2 0x1D40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x94D SWAP2 SWAP1 PUSH2 0x1DB8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 EQ ISZERO PUSH2 0xA94 JUMPI PUSH1 0x40 MLOAD PUSH32 0x496F471E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x496F471E SWAP1 PUSH2 0xA41 SWAP1 DUP10 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x1E10 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA6D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA91 SWAP2 SWAP1 PUSH2 0x1B39 JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH2 0xA9C PUSH2 0x17D4 JUMP JUMPDEST PUSH2 0xAA4 PUSH2 0x8ED JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH2 0xAC4 PUSH2 0x2B1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xAE9 DUP7 DUP10 PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE DUP1 MLOAD PUSH2 0xAFE SWAP1 DUP9 SWAP1 DUP11 SWAP1 DUP9 PUSH2 0xDB4 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0xB3A JUMPI PUSH2 0xB32 DUP3 PUSH1 0x0 ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB1E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP13 DUP15 PUSH2 0xE9F JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xB01 JUMP JUMPDEST POP PUSH2 0xB45 DUP7 DUP10 PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD MLOAD LT ISZERO PUSH2 0xB77 JUMPI PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xB70 SWAP2 PUSH4 0xFFFFFFFF PUSH2 0x1080 AND JUMP JUMPDEST SWAP2 POP PUSH2 0xB9E JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD DUP2 PUSH1 0x60 ADD MLOAD LT ISZERO PUSH2 0xB9E JUMPI PUSH2 0xB9E PUSH2 0x25E DUP8 DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD SUB PUSH2 0x109F JUMP JUMPDEST DUP4 DUP3 LT ISZERO PUSH2 0xBB4 JUMPI PUSH2 0xBB4 PUSH2 0x25E DUP8 DUP5 DUP8 PUSH2 0x10C8 JUMP JUMPDEST DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF6672F78A59BA8E5E5B5D38DF3EBC67F3C792E2C9259B8D97D7F00DD78BA1B3 DUP9 DUP9 DUP9 DUP7 PUSH1 0x40 MLOAD PUSH2 0xC00 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0xC22 SWAP1 PUSH2 0x1C2A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xC3D SWAP3 SWAP2 SWAP1 PUSH2 0x1E10 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xCD2 JUMPI INVALID JUMPDEST PUSH1 0x1 ADD SWAP1 SHL SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCE8 DUP4 PUSH2 0x1179 JUMP JUMPDEST ISZERO PUSH2 0xD0B JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND BALANCE PUSH2 0x920 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xD5D SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1DB8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD89 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDAD SWAP2 SWAP1 PUSH2 0x1B39 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0xDFE JUMPI PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xDFC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST PUSH2 0xE07 DUP5 PUSH2 0x1179 JUMP JUMPDEST PUSH2 0xE84 JUMPI PUSH1 0x40 MLOAD PUSH32 0x89DD02E700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x89DD02E7 SWAP1 PUSH2 0xE4D SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FAC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE7B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xE99 JUMP JUMPDEST DUP1 CALLVALUE LT ISZERO PUSH2 0xE99 JUMPI PUSH2 0xE99 PUSH2 0x25E CALLVALUE DUP4 PUSH2 0x11AB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEAF DUP5 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x11D4 JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB68DF16D DUP4 PUSH4 0xE063ED81 PUSH1 0xE0 SHL DUP7 DUP9 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xEF1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F02 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP5 DUP6 AND OR SWAP1 MSTORE MLOAD PUSH1 0xE0 DUP6 SWAP1 SHL SWAP1 SWAP3 AND DUP3 MSTORE PUSH2 0xF82 SWAP3 SWAP2 PUSH1 0x4 ADD PUSH2 0x1DD9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFB0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xFF6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1A4F JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x20 EQ ISZERO DUP1 PUSH2 0x1060 JUMPI POP DUP1 MLOAD PUSH32 0x13C9929E00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x103B SWAP1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP1 DUP5 ADD PUSH2 0x1A0F JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1077 JUMPI PUSH2 0x1077 PUSH2 0x25E DUP4 DUP9 PUSH1 0x20 ADD MLOAD DUP5 PUSH2 0x1243 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1099 JUMPI PUSH2 0x1099 PUSH2 0x25E PUSH1 0x2 DUP6 DUP6 PUSH2 0x126E JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x10AD SWAP1 PUSH2 0x1C53 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xC3D SWAP3 SWAP2 SWAP1 PUSH2 0x1EAE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x10D6 SWAP1 PUSH2 0x1CF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x10F3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1ED4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x11B9 SWAP1 PUSH2 0x1CA2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xC3D SWAP3 SWAP2 SWAP1 PUSH2 0x2021 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x11E1 DUP4 PUSH2 0x128D JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0xD5 ADD PUSH1 0xF8 SHL PUSH1 0x94 PUSH1 0xF8 SHL DUP6 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1205 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x1251 SWAP1 PUSH2 0x1D69 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x10F3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E6D JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x10F3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1FE3 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xFFFFFFFF DUP3 AND PUSH2 0x12FF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x80 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x12CB JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x8E8 JUMP JUMPDEST PUSH1 0x80 DUP3 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0x133E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x12CB JUMPI INVALID JUMPDEST PUSH1 0xFF DUP3 PUSH4 0xFFFFFFFF AND GT PUSH2 0x13BD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x81 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x137D JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x12CB JUMPI INVALID JUMPDEST PUSH2 0xFFFF DUP3 PUSH4 0xFFFFFFFF AND GT PUSH2 0x14A3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x82 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x13FD JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xF0 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH2 0x1463 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x12CB JUMPI INVALID JUMPDEST PUSH3 0xFFFFFF DUP3 PUSH4 0xFFFFFFFF AND GT PUSH2 0x15F0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x83 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x14E4 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xE8 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH2 0x154A JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xF0 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x2 SWAP1 DUP2 LT PUSH2 0x15B0 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH2 0x12CB JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x5 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x84 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1621 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH2 0x1687 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xE8 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x2 SWAP1 DUP2 LT PUSH2 0x16ED JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xF0 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x3 SWAP1 DUP2 LT PUSH2 0x1753 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x4 DUP2 MLOAD DUP2 LT PUSH2 0x1793 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDB0 DUP1 PUSH2 0x2108 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1838 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x184F JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 PUSH2 0x185E DUP2 DUP3 DUP6 MUL ADD PUSH2 0x202F JUMP JUMPDEST DUP4 DUP2 MSTORE SWAP4 POP DUP1 DUP5 ADD DUP6 DUP3 ADD PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x193B JUMPI DUP2 CALLDATALOAD DUP9 ADD PUSH1 0x40 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP14 SUB ADD SLT ISZERO PUSH2 0x18AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18B4 DUP2 PUSH2 0x202F JUMP JUMPDEST DUP7 DUP4 ADD CALLDATALOAD PUSH2 0x18C1 DUP2 PUSH2 0x20F5 JUMP JUMPDEST DUP2 MSTORE DUP3 DUP3 ADD CALLDATALOAD DUP9 DUP2 GT ISZERO PUSH2 0x18D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP5 ADD DUP14 PUSH1 0x3F DUP3 ADD SLT PUSH2 0x18E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH2 0x18FD PUSH2 0x18F8 DUP7 PUSH2 0x2056 JUMP JUMPDEST PUSH2 0x202F JUMP JUMPDEST SWAP2 POP DUP5 DUP3 MSTORE DUP14 DUP5 DUP7 DUP4 ADD ADD GT ISZERO PUSH2 0x1913 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1922 DUP6 DUP11 DUP5 ADD DUP7 DUP5 ADD PUSH2 0x2098 JUMP JUMPDEST POP DUP2 DUP9 ADD MSTORE DUP6 MSTORE POP POP SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x186C JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1958 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xDAD DUP2 PUSH2 0x20D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1974 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xDAD DUP2 PUSH2 0x20D0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x1999 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x19AB DUP2 PUSH2 0x20D0 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH2 0x19BB DUP2 PUSH2 0x20D0 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH2 0x19CB DUP2 PUSH2 0x20D0 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19F4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1A00 DUP11 DUP3 DUP12 ADD PUSH2 0x1828 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A20 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xDAD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A60 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A76 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 DUP4 ADD DUP5 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x1A87 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x1A97 PUSH2 0x18F8 DUP4 PUSH2 0x2056 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP6 PUSH1 0x20 DUP5 DUP5 ADD ADD GT ISZERO PUSH2 0x1AAB JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1ABC DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP6 ADD PUSH2 0x20A4 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1ADC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1AE7 DUP2 PUSH2 0x20D0 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1AF7 DUP2 PUSH2 0x20D0 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B20 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1B2C DUP9 DUP3 DUP10 ADD PUSH2 0x1828 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B4A JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1B69 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x20A4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x1 DUP5 ADD MSTORE POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP5 PUSH1 0x60 SHL AND PUSH1 0x2 DUP4 ADD MSTORE DUP3 MLOAD PUSH2 0x1C0A DUP2 PUSH1 0x16 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x20A4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x16 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C794F776E65724572726F7228616464726573732C616464726573732900 DUP2 MSTORE PUSH1 0x1F ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E656761746976655472616E73666F726D45524332304F75747075744572726F DUP2 MSTORE PUSH32 0x7228616464726573732C75696E74323536290000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x32 ADD SWAP1 JUMP JUMPDEST PUSH32 0x496E73756666696369656E7445746841747461636865644572726F722875696E DUP2 MSTORE PUSH32 0x743235362C75696E743235362900000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2D ADD SWAP1 JUMP JUMPDEST PUSH32 0x496E636F6D706C6574655472616E73666F726D45524332304572726F72286164 DUP2 MSTORE PUSH32 0x64726573732C75696E743235362C75696E743235362900000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x36 ADD SWAP1 JUMP JUMPDEST PUSH32 0x4F6E6C7943616C6C61626C65427953656C664572726F72286164647265737329 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0x5472616E73666F726D65724661696C65644572726F7228616464726573732C62 DUP2 MSTORE PUSH32 0x797465732C627974657329000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2B ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1E08 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1B51 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1E9C PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1B51 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2A7 DUP2 DUP6 PUSH2 0x1B51 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1ABC PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1B51 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x1FF1 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0xDAD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1B51 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x204E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x206C JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20BF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x20A7 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xE99 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x20F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x20F2 JUMPI PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x60 DUP2 SWAP1 SHL PUSH1 0x80 MSTORE PUSH2 0xD6B PUSH2 0x45 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x279 MSTORE DUP1 PUSH2 0x2A7 MSTORE DUP1 PUSH2 0x399 MSTORE DUP1 PUSH2 0x3D5 MSTORE DUP1 PUSH2 0x403 MSTORE POP PUSH2 0xD6B PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x74 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB68DF16D GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xB68DF16D EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x10B JUMPI DUP1 PUSH4 0xC0EE0B8A EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x15A JUMPI PUSH2 0x7B JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x80 JUMPI DUP1 PUSH4 0x54132D78 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xD6 JUMPI PUSH2 0x7B JUMP JUMPDEST CALLDATASIZE PUSH2 0x7B JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0xA20 JUMP JUMPDEST PUSH2 0x17A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0xCC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC9 PUSH2 0xC4 CALLDATASIZE PUSH1 0x4 PUSH2 0x837 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0xCFD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEB PUSH2 0x397 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0xBCA JUMP JUMPDEST PUSH2 0xC9 PUSH2 0x106 CALLDATASIZE PUSH1 0x4 PUSH2 0x7E4 JUMP JUMPDEST PUSH2 0x3BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x117 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12B PUSH2 0x126 CALLDATASIZE PUSH1 0x4 PUSH2 0x891 JUMP JUMPDEST PUSH2 0x4E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0xCD0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x158 PUSH2 0x153 CALLDATASIZE PUSH1 0x4 PUSH2 0x9C6 JUMP JUMPDEST PUSH2 0x515 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12B PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x94C JUMP JUMPDEST PUSH2 0x51B JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x20D JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x259 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xC0EE0B8A00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x2D0 JUMPI PUSH2 0x2D0 PUSH2 0x2CB CALLER PUSH32 0x0 PUSH2 0x546 JUMP JUMPDEST PUSH2 0x5E8 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP3 SWAP2 SWAP1 PUSH2 0xAD0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x337 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x33C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP3 POP SWAP1 POP DUP1 PUSH2 0x38E JUMPI PUSH2 0x38E PUSH2 0x2CB ADDRESS DUP9 DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP11 SWAP3 POP DUP10 SWAP2 POP PUSH2 0x5F0 SWAP1 POP JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x60 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x427 JUMPI PUSH2 0x427 PUSH2 0x2CB CALLER PUSH32 0x0 PUSH2 0x546 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x450 SWAP3 SWAP2 SWAP1 PUSH2 0xAD0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x48B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x490 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP3 POP SWAP1 POP DUP1 PUSH2 0x4E0 JUMPI PUSH2 0x4E0 PUSH2 0x2CB ADDRESS DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP10 SWAP3 POP PUSH2 0x6A7 SWAP2 POP POP JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x1DE45AD1 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x563 SWAP3 SWAP2 SWAP1 PUSH2 0xBEB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x5FE SWAP1 PUSH2 0xB55 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x61F SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC68 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x6B5 SWAP1 PUSH2 0xAE0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6D4 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC12 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x76C JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x783 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x79D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x7B5 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7CC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x79D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7F8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x803 DUP2 PUSH2 0xD10 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x81E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x82A DUP7 DUP3 DUP8 ADD PUSH2 0x7A4 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x84C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x857 DUP2 PUSH2 0xD10 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x872 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x87E DUP8 DUP3 DUP9 ADD PUSH2 0x7A4 JUMP JUMPDEST SWAP6 SWAP9 SWAP1 SWAP8 POP SWAP5 SWAP6 PUSH1 0x40 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x8AC JUMPI DUP4 DUP5 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x8B7 DUP2 PUSH2 0xD10 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x8C7 DUP2 PUSH2 0xD10 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x8E3 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x8EF DUP13 DUP4 DUP14 ADD PUSH2 0x75B JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x907 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x913 DUP13 DUP4 DUP14 ADD PUSH2 0x75B JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x92B JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x938 DUP12 DUP3 DUP13 ADD PUSH2 0x7A4 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x964 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x96F DUP2 PUSH2 0xD10 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x97F DUP2 PUSH2 0xD10 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9A8 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9B4 DUP10 DUP3 DUP11 ADD PUSH2 0x7A4 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9DB JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x9E6 DUP2 PUSH2 0xD10 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA08 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xA14 DUP8 DUP3 DUP9 ADD PUSH2 0x7A4 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA31 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xA60 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA8C JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xA70 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xA9D JUMPI DUP3 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x57616C6C65744578656375746544656C656761746543616C6C4661696C656445 DUP2 MSTORE PUSH32 0x72726F7228616464726573732C616464726573732C62797465732C6279746573 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x41 ADD SWAP1 JUMP JUMPDEST PUSH32 0x57616C6C65744578656375746543616C6C4661696C65644572726F7228616464 DUP2 MSTORE PUSH32 0x726573732C616464726573732C62797465732C75696E743235362C6279746573 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x41 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xC4B PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0xA67 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0xC5D DUP2 DUP6 PUSH2 0xA67 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xCA1 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0xA67 JUMP JUMPDEST DUP5 PUSH1 0x60 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0xCB9 DUP2 DUP6 PUSH2 0xA67 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0xA60 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xA67 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xD32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA ISZERO DUP3 DIV SWAP9 CALLDATACOPY CALLDATALOAD 0xD9 TIMESTAMP 0x2E INVALID STATICCALL 0xE6 DUP11 SWAP13 BYTE DUP4 PUSH7 0xC3E8C79CD5C3BF 0xAA DUP14 0xE2 JUMP 0xD1 CODESIZE 0xDF PUSH5 0x736F6C6343 STOP MOD EXP STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 TIMESTAMP GT DUP15 SLOAD MLOAD 0xFB 0x25 JUMP KECCAK256 PUSH23 0xF0A19CCA7EA8D786388E183CBD82D072F01AB8F66A6473 PUSH16 0x6C634300060A00330000000000000000 ",
                "sourceMap": "1462:13696:23:-:0;;;2026:23;2041:1;2044;;-1:-1:-1;;;;;2026:14:23;:23;:::i;:::-;1974:75;;2259:69;;;;;;;;;-1:-1:-1;2316:4:23;2290:31;;;;1462:13696;;1858:208:24;2020:11;2029:2;2020:11;;;;2036;2045:2;2036:11;;;;2019:29;:40;;2036:11;2012:47;1858:208;;;;;:::o;1462:13696:23:-;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "2437": [
                        {
                            "length": 32,
                            "start": 427
                        }
                    ],
                    "2440": [
                        {
                            "length": 32,
                            "start": 1187
                        },
                        {
                            "length": 32,
                            "start": 1363
                        },
                        {
                            "length": 32,
                            "start": 1539
                        },
                        {
                            "length": 32,
                            "start": 1715
                        },
                        {
                            "length": 32,
                            "start": 1891
                        },
                        {
                            "length": 32,
                            "start": 2067
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x6080604052600436106100965760003560e01c80634d54cdb61161006957806387c964191161004e57806387c9641914610145578063ce5494bb14610167578063f028e9be1461019457610096565b80634d54cdb61461010e5780636ae4b4f71461012357610096565b8063031b905c1461009b578063287b071b146100c657806329b02306146100e8578063415565b0146100fb575b600080fd5b3480156100a757600080fd5b506100b06101a9565b6040516100bd9190612018565b60405180910390f35b3480156100d257600080fd5b506100db6101cd565b6040516100bd9190611db8565b6100b06100f636600461197f565b610249565b6100b0610109366004611ac5565b61027e565b34801561011a57600080fd5b506100db6102b1565b34801561012f57600080fd5b506101386102da565b6040516100bd9190612005565b34801561015157600080fd5b50610165610160366004611947565b610313565b005b34801561017357600080fd5b50610187610182366004611947565b61044a565b6040516100bd9190611f37565b3480156101a057600080fd5b506100db6108ed565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006040516101db906117c7565b604051809103906000f0801580156101f7573d6000803e3d6000fd5b50905080610203610913565b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905590565b60003330146102635761026361025e33610926565b6109d1565b610272888888888888886109d9565b98975050505050505050565b60006102a7600036604051610294929190611c1a565b60405180910390203388888888886109d9565b9695505050505050565b60006102bb610913565b6001015473ffffffffffffffffffffffffffffffffffffffff16905090565b6040518060400160405280600e81526020017f5472616e73666f726d455243323000000000000000000000000000000000000081525081565b60003073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561035b57600080fd5b505afa15801561036f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103939190611963565b90503373ffffffffffffffffffffffffffffffffffffffff8216146103bf576103bf61025e3383610c14565b50806103c9610913565b60010180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790556040517ffd45604abad79c16e23348a137ed8292661be1b8eba6e4806ebed6833b1c046a9061043f908390611db8565b60405180910390a150565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081526000903090636eb224cb906104cb907f4d54cdb600000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600401611f64565b600060405180830381600087803b1580156104e557600080fd5b505af11580156104f9573d6000803e3d6000fd5b50506040517f6eb224cb000000000000000000000000000000000000000000000000000000008152309250636eb224cb915061057b907f287b071b00000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600401611f64565b600060405180830381600087803b15801561059557600080fd5b505af11580156105a9573d6000803e3d6000fd5b50506040517f6eb224cb000000000000000000000000000000000000000000000000000000008152309250636eb224cb915061062b907ff028e9be00000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600401611f64565b600060405180830381600087803b15801561064557600080fd5b505af1158015610659573d6000803e3d6000fd5b50506040517f6eb224cb000000000000000000000000000000000000000000000000000000008152309250636eb224cb91506106db907f87c9641900000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600401611f64565b600060405180830381600087803b1580156106f557600080fd5b505af1158015610709573d6000803e3d6000fd5b50506040517f6eb224cb000000000000000000000000000000000000000000000000000000008152309250636eb224cb915061078b907f415565b000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600401611f64565b600060405180830381600087803b1580156107a557600080fd5b505af11580156107b9573d6000803e3d6000fd5b50506040517f6eb224cb000000000000000000000000000000000000000000000000000000008152309250636eb224cb915061083b907f29b0230600000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600401611f64565b600060405180830381600087803b15801561085557600080fd5b505af1158015610869573d6000803e3d6000fd5b505050506108756101cd565b508161087f610913565b60010180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055507f2c64c5ef000000000000000000000000000000000000000000000000000000005b919050565b60006108f7610913565b5473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806109206004610cc2565b92915050565b606060405161093490611d40565b60405180910390208260405160240161094d9190611db8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050919050565b805160208201fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff841415610a94576040517f496f471e000000000000000000000000000000000000000000000000000000008152309063496f471e90610a419089908b90600401611e10565b60206040518083038186803b158015610a5957600080fd5b505afa158015610a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a919190611b39565b93505b610a9c6117d4565b610aa46108ed565b73ffffffffffffffffffffffffffffffffffffffff168152610ac46102b1565b73ffffffffffffffffffffffffffffffffffffffff166020820152610ae98689610cdd565b60408201528051610afe9088908a9088610db4565b60005b8351811015610b3a57610b328260000151858381518110610b1e57fe5b602002602001015184602001518c8e610e9f565b600101610b01565b50610b458689610cdd565b6060820181905260408201511015610b775760408101516060820151610b709163ffffffff61108016565b9150610b9e565b806040015181606001511015610b9e57610b9e61025e87836060015184604001510361109f565b83821015610bb457610bb461025e8784876110c8565b8773ffffffffffffffffffffffffffffffffffffffff167f0f6672f78a59ba8e5e5b5d38df3ebc67f3c792e2c9259b8d97d7f00dd78ba1b388888886604051610c009493929190611e37565b60405180910390a250979650505050505050565b6060604051610c2290611c2a565b60405180910390208383604051602401610c3d929190611e10565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b60006080826004811115610cd257fe5b600101901b92915050565b6000610ce883611179565b15610d0b575073ffffffffffffffffffffffffffffffffffffffff811631610920565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190610d5d908590600401611db8565b60206040518083038186803b158015610d7557600080fd5b505afa158015610d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dad9190611b39565b9392505050565b3415610dfe5760405173ffffffffffffffffffffffffffffffffffffffff8316903480156108fc02916000818181858888f19350505050158015610dfc573d6000803e3d6000fd5b505b610e0784611179565b610e84576040517f89dd02e700000000000000000000000000000000000000000000000000000000815230906389dd02e790610e4d908790879087908790600401611fac565b600060405180830381600087803b158015610e6757600080fd5b505af1158015610e7b573d6000803e3d6000fd5b50505050610e99565b80341015610e9957610e9961025e34836111ab565b50505050565b6000610eaf8486600001516111d4565b905060608673ffffffffffffffffffffffffffffffffffffffff1663b68df16d8363e063ed8160e01b86888b60200151604051602401610ef193929190611f02565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e085901b9092168252610f829291600401611dd9565b600060405180830381600087803b158015610f9c57600080fd5b505af1158015610fb0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610ff69190810190611a4f565b905080516020141580611060575080517f13c9929e000000000000000000000000000000000000000000000000000000009061103b9083016020908101908401611a0f565b7fffffffff000000000000000000000000000000000000000000000000000000001614155b156110775761107761025e83886020015184611243565b50505050505050565b6000828211156110995761109961025e6002858561126e565b50900390565b60606040516110ad90611c53565b60405180910390208383604051602401610c3d929190611eae565b60606040516110d690611cf1565b60405180910390208484846040516024016110f393929190611ed4565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b73ffffffffffffffffffffffffffffffffffffffff811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14919050565b60606040516111b990611ca2565b60405180910390208383604051602401610c3d929190612021565b600060606111e18361128d565b9050805160d50160f81b609460f81b85836040516020016112059493929190611b9b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120949350505050565b606060405161125190611d69565b60405180910390208484846040516024016110f393929190611e6d565b606063e946c1bb60e01b8484846040516024016110f393929190611fe3565b606063ffffffff82166112ff5760408051600180825281830190925290602082018180368337019050509050608060f81b816000815181106112cb57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506108e8565b60808263ffffffff16101561133e57604080516001808252818301909252906020820181803683370190505090508160f81b816000815181106112cb57fe5b60ff8263ffffffff16116113bd5760408051600280825281830190925290602082018180368337019050509050608160f81b8160008151811061137d57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b816001815181106112cb57fe5b61ffff8263ffffffff16116114a35760408051600380825281830190925290602082018180368337019050509050608260f81b816000815181106113fd57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060f084901b16908290600190811061146357fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b816002815181106112cb57fe5b62ffffff8263ffffffff16116115f05760408051600480825281830190925290602082018180368337019050509050608360f81b816000815181106114e457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060e884901b16908290600190811061154a57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060f084901b1690829060029081106115b057fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b816003815181106112cb57fe5b60408051600580825281830190925290602082018180368337019050509050608460f81b8160008151811061162157fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060e084901b16908290600190811061168757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060e884901b1690829060029081106116ed57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060f084901b16908290600390811061175357fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b8160048151811061179357fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350919050565b610db08061210883390190565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b600082601f830112611838578081fd5b813567ffffffffffffffff8082111561184f578283fd5b602061185e818285020161202f565b838152935080840185820160005b8581101561193b57813588016040807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838d030112156118ab57600080fd5b6118b48161202f565b868301356118c1816120f5565b815282820135888111156118d457600080fd5b8084018d603f8201126118e657600080fd5b8881013594506118fd6118f886612056565b61202f565b91508482528d8486830101111561191357600080fd5b611922858a8401868401612098565b508188015285525050918301919083019060010161186c565b50505050505092915050565b600060208284031215611958578081fd5b8135610dad816120d0565b600060208284031215611974578081fd5b8151610dad816120d0565b600080600080600080600060e0888a031215611999578283fd5b8735965060208801356119ab816120d0565b955060408801356119bb816120d0565b945060608801356119cb816120d0565b93506080880135925060a0880135915060c088013567ffffffffffffffff8111156119f4578182fd5b611a008a828b01611828565b91505092959891949750929550565b600060208284031215611a20578081fd5b81517fffffffff0000000000000000000000000000000000000000000000000000000081168114610dad578182fd5b600060208284031215611a60578081fd5b815167ffffffffffffffff811115611a76578182fd5b80830184601f820112611a87578283fd5b80519150611a976118f883612056565b828152856020848401011115611aab578384fd5b611abc8360208301602085016120a4565b95945050505050565b600080600080600060a08688031215611adc578081fd5b8535611ae7816120d0565b94506020860135611af7816120d0565b93506040860135925060608601359150608086013567ffffffffffffffff811115611b20578182fd5b611b2c88828901611828565b9150509295509295909350565b600060208284031215611b4a578081fd5b5051919050565b60008151808452611b698160208601602086016120a4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60007fff0000000000000000000000000000000000000000000000000000000000000080871683528086166001840152507fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b1660028301528251611c0a8160168501602087016120a4565b9190910160160195945050505050565b6000828483379101908152919050565b7f4f6e6c794f776e65724572726f7228616464726573732c6164647265737329008152601f0190565b7f4e656761746976655472616e73666f726d45524332304f75747075744572726f81527f7228616464726573732c75696e74323536290000000000000000000000000000602082015260320190565b7f496e73756666696369656e7445746841747461636865644572726f722875696e81527f743235362c75696e7432353629000000000000000000000000000000000000006020820152602d0190565b7f496e636f6d706c6574655472616e73666f726d45524332304572726f7228616481527f64726573732c75696e743235362c75696e743235362900000000000000000000602082015260360190565b7f4f6e6c7943616c6c61626c65427953656c664572726f72286164647265737329815260200190565b7f5472616e73666f726d65724661696c65644572726f7228616464726573732c6281527f797465732c6279746573290000000000000000000000000000000000000000006020820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8416825260406020830152611e086040830184611b51565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff94851681529290931660208301526040820152606081019190915260800190565b600073ffffffffffffffffffffffffffffffffffffffff8516825260606020830152611e9c6060830185611b51565b82810360408401526102a78185611b51565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b600084825273ffffffffffffffffffffffffffffffffffffffff8416602083015260606040830152611abc6060830184611b51565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b6060810160048510611ff157fe5b938152602081019290925260409091015290565b600060208252610dad6020830184611b51565b90815260200190565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171561204e57600080fd5b604052919050565b600067ffffffffffffffff82111561206c578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b82818337506000910152565b60005b838110156120bf5781810151838201526020016120a7565b83811115610e995750506000910152565b73ffffffffffffffffffffffffffffffffffffffff811681146120f257600080fd5b50565b63ffffffff811681146120f257600080fdfe60a060405234801561001057600080fd5b5033606081901b608052610d6b6100456000398061027952806102a7528061039952806103d552806104035250610d6b6000f3fe6080604052600436106100745760003560e01c8063b68df16d1161004e578063b68df16d146100f8578063bc197c811461010b578063c0ee0b8a14610138578063f23a6e611461015a5761007b565b806301ffc9a71461008057806354132d78146100b65780638da5cb5b146100d65761007b565b3661007b57005b600080fd5b34801561008c57600080fd5b506100a061009b366004610a20565b61017a565b6040516100ad9190610cc5565b60405180910390f35b6100c96100c4366004610837565b61025f565b6040516100ad9190610cfd565b3480156100e257600080fd5b506100eb610397565b6040516100ad9190610bca565b6100c96101063660046107e4565b6103bb565b34801561011757600080fd5b5061012b610126366004610891565b6104e8565b6040516100ad9190610cd0565b34801561014457600080fd5b506101586101533660046109c6565b610515565b005b34801561016657600080fd5b5061012b61017536600461094c565b61051b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061020d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000145b8061025957507fffffffff0000000000000000000000000000000000000000000000000000000082167fc0ee0b8a00000000000000000000000000000000000000000000000000000000145b92915050565b60603373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146102d0576102d06102cb337f0000000000000000000000000000000000000000000000000000000000000000610546565b6105e8565b60008573ffffffffffffffffffffffffffffffffffffffff168386866040516102fa929190610ad0565b60006040518083038185875af1925050503d8060008114610337576040519150601f19603f3d011682016040523d82523d6000602084013e61033c565b606091505b50925090508061038e5761038e6102cb308888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92508991506105f09050565b50949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60603373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610427576104276102cb337f0000000000000000000000000000000000000000000000000000000000000000610546565b60008473ffffffffffffffffffffffffffffffffffffffff168484604051610450929190610ad0565b600060405180830381855af49150503d806000811461048b576040519150601f19603f3d011682016040523d82523d6000602084013e610490565b606091505b5092509050806104e0576104e06102cb308787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508992506106a7915050565b509392505050565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b50505050565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b6060631de45ad160e01b8383604051602401610563929190610beb565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b805160208201fd5b60606040516105fe90610b55565b6040518091039020868686868660405160240161061f959493929190610c68565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905095945050505050565b60606040516106b590610ae0565b6040518091039020858585856040516024016106d49493929190610c12565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050949350505050565b60008083601f84011261076c578182fd5b50813567ffffffffffffffff811115610783578182fd5b602083019150836020808302850101111561079d57600080fd5b9250929050565b60008083601f8401126107b5578182fd5b50813567ffffffffffffffff8111156107cc578182fd5b60208301915083602082850101111561079d57600080fd5b6000806000604084860312156107f8578283fd5b833561080381610d10565b9250602084013567ffffffffffffffff81111561081e578283fd5b61082a868287016107a4565b9497909650939450505050565b6000806000806060858703121561084c578081fd5b843561085781610d10565b9350602085013567ffffffffffffffff811115610872578182fd5b61087e878288016107a4565b9598909750949560400135949350505050565b60008060008060008060008060a0898b0312156108ac578384fd5b88356108b781610d10565b975060208901356108c781610d10565b9650604089013567ffffffffffffffff808211156108e3578586fd5b6108ef8c838d0161075b565b909850965060608b0135915080821115610907578586fd5b6109138c838d0161075b565b909650945060808b013591508082111561092b578384fd5b506109388b828c016107a4565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215610964578182fd5b863561096f81610d10565b9550602087013561097f81610d10565b94506040870135935060608701359250608087013567ffffffffffffffff8111156109a8578283fd5b6109b489828a016107a4565b979a9699509497509295939492505050565b600080600080606085870312156109db578384fd5b84356109e681610d10565b935060208501359250604085013567ffffffffffffffff811115610a08578283fd5b610a14878288016107a4565b95989497509550505050565b600060208284031215610a31578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a60578182fd5b9392505050565b60008151808452815b81811015610a8c57602081850181015186830182015201610a70565b81811115610a9d5782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000828483379101908152919050565b7f57616c6c65744578656375746544656c656761746543616c6c4661696c65644581527f72726f7228616464726573732c616464726573732c62797465732c627974657360208201527f2900000000000000000000000000000000000000000000000000000000000000604082015260410190565b7f57616c6c65744578656375746543616c6c4661696c65644572726f722861646481527f726573732c616464726573732c62797465732c75696e743235362c627974657360208201527f2900000000000000000000000000000000000000000000000000000000000000604082015260410190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525060806040830152610c4b6080830185610a67565b8281036060840152610c5d8185610a67565b979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525060a06040830152610ca160a0830186610a67565b8460608401528281036080840152610cb98185610a67565b98975050505050505050565b901515815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b600060208252610a606020830184610a67565b73ffffffffffffffffffffffffffffffffffffffff81168114610d3257600080fd5b5056fea2646970667358221220ea158204983735d9422efefae68a9c1a8366c3e8c79cd5c3bfaa8de256d138df64736f6c634300060a0033a26469706673582212209542118e5451fb25562076f0a19cca7ea8d786388e183cbd82d072f01ab8f66a64736f6c634300060a0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x96 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4D54CDB6 GT PUSH2 0x69 JUMPI DUP1 PUSH4 0x87C96419 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x87C96419 EQ PUSH2 0x145 JUMPI DUP1 PUSH4 0xCE5494BB EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xF028E9BE EQ PUSH2 0x194 JUMPI PUSH2 0x96 JUMP JUMPDEST DUP1 PUSH4 0x4D54CDB6 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x6AE4B4F7 EQ PUSH2 0x123 JUMPI PUSH2 0x96 JUMP JUMPDEST DUP1 PUSH4 0x31B905C EQ PUSH2 0x9B JUMPI DUP1 PUSH4 0x287B071B EQ PUSH2 0xC6 JUMPI DUP1 PUSH4 0x29B02306 EQ PUSH2 0xE8 JUMPI DUP1 PUSH4 0x415565B0 EQ PUSH2 0xFB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB0 PUSH2 0x1A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBD SWAP2 SWAP1 PUSH2 0x2018 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDB PUSH2 0x1CD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBD SWAP2 SWAP1 PUSH2 0x1DB8 JUMP JUMPDEST PUSH2 0xB0 PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0x197F JUMP JUMPDEST PUSH2 0x249 JUMP JUMPDEST PUSH2 0xB0 PUSH2 0x109 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AC5 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDB PUSH2 0x2B1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x2DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBD SWAP2 SWAP1 PUSH2 0x2005 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x165 PUSH2 0x160 CALLDATASIZE PUSH1 0x4 PUSH2 0x1947 JUMP JUMPDEST PUSH2 0x313 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x187 PUSH2 0x182 CALLDATASIZE PUSH1 0x4 PUSH2 0x1947 JUMP JUMPDEST PUSH2 0x44A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBD SWAP2 SWAP1 PUSH2 0x1F37 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDB PUSH2 0x8ED JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH2 0x1DB SWAP1 PUSH2 0x17C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x1F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x203 PUSH2 0x913 JUMP JUMPDEST DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER ADDRESS EQ PUSH2 0x263 JUMPI PUSH2 0x263 PUSH2 0x25E CALLER PUSH2 0x926 JUMP JUMPDEST PUSH2 0x9D1 JUMP JUMPDEST PUSH2 0x272 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x9D9 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A7 PUSH1 0x0 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x294 SWAP3 SWAP2 SWAP1 PUSH2 0x1C1A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 CALLER DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x9D9 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BB PUSH2 0x913 JUMP JUMPDEST PUSH1 0x1 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5472616E73666F726D4552433230000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x393 SWAP2 SWAP1 PUSH2 0x1963 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ PUSH2 0x3BF JUMPI PUSH2 0x3BF PUSH2 0x25E CALLER DUP4 PUSH2 0xC14 JUMP JUMPDEST POP DUP1 PUSH2 0x3C9 PUSH2 0x913 JUMP JUMPDEST PUSH1 0x1 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xFD45604ABAD79C16E23348A137ED8292661BE1B8EBA6E4806EBED6833B1C046A SWAP1 PUSH2 0x43F SWAP1 DUP4 SWAP1 PUSH2 0x1DB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 ADDRESS SWAP1 PUSH4 0x6EB224CB SWAP1 PUSH2 0x4CB SWAP1 PUSH32 0x4D54CDB600000000000000000000000000000000000000000000000000000000 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x1F64 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4F9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP3 POP PUSH4 0x6EB224CB SWAP2 POP PUSH2 0x57B SWAP1 PUSH32 0x287B071B00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x1F64 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x595 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5A9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP3 POP PUSH4 0x6EB224CB SWAP2 POP PUSH2 0x62B SWAP1 PUSH32 0xF028E9BE00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x1F64 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x645 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x659 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP3 POP PUSH4 0x6EB224CB SWAP2 POP PUSH2 0x6DB SWAP1 PUSH32 0x87C9641900000000000000000000000000000000000000000000000000000000 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x1F64 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x709 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP3 POP PUSH4 0x6EB224CB SWAP2 POP PUSH2 0x78B SWAP1 PUSH32 0x415565B000000000000000000000000000000000000000000000000000000000 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x1F64 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP3 POP PUSH4 0x6EB224CB SWAP2 POP PUSH2 0x83B SWAP1 PUSH32 0x29B0230600000000000000000000000000000000000000000000000000000000 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x1F64 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x855 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x869 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x875 PUSH2 0x1CD JUMP JUMPDEST POP DUP2 PUSH2 0x87F PUSH2 0x913 JUMP JUMPDEST PUSH1 0x1 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH32 0x2C64C5EF00000000000000000000000000000000000000000000000000000000 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8F7 PUSH2 0x913 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x920 PUSH1 0x4 PUSH2 0xCC2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x934 SWAP1 PUSH2 0x1D40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x94D SWAP2 SWAP1 PUSH2 0x1DB8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 EQ ISZERO PUSH2 0xA94 JUMPI PUSH1 0x40 MLOAD PUSH32 0x496F471E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x496F471E SWAP1 PUSH2 0xA41 SWAP1 DUP10 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x1E10 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA6D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA91 SWAP2 SWAP1 PUSH2 0x1B39 JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH2 0xA9C PUSH2 0x17D4 JUMP JUMPDEST PUSH2 0xAA4 PUSH2 0x8ED JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH2 0xAC4 PUSH2 0x2B1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xAE9 DUP7 DUP10 PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE DUP1 MLOAD PUSH2 0xAFE SWAP1 DUP9 SWAP1 DUP11 SWAP1 DUP9 PUSH2 0xDB4 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0xB3A JUMPI PUSH2 0xB32 DUP3 PUSH1 0x0 ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB1E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP13 DUP15 PUSH2 0xE9F JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xB01 JUMP JUMPDEST POP PUSH2 0xB45 DUP7 DUP10 PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD MLOAD LT ISZERO PUSH2 0xB77 JUMPI PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xB70 SWAP2 PUSH4 0xFFFFFFFF PUSH2 0x1080 AND JUMP JUMPDEST SWAP2 POP PUSH2 0xB9E JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD DUP2 PUSH1 0x60 ADD MLOAD LT ISZERO PUSH2 0xB9E JUMPI PUSH2 0xB9E PUSH2 0x25E DUP8 DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD SUB PUSH2 0x109F JUMP JUMPDEST DUP4 DUP3 LT ISZERO PUSH2 0xBB4 JUMPI PUSH2 0xBB4 PUSH2 0x25E DUP8 DUP5 DUP8 PUSH2 0x10C8 JUMP JUMPDEST DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF6672F78A59BA8E5E5B5D38DF3EBC67F3C792E2C9259B8D97D7F00DD78BA1B3 DUP9 DUP9 DUP9 DUP7 PUSH1 0x40 MLOAD PUSH2 0xC00 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0xC22 SWAP1 PUSH2 0x1C2A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xC3D SWAP3 SWAP2 SWAP1 PUSH2 0x1E10 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xCD2 JUMPI INVALID JUMPDEST PUSH1 0x1 ADD SWAP1 SHL SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCE8 DUP4 PUSH2 0x1179 JUMP JUMPDEST ISZERO PUSH2 0xD0B JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND BALANCE PUSH2 0x920 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xD5D SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1DB8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD89 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDAD SWAP2 SWAP1 PUSH2 0x1B39 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0xDFE JUMPI PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xDFC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST PUSH2 0xE07 DUP5 PUSH2 0x1179 JUMP JUMPDEST PUSH2 0xE84 JUMPI PUSH1 0x40 MLOAD PUSH32 0x89DD02E700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x89DD02E7 SWAP1 PUSH2 0xE4D SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FAC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE7B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xE99 JUMP JUMPDEST DUP1 CALLVALUE LT ISZERO PUSH2 0xE99 JUMPI PUSH2 0xE99 PUSH2 0x25E CALLVALUE DUP4 PUSH2 0x11AB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEAF DUP5 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x11D4 JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB68DF16D DUP4 PUSH4 0xE063ED81 PUSH1 0xE0 SHL DUP7 DUP9 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xEF1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F02 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP5 DUP6 AND OR SWAP1 MSTORE MLOAD PUSH1 0xE0 DUP6 SWAP1 SHL SWAP1 SWAP3 AND DUP3 MSTORE PUSH2 0xF82 SWAP3 SWAP2 PUSH1 0x4 ADD PUSH2 0x1DD9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFB0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xFF6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1A4F JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x20 EQ ISZERO DUP1 PUSH2 0x1060 JUMPI POP DUP1 MLOAD PUSH32 0x13C9929E00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x103B SWAP1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP1 DUP5 ADD PUSH2 0x1A0F JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1077 JUMPI PUSH2 0x1077 PUSH2 0x25E DUP4 DUP9 PUSH1 0x20 ADD MLOAD DUP5 PUSH2 0x1243 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1099 JUMPI PUSH2 0x1099 PUSH2 0x25E PUSH1 0x2 DUP6 DUP6 PUSH2 0x126E JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x10AD SWAP1 PUSH2 0x1C53 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xC3D SWAP3 SWAP2 SWAP1 PUSH2 0x1EAE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x10D6 SWAP1 PUSH2 0x1CF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x10F3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1ED4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x11B9 SWAP1 PUSH2 0x1CA2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xC3D SWAP3 SWAP2 SWAP1 PUSH2 0x2021 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x11E1 DUP4 PUSH2 0x128D JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0xD5 ADD PUSH1 0xF8 SHL PUSH1 0x94 PUSH1 0xF8 SHL DUP6 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1205 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x1251 SWAP1 PUSH2 0x1D69 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x10F3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E6D JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x10F3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1FE3 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xFFFFFFFF DUP3 AND PUSH2 0x12FF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x80 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x12CB JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x8E8 JUMP JUMPDEST PUSH1 0x80 DUP3 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0x133E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x12CB JUMPI INVALID JUMPDEST PUSH1 0xFF DUP3 PUSH4 0xFFFFFFFF AND GT PUSH2 0x13BD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x81 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x137D JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x12CB JUMPI INVALID JUMPDEST PUSH2 0xFFFF DUP3 PUSH4 0xFFFFFFFF AND GT PUSH2 0x14A3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x82 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x13FD JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xF0 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH2 0x1463 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x12CB JUMPI INVALID JUMPDEST PUSH3 0xFFFFFF DUP3 PUSH4 0xFFFFFFFF AND GT PUSH2 0x15F0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x83 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x14E4 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xE8 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH2 0x154A JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xF0 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x2 SWAP1 DUP2 LT PUSH2 0x15B0 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH2 0x12CB JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x5 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x84 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1621 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH2 0x1687 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xE8 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x2 SWAP1 DUP2 LT PUSH2 0x16ED JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xF0 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x3 SWAP1 DUP2 LT PUSH2 0x1753 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x4 DUP2 MLOAD DUP2 LT PUSH2 0x1793 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDB0 DUP1 PUSH2 0x2108 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1838 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x184F JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 PUSH2 0x185E DUP2 DUP3 DUP6 MUL ADD PUSH2 0x202F JUMP JUMPDEST DUP4 DUP2 MSTORE SWAP4 POP DUP1 DUP5 ADD DUP6 DUP3 ADD PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x193B JUMPI DUP2 CALLDATALOAD DUP9 ADD PUSH1 0x40 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP14 SUB ADD SLT ISZERO PUSH2 0x18AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18B4 DUP2 PUSH2 0x202F JUMP JUMPDEST DUP7 DUP4 ADD CALLDATALOAD PUSH2 0x18C1 DUP2 PUSH2 0x20F5 JUMP JUMPDEST DUP2 MSTORE DUP3 DUP3 ADD CALLDATALOAD DUP9 DUP2 GT ISZERO PUSH2 0x18D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP5 ADD DUP14 PUSH1 0x3F DUP3 ADD SLT PUSH2 0x18E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH2 0x18FD PUSH2 0x18F8 DUP7 PUSH2 0x2056 JUMP JUMPDEST PUSH2 0x202F JUMP JUMPDEST SWAP2 POP DUP5 DUP3 MSTORE DUP14 DUP5 DUP7 DUP4 ADD ADD GT ISZERO PUSH2 0x1913 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1922 DUP6 DUP11 DUP5 ADD DUP7 DUP5 ADD PUSH2 0x2098 JUMP JUMPDEST POP DUP2 DUP9 ADD MSTORE DUP6 MSTORE POP POP SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x186C JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1958 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xDAD DUP2 PUSH2 0x20D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1974 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xDAD DUP2 PUSH2 0x20D0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x1999 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x19AB DUP2 PUSH2 0x20D0 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH2 0x19BB DUP2 PUSH2 0x20D0 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH2 0x19CB DUP2 PUSH2 0x20D0 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19F4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1A00 DUP11 DUP3 DUP12 ADD PUSH2 0x1828 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A20 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xDAD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A60 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A76 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 DUP4 ADD DUP5 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x1A87 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x1A97 PUSH2 0x18F8 DUP4 PUSH2 0x2056 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP6 PUSH1 0x20 DUP5 DUP5 ADD ADD GT ISZERO PUSH2 0x1AAB JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1ABC DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP6 ADD PUSH2 0x20A4 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1ADC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1AE7 DUP2 PUSH2 0x20D0 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1AF7 DUP2 PUSH2 0x20D0 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B20 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1B2C DUP9 DUP3 DUP10 ADD PUSH2 0x1828 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B4A JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1B69 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x20A4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x1 DUP5 ADD MSTORE POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP5 PUSH1 0x60 SHL AND PUSH1 0x2 DUP4 ADD MSTORE DUP3 MLOAD PUSH2 0x1C0A DUP2 PUSH1 0x16 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x20A4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x16 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C794F776E65724572726F7228616464726573732C616464726573732900 DUP2 MSTORE PUSH1 0x1F ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E656761746976655472616E73666F726D45524332304F75747075744572726F DUP2 MSTORE PUSH32 0x7228616464726573732C75696E74323536290000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x32 ADD SWAP1 JUMP JUMPDEST PUSH32 0x496E73756666696369656E7445746841747461636865644572726F722875696E DUP2 MSTORE PUSH32 0x743235362C75696E743235362900000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2D ADD SWAP1 JUMP JUMPDEST PUSH32 0x496E636F6D706C6574655472616E73666F726D45524332304572726F72286164 DUP2 MSTORE PUSH32 0x64726573732C75696E743235362C75696E743235362900000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x36 ADD SWAP1 JUMP JUMPDEST PUSH32 0x4F6E6C7943616C6C61626C65427953656C664572726F72286164647265737329 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0x5472616E73666F726D65724661696C65644572726F7228616464726573732C62 DUP2 MSTORE PUSH32 0x797465732C627974657329000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2B ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1E08 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1B51 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1E9C PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1B51 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2A7 DUP2 DUP6 PUSH2 0x1B51 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1ABC PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1B51 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x1FF1 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0xDAD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1B51 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x204E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x206C JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20BF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x20A7 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xE99 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x20F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x20F2 JUMPI PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x60 DUP2 SWAP1 SHL PUSH1 0x80 MSTORE PUSH2 0xD6B PUSH2 0x45 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x279 MSTORE DUP1 PUSH2 0x2A7 MSTORE DUP1 PUSH2 0x399 MSTORE DUP1 PUSH2 0x3D5 MSTORE DUP1 PUSH2 0x403 MSTORE POP PUSH2 0xD6B PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x74 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB68DF16D GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xB68DF16D EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x10B JUMPI DUP1 PUSH4 0xC0EE0B8A EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x15A JUMPI PUSH2 0x7B JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x80 JUMPI DUP1 PUSH4 0x54132D78 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xD6 JUMPI PUSH2 0x7B JUMP JUMPDEST CALLDATASIZE PUSH2 0x7B JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0xA20 JUMP JUMPDEST PUSH2 0x17A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0xCC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC9 PUSH2 0xC4 CALLDATASIZE PUSH1 0x4 PUSH2 0x837 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0xCFD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEB PUSH2 0x397 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0xBCA JUMP JUMPDEST PUSH2 0xC9 PUSH2 0x106 CALLDATASIZE PUSH1 0x4 PUSH2 0x7E4 JUMP JUMPDEST PUSH2 0x3BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x117 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12B PUSH2 0x126 CALLDATASIZE PUSH1 0x4 PUSH2 0x891 JUMP JUMPDEST PUSH2 0x4E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0xCD0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x158 PUSH2 0x153 CALLDATASIZE PUSH1 0x4 PUSH2 0x9C6 JUMP JUMPDEST PUSH2 0x515 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12B PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x94C JUMP JUMPDEST PUSH2 0x51B JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x20D JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x259 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xC0EE0B8A00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x2D0 JUMPI PUSH2 0x2D0 PUSH2 0x2CB CALLER PUSH32 0x0 PUSH2 0x546 JUMP JUMPDEST PUSH2 0x5E8 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP3 SWAP2 SWAP1 PUSH2 0xAD0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x337 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x33C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP3 POP SWAP1 POP DUP1 PUSH2 0x38E JUMPI PUSH2 0x38E PUSH2 0x2CB ADDRESS DUP9 DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP11 SWAP3 POP DUP10 SWAP2 POP PUSH2 0x5F0 SWAP1 POP JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x60 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x427 JUMPI PUSH2 0x427 PUSH2 0x2CB CALLER PUSH32 0x0 PUSH2 0x546 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x450 SWAP3 SWAP2 SWAP1 PUSH2 0xAD0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x48B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x490 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP3 POP SWAP1 POP DUP1 PUSH2 0x4E0 JUMPI PUSH2 0x4E0 PUSH2 0x2CB ADDRESS DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP10 SWAP3 POP PUSH2 0x6A7 SWAP2 POP POP JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x1DE45AD1 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x563 SWAP3 SWAP2 SWAP1 PUSH2 0xBEB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x5FE SWAP1 PUSH2 0xB55 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x61F SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC68 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x6B5 SWAP1 PUSH2 0xAE0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6D4 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC12 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x76C JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x783 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x79D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x7B5 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7CC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x79D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7F8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x803 DUP2 PUSH2 0xD10 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x81E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x82A DUP7 DUP3 DUP8 ADD PUSH2 0x7A4 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x84C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x857 DUP2 PUSH2 0xD10 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x872 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x87E DUP8 DUP3 DUP9 ADD PUSH2 0x7A4 JUMP JUMPDEST SWAP6 SWAP9 SWAP1 SWAP8 POP SWAP5 SWAP6 PUSH1 0x40 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x8AC JUMPI DUP4 DUP5 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x8B7 DUP2 PUSH2 0xD10 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x8C7 DUP2 PUSH2 0xD10 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x8E3 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x8EF DUP13 DUP4 DUP14 ADD PUSH2 0x75B JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x907 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x913 DUP13 DUP4 DUP14 ADD PUSH2 0x75B JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x92B JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x938 DUP12 DUP3 DUP13 ADD PUSH2 0x7A4 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x964 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x96F DUP2 PUSH2 0xD10 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x97F DUP2 PUSH2 0xD10 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9A8 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9B4 DUP10 DUP3 DUP11 ADD PUSH2 0x7A4 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9DB JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x9E6 DUP2 PUSH2 0xD10 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA08 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xA14 DUP8 DUP3 DUP9 ADD PUSH2 0x7A4 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA31 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xA60 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA8C JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xA70 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xA9D JUMPI DUP3 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x57616C6C65744578656375746544656C656761746543616C6C4661696C656445 DUP2 MSTORE PUSH32 0x72726F7228616464726573732C616464726573732C62797465732C6279746573 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x41 ADD SWAP1 JUMP JUMPDEST PUSH32 0x57616C6C65744578656375746543616C6C4661696C65644572726F7228616464 DUP2 MSTORE PUSH32 0x726573732C616464726573732C62797465732C75696E743235362C6279746573 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x41 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xC4B PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0xA67 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0xC5D DUP2 DUP6 PUSH2 0xA67 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xCA1 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0xA67 JUMP JUMPDEST DUP5 PUSH1 0x60 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0xCB9 DUP2 DUP6 PUSH2 0xA67 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0xA60 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xA67 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xD32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA ISZERO DUP3 DIV SWAP9 CALLDATACOPY CALLDATALOAD 0xD9 TIMESTAMP 0x2E INVALID STATICCALL 0xE6 DUP11 SWAP13 BYTE DUP4 PUSH7 0xC3E8C79CD5C3BF 0xAA DUP14 0xE2 JUMP 0xD1 CODESIZE 0xDF PUSH5 0x736F6C6343 STOP MOD EXP STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 TIMESTAMP GT DUP15 SLOAD MLOAD 0xFB 0x25 JUMP KECCAK256 PUSH23 0xF0A19CCA7EA8D786388E183CBD82D072F01AB8F66A6473 PUSH16 0x6C634300060A00330000000000000000 ",
                "sourceMap": "1462:13696:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1974:75;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;4577:213;;;;;;;;;;;;;:::i;:::-;;;;;;;;7453:640;;;;;;;;;:::i;5810:573::-;;;;;;;;;:::i;4141:199::-;;;;;;;;;;;;;:::i;1867:63::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;3744:275;;;;;;;;;;-1:-1:-1;3744:275:23;;;;;;;;:::i;:::-;;2578:970;;;;;;;;;;-1:-1:-1;2578:970:23;;;;;;;;:::i;:::-;;;;;;;;12175:185;;;;;;;;;;;;;:::i;1974:75::-;;;:::o;4577:213::-;4659:19;4703:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;4694:26;;4777:6;4730:37;:35;:37::i;:::-;:53;;;;;;;;;;;;;;;4577:213;:::o;7453:640::-;7819:25;1032:10:24;1054:4;1032:27;1028:123;;1075:65;:55;1119:10;1075:43;:55::i;:::-;:63;:65::i;:::-;7867:219:23::1;7903:12;7929:5;7948:10;7972:11;7997:16;8027:20;8061:15;7867:22;:219::i;:::-;7860:226:::0;7453:640;-1:-1:-1;;;;;;;;7453:640:23:o;5810:573::-;6097:25;6145:231;6191:8;;6181:19;;;;;;;;;;;;;;;;6214:10;6238;6262:11;6287:16;6317:20;6351:15;6145:22;:231::i;:::-;6138:238;5810:573;-1:-1:-1;;;;;;5810:573:23:o;4141:199::-;4237:16;4276:37;:35;:37::i;:::-;:57;;;;;;-1:-1:-1;4141:199:23;:::o;1867:63::-;;;;;;;;;;;;;;;;;;;:::o;3744:275::-;1287:13:24;1320:4;1303:29;;;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1287:47;-1:-1:-1;1352:10:24;:19;;;;1348:180;;1391:122;:112;1448:10;1480:5;1391:35;:112::i;:122::-;3744:275:23;3931:19:::1;3871:37;:35;:37::i;:::-;:57;;:79:::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;3965:47:::1;::::0;::::1;::::0;::::1;::::0;3992:19;;3965:47:::1;;;;;;;;;;3744:275:::0;:::o;2578:970::-;2668:113;;;;;2642:14;;2700:4;;2668:58;;:113;;2727:36;;2765:15;;2668:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2791:112:23;;;;;2823:4;;-1:-1:-1;2791:58:23;;-1:-1:-1;2791:112:23;;2850:35;;2887:15;;2791:112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2913:109:23;;;;;2945:4;;-1:-1:-1;2913:58:23;;-1:-1:-1;2913:109:23;;2972:32;;3006:15;;2913:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3032:113:23;;;;;3064:4;;-1:-1:-1;3032:58:23;;-1:-1:-1;3032:113:23;;3091:36;;3129:15;;3032:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3155:105:23;;;;;3187:4;;-1:-1:-1;3155:58:23;;-1:-1:-1;3155:105:23;;3214:28;;3244:15;;3155:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3270:106:23;;;;;3302:4;;-1:-1:-1;3270:58:23;;-1:-1:-1;3270:106:23;;3329:29;;3360:15;;3270:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3386:23;:21;:23::i;:::-;;3479:19;3419:37;:35;:37::i;:::-;:57;;:79;;;;;;;;;;;;;;;-1:-1:-1;3515:26:23;2578:970;;;;:::o;12175:185::-;12267:19;12309:37;:35;:37::i;:::-;:44;;;;-1:-1:-1;12175:185:23;:::o;1084:475:34:-;1129:20;1161:19;1183:84;1222:35;1183:25;:84::i;:::-;1161:106;1525:28;-1:-1:-1;;1525:28:34:o;685:257:1:-;781:12;859:45;;;;;;;;;;;;;;919:6;816:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;685:257:1;;;:::o;1492:170:76:-;1635:9;1629:16;1622:4;1611:9;1607:20;1600:46;9135:2867:23;9459:25;9635:2;9607:16;:31;9603:172;;;9673:91;;;;;9695:4;;9673:72;;:91;;9746:10;;9758:5;;9673:91;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9654:110;;9603:172;9785:39;;:::i;:::-;9849:20;:18;:20::i;:::-;9834:35;;;;9907:24;:22;:24::i;:::-;9879:52;;:25;;;:52;10059:57;10097:11;10110:5;10059:37;:57::i;:::-;10009:35;;;:107;10311:12;;10212:152;;10260:10;;10284:5;;10338:16;10212:34;:152::i;:::-;10416:9;10411:276;10435:15;:22;10431:1;:26;10411:276;;;10478:198;10518:5;:12;;;10548:15;10564:1;10548:18;;;;;;;;;;;;;;10584:5;:25;;;10627:5;10650:12;10478:22;:198::i;:::-;10459:3;;10411:276;;;;10822:57;10860:11;10873:5;10822:37;:57::i;:::-;10773:34;;;:106;;;10930:35;;;;-1:-1:-1;10889:554:23;;;11061:35;;;;11001:34;;;;:109;;;:42;:109;:::i;:::-;10981:129;;10889:554;;;11168:5;:35;;;11131:5;:34;;;:72;11127:316;;;11219:213;:203;11306:11;11374:5;:34;;;11336:5;:35;;;:72;11219:61;:203::i;:213::-;11542:20;11522:17;:40;11518:263;;;11578:192;:182;11661:11;11691:17;11726:20;11578:57;:182::i;:192::-;11852:5;11822:173;;;11879:10;11912:11;11938:16;11968:17;11822:173;;;;;;;;;;;;;;;;;;9135:2867;;;;;;;;;;:::o;686:303:2:-;810:12;888:44;;;;;;;;;;;;;;947:6;967:5;845:137;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;686:303:2;;;;:::o;1494:335:32:-;1586:12;883:3;1787:9;1779:18;;;;;;;;1800:1;1779:22;1778:44;;;1494:335;-1:-1:-1;;1494:335:32:o;2266:260:38:-;2377:20;2417:17;2428:5;2417:10;:17::i;:::-;2413:68;;;-1:-1:-1;2457:13:38;;;;2450:20;;2413:68;2497:22;;;;;:15;;;;;;:22;;2513:5;;2497:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2490:29;2266:260;-1:-1:-1;;;2266:260:38:o;12667:892:23:-;12898:9;:14;12894:67;;12928:22;;:11;;;;12940:9;12928:22;;;;;;;;;12940:9;12928:11;:22;;;;;;;;;;;;;;;;;;;;;12894:67;13009:42;13040:10;13009:30;:42::i;:::-;13004:549;;13122:154;;;;;13144:4;;13122:46;;:154;;13186:10;;13214:4;;13236:2;;13256:6;;13122:154;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13004:549;;;13309:6;13297:9;:18;13293:260;;;13411:131;:121;13485:9;13512:6;13411:56;:121::i;:131::-;12667:892;;;;:::o;13887:1269::-;14197:27;14227:125;14279:19;14312:14;:30;;;14227:38;:125::i;:::-;14197:155;;14419:23;14445:6;:26;;;14517:11;14608:36;;;14662:12;14692:5;14715:14;:19;;;14568:180;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14445:313;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14419:339;;14832:10;:17;14853:2;14832:23;;:114;;;-1:-1:-1;14871:32:23;;14907:39;;14871:32;;;;;;;;;;;;;;:75;;;;14832:114;14828:322;;;14971:168;:158;15039:11;15068:14;:19;;;15105:10;14971:50;:158::i;:168::-;13887:1269;;;;;;;:::o;1586:373:70:-;1672:7;1703:1;1699;:5;1695:236;;;1720:200;1745:174;1805:62;1885:1;1904;1745:42;:174::i;1720:200::-;-1:-1:-1;1947:5:70;;;1586:373::o;1534:383:6:-;1698:12;1776:63;;;;;;;;;;;;;;1854:11;1879:21;1733:177;;;;;;;;;;1081:447;1275:12;1353:67;;;;;;;;;;;;;;1435:11;1460:17;1491:20;1310:211;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1081:447:6;;;;;:::o;1858:164:38:-;1980:35;;;945:42;1980:35;1858:164;;;:::o;726:349:6:-;873:12;951:58;;;;;;;;;;;;;;1024:11;1049:9;908:160;;;;;;;;;;4443:717:38;4560:33;4883:21;4907:31;4922:15;4907:14;:31::i;:::-;4883:55;;5042:8;:15;5030:9;:27;5019:40;;5084:9;5073:22;;5109:8;5131;4989:160;;;;;;;;;;;;;;;;;;;;;;;;;;4979:171;;4989:160;4979:171;;;;;4443:717;-1:-1:-1;;;;4443:717:38:o;1923:415:6:-;2108:12;2186:56;;;;;;;;;;;;;;2257:11;2282:15;2311:10;2143:188;;;;;;;;;;;1314:322:77;1467:12;779:10;1538:28;;1580:9;1603:1;1618;1502:127;;;;;;;;;;;2703:1397:38;2788:21;2910:10;;;2906:1188;;2947:12;;;2957:1;2947:12;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2947:12:38;2936:23;;2987:4;2973:18;;:8;2982:1;2973:11;;;;;;;;;;;:18;;;;;;;;;;;2906:1188;;;3020:4;3012:5;:12;;;3008:1086;;;3051:12;;;3061:1;3051:12;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3051:12:38;3040:23;;3102:5;3091:18;;3077:8;3086:1;3077:11;;;;;;;3008:1086;3139:4;3130:5;:13;;;3126:968;;3170:12;;;3180:1;3170:12;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3170:12:38;3159:23;;3210:4;3196:18;;:8;3205:1;3196:11;;;;;;;;;;;:18;;;;;;;;;;;3253:5;3242:18;;3228:8;3237:1;3228:11;;;;;;;3126:968;3290:6;3281:5;:15;;;3277:817;;3323:12;;;3333:1;3323:12;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3323:12:38;3312:23;;3363:4;3349:18;;:8;3358:1;3349:11;;;;;;;;;;;:18;;;;;;;;;;-1:-1:-1;3381:11:38;;3395:34;;;;;;;3381:8;;3390:1;;3381:11;;;;;;;;;:48;;;;;;;;;;;3468:5;3457:18;;3443:8;3452:1;3443:11;;;;;;;3277:817;3505:8;3496:5;:17;;;3492:602;;3540:12;;;3550:1;3540:12;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3540:12:38;3529:23;;3580:4;3566:18;;:8;3575:1;3566:11;;;;;;;;;;;:18;;;;;;;;;;-1:-1:-1;3598:11:38;;3612:37;;;;;;;3598:8;;3607:1;;3598:11;;;;;;;;;:51;;;;;;;;;;-1:-1:-1;3663:11:38;;3677:34;;;;;;;3663:8;;3672:1;;3663:11;;;;;;;;;:48;;;;;;;;;;;3750:5;3739:18;;3725:8;3734:1;3725:11;;;;;;;3492:602;3799:12;;;3809:1;3799:12;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3799:12:38;3788:23;;3839:4;3825:18;;:8;3834:1;3825:11;;;;;;;;;;;:18;;;;;;;;;;-1:-1:-1;3857:11:38;;3871:39;;;;;;;3857:8;;3866:1;;3857:11;;;;;;;;;:53;;;;;;;;;;-1:-1:-1;3924:11:38;;3938:37;;;;;;;3924:8;;3933:1;;3924:11;;;;;;;;;:51;;;;;;;;;;-1:-1:-1;3989:11:38;;4003:34;;;;;;;3989:8;;3998:1;;3989:11;;;;;;;;;:48;;;;;;;;;;;4076:5;4065:18;;4051:8;4060:1;4051:11;;;;;;;;;;;:32;;;;;;;;;;;2703:1397;;;:::o;-1:-1:-1:-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;484:774::-;;633:3;626:4;618:6;614:17;610:27;600:2;;-1:-1;;641:12;600:2;688:6;675:20;23525:18;;23517:6;23514:30;23511:2;;;-1:-1;;23547:12;23511:2;23592:4;710:112;23592:4;;23584:6;23580:17;23645:15;710:112;;;850:21;;;701:121;-1:-1;907:14;;;882:17;;;1002:1;987:265;1012:6;1009:1;1006:13;987:265;;;1095:3;1082:17;886:6;1070:30;2790:4;;2769:19;1070:30;2773:3;2769:19;;2765:30;2762:2;;;1002:1;;2798:12;2762:2;2826:20;2790:4;2826:20;;;23592:4;1070:30;;3599:20;3624:32;3650:5;3624:32;;;2914:74;;3062:18;;;3049:32;3090:30;;;3087:2;;;1002:1;;3123:12;3087:2;3213:6;1070:30;3198:22;1644:3;1625:17;3198:22;1625:17;1621:27;1611:2;;1002:1;;1652:12;1611:2;23592:4;3198:22;;1686:20;1672:34;;1721:64;1736:48;1777:6;1736:48;;;1721:64;;;1712:73;;1805:6;1798:5;1791:21;1909:3;2790:4;1900:6;3198:22;1891:16;;1888:25;1885:2;;;1002:1;;1916:12;1885:2;1936:41;1970:6;23592:4;1867:5;1863:16;2790:4;3198:22;1829:17;1936:41;;;-1:-1;3150:16;;;3143:84;1107:82;;-1:-1;;1203:14;;;;1231;;;;1034:1;1027:9;987:265;;;991:14;;;;;;593:665;;;;;3668:241;;3772:2;3760:9;3751:7;3747:23;3743:32;3740:2;;;-1:-1;;3778:12;3740:2;85:6;72:20;97:33;124:5;97:33;;3916:263;;4031:2;4019:9;4010:7;4006:23;4002:32;3999:2;;;-1:-1;;4037:12;3999:2;226:6;220:13;238:33;265:5;238:33;;4186:1303;;;;;;;;4503:3;4491:9;4482:7;4478:23;4474:33;4471:2;;;-1:-1;;4510:12;4471:2;1346:6;1333:20;4562:63;;4662:2;4713:9;4709:22;358:20;383:41;418:5;383:41;;;4670:71;-1:-1;4778:2;4840:22;;2532:20;2557:56;2532:20;2557:56;;;4786:86;-1:-1;4909:2;4971:22;;2532:20;2557:56;2532:20;2557:56;;;4917:86;-1:-1;5040:3;5080:22;;3322:20;;-1:-1;5149:3;5189:22;;3322:20;;-1:-1;5286:3;5271:19;;5258:33;5311:18;5300:30;;5297:2;;;-1:-1;;5333:12;5297:2;5363:110;5465:7;5456:6;5445:9;5441:22;5363:110;;;5353:120;;;4465:1024;;;;;;;;;;;5496:261;;5610:2;5598:9;5589:7;5585:23;5581:32;5578:2;;;-1:-1;;5616:12;5578:2;1486:6;1480:13;25418:66;28738:5;25407:78;28714:5;28711:34;28701:2;;-1:-1;;28749:12;5764:360;;5888:2;5876:9;5867:7;5863:23;5859:32;5856:2;;;-1:-1;;5894:12;5856:2;5945:17;5939:24;5983:18;5975:6;5972:30;5969:2;;;-1:-1;;6005:12;5969:2;6091:6;6080:9;6076:22;2104:3;2097:4;2089:6;2085:17;2081:27;2071:2;;-1:-1;;2112:12;2071:2;2152:6;2146:13;2132:27;;2174:64;2189:48;2230:6;2189:48;;2174:64;2258:6;2251:5;2244:21;2362:3;5888:2;2353:6;2286;2344:16;;2341:25;2338:2;;;-1:-1;;2369:12;2338:2;2389:39;2421:6;5888:2;2320:5;2316:16;5888:2;2286:6;2282:17;2389:39;;;6025:83;5850:274;-1:-1;;;;;5850:274;6131:1035;;;;;;6406:3;6394:9;6385:7;6381:23;6377:33;6374:2;;;-1:-1;;6413:12;6374:2;2545:6;2532:20;2557:56;2607:5;2557:56;;;6465:86;-1:-1;6588:2;6650:22;;2532:20;2557:56;2532:20;2557:56;;;6596:86;-1:-1;6719:2;6758:22;;3322:20;;-1:-1;6827:2;6866:22;;3322:20;;-1:-1;6963:3;6948:19;;6935:33;6988:18;6977:30;;6974:2;;;-1:-1;;7010:12;6974:2;7040:110;7142:7;7133:6;7122:9;7118:22;7040:110;;;7030:120;;;6368:798;;;;;;;;;7173:263;;7288:2;7276:9;7267:7;7263:23;7259:32;7256:2;;;-1:-1;;7294:12;7256:2;-1:-1;3470:13;;7250:186;-1:-1;7250:186;8748:343;;8890:5;24092:12;24377:6;24372:3;24365:19;8983:52;9028:6;24414:4;24409:3;24405:14;24414:4;9009:5;9005:16;8983:52;;;28028:2;28008:14;28024:7;28004:28;9047:39;;;;24414:4;9047:39;;8838:253;-1:-1;;8838:253;12947:678;;25188:66;;8150:5;25177:78;8109:3;8102:56;25188:66;8150:5;25177:78;13268:1;13263:3;13259:11;8102:56;;28115:14;24992:5;28119:2;28115:14;;13367:11;13263:3;13367:11;7945:58;9258:5;24092:12;9369:52;9414:6;13477:12;13263:3;13477:12;9402:4;9395:5;9391:16;9369:52;;;9433:16;;;;13477:12;9433:16;;13161:464;-1:-1;;;;;13161:464;13632:291;;27313:6;27308:3;27303;27290:30;27351:16;;27344:27;;;27351:16;13776:147;-1:-1;13776:147;13930:381;10651:33;10631:54;;10615:2;10704:12;;14119:192;14318:381;11027:34;11007:55;;11096:20;11091:2;11082:12;;11075:42;10991:2;11136:12;;14507:192;14706:381;11459:34;11439:55;;11528:15;11523:2;11514:12;;11507:37;11423:2;11563:12;;14895:192;15094:381;11886:34;11866:55;;11955:24;11950:2;11941:12;;11934:46;11850:2;11999:12;;15283:192;15482:381;12322:34;12302:55;;12286:2;12376:12;;15671:192;15870:381;12699:34;12679:55;;12768:13;12763:2;12754:12;;12747:35;12663:2;12801:12;;16059:192;16258:222;25844:42;25833:54;;;;7679:45;;16385:2;16370:18;;16356:124;16487:449;;25844:42;7717:5;25833:54;7686:3;7679:45;16676:2;16810;16799:9;16795:18;16788:48;16850:76;16676:2;16665:9;16661:18;16912:6;16850:76;;;16842:84;16647:289;-1:-1;;;;16647:289;16943:333;25844:42;25833:54;;;7679:45;;25833:54;;17262:2;17247:18;;7679:45;17098:2;17083:18;;17069:207;17283:556;25844:42;25833:54;;;7679:45;;25833:54;;;;17659:2;17644:18;;7679:45;17742:2;17727:18;;8241:37;17825:2;17810:18;;8241:37;;;;17494:3;17479:19;;17465:374;17846:612;;25844:42;7717:5;25833:54;7686:3;7679:45;18065:2;18183;18172:9;18168:18;18161:48;18223:76;18065:2;18054:9;18050:18;18285:6;18223:76;;;18347:9;18341:4;18337:20;18332:2;18321:9;18317:18;18310:48;18372:76;18443:4;18434:6;18372:76;;18465:333;25844:42;25833:54;;;;7679:45;;18784:2;18769:18;;8241:37;18620:2;18605:18;;18591:207;18805:444;25844:42;25833:54;;;;7679:45;;19152:2;19137:18;;8241:37;;;;19235:2;19220:18;;8241:37;18988:2;18973:18;;18959:290;19256:560;;8271:5;8248:3;8241:37;25844:42;7717:5;25833:54;19653:2;19642:9;19638:18;7679:45;19473:2;19690;19679:9;19675:18;19668:48;19730:76;19473:2;19462:9;19458:18;19792:6;19730:76;;19823:218;25418:66;25407:78;;;;8359:36;;19948:2;19933:18;;19919:122;20048:329;25418:66;25407:78;;;;8359:36;;25844:42;25833:54;20363:2;20348:18;;7679:45;20201:2;20186:18;;20172:205;20786:618;25844:42;25833:54;;;9555:73;;25833:54;;;21216:2;21201:18;;7679:45;25833:54;;21307:2;21292:18;;7522:58;21390:2;21375:18;;8241:37;;;;21028:3;21013:19;;20999:405;21698:480;21899:2;21884:18;;28236:1;28226:12;;28216:2;;28242:9;28216:2;9920:68;;;22081:2;22066:18;;8241:37;;;;22164:2;22149:18;;;8241:37;21870:308;;22185:310;;22332:2;22353:17;22346:47;22407:78;22332:2;22321:9;22317:18;22471:6;22407:78;;22502:222;8241:37;;;22629:2;22614:18;;22600:124;22731:333;8241:37;;;23050:2;23035:18;;8241:37;22886:2;22871:18;;22857:207;23071:256;23133:2;23127:9;23159:17;;;23234:18;23219:34;;23255:22;;;23216:62;23213:2;;;23291:1;;23281:12;23213:2;23133;23300:22;23111:216;;-1:-1;23111:216;23677:321;;23820:18;23812:6;23809:30;23806:2;;;-1:-1;;23842:12;23806:2;-1:-1;23919:4;23896:17;23915:9;23892:33;23983:4;23973:15;;23743:255;27232:145;27313:6;27308:3;27303;27290:30;-1:-1;27369:1;27351:16;;27344:27;27283:94;27386:268;27451:1;27458:101;27472:6;27469:1;27466:13;27458:101;;;27539:11;;;27533:18;27520:11;;;27513:39;27494:2;27487:10;27458:101;;;27574:6;27571:1;27568:13;27565:2;;;-1:-1;;27451:1;27621:16;;27614:27;27435:219;28265:117;25844:42;28352:5;25833:54;28327:5;28324:35;28314:2;;28373:1;;28363:12;28314:2;28308:74;;29069:115;26050:10;29154:5;26039:22;29130:5;29127:34;29117:2;;29175:1;;29165:12"
            }
        }
    },
    "sourceTreeHashHex": "0x521a02dd64c2a9cfb3342995fee15190df9887d3b55c0464af6af6d0c1fb56ad",
    "sources": {
        "./TransformERC20.sol": {
            "id": 23
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 64
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 66
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 76
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 68
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 73
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 70
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 77
        },
        "../errors/LibTransformERC20RichErrors.sol": {
            "id": 6
        },
        "../fixins/FixinCommon.sol": {
            "id": 24
        },
        "../errors/LibCommonRichErrors.sol": {
            "id": 1
        },
        "../errors/LibOwnableRichErrors.sol": {
            "id": 2
        },
        "./IOwnable.sol": {
            "id": 16
        },
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": {
            "id": 79
        },
        "../migrations/LibMigrate.sol": {
            "id": 28
        },
        "../external/IFlashWallet.sol": {
            "id": 11
        },
        "../external/FlashWallet.sol": {
            "id": 9
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibOwnableRichErrorsV06.sol": {
            "id": 75
        },
        "../errors/LibWalletRichErrors.sol": {
            "id": 7
        },
        "../storage/LibTransformERC20Storage.sol": {
            "id": 34
        },
        "../storage/LibStorage.sol": {
            "id": 32
        },
        "../transformers/IERC20Transformer.sol": {
            "id": 37
        },
        "../transformers/LibERC20Transformer.sol": {
            "id": 38
        },
        "./ITransformERC20.sol": {
            "id": 19
        },
        "./ITokenSpender.sol": {
            "id": 18
        },
        "./IFeature.sol": {
            "id": 15
        },
        "./ISimpleFunctionRegistry.sol": {
            "id": 17
        }
    },
    "sourceCodes": {
        "./TransformERC20.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../errors/LibTransformERC20RichErrors.sol\";\nimport \"../fixins/FixinCommon.sol\";\nimport \"../migrations/LibMigrate.sol\";\nimport \"../external/IFlashWallet.sol\";\nimport \"../external/FlashWallet.sol\";\nimport \"../storage/LibTransformERC20Storage.sol\";\nimport \"../transformers/IERC20Transformer.sol\";\nimport \"../transformers/LibERC20Transformer.sol\";\nimport \"./ITransformERC20.sol\";\nimport \"./ITokenSpender.sol\";\nimport \"./IFeature.sol\";\nimport \"./ISimpleFunctionRegistry.sol\";\n\n\n/// @dev Feature to composably transform between ERC20 tokens.\ncontract TransformERC20 is\n    IFeature,\n    ITransformERC20,\n    FixinCommon\n{\n\n    /// @dev Stack vars for `_transformERC20Private()`.\n    struct TransformERC20PrivateState {\n        IFlashWallet wallet;\n        address transformerDeployer;\n        uint256 takerOutputTokenBalanceBefore;\n        uint256 takerOutputTokenBalanceAfter;\n    }\n\n    // solhint-disable\n    /// @dev Name of this feature.\n    string public constant override FEATURE_NAME = \"TransformERC20\";\n    /// @dev Version of this feature.\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 0, 0);\n    /// @dev The implementation address of this feature.\n    address private immutable _implementation;\n    // solhint-enable\n\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    constructor() public {\n        _implementation = address(this);\n    }\n\n    /// @dev Initialize and register this feature.\n    ///      Should be delegatecalled by `Migrate.migrate()`.\n    /// @param transformerDeployer The trusted deployer for transformers.\n    /// @return success `LibMigrate.SUCCESS` on success.\n    function migrate(address transformerDeployer) external returns (bytes4 success) {\n        ISimpleFunctionRegistry(address(this))\n            .extend(this.getTransformerDeployer.selector, _implementation);\n        ISimpleFunctionRegistry(address(this))\n            .extend(this.createTransformWallet.selector, _implementation);\n        ISimpleFunctionRegistry(address(this))\n            .extend(this.getTransformWallet.selector, _implementation);\n        ISimpleFunctionRegistry(address(this))\n            .extend(this.setTransformerDeployer.selector, _implementation);\n        ISimpleFunctionRegistry(address(this))\n            .extend(this.transformERC20.selector, _implementation);\n        ISimpleFunctionRegistry(address(this))\n            .extend(this._transformERC20.selector, _implementation);\n        createTransformWallet();\n        LibTransformERC20Storage.getStorage().transformerDeployer = transformerDeployer;\n        return LibMigrate.MIGRATE_SUCCESS;\n    }\n\n    /// @dev Replace the allowed deployer for transformers.\n    ///      Only callable by the owner.\n    /// @param transformerDeployer The address of the trusted deployer for transformers.\n    function setTransformerDeployer(address transformerDeployer)\n        external\n        override\n        onlyOwner\n    {\n        LibTransformERC20Storage.getStorage().transformerDeployer = transformerDeployer;\n        emit TransformerDeployerUpdated(transformerDeployer);\n    }\n\n    /// @dev Return the allowed deployer for transformers.\n    /// @return deployer The transform deployer address.\n    function getTransformerDeployer()\n        public\n        override\n        view\n        returns (address deployer)\n    {\n        return LibTransformERC20Storage.getStorage().transformerDeployer;\n    }\n\n    /// @dev Deploy a new wallet instance and replace the current one with it.\n    ///      Useful if we somehow break the current wallet instance.\n    ///      Anyone can call this.\n    /// @return wallet The new wallet instance.\n    function createTransformWallet()\n        public\n        override\n        returns (IFlashWallet wallet)\n    {\n        wallet = new FlashWallet();\n        LibTransformERC20Storage.getStorage().wallet = wallet;\n    }\n\n    /// @dev Executes a series of transformations to convert an ERC20 `inputToken`\n    ///      to an ERC20 `outputToken`.\n    /// @param inputToken The token being provided by the sender.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the sender.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the sender.\n    ///        If set to `uint256(-1)`, the entire spendable balance of the taker\n    ///        will be solt.\n    /// @param minOutputTokenAmount The minimum amount of `outputToken` the sender\n    ///        must receive for the entire transformation to succeed. If set to zero,\n    ///        the minimum output token transfer will not be asserted.\n    /// @param transformations The transformations to execute on the token balance(s)\n    ///        in sequence.\n    /// @return outputTokenAmount The amount of `outputToken` received by the sender.\n    function transformERC20(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 minOutputTokenAmount,\n        Transformation[] memory transformations\n    )\n        public\n        override\n        payable\n        returns (uint256 outputTokenAmount)\n    {\n        return _transformERC20Private(\n            keccak256(msg.data),\n            msg.sender,\n            inputToken,\n            outputToken,\n            inputTokenAmount,\n            minOutputTokenAmount,\n            transformations\n        );\n    }\n\n    /// @dev Internal version of `transformERC20()`. Only callable from within.\n    /// @param callDataHash Hash of the ingress calldata.\n    /// @param taker The taker address.\n    /// @param inputToken The token being provided by the taker.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the taker.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the taker.\n    ///        If set to `uint256(-1)`, the entire spendable balance of the taker\n    ///        will be solt.\n    /// @param minOutputTokenAmount The minimum amount of `outputToken` the taker\n    ///        must receive for the entire transformation to succeed. If set to zero,\n    ///        the minimum output token transfer will not be asserted.\n    /// @param transformations The transformations to execute on the token balance(s)\n    ///        in sequence.\n    /// @return outputTokenAmount The amount of `outputToken` received by the taker.\n    function _transformERC20(\n        bytes32 callDataHash,\n        address payable taker,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 minOutputTokenAmount,\n        Transformation[] memory transformations\n    )\n        public\n        override\n        payable\n        onlySelf\n        returns (uint256 outputTokenAmount)\n    {\n        return _transformERC20Private(\n            callDataHash,\n            taker,\n            inputToken,\n            outputToken,\n            inputTokenAmount,\n            minOutputTokenAmount,\n            transformations\n        );\n    }\n\n    /// @dev Private version of `transformERC20()`.\n    /// @param callDataHash Hash of the ingress calldata.\n    /// @param taker The taker address.\n    /// @param inputToken The token being provided by the taker.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the taker.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the taker.\n    ///        If set to `uint256(-1)`, the entire spendable balance of the taker\n    ///        will be solt.\n    /// @param minOutputTokenAmount The minimum amount of `outputToken` the taker\n    ///        must receive for the entire transformation to succeed. If set to zero,\n    ///        the minimum output token transfer will not be asserted.\n    /// @param transformations The transformations to execute on the token balance(s)\n    ///        in sequence.\n    /// @return outputTokenAmount The amount of `outputToken` received by the taker.\n    function _transformERC20Private(\n        bytes32 callDataHash,\n        address payable taker,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 minOutputTokenAmount,\n        Transformation[] memory transformations\n    )\n        private\n        returns (uint256 outputTokenAmount)\n    {\n        // If the input token amount is -1, transform the taker's entire\n        // spendable balance.\n        if (inputTokenAmount == uint256(-1)) {\n            inputTokenAmount = ITokenSpender(address(this))\n                .getSpendableERC20BalanceOf(inputToken, taker);\n        }\n\n        TransformERC20PrivateState memory state;\n        state.wallet = getTransformWallet();\n        state.transformerDeployer = getTransformerDeployer();\n\n        // Remember the initial output token balance of the taker.\n        state.takerOutputTokenBalanceBefore =\n            LibERC20Transformer.getTokenBalanceOf(outputToken, taker);\n\n        // Pull input tokens from the taker to the wallet and transfer attached ETH.\n        _transferInputTokensAndAttachedEth(\n            inputToken,\n            taker,\n            address(state.wallet),\n            inputTokenAmount\n        );\n\n        // Perform transformations.\n        for (uint256 i = 0; i < transformations.length; ++i) {\n            _executeTransformation(\n                state.wallet,\n                transformations[i],\n                state.transformerDeployer,\n                taker,\n                callDataHash\n            );\n        }\n\n        // Compute how much output token has been transferred to the taker.\n        state.takerOutputTokenBalanceAfter =\n            LibERC20Transformer.getTokenBalanceOf(outputToken, taker);\n        if (state.takerOutputTokenBalanceAfter > state.takerOutputTokenBalanceBefore) {\n            outputTokenAmount = state.takerOutputTokenBalanceAfter.safeSub(\n                state.takerOutputTokenBalanceBefore\n            );\n        } else if (state.takerOutputTokenBalanceAfter < state.takerOutputTokenBalanceBefore) {\n            LibTransformERC20RichErrors.NegativeTransformERC20OutputError(\n                address(outputToken),\n                state.takerOutputTokenBalanceBefore - state.takerOutputTokenBalanceAfter\n            ).rrevert();\n        }\n        // Ensure enough output token has been sent to the taker.\n        if (outputTokenAmount < minOutputTokenAmount) {\n            LibTransformERC20RichErrors.IncompleteTransformERC20Error(\n                address(outputToken),\n                outputTokenAmount,\n                minOutputTokenAmount\n            ).rrevert();\n        }\n\n        // Emit an event.\n        emit TransformedERC20(\n            taker,\n            address(inputToken),\n            address(outputToken),\n            inputTokenAmount,\n            outputTokenAmount\n        );\n    }\n\n    /// @dev Return the current wallet instance that will serve as the execution\n    ///      context for transformations.\n    /// @return wallet The wallet instance.\n    function getTransformWallet()\n        public\n        override\n        view\n        returns (IFlashWallet wallet)\n    {\n        return LibTransformERC20Storage.getStorage().wallet;\n    }\n\n    /// @dev Transfer input tokens from the taker and any attached ETH to `to`\n    /// @param inputToken The token to pull from the taker.\n    /// @param from The from (taker) address.\n    /// @param to The recipient of tokens and ETH.\n    /// @param amount Amount of `inputToken` tokens to transfer.\n    function _transferInputTokensAndAttachedEth(\n        IERC20TokenV06 inputToken,\n        address from,\n        address payable to,\n        uint256 amount\n    )\n        private\n    {\n        // Transfer any attached ETH.\n        if (msg.value != 0) {\n            to.transfer(msg.value);\n        }\n        // Transfer input tokens.\n        if (!LibERC20Transformer.isTokenETH(inputToken)) {\n            // Token is not ETH, so pull ERC20 tokens.\n            ITokenSpender(address(this))._spendERC20Tokens(\n                inputToken,\n                from,\n                to,\n                amount\n            );\n        } else if (msg.value < amount) {\n             // Token is ETH, so the caller must attach enough ETH to the call.\n            LibTransformERC20RichErrors.InsufficientEthAttachedError(\n                msg.value,\n                amount\n            ).rrevert();\n        }\n    }\n\n    /// @dev Executs a transformer in the context of `wallet`.\n    /// @param wallet The wallet instance.\n    /// @param transformation The transformation.\n    /// @param transformerDeployer The address of the transformer deployer.\n    /// @param taker The taker address.\n    /// @param callDataHash Hash of the calldata.\n    function _executeTransformation(\n        IFlashWallet wallet,\n        Transformation memory transformation,\n        address transformerDeployer,\n        address payable taker,\n        bytes32 callDataHash\n    )\n        private\n    {\n        // Derive the transformer address from the deployment nonce.\n        address payable transformer = LibERC20Transformer.getDeployedAddress(\n            transformerDeployer,\n            transformation.deploymentNonce\n        );\n        // Call `transformer.transform()` as the wallet.\n        bytes memory resultData = wallet.executeDelegateCall(\n            // The call target.\n            transformer,\n            // Call data.\n            abi.encodeWithSelector(\n                IERC20Transformer.transform.selector,\n                callDataHash,\n                taker,\n                transformation.data\n            )\n        );\n        // Ensure the transformer returned the magic bytes.\n        if (resultData.length != 32 ||\n            abi.decode(resultData, (bytes4)) != LibERC20Transformer.TRANSFORMER_SUCCESS\n        ) {\n            LibTransformERC20RichErrors.TransformerFailedError(\n                transformer,\n                transformation.data,\n                resultData\n            ).rrevert();\n        }\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length == 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length == 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "../errors/LibTransformERC20RichErrors.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibTransformERC20RichErrors {\n\n    // solhint-disable func-name-mixedcase,separate-by-one-line-in-contract\n\n    function InsufficientEthAttachedError(\n        uint256 ethAttached,\n        uint256 ethNeeded\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InsufficientEthAttachedError(uint256,uint256)\")),\n            ethAttached,\n            ethNeeded\n        );\n    }\n\n    function IncompleteTransformERC20Error(\n        address outputToken,\n        uint256 outputTokenAmount,\n        uint256 minOutputTokenAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IncompleteTransformERC20Error(address,uint256,uint256)\")),\n            outputToken,\n            outputTokenAmount,\n            minOutputTokenAmount\n        );\n    }\n\n    function NegativeTransformERC20OutputError(\n        address outputToken,\n        uint256 outputTokenLostAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"NegativeTransformERC20OutputError(address,uint256)\")),\n            outputToken,\n            outputTokenLostAmount\n        );\n    }\n\n    function TransformerFailedError(\n        address transformer,\n        bytes memory transformerData,\n        bytes memory resultData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransformerFailedError(address,bytes,bytes)\")),\n            transformer,\n            transformerData,\n            resultData\n        );\n    }\n\n    // Common Transformer errors ///////////////////////////////////////////////\n\n    function OnlyCallableByDeployerError(\n        address caller,\n        address deployer\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableByDeployerError(address,address)\")),\n            caller,\n            deployer\n        );\n    }\n\n    function InvalidExecutionContextError(\n        address actualContext,\n        address expectedContext\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidExecutionContextError(address,address)\")),\n            actualContext,\n            expectedContext\n        );\n    }\n\n    enum InvalidTransformDataErrorCode {\n        INVALID_TOKENS,\n        INVALID_ARRAY_LENGTH\n    }\n\n    function InvalidTransformDataError(\n        InvalidTransformDataErrorCode errorCode,\n        bytes memory transformData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidTransformDataError(uint8,bytes)\")),\n            errorCode,\n            transformData\n        );\n    }\n\n    // FillQuoteTransformer errors /////////////////////////////////////////////\n\n    function IncompleteFillSellQuoteError(\n        address sellToken,\n        uint256 soldAmount,\n        uint256 sellAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IncompleteFillSellQuoteError(address,uint256,uint256)\")),\n            sellToken,\n            soldAmount,\n            sellAmount\n        );\n    }\n\n    function IncompleteFillBuyQuoteError(\n        address buyToken,\n        uint256 boughtAmount,\n        uint256 buyAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IncompleteFillBuyQuoteError(address,uint256,uint256)\")),\n            buyToken,\n            boughtAmount,\n            buyAmount\n        );\n    }\n\n    function InsufficientTakerTokenError(\n        uint256 tokenBalance,\n        uint256 tokensNeeded\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InsufficientTakerTokenError(uint256,uint256)\")),\n            tokenBalance,\n            tokensNeeded\n        );\n    }\n\n    function InsufficientProtocolFeeError(\n        uint256 ethBalance,\n        uint256 ethNeeded\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InsufficientProtocolFeeError(uint256,uint256)\")),\n            ethBalance,\n            ethNeeded\n        );\n    }\n\n    function InvalidERC20AssetDataError(\n        bytes memory assetData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidERC20AssetDataError(bytes)\")),\n            assetData\n        );\n    }\n\n    function InvalidTakerFeeTokenError(\n        address token\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidTakerFeeTokenError(address)\")),\n            token\n        );\n    }\n}\n",
        "../fixins/FixinCommon.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\nimport \"../features/IOwnable.sol\";\n\n\n/// @dev Common feature utilities.\ncontract FixinCommon {\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev The caller must be this contract.\n    modifier onlySelf() virtual {\n        if (msg.sender != address(this)) {\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\n        }\n        _;\n    }\n\n    /// @dev The caller of this function must be the owner.\n    modifier onlyOwner() virtual {\n        {\n            address owner = IOwnable(address(this)).owner();\n            if (msg.sender != owner) {\n                LibOwnableRichErrors.OnlyOwnerError(\n                    msg.sender,\n                    owner\n                ).rrevert();\n            }\n        }\n        _;\n    }\n\n    /// @dev Encode a feature version as a `uint256`.\n    /// @param major The major version number of the feature.\n    /// @param minor The minor version number of the feature.\n    /// @param revision The revision number of the feature.\n    /// @return encodedVersion The encoded version number.\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\n        internal\n        pure\n        returns (uint256 encodedVersion)\n    {\n        return (major << 64) | (minor << 32) | revision;\n    }\n}\n",
        "../errors/LibCommonRichErrors.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibCommonRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyCallableBySelfError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableBySelfError(address)\")),\n            sender\n        );\n    }\n\n    function IllegalReentrancyError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IllegalReentrancyError()\"))\n        );\n    }\n}\n",
        "../errors/LibOwnableRichErrors.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOwnerError(address,address)\")),\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n        );\n    }\n\n    function MigrateCallFailedError(address target, bytes memory resultData)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MigrateCallFailedError(address,bytes)\")),\n            target,\n            resultData\n        );\n    }\n}\n",
        "./IOwnable.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\n/// @dev Owner management and migration features.\ninterface IOwnable is\n    IOwnableV06\n{\n    /// @dev Emitted when `migrate()` is called.\n    /// @param caller The caller of `migrate()`.\n    /// @param migrator The migration contract.\n    /// @param newOwner The address of the new owner.\n    event Migrated(address caller, address migrator, address newOwner);\n\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\n    ///      The result of the function being called should be the magic bytes\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\n    ///      The owner will be temporarily set to `address(this)` inside the call.\n    ///      Before returning, the owner will be set to `newOwner`.\n    /// @param target The migrator contract address.\n    /// @param newOwner The address of the new owner.\n    /// @param data The call data.\n    function migrate(address target, bytes calldata data, address newOwner) external;\n}\n",
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n",
        "../migrations/LibMigrate.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\nlibrary LibMigrate {\n\n    /// @dev Magic bytes returned by a migrator to indicate success.\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\n    /// @param target The call target.\n    /// @param data The call data.\n    function delegatecallMigrateFunction(\n        address target,\n        bytes memory data\n    )\n        internal\n    {\n        (bool success, bytes memory resultData) = target.delegatecall(data);\n        if (!success ||\n            resultData.length != 32 ||\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\n        {\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\n        }\n    }\n}\n",
        "../external/IFlashWallet.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n/// @dev A contract that can execute arbitrary calls from its owner.\ninterface IFlashWallet {\n\n    /// @dev Execute an arbitrary call. Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @param value Ether to attach to the call.\n    /// @return resultData The data returned by the call.\n    function executeCall(\n        address payable target,\n        bytes calldata callData,\n        uint256 value\n    )\n        external\n        payable\n        returns (bytes memory resultData);\n\n    /// @dev Execute an arbitrary delegatecall, in the context of this puppet.\n    ///      Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @return resultData The data returned by the call.\n    function executeDelegateCall(\n        address payable target,\n        bytes calldata callData\n    )\n        external\n        payable\n        returns (bytes memory resultData);\n\n    /// @dev Allows the puppet to receive ETH.\n    receive() external payable;\n\n    /// @dev Fetch the immutable owner/deployer of this contract.\n    /// @return owner_ The immutable owner/deployer/\n    function owner() external view returns (address owner_);\n}\n",
        "../external/FlashWallet.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibOwnableRichErrorsV06.sol\";\nimport \"../errors/LibWalletRichErrors.sol\";\nimport \"./IFlashWallet.sol\";\n\n\n/// @dev A contract that can execute arbitrary calls from its owner.\ncontract FlashWallet is\n    IFlashWallet\n{\n    // solhint-disable no-unused-vars,indent,no-empty-blocks\n    using LibRichErrorsV06 for bytes;\n\n    // solhint-disable\n    /// @dev Store the owner/deployer as an immutable to make this contract stateless.\n    address public override immutable owner;\n    // solhint-enable\n\n    constructor() public {\n        // The deployer is the owner.\n        owner = msg.sender;\n    }\n\n    /// @dev Allows only the (immutable) owner to call a function.\n    modifier onlyOwner() virtual {\n        if (msg.sender != owner) {\n            LibOwnableRichErrorsV06.OnlyOwnerError(\n                msg.sender,\n                owner\n            ).rrevert();\n        }\n        _;\n    }\n\n    /// @dev Execute an arbitrary call. Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @param value Ether to attach to the call.\n    /// @return resultData The data returned by the call.\n    function executeCall(\n        address payable target,\n        bytes calldata callData,\n        uint256 value\n    )\n        external\n        payable\n        override\n        onlyOwner\n        returns (bytes memory resultData)\n    {\n        bool success;\n        (success, resultData) = target.call{value: value}(callData);\n        if (!success) {\n            LibWalletRichErrors\n                .WalletExecuteCallFailedError(\n                    address(this),\n                    target,\n                    callData,\n                    value,\n                    resultData\n                )\n                .rrevert();\n        }\n    }\n\n    /// @dev Execute an arbitrary delegatecall, in the context of this puppet.\n    ///      Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @return resultData The data returned by the call.\n    function executeDelegateCall(\n        address payable target,\n        bytes calldata callData\n    )\n        external\n        payable\n        override\n        onlyOwner\n        returns (bytes memory resultData)\n    {\n        bool success;\n        (success, resultData) = target.delegatecall(callData);\n        if (!success) {\n            LibWalletRichErrors\n                .WalletExecuteDelegateCallFailedError(\n                    address(this),\n                    target,\n                    callData,\n                    resultData\n                )\n                .rrevert();\n        }\n    }\n\n    // solhint-disable\n    /// @dev Allows this contract to receive ether.\n    receive() external override payable {}\n    // solhint-enable\n\n    /// @dev Signal support for receiving ERC1155 tokens.\n    /// @param interfaceID The interface ID, as per ERC-165 rules.\n    /// @return hasSupport `true` if this contract supports an ERC-165 interface.\n    function supportsInterface(bytes4 interfaceID)\n        external\n        pure\n        returns (bool hasSupport)\n    {\n        return  interfaceID == this.supportsInterface.selector ||\n                interfaceID == this.onERC1155Received.selector ^ this.onERC1155BatchReceived.selector ||\n                interfaceID == this.tokenFallback.selector;\n    }\n\n    ///  @dev Allow this contract to receive ERC1155 tokens.\n    ///  @return success  `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n    function onERC1155Received(\n        address, // operator,\n        address, // from,\n        uint256, // id,\n        uint256, // value,\n        bytes calldata //data\n    )\n        external\n        pure\n        returns (bytes4 success)\n    {\n        return this.onERC1155Received.selector;\n    }\n\n    ///  @dev Allow this contract to receive ERC1155 tokens.\n    ///  @return success  `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n    function onERC1155BatchReceived(\n        address, // operator,\n        address, // from,\n        uint256[] calldata, // ids,\n        uint256[] calldata, // values,\n        bytes calldata // data\n    )\n        external\n        pure\n        returns (bytes4 success)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /// @dev Allows this contract to receive ERC223 tokens.\n    function tokenFallback(\n        address, // from,\n        uint256, // value,\n        bytes calldata // value\n    )\n        external\n        pure\n    {}\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibOwnableRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrorsV06 {\n\n    // bytes4(keccak256(\"OnlyOwnerError(address,address)\"))\n    bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR =\n        0x1de45ad1;\n\n    // bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n    bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES =\n        hex\"e69edc3e\";\n\n    // solhint-disable func-name-mixedcase\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_OWNER_ERROR_SELECTOR,\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return TRANSFER_OWNER_TO_ZERO_ERROR_BYTES;\n    }\n}\n",
        "../errors/LibWalletRichErrors.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibWalletRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function WalletExecuteCallFailedError(\n        address wallet,\n        address callTarget,\n        bytes memory callData,\n        uint256 callValue,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"WalletExecuteCallFailedError(address,address,bytes,uint256,bytes)\")),\n            wallet,\n            callTarget,\n            callData,\n            callValue,\n            errorData\n        );\n    }\n\n    function WalletExecuteDelegateCallFailedError(\n        address wallet,\n        address callTarget,\n        bytes memory callData,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"WalletExecuteDelegateCallFailedError(address,address,bytes,bytes)\")),\n            wallet,\n            callTarget,\n            callData,\n            errorData\n        );\n    }\n}\n",
        "../storage/LibTransformERC20Storage.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"./LibStorage.sol\";\nimport \"../external/IFlashWallet.sol\";\n\n\n/// @dev Storage helpers for the `TokenSpender` feature.\nlibrary LibTransformERC20Storage {\n\n    /// @dev Storage bucket for this feature.\n    struct Storage {\n        // The current wallet instance.\n        IFlashWallet wallet;\n        // The transformer deployer address.\n        address transformerDeployer;\n    }\n\n    /// @dev Get the storage bucket for this contract.\n    function getStorage() internal pure returns (Storage storage stor) {\n        uint256 storageSlot = LibStorage.getStorageSlot(\n            LibStorage.StorageId.TransformERC20\n        );\n        // Dip into assembly to change the slot pointed to by the local\n        // variable `stor`.\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\n        assembly { stor_slot := storageSlot }\n    }\n}\n",
        "../storage/LibStorage.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Common storage helpers\nlibrary LibStorage {\n\n    /// @dev What to bit-shift a storage ID by to get its slot.\n    ///      This gives us a maximum of 2**128 inline fields in each bucket.\n    uint256 private constant STORAGE_SLOT_EXP = 128;\n\n    /// @dev Storage IDs for feature storage buckets.\n    ///      WARNING: APPEND-ONLY.\n    enum StorageId {\n        Proxy,\n        SimpleFunctionRegistry,\n        Ownable,\n        TokenSpender,\n        TransformERC20\n    }\n\n    /// @dev Get the storage slot given a storage ID. We assign unique, well-spaced\n    ///     slots to storage bucket variables to ensure they do not overlap.\n    ///     See: https://solidity.readthedocs.io/en/v0.6.6/assembly.html#access-to-external-variables-functions-and-libraries\n    /// @param storageId An entry in `StorageId`\n    /// @return slot The storage slot.\n    function getStorageSlot(StorageId storageId)\n        internal\n        pure\n        returns (uint256 slot)\n    {\n        // This should never overflow with a reasonable `STORAGE_SLOT_EXP`\n        // because Solidity will do a range check on `storageId` during the cast.\n        return (uint256(storageId) + 1) << STORAGE_SLOT_EXP;\n    }\n}\n",
        "../transformers/IERC20Transformer.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev A transformation callback used in `TransformERC20.transformERC20()`.\ninterface IERC20Transformer {\n\n    /// @dev Called from `TransformERC20.transformERC20()`. This will be\n    ///      delegatecalled in the context of the FlashWallet instance being used.\n    /// @param callDataHash The hash of the `TransformERC20.transformERC20()` calldata.\n    /// @param taker The taker address (caller of `TransformERC20.transformERC20()`).\n    /// @param data Arbitrary data to pass to the transformer.\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\n    function transform(\n        bytes32 callDataHash,\n        address payable taker,\n        bytes calldata data\n    )\n        external\n        returns (bytes4 success);\n}\n",
        "../transformers/LibERC20Transformer.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\nlibrary LibERC20Transformer {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev ETH pseudo-token address.\n    address constant internal ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev Return value indicating success in `IERC20Transformer.transform()`.\n    ///      This is just `keccak256('TRANSFORMER_SUCCESS')`.\n    bytes4 constant internal TRANSFORMER_SUCCESS = 0x13c9929e;\n\n    /// @dev Transfer ERC20 tokens and ETH.\n    /// @param token An ERC20 or the ETH pseudo-token address (`ETH_TOKEN_ADDRESS`).\n    /// @param to The recipient.\n    /// @param amount The transfer amount.\n    function transformerTransfer(\n        IERC20TokenV06 token,\n        address payable to,\n        uint256 amount\n    )\n        internal\n    {\n        if (isTokenETH(token)) {\n            to.transfer(amount);\n        } else {\n            token.compatTransfer(to, amount);\n        }\n    }\n\n    /// @dev Check if a token is the ETH pseudo-token.\n    /// @param token The token to check.\n    /// @return isETH `true` if the token is the ETH pseudo-token.\n    function isTokenETH(IERC20TokenV06 token)\n        internal\n        pure\n        returns (bool isETH)\n    {\n        return address(token) == ETH_TOKEN_ADDRESS;\n    }\n\n    /// @dev Check the balance of an ERC20 token or ETH.\n    /// @param token An ERC20 or the ETH pseudo-token address (`ETH_TOKEN_ADDRESS`).\n    /// @param owner Holder of the tokens.\n    /// @return tokenBalance The balance of `owner`.\n    function getTokenBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 tokenBalance)\n    {\n        if (isTokenETH(token)) {\n            return owner.balance;\n        }\n        return token.balanceOf(owner);\n    }\n\n    /// @dev RLP-encode a 32-bit or less account nonce.\n    /// @param nonce A positive integer in the range 0 <= nonce < 2^32.\n    /// @return rlpNonce The RLP encoding.\n    function rlpEncodeNonce(uint32 nonce)\n        internal\n        pure\n        returns (bytes memory rlpNonce)\n    {\n        // See https://github.com/ethereum/wiki/wiki/RLP for RLP encoding rules.\n        if (nonce == 0) {\n            rlpNonce = new bytes(1);\n            rlpNonce[0] = 0x80;\n        } else if (nonce < 0x80) {\n            rlpNonce = new bytes(1);\n            rlpNonce[0] = byte(uint8(nonce));\n        } else if (nonce <= 0xFF) {\n            rlpNonce = new bytes(2);\n            rlpNonce[0] = 0x81;\n            rlpNonce[1] = byte(uint8(nonce));\n        } else if (nonce <= 0xFFFF) {\n            rlpNonce = new bytes(3);\n            rlpNonce[0] = 0x82;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[2] = byte(uint8(nonce));\n        } else if (nonce <= 0xFFFFFF) {\n            rlpNonce = new bytes(4);\n            rlpNonce[0] = 0x83;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF0000) >> 16));\n            rlpNonce[2] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[3] = byte(uint8(nonce));\n        } else {\n            rlpNonce = new bytes(5);\n            rlpNonce[0] = 0x84;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF000000) >> 24));\n            rlpNonce[2] = byte(uint8((nonce & 0xFF0000) >> 16));\n            rlpNonce[3] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[4] = byte(uint8(nonce));\n        }\n    }\n\n    /// @dev Compute the expected deployment address by `deployer` at\n    ///      the nonce given by `deploymentNonce`.\n    /// @param deployer The address of the deployer.\n    /// @param deploymentNonce The nonce that the deployer had when deploying\n    ///        a contract.\n    /// @return deploymentAddress The deployment address.\n    function getDeployedAddress(address deployer, uint32 deploymentNonce)\n        internal\n        pure\n        returns (address payable deploymentAddress)\n    {\n        // The address of if a deployed contract is the lower 20 bytes of the\n        // hash of the RLP-encoded deployer's account address + account nonce.\n        // See: https://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n        bytes memory rlpNonce = rlpEncodeNonce(deploymentNonce);\n        return address(uint160(uint256(keccak256(abi.encodePacked(\n            byte(uint8(0xC0 + 21 + rlpNonce.length)),\n            byte(uint8(0x80 + 20)),\n            deployer,\n            rlpNonce\n        )))));\n    }\n}\n",
        "./ITransformERC20.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../transformers/IERC20Transformer.sol\";\nimport \"../external/IFlashWallet.sol\";\n\n\n/// @dev Feature to composably transform between ERC20 tokens.\ninterface ITransformERC20 {\n\n    /// @dev Defines a transformation to run in `transformERC20()`.\n    struct Transformation {\n        // The deployment nonce for the transformer.\n        // The address of the transformer contract will be derived from this\n        // value.\n        uint32 deploymentNonce;\n        // Arbitrary data to pass to the transformer.\n        bytes data;\n    }\n\n    /// @dev Raised upon a successful `transformERC20`.\n    /// @param taker The taker (caller) address.\n    /// @param inputToken The token being provided by the taker.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the taker.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the taker.\n    /// @param outputTokenAmount The amount of `outputToken` received by the taker.\n    event TransformedERC20(\n        address indexed taker,\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    /// @dev Raised when `setTransformerDeployer()` is called.\n    /// @param transformerDeployer The new deployer address.\n    event TransformerDeployerUpdated(address transformerDeployer);\n\n    /// @dev Replace the allowed deployer for transformers.\n    ///      Only callable by the owner.\n    /// @param transformerDeployer The address of the trusted deployer for transformers.\n    function setTransformerDeployer(address transformerDeployer)\n        external;\n\n    /// @dev Deploy a new flash wallet instance and replace the current one with it.\n    ///      Useful if we somehow break the current wallet instance.\n    ///      Anyone can call this.\n    /// @return wallet The new wallet instance.\n    function createTransformWallet()\n        external\n        returns (IFlashWallet wallet);\n\n    /// @dev Executes a series of transformations to convert an ERC20 `inputToken`\n    ///      to an ERC20 `outputToken`.\n    /// @param inputToken The token being provided by the sender.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the sender.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the sender.\n    /// @param minOutputTokenAmount The minimum amount of `outputToken` the sender\n    ///        must receive for the entire transformation to succeed.\n    /// @param transformations The transformations to execute on the token balance(s)\n    ///        in sequence.\n    /// @return outputTokenAmount The amount of `outputToken` received by the sender.\n    function transformERC20(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 minOutputTokenAmount,\n        Transformation[] calldata transformations\n    )\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n\n    /// @dev Internal version of `transformERC20()`. Only callable from within.\n    /// @param callDataHash Hash of the ingress calldata.\n    /// @param taker The taker address.\n    /// @param inputToken The token being provided by the taker.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the taker.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the taker.\n    /// @param minOutputTokenAmount The minimum amount of `outputToken` the taker\n    ///        must receive for the entire transformation to succeed.\n    /// @param transformations The transformations to execute on the token balance(s)\n    ///        in sequence.\n    /// @return outputTokenAmount The amount of `outputToken` received by the taker.\n    function _transformERC20(\n        bytes32 callDataHash,\n        address payable taker,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 minOutputTokenAmount,\n        Transformation[] calldata transformations\n    )\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n\n    /// @dev Return the current wallet instance that will serve as the execution\n    ///      context for transformations.\n    /// @return wallet The wallet instance.\n    function getTransformWallet()\n        external\n        view\n        returns (IFlashWallet wallet);\n\n    /// @dev Return the allowed deployer for transformers.\n    /// @return deployer The transform deployer address.\n    function getTransformerDeployer()\n        external\n        view\n        returns (address deployer);\n}\n",
        "./ITokenSpender.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev Feature that allows spending token allowances.\ninterface ITokenSpender {\n\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\n    ///      Only callable from within.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _spendERC20Tokens(\n        IERC20TokenV06 token,\n        address owner,\n        address to,\n        uint256 amount\n    )\n        external;\n\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\n    ///      pulled from `owner`.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @return amount The amount of tokens that can be pulled.\n    function getSpendableERC20BalanceOf(IERC20TokenV06 token, address owner)\n        external\n        view\n        returns (uint256 amount);\n\n    /// @dev Get the address of the allowance target.\n    /// @return target The target of token allowances.\n    function getAllowanceTarget() external view returns (address target);\n}\n",
        "./IFeature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic interface for a feature contract.\ninterface IFeature {\n\n    // solhint-disable func-name-mixedcase\n\n    /// @dev The name of this feature set.\n    function FEATURE_NAME() external view returns (string memory name);\n\n    /// @dev The version of this feature set.\n    function FEATURE_VERSION() external view returns (uint256 version);\n}\n",
        "./ISimpleFunctionRegistry.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic registry management features.\ninterface ISimpleFunctionRegistry {\n\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\n    /// @param selector The function selector.\n    /// @param oldImpl The implementation contract address being replaced.\n    /// @param newImpl The replacement implementation contract address.\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\n\n    /// @dev Roll back to a prior implementation of a function.\n    /// @param selector The function selector.\n    /// @param targetImpl The address of an older implementation of the function.\n    function rollback(bytes4 selector, address targetImpl) external;\n\n    /// @dev Register or replace a function.\n    /// @param selector The function selector.\n    /// @param impl The implementation contract for the function.\n    function extend(bytes4 selector, address impl) external;\n\n    /// @dev Retrieve the length of the rollback history for a function.\n    /// @param selector The function selector.\n    /// @return rollbackLength The number of items in the rollback history for\n    ///         the function.\n    function getRollbackLength(bytes4 selector)\n        external\n        view\n        returns (uint256 rollbackLength);\n\n    /// @dev Retrieve an entry in the rollback history for a function.\n    /// @param selector The function selector.\n    /// @param idx The index in the rollback history.\n    /// @return impl An implementation address for the function at\n    ///         index `idx`.\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\n        external\n        view\n        returns (address impl);\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.10+commit.00c0fcaf",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/home/gene/dev/0x-monorepo/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/home/gene/dev/0x-monorepo/node_modules/@0x/contracts-erc20"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
