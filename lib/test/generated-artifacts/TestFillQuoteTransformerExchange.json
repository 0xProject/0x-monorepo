{
    "schemaVersion": "2.0.0",
    "contractName": "TestFillQuoteTransformerExchange",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "filledTakerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetMintRatio",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct TestFillQuoteTransformerExchange.FillBehavior",
                        "name": "behavior",
                        "type": "tuple"
                    }
                ],
                "name": "encodeBehaviorData",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "encoded",
                        "type": "bytes"
                    }
                ],
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct IExchange.Order",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerAssetFillAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bytes",
                        "name": "signature",
                        "type": "bytes"
                    }
                ],
                "name": "fillOrder",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "protocolFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.FillResults",
                        "name": "fillResults",
                        "type": "tuple"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes4",
                        "name": "",
                        "type": "bytes4"
                    }
                ],
                "name": "getAssetProxy",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "protocolFeeMultiplier",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "pure",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50610dd1806100206000396000f3fe60806040526004361061003f5760003560e01c80631ce4c78b1461004457806348d8ce2e1461006f578063607041081461009c5780639b44d556146100c9575b600080fd5b34801561005057600080fd5b506100596100e9565b6040516100669190610d26565b60405180910390f35b34801561007b57600080fd5b5061008f61008a36600461090a565b6100ef565b6040516100669190610ac0565b3480156100a857600080fd5b506100bc6100b73660046108ca565b610118565b6040516100669190610a21565b6100dc6100d736600461096b565b61011d565b6040516100669190610cec565b61053990565b6060816040516020016101029190610cd5565b6040516020818303038152906040529050919050565b503090565b61012561082d565b81610165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015c90610bbe565b60405180910390fd5b61016d61085c565b61017983850185610921565b90506105393a023481146101b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015c90610b61565b60405133903483900380156108fc02916000818181858888f193505050501580156101e8573d6000803e3d6000fd5b5060006102366101fc6101608a018a610d2f565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061064d92505050565b835190915061025a906102549060a08b01359063ffffffff61066016565b88610684565b9650868173ffffffffffffffffffffffffffffffffffffffff16632724ed4b33306040518363ffffffff1660e01b8152600401610298929190610a42565b60206040518083038186803b1580156102b057600080fd5b505afa1580156102c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e89190610a09565b1015610320576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015c90610c78565b73ffffffffffffffffffffffffffffffffffffffff81166323b872dd3361034a60208c018c610876565b8a6040518463ffffffff1660e01b815260040161036993929190610a69565b602060405180830381600087803b15801561038357600080fd5b505af1158015610397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bb91906108aa565b5060006103d1888a60a001358b6080013561069c565b905060006103e66101fc6101408c018c610d2f565b90508073ffffffffffffffffffffffffffffffffffffffff166340c10f193361041c8860200151670de0b6b3a76400008761069c565b6040518363ffffffff1660e01b8152600401610439929190610a9a565b600060405180830381600087803b15801561045357600080fd5b505af1158015610467573d6000803e3d6000fd5b5050505060006104818b806101a001906101fc9190610d2f565b905060006104988b8d60a001358e60e0013561069c565b9050808273ffffffffffffffffffffffffffffffffffffffff16632724ed4b33306040518363ffffffff1660e01b81526004016104d6929190610a42565b60206040518083038186803b1580156104ee57600080fd5b505afa158015610502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105269190610a09565b101561055e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015c90610c1b565b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd338e604001602081019061058e9190610876565b846040518463ffffffff1660e01b81526004016105ad93929190610a69565b602060405180830381600087803b1580156105c757600080fd5b505af11580156105db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ff91906108aa565b5092875250506020850197909752507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60408401526060830195909552506080810193909352509092915050565b600061065a8260106106c6565b92915050565b60008282111561067e5761067e61067960028585610706565b6107ab565b50900390565b60008183106106935781610695565b825b9392505050565b60006106be836106b2868563ffffffff6107b316565b9063ffffffff6107e416565b949350505050565b600081601401835110156106e7576106e7610679600485518560140161080e565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b606063e946c1bb60e01b84848460405160240161072593929190610b31565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b6000826107c25750600061065a565b828202828482816107cf57fe5b04146106955761069561067960018686610706565b6000816107fa576107fa61067960038585610706565b600082848161080557fe5b04949350505050565b6060632800659560e01b84848460405160240161072593929190610b53565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b600060208284031215610887578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610695578182fd5b6000602082840312156108bb578081fd5b81518015158114610695578182fd5b6000602082840312156108db578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610695578182fd5b60006040828403121561091b578081fd5b50919050565b600060408284031215610932578081fd5b6040516040810181811067ffffffffffffffff82111715610951578283fd5b604052823581526020928301359281019290925250919050565b60008060008060608587031215610980578283fd5b843567ffffffffffffffff80821115610997578485fd5b8187016101c0818a0312156109aa578586fd5b95506020870135945060408701359150808211156109c6578384fd5b81870188601f8201126109d7578485fd5b80359250818311156109e7578485fd5b8860208483010111156109f8578485fd5b959894975050602090940194505050565b600060208284031215610a1a578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6000602080835283518082850152825b81811015610aec57858101830151858201604001528201610ad0565b81811115610afd5783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6060810160048510610b3f57fe5b938152602081019290925260409091015290565b6060810160088510610b3f57fe5b6020808252603a908201527f5465737446696c6c51756f74655472616e73666f726d657245786368616e676560408201527f2f494e53554646494349454e545f50524f544f434f4c5f464545000000000000606082015260800190565b60208082526032908201527f5465737446696c6c51756f74655472616e73666f726d657245786368616e676560408201527f2f494e56414c49445f5349474e41545552450000000000000000000000000000606082015260800190565b6020808252603d908201527f5465737446696c6c51756f74655472616e73666f726d657245786368616e676560408201527f2f494e53554646494349454e545f54414b45525f4645455f46554e4453000000606082015260800190565b60208082526039908201527f5465737446696c6c51756f74655472616e73666f726d657245786368616e676560408201527f2f494e53554646494349454e545f54414b45525f46554e445300000000000000606082015260800190565b813581526020918201359181019190915260400190565b600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b90815260200190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610d63578283fd5b8084018035925067ffffffffffffffff831115610d7e578384fd5b60200192505036819003821315610d9457600080fd5b925092905056fea264697066735822122028416588437470c09d95d30e61dfe4278db30a328592fcb28aa981565673851464736f6c634300060b0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDD1 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1CE4C78B EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x48D8CE2E EQ PUSH2 0x6F JUMPI DUP1 PUSH4 0x60704108 EQ PUSH2 0x9C JUMPI DUP1 PUSH4 0x9B44D556 EQ PUSH2 0xC9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59 PUSH2 0xE9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0xD26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8F PUSH2 0x8A CALLDATASIZE PUSH1 0x4 PUSH2 0x90A JUMP JUMPDEST PUSH2 0xEF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0xAC0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBC PUSH2 0xB7 CALLDATASIZE PUSH1 0x4 PUSH2 0x8CA JUMP JUMPDEST PUSH2 0x118 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0xA21 JUMP JUMPDEST PUSH2 0xDC PUSH2 0xD7 CALLDATASIZE PUSH1 0x4 PUSH2 0x96B JUMP JUMPDEST PUSH2 0x11D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH2 0x539 SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x102 SWAP2 SWAP1 PUSH2 0xCD5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP ADDRESS SWAP1 JUMP JUMPDEST PUSH2 0x125 PUSH2 0x82D JUMP JUMPDEST DUP2 PUSH2 0x165 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15C SWAP1 PUSH2 0xBBE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x16D PUSH2 0x85C JUMP JUMPDEST PUSH2 0x179 DUP4 DUP6 ADD DUP6 PUSH2 0x921 JUMP JUMPDEST SWAP1 POP PUSH2 0x539 GASPRICE MUL CALLVALUE DUP2 EQ PUSH2 0x1B9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15C SWAP1 PUSH2 0xB61 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 CALLVALUE DUP4 SWAP1 SUB DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1E8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0x236 PUSH2 0x1FC PUSH2 0x160 DUP11 ADD DUP11 PUSH2 0xD2F JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x64D SWAP3 POP POP POP JUMP JUMPDEST DUP4 MLOAD SWAP1 SWAP2 POP PUSH2 0x25A SWAP1 PUSH2 0x254 SWAP1 PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x660 AND JUMP JUMPDEST DUP9 PUSH2 0x684 JUMP JUMPDEST SWAP7 POP DUP7 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2724ED4B CALLER ADDRESS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x298 SWAP3 SWAP2 SWAP1 PUSH2 0xA42 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2E8 SWAP2 SWAP1 PUSH2 0xA09 JUMP JUMPDEST LT ISZERO PUSH2 0x320 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15C SWAP1 PUSH2 0xC78 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH4 0x23B872DD CALLER PUSH2 0x34A PUSH1 0x20 DUP13 ADD DUP13 PUSH2 0x876 JUMP JUMPDEST DUP11 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x369 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA69 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x397 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3BB SWAP2 SWAP1 PUSH2 0x8AA JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x3D1 DUP9 DUP11 PUSH1 0xA0 ADD CALLDATALOAD DUP12 PUSH1 0x80 ADD CALLDATALOAD PUSH2 0x69C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3E6 PUSH2 0x1FC PUSH2 0x140 DUP13 ADD DUP13 PUSH2 0xD2F JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x40C10F19 CALLER PUSH2 0x41C DUP9 PUSH1 0x20 ADD MLOAD PUSH8 0xDE0B6B3A7640000 DUP8 PUSH2 0x69C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x439 SWAP3 SWAP2 SWAP1 PUSH2 0xA9A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x453 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x467 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0x481 DUP12 DUP1 PUSH2 0x1A0 ADD SWAP1 PUSH2 0x1FC SWAP2 SWAP1 PUSH2 0xD2F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x498 DUP12 DUP14 PUSH1 0xA0 ADD CALLDATALOAD DUP15 PUSH1 0xE0 ADD CALLDATALOAD PUSH2 0x69C JUMP JUMPDEST SWAP1 POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2724ED4B CALLER ADDRESS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D6 SWAP3 SWAP2 SWAP1 PUSH2 0xA42 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x502 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x526 SWAP2 SWAP1 PUSH2 0xA09 JUMP JUMPDEST LT ISZERO PUSH2 0x55E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15C SWAP1 PUSH2 0xC1B JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER DUP15 PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x58E SWAP2 SWAP1 PUSH2 0x876 JUMP JUMPDEST DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AD SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA69 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5FF SWAP2 SWAP1 PUSH2 0x8AA JUMP JUMPDEST POP SWAP3 DUP8 MSTORE POP POP PUSH1 0x20 DUP6 ADD SWAP8 SWAP1 SWAP8 MSTORE POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x80 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE POP SWAP1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x65A DUP3 PUSH1 0x10 PUSH2 0x6C6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x67E JUMPI PUSH2 0x67E PUSH2 0x679 PUSH1 0x2 DUP6 DUP6 PUSH2 0x706 JUMP JUMPDEST PUSH2 0x7AB JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x693 JUMPI DUP2 PUSH2 0x695 JUMP JUMPDEST DUP3 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6BE DUP4 PUSH2 0x6B2 DUP7 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x7B3 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x7E4 AND JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x6E7 JUMPI PUSH2 0x6E7 PUSH2 0x679 PUSH1 0x4 DUP6 MLOAD DUP6 PUSH1 0x14 ADD PUSH2 0x80E JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x725 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB31 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x7C2 JUMPI POP PUSH1 0x0 PUSH2 0x65A JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x7CF JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x695 JUMPI PUSH2 0x695 PUSH2 0x679 PUSH1 0x1 DUP7 DUP7 PUSH2 0x706 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x7FA JUMPI PUSH2 0x7FA PUSH2 0x679 PUSH1 0x3 DUP6 DUP6 PUSH2 0x706 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x805 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x725 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB53 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x887 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x695 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8BB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x695 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8DB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x695 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x91B JUMPI DUP1 DUP2 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x932 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x951 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MSTORE DUP3 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD CALLDATALOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x980 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x997 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP8 ADD PUSH2 0x1C0 DUP2 DUP11 SUB SLT ISZERO PUSH2 0x9AA JUMPI DUP6 DUP7 REVERT JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x9C6 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD DUP9 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x9D7 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x9E7 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP5 DUP4 ADD ADD GT ISZERO PUSH2 0x9F8 JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 SWAP1 SWAP5 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA1A JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xAEC JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0xAD0 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xAFD JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0xB3F JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0xB3F JUMPI INVALID JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3A SWAP1 DUP3 ADD MSTORE PUSH32 0x5465737446696C6C51756F74655472616E73666F726D657245786368616E6765 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x2F494E53554646494349454E545F50524F544F434F4C5F464545000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x5465737446696C6C51756F74655472616E73666F726D657245786368616E6765 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x2F494E56414C49445F5349474E41545552450000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3D SWAP1 DUP3 ADD MSTORE PUSH32 0x5465737446696C6C51756F74655472616E73666F726D657245786368616E6765 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x2F494E53554646494349454E545F54414B45525F4645455F46554E4453000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x39 SWAP1 DUP3 ADD MSTORE PUSH32 0x5465737446696C6C51756F74655472616E73666F726D657245786368616E6765 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x2F494E53554646494349454E545F54414B45525F46554E445300000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xD63 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP5 ADD DUP1 CALLDATALOAD SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0xD7E JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x20 ADD SWAP3 POP POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0xD94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 COINBASE PUSH6 0x88437470C09D SWAP6 0xD3 0xE PUSH2 0xDFE4 0x27 DUP14 0xB3 EXP ORIGIN DUP6 SWAP3 0xFC 0xB2 DUP11 0xA9 DUP2 JUMP JUMP PUSH20 0x851464736F6C634300060B003300000000000000 ",
                "sourceMap": "915:3848:58:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {},
                "linkReferences": {},
                "object": "0x60806040526004361061003f5760003560e01c80631ce4c78b1461004457806348d8ce2e1461006f578063607041081461009c5780639b44d556146100c9575b600080fd5b34801561005057600080fd5b506100596100e9565b6040516100669190610d26565b60405180910390f35b34801561007b57600080fd5b5061008f61008a36600461090a565b6100ef565b6040516100669190610ac0565b3480156100a857600080fd5b506100bc6100b73660046108ca565b610118565b6040516100669190610a21565b6100dc6100d736600461096b565b61011d565b6040516100669190610cec565b61053990565b6060816040516020016101029190610cd5565b6040516020818303038152906040529050919050565b503090565b61012561082d565b81610165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015c90610bbe565b60405180910390fd5b61016d61085c565b61017983850185610921565b90506105393a023481146101b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015c90610b61565b60405133903483900380156108fc02916000818181858888f193505050501580156101e8573d6000803e3d6000fd5b5060006102366101fc6101608a018a610d2f565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061064d92505050565b835190915061025a906102549060a08b01359063ffffffff61066016565b88610684565b9650868173ffffffffffffffffffffffffffffffffffffffff16632724ed4b33306040518363ffffffff1660e01b8152600401610298929190610a42565b60206040518083038186803b1580156102b057600080fd5b505afa1580156102c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e89190610a09565b1015610320576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015c90610c78565b73ffffffffffffffffffffffffffffffffffffffff81166323b872dd3361034a60208c018c610876565b8a6040518463ffffffff1660e01b815260040161036993929190610a69565b602060405180830381600087803b15801561038357600080fd5b505af1158015610397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bb91906108aa565b5060006103d1888a60a001358b6080013561069c565b905060006103e66101fc6101408c018c610d2f565b90508073ffffffffffffffffffffffffffffffffffffffff166340c10f193361041c8860200151670de0b6b3a76400008761069c565b6040518363ffffffff1660e01b8152600401610439929190610a9a565b600060405180830381600087803b15801561045357600080fd5b505af1158015610467573d6000803e3d6000fd5b5050505060006104818b806101a001906101fc9190610d2f565b905060006104988b8d60a001358e60e0013561069c565b9050808273ffffffffffffffffffffffffffffffffffffffff16632724ed4b33306040518363ffffffff1660e01b81526004016104d6929190610a42565b60206040518083038186803b1580156104ee57600080fd5b505afa158015610502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105269190610a09565b101561055e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015c90610c1b565b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd338e604001602081019061058e9190610876565b846040518463ffffffff1660e01b81526004016105ad93929190610a69565b602060405180830381600087803b1580156105c757600080fd5b505af11580156105db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ff91906108aa565b5092875250506020850197909752507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60408401526060830195909552506080810193909352509092915050565b600061065a8260106106c6565b92915050565b60008282111561067e5761067e61067960028585610706565b6107ab565b50900390565b60008183106106935781610695565b825b9392505050565b60006106be836106b2868563ffffffff6107b316565b9063ffffffff6107e416565b949350505050565b600081601401835110156106e7576106e7610679600485518560140161080e565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b606063e946c1bb60e01b84848460405160240161072593929190610b31565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b6000826107c25750600061065a565b828202828482816107cf57fe5b04146106955761069561067960018686610706565b6000816107fa576107fa61067960038585610706565b600082848161080557fe5b04949350505050565b6060632800659560e01b84848460405160240161072593929190610b53565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b600060208284031215610887578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610695578182fd5b6000602082840312156108bb578081fd5b81518015158114610695578182fd5b6000602082840312156108db578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610695578182fd5b60006040828403121561091b578081fd5b50919050565b600060408284031215610932578081fd5b6040516040810181811067ffffffffffffffff82111715610951578283fd5b604052823581526020928301359281019290925250919050565b60008060008060608587031215610980578283fd5b843567ffffffffffffffff80821115610997578485fd5b8187016101c0818a0312156109aa578586fd5b95506020870135945060408701359150808211156109c6578384fd5b81870188601f8201126109d7578485fd5b80359250818311156109e7578485fd5b8860208483010111156109f8578485fd5b959894975050602090940194505050565b600060208284031215610a1a578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6000602080835283518082850152825b81811015610aec57858101830151858201604001528201610ad0565b81811115610afd5783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6060810160048510610b3f57fe5b938152602081019290925260409091015290565b6060810160088510610b3f57fe5b6020808252603a908201527f5465737446696c6c51756f74655472616e73666f726d657245786368616e676560408201527f2f494e53554646494349454e545f50524f544f434f4c5f464545000000000000606082015260800190565b60208082526032908201527f5465737446696c6c51756f74655472616e73666f726d657245786368616e676560408201527f2f494e56414c49445f5349474e41545552450000000000000000000000000000606082015260800190565b6020808252603d908201527f5465737446696c6c51756f74655472616e73666f726d657245786368616e676560408201527f2f494e53554646494349454e545f54414b45525f4645455f46554e4453000000606082015260800190565b60208082526039908201527f5465737446696c6c51756f74655472616e73666f726d657245786368616e676560408201527f2f494e53554646494349454e545f54414b45525f46554e445300000000000000606082015260800190565b813581526020918201359181019190915260400190565b600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b90815260200190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610d63578283fd5b8084018035925067ffffffffffffffff831115610d7e578384fd5b60200192505036819003821315610d9457600080fd5b925092905056fea264697066735822122028416588437470c09d95d30e61dfe4278db30a328592fcb28aa981565673851464736f6c634300060b0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1CE4C78B EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x48D8CE2E EQ PUSH2 0x6F JUMPI DUP1 PUSH4 0x60704108 EQ PUSH2 0x9C JUMPI DUP1 PUSH4 0x9B44D556 EQ PUSH2 0xC9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59 PUSH2 0xE9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0xD26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8F PUSH2 0x8A CALLDATASIZE PUSH1 0x4 PUSH2 0x90A JUMP JUMPDEST PUSH2 0xEF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0xAC0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBC PUSH2 0xB7 CALLDATASIZE PUSH1 0x4 PUSH2 0x8CA JUMP JUMPDEST PUSH2 0x118 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0xA21 JUMP JUMPDEST PUSH2 0xDC PUSH2 0xD7 CALLDATASIZE PUSH1 0x4 PUSH2 0x96B JUMP JUMPDEST PUSH2 0x11D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH2 0x539 SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x102 SWAP2 SWAP1 PUSH2 0xCD5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP ADDRESS SWAP1 JUMP JUMPDEST PUSH2 0x125 PUSH2 0x82D JUMP JUMPDEST DUP2 PUSH2 0x165 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15C SWAP1 PUSH2 0xBBE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x16D PUSH2 0x85C JUMP JUMPDEST PUSH2 0x179 DUP4 DUP6 ADD DUP6 PUSH2 0x921 JUMP JUMPDEST SWAP1 POP PUSH2 0x539 GASPRICE MUL CALLVALUE DUP2 EQ PUSH2 0x1B9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15C SWAP1 PUSH2 0xB61 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 CALLVALUE DUP4 SWAP1 SUB DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1E8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0x236 PUSH2 0x1FC PUSH2 0x160 DUP11 ADD DUP11 PUSH2 0xD2F JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x64D SWAP3 POP POP POP JUMP JUMPDEST DUP4 MLOAD SWAP1 SWAP2 POP PUSH2 0x25A SWAP1 PUSH2 0x254 SWAP1 PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x660 AND JUMP JUMPDEST DUP9 PUSH2 0x684 JUMP JUMPDEST SWAP7 POP DUP7 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2724ED4B CALLER ADDRESS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x298 SWAP3 SWAP2 SWAP1 PUSH2 0xA42 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2E8 SWAP2 SWAP1 PUSH2 0xA09 JUMP JUMPDEST LT ISZERO PUSH2 0x320 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15C SWAP1 PUSH2 0xC78 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH4 0x23B872DD CALLER PUSH2 0x34A PUSH1 0x20 DUP13 ADD DUP13 PUSH2 0x876 JUMP JUMPDEST DUP11 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x369 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA69 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x397 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3BB SWAP2 SWAP1 PUSH2 0x8AA JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x3D1 DUP9 DUP11 PUSH1 0xA0 ADD CALLDATALOAD DUP12 PUSH1 0x80 ADD CALLDATALOAD PUSH2 0x69C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3E6 PUSH2 0x1FC PUSH2 0x140 DUP13 ADD DUP13 PUSH2 0xD2F JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x40C10F19 CALLER PUSH2 0x41C DUP9 PUSH1 0x20 ADD MLOAD PUSH8 0xDE0B6B3A7640000 DUP8 PUSH2 0x69C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x439 SWAP3 SWAP2 SWAP1 PUSH2 0xA9A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x453 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x467 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0x481 DUP12 DUP1 PUSH2 0x1A0 ADD SWAP1 PUSH2 0x1FC SWAP2 SWAP1 PUSH2 0xD2F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x498 DUP12 DUP14 PUSH1 0xA0 ADD CALLDATALOAD DUP15 PUSH1 0xE0 ADD CALLDATALOAD PUSH2 0x69C JUMP JUMPDEST SWAP1 POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2724ED4B CALLER ADDRESS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D6 SWAP3 SWAP2 SWAP1 PUSH2 0xA42 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x502 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x526 SWAP2 SWAP1 PUSH2 0xA09 JUMP JUMPDEST LT ISZERO PUSH2 0x55E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15C SWAP1 PUSH2 0xC1B JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER DUP15 PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x58E SWAP2 SWAP1 PUSH2 0x876 JUMP JUMPDEST DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AD SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA69 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5FF SWAP2 SWAP1 PUSH2 0x8AA JUMP JUMPDEST POP SWAP3 DUP8 MSTORE POP POP PUSH1 0x20 DUP6 ADD SWAP8 SWAP1 SWAP8 MSTORE POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x80 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE POP SWAP1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x65A DUP3 PUSH1 0x10 PUSH2 0x6C6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x67E JUMPI PUSH2 0x67E PUSH2 0x679 PUSH1 0x2 DUP6 DUP6 PUSH2 0x706 JUMP JUMPDEST PUSH2 0x7AB JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x693 JUMPI DUP2 PUSH2 0x695 JUMP JUMPDEST DUP3 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6BE DUP4 PUSH2 0x6B2 DUP7 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x7B3 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x7E4 AND JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x6E7 JUMPI PUSH2 0x6E7 PUSH2 0x679 PUSH1 0x4 DUP6 MLOAD DUP6 PUSH1 0x14 ADD PUSH2 0x80E JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x725 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB31 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x7C2 JUMPI POP PUSH1 0x0 PUSH2 0x65A JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x7CF JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x695 JUMPI PUSH2 0x695 PUSH2 0x679 PUSH1 0x1 DUP7 DUP7 PUSH2 0x706 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x7FA JUMPI PUSH2 0x7FA PUSH2 0x679 PUSH1 0x3 DUP6 DUP6 PUSH2 0x706 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x805 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x725 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB53 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x887 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x695 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8BB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x695 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8DB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x695 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x91B JUMPI DUP1 DUP2 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x932 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x951 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MSTORE DUP3 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD CALLDATALOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x980 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x997 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP8 ADD PUSH2 0x1C0 DUP2 DUP11 SUB SLT ISZERO PUSH2 0x9AA JUMPI DUP6 DUP7 REVERT JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x9C6 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD DUP9 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x9D7 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x9E7 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP5 DUP4 ADD ADD GT ISZERO PUSH2 0x9F8 JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 SWAP1 SWAP5 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA1A JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xAEC JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0xAD0 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xAFD JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0xB3F JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0xB3F JUMPI INVALID JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3A SWAP1 DUP3 ADD MSTORE PUSH32 0x5465737446696C6C51756F74655472616E73666F726D657245786368616E6765 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x2F494E53554646494349454E545F50524F544F434F4C5F464545000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x5465737446696C6C51756F74655472616E73666F726D657245786368616E6765 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x2F494E56414C49445F5349474E41545552450000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3D SWAP1 DUP3 ADD MSTORE PUSH32 0x5465737446696C6C51756F74655472616E73666F726D657245786368616E6765 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x2F494E53554646494349454E545F54414B45525F4645455F46554E4453000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x39 SWAP1 DUP3 ADD MSTORE PUSH32 0x5465737446696C6C51756F74655472616E73666F726D657245786368616E6765 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x2F494E53554646494349454E545F54414B45525F46554E445300000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xD63 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP5 ADD DUP1 CALLDATALOAD SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0xD7E JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x20 ADD SWAP3 POP POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0xD94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 COINBASE PUSH6 0x88437470C09D SWAP6 0xD3 0xE PUSH2 0xDFE4 0x27 DUP14 0xB3 EXP ORIGIN DUP6 SWAP3 0xFC 0xB2 DUP11 0xA9 DUP2 JUMP JUMP PUSH20 0x851464736F6C634300060B003300000000000000 ",
                "sourceMap": "915:3848:58:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4259:140;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4076:177;;;;;;;;;;-1:-1:-1;4076:177:58;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4405:128::-;;;;;;;;;;-1:-1:-1;4405:128:58;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1295:2775::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4259:140::-;1245:4;4259:140;:::o;4076:177::-;4183:20;4237:8;4226:20;;;;;;;;:::i;:::-;;;;;;;;;;;;;4219:27;;4076:177;;;:::o;4405:128::-;-1:-1:-1;4521:4:58;;4405:128::o;1295:2775::-;1482:40;;:::i;:::-;1559:21;1538:118;;;;;;;;;;;;:::i;:::-;;;;;;;;;1729:28;;:::i;:::-;1760:37;;;;1771:9;1760:37;:::i;:::-;1729:68;-1:-1:-1;1245:4:58;1856:11;1830:37;1898:9;:24;;1877:129;;;;;;;;;;;;:::i;:::-;2055:44;;:10;;2075:9;:23;;;2055:44;;;;;;;;;2075:23;2055:10;:44;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2140:33:58;2176:44;2199:20;;;;:5;:20;:::i;:::-;2176:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2176:22:58;;-1:-1:-1;;;2176:44:58:i;:::-;2319:31;;2140:80;;-1:-1:-1;2253:142:58;;2288:63;;:22;;;;;:63;:30;:63;:::i;:::-;2365:20;2253:21;:142::i;:::-;2230:165;;2486:20;2426:10;:29;;;2456:10;2476:4;2426:56;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:80;;2405:184;;;;;;;;;;;;:::i;:::-;2599:23;;;;2623:10;2635:18;;;;:5;:18;:::i;:::-;2655:20;2599:77;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2717:30;2750:148;2796:20;2830:5;:22;;;2866:5;:22;;;2750:32;:148::i;:::-;2717:181;-1:-1:-1;2908:33:58;2944:44;2967:20;;;;:5;:20;:::i;2944:44::-;2908:80;;2998:10;:15;;;3027:10;3051:154;3101:8;:28;;;3147:4;3169:22;3051:32;:154::i;:::-;2998:217;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3253:36;3292:47;3315:5;:23;;;;;;;;:::i;3292:47::-;3253:86;;3349:16;3368:140;3414:20;3448:5;:22;;;3484:5;:14;;;3368:32;:140::i;:::-;3349:159;;3602:8;3539:13;:32;;;3572:10;3592:4;3539:59;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:71;;3518:179;;;;;;;;;;;;:::i;:::-;3707:13;:26;;;3734:10;3746:5;:25;;;;;;;;;;:::i;:::-;3773:8;3707:75;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;3793:59:58;;;-1:-1:-1;;3862:34:58;;;:57;;;;-1:-1:-1;3964:2:58;3929:24;;;:38;3977:24;;;:35;;;;-1:-1:-1;4022:27:58;;;:41;;;;-1:-1:-1;3793:11:58;;1295:2775;-1:-1:-1;;1295:2775:58:o;4539:222::-;4641:28;4715:38;4739:9;4750:2;4715:23;:38::i;:::-;4685:69;4539:222;-1:-1:-1;;4539:222:58:o;1586:373:83:-;1672:7;1703:1;1699;:5;1695:236;;;1720:200;1745:174;1805:62;1885:1;1904;1745:42;:174::i;:::-;1720:24;:200::i;:::-;-1:-1:-1;1947:5:83;;;1586:373::o;2505:135::-;2590:7;2624:1;2620;:5;:13;;2632:1;2620:13;;;2628:1;2620:13;2613:20;2505:135;-1:-1:-1;;;2505:135:83:o;3208:300:82:-;3372:21;3425:46;3459:11;3425:25;:9;3443:6;3425:25;:17;:25;:::i;:::-;:33;:46;:33;:46;:::i;:::-;3409:62;3208:300;-1:-1:-1;;;;3208:300:82:o;10857:1080:81:-;10978:14;11023:5;11031:2;11023:10;11012:1;:8;:21;11008:330;;;11049:278;11074:252;11139:92;11249:1;:8;11275:5;11283:2;11275:10;11074:47;:252::i;11049:278::-;-1:-1:-1;11839:13:81;11584:2;11839:13;11833:20;11855:42;11829:69;;10857:1080::o;1314:322:90:-;1467:12;779:10;1538:28;;1580:9;1603:1;1618;1502:127;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1314:322:90;;;;;:::o;1492:170:89:-;1635:9;1629:16;1622:4;1611:9;1607:20;1600:46;725:457:83;811:7;838:6;834:45;;-1:-1:-1;867:1:83;860:8;;834:45;900:5;;;904:1;900;:5;:1;919:5;;;;;:10;915:243;;945:202;970:176;1030:64;1112:1;1131;970:42;:176::i;1188:392::-;1274:7;1301:6;1297:232;;1323:195;1348:169;1408:57;1483:1;1502;1348:42;:169::i;1323:195::-;1538:9;1554:1;1550;:5;;;;;;;1188:392;-1:-1:-1;;;;1188:392:83:o;1295:378:86:-;1483:12;1235:10;1554:37;;1605:9;1628:6;1648:8;1518:148;;;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;2045:241::-;;2149:2;2137:9;2128:7;2124:23;2120:32;2117:2;;;-1:-1;;2155:12;2117:2;85:6;72:20;16540:42;18115:5;16529:54;18090:5;18087:35;18077:2;;-1:-1;;18126:12;2293:257;;2405:2;2393:9;2384:7;2380:23;2376:32;2373:2;;;-1:-1;;2411:12;2373:2;223:6;217:13;18233:5;15950:13;15943:21;18211:5;18208:32;18198:2;;-1:-1;;18244:12;2557:239;;2660:2;2648:9;2639:7;2635:23;2631:32;2628:2;;;-1:-1;;2666:12;2628:2;356:6;343:20;16048:66;18355:5;16037:78;18331:5;18328:34;18318:2;;-1:-1;;18366:12;2803:305;;2939:2;2927:9;2918:7;2914:23;2910:32;2907:2;;;-1:-1;;2945:12;2907:2;-1:-1;2997:95;2901:207;-1:-1;2901:207::o;3115:301::-;;3249:2;3237:9;3228:7;3224:23;3220:32;3217:2;;;-1:-1;;3255:12;3217:2;3249;14980:9;3249:2;15016:6;15012:17;15123:6;15111:10;15108:22;15087:18;15075:10;15072:34;15069:62;15066:2;;;-1:-1;;15134:12;15066:2;3249;15153:22;1834:20;;1310:75;;1461:2;1515:22;;;1834:20;1476:16;;;1469:75;;;;-1:-1;1317:16;3211:205;-1:-1;3211:205::o;3423:751::-;;;;;3605:2;3593:9;3584:7;3580:23;3576:32;3573:2;;;-1:-1;;3611:12;3573:2;3669:17;3656:31;3707:18;;3699:6;3696:30;3693:2;;;-1:-1;;3729:12;3693:2;3820:6;3809:9;3805:22;1712:3;1703:6;1698:3;1694:16;1690:26;1687:2;;;-1:-1;;1719:12;1687:2;3749:88;-1:-1;3874:2;3913:22;;1834:20;;-1:-1;4010:2;3995:18;;3982:32;;-1:-1;4023:30;;;4020:2;;;-1:-1;;4056:12;4020:2;4141:6;4130:9;4126:22;540:3;533:4;525:6;521:17;517:27;507:2;;-1:-1;;548:12;507:2;591:6;578:20;568:30;;3707:18;610:6;607:30;604:2;;;-1:-1;;640:12;604:2;735:3;3874:2;715:17;676:6;701:32;;698:41;695:2;;;-1:-1;;742:12;695:2;3567:607;;;;-1:-1;;3874:2;672:17;;;;-1:-1;;;3567:607::o;4181:263::-;;4296:2;4284:9;4275:7;4271:23;4267:32;4264:2;;;-1:-1;;4302:12;4264:2;-1:-1;1982:13;;4258:186;-1:-1;4258:186::o;9062:222::-;16540:42;16529:54;;;;4671:37;;9189:2;9174:18;;9160:124::o;9291:349::-;16540:42;16529:54;;;4530:58;;16529:54;;9626:2;9611:18;;4671:37;9454:2;9439:18;;9425:215::o;9647:460::-;16540:42;16529:54;;;4530:58;;16529:54;;;;10010:2;9995:18;;4671:37;10093:2;10078:18;;8893:37;;;;9838:2;9823:18;;9809:298::o;10114:349::-;16540:42;16529:54;;;;4530:58;;10449:2;10434:18;;8893:37;10277:2;10262:18;;10248:215::o;10470:306::-;;10615:2;;10636:17;10629:47;4862:5;15274:12;15430:6;10615:2;10604:9;10600:18;15418:19;-1:-1;17466:101;17480:6;17477:1;17474:13;17466:101;;;17547:11;;;;;17541:18;17528:11;;;15458:14;17528:11;17521:39;17495:10;;17466:101;;;17582:6;17579:1;17576:13;17573:2;;;-1:-1;15458:14;17638:6;10604:9;17629:16;;17622:27;17573:2;-1:-1;17758:2;17738:14;17754:7;17734:28;5019:39;;;;15458:14;5019:39;;10586:190;-1:-1;;;10586:190::o;10783:482::-;10985:2;10970:18;;17865:1;17855:12;;17845:2;;17871:9;17845:2;5160:69;;;11168:2;11153:18;;8893:37;;;;11251:2;11236:18;;;8893:37;10956:309;:::o;11272:512::-;11489:2;11474:18;;17999:1;17989:12;;17979:2;;18005:9;11791:416;11991:2;12005:47;;;5667:2;11976:18;;;15418:19;5703:34;15458:14;;;5683:55;5772:28;5758:12;;;5751:50;5820:12;;;11962:245::o;12214:416::-;12414:2;12428:47;;;6071:2;12399:18;;;15418:19;6107:34;15458:14;;;6087:55;6176:20;6162:12;;;6155:42;6216:12;;;12385:245::o;12637:416::-;12837:2;12851:47;;;6467:2;12822:18;;;15418:19;6503:34;15458:14;;;6483:55;6572:31;6558:12;;;6551:53;6623:12;;;12808:245::o;13060:416::-;13260:2;13274:47;;;6874:2;13245:18;;;15418:19;6910:34;15458:14;;;6890:55;6979:27;6965:12;;;6958:49;7026:12;;;13231:245::o;13483:346::-;1834:20;;8893:37;;15768:2;15759:12;;;1834:20;7706:14;;;8893:37;;;;13672:2;13657:18;;13643:186::o;13836:339::-;;14021:3;14010:9;14006:19;13998:27;;8057:16;8051:23;8900:3;8893:37;8240:4;8233:5;8229:16;8223:23;8240:4;8304:3;8300:14;8893:37;8402:4;8395:5;8391:16;8385:23;8402:4;8466:3;8462:14;8893:37;8564:4;8557:5;8553:16;8547:23;8564:4;8628:3;8624:14;8893:37;8729:4;8722:5;8718:16;8712:23;8729:4;8793:3;8789:14;8893:37;13992:183;;;;:::o;14182:222::-;8893:37;;;14309:2;14294:18;;14280:124::o;14411:506::-;;;14546:11;14533:25;14597:48;14621:8;14605:14;14601:29;14597:48;14577:18;14573:73;14563:2;;-1:-1;;14650:12;14563:2;14691:18;14681:8;14677:33;14744:4;14731:18;14721:28;;14769:18;14761:6;14758:30;14755:2;;;-1:-1;;14791:12;14755:2;14636:4;14819:13;;-1:-1;;14605:14;14851:38;;;14841:49;;14838:2;;;14903:1;;14893:12;14838:2;14501:416;;;;;:::o"
            }
        }
    },
    "sourceTreeHashHex": "0xdc5771703d9f113e0654789872b4c89091066109666a60dbbd6b2802a87f26f6",
    "sources": {
        "./TestFillQuoteTransformerExchange.sol": {
            "id": 58
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 81
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 86
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 89
        },
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": {
            "id": 82
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 83
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 90
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": {
            "id": 87
        },
        "../src/vendor/v3/IExchange.sol": {
            "id": 52
        },
        "./TestMintableERC20Token.sol": {
            "id": 65
        }
    },
    "sourceCodes": {
        "./TestFillQuoteTransformerExchange.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../src/vendor/v3/IExchange.sol\";\nimport \"./TestMintableERC20Token.sol\";\n\n\ncontract TestFillQuoteTransformerExchange {\n\n    struct FillBehavior {\n        // How much of the order is filled, in taker asset amount.\n        uint256 filledTakerAssetAmount;\n        // Scaling for maker assets minted, in 1e18.\n        uint256 makerAssetMintRatio;\n    }\n\n    uint256 private constant PROTOCOL_FEE_MULTIPLIER = 1337;\n\n    using LibSafeMathV06 for uint256;\n\n    function fillOrder(\n        IExchange.Order calldata order,\n        uint256 takerAssetFillAmount,\n        bytes calldata signature\n    )\n        external\n        payable\n        returns (IExchange.FillResults memory fillResults)\n    {\n        require(\n            signature.length != 0,\n            \"TestFillQuoteTransformerExchange/INVALID_SIGNATURE\"\n        );\n        // The signature is the ABI-encoded FillBehavior data.\n        FillBehavior memory behavior = abi.decode(signature, (FillBehavior));\n\n        uint256 protocolFee = PROTOCOL_FEE_MULTIPLIER * tx.gasprice;\n        require(\n            msg.value == protocolFee,\n            \"TestFillQuoteTransformerExchange/INSUFFICIENT_PROTOCOL_FEE\"\n        );\n        // Return excess protocol fee.\n        msg.sender.transfer(msg.value - protocolFee);\n\n        // Take taker tokens.\n        TestMintableERC20Token takerToken = _getTokenFromAssetData(order.takerAssetData);\n        takerAssetFillAmount = LibSafeMathV06.min256(\n            order.takerAssetAmount.safeSub(behavior.filledTakerAssetAmount),\n            takerAssetFillAmount\n        );\n        require(\n            takerToken.getSpendableAmount(msg.sender, address(this)) >= takerAssetFillAmount,\n            \"TestFillQuoteTransformerExchange/INSUFFICIENT_TAKER_FUNDS\"\n        );\n        takerToken.transferFrom(msg.sender, order.makerAddress, takerAssetFillAmount);\n\n        // Mint maker tokens.\n        uint256 makerAssetFilledAmount = LibMathV06.getPartialAmountFloor(\n            takerAssetFillAmount,\n            order.takerAssetAmount,\n            order.makerAssetAmount\n        );\n        TestMintableERC20Token makerToken = _getTokenFromAssetData(order.makerAssetData);\n        makerToken.mint(\n            msg.sender,\n            LibMathV06.getPartialAmountFloor(\n                behavior.makerAssetMintRatio,\n                1e18,\n                makerAssetFilledAmount\n            )\n        );\n\n        // Take taker fee.\n        TestMintableERC20Token takerFeeToken = _getTokenFromAssetData(order.takerFeeAssetData);\n        uint256 takerFee = LibMathV06.getPartialAmountFloor(\n            takerAssetFillAmount,\n            order.takerAssetAmount,\n            order.takerFee\n        );\n        require(\n            takerFeeToken.getSpendableAmount(msg.sender, address(this)) >= takerFee,\n            \"TestFillQuoteTransformerExchange/INSUFFICIENT_TAKER_FEE_FUNDS\"\n        );\n        takerFeeToken.transferFrom(msg.sender, order.feeRecipientAddress, takerFee);\n\n        fillResults.makerAssetFilledAmount = makerAssetFilledAmount;\n        fillResults.takerAssetFilledAmount = takerAssetFillAmount;\n        fillResults.makerFeePaid = uint256(-1);\n        fillResults.takerFeePaid = takerFee;\n        fillResults.protocolFeePaid = protocolFee;\n    }\n\n    function encodeBehaviorData(FillBehavior calldata behavior)\n        external\n        pure\n        returns (bytes memory encoded)\n    {\n        return abi.encode(behavior);\n    }\n\n    function protocolFeeMultiplier()\n        external\n        pure\n        returns (uint256)\n    {\n        return PROTOCOL_FEE_MULTIPLIER;\n    }\n\n    function getAssetProxy(bytes4)\n        external\n        view\n        returns (address)\n    {\n        return address(this);\n    }\n\n    function _getTokenFromAssetData(bytes memory assetData)\n        private\n        pure\n        returns (TestMintableERC20Token token)\n    {\n        return TestMintableERC20Token(LibBytesV06.readAddress(assetData, 16));\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "../src/vendor/v3/IExchange.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Interface to the V3 Exchange.\ninterface IExchange {\n\n    /// @dev V3 Order structure.\n    struct Order {\n        // Address that created the order.\n        address makerAddress;\n        // Address that is allowed to fill the order.\n        // If set to 0, any address is allowed to fill the order.\n        address takerAddress;\n        // Address that will recieve fees when order is filled.\n        address feeRecipientAddress;\n        // Address that is allowed to call Exchange contract methods that affect this order.\n        // If set to 0, any address is allowed to call these methods.\n        address senderAddress;\n        // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 makerAssetAmount;\n        // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 takerAssetAmount;\n        // Fee paid to feeRecipient by maker when order is filled.\n        uint256 makerFee;\n        // Fee paid to feeRecipient by taker when order is filled.\n        uint256 takerFee;\n        // Timestamp in seconds at which order expires.\n        uint256 expirationTimeSeconds;\n        // Arbitrary number to facilitate uniqueness of the order's hash.\n        uint256 salt;\n        // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset.\n        // The leading bytes4 references the id of the asset proxy.\n        bytes makerAssetData;\n        // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset.\n        // The leading bytes4 references the id of the asset proxy.\n        bytes takerAssetData;\n        // Encoded data that can be decoded by a specified proxy contract when transferring makerFeeAsset.\n        // The leading bytes4 references the id of the asset proxy.\n        bytes makerFeeAssetData;\n        // Encoded data that can be decoded by a specified proxy contract when transferring takerFeeAsset.\n        // The leading bytes4 references the id of the asset proxy.\n        bytes takerFeeAssetData;\n    }\n\n    /// @dev V3 `fillOrder()` results.`\n    struct FillResults {\n        // Total amount of makerAsset(s) filled.\n        uint256 makerAssetFilledAmount;\n        // Total amount of takerAsset(s) filled.\n        uint256 takerAssetFilledAmount;\n        // Total amount of fees paid by maker(s) to feeRecipient(s).\n        uint256 makerFeePaid;\n        // Total amount of fees paid by taker to feeRecipients(s).\n        uint256 takerFeePaid;\n        // Total amount of fees paid by taker to the staking contract.\n        uint256 protocolFeePaid;\n    }\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        Order calldata order,\n        uint256 takerAssetFillAmount,\n        bytes calldata signature\n    )\n        external\n        payable\n        returns (FillResults memory fillResults);\n\n    /// @dev Returns the protocolFeeMultiplier\n    /// @return multiplier The multiplier for protocol fees.\n    function protocolFeeMultiplier()\n        external\n        view\n        returns (uint256 multiplier);\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return proxyAddress The asset proxy registered to assetProxyId.\n    ///         Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address proxyAddress);\n}\n",
        "./TestMintableERC20Token.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\ncontract TestMintableERC20Token {\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    function transfer(address to, uint256 amount)\n        external\n        virtual\n        returns (bool)\n    {\n        return transferFrom(msg.sender, to, amount);\n    }\n\n    function approve(address spender, uint256 amount)\n        external\n        virtual\n        returns (bool)\n    {\n        allowance[msg.sender][spender] = amount;\n        return true;\n    }\n\n    function mint(address owner, uint256 amount)\n        external\n        virtual\n    {\n        balanceOf[owner] += amount;\n    }\n\n    function burn(address owner, uint256 amount)\n        external\n        virtual\n    {\n        require(balanceOf[owner] >= amount, \"TestMintableERC20Token/INSUFFICIENT_FUNDS\");\n        balanceOf[owner] -= amount;\n    }\n\n    function transferFrom(address from, address to, uint256 amount)\n        public\n        virtual\n        returns (bool)\n    {\n        if (from != msg.sender) {\n            require(\n                allowance[from][msg.sender] >= amount,\n                \"TestMintableERC20Token/INSUFFICIENT_ALLOWANCE\"\n            );\n            allowance[from][msg.sender] -= amount;\n        }\n        require(balanceOf[from] >= amount, \"TestMintableERC20Token/INSUFFICIENT_FUNDS\");\n        balanceOf[from] -= amount;\n        balanceOf[to] += amount;\n        return true;\n    }\n\n    function getSpendableAmount(address owner, address spender)\n        external\n        view\n        returns (uint256)\n    {\n        return balanceOf[owner] < allowance[owner][spender]\n            ? balanceOf[owner]\n            : allowance[owner][spender];\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.11+commit.5ef660b1",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/node_modules/@0x/contracts-erc20"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
