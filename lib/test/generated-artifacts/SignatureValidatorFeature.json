{
    "schemaVersion": "2.0.0",
    "contractName": "SignatureValidatorFeature",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [],
                "name": "FEATURE_NAME",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "FEATURE_VERSION",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "hash",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address",
                        "name": "signer",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "signature",
                        "type": "bytes"
                    }
                ],
                "name": "isValidHashSignature",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "isValid",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "migrate",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "success",
                        "type": "bytes4"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "hash",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address",
                        "name": "signer",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "signature",
                        "type": "bytes"
                    }
                ],
                "name": "validateHashSignature",
                "outputs": [],
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "details": "Feature for validating signatures.",
            "kind": "dev",
            "methods": {
                "isValidHashSignature(bytes32,address,bytes)": {
                    "details": "Check that `hash` was signed by `signer` given `signature`.",
                    "params": {
                        "hash": "The hash that was signed.",
                        "signature": "The signature. The last byte of this signature should        be a member of the `SignatureType` enum.",
                        "signer": "The signer of the hash."
                    },
                    "returns": {
                        "isValid": "`true` on success."
                    }
                },
                "migrate()": {
                    "details": "Initialize and register this feature.      Should be delegatecalled by `Migrate.migrate()`.",
                    "returns": {
                        "success": "`LibMigrate.SUCCESS` on success."
                    }
                },
                "validateHashSignature(bytes32,address,bytes)": {
                    "details": "Validate that `hash` was signed by `signer` given `signature`.      Reverts otherwise.",
                    "params": {
                        "hash": "The hash that was signed.",
                        "signature": "The signature. The last byte of this signature should        be a member of the `SignatureType` enum.",
                        "signer": "The signer of the hash."
                    }
                }
            },
            "stateVariables": {
                "ECDSA_SIGNATURE_R_LIMIT": {
                    "details": "Exclusive upper limit on ECDSA signatures 'R' values.      The valid range is given by fig (282) of the yellow paper."
                },
                "ECDSA_SIGNATURE_S_LIMIT": {
                    "details": "Exclusive upper limit on ECDSA signatures 'S' values.      The valid range is given by fig (283) of the yellow paper."
                },
                "FEATURE_NAME": {
                    "details": "Name of this feature."
                },
                "FEATURE_VERSION": {
                    "details": "Version of this feature."
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x60c0604052610011600160008061002d565b60a05234801561002057600080fd5b503060601b60805261005f565b6bffffffff0000000000000000604084901b1667ffffffff00000000602084901b161763ffffffff8216179392505050565b60805160601c60a051610d6f6100896000398060eb52508061014a52806103435250610d6f6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80638171c407116100505780638171c4071461009f5780638fd3ab80146100bf578063f68fd38d146100d457610067565b8063031b905c1461006c5780636ae4b4f71461008a575b600080fd5b6100746100e9565b6040516100819190610c8f565b60405180910390f35b61009261010d565b6040516100819190610c1f565b6100b26100ad3660046108be565b610146565b6040516100819190610a9f565b6100c7610273565b6040516100819190610b39565b6100e76100e236600461095a565b6102ec565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280601281526020017f5369676e617475726556616c696461746f72000000000000000000000000000081525081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f68fd38d60e01b8686868660405160240161019e9493929190610aaa565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516102279190610a52565b600060405180830381855afa9150503d8060008114610262576040519150601f19603f3d011682016040523d82523d6000602084013e610267565b606091505b50909695505050505050565b600061029e7ff68fd38d0000000000000000000000000000000000000000000000000000000061030d565b6102c77f8171c4070000000000000000000000000000000000000000000000000000000061030d565b507f2c64c5ef0000000000000000000000000000000000000000000000000000000090565b60006102f98484846103a0565b905061030781858585610404565b50505050565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081523090636eb224cb9061036b9084907f000000000000000000000000000000000000000000000000000000000000000090600401610b66565b600060405180830381600087803b15801561038557600080fd5b505af1158015610399573d6000803e3d6000fd5b5050505050565b60006103ad8484846106df565b9050600481818111156103bc57fe5b60ff16106103d9576103d96103d46002868686610726565b6107e7565b60008160048111156103e757fe5b14156103fd576103fd6103d46003868686610726565b9392505050565b6000600185600481111561041457fe5b141561042f5761042a6103d46000868686610726565b61067b565b600285600481111561043d57fe5b141561054057815160421461045c5761045c6103d46001868686610726565b60008260008151811061046b57fe5b016020015160f81c905060006104828460016107ef565b905060006104918560216107ef565b90507ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141821080156104e157507f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a181105b1561053857600187848484604051600081526020016040526040516105099493929190610b1b565b6020604051602081039080840390855afa15801561052b573d6000803e3d6000fd5b5050506020604051035193505b50505061067b565b600385600481111561054e57fe5b141561064057815160421461056d5761056d6103d46001868686610726565b60008260008151811061057c57fe5b016020015160f81c905060006105938460016107ef565b905060006105a28560216107ef565b90507ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141821080156105f257507f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a181105b156105385760018760405160200161060a9190610a6e565b60405160208183030381529060405280519060200120848484604051600081526020016040526040516105099493929190610b1b565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067290610c32565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811615806106ca57508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b15610399576103996103d46004868686610726565b60008151600014156106fb576106fb6103d46001868686610726565b8160018351038151811061070b57fe5b016020015160f81c600481111561071e57fe5b949350505050565b60607f4c7607a3ebba99c9acde0e2a04d88829f7001b63f028b796dda6ff02406ddad5858585856040516024016107609493929190610bd0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050949350505050565b805160208201fd5b60008160200183511015610810576108106103d46005855185602001610819565b50016020015190565b6060632800659560e01b84848460405160240161083893929190610bae565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b600080600080606085870312156108d3578384fd5b84359350602085013573ffffffffffffffffffffffffffffffffffffffff811681146108fd578384fd5b9250604085013567ffffffffffffffff80821115610919578384fd5b818701915087601f83011261092c578384fd5b81358181111561093a578485fd5b88602082850101111561094b578485fd5b95989497505060200194505050565b60008060006060848603121561096e578283fd5b83359250602084013573ffffffffffffffffffffffffffffffffffffffff81168114610998578283fd5b9150604084013567ffffffffffffffff8111156109b3578182fd5b8401601f810186136109c3578182fd5b80356109d66109d182610cbf565b610c98565b8181528760208385010111156109ea578384fd5b6109fb826020830160208601610d01565b8093505050509250925092565b60008151808452610a20816020860160208601610d0d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251610a64818460208701610d0d565b9190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b901515815260200190565b600085825273ffffffffffffffffffffffffffffffffffffffff851660208301526060604083015282606083015282846080840137818301608090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019392505050565b93845260ff9290921660208401526040830152606082015260800190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b6060810160088510610bbc57fe5b938152602081019290925260409091015290565b600060058610610bdc57fe5b85825284602083015273ffffffffffffffffffffffffffffffffffffffff8416604083015260806060830152610c156080830184610a08565b9695505050505050565b6000602082526103fd6020830184610a08565b60208082526024908201527f5369676e617475726556616c696461746f722f494c4c4547414c5f434f44455f60408201527f5041544800000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60405181810167ffffffffffffffff81118282101715610cb757600080fd5b604052919050565b600067ffffffffffffffff821115610cd5578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b82818337506000910152565b60005b83811015610d28578181015183820152602001610d10565b83811115610307575050600091015256fea264697066735822122052be93db11a24536d369b3e3f06ee866dab45c3f0c58dfa7b8d4950de43d2e5364736f6c634300060c0033",
                "opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE PUSH2 0x11 PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x2D JUMP JUMPDEST PUSH1 0xA0 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP ADDRESS PUSH1 0x60 SHL PUSH1 0x80 MSTORE PUSH2 0x5F JUMP JUMPDEST PUSH12 0xFFFFFFFF0000000000000000 PUSH1 0x40 DUP5 SWAP1 SHL AND PUSH8 0xFFFFFFFF00000000 PUSH1 0x20 DUP5 SWAP1 SHL AND OR PUSH4 0xFFFFFFFF DUP3 AND OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH2 0xD6F PUSH2 0x89 PUSH1 0x0 CODECOPY DUP1 PUSH1 0xEB MSTORE POP DUP1 PUSH2 0x14A MSTORE DUP1 PUSH2 0x343 MSTORE POP PUSH2 0xD6F PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8171C407 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x8171C407 EQ PUSH2 0x9F JUMPI DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0xBF JUMPI DUP1 PUSH4 0xF68FD38D EQ PUSH2 0xD4 JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x31B905C EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x6AE4B4F7 EQ PUSH2 0x8A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x74 PUSH2 0xE9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0xC8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x92 PUSH2 0x10D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0xC1F JUMP JUMPDEST PUSH2 0xB2 PUSH2 0xAD CALLDATASIZE PUSH1 0x4 PUSH2 0x8BE JUMP JUMPDEST PUSH2 0x146 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0xA9F JUMP JUMPDEST PUSH2 0xC7 PUSH2 0x273 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0xB39 JUMP JUMPDEST PUSH2 0xE7 PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0x95A JUMP JUMPDEST PUSH2 0x2EC JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5369676E617475726556616C696461746F720000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF68FD38D PUSH1 0xE0 SHL DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x19E SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAAA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x227 SWAP2 SWAP1 PUSH2 0xA52 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x262 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x267 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29E PUSH32 0xF68FD38D00000000000000000000000000000000000000000000000000000000 PUSH2 0x30D JUMP JUMPDEST PUSH2 0x2C7 PUSH32 0x8171C40700000000000000000000000000000000000000000000000000000000 PUSH2 0x30D JUMP JUMPDEST POP PUSH32 0x2C64C5EF00000000000000000000000000000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F9 DUP5 DUP5 DUP5 PUSH2 0x3A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x307 DUP2 DUP6 DUP6 DUP6 PUSH2 0x404 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x6EB224CB SWAP1 PUSH2 0x36B SWAP1 DUP5 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0xB66 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x385 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x399 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AD DUP5 DUP5 DUP5 PUSH2 0x6DF JUMP JUMPDEST SWAP1 POP PUSH1 0x4 DUP2 DUP2 DUP2 GT ISZERO PUSH2 0x3BC JUMPI INVALID JUMPDEST PUSH1 0xFF AND LT PUSH2 0x3D9 JUMPI PUSH2 0x3D9 PUSH2 0x3D4 PUSH1 0x2 DUP7 DUP7 DUP7 PUSH2 0x726 JUMP JUMPDEST PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x3E7 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x3FD JUMPI PUSH2 0x3FD PUSH2 0x3D4 PUSH1 0x3 DUP7 DUP7 DUP7 PUSH2 0x726 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP6 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x414 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x42F JUMPI PUSH2 0x42A PUSH2 0x3D4 PUSH1 0x0 DUP7 DUP7 DUP7 PUSH2 0x726 JUMP JUMPDEST PUSH2 0x67B JUMP JUMPDEST PUSH1 0x2 DUP6 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x43D JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x540 JUMPI DUP2 MLOAD PUSH1 0x42 EQ PUSH2 0x45C JUMPI PUSH2 0x45C PUSH2 0x3D4 PUSH1 0x1 DUP7 DUP7 DUP7 PUSH2 0x726 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x46B JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 SHR SWAP1 POP PUSH1 0x0 PUSH2 0x482 DUP5 PUSH1 0x1 PUSH2 0x7EF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x491 DUP6 PUSH1 0x21 PUSH2 0x7EF JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP3 LT DUP1 ISZERO PUSH2 0x4E1 JUMPI POP PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A1 DUP2 LT JUMPDEST ISZERO PUSH2 0x538 JUMPI PUSH1 0x1 DUP8 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x509 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB1B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x52B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP4 POP JUMPDEST POP POP POP PUSH2 0x67B JUMP JUMPDEST PUSH1 0x3 DUP6 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x54E JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x640 JUMPI DUP2 MLOAD PUSH1 0x42 EQ PUSH2 0x56D JUMPI PUSH2 0x56D PUSH2 0x3D4 PUSH1 0x1 DUP7 DUP7 DUP7 PUSH2 0x726 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x57C JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 SHR SWAP1 POP PUSH1 0x0 PUSH2 0x593 DUP5 PUSH1 0x1 PUSH2 0x7EF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5A2 DUP6 PUSH1 0x21 PUSH2 0x7EF JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP3 LT DUP1 ISZERO PUSH2 0x5F2 JUMPI POP PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A1 DUP2 LT JUMPDEST ISZERO PUSH2 0x538 JUMPI PUSH1 0x1 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x60A SWAP2 SWAP1 PUSH2 0xA6E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x509 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB1B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x672 SWAP1 PUSH2 0xC32 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO DUP1 PUSH2 0x6CA JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x399 JUMPI PUSH2 0x399 PUSH2 0x3D4 PUSH1 0x4 DUP7 DUP7 DUP7 PUSH2 0x726 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6FB JUMPI PUSH2 0x6FB PUSH2 0x3D4 PUSH1 0x1 DUP7 DUP7 DUP7 PUSH2 0x726 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x70B JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 SHR PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x71E JUMPI INVALID JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x4C7607A3EBBA99C9ACDE0E2A04D88829F7001B63F028B796DDA6FF02406DDAD5 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x760 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xBD0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x810 JUMPI PUSH2 0x810 PUSH2 0x3D4 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x819 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x838 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xBAE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8D3 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x8FD JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x919 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x92C JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x93A JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x94B JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x96E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x998 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9B3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 ADD PUSH1 0x1F DUP2 ADD DUP7 SGT PUSH2 0x9C3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x9D6 PUSH2 0x9D1 DUP3 PUSH2 0xCBF JUMP JUMPDEST PUSH2 0xC98 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP8 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x9EA JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x9FB DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xD01 JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xA20 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xD0D JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xA64 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xD0D JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE PUSH1 0x1C DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3C ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE DUP3 PUSH1 0x60 DUP4 ADD MSTORE DUP3 DUP5 PUSH1 0x80 DUP5 ADD CALLDATACOPY DUP2 DUP4 ADD PUSH1 0x80 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0xBBC JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP7 LT PUSH2 0xBDC JUMPI INVALID JUMPDEST DUP6 DUP3 MSTORE DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0xC15 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0xA08 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x3FD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xA08 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x5369676E617475726556616C696461746F722F494C4C4547414C5F434F44455F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5041544800000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xCB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xCD5 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD28 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xD10 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x307 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE 0xBE SWAP4 0xDB GT LOG2 GASLIMIT CALLDATASIZE 0xD3 PUSH10 0xB3E3F06EE866DAB45C3F 0xC PC 0xDF 0xA7 0xB8 0xD4 SWAP6 0xD 0xE4 RETURNDATASIZE 0x2E MSTORE8 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "1015:8821:30:-:0;;;1897:23;1912:1;1915;;1897:14;:23::i;:::-;1845:75;;1015:8821;;;;;;;;;-1:-1:-1;1859:4:36;1833:31;;;;1015:8821:30;;2611:235:36;2773:20;2791:2;2773:20;;;;2798;2816:2;2798:20;;;;2772:47;2822:17;;;2772:67;2611:235;;;;;:::o;1015:8821:30:-;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "3550": [
                        {
                            "length": 32,
                            "start": 235
                        }
                    ],
                    "5430": [
                        {
                            "length": 32,
                            "start": 330
                        },
                        {
                            "length": 32,
                            "start": 835
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80638171c407116100505780638171c4071461009f5780638fd3ab80146100bf578063f68fd38d146100d457610067565b8063031b905c1461006c5780636ae4b4f71461008a575b600080fd5b6100746100e9565b6040516100819190610c8f565b60405180910390f35b61009261010d565b6040516100819190610c1f565b6100b26100ad3660046108be565b610146565b6040516100819190610a9f565b6100c7610273565b6040516100819190610b39565b6100e76100e236600461095a565b6102ec565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280601281526020017f5369676e617475726556616c696461746f72000000000000000000000000000081525081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f68fd38d60e01b8686868660405160240161019e9493929190610aaa565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516102279190610a52565b600060405180830381855afa9150503d8060008114610262576040519150601f19603f3d011682016040523d82523d6000602084013e610267565b606091505b50909695505050505050565b600061029e7ff68fd38d0000000000000000000000000000000000000000000000000000000061030d565b6102c77f8171c4070000000000000000000000000000000000000000000000000000000061030d565b507f2c64c5ef0000000000000000000000000000000000000000000000000000000090565b60006102f98484846103a0565b905061030781858585610404565b50505050565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081523090636eb224cb9061036b9084907f000000000000000000000000000000000000000000000000000000000000000090600401610b66565b600060405180830381600087803b15801561038557600080fd5b505af1158015610399573d6000803e3d6000fd5b5050505050565b60006103ad8484846106df565b9050600481818111156103bc57fe5b60ff16106103d9576103d96103d46002868686610726565b6107e7565b60008160048111156103e757fe5b14156103fd576103fd6103d46003868686610726565b9392505050565b6000600185600481111561041457fe5b141561042f5761042a6103d46000868686610726565b61067b565b600285600481111561043d57fe5b141561054057815160421461045c5761045c6103d46001868686610726565b60008260008151811061046b57fe5b016020015160f81c905060006104828460016107ef565b905060006104918560216107ef565b90507ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141821080156104e157507f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a181105b1561053857600187848484604051600081526020016040526040516105099493929190610b1b565b6020604051602081039080840390855afa15801561052b573d6000803e3d6000fd5b5050506020604051035193505b50505061067b565b600385600481111561054e57fe5b141561064057815160421461056d5761056d6103d46001868686610726565b60008260008151811061057c57fe5b016020015160f81c905060006105938460016107ef565b905060006105a28560216107ef565b90507ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141821080156105f257507f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a181105b156105385760018760405160200161060a9190610a6e565b60405160208183030381529060405280519060200120848484604051600081526020016040526040516105099493929190610b1b565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067290610c32565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811615806106ca57508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b15610399576103996103d46004868686610726565b60008151600014156106fb576106fb6103d46001868686610726565b8160018351038151811061070b57fe5b016020015160f81c600481111561071e57fe5b949350505050565b60607f4c7607a3ebba99c9acde0e2a04d88829f7001b63f028b796dda6ff02406ddad5858585856040516024016107609493929190610bd0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050949350505050565b805160208201fd5b60008160200183511015610810576108106103d46005855185602001610819565b50016020015190565b6060632800659560e01b84848460405160240161083893929190610bae565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b600080600080606085870312156108d3578384fd5b84359350602085013573ffffffffffffffffffffffffffffffffffffffff811681146108fd578384fd5b9250604085013567ffffffffffffffff80821115610919578384fd5b818701915087601f83011261092c578384fd5b81358181111561093a578485fd5b88602082850101111561094b578485fd5b95989497505060200194505050565b60008060006060848603121561096e578283fd5b83359250602084013573ffffffffffffffffffffffffffffffffffffffff81168114610998578283fd5b9150604084013567ffffffffffffffff8111156109b3578182fd5b8401601f810186136109c3578182fd5b80356109d66109d182610cbf565b610c98565b8181528760208385010111156109ea578384fd5b6109fb826020830160208601610d01565b8093505050509250925092565b60008151808452610a20816020860160208601610d0d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251610a64818460208701610d0d565b9190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b901515815260200190565b600085825273ffffffffffffffffffffffffffffffffffffffff851660208301526060604083015282606083015282846080840137818301608090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019392505050565b93845260ff9290921660208401526040830152606082015260800190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b6060810160088510610bbc57fe5b938152602081019290925260409091015290565b600060058610610bdc57fe5b85825284602083015273ffffffffffffffffffffffffffffffffffffffff8416604083015260806060830152610c156080830184610a08565b9695505050505050565b6000602082526103fd6020830184610a08565b60208082526024908201527f5369676e617475726556616c696461746f722f494c4c4547414c5f434f44455f60408201527f5041544800000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60405181810167ffffffffffffffff81118282101715610cb757600080fd5b604052919050565b600067ffffffffffffffff821115610cd5578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b82818337506000910152565b60005b83811015610d28578181015183820152602001610d10565b83811115610307575050600091015256fea264697066735822122052be93db11a24536d369b3e3f06ee866dab45c3f0c58dfa7b8d4950de43d2e5364736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8171C407 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x8171C407 EQ PUSH2 0x9F JUMPI DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0xBF JUMPI DUP1 PUSH4 0xF68FD38D EQ PUSH2 0xD4 JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x31B905C EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x6AE4B4F7 EQ PUSH2 0x8A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x74 PUSH2 0xE9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0xC8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x92 PUSH2 0x10D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0xC1F JUMP JUMPDEST PUSH2 0xB2 PUSH2 0xAD CALLDATASIZE PUSH1 0x4 PUSH2 0x8BE JUMP JUMPDEST PUSH2 0x146 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0xA9F JUMP JUMPDEST PUSH2 0xC7 PUSH2 0x273 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0xB39 JUMP JUMPDEST PUSH2 0xE7 PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0x95A JUMP JUMPDEST PUSH2 0x2EC JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5369676E617475726556616C696461746F720000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF68FD38D PUSH1 0xE0 SHL DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x19E SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAAA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x227 SWAP2 SWAP1 PUSH2 0xA52 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x262 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x267 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29E PUSH32 0xF68FD38D00000000000000000000000000000000000000000000000000000000 PUSH2 0x30D JUMP JUMPDEST PUSH2 0x2C7 PUSH32 0x8171C40700000000000000000000000000000000000000000000000000000000 PUSH2 0x30D JUMP JUMPDEST POP PUSH32 0x2C64C5EF00000000000000000000000000000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F9 DUP5 DUP5 DUP5 PUSH2 0x3A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x307 DUP2 DUP6 DUP6 DUP6 PUSH2 0x404 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x6EB224CB SWAP1 PUSH2 0x36B SWAP1 DUP5 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0xB66 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x385 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x399 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AD DUP5 DUP5 DUP5 PUSH2 0x6DF JUMP JUMPDEST SWAP1 POP PUSH1 0x4 DUP2 DUP2 DUP2 GT ISZERO PUSH2 0x3BC JUMPI INVALID JUMPDEST PUSH1 0xFF AND LT PUSH2 0x3D9 JUMPI PUSH2 0x3D9 PUSH2 0x3D4 PUSH1 0x2 DUP7 DUP7 DUP7 PUSH2 0x726 JUMP JUMPDEST PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x3E7 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x3FD JUMPI PUSH2 0x3FD PUSH2 0x3D4 PUSH1 0x3 DUP7 DUP7 DUP7 PUSH2 0x726 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP6 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x414 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x42F JUMPI PUSH2 0x42A PUSH2 0x3D4 PUSH1 0x0 DUP7 DUP7 DUP7 PUSH2 0x726 JUMP JUMPDEST PUSH2 0x67B JUMP JUMPDEST PUSH1 0x2 DUP6 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x43D JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x540 JUMPI DUP2 MLOAD PUSH1 0x42 EQ PUSH2 0x45C JUMPI PUSH2 0x45C PUSH2 0x3D4 PUSH1 0x1 DUP7 DUP7 DUP7 PUSH2 0x726 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x46B JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 SHR SWAP1 POP PUSH1 0x0 PUSH2 0x482 DUP5 PUSH1 0x1 PUSH2 0x7EF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x491 DUP6 PUSH1 0x21 PUSH2 0x7EF JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP3 LT DUP1 ISZERO PUSH2 0x4E1 JUMPI POP PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A1 DUP2 LT JUMPDEST ISZERO PUSH2 0x538 JUMPI PUSH1 0x1 DUP8 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x509 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB1B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x52B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP4 POP JUMPDEST POP POP POP PUSH2 0x67B JUMP JUMPDEST PUSH1 0x3 DUP6 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x54E JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x640 JUMPI DUP2 MLOAD PUSH1 0x42 EQ PUSH2 0x56D JUMPI PUSH2 0x56D PUSH2 0x3D4 PUSH1 0x1 DUP7 DUP7 DUP7 PUSH2 0x726 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x57C JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 SHR SWAP1 POP PUSH1 0x0 PUSH2 0x593 DUP5 PUSH1 0x1 PUSH2 0x7EF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5A2 DUP6 PUSH1 0x21 PUSH2 0x7EF JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP3 LT DUP1 ISZERO PUSH2 0x5F2 JUMPI POP PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A1 DUP2 LT JUMPDEST ISZERO PUSH2 0x538 JUMPI PUSH1 0x1 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x60A SWAP2 SWAP1 PUSH2 0xA6E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x509 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB1B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x672 SWAP1 PUSH2 0xC32 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO DUP1 PUSH2 0x6CA JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x399 JUMPI PUSH2 0x399 PUSH2 0x3D4 PUSH1 0x4 DUP7 DUP7 DUP7 PUSH2 0x726 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6FB JUMPI PUSH2 0x6FB PUSH2 0x3D4 PUSH1 0x1 DUP7 DUP7 DUP7 PUSH2 0x726 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x70B JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 SHR PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x71E JUMPI INVALID JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x4C7607A3EBBA99C9ACDE0E2A04D88829F7001B63F028B796DDA6FF02406DDAD5 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x760 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xBD0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x810 JUMPI PUSH2 0x810 PUSH2 0x3D4 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x819 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x838 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xBAE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8D3 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x8FD JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x919 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x92C JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x93A JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x94B JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x96E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x998 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9B3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 ADD PUSH1 0x1F DUP2 ADD DUP7 SGT PUSH2 0x9C3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x9D6 PUSH2 0x9D1 DUP3 PUSH2 0xCBF JUMP JUMPDEST PUSH2 0xC98 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP8 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x9EA JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x9FB DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xD01 JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xA20 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xD0D JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xA64 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xD0D JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE PUSH1 0x1C DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3C ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE DUP3 PUSH1 0x60 DUP4 ADD MSTORE DUP3 DUP5 PUSH1 0x80 DUP5 ADD CALLDATACOPY DUP2 DUP4 ADD PUSH1 0x80 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0xBBC JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP7 LT PUSH2 0xBDC JUMPI INVALID JUMPDEST DUP6 DUP3 MSTORE DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0xC15 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0xA08 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x3FD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xA08 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x5369676E617475726556616C696461746F722F494C4C4547414C5F434F44455F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5041544800000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xCB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xCD5 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD28 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xD10 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x307 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE 0xBE SWAP4 0xDB GT LOG2 GASLIMIT CALLDATASIZE 0xD3 PUSH10 0xB3E3F06EE866DAB45C3F 0xC PC 0xDF 0xA7 0xB8 0xD4 SWAP6 0xD 0xE4 RETURNDATASIZE 0x2E MSTORE8 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "1015:8821:30:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1845:75;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1734:67;;;:::i;:::-;;;;;;;:::i;3627:734::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2097:264::-;;;:::i;:::-;;;;;;;:::i;2702:576::-;;;;;;:::i;:::-;;:::i;:::-;;1845:75;;;:::o;1734:67::-;;;;;;;;;;;;;;;;;;;:::o;3627:734::-;3807:12;4142:15;:26;;4222:35;;;4275:4;4297:6;4321:9;;4182:162;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4142:212;;;;4182:162;4142:212;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4128:226:30;;3627:734;-1:-1:-1;;;;;;3627:734:30:o;2097:264::-;2150:14;2180:61;2205:35;2180:24;:61::i;:::-;2251:60;2276:34;2251:24;:60::i;:::-;-1:-1:-1;2328:26:30;2097:264;:::o;2702:576::-;2876:27;2906:94;2943:4;2961:6;2981:9;2906:23;:94::i;:::-;2876:124;;3146:125;3187:13;3214:4;3232:6;3252:9;3146:27;:125::i;:::-;2702:576;;;;:::o;2140:168:36:-;2222:79;;;;;2261:4;;2222:52;;:79;;2275:8;;2285:15;;2222:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2140:168;:::o;7850:1358:30:-;8013:27;8125:89;8157:4;8175:6;8195:9;8125:18;:89::i;:::-;8109:105;-1:-1:-1;8300:29:30;8109:105;8270:20;;;;;;;;:60;;;8266:317;;8346:226;:216;8411:64;8493:4;8515:6;8539:9;8346:47;:216::i;:::-;:224;:226::i;:::-;8932:21;8915:13;:38;;;;;;;;;8911:291;;;8969:222;:212;9034:60;9112:4;9134:6;9158:9;8969:47;:212::i;:222::-;7850:1358;;;;;:::o;4733:3026::-;4934:17;4995:21;4978:13;:38;;;;;;;;;4974:2466;;;5291:229;:219;5356:67;5441:4;5463:6;5487:9;5291:47;:219::i;:229::-;4974:2466;;;5558:20;5541:13;:37;;;;;;;;;5537:1903;;;5636:9;:16;5656:2;5636:22;5632:310;;5678:249;:239;5747:67;5836:4;5862:6;5890:9;5678:47;:239::i;:249::-;5955:7;5971:9;5981:1;5971:12;;;;;;;;;;;;;;;-1:-1:-1;5998:9:30;6010:24;:9;6032:1;6010:21;:24::i;:::-;5998:36;-1:-1:-1;6048:9:30;6060:25;:9;6082:2;6060:21;:25::i;:::-;6048:37;-1:-1:-1;1399:66:30;6103:36;;:76;;;;-1:-1:-1;1662:31:30;6143:36;;6103:76;6099:249;;;6211:122;6242:4;6268:1;6291;6314;6211:122;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6199:134;;6099:249;5537:1903;;;;;;6385:21;6368:13;:38;;;;;;;;;6364:1076;;;6465:9;:16;6485:2;6465:22;6461:310;;6507:249;:239;6576:67;6665:4;6691:6;6719:9;6507:47;:239::i;:249::-;6784:7;6800:9;6810:1;6800:12;;;;;;;;;;;;;;;-1:-1:-1;6827:9:30;6839:24;:9;6861:1;6839:21;:24::i;:::-;6827:36;-1:-1:-1;6877:9:30;6889:25;:9;6911:2;6889:21;:25::i;:::-;6877:37;-1:-1:-1;1399:66:30;6932:36;;:76;;;;-1:-1:-1;1662:31:30;6972:36;;6932:76;6928:384;;;7040:257;7183:4;7081:128;;;;;;;;:::i;:::-;;;;;;;;;;;;;7071:139;;;;;;7232:1;7255;7278;7040:257;;;;;;;;;;;;;;;;;;:::i;6364:1076::-;7383:46;;;;;;;;;;:::i;:::-;;;;;;;;6364:1076;7453:23;;;;;:46;;;7490:9;7480:19;;:6;:19;;;;7453:46;7449:304;;;7515:227;:217;7580:65;7663:4;7685:6;7709:9;7515:47;:217::i;9282:552::-;9440:21;9481:9;:16;9501:1;9481:21;9477:281;;;9518:229;:219;9583:67;9668:4;9690:6;9714:9;9518:47;:219::i;:229::-;9794:9;9823:1;9804:9;:16;:20;9794:31;;;;;;;;;;;;;;9774:53;;;;;;;;9767:60;9282:552;-1:-1:-1;;;;9282:552:30:o;843:464:7:-;1059:12;1137:66;1218:4;1236;1254:13;1281:9;1094:206;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;843:464:7;;;;;;:::o;1492:170:86:-;1635:9;1629:16;1622:4;1611:9;1607:20;1600:46;14262:688:80;14383:14;14428:5;14436:2;14428:10;14417:1;:8;:21;14413:306;;;14454:254;14479:228;14544:95;14657:1;:8;14683:5;14691:2;14683:10;14479:47;:228::i;14454:254::-;-1:-1:-1;14897:13:80;14799:2;14897:13;14891:20;;14262:688::o;1295:378:84:-;1483:12;1235:10;1554:37;;1605:9;1628:6;1648:8;1518:148;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1295:378:84;;;;;:::o;1086:615:-1:-;;;;;1243:2;1231:9;1222:7;1218:23;1214:32;1211:2;;;-1:-1;;1249:12;1211:2;1332:22;209:20;1301:63;;1401:2;1444:9;1440:22;72:20;12998:42;14553:5;12987:54;14528:5;14525:35;14515:2;;-1:-1;;14564:12;14515:2;1409:63;-1:-1;1537:2;1522:18;;1509:32;1561:18;1550:30;;;1547:2;;;-1:-1;;1583:12;1547:2;1668:6;1657:9;1653:22;;;407:3;400:4;392:6;388:17;384:27;374:2;;-1:-1;;415:12;374:2;458:6;445:20;1561:18;477:6;474:30;471:2;;;-1:-1;;507:12;471:2;602:3;1401:2;582:17;543:6;568:32;;565:41;562:2;;;-1:-1;;609:12;562:2;1205:496;;;;-1:-1;;1401:2;539:17;;-1:-1;;;1205:496::o;1708:595::-;;;;1855:2;1843:9;1834:7;1830:23;1826:32;1823:2;;;-1:-1;;1861:12;1823:2;222:6;209:20;1913:63;;2013:2;2056:9;2052:22;72:20;12998:42;14553:5;12987:54;14528:5;14525:35;14515:2;;-1:-1;;14564:12;14515:2;2021:63;-1:-1;2149:2;2134:18;;2121:32;2173:18;2162:30;;2159:2;;;-1:-1;;2195:12;2159:2;2255:22;;732:4;720:17;;716:27;-1:-1;706:2;;-1:-1;;747:12;706:2;794:6;781:20;816:64;831:48;872:6;831:48;:::i;:::-;816:64;:::i;:::-;900:6;893:5;886:21;1004:3;2013:2;995:6;928;986:16;;983:25;980:2;;;-1:-1;;1011:12;980:2;1031:41;1065:6;2013:2;962:5;958:16;2013:2;928:6;924:17;1031:41;:::i;:::-;2215:72;;;;;;1817:486;;;;;:::o;3265:343::-;;3407:5;11321:12;11606:6;11601:3;11594:19;3500:52;3545:6;11643:4;11638:3;11634:14;11643:4;3526:5;3522:16;3500:52;:::i;:::-;14184:2;14164:14;14180:7;14160:28;3564:39;;;;11643:4;3564:39;;3355:253;-1:-1;;3355:253::o;5753:271::-;;3775:5;11321:12;3886:52;3931:6;3926:3;3919:4;3912:5;3908:16;3886:52;:::i;:::-;3950:16;;;;;5887:137;-1:-1;;5887:137::o;6031:520::-;5025:66;5005:87;;4989:2;5111:12;;2612:37;;;;6514:12;;;6248:303::o;6558:210::-;12305:13;;12298:21;2495:34;;6679:2;6664:18;;6650:118::o;6775:548::-;;2642:5;2619:3;2612:37;12998:42;12991:5;12987:54;7150:2;7139:9;7135:18;2381:37;6986:2;7187;7176:9;7172:18;7165:48;11606:6;6986:2;6975:9;6971:18;11594:19;13666:6;13661:3;11634:14;6975:9;11634:14;13643:30;13704:16;;;11634:14;13704:16;;;13697:27;;;;14184:2;14164:14;;;14180:7;14160:28;3212:39;;;6957:366;-1:-1;;;6957:366::o;7330:548::-;2612:37;;;13203:4;13192:16;;;;7698:2;7683:18;;5706:35;7781:2;7766:18;;2612:37;7864:2;7849:18;;2612:37;7537:3;7522:19;;7508:370::o;7885:218::-;12482:66;12471:78;;;;2889:36;;8010:2;7995:18;;7981:122::o;8110:329::-;12482:66;12471:78;;;;2889:36;;12998:42;12987:54;8425:2;8410:18;;2381:37;8263:2;8248:18;;8234:205::o;8446:512::-;8663:2;8648:18;;14306:1;14296:12;;14286:2;;14312:9;14286:2;4083:84;;;8861:2;8846:18;;2612:37;;;;8944:2;8929:18;;;2612:37;8634:324;:::o;8965:702::-;;14437:1;14430:5;14427:12;14417:2;;14443:9;14417:2;13515:57;4288:3;4281:81;2642:5;9421:2;9410:9;9406:18;2612:37;12998:42;12991:5;12987:54;9504:2;9493:9;9489:18;2381:37;9225:3;9541:2;9530:9;9526:18;9519:48;9581:76;9225:3;9214:9;9210:19;9643:6;9581:76;:::i;:::-;9573:84;9196:471;-1:-1;;;;;;9196:471::o;9674:310::-;;9821:2;9842:17;9835:47;9896:78;9821:2;9810:9;9806:18;9960:6;9896:78;:::i;9991:416::-;10191:2;10205:47;;;5362:2;10176:18;;;11594:19;5398:34;11634:14;;;5378:55;5467:6;5453:12;;;5446:28;5493:12;;;10162:245::o;10414:222::-;2612:37;;;10541:2;10526:18;;10512:124::o;10643:256::-;10705:2;10699:9;10731:17;;;10806:18;10791:34;;10827:22;;;10788:62;10785:2;;;10863:1;;10853:12;10785:2;10705;10872:22;10683:216;;-1:-1;10683:216::o;10906:321::-;;11049:18;11041:6;11038:30;11035:2;;;-1:-1;;11071:12;11035:2;-1:-1;11148:4;11125:17;11144:9;11121:33;11212:4;11202:15;;10972:255::o;13585:145::-;13666:6;13661:3;13656;13643:30;-1:-1;13722:1;13704:16;;13697:27;13636:94::o;13739:268::-;13804:1;13811:101;13825:6;13822:1;13819:13;13811:101;;;13892:11;;;13886:18;13873:11;;;13866:39;13847:2;13840:10;13811:101;;;13927:6;13924:1;13921:13;13918:2;;;-1:-1;;13804:1;13974:16;;13967:27;13788:219::o"
            }
        }
    },
    "sourceTreeHashHex": "0xe9a8895db97712f9a31e8339c229f5651e2d3048f9c06b0b753a1104712ca0ce",
    "sources": {
        "./SignatureValidatorFeature.sol": {
            "id": 30
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 86
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 80
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 84
        },
        "../errors/LibSignatureRichErrors.sol": {
            "id": 7
        },
        "../fixins/FixinCommon.sol": {
            "id": 36
        },
        "../errors/LibCommonRichErrors.sol": {
            "id": 2
        },
        "../errors/LibOwnableRichErrors.sol": {
            "id": 5
        },
        "./IOwnableFeature.sol": {
            "id": 21
        },
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": {
            "id": 89
        },
        "./ISimpleFunctionRegistryFeature.sol": {
            "id": 23
        },
        "../migrations/LibMigrate.sol": {
            "id": 42
        },
        "./ISignatureValidatorFeature.sol": {
            "id": 22
        },
        "./IFeature.sol": {
            "id": 18
        }
    },
    "sourceCodes": {
        "./SignatureValidatorFeature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"../errors/LibSignatureRichErrors.sol\";\nimport \"../fixins/FixinCommon.sol\";\nimport \"../migrations/LibMigrate.sol\";\nimport \"./ISignatureValidatorFeature.sol\";\nimport \"./IFeature.sol\";\n\n\n/// @dev Feature for validating signatures.\ncontract SignatureValidatorFeature is\n    IFeature,\n    ISignatureValidatorFeature,\n    FixinCommon\n{\n    using LibBytesV06 for bytes;\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Exclusive upper limit on ECDSA signatures 'R' values.\n    ///      The valid range is given by fig (282) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_R_LIMIT =\n        uint256(0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141);\n    /// @dev Exclusive upper limit on ECDSA signatures 'S' values.\n    ///      The valid range is given by fig (283) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_S_LIMIT = ECDSA_SIGNATURE_R_LIMIT / 2 + 1;\n    /// @dev Name of this feature.\n    string public constant override FEATURE_NAME = \"SignatureValidator\";\n    /// @dev Version of this feature.\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 0, 0);\n\n    /// @dev Initialize and register this feature.\n    ///      Should be delegatecalled by `Migrate.migrate()`.\n    /// @return success `LibMigrate.SUCCESS` on success.\n    function migrate()\n        external\n        returns (bytes4 success)\n    {\n        _registerFeatureFunction(this.validateHashSignature.selector);\n        _registerFeatureFunction(this.isValidHashSignature.selector);\n        return LibMigrate.MIGRATE_SUCCESS;\n    }\n\n    /// @dev Validate that `hash` was signed by `signer` given `signature`.\n    ///      Reverts otherwise.\n    /// @param hash The hash that was signed.\n    /// @param signer The signer of the hash.\n    /// @param signature The signature. The last byte of this signature should\n    ///        be a member of the `SignatureType` enum.\n    function validateHashSignature(\n        bytes32 hash,\n        address signer,\n        bytes memory signature\n    )\n        public\n        override\n        view\n    {\n        SignatureType signatureType = _readValidSignatureType(\n            hash,\n            signer,\n            signature\n        );\n\n        // TODO: When we support non-hash signature types, assert that\n        // `signatureType` is only `EIP712` or `EthSign` here.\n\n        _validateHashSignatureTypes(\n            signatureType,\n            hash,\n            signer,\n            signature\n        );\n    }\n\n    /// @dev Check that `hash` was signed by `signer` given `signature`.\n    /// @param hash The hash that was signed.\n    /// @param signer The signer of the hash.\n    /// @param signature The signature. The last byte of this signature should\n    ///        be a member of the `SignatureType` enum.\n    /// @return isValid `true` on success.\n    function isValidHashSignature(\n        bytes32 hash,\n        address signer,\n        bytes calldata signature\n    )\n        external\n        view\n        override\n        returns (bool isValid)\n    {\n        // HACK: `validateHashSignature()` is stateless so we can just perform\n        // a staticcall against the implementation contract. This avoids the\n        // overhead of going through the proxy. If `validateHashSignature()` ever\n        // becomes stateful this would need to change.\n        (isValid, ) = _implementation.staticcall(\n            abi.encodeWithSelector(\n                this.validateHashSignature.selector,\n                hash,\n                signer,\n                signature\n            )\n        );\n    }\n\n    /// @dev Validates a hash-only signature type. Low-level, hidden variant.\n    /// @param signatureType The type of signature to check.\n    /// @param hash The hash that was signed.\n    /// @param signer The signer of the hash.\n    /// @param signature The signature. The last byte of this signature should\n    ///        be a member of the `SignatureType` enum.\n    function _validateHashSignatureTypes(\n        SignatureType signatureType,\n        bytes32 hash,\n        address signer,\n        bytes memory signature\n    )\n        private\n        pure\n    {\n        address recovered = address(0);\n        if (signatureType == SignatureType.Invalid) {\n            // Always invalid signature.\n            // Like Illegal, this is always implicitly available and therefore\n            // offered explicitly. It can be implicitly created by providing\n            // a correctly formatted but incorrect signature.\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ALWAYS_INVALID,\n                hash,\n                signer,\n                signature\n            ).rrevert();\n        } else if (signatureType == SignatureType.EIP712) {\n            // Signature using EIP712\n            if (signature.length != 66) {\n                LibSignatureRichErrors.SignatureValidationError(\n                    LibSignatureRichErrors.SignatureValidationErrorCodes.INVALID_LENGTH,\n                    hash,\n                    signer,\n                    signature\n                ).rrevert();\n            }\n            uint8 v = uint8(signature[0]);\n            bytes32 r = signature.readBytes32(1);\n            bytes32 s = signature.readBytes32(33);\n            if (uint256(r) < ECDSA_SIGNATURE_R_LIMIT && uint256(s) < ECDSA_SIGNATURE_S_LIMIT) {\n                recovered = ecrecover(\n                    hash,\n                    v,\n                    r,\n                    s\n                );\n            }\n        } else if (signatureType == SignatureType.EthSign) {\n            // Signed using `eth_sign`\n            if (signature.length != 66) {\n                LibSignatureRichErrors.SignatureValidationError(\n                    LibSignatureRichErrors.SignatureValidationErrorCodes.INVALID_LENGTH,\n                    hash,\n                    signer,\n                    signature\n                ).rrevert();\n            }\n            uint8 v = uint8(signature[0]);\n            bytes32 r = signature.readBytes32(1);\n            bytes32 s = signature.readBytes32(33);\n            if (uint256(r) < ECDSA_SIGNATURE_R_LIMIT && uint256(s) < ECDSA_SIGNATURE_S_LIMIT) {\n                recovered = ecrecover(\n                    keccak256(abi.encodePacked(\n                        \"\\x19Ethereum Signed Message:\\n32\",\n                        hash\n                    )),\n                    v,\n                    r,\n                    s\n                );\n            }\n        } else {\n            // This should never happen.\n            revert('SignatureValidator/ILLEGAL_CODE_PATH');\n        }\n        if (recovered == address(0) || signer != recovered) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.WRONG_SIGNER,\n                hash,\n                signer,\n                signature\n            ).rrevert();\n        }\n    }\n\n    /// @dev Reads the `SignatureType` from the end of a signature and validates it.\n    function _readValidSignatureType(\n        bytes32 hash,\n        address signer,\n        bytes memory signature\n    )\n        private\n        pure\n        returns (SignatureType signatureType)\n    {\n        // Read the signatureType from the signature\n        signatureType = _readSignatureType(\n            hash,\n            signer,\n            signature\n        );\n\n        // Ensure signature is supported\n        if (uint8(signatureType) >= uint8(SignatureType.NSignatureTypes)) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.UNSUPPORTED,\n                hash,\n                signer,\n                signature\n            ).rrevert();\n        }\n\n        // Always illegal signature.\n        // This is always an implicit option since a signer can create a\n        // signature array with invalid type or length. We may as well make\n        // it an explicit option. This aids testing and analysis. It is\n        // also the initialization value for the enum type.\n        if (signatureType == SignatureType.Illegal) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ILLEGAL,\n                hash,\n                signer,\n                signature\n            ).rrevert();\n        }\n    }\n\n    /// @dev Reads the `SignatureType` from the end of a signature.\n    function _readSignatureType(\n        bytes32 hash,\n        address signer,\n        bytes memory signature\n    )\n        private\n        pure\n        returns (SignatureType sigType)\n    {\n        if (signature.length == 0) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.INVALID_LENGTH,\n                hash,\n                signer,\n                signature\n            ).rrevert();\n        }\n        return SignatureType(uint8(signature[signature.length - 1]));\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "../errors/LibSignatureRichErrors.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSignatureRichErrors {\n\n    enum SignatureValidationErrorCodes {\n        ALWAYS_INVALID,\n        INVALID_LENGTH,\n        UNSUPPORTED,\n        ILLEGAL,\n        WRONG_SIGNER\n    }\n\n    // solhint-disable func-name-mixedcase\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32,address,bytes)\")),\n            code,\n            hash,\n            signerAddress,\n            signature\n        );\n    }\n}\n",
        "../fixins/FixinCommon.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\nimport \"../features/IOwnableFeature.sol\";\nimport \"../features/ISimpleFunctionRegistryFeature.sol\";\n\n\n/// @dev Common feature utilities.\nabstract contract FixinCommon {\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev The implementation address of this feature.\n    address internal immutable _implementation;\n\n    /// @dev The caller must be this contract.\n    modifier onlySelf() virtual {\n        if (msg.sender != address(this)) {\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\n        }\n        _;\n    }\n\n    /// @dev The caller of this function must be the owner.\n    modifier onlyOwner() virtual {\n        {\n            address owner = IOwnableFeature(address(this)).owner();\n            if (msg.sender != owner) {\n                LibOwnableRichErrors.OnlyOwnerError(\n                    msg.sender,\n                    owner\n                ).rrevert();\n            }\n        }\n        _;\n    }\n\n    constructor() internal {\n        // Remember this feature's original address.\n        _implementation = address(this);\n    }\n\n    /// @dev Registers a function implemented by this feature at `_implementation`.\n    ///      Can and should only be called within a `migrate()`.\n    /// @param selector The selector of the function whose implementation\n    ///        is at `_implementation`.\n    function _registerFeatureFunction(bytes4 selector)\n        internal\n    {\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\n    }\n\n    /// @dev Encode a feature version as a `uint256`.\n    /// @param major The major version number of the feature.\n    /// @param minor The minor version number of the feature.\n    /// @param revision The revision number of the feature.\n    /// @return encodedVersion The encoded version number.\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\n        internal\n        pure\n        returns (uint256 encodedVersion)\n    {\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\n    }\n}\n",
        "../errors/LibCommonRichErrors.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibCommonRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyCallableBySelfError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableBySelfError(address)\")),\n            sender\n        );\n    }\n\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IllegalReentrancyError(bytes4,uint256)\")),\n            selector,\n            reentrancyFlags\n        );\n    }\n}\n",
        "../errors/LibOwnableRichErrors.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOwnerError(address,address)\")),\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n        );\n    }\n\n    function MigrateCallFailedError(address target, bytes memory resultData)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MigrateCallFailedError(address,bytes)\")),\n            target,\n            resultData\n        );\n    }\n}\n",
        "./IOwnableFeature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\n/// @dev Owner management and migration features.\ninterface IOwnableFeature is\n    IOwnableV06\n{\n    /// @dev Emitted when `migrate()` is called.\n    /// @param caller The caller of `migrate()`.\n    /// @param migrator The migration contract.\n    /// @param newOwner The address of the new owner.\n    event Migrated(address caller, address migrator, address newOwner);\n\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\n    ///      The result of the function being called should be the magic bytes\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\n    ///      The owner will be temporarily set to `address(this)` inside the call.\n    ///      Before returning, the owner will be set to `newOwner`.\n    /// @param target The migrator contract address.\n    /// @param newOwner The address of the new owner.\n    /// @param data The call data.\n    function migrate(address target, bytes calldata data, address newOwner) external;\n}\n",
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n",
        "./ISimpleFunctionRegistryFeature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic registry management features.\ninterface ISimpleFunctionRegistryFeature {\n\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\n    /// @param selector The function selector.\n    /// @param oldImpl The implementation contract address being replaced.\n    /// @param newImpl The replacement implementation contract address.\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\n\n    /// @dev Roll back to a prior implementation of a function.\n    /// @param selector The function selector.\n    /// @param targetImpl The address of an older implementation of the function.\n    function rollback(bytes4 selector, address targetImpl) external;\n\n    /// @dev Register or replace a function.\n    /// @param selector The function selector.\n    /// @param impl The implementation contract for the function.\n    function extend(bytes4 selector, address impl) external;\n\n    /// @dev Retrieve the length of the rollback history for a function.\n    /// @param selector The function selector.\n    /// @return rollbackLength The number of items in the rollback history for\n    ///         the function.\n    function getRollbackLength(bytes4 selector)\n        external\n        view\n        returns (uint256 rollbackLength);\n\n    /// @dev Retrieve an entry in the rollback history for a function.\n    /// @param selector The function selector.\n    /// @param idx The index in the rollback history.\n    /// @return impl An implementation address for the function at\n    ///         index `idx`.\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\n        external\n        view\n        returns (address impl);\n}\n",
        "../migrations/LibMigrate.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\nlibrary LibMigrate {\n\n    /// @dev Magic bytes returned by a migrator to indicate success.\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\n    /// @param target The call target.\n    /// @param data The call data.\n    function delegatecallMigrateFunction(\n        address target,\n        bytes memory data\n    )\n        internal\n    {\n        (bool success, bytes memory resultData) = target.delegatecall(data);\n        if (!success ||\n            resultData.length != 32 ||\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\n        {\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\n        }\n    }\n}\n",
        "./ISignatureValidatorFeature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Feature for validating signatures.\ninterface ISignatureValidatorFeature {\n\n   /// @dev Allowed signature types.\n    enum SignatureType {\n        Illegal,                     // 0x00, default value\n        Invalid,                     // 0x01\n        EIP712,                      // 0x02\n        EthSign,                     // 0x03\n        NSignatureTypes              // 0x04, number of signature types. Always leave at end.\n    }\n\n    /// @dev Validate that `hash` was signed by `signer` given `signature`.\n    ///      Reverts otherwise.\n    /// @param hash The hash that was signed.\n    /// @param signer The signer of the hash.\n    /// @param signature The signature. The last byte of this signature should\n    ///        be a member of the `SignatureType` enum.\n    function validateHashSignature(\n        bytes32 hash,\n        address signer,\n        bytes calldata signature\n    )\n        external\n        view;\n\n    /// @dev Check that `hash` was signed by `signer` given `signature`.\n    /// @param hash The hash that was signed.\n    /// @param signer The signer of the hash.\n    /// @param signature The signature. The last byte of this signature should\n    ///        be a member of the `SignatureType` enum.\n    /// @return isValid `true` on success.\n    function isValidHashSignature(\n        bytes32 hash,\n        address signer,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bool isValid);\n}\n",
        "./IFeature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic interface for a feature contract.\ninterface IFeature {\n\n    // solhint-disable func-name-mixedcase\n\n    /// @dev The name of this feature set.\n    function FEATURE_NAME() external view returns (string memory name);\n\n    /// @dev The version of this feature set.\n    function FEATURE_VERSION() external view returns (uint256 version);\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/node_modules/@0x/contracts-erc20"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
