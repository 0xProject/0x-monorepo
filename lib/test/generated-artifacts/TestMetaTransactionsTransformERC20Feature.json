{
    "schemaVersion": "2.0.0",
    "contractName": "TestMetaTransactionsTransformERC20Feature",
    "compilerOutput": {
        "abi": [
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "quoteSigner",
                        "type": "address"
                    }
                ],
                "name": "QuoteSignerUpdated",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "sender",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "value",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "taker",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "contract IERC20TokenV06",
                        "name": "inputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "contract IERC20TokenV06",
                        "name": "outputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "inputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "minOutputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint32",
                                "name": "deploymentNonce",
                                "type": "uint32"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            }
                        ],
                        "indexed": false,
                        "internalType": "struct ITransformERC20Feature.Transformation[]",
                        "name": "transformations",
                        "type": "tuple[]"
                    },
                    {
                        "indexed": false,
                        "internalType": "bytes32",
                        "name": "callDataHash",
                        "type": "bytes32"
                    },
                    {
                        "indexed": false,
                        "internalType": "bytes",
                        "name": "callDataSignature",
                        "type": "bytes"
                    }
                ],
                "name": "TransformERC20Called",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "taker",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "inputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "outputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "inputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "TransformedERC20",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "transformerDeployer",
                        "type": "address"
                    }
                ],
                "name": "TransformerDeployerUpdated",
                "type": "event"
            },
            {
                "inputs": [],
                "name": "FEATURE_NAME",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "FEATURE_VERSION",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address payable",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "inputToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "outputToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "inputTokenAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "minOutputTokenAmount",
                                "type": "uint256"
                            },
                            {
                                "components": [
                                    {
                                        "internalType": "uint32",
                                        "name": "deploymentNonce",
                                        "type": "uint32"
                                    },
                                    {
                                        "internalType": "bytes",
                                        "name": "data",
                                        "type": "bytes"
                                    }
                                ],
                                "internalType": "struct ITransformERC20Feature.Transformation[]",
                                "name": "transformations",
                                "type": "tuple[]"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "callDataHash",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes",
                                "name": "callDataSignature",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct ITransformERC20Feature.TransformERC20Args",
                        "name": "args",
                        "type": "tuple"
                    }
                ],
                "name": "_transformERC20",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "createTransformWallet",
                "outputs": [
                    {
                        "internalType": "contract IFlashWallet",
                        "name": "wallet",
                        "type": "address"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getQuoteSigner",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "signer",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getTransformWallet",
                "outputs": [
                    {
                        "internalType": "contract IFlashWallet",
                        "name": "wallet",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getTransformerDeployer",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "deployer",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "transformerDeployer",
                        "type": "address"
                    }
                ],
                "name": "migrate",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "success",
                        "type": "bytes4"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "quoteSigner",
                        "type": "address"
                    }
                ],
                "name": "setQuoteSigner",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "transformerDeployer",
                        "type": "address"
                    }
                ],
                "name": "setTransformerDeployer",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "inputToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "outputToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "inputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minOutputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint32",
                                "name": "deploymentNonce",
                                "type": "uint32"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct ITransformERC20Feature.Transformation[]",
                        "name": "transformations",
                        "type": "tuple[]"
                    }
                ],
                "name": "transformERC20",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "_transformERC20((address,address,address,uint256,uint256,(uint32,bytes)[],bytes32,bytes))": {
                    "details": "Internal version of `transformERC20()`. Only callable from within.",
                    "params": {
                        "args": "A `TransformERC20Args` struct."
                    },
                    "returns": {
                        "outputTokenAmount": "The amount of `outputToken` received by the taker."
                    }
                },
                "createTransformWallet()": {
                    "details": "Deploy a new wallet instance and replace the current one with it.      Useful if we somehow break the current wallet instance.      Only callable by the owner.",
                    "returns": {
                        "wallet": "The new wallet instance."
                    }
                },
                "getQuoteSigner()": {
                    "details": "Return the optional signer for `transformERC20()` calldata.",
                    "returns": {
                        "signer": "The signer address."
                    }
                },
                "getTransformWallet()": {
                    "details": "Return the current wallet instance that will serve as the execution      context for transformations.",
                    "returns": {
                        "wallet": "The wallet instance."
                    }
                },
                "getTransformerDeployer()": {
                    "details": "Return the allowed deployer for transformers.",
                    "returns": {
                        "deployer": "The transform deployer address."
                    }
                },
                "migrate(address)": {
                    "details": "Initialize and register this feature.      Should be delegatecalled by `Migrate.migrate()`.",
                    "params": {
                        "transformerDeployer": "The trusted deployer for transformers."
                    },
                    "returns": {
                        "success": "`LibMigrate.SUCCESS` on success."
                    }
                },
                "setQuoteSigner(address)": {
                    "details": "Replace the optional signer for `transformERC20()` calldata.      Only callable by the owner.",
                    "params": {
                        "quoteSigner": "The address of the new calldata signer."
                    }
                },
                "setTransformerDeployer(address)": {
                    "details": "Replace the allowed deployer for transformers.      Only callable by the owner.",
                    "params": {
                        "transformerDeployer": "The address of the trusted deployer for transformers."
                    }
                },
                "transformERC20(address,address,uint256,uint256,(uint32,bytes)[])": {
                    "details": "Executes a series of transformations to convert an ERC20 `inputToken`      to an ERC20 `outputToken`.",
                    "params": {
                        "inputToken": "The token being provided by the sender.        If `0xeee...`, ETH is implied and should be provided with the call.`",
                        "inputTokenAmount": "The amount of `inputToken` to take from the sender.        If set to `uint256(-1)`, the entire spendable balance of the taker        will be solt.",
                        "minOutputTokenAmount": "The minimum amount of `outputToken` the sender        must receive for the entire transformation to succeed. If set to zero,        the minimum output token transfer will not be asserted.",
                        "outputToken": "The token to be acquired by the sender.        `0xeee...` implies ETH.",
                        "transformations": "The transformations to execute on the token balance(s)        in sequence."
                    },
                    "returns": {
                        "outputTokenAmount": "The amount of `outputToken` received by the sender."
                    }
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x60c060405261001260016002600061002e565b60a05234801561002157600080fd5b503060601b608052610060565b6bffffffff0000000000000000604084901b1667ffffffff00000000602084901b161763ffffffff8216179392505050565b60805160601c60a051613b0762000087600039806102065250806112855250613b076000f3fe6080604052600436106100bc5760003560e01c80636ae4b4f711610074578063c853c9691161004e578063c853c969146101af578063ce5494bb146101c2578063f028e9be146101ef576100bc565b80636ae4b4f71461015857806387c964191461017a5780639f1ec78b1461019a576100bc565b8063415565b0116100a5578063415565b01461010e5780634d54cdb61461012157806356ce180a14610136576100bc565b8063031b905c146100c1578063287b071b146100ec575b600080fd5b3480156100cd57600080fd5b506100d6610204565b6040516100e39190612cee565b60405180910390f35b3480156100f857600080fd5b50610101610228565b6040516100e391906127e6565b6100d661011c3660046124f9565b610355565b34801561012d57600080fd5b5061010161042e565b34801561014257600080fd5b5061015661015136600461239d565b610457565b005b34801561016457600080fd5b5061016d61058e565b6040516100e39190612c2a565b34801561018657600080fd5b5061015661019536600461239d565b6105c7565b3480156101a657600080fd5b506101016106f3565b6100d66101bd36600461256d565b61071c565b3480156101ce57600080fd5b506101e26101dd36600461239d565b610aea565b6040516100e39190612b4e565b3480156101fb57600080fd5b50610101610dde565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000803073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561027157600080fd5b505afa158015610285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a991906123b9565b90503373ffffffffffffffffffffffffffffffffffffffff8216146102da576102da6102d53383610e04565b610ec0565b506040516102e790612132565b604051809103906000f080158015610303573d6000803e3d6000fd5b5090508061030f610ec8565b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905590565b600080606061039a6000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ed592505050565b915091506104226040518061010001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff16815260200188815260200187815260200186815260200184815260200183815250610fcf565b98975050505050505050565b6000610438610ec8565b6001015473ffffffffffffffffffffffffffffffffffffffff16905090565b60003073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561049f57600080fd5b505afa1580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d791906123b9565b90503373ffffffffffffffffffffffffffffffffffffffff821614610503576105036102d53383610e04565b508061050d610ec8565b60020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790556040517ff5550c5eea19b48ac6eb5f03abdc4f59c0a60697abb3d973cd68669703b5c8b9906105839083906127e6565b60405180910390a150565b6040518060400160405280600e81526020017f5472616e73666f726d455243323000000000000000000000000000000000000081525081565b60003073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561060f57600080fd5b505afa158015610623573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064791906123b9565b90503373ffffffffffffffffffffffffffffffffffffffff821614610673576106736102d53383610e04565b508061067d610ec8565b60010180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790556040517ffd45604abad79c16e23348a137ed8292661be1b8eba6e4806ebed6833b1c046a906105839083906127e6565b60006106fd610ec8565b6002015473ffffffffffffffffffffffffffffffffffffffff16905090565b60003461029a1415610763576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075a90612c3d565b60405180910390fd5b34610309141561087457604080516101408101825260008082526020808301829052828401829052606083018290526080830182905260a083018290528351908101845281815260c083015260e08201819052610100820181905261012082015290517f9b0518180000000000000000000000000000000000000000000000000000000081523091639b051818916107fe9190600401612c74565b600060405180830381600087803b15801561081857600080fd5b505af115801561082c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261087291908101906124be565b505b346103781415610a7757604080516001808252818301909252606091816020015b61089d61213f565b81526020019060019003908161089557505060408051600180825281830190925291925060609190602082015b60608152602001906001900390816108ca579050509050604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160405180602001604052806000815250815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152508260008151811061098e57fe5b602002602001018190525060405180602001604052806000815250816000815181106109b657fe5b60209081029190910101526040517f769250ea000000000000000000000000000000000000000000000000000000008152309063769250ea906109ff9085908590600401612a3c565b600060405180830381600087803b158015610a1957600080fd5b505af1158015610a2d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a7391908101906123d5565b5050505b7fc21a8c994e961f7bb11bb948cda495299e92e615bbec18172088c5e1866dd5173334846000015185602001518660400151876060015188608001518960a001518a60c001518b60e00151604051610ad89a99989796959493929190612836565b60405180910390a1506105395b919050565b6000610b157f4d54cdb60000000000000000000000000000000000000000000000000000000061124f565b610b3e7f287b071b0000000000000000000000000000000000000000000000000000000061124f565b610b677ff028e9be0000000000000000000000000000000000000000000000000000000061124f565b610b907f87c964190000000000000000000000000000000000000000000000000000000061124f565b610bb97f56ce180a0000000000000000000000000000000000000000000000000000000061124f565b610be27f9f1ec78b0000000000000000000000000000000000000000000000000000000061124f565b610c0b7f415565b00000000000000000000000000000000000000000000000000000000061124f565b610c347fc853c9690000000000000000000000000000000000000000000000000000000061124f565b600073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1663f028e9be6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9257600080fd5b505afa158015610ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cca91906123b9565b73ffffffffffffffffffffffffffffffffffffffff161415610d68573073ffffffffffffffffffffffffffffffffffffffff1663287b071b6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610d2e57600080fd5b505af1158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6691906123b9565b505b81610d71610ec8565b60010180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055507f2c64c5ef00000000000000000000000000000000000000000000000000000000919050565b6000610de8610ec8565b5473ffffffffffffffffffffffffffffffffffffffff16905090565b60607f1de45ad18e8a4484220a3ca14f4d977641addbaba5a344b1384dc2aa78a2e34d8383604051602401610e3a929190612940565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290505b92915050565b805160208201fd5b600080610eba60046112e2565b60006060604683511080610f5957508251610f139084907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffba016112fd565b7fffffffff00000000000000000000000000000000000000000000000000000000167ff86d1d920000000000000000000000000000000000000000000000000000000014155b15610f6c57825160208401209150610fca565b82517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffba810160208501209250610fc79084907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbe810190611349565b90505b915091565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260600151141561109457602082015182516040517f496f471e000000000000000000000000000000000000000000000000000000008152309263496f471e9261103e92600401612940565b60206040518083038186803b15801561105657600080fd5b505afa15801561106a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108e9190612653565b60608301525b61109c6121d4565b6110a4610dde565b73ffffffffffffffffffffffffffffffffffffffff1681526110c461042e565b73ffffffffffffffffffffffffffffffffffffffff166020820152604083015183516110f091906113e7565b6040820152602083015183518251606086015161110f939291906114b7565b60006111238460c001518560e001516115a2565b905060005b8460a001515181101561116d5761116583600001518660a00151838151811061114d57fe5b60200260200101518560200151886000015186611688565b600101611128565b5050611181836040015184600001516113e7565b60608201819052604082015111156111ae576111ae6102d5846040015183606001518460400151036118b1565b604081015160608201516111c1916118e7565b915082608001518210156111e5576111e56102d58460400151848660800151611906565b826000015173ffffffffffffffffffffffffffffffffffffffff167f0f6672f78a59ba8e5e5b5d38df3ebc67f3c792e2c9259b8d97d7f00dd78ba1b3846020015185604001518660600151866040516112419493929190612967565b60405180910390a250919050565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081523090636eb224cb906112ad9084907f000000000000000000000000000000000000000000000000000000000000000090600401612b7b565b600060405180830381600087803b1580156112c757600080fd5b505af11580156112db573d6000803e3d6000fd5b5050505050565b600060808260078111156112f257fe5b600101901b92915050565b6000816004018351101561131e5761131e6102d560038551856004016119c4565b5001602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b606081831115611362576113626102d5600085856119c4565b835182111561137b5761137b6102d560018487516119c4565b82820367ffffffffffffffff8111801561139457600080fd5b506040519080825280601f01601f1916602001820160405280156113bf576020820181803683370190505b5090506113e06113ce826119e3565b846113d8876119e3565b0183516119e9565b9392505050565b60006113f283611aca565b15611415575073ffffffffffffffffffffffffffffffffffffffff811631610eba565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906370a08231906114679085906004016127e6565b60206040518083038186803b15801561147f57600080fd5b505afa158015611493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e09190612653565b34156115015760405173ffffffffffffffffffffffffffffffffffffffff8316903480156108fc02916000818181858888f193505050501580156114ff573d6000803e3d6000fd5b505b61150a84611aca565b611587576040517f89dd02e700000000000000000000000000000000000000000000000000000000815230906389dd02e790611550908790879087908790600401612bc3565b600060405180830381600087803b15801561156a57600080fd5b505af115801561157e573d6000803e3d6000fd5b5050505061159c565b8034101561159c5761159c6102d53483611afc565b50505050565b6000806115ad6106f3565b905073ffffffffffffffffffffffffffffffffffffffff81166115d35783915050610eba565b82516115e3575060009050610eba565b6040517f8171c4070000000000000000000000000000000000000000000000000000000081523090638171c4079061162390879085908890600401612b10565b60206040518083038186803b15801561163b57600080fd5b505afa15801561164f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611673919061245e565b156116815783915050610eba565b5092915050565b6000611698848660000151611b32565b905060608673ffffffffffffffffffffffffffffffffffffffff1663b68df16d8363df9aa1ee60e01b60405180608001604052808881526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018b602001518152506040516024016117229190612c99565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e085901b90921682526117b39291600401612807565b600060405180830381600087803b1580156117cd57600080fd5b505af11580156117e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261182791908101906124be565b905080516020141580611891575080517f13c9929e000000000000000000000000000000000000000000000000000000009061186c908301602090810190840161247e565b7fffffffff000000000000000000000000000000000000000000000000000000001614155b156118a8576118a86102d583886020015184611ba1565b50505050505050565b60607f3ea25a3cae94e681748e39876b75ce362a9159c4618787bc1250e3d9f9c439108383604051602401610e3a9291906129e8565b600082821115611900576119006102d560028585611bd9565b50900390565b60607f990174d2378c7614a3e4722867cea0a803c0cc16ef92c4f5466ed5bc1d3496da84848460405160240161193e93929190612a0e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b6060632800659560e01b84848460405160240161193e93929190612c1c565b60200190565b6020811015611a30578151835160208390036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199092169116178352611ac5565b82821415611a3d57611ac5565b82821115611a775760208103905080820181840181515b82851015611a6f578451865260209586019590940193611a54565b905250611ac5565b60208103905080820181840183515b81861215611ac057825182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09283019290910190611a86565b855250505b505050565b73ffffffffffffffffffffffffffffffffffffffff811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14919050565b60607f96660ab143a5c6a946233c268494b1026bfca53373c9715e0fe96b3c59c850448383604051602401610e3a929190612cf7565b60006060611b3f83611bf8565b9050805160d50160f81b609460f81b8583604051602001611b639493929190612767565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120949350505050565b60607ff21e5cb42b911ca6b3898f8618760aa7d84fe5d43a7a5ad89aa791c66cafe41384848460405160240161193e9392919061299d565b606063e946c1bb60e01b84848460405160240161193e93929190612bfa565b606063ffffffff8216611c6a5760408051600180825281830190925290602082018180368337019050509050608060f81b81600081518110611c3657fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610ae5565b60808263ffffffff161015611ca957604080516001808252818301909252906020820181803683370190505090508160f81b81600081518110611c3657fe5b60ff8263ffffffff1611611d285760408051600280825281830190925290602082018180368337019050509050608160f81b81600081518110611ce857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b81600181518110611c3657fe5b61ffff8263ffffffff1611611e0e5760408051600380825281830190925290602082018180368337019050509050608260f81b81600081518110611d6857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060f084901b169082906001908110611dce57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b81600281518110611c3657fe5b62ffffff8263ffffffff1611611f5b5760408051600480825281830190925290602082018180368337019050509050608360f81b81600081518110611e4f57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060e884901b169082906001908110611eb557fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060f084901b169082906002908110611f1b57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b81600381518110611c3657fe5b60408051600580825281830190925290602082018180368337019050509050608460f81b81600081518110611f8c57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060e084901b169082906001908110611ff257fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060e884901b16908290600290811061205857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060f084901b1690829060039081106120be57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b816004815181106120fe57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350919050565b610ce080612df283390190565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b8035610eba81612dba565b600082601f830112612243578081fd5b813561225661225182612d2c565b612d05565b818152915060208083019084810160005b848110156122fe57813587016040807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838c030112156122a657600080fd5b6122af81612d05565b858301356122bc81612ddf565b8152908201359067ffffffffffffffff8211156122d857600080fd5b6122e68b8784860101612309565b81870152865250509282019290820190600101612267565b505050505092915050565b600082601f830112612319578081fd5b813561232761225182612d4c565b915080825283602082850101111561233e57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112612367578081fd5b815161237561225182612d4c565b915080825283602082850101111561238c57600080fd5b611681816020840160208601612d8e565b6000602082840312156123ae578081fd5b81356113e081612dba565b6000602082840312156123ca578081fd5b81516113e081612dba565b600060208083850312156123e7578182fd5b825167ffffffffffffffff8111156123fd578283fd5b8301601f8101851361240d578283fd5b805161241b61225182612d2c565b81815283810190838501865b848110156124505761243e8a888451890101612357565b84529286019290860190600101612427565b509098975050505050505050565b60006020828403121561246f578081fd5b815180151581146113e0578182fd5b60006020828403121561248f578081fd5b81517fffffffff00000000000000000000000000000000000000000000000000000000811681146113e0578182fd5b6000602082840312156124cf578081fd5b815167ffffffffffffffff8111156124e5578182fd5b6124f184828501612357565b949350505050565b600080600080600060a08688031215612510578081fd5b853561251b81612dba565b9450602086013561252b81612dba565b93506040860135925060608601359150608086013567ffffffffffffffff811115612554578182fd5b61256088828901612233565b9150509295509295909350565b60006020828403121561257e578081fd5b813567ffffffffffffffff80821115612595578283fd5b81840191506101008083870312156125ab578384fd5b6125b481612d05565b90506125c08684612228565b81526125cf8660208501612228565b60208201526125e18660408501612228565b6040820152606083013560608201526080830135608082015260a08301358281111561260b578485fd5b61261787828601612233565b60a08301525060c083013560c082015260e083013582811115612638578485fd5b61264487828601612309565b60e08301525095945050505050565b600060208284031215612664578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845261269d816020860160208601612d8e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006101406126df84845161266b565b60208301516126f1602086018261266b565b5060408301516040850152606083015160608501526080830151608085015260a083015160a085015260c08301518160c086015261273182860182612685565b91505060e083015160e0850152610100808401516127518287018261266b565b5050610120928301519390920192909252919050565b60007fff0000000000000000000000000000000000000000000000000000000000000080871683528086166001840152507fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b16600283015282516127d6816016850160208701612d8e565b9190910160160195945050505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff84168252604060208301526124f16040830184612685565b600061014080830173ffffffffffffffffffffffffffffffffffffffff808f16855260208e818701526040828f1681880152828e166060880152828d1660808801528b60a08801528a60c08801528460e08801528394508951925082845261016093508387019450838284028801019350818a01865b8481101561290f578886037ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffea00187528151805163ffffffff1687528401518487018490526128fc84880182612685565b97850197965050908301906001016128ac565b50505050508561010085015283810361012085015261292e8186612685565b9e9d5050505050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff94851681529290931660208301526040820152606081019190915260800190565b600073ffffffffffffffffffffffffffffffffffffffff85168252606060208301526129cc6060830185612685565b82810360408401526129de8185612685565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b60006040820160408352808551808352606085019150602092506060838202860101838801855b83811015612aaf577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888403018552612a9d8383516126cf565b94860194925090850190600101612a63565b50508581038487015280925086519150612ac98282612cee565b925050818382028301848801865b84811015612b01578383038652612aef838351612685565b95870195925090860190600101612ad7565b50909998505050505050505050565b600084825273ffffffffffffffffffffffffffffffffffffffff8416602083015260606040830152612b456060830184612685565b95945050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b6060810160048510612c0857fe5b938152602081019290925260409091015290565b6060810160088510612c0857fe5b6000602082526113e06020830184612685565b60208082526004908201527f4641494c00000000000000000000000000000000000000000000000000000000604082015260600190565b600060408252612c8760408301846126cf565b82810360209384015290815201919050565b60006020825282516020830152602083015173ffffffffffffffffffffffffffffffffffffffff8082166040850152806040860151166060850152505060608301516080808401526124f160a0840182612685565b90815260200190565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715612d2457600080fd5b604052919050565b600067ffffffffffffffff821115612d42578081fd5b5060209081020190565b600067ffffffffffffffff821115612d62578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b83811015612da9578181015183820152602001612d91565b8381111561159c5750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114612ddc57600080fd5b50565b63ffffffff81168114612ddc57600080fdfe60a060405234801561001057600080fd5b5033606081901b608052610c9b6100456000398061027952806102a7528061039952806103d552806104035250610c9b6000f3fe6080604052600436106100745760003560e01c8063b68df16d1161004e578063b68df16d146100f8578063bc197c811461010b578063c0ee0b8a14610138578063f23a6e611461015a5761007b565b806301ffc9a71461008057806354132d78146100b65780638da5cb5b146100d65761007b565b3661007b57005b600080fd5b34801561008c57600080fd5b506100a061009b366004610a3a565b61017a565b6040516100ad9190610bf5565b60405180910390f35b6100c96100c4366004610851565b61025f565b6040516100ad9190610c2d565b3480156100e257600080fd5b506100eb610397565b6040516100ad9190610afa565b6100c96101063660046107fe565b6103bb565b34801561011757600080fd5b5061012b6101263660046108ab565b6104e8565b6040516100ad9190610c00565b34801561014457600080fd5b506101586101533660046109e0565b610515565b005b34801561016657600080fd5b5061012b610175366004610966565b61051b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061020d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000145b8061025957507fffffffff0000000000000000000000000000000000000000000000000000000082167fc0ee0b8a00000000000000000000000000000000000000000000000000000000145b92915050565b60603373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146102d0576102d06102cb337f0000000000000000000000000000000000000000000000000000000000000000610546565b6105e8565b60008573ffffffffffffffffffffffffffffffffffffffff168386866040516102fa929190610aea565b60006040518083038185875af1925050503d8060008114610337576040519150601f19603f3d011682016040523d82523d6000602084013e61033c565b606091505b50925090508061038e5761038e6102cb308888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92508991506105f09050565b50949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60603373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610427576104276102cb337f0000000000000000000000000000000000000000000000000000000000000000610546565b60008473ffffffffffffffffffffffffffffffffffffffff168484604051610450929190610aea565b600060405180830381855af49150503d806000811461048b576040519150601f19603f3d011682016040523d82523d6000602084013e610490565b606091505b5092509050806104e0576104e06102cb308787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508992506106b4915050565b509392505050565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b50505050565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b6060631de45ad160e01b8383604051602401610563929190610b1b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b805160208201fd5b60607f86945816f737646db7f2d6df01602a2212e8c75829f6940913724c13a83a8178868686868660405160240161062c959493929190610b98565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905095945050505050565b60607f61e5a7320b4cf56a2980a427f39e3071c967bf2f77fffcaae20e4467e160afcc858585856040516024016106ee9493929190610b42565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050949350505050565b60008083601f840112610786578182fd5b50813567ffffffffffffffff81111561079d578182fd5b60208301915083602080830285010111156107b757600080fd5b9250929050565b60008083601f8401126107cf578182fd5b50813567ffffffffffffffff8111156107e6578182fd5b6020830191508360208285010111156107b757600080fd5b600080600060408486031215610812578283fd5b833561081d81610c40565b9250602084013567ffffffffffffffff811115610838578283fd5b610844868287016107be565b9497909650939450505050565b60008060008060608587031215610866578081fd5b843561087181610c40565b9350602085013567ffffffffffffffff81111561088c578182fd5b610898878288016107be565b9598909750949560400135949350505050565b60008060008060008060008060a0898b0312156108c6578384fd5b88356108d181610c40565b975060208901356108e181610c40565b9650604089013567ffffffffffffffff808211156108fd578586fd5b6109098c838d01610775565b909850965060608b0135915080821115610921578586fd5b61092d8c838d01610775565b909650945060808b0135915080821115610945578384fd5b506109528b828c016107be565b999c989b5096995094979396929594505050565b60008060008060008060a0878903121561097e578182fd5b863561098981610c40565b9550602087013561099981610c40565b94506040870135935060608701359250608087013567ffffffffffffffff8111156109c2578283fd5b6109ce89828a016107be565b979a9699509497509295939492505050565b600080600080606085870312156109f5578384fd5b8435610a0081610c40565b935060208501359250604085013567ffffffffffffffff811115610a22578283fd5b610a2e878288016107be565b95989497509550505050565b600060208284031215610a4b578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a7a578182fd5b9392505050565b60008151808452815b81811015610aa657602081850181015186830182015201610a8a565b81811115610ab75782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000828483379101908152919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525060806040830152610b7b6080830185610a81565b8281036060840152610b8d8185610a81565b979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525060a06040830152610bd160a0830186610a81565b8460608401528281036080840152610be98185610a81565b98975050505050505050565b901515815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b600060208252610a7a6020830184610a81565b73ffffffffffffffffffffffffffffffffffffffff81168114610c6257600080fd5b5056fea26469706673582212202693caafd0beeadf9d6f42f9dedf3503687e8f05a3baee4ec4d8860b835633e864736f6c634300060c0033a2646970667358221220c9a0bb7159e33f66d5428a727f38939ec0c2dd45cbba3e7bffcd06b17c7d67b064736f6c634300060c0033",
                "opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE PUSH2 0x12 PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x2E JUMP JUMPDEST PUSH1 0xA0 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP ADDRESS PUSH1 0x60 SHL PUSH1 0x80 MSTORE PUSH2 0x60 JUMP JUMPDEST PUSH12 0xFFFFFFFF0000000000000000 PUSH1 0x40 DUP5 SWAP1 SHL AND PUSH8 0xFFFFFFFF00000000 PUSH1 0x20 DUP5 SWAP1 SHL AND OR PUSH4 0xFFFFFFFF DUP3 AND OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH2 0x3B07 PUSH3 0x87 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x206 MSTORE POP DUP1 PUSH2 0x1285 MSTORE POP PUSH2 0x3B07 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBC JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6AE4B4F7 GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xC853C969 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xC853C969 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0xCE5494BB EQ PUSH2 0x1C2 JUMPI DUP1 PUSH4 0xF028E9BE EQ PUSH2 0x1EF JUMPI PUSH2 0xBC JUMP JUMPDEST DUP1 PUSH4 0x6AE4B4F7 EQ PUSH2 0x158 JUMPI DUP1 PUSH4 0x87C96419 EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0x9F1EC78B EQ PUSH2 0x19A JUMPI PUSH2 0xBC JUMP JUMPDEST DUP1 PUSH4 0x415565B0 GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0x415565B0 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x4D54CDB6 EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x56CE180A EQ PUSH2 0x136 JUMPI PUSH2 0xBC JUMP JUMPDEST DUP1 PUSH4 0x31B905C EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x287B071B EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x204 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x2CEE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x101 PUSH2 0x228 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x27E6 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x24F9 JUMP JUMPDEST PUSH2 0x355 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x101 PUSH2 0x42E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x156 PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0x239D JUMP JUMPDEST PUSH2 0x457 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16D PUSH2 0x58E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x2C2A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x156 PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x239D JUMP JUMPDEST PUSH2 0x5C7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x101 PUSH2 0x6F3 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x1BD CALLDATASIZE PUSH1 0x4 PUSH2 0x256D JUMP JUMPDEST PUSH2 0x71C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E2 PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0x239D JUMP JUMPDEST PUSH2 0xAEA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x2B4E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x101 PUSH2 0xDDE JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x271 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x285 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A9 SWAP2 SWAP1 PUSH2 0x23B9 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ PUSH2 0x2DA JUMPI PUSH2 0x2DA PUSH2 0x2D5 CALLER DUP4 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0xEC0 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x2E7 SWAP1 PUSH2 0x2132 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x303 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x30F PUSH2 0xEC8 JUMP JUMPDEST DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x39A PUSH1 0x0 CALLDATASIZE DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xED5 SWAP3 POP POP POP JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x422 PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP PUSH2 0xFCF JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x438 PUSH2 0xEC8 JUMP JUMPDEST PUSH1 0x1 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x49F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4D7 SWAP2 SWAP1 PUSH2 0x23B9 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ PUSH2 0x503 JUMPI PUSH2 0x503 PUSH2 0x2D5 CALLER DUP4 PUSH2 0xE04 JUMP JUMPDEST POP DUP1 PUSH2 0x50D PUSH2 0xEC8 JUMP JUMPDEST PUSH1 0x2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xF5550C5EEA19B48AC6EB5F03ABDC4F59C0A60697ABB3D973CD68669703B5C8B9 SWAP1 PUSH2 0x583 SWAP1 DUP4 SWAP1 PUSH2 0x27E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5472616E73666F726D4552433230000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x60F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x623 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x647 SWAP2 SWAP1 PUSH2 0x23B9 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ PUSH2 0x673 JUMPI PUSH2 0x673 PUSH2 0x2D5 CALLER DUP4 PUSH2 0xE04 JUMP JUMPDEST POP DUP1 PUSH2 0x67D PUSH2 0xEC8 JUMP JUMPDEST PUSH1 0x1 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xFD45604ABAD79C16E23348A137ED8292661BE1B8EBA6E4806EBED6833B1C046A SWAP1 PUSH2 0x583 SWAP1 DUP4 SWAP1 PUSH2 0x27E6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6FD PUSH2 0xEC8 JUMP JUMPDEST PUSH1 0x2 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLVALUE PUSH2 0x29A EQ ISZERO PUSH2 0x763 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x75A SWAP1 PUSH2 0x2C3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x309 EQ ISZERO PUSH2 0x874 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH2 0x140 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP3 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD SWAP1 DUP2 ADD DUP5 MSTORE DUP2 DUP2 MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x120 DUP3 ADD MSTORE SWAP1 MLOAD PUSH32 0x9B05181800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP2 PUSH4 0x9B051818 SWAP2 PUSH2 0x7FE SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x2C74 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x818 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x82C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x872 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x24BE JUMP JUMPDEST POP JUMPDEST CALLVALUE PUSH2 0x378 EQ ISZERO PUSH2 0xA77 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x89D PUSH2 0x213F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x895 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x60 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x8CA JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x98E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9B6 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x40 MLOAD PUSH32 0x769250EA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x769250EA SWAP1 PUSH2 0x9FF SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A3C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA2D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xA73 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x23D5 JUMP JUMPDEST POP POP POP JUMPDEST PUSH32 0xC21A8C994E961F7BB11BB948CDA495299E92E615BBEC18172088C5E1866DD517 CALLER CALLVALUE DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP9 PUSH1 0x80 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD DUP11 PUSH1 0xC0 ADD MLOAD DUP12 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0xAD8 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2836 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH2 0x539 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB15 PUSH32 0x4D54CDB600000000000000000000000000000000000000000000000000000000 PUSH2 0x124F JUMP JUMPDEST PUSH2 0xB3E PUSH32 0x287B071B00000000000000000000000000000000000000000000000000000000 PUSH2 0x124F JUMP JUMPDEST PUSH2 0xB67 PUSH32 0xF028E9BE00000000000000000000000000000000000000000000000000000000 PUSH2 0x124F JUMP JUMPDEST PUSH2 0xB90 PUSH32 0x87C9641900000000000000000000000000000000000000000000000000000000 PUSH2 0x124F JUMP JUMPDEST PUSH2 0xBB9 PUSH32 0x56CE180A00000000000000000000000000000000000000000000000000000000 PUSH2 0x124F JUMP JUMPDEST PUSH2 0xBE2 PUSH32 0x9F1EC78B00000000000000000000000000000000000000000000000000000000 PUSH2 0x124F JUMP JUMPDEST PUSH2 0xC0B PUSH32 0x415565B000000000000000000000000000000000000000000000000000000000 PUSH2 0x124F JUMP JUMPDEST PUSH2 0xC34 PUSH32 0xC853C96900000000000000000000000000000000000000000000000000000000 PUSH2 0x124F JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF028E9BE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCA6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCCA SWAP2 SWAP1 PUSH2 0x23B9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD68 JUMPI ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x287B071B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD66 SWAP2 SWAP1 PUSH2 0x23B9 JUMP JUMPDEST POP JUMPDEST DUP2 PUSH2 0xD71 PUSH2 0xEC8 JUMP JUMPDEST PUSH1 0x1 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH32 0x2C64C5EF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDE8 PUSH2 0xEC8 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH32 0x1DE45AD18E8A4484220A3CA14F4D977641ADDBABA5A344B1384DC2AA78A2E34D DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xE3A SWAP3 SWAP2 SWAP1 PUSH2 0x2940 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xEBA PUSH1 0x4 PUSH2 0x12E2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x46 DUP4 MLOAD LT DUP1 PUSH2 0xF59 JUMPI POP DUP3 MLOAD PUSH2 0xF13 SWAP1 DUP5 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBA ADD PUSH2 0x12FD JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xF86D1D9200000000000000000000000000000000000000000000000000000000 EQ ISZERO JUMPDEST ISZERO PUSH2 0xF6C JUMPI DUP3 MLOAD PUSH1 0x20 DUP5 ADD KECCAK256 SWAP2 POP PUSH2 0xFCA JUMP JUMPDEST DUP3 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBA DUP2 ADD PUSH1 0x20 DUP6 ADD KECCAK256 SWAP3 POP PUSH2 0xFC7 SWAP1 DUP5 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBE DUP2 ADD SWAP1 PUSH2 0x1349 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x60 ADD MLOAD EQ ISZERO PUSH2 0x1094 JUMPI PUSH1 0x20 DUP3 ADD MLOAD DUP3 MLOAD PUSH1 0x40 MLOAD PUSH32 0x496F471E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP3 PUSH4 0x496F471E SWAP3 PUSH2 0x103E SWAP3 PUSH1 0x4 ADD PUSH2 0x2940 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1056 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x106A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x108E SWAP2 SWAP1 PUSH2 0x2653 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE JUMPDEST PUSH2 0x109C PUSH2 0x21D4 JUMP JUMPDEST PUSH2 0x10A4 PUSH2 0xDDE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH2 0x10C4 PUSH2 0x42E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP4 MLOAD PUSH2 0x10F0 SWAP2 SWAP1 PUSH2 0x13E7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD DUP4 MLOAD DUP3 MLOAD PUSH1 0x60 DUP7 ADD MLOAD PUSH2 0x110F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x14B7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1123 DUP5 PUSH1 0xC0 ADD MLOAD DUP6 PUSH1 0xE0 ADD MLOAD PUSH2 0x15A2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 PUSH1 0xA0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x116D JUMPI PUSH2 0x1165 DUP4 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0xA0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x114D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP9 PUSH1 0x0 ADD MLOAD DUP7 PUSH2 0x1688 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1128 JUMP JUMPDEST POP POP PUSH2 0x1181 DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x13E7 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD MLOAD GT ISZERO PUSH2 0x11AE JUMPI PUSH2 0x11AE PUSH2 0x2D5 DUP5 PUSH1 0x40 ADD MLOAD DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD SUB PUSH2 0x18B1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x11C1 SWAP2 PUSH2 0x18E7 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x80 ADD MLOAD DUP3 LT ISZERO PUSH2 0x11E5 JUMPI PUSH2 0x11E5 PUSH2 0x2D5 DUP5 PUSH1 0x40 ADD MLOAD DUP5 DUP7 PUSH1 0x80 ADD MLOAD PUSH2 0x1906 JUMP JUMPDEST DUP3 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF6672F78A59BA8E5E5B5D38DF3EBC67F3C792E2C9259B8D97D7F00DD78BA1B3 DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x40 MLOAD PUSH2 0x1241 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2967 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x6EB224CB SWAP1 PUSH2 0x12AD SWAP1 DUP5 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x2B7B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x12F2 JUMPI INVALID JUMPDEST PUSH1 0x1 ADD SWAP1 SHL SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0x131E JUMPI PUSH2 0x131E PUSH2 0x2D5 PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0x19C4 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP4 GT ISZERO PUSH2 0x1362 JUMPI PUSH2 0x1362 PUSH2 0x2D5 PUSH1 0x0 DUP6 DUP6 PUSH2 0x19C4 JUMP JUMPDEST DUP4 MLOAD DUP3 GT ISZERO PUSH2 0x137B JUMPI PUSH2 0x137B PUSH2 0x2D5 PUSH1 0x1 DUP5 DUP8 MLOAD PUSH2 0x19C4 JUMP JUMPDEST DUP3 DUP3 SUB PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1394 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x13BF JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x13E0 PUSH2 0x13CE DUP3 PUSH2 0x19E3 JUMP JUMPDEST DUP5 PUSH2 0x13D8 DUP8 PUSH2 0x19E3 JUMP JUMPDEST ADD DUP4 MLOAD PUSH2 0x19E9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13F2 DUP4 PUSH2 0x1ACA JUMP JUMPDEST ISZERO PUSH2 0x1415 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND BALANCE PUSH2 0xEBA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x1467 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x27E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x147F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1493 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13E0 SWAP2 SWAP1 PUSH2 0x2653 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x1501 JUMPI PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x14FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST PUSH2 0x150A DUP5 PUSH2 0x1ACA JUMP JUMPDEST PUSH2 0x1587 JUMPI PUSH1 0x40 MLOAD PUSH32 0x89DD02E700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x89DD02E7 SWAP1 PUSH2 0x1550 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2BC3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x156A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x157E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x159C JUMP JUMPDEST DUP1 CALLVALUE LT ISZERO PUSH2 0x159C JUMPI PUSH2 0x159C PUSH2 0x2D5 CALLVALUE DUP4 PUSH2 0x1AFC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x15AD PUSH2 0x6F3 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x15D3 JUMPI DUP4 SWAP2 POP POP PUSH2 0xEBA JUMP JUMPDEST DUP3 MLOAD PUSH2 0x15E3 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH2 0xEBA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8171C40700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x8171C407 SWAP1 PUSH2 0x1623 SWAP1 DUP8 SWAP1 DUP6 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2B10 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x163B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x164F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1673 SWAP2 SWAP1 PUSH2 0x245E JUMP JUMPDEST ISZERO PUSH2 0x1681 JUMPI DUP4 SWAP2 POP POP PUSH2 0xEBA JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1698 DUP5 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x1B32 JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB68DF16D DUP4 PUSH4 0xDF9AA1EE PUSH1 0xE0 SHL PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x20 ADD MLOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1722 SWAP2 SWAP1 PUSH2 0x2C99 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP5 DUP6 AND OR SWAP1 MSTORE MLOAD PUSH1 0xE0 DUP6 SWAP1 SHL SWAP1 SWAP3 AND DUP3 MSTORE PUSH2 0x17B3 SWAP3 SWAP2 PUSH1 0x4 ADD PUSH2 0x2807 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x17E1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1827 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x24BE JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x20 EQ ISZERO DUP1 PUSH2 0x1891 JUMPI POP DUP1 MLOAD PUSH32 0x13C9929E00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x186C SWAP1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP1 DUP5 ADD PUSH2 0x247E JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x18A8 JUMPI PUSH2 0x18A8 PUSH2 0x2D5 DUP4 DUP9 PUSH1 0x20 ADD MLOAD DUP5 PUSH2 0x1BA1 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x3EA25A3CAE94E681748E39876B75CE362A9159C4618787BC1250E3D9F9C43910 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xE3A SWAP3 SWAP2 SWAP1 PUSH2 0x29E8 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1900 JUMPI PUSH2 0x1900 PUSH2 0x2D5 PUSH1 0x2 DUP6 DUP6 PUSH2 0x1BD9 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH32 0x990174D2378C7614A3E4722867CEA0A803C0CC16EF92C4F5466ED5BC1D3496DA DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x193E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A0E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x193E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2C1C JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1A30 JUMPI DUP2 MLOAD DUP4 MLOAD PUSH1 0x20 DUP4 SWAP1 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR DUP4 MSTORE PUSH2 0x1AC5 JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0x1A3D JUMPI PUSH2 0x1AC5 JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x1A77 JUMPI PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP2 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x1A6F JUMPI DUP5 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP5 ADD SWAP4 PUSH2 0x1A54 JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x1AC5 JUMP JUMPDEST PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP4 MLOAD JUMPDEST DUP2 DUP7 SLT ISZERO PUSH2 0x1AC0 JUMPI DUP3 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1A86 JUMP JUMPDEST DUP6 MSTORE POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x96660AB143A5C6A946233C268494B1026BFCA53373C9715E0FE96B3C59C85044 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xE3A SWAP3 SWAP2 SWAP1 PUSH2 0x2CF7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x1B3F DUP4 PUSH2 0x1BF8 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0xD5 ADD PUSH1 0xF8 SHL PUSH1 0x94 PUSH1 0xF8 SHL DUP6 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1B63 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2767 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0xF21E5CB42B911CA6B3898F8618760AA7D84FE5D43A7A5AD89AA791C66CAFE413 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x193E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x299D JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x193E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2BFA JUMP JUMPDEST PUSH1 0x60 PUSH4 0xFFFFFFFF DUP3 AND PUSH2 0x1C6A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x80 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1C36 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0xAE5 JUMP JUMPDEST PUSH1 0x80 DUP3 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0x1CA9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1C36 JUMPI INVALID JUMPDEST PUSH1 0xFF DUP3 PUSH4 0xFFFFFFFF AND GT PUSH2 0x1D28 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x81 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1CE8 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1C36 JUMPI INVALID JUMPDEST PUSH2 0xFFFF DUP3 PUSH4 0xFFFFFFFF AND GT PUSH2 0x1E0E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x82 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1D68 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xF0 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH2 0x1DCE JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x1C36 JUMPI INVALID JUMPDEST PUSH3 0xFFFFFF DUP3 PUSH4 0xFFFFFFFF AND GT PUSH2 0x1F5B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x83 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1E4F JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xE8 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH2 0x1EB5 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xF0 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x2 SWAP1 DUP2 LT PUSH2 0x1F1B JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH2 0x1C36 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x5 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x84 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1F8C JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH2 0x1FF2 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xE8 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x2 SWAP1 DUP2 LT PUSH2 0x2058 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xF0 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x3 SWAP1 DUP2 LT PUSH2 0x20BE JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x4 DUP2 MLOAD DUP2 LT PUSH2 0x20FE JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCE0 DUP1 PUSH2 0x2DF2 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xEBA DUP2 PUSH2 0x2DBA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2243 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2256 PUSH2 0x2251 DUP3 PUSH2 0x2D2C JUMP JUMPDEST PUSH2 0x2D05 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x22FE JUMPI DUP2 CALLDATALOAD DUP8 ADD PUSH1 0x40 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP13 SUB ADD SLT ISZERO PUSH2 0x22A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22AF DUP2 PUSH2 0x2D05 JUMP JUMPDEST DUP6 DUP4 ADD CALLDATALOAD PUSH2 0x22BC DUP2 PUSH2 0x2DDF JUMP JUMPDEST DUP2 MSTORE SWAP1 DUP3 ADD CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x22D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22E6 DUP12 DUP8 DUP5 DUP7 ADD ADD PUSH2 0x2309 JUMP JUMPDEST DUP2 DUP8 ADD MSTORE DUP7 MSTORE POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2267 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2319 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2327 PUSH2 0x2251 DUP3 PUSH2 0x2D4C JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x233E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2367 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2375 PUSH2 0x2251 DUP3 PUSH2 0x2D4C JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x238C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1681 DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2D8E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23AE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x13E0 DUP2 PUSH2 0x2DBA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23CA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x13E0 DUP2 PUSH2 0x2DBA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23E7 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23FD JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x240D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x241B PUSH2 0x2251 DUP3 PUSH2 0x2D2C JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP7 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2450 JUMPI PUSH2 0x243E DUP11 DUP9 DUP5 MLOAD DUP10 ADD ADD PUSH2 0x2357 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP7 ADD SWAP3 SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2427 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x246F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x13E0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x248F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x13E0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24CF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24E5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x24F1 DUP5 DUP3 DUP6 ADD PUSH2 0x2357 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2510 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x251B DUP2 PUSH2 0x2DBA JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x252B DUP2 PUSH2 0x2DBA JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2554 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2560 DUP9 DUP3 DUP10 ADD PUSH2 0x2233 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x257E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2595 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP PUSH2 0x100 DUP1 DUP4 DUP8 SUB SLT ISZERO PUSH2 0x25AB JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x25B4 DUP2 PUSH2 0x2D05 JUMP JUMPDEST SWAP1 POP PUSH2 0x25C0 DUP7 DUP5 PUSH2 0x2228 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x25CF DUP7 PUSH1 0x20 DUP6 ADD PUSH2 0x2228 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x25E1 DUP7 PUSH1 0x40 DUP6 ADD PUSH2 0x2228 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x260B JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x2617 DUP8 DUP3 DUP7 ADD PUSH2 0x2233 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 DUP4 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x2638 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x2644 DUP8 DUP3 DUP7 ADD PUSH2 0x2309 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2664 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x269D DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2D8E JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 PUSH2 0x26DF DUP5 DUP5 MLOAD PUSH2 0x266B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x26F1 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x266B JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD DUP2 PUSH1 0xC0 DUP7 ADD MSTORE PUSH2 0x2731 DUP3 DUP7 ADD DUP3 PUSH2 0x2685 JUMP JUMPDEST SWAP2 POP POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD PUSH2 0x2751 DUP3 DUP8 ADD DUP3 PUSH2 0x266B JUMP JUMPDEST POP POP PUSH2 0x120 SWAP3 DUP4 ADD MLOAD SWAP4 SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x1 DUP5 ADD MSTORE POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP5 PUSH1 0x60 SHL AND PUSH1 0x2 DUP4 ADD MSTORE DUP3 MLOAD PUSH2 0x27D6 DUP2 PUSH1 0x16 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2D8E JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x16 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x24F1 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2685 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 DUP1 DUP4 ADD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP16 AND DUP6 MSTORE PUSH1 0x20 DUP15 DUP2 DUP8 ADD MSTORE PUSH1 0x40 DUP3 DUP16 AND DUP2 DUP9 ADD MSTORE DUP3 DUP15 AND PUSH1 0x60 DUP9 ADD MSTORE DUP3 DUP14 AND PUSH1 0x80 DUP9 ADD MSTORE DUP12 PUSH1 0xA0 DUP9 ADD MSTORE DUP11 PUSH1 0xC0 DUP9 ADD MSTORE DUP5 PUSH1 0xE0 DUP9 ADD MSTORE DUP4 SWAP5 POP DUP10 MLOAD SWAP3 POP DUP3 DUP5 MSTORE PUSH2 0x160 SWAP4 POP DUP4 DUP8 ADD SWAP5 POP DUP4 DUP3 DUP5 MUL DUP9 ADD ADD SWAP4 POP DUP2 DUP11 ADD DUP7 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x290F JUMPI DUP9 DUP7 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEA0 ADD DUP8 MSTORE DUP2 MLOAD DUP1 MLOAD PUSH4 0xFFFFFFFF AND DUP8 MSTORE DUP5 ADD MLOAD DUP5 DUP8 ADD DUP5 SWAP1 MSTORE PUSH2 0x28FC DUP5 DUP9 ADD DUP3 PUSH2 0x2685 JUMP JUMPDEST SWAP8 DUP6 ADD SWAP8 SWAP7 POP POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x28AC JUMP JUMPDEST POP POP POP POP POP DUP6 PUSH2 0x100 DUP6 ADD MSTORE DUP4 DUP2 SUB PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x292E DUP2 DUP7 PUSH2 0x2685 JUMP JUMPDEST SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x29CC PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x2685 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x29DE DUP2 DUP6 PUSH2 0x2685 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD PUSH1 0x40 DUP4 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x60 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP9 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2AAF JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0 DUP9 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x2A9D DUP4 DUP4 MLOAD PUSH2 0x26CF JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2A63 JUMP JUMPDEST POP POP DUP6 DUP2 SUB DUP5 DUP8 ADD MSTORE DUP1 SWAP3 POP DUP7 MLOAD SWAP2 POP PUSH2 0x2AC9 DUP3 DUP3 PUSH2 0x2CEE JUMP JUMPDEST SWAP3 POP POP DUP2 DUP4 DUP3 MUL DUP4 ADD DUP5 DUP9 ADD DUP7 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2B01 JUMPI DUP4 DUP4 SUB DUP7 MSTORE PUSH2 0x2AEF DUP4 DUP4 MLOAD PUSH2 0x2685 JUMP JUMPDEST SWAP6 DUP8 ADD SWAP6 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2AD7 JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2B45 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2685 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x2C08 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x2C08 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x13E0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2685 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP1 DUP3 ADD MSTORE PUSH32 0x4641494C00000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x2C87 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x26CF JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 SWAP4 DUP5 ADD MSTORE SWAP1 DUP2 MSTORE ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x40 DUP6 ADD MSTORE DUP1 PUSH1 0x40 DUP7 ADD MLOAD AND PUSH1 0x60 DUP6 ADD MSTORE POP POP PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x80 DUP1 DUP5 ADD MSTORE PUSH2 0x24F1 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x2685 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2D24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2D42 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2D62 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2DA9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2D91 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x159C JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2DDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2DDC JUMPI PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x60 DUP2 SWAP1 SHL PUSH1 0x80 MSTORE PUSH2 0xC9B PUSH2 0x45 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x279 MSTORE DUP1 PUSH2 0x2A7 MSTORE DUP1 PUSH2 0x399 MSTORE DUP1 PUSH2 0x3D5 MSTORE DUP1 PUSH2 0x403 MSTORE POP PUSH2 0xC9B PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x74 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB68DF16D GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xB68DF16D EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x10B JUMPI DUP1 PUSH4 0xC0EE0B8A EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x15A JUMPI PUSH2 0x7B JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x80 JUMPI DUP1 PUSH4 0x54132D78 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xD6 JUMPI PUSH2 0x7B JUMP JUMPDEST CALLDATASIZE PUSH2 0x7B JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0xA3A JUMP JUMPDEST PUSH2 0x17A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0xBF5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC9 PUSH2 0xC4 CALLDATASIZE PUSH1 0x4 PUSH2 0x851 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0xC2D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEB PUSH2 0x397 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0xAFA JUMP JUMPDEST PUSH2 0xC9 PUSH2 0x106 CALLDATASIZE PUSH1 0x4 PUSH2 0x7FE JUMP JUMPDEST PUSH2 0x3BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x117 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12B PUSH2 0x126 CALLDATASIZE PUSH1 0x4 PUSH2 0x8AB JUMP JUMPDEST PUSH2 0x4E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0xC00 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x158 PUSH2 0x153 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E0 JUMP JUMPDEST PUSH2 0x515 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12B PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x966 JUMP JUMPDEST PUSH2 0x51B JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x20D JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x259 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xC0EE0B8A00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x2D0 JUMPI PUSH2 0x2D0 PUSH2 0x2CB CALLER PUSH32 0x0 PUSH2 0x546 JUMP JUMPDEST PUSH2 0x5E8 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP3 SWAP2 SWAP1 PUSH2 0xAEA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x337 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x33C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP3 POP SWAP1 POP DUP1 PUSH2 0x38E JUMPI PUSH2 0x38E PUSH2 0x2CB ADDRESS DUP9 DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP11 SWAP3 POP DUP10 SWAP2 POP PUSH2 0x5F0 SWAP1 POP JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x60 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x427 JUMPI PUSH2 0x427 PUSH2 0x2CB CALLER PUSH32 0x0 PUSH2 0x546 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x450 SWAP3 SWAP2 SWAP1 PUSH2 0xAEA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x48B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x490 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP3 POP SWAP1 POP DUP1 PUSH2 0x4E0 JUMPI PUSH2 0x4E0 PUSH2 0x2CB ADDRESS DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP10 SWAP3 POP PUSH2 0x6B4 SWAP2 POP POP JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x1DE45AD1 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x563 SWAP3 SWAP2 SWAP1 PUSH2 0xB1B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH32 0x86945816F737646DB7F2D6DF01602A2212E8C75829F6940913724C13A83A8178 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x62C SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB98 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x61E5A7320B4CF56A2980A427F39E3071C967BF2F77FFFCAAE20E4467E160AFCC DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6EE SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB42 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x786 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x79D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x7B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x7CF JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7E6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x7B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x812 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x81D DUP2 PUSH2 0xC40 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x838 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x844 DUP7 DUP3 DUP8 ADD PUSH2 0x7BE JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x866 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x871 DUP2 PUSH2 0xC40 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x88C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x898 DUP8 DUP3 DUP9 ADD PUSH2 0x7BE JUMP JUMPDEST SWAP6 SWAP9 SWAP1 SWAP8 POP SWAP5 SWAP6 PUSH1 0x40 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x8C6 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x8D1 DUP2 PUSH2 0xC40 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x8E1 DUP2 PUSH2 0xC40 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x8FD JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x909 DUP13 DUP4 DUP14 ADD PUSH2 0x775 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x921 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x92D DUP13 DUP4 DUP14 ADD PUSH2 0x775 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x945 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x952 DUP12 DUP3 DUP13 ADD PUSH2 0x7BE JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x97E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x989 DUP2 PUSH2 0xC40 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x999 DUP2 PUSH2 0xC40 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9C2 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9CE DUP10 DUP3 DUP11 ADD PUSH2 0x7BE JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9F5 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0xA00 DUP2 PUSH2 0xC40 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA22 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xA2E DUP8 DUP3 DUP9 ADD PUSH2 0x7BE JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA4B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xA7A JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xAA6 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xA8A JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xAB7 JUMPI DUP3 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xB7B PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0xA81 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0xB8D DUP2 DUP6 PUSH2 0xA81 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xBD1 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0xA81 JUMP JUMPDEST DUP5 PUSH1 0x60 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0xBE9 DUP2 DUP6 PUSH2 0xA81 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0xA7A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xA81 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 SWAP4 0xCA 0xAF 0xD0 0xBE 0xEA 0xDF SWAP14 PUSH16 0x42F9DEDF3503687E8F05A3BAEE4EC4D8 DUP7 SIGNEXTEND DUP4 JUMP CALLER 0xE8 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 LOG0 0xBB PUSH18 0x59E33F66D5428A727F38939EC0C2DD45CBBA RETURNDATACOPY PUSH28 0xFFCD06B17C7D67B064736F6C634300060C0033000000000000000000 ",
                "sourceMap": "748:2615:70:-:0;;;2149:23:33;2164:1;2167;2170;2149:14;:23::i;:::-;2097:75;;748:2615:70;;;;;;;;;-1:-1:-1;1859:4:36;1833:31;;;;748:2615:70;;2611:235:36;2773:20;2791:2;2773:20;;;;2798;2816:2;2798:20;;;;2772:47;2822:17;;;2772:67;2611:235;;;;;:::o;748:2615:70:-;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "4558": [
                        {
                            "length": 32,
                            "start": 518
                        }
                    ],
                    "5430": [
                        {
                            "length": 32,
                            "start": 4741
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x6080604052600436106100bc5760003560e01c80636ae4b4f711610074578063c853c9691161004e578063c853c969146101af578063ce5494bb146101c2578063f028e9be146101ef576100bc565b80636ae4b4f71461015857806387c964191461017a5780639f1ec78b1461019a576100bc565b8063415565b0116100a5578063415565b01461010e5780634d54cdb61461012157806356ce180a14610136576100bc565b8063031b905c146100c1578063287b071b146100ec575b600080fd5b3480156100cd57600080fd5b506100d6610204565b6040516100e39190612cee565b60405180910390f35b3480156100f857600080fd5b50610101610228565b6040516100e391906127e6565b6100d661011c3660046124f9565b610355565b34801561012d57600080fd5b5061010161042e565b34801561014257600080fd5b5061015661015136600461239d565b610457565b005b34801561016457600080fd5b5061016d61058e565b6040516100e39190612c2a565b34801561018657600080fd5b5061015661019536600461239d565b6105c7565b3480156101a657600080fd5b506101016106f3565b6100d66101bd36600461256d565b61071c565b3480156101ce57600080fd5b506101e26101dd36600461239d565b610aea565b6040516100e39190612b4e565b3480156101fb57600080fd5b50610101610dde565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000803073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561027157600080fd5b505afa158015610285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a991906123b9565b90503373ffffffffffffffffffffffffffffffffffffffff8216146102da576102da6102d53383610e04565b610ec0565b506040516102e790612132565b604051809103906000f080158015610303573d6000803e3d6000fd5b5090508061030f610ec8565b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905590565b600080606061039a6000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ed592505050565b915091506104226040518061010001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff16815260200188815260200187815260200186815260200184815260200183815250610fcf565b98975050505050505050565b6000610438610ec8565b6001015473ffffffffffffffffffffffffffffffffffffffff16905090565b60003073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561049f57600080fd5b505afa1580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d791906123b9565b90503373ffffffffffffffffffffffffffffffffffffffff821614610503576105036102d53383610e04565b508061050d610ec8565b60020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790556040517ff5550c5eea19b48ac6eb5f03abdc4f59c0a60697abb3d973cd68669703b5c8b9906105839083906127e6565b60405180910390a150565b6040518060400160405280600e81526020017f5472616e73666f726d455243323000000000000000000000000000000000000081525081565b60003073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561060f57600080fd5b505afa158015610623573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064791906123b9565b90503373ffffffffffffffffffffffffffffffffffffffff821614610673576106736102d53383610e04565b508061067d610ec8565b60010180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790556040517ffd45604abad79c16e23348a137ed8292661be1b8eba6e4806ebed6833b1c046a906105839083906127e6565b60006106fd610ec8565b6002015473ffffffffffffffffffffffffffffffffffffffff16905090565b60003461029a1415610763576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075a90612c3d565b60405180910390fd5b34610309141561087457604080516101408101825260008082526020808301829052828401829052606083018290526080830182905260a083018290528351908101845281815260c083015260e08201819052610100820181905261012082015290517f9b0518180000000000000000000000000000000000000000000000000000000081523091639b051818916107fe9190600401612c74565b600060405180830381600087803b15801561081857600080fd5b505af115801561082c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261087291908101906124be565b505b346103781415610a7757604080516001808252818301909252606091816020015b61089d61213f565b81526020019060019003908161089557505060408051600180825281830190925291925060609190602082015b60608152602001906001900390816108ca579050509050604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160405180602001604052806000815250815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152508260008151811061098e57fe5b602002602001018190525060405180602001604052806000815250816000815181106109b657fe5b60209081029190910101526040517f769250ea000000000000000000000000000000000000000000000000000000008152309063769250ea906109ff9085908590600401612a3c565b600060405180830381600087803b158015610a1957600080fd5b505af1158015610a2d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a7391908101906123d5565b5050505b7fc21a8c994e961f7bb11bb948cda495299e92e615bbec18172088c5e1866dd5173334846000015185602001518660400151876060015188608001518960a001518a60c001518b60e00151604051610ad89a99989796959493929190612836565b60405180910390a1506105395b919050565b6000610b157f4d54cdb60000000000000000000000000000000000000000000000000000000061124f565b610b3e7f287b071b0000000000000000000000000000000000000000000000000000000061124f565b610b677ff028e9be0000000000000000000000000000000000000000000000000000000061124f565b610b907f87c964190000000000000000000000000000000000000000000000000000000061124f565b610bb97f56ce180a0000000000000000000000000000000000000000000000000000000061124f565b610be27f9f1ec78b0000000000000000000000000000000000000000000000000000000061124f565b610c0b7f415565b00000000000000000000000000000000000000000000000000000000061124f565b610c347fc853c9690000000000000000000000000000000000000000000000000000000061124f565b600073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1663f028e9be6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9257600080fd5b505afa158015610ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cca91906123b9565b73ffffffffffffffffffffffffffffffffffffffff161415610d68573073ffffffffffffffffffffffffffffffffffffffff1663287b071b6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610d2e57600080fd5b505af1158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6691906123b9565b505b81610d71610ec8565b60010180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055507f2c64c5ef00000000000000000000000000000000000000000000000000000000919050565b6000610de8610ec8565b5473ffffffffffffffffffffffffffffffffffffffff16905090565b60607f1de45ad18e8a4484220a3ca14f4d977641addbaba5a344b1384dc2aa78a2e34d8383604051602401610e3a929190612940565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290505b92915050565b805160208201fd5b600080610eba60046112e2565b60006060604683511080610f5957508251610f139084907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffba016112fd565b7fffffffff00000000000000000000000000000000000000000000000000000000167ff86d1d920000000000000000000000000000000000000000000000000000000014155b15610f6c57825160208401209150610fca565b82517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffba810160208501209250610fc79084907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbe810190611349565b90505b915091565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260600151141561109457602082015182516040517f496f471e000000000000000000000000000000000000000000000000000000008152309263496f471e9261103e92600401612940565b60206040518083038186803b15801561105657600080fd5b505afa15801561106a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108e9190612653565b60608301525b61109c6121d4565b6110a4610dde565b73ffffffffffffffffffffffffffffffffffffffff1681526110c461042e565b73ffffffffffffffffffffffffffffffffffffffff166020820152604083015183516110f091906113e7565b6040820152602083015183518251606086015161110f939291906114b7565b60006111238460c001518560e001516115a2565b905060005b8460a001515181101561116d5761116583600001518660a00151838151811061114d57fe5b60200260200101518560200151886000015186611688565b600101611128565b5050611181836040015184600001516113e7565b60608201819052604082015111156111ae576111ae6102d5846040015183606001518460400151036118b1565b604081015160608201516111c1916118e7565b915082608001518210156111e5576111e56102d58460400151848660800151611906565b826000015173ffffffffffffffffffffffffffffffffffffffff167f0f6672f78a59ba8e5e5b5d38df3ebc67f3c792e2c9259b8d97d7f00dd78ba1b3846020015185604001518660600151866040516112419493929190612967565b60405180910390a250919050565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081523090636eb224cb906112ad9084907f000000000000000000000000000000000000000000000000000000000000000090600401612b7b565b600060405180830381600087803b1580156112c757600080fd5b505af11580156112db573d6000803e3d6000fd5b5050505050565b600060808260078111156112f257fe5b600101901b92915050565b6000816004018351101561131e5761131e6102d560038551856004016119c4565b5001602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b606081831115611362576113626102d5600085856119c4565b835182111561137b5761137b6102d560018487516119c4565b82820367ffffffffffffffff8111801561139457600080fd5b506040519080825280601f01601f1916602001820160405280156113bf576020820181803683370190505b5090506113e06113ce826119e3565b846113d8876119e3565b0183516119e9565b9392505050565b60006113f283611aca565b15611415575073ffffffffffffffffffffffffffffffffffffffff811631610eba565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906370a08231906114679085906004016127e6565b60206040518083038186803b15801561147f57600080fd5b505afa158015611493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e09190612653565b34156115015760405173ffffffffffffffffffffffffffffffffffffffff8316903480156108fc02916000818181858888f193505050501580156114ff573d6000803e3d6000fd5b505b61150a84611aca565b611587576040517f89dd02e700000000000000000000000000000000000000000000000000000000815230906389dd02e790611550908790879087908790600401612bc3565b600060405180830381600087803b15801561156a57600080fd5b505af115801561157e573d6000803e3d6000fd5b5050505061159c565b8034101561159c5761159c6102d53483611afc565b50505050565b6000806115ad6106f3565b905073ffffffffffffffffffffffffffffffffffffffff81166115d35783915050610eba565b82516115e3575060009050610eba565b6040517f8171c4070000000000000000000000000000000000000000000000000000000081523090638171c4079061162390879085908890600401612b10565b60206040518083038186803b15801561163b57600080fd5b505afa15801561164f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611673919061245e565b156116815783915050610eba565b5092915050565b6000611698848660000151611b32565b905060608673ffffffffffffffffffffffffffffffffffffffff1663b68df16d8363df9aa1ee60e01b60405180608001604052808881526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018b602001518152506040516024016117229190612c99565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e085901b90921682526117b39291600401612807565b600060405180830381600087803b1580156117cd57600080fd5b505af11580156117e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261182791908101906124be565b905080516020141580611891575080517f13c9929e000000000000000000000000000000000000000000000000000000009061186c908301602090810190840161247e565b7fffffffff000000000000000000000000000000000000000000000000000000001614155b156118a8576118a86102d583886020015184611ba1565b50505050505050565b60607f3ea25a3cae94e681748e39876b75ce362a9159c4618787bc1250e3d9f9c439108383604051602401610e3a9291906129e8565b600082821115611900576119006102d560028585611bd9565b50900390565b60607f990174d2378c7614a3e4722867cea0a803c0cc16ef92c4f5466ed5bc1d3496da84848460405160240161193e93929190612a0e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b6060632800659560e01b84848460405160240161193e93929190612c1c565b60200190565b6020811015611a30578151835160208390036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199092169116178352611ac5565b82821415611a3d57611ac5565b82821115611a775760208103905080820181840181515b82851015611a6f578451865260209586019590940193611a54565b905250611ac5565b60208103905080820181840183515b81861215611ac057825182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09283019290910190611a86565b855250505b505050565b73ffffffffffffffffffffffffffffffffffffffff811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14919050565b60607f96660ab143a5c6a946233c268494b1026bfca53373c9715e0fe96b3c59c850448383604051602401610e3a929190612cf7565b60006060611b3f83611bf8565b9050805160d50160f81b609460f81b8583604051602001611b639493929190612767565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120949350505050565b60607ff21e5cb42b911ca6b3898f8618760aa7d84fe5d43a7a5ad89aa791c66cafe41384848460405160240161193e9392919061299d565b606063e946c1bb60e01b84848460405160240161193e93929190612bfa565b606063ffffffff8216611c6a5760408051600180825281830190925290602082018180368337019050509050608060f81b81600081518110611c3657fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610ae5565b60808263ffffffff161015611ca957604080516001808252818301909252906020820181803683370190505090508160f81b81600081518110611c3657fe5b60ff8263ffffffff1611611d285760408051600280825281830190925290602082018180368337019050509050608160f81b81600081518110611ce857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b81600181518110611c3657fe5b61ffff8263ffffffff1611611e0e5760408051600380825281830190925290602082018180368337019050509050608260f81b81600081518110611d6857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060f084901b169082906001908110611dce57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b81600281518110611c3657fe5b62ffffff8263ffffffff1611611f5b5760408051600480825281830190925290602082018180368337019050509050608360f81b81600081518110611e4f57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060e884901b169082906001908110611eb557fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060f084901b169082906002908110611f1b57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b81600381518110611c3657fe5b60408051600580825281830190925290602082018180368337019050509050608460f81b81600081518110611f8c57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060e084901b169082906001908110611ff257fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060e884901b16908290600290811061205857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080517fff0000000000000000000000000000000000000000000000000000000000000060f084901b1690829060039081106120be57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b816004815181106120fe57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350919050565b610ce080612df283390190565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b8035610eba81612dba565b600082601f830112612243578081fd5b813561225661225182612d2c565b612d05565b818152915060208083019084810160005b848110156122fe57813587016040807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838c030112156122a657600080fd5b6122af81612d05565b858301356122bc81612ddf565b8152908201359067ffffffffffffffff8211156122d857600080fd5b6122e68b8784860101612309565b81870152865250509282019290820190600101612267565b505050505092915050565b600082601f830112612319578081fd5b813561232761225182612d4c565b915080825283602082850101111561233e57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112612367578081fd5b815161237561225182612d4c565b915080825283602082850101111561238c57600080fd5b611681816020840160208601612d8e565b6000602082840312156123ae578081fd5b81356113e081612dba565b6000602082840312156123ca578081fd5b81516113e081612dba565b600060208083850312156123e7578182fd5b825167ffffffffffffffff8111156123fd578283fd5b8301601f8101851361240d578283fd5b805161241b61225182612d2c565b81815283810190838501865b848110156124505761243e8a888451890101612357565b84529286019290860190600101612427565b509098975050505050505050565b60006020828403121561246f578081fd5b815180151581146113e0578182fd5b60006020828403121561248f578081fd5b81517fffffffff00000000000000000000000000000000000000000000000000000000811681146113e0578182fd5b6000602082840312156124cf578081fd5b815167ffffffffffffffff8111156124e5578182fd5b6124f184828501612357565b949350505050565b600080600080600060a08688031215612510578081fd5b853561251b81612dba565b9450602086013561252b81612dba565b93506040860135925060608601359150608086013567ffffffffffffffff811115612554578182fd5b61256088828901612233565b9150509295509295909350565b60006020828403121561257e578081fd5b813567ffffffffffffffff80821115612595578283fd5b81840191506101008083870312156125ab578384fd5b6125b481612d05565b90506125c08684612228565b81526125cf8660208501612228565b60208201526125e18660408501612228565b6040820152606083013560608201526080830135608082015260a08301358281111561260b578485fd5b61261787828601612233565b60a08301525060c083013560c082015260e083013582811115612638578485fd5b61264487828601612309565b60e08301525095945050505050565b600060208284031215612664578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845261269d816020860160208601612d8e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006101406126df84845161266b565b60208301516126f1602086018261266b565b5060408301516040850152606083015160608501526080830151608085015260a083015160a085015260c08301518160c086015261273182860182612685565b91505060e083015160e0850152610100808401516127518287018261266b565b5050610120928301519390920192909252919050565b60007fff0000000000000000000000000000000000000000000000000000000000000080871683528086166001840152507fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b16600283015282516127d6816016850160208701612d8e565b9190910160160195945050505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff84168252604060208301526124f16040830184612685565b600061014080830173ffffffffffffffffffffffffffffffffffffffff808f16855260208e818701526040828f1681880152828e166060880152828d1660808801528b60a08801528a60c08801528460e08801528394508951925082845261016093508387019450838284028801019350818a01865b8481101561290f578886037ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffea00187528151805163ffffffff1687528401518487018490526128fc84880182612685565b97850197965050908301906001016128ac565b50505050508561010085015283810361012085015261292e8186612685565b9e9d5050505050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff94851681529290931660208301526040820152606081019190915260800190565b600073ffffffffffffffffffffffffffffffffffffffff85168252606060208301526129cc6060830185612685565b82810360408401526129de8185612685565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b60006040820160408352808551808352606085019150602092506060838202860101838801855b83811015612aaf577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888403018552612a9d8383516126cf565b94860194925090850190600101612a63565b50508581038487015280925086519150612ac98282612cee565b925050818382028301848801865b84811015612b01578383038652612aef838351612685565b95870195925090860190600101612ad7565b50909998505050505050505050565b600084825273ffffffffffffffffffffffffffffffffffffffff8416602083015260606040830152612b456060830184612685565b95945050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b6060810160048510612c0857fe5b938152602081019290925260409091015290565b6060810160088510612c0857fe5b6000602082526113e06020830184612685565b60208082526004908201527f4641494c00000000000000000000000000000000000000000000000000000000604082015260600190565b600060408252612c8760408301846126cf565b82810360209384015290815201919050565b60006020825282516020830152602083015173ffffffffffffffffffffffffffffffffffffffff8082166040850152806040860151166060850152505060608301516080808401526124f160a0840182612685565b90815260200190565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715612d2457600080fd5b604052919050565b600067ffffffffffffffff821115612d42578081fd5b5060209081020190565b600067ffffffffffffffff821115612d62578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b83811015612da9578181015183820152602001612d91565b8381111561159c5750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114612ddc57600080fd5b50565b63ffffffff81168114612ddc57600080fdfe60a060405234801561001057600080fd5b5033606081901b608052610c9b6100456000398061027952806102a7528061039952806103d552806104035250610c9b6000f3fe6080604052600436106100745760003560e01c8063b68df16d1161004e578063b68df16d146100f8578063bc197c811461010b578063c0ee0b8a14610138578063f23a6e611461015a5761007b565b806301ffc9a71461008057806354132d78146100b65780638da5cb5b146100d65761007b565b3661007b57005b600080fd5b34801561008c57600080fd5b506100a061009b366004610a3a565b61017a565b6040516100ad9190610bf5565b60405180910390f35b6100c96100c4366004610851565b61025f565b6040516100ad9190610c2d565b3480156100e257600080fd5b506100eb610397565b6040516100ad9190610afa565b6100c96101063660046107fe565b6103bb565b34801561011757600080fd5b5061012b6101263660046108ab565b6104e8565b6040516100ad9190610c00565b34801561014457600080fd5b506101586101533660046109e0565b610515565b005b34801561016657600080fd5b5061012b610175366004610966565b61051b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061020d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000145b8061025957507fffffffff0000000000000000000000000000000000000000000000000000000082167fc0ee0b8a00000000000000000000000000000000000000000000000000000000145b92915050565b60603373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146102d0576102d06102cb337f0000000000000000000000000000000000000000000000000000000000000000610546565b6105e8565b60008573ffffffffffffffffffffffffffffffffffffffff168386866040516102fa929190610aea565b60006040518083038185875af1925050503d8060008114610337576040519150601f19603f3d011682016040523d82523d6000602084013e61033c565b606091505b50925090508061038e5761038e6102cb308888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92508991506105f09050565b50949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60603373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610427576104276102cb337f0000000000000000000000000000000000000000000000000000000000000000610546565b60008473ffffffffffffffffffffffffffffffffffffffff168484604051610450929190610aea565b600060405180830381855af49150503d806000811461048b576040519150601f19603f3d011682016040523d82523d6000602084013e610490565b606091505b5092509050806104e0576104e06102cb308787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508992506106b4915050565b509392505050565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b50505050565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b6060631de45ad160e01b8383604051602401610563929190610b1b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b805160208201fd5b60607f86945816f737646db7f2d6df01602a2212e8c75829f6940913724c13a83a8178868686868660405160240161062c959493929190610b98565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905095945050505050565b60607f61e5a7320b4cf56a2980a427f39e3071c967bf2f77fffcaae20e4467e160afcc858585856040516024016106ee9493929190610b42565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050949350505050565b60008083601f840112610786578182fd5b50813567ffffffffffffffff81111561079d578182fd5b60208301915083602080830285010111156107b757600080fd5b9250929050565b60008083601f8401126107cf578182fd5b50813567ffffffffffffffff8111156107e6578182fd5b6020830191508360208285010111156107b757600080fd5b600080600060408486031215610812578283fd5b833561081d81610c40565b9250602084013567ffffffffffffffff811115610838578283fd5b610844868287016107be565b9497909650939450505050565b60008060008060608587031215610866578081fd5b843561087181610c40565b9350602085013567ffffffffffffffff81111561088c578182fd5b610898878288016107be565b9598909750949560400135949350505050565b60008060008060008060008060a0898b0312156108c6578384fd5b88356108d181610c40565b975060208901356108e181610c40565b9650604089013567ffffffffffffffff808211156108fd578586fd5b6109098c838d01610775565b909850965060608b0135915080821115610921578586fd5b61092d8c838d01610775565b909650945060808b0135915080821115610945578384fd5b506109528b828c016107be565b999c989b5096995094979396929594505050565b60008060008060008060a0878903121561097e578182fd5b863561098981610c40565b9550602087013561099981610c40565b94506040870135935060608701359250608087013567ffffffffffffffff8111156109c2578283fd5b6109ce89828a016107be565b979a9699509497509295939492505050565b600080600080606085870312156109f5578384fd5b8435610a0081610c40565b935060208501359250604085013567ffffffffffffffff811115610a22578283fd5b610a2e878288016107be565b95989497509550505050565b600060208284031215610a4b578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a7a578182fd5b9392505050565b60008151808452815b81811015610aa657602081850181015186830182015201610a8a565b81811115610ab75782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000828483379101908152919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525060806040830152610b7b6080830185610a81565b8281036060840152610b8d8185610a81565b979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525060a06040830152610bd160a0830186610a81565b8460608401528281036080840152610be98185610a81565b98975050505050505050565b901515815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b600060208252610a7a6020830184610a81565b73ffffffffffffffffffffffffffffffffffffffff81168114610c6257600080fd5b5056fea26469706673582212202693caafd0beeadf9d6f42f9dedf3503687e8f05a3baee4ec4d8860b835633e864736f6c634300060c0033a2646970667358221220c9a0bb7159e33f66d5428a727f38939ec0c2dd45cbba3e7bffcd06b17c7d67b064736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBC JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6AE4B4F7 GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xC853C969 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xC853C969 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0xCE5494BB EQ PUSH2 0x1C2 JUMPI DUP1 PUSH4 0xF028E9BE EQ PUSH2 0x1EF JUMPI PUSH2 0xBC JUMP JUMPDEST DUP1 PUSH4 0x6AE4B4F7 EQ PUSH2 0x158 JUMPI DUP1 PUSH4 0x87C96419 EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0x9F1EC78B EQ PUSH2 0x19A JUMPI PUSH2 0xBC JUMP JUMPDEST DUP1 PUSH4 0x415565B0 GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0x415565B0 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x4D54CDB6 EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x56CE180A EQ PUSH2 0x136 JUMPI PUSH2 0xBC JUMP JUMPDEST DUP1 PUSH4 0x31B905C EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x287B071B EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x204 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x2CEE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x101 PUSH2 0x228 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x27E6 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x24F9 JUMP JUMPDEST PUSH2 0x355 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x101 PUSH2 0x42E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x156 PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0x239D JUMP JUMPDEST PUSH2 0x457 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16D PUSH2 0x58E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x2C2A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x156 PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x239D JUMP JUMPDEST PUSH2 0x5C7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x101 PUSH2 0x6F3 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x1BD CALLDATASIZE PUSH1 0x4 PUSH2 0x256D JUMP JUMPDEST PUSH2 0x71C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E2 PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0x239D JUMP JUMPDEST PUSH2 0xAEA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x2B4E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x101 PUSH2 0xDDE JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x271 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x285 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A9 SWAP2 SWAP1 PUSH2 0x23B9 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ PUSH2 0x2DA JUMPI PUSH2 0x2DA PUSH2 0x2D5 CALLER DUP4 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0xEC0 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x2E7 SWAP1 PUSH2 0x2132 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x303 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x30F PUSH2 0xEC8 JUMP JUMPDEST DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x39A PUSH1 0x0 CALLDATASIZE DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xED5 SWAP3 POP POP POP JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x422 PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP PUSH2 0xFCF JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x438 PUSH2 0xEC8 JUMP JUMPDEST PUSH1 0x1 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x49F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4D7 SWAP2 SWAP1 PUSH2 0x23B9 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ PUSH2 0x503 JUMPI PUSH2 0x503 PUSH2 0x2D5 CALLER DUP4 PUSH2 0xE04 JUMP JUMPDEST POP DUP1 PUSH2 0x50D PUSH2 0xEC8 JUMP JUMPDEST PUSH1 0x2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xF5550C5EEA19B48AC6EB5F03ABDC4F59C0A60697ABB3D973CD68669703B5C8B9 SWAP1 PUSH2 0x583 SWAP1 DUP4 SWAP1 PUSH2 0x27E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5472616E73666F726D4552433230000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x60F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x623 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x647 SWAP2 SWAP1 PUSH2 0x23B9 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ PUSH2 0x673 JUMPI PUSH2 0x673 PUSH2 0x2D5 CALLER DUP4 PUSH2 0xE04 JUMP JUMPDEST POP DUP1 PUSH2 0x67D PUSH2 0xEC8 JUMP JUMPDEST PUSH1 0x1 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xFD45604ABAD79C16E23348A137ED8292661BE1B8EBA6E4806EBED6833B1C046A SWAP1 PUSH2 0x583 SWAP1 DUP4 SWAP1 PUSH2 0x27E6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6FD PUSH2 0xEC8 JUMP JUMPDEST PUSH1 0x2 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLVALUE PUSH2 0x29A EQ ISZERO PUSH2 0x763 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x75A SWAP1 PUSH2 0x2C3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x309 EQ ISZERO PUSH2 0x874 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH2 0x140 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP3 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD SWAP1 DUP2 ADD DUP5 MSTORE DUP2 DUP2 MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x120 DUP3 ADD MSTORE SWAP1 MLOAD PUSH32 0x9B05181800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP2 PUSH4 0x9B051818 SWAP2 PUSH2 0x7FE SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x2C74 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x818 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x82C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x872 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x24BE JUMP JUMPDEST POP JUMPDEST CALLVALUE PUSH2 0x378 EQ ISZERO PUSH2 0xA77 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x89D PUSH2 0x213F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x895 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x60 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x8CA JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x98E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9B6 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x40 MLOAD PUSH32 0x769250EA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x769250EA SWAP1 PUSH2 0x9FF SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A3C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA2D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xA73 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x23D5 JUMP JUMPDEST POP POP POP JUMPDEST PUSH32 0xC21A8C994E961F7BB11BB948CDA495299E92E615BBEC18172088C5E1866DD517 CALLER CALLVALUE DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP9 PUSH1 0x80 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD DUP11 PUSH1 0xC0 ADD MLOAD DUP12 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0xAD8 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2836 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH2 0x539 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB15 PUSH32 0x4D54CDB600000000000000000000000000000000000000000000000000000000 PUSH2 0x124F JUMP JUMPDEST PUSH2 0xB3E PUSH32 0x287B071B00000000000000000000000000000000000000000000000000000000 PUSH2 0x124F JUMP JUMPDEST PUSH2 0xB67 PUSH32 0xF028E9BE00000000000000000000000000000000000000000000000000000000 PUSH2 0x124F JUMP JUMPDEST PUSH2 0xB90 PUSH32 0x87C9641900000000000000000000000000000000000000000000000000000000 PUSH2 0x124F JUMP JUMPDEST PUSH2 0xBB9 PUSH32 0x56CE180A00000000000000000000000000000000000000000000000000000000 PUSH2 0x124F JUMP JUMPDEST PUSH2 0xBE2 PUSH32 0x9F1EC78B00000000000000000000000000000000000000000000000000000000 PUSH2 0x124F JUMP JUMPDEST PUSH2 0xC0B PUSH32 0x415565B000000000000000000000000000000000000000000000000000000000 PUSH2 0x124F JUMP JUMPDEST PUSH2 0xC34 PUSH32 0xC853C96900000000000000000000000000000000000000000000000000000000 PUSH2 0x124F JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF028E9BE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCA6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCCA SWAP2 SWAP1 PUSH2 0x23B9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD68 JUMPI ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x287B071B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD66 SWAP2 SWAP1 PUSH2 0x23B9 JUMP JUMPDEST POP JUMPDEST DUP2 PUSH2 0xD71 PUSH2 0xEC8 JUMP JUMPDEST PUSH1 0x1 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH32 0x2C64C5EF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDE8 PUSH2 0xEC8 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH32 0x1DE45AD18E8A4484220A3CA14F4D977641ADDBABA5A344B1384DC2AA78A2E34D DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xE3A SWAP3 SWAP2 SWAP1 PUSH2 0x2940 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xEBA PUSH1 0x4 PUSH2 0x12E2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x46 DUP4 MLOAD LT DUP1 PUSH2 0xF59 JUMPI POP DUP3 MLOAD PUSH2 0xF13 SWAP1 DUP5 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBA ADD PUSH2 0x12FD JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xF86D1D9200000000000000000000000000000000000000000000000000000000 EQ ISZERO JUMPDEST ISZERO PUSH2 0xF6C JUMPI DUP3 MLOAD PUSH1 0x20 DUP5 ADD KECCAK256 SWAP2 POP PUSH2 0xFCA JUMP JUMPDEST DUP3 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBA DUP2 ADD PUSH1 0x20 DUP6 ADD KECCAK256 SWAP3 POP PUSH2 0xFC7 SWAP1 DUP5 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBE DUP2 ADD SWAP1 PUSH2 0x1349 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x60 ADD MLOAD EQ ISZERO PUSH2 0x1094 JUMPI PUSH1 0x20 DUP3 ADD MLOAD DUP3 MLOAD PUSH1 0x40 MLOAD PUSH32 0x496F471E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP3 PUSH4 0x496F471E SWAP3 PUSH2 0x103E SWAP3 PUSH1 0x4 ADD PUSH2 0x2940 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1056 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x106A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x108E SWAP2 SWAP1 PUSH2 0x2653 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE JUMPDEST PUSH2 0x109C PUSH2 0x21D4 JUMP JUMPDEST PUSH2 0x10A4 PUSH2 0xDDE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH2 0x10C4 PUSH2 0x42E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP4 MLOAD PUSH2 0x10F0 SWAP2 SWAP1 PUSH2 0x13E7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD DUP4 MLOAD DUP3 MLOAD PUSH1 0x60 DUP7 ADD MLOAD PUSH2 0x110F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x14B7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1123 DUP5 PUSH1 0xC0 ADD MLOAD DUP6 PUSH1 0xE0 ADD MLOAD PUSH2 0x15A2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 PUSH1 0xA0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x116D JUMPI PUSH2 0x1165 DUP4 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0xA0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x114D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP9 PUSH1 0x0 ADD MLOAD DUP7 PUSH2 0x1688 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1128 JUMP JUMPDEST POP POP PUSH2 0x1181 DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x13E7 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD MLOAD GT ISZERO PUSH2 0x11AE JUMPI PUSH2 0x11AE PUSH2 0x2D5 DUP5 PUSH1 0x40 ADD MLOAD DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD SUB PUSH2 0x18B1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x11C1 SWAP2 PUSH2 0x18E7 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x80 ADD MLOAD DUP3 LT ISZERO PUSH2 0x11E5 JUMPI PUSH2 0x11E5 PUSH2 0x2D5 DUP5 PUSH1 0x40 ADD MLOAD DUP5 DUP7 PUSH1 0x80 ADD MLOAD PUSH2 0x1906 JUMP JUMPDEST DUP3 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF6672F78A59BA8E5E5B5D38DF3EBC67F3C792E2C9259B8D97D7F00DD78BA1B3 DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x40 MLOAD PUSH2 0x1241 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2967 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x6EB224CB SWAP1 PUSH2 0x12AD SWAP1 DUP5 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x2B7B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x12F2 JUMPI INVALID JUMPDEST PUSH1 0x1 ADD SWAP1 SHL SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0x131E JUMPI PUSH2 0x131E PUSH2 0x2D5 PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0x19C4 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP4 GT ISZERO PUSH2 0x1362 JUMPI PUSH2 0x1362 PUSH2 0x2D5 PUSH1 0x0 DUP6 DUP6 PUSH2 0x19C4 JUMP JUMPDEST DUP4 MLOAD DUP3 GT ISZERO PUSH2 0x137B JUMPI PUSH2 0x137B PUSH2 0x2D5 PUSH1 0x1 DUP5 DUP8 MLOAD PUSH2 0x19C4 JUMP JUMPDEST DUP3 DUP3 SUB PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1394 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x13BF JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x13E0 PUSH2 0x13CE DUP3 PUSH2 0x19E3 JUMP JUMPDEST DUP5 PUSH2 0x13D8 DUP8 PUSH2 0x19E3 JUMP JUMPDEST ADD DUP4 MLOAD PUSH2 0x19E9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13F2 DUP4 PUSH2 0x1ACA JUMP JUMPDEST ISZERO PUSH2 0x1415 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND BALANCE PUSH2 0xEBA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x1467 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x27E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x147F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1493 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13E0 SWAP2 SWAP1 PUSH2 0x2653 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x1501 JUMPI PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x14FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST PUSH2 0x150A DUP5 PUSH2 0x1ACA JUMP JUMPDEST PUSH2 0x1587 JUMPI PUSH1 0x40 MLOAD PUSH32 0x89DD02E700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x89DD02E7 SWAP1 PUSH2 0x1550 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2BC3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x156A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x157E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x159C JUMP JUMPDEST DUP1 CALLVALUE LT ISZERO PUSH2 0x159C JUMPI PUSH2 0x159C PUSH2 0x2D5 CALLVALUE DUP4 PUSH2 0x1AFC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x15AD PUSH2 0x6F3 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x15D3 JUMPI DUP4 SWAP2 POP POP PUSH2 0xEBA JUMP JUMPDEST DUP3 MLOAD PUSH2 0x15E3 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH2 0xEBA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8171C40700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x8171C407 SWAP1 PUSH2 0x1623 SWAP1 DUP8 SWAP1 DUP6 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2B10 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x163B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x164F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1673 SWAP2 SWAP1 PUSH2 0x245E JUMP JUMPDEST ISZERO PUSH2 0x1681 JUMPI DUP4 SWAP2 POP POP PUSH2 0xEBA JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1698 DUP5 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x1B32 JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB68DF16D DUP4 PUSH4 0xDF9AA1EE PUSH1 0xE0 SHL PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x20 ADD MLOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1722 SWAP2 SWAP1 PUSH2 0x2C99 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP5 DUP6 AND OR SWAP1 MSTORE MLOAD PUSH1 0xE0 DUP6 SWAP1 SHL SWAP1 SWAP3 AND DUP3 MSTORE PUSH2 0x17B3 SWAP3 SWAP2 PUSH1 0x4 ADD PUSH2 0x2807 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x17E1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1827 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x24BE JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x20 EQ ISZERO DUP1 PUSH2 0x1891 JUMPI POP DUP1 MLOAD PUSH32 0x13C9929E00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x186C SWAP1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP1 DUP5 ADD PUSH2 0x247E JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x18A8 JUMPI PUSH2 0x18A8 PUSH2 0x2D5 DUP4 DUP9 PUSH1 0x20 ADD MLOAD DUP5 PUSH2 0x1BA1 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x3EA25A3CAE94E681748E39876B75CE362A9159C4618787BC1250E3D9F9C43910 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xE3A SWAP3 SWAP2 SWAP1 PUSH2 0x29E8 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1900 JUMPI PUSH2 0x1900 PUSH2 0x2D5 PUSH1 0x2 DUP6 DUP6 PUSH2 0x1BD9 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH32 0x990174D2378C7614A3E4722867CEA0A803C0CC16EF92C4F5466ED5BC1D3496DA DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x193E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A0E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x193E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2C1C JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1A30 JUMPI DUP2 MLOAD DUP4 MLOAD PUSH1 0x20 DUP4 SWAP1 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR DUP4 MSTORE PUSH2 0x1AC5 JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0x1A3D JUMPI PUSH2 0x1AC5 JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x1A77 JUMPI PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP2 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x1A6F JUMPI DUP5 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP5 ADD SWAP4 PUSH2 0x1A54 JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x1AC5 JUMP JUMPDEST PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP4 MLOAD JUMPDEST DUP2 DUP7 SLT ISZERO PUSH2 0x1AC0 JUMPI DUP3 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1A86 JUMP JUMPDEST DUP6 MSTORE POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x96660AB143A5C6A946233C268494B1026BFCA53373C9715E0FE96B3C59C85044 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xE3A SWAP3 SWAP2 SWAP1 PUSH2 0x2CF7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x1B3F DUP4 PUSH2 0x1BF8 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0xD5 ADD PUSH1 0xF8 SHL PUSH1 0x94 PUSH1 0xF8 SHL DUP6 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1B63 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2767 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0xF21E5CB42B911CA6B3898F8618760AA7D84FE5D43A7A5AD89AA791C66CAFE413 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x193E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x299D JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x193E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2BFA JUMP JUMPDEST PUSH1 0x60 PUSH4 0xFFFFFFFF DUP3 AND PUSH2 0x1C6A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x80 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1C36 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0xAE5 JUMP JUMPDEST PUSH1 0x80 DUP3 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0x1CA9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1C36 JUMPI INVALID JUMPDEST PUSH1 0xFF DUP3 PUSH4 0xFFFFFFFF AND GT PUSH2 0x1D28 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x81 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1CE8 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1C36 JUMPI INVALID JUMPDEST PUSH2 0xFFFF DUP3 PUSH4 0xFFFFFFFF AND GT PUSH2 0x1E0E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x82 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1D68 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xF0 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH2 0x1DCE JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x1C36 JUMPI INVALID JUMPDEST PUSH3 0xFFFFFF DUP3 PUSH4 0xFFFFFFFF AND GT PUSH2 0x1F5B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x83 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1E4F JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xE8 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH2 0x1EB5 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xF0 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x2 SWAP1 DUP2 LT PUSH2 0x1F1B JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH2 0x1C36 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x5 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x84 PUSH1 0xF8 SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1F8C JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH2 0x1FF2 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xE8 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x2 SWAP1 DUP2 LT PUSH2 0x2058 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xF0 DUP5 SWAP1 SHL AND SWAP1 DUP3 SWAP1 PUSH1 0x3 SWAP1 DUP2 LT PUSH2 0x20BE JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0xF8 SHL DUP2 PUSH1 0x4 DUP2 MLOAD DUP2 LT PUSH2 0x20FE JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCE0 DUP1 PUSH2 0x2DF2 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xEBA DUP2 PUSH2 0x2DBA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2243 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2256 PUSH2 0x2251 DUP3 PUSH2 0x2D2C JUMP JUMPDEST PUSH2 0x2D05 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x22FE JUMPI DUP2 CALLDATALOAD DUP8 ADD PUSH1 0x40 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP13 SUB ADD SLT ISZERO PUSH2 0x22A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22AF DUP2 PUSH2 0x2D05 JUMP JUMPDEST DUP6 DUP4 ADD CALLDATALOAD PUSH2 0x22BC DUP2 PUSH2 0x2DDF JUMP JUMPDEST DUP2 MSTORE SWAP1 DUP3 ADD CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x22D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22E6 DUP12 DUP8 DUP5 DUP7 ADD ADD PUSH2 0x2309 JUMP JUMPDEST DUP2 DUP8 ADD MSTORE DUP7 MSTORE POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2267 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2319 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2327 PUSH2 0x2251 DUP3 PUSH2 0x2D4C JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x233E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2367 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2375 PUSH2 0x2251 DUP3 PUSH2 0x2D4C JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x238C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1681 DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2D8E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23AE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x13E0 DUP2 PUSH2 0x2DBA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23CA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x13E0 DUP2 PUSH2 0x2DBA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23E7 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23FD JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x240D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x241B PUSH2 0x2251 DUP3 PUSH2 0x2D2C JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP7 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2450 JUMPI PUSH2 0x243E DUP11 DUP9 DUP5 MLOAD DUP10 ADD ADD PUSH2 0x2357 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP7 ADD SWAP3 SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2427 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x246F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x13E0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x248F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x13E0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24CF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24E5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x24F1 DUP5 DUP3 DUP6 ADD PUSH2 0x2357 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2510 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x251B DUP2 PUSH2 0x2DBA JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x252B DUP2 PUSH2 0x2DBA JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2554 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2560 DUP9 DUP3 DUP10 ADD PUSH2 0x2233 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x257E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2595 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP PUSH2 0x100 DUP1 DUP4 DUP8 SUB SLT ISZERO PUSH2 0x25AB JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x25B4 DUP2 PUSH2 0x2D05 JUMP JUMPDEST SWAP1 POP PUSH2 0x25C0 DUP7 DUP5 PUSH2 0x2228 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x25CF DUP7 PUSH1 0x20 DUP6 ADD PUSH2 0x2228 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x25E1 DUP7 PUSH1 0x40 DUP6 ADD PUSH2 0x2228 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x260B JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x2617 DUP8 DUP3 DUP7 ADD PUSH2 0x2233 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 DUP4 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x2638 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x2644 DUP8 DUP3 DUP7 ADD PUSH2 0x2309 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2664 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x269D DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2D8E JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 PUSH2 0x26DF DUP5 DUP5 MLOAD PUSH2 0x266B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x26F1 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x266B JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD DUP2 PUSH1 0xC0 DUP7 ADD MSTORE PUSH2 0x2731 DUP3 DUP7 ADD DUP3 PUSH2 0x2685 JUMP JUMPDEST SWAP2 POP POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD PUSH2 0x2751 DUP3 DUP8 ADD DUP3 PUSH2 0x266B JUMP JUMPDEST POP POP PUSH2 0x120 SWAP3 DUP4 ADD MLOAD SWAP4 SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x1 DUP5 ADD MSTORE POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP5 PUSH1 0x60 SHL AND PUSH1 0x2 DUP4 ADD MSTORE DUP3 MLOAD PUSH2 0x27D6 DUP2 PUSH1 0x16 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2D8E JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x16 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x24F1 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2685 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 DUP1 DUP4 ADD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP16 AND DUP6 MSTORE PUSH1 0x20 DUP15 DUP2 DUP8 ADD MSTORE PUSH1 0x40 DUP3 DUP16 AND DUP2 DUP9 ADD MSTORE DUP3 DUP15 AND PUSH1 0x60 DUP9 ADD MSTORE DUP3 DUP14 AND PUSH1 0x80 DUP9 ADD MSTORE DUP12 PUSH1 0xA0 DUP9 ADD MSTORE DUP11 PUSH1 0xC0 DUP9 ADD MSTORE DUP5 PUSH1 0xE0 DUP9 ADD MSTORE DUP4 SWAP5 POP DUP10 MLOAD SWAP3 POP DUP3 DUP5 MSTORE PUSH2 0x160 SWAP4 POP DUP4 DUP8 ADD SWAP5 POP DUP4 DUP3 DUP5 MUL DUP9 ADD ADD SWAP4 POP DUP2 DUP11 ADD DUP7 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x290F JUMPI DUP9 DUP7 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEA0 ADD DUP8 MSTORE DUP2 MLOAD DUP1 MLOAD PUSH4 0xFFFFFFFF AND DUP8 MSTORE DUP5 ADD MLOAD DUP5 DUP8 ADD DUP5 SWAP1 MSTORE PUSH2 0x28FC DUP5 DUP9 ADD DUP3 PUSH2 0x2685 JUMP JUMPDEST SWAP8 DUP6 ADD SWAP8 SWAP7 POP POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x28AC JUMP JUMPDEST POP POP POP POP POP DUP6 PUSH2 0x100 DUP6 ADD MSTORE DUP4 DUP2 SUB PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x292E DUP2 DUP7 PUSH2 0x2685 JUMP JUMPDEST SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x29CC PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x2685 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x29DE DUP2 DUP6 PUSH2 0x2685 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD PUSH1 0x40 DUP4 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x60 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP9 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2AAF JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0 DUP9 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x2A9D DUP4 DUP4 MLOAD PUSH2 0x26CF JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2A63 JUMP JUMPDEST POP POP DUP6 DUP2 SUB DUP5 DUP8 ADD MSTORE DUP1 SWAP3 POP DUP7 MLOAD SWAP2 POP PUSH2 0x2AC9 DUP3 DUP3 PUSH2 0x2CEE JUMP JUMPDEST SWAP3 POP POP DUP2 DUP4 DUP3 MUL DUP4 ADD DUP5 DUP9 ADD DUP7 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2B01 JUMPI DUP4 DUP4 SUB DUP7 MSTORE PUSH2 0x2AEF DUP4 DUP4 MLOAD PUSH2 0x2685 JUMP JUMPDEST SWAP6 DUP8 ADD SWAP6 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2AD7 JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2B45 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2685 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x2C08 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x2C08 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x13E0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2685 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP1 DUP3 ADD MSTORE PUSH32 0x4641494C00000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x2C87 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x26CF JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 SWAP4 DUP5 ADD MSTORE SWAP1 DUP2 MSTORE ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x40 DUP6 ADD MSTORE DUP1 PUSH1 0x40 DUP7 ADD MLOAD AND PUSH1 0x60 DUP6 ADD MSTORE POP POP PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x80 DUP1 DUP5 ADD MSTORE PUSH2 0x24F1 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x2685 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2D24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2D42 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2D62 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2DA9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2D91 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x159C JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2DDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2DDC JUMPI PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x60 DUP2 SWAP1 SHL PUSH1 0x80 MSTORE PUSH2 0xC9B PUSH2 0x45 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x279 MSTORE DUP1 PUSH2 0x2A7 MSTORE DUP1 PUSH2 0x399 MSTORE DUP1 PUSH2 0x3D5 MSTORE DUP1 PUSH2 0x403 MSTORE POP PUSH2 0xC9B PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x74 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB68DF16D GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xB68DF16D EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x10B JUMPI DUP1 PUSH4 0xC0EE0B8A EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x15A JUMPI PUSH2 0x7B JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x80 JUMPI DUP1 PUSH4 0x54132D78 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xD6 JUMPI PUSH2 0x7B JUMP JUMPDEST CALLDATASIZE PUSH2 0x7B JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0xA3A JUMP JUMPDEST PUSH2 0x17A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0xBF5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC9 PUSH2 0xC4 CALLDATASIZE PUSH1 0x4 PUSH2 0x851 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0xC2D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEB PUSH2 0x397 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0xAFA JUMP JUMPDEST PUSH2 0xC9 PUSH2 0x106 CALLDATASIZE PUSH1 0x4 PUSH2 0x7FE JUMP JUMPDEST PUSH2 0x3BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x117 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12B PUSH2 0x126 CALLDATASIZE PUSH1 0x4 PUSH2 0x8AB JUMP JUMPDEST PUSH2 0x4E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0xC00 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x158 PUSH2 0x153 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E0 JUMP JUMPDEST PUSH2 0x515 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12B PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x966 JUMP JUMPDEST PUSH2 0x51B JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x20D JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x259 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0xC0EE0B8A00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x2D0 JUMPI PUSH2 0x2D0 PUSH2 0x2CB CALLER PUSH32 0x0 PUSH2 0x546 JUMP JUMPDEST PUSH2 0x5E8 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP3 SWAP2 SWAP1 PUSH2 0xAEA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x337 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x33C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP3 POP SWAP1 POP DUP1 PUSH2 0x38E JUMPI PUSH2 0x38E PUSH2 0x2CB ADDRESS DUP9 DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP11 SWAP3 POP DUP10 SWAP2 POP PUSH2 0x5F0 SWAP1 POP JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x60 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x427 JUMPI PUSH2 0x427 PUSH2 0x2CB CALLER PUSH32 0x0 PUSH2 0x546 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x450 SWAP3 SWAP2 SWAP1 PUSH2 0xAEA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x48B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x490 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP3 POP SWAP1 POP DUP1 PUSH2 0x4E0 JUMPI PUSH2 0x4E0 PUSH2 0x2CB ADDRESS DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP10 SWAP3 POP PUSH2 0x6B4 SWAP2 POP POP JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x1DE45AD1 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x563 SWAP3 SWAP2 SWAP1 PUSH2 0xB1B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH32 0x86945816F737646DB7F2D6DF01602A2212E8C75829F6940913724C13A83A8178 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x62C SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB98 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x61E5A7320B4CF56A2980A427F39E3071C967BF2F77FFFCAAE20E4467E160AFCC DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6EE SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB42 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x786 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x79D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x7B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x7CF JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7E6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x7B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x812 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x81D DUP2 PUSH2 0xC40 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x838 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x844 DUP7 DUP3 DUP8 ADD PUSH2 0x7BE JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x866 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x871 DUP2 PUSH2 0xC40 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x88C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x898 DUP8 DUP3 DUP9 ADD PUSH2 0x7BE JUMP JUMPDEST SWAP6 SWAP9 SWAP1 SWAP8 POP SWAP5 SWAP6 PUSH1 0x40 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x8C6 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x8D1 DUP2 PUSH2 0xC40 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x8E1 DUP2 PUSH2 0xC40 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x8FD JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x909 DUP13 DUP4 DUP14 ADD PUSH2 0x775 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x921 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x92D DUP13 DUP4 DUP14 ADD PUSH2 0x775 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x945 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x952 DUP12 DUP3 DUP13 ADD PUSH2 0x7BE JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x97E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x989 DUP2 PUSH2 0xC40 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x999 DUP2 PUSH2 0xC40 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9C2 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9CE DUP10 DUP3 DUP11 ADD PUSH2 0x7BE JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9F5 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0xA00 DUP2 PUSH2 0xC40 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA22 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xA2E DUP8 DUP3 DUP9 ADD PUSH2 0x7BE JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA4B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xA7A JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xAA6 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xA8A JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xAB7 JUMPI DUP3 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xB7B PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0xA81 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0xB8D DUP2 DUP6 PUSH2 0xA81 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xBD1 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0xA81 JUMP JUMPDEST DUP5 PUSH1 0x60 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0xBE9 DUP2 DUP6 PUSH2 0xA81 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0xA7A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xA81 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 SWAP4 0xCA 0xAF 0xD0 0xBE 0xEA 0xDF SWAP14 PUSH16 0x42F9DEDF3503687E8F05A3BAEE4EC4D8 DUP7 SIGNEXTEND DUP4 JUMP CALLER 0xE8 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 LOG0 0xBB PUSH18 0x59E33F66D5428A727F38939EC0C2DD45CBBA RETURNDATACOPY PUSH28 0xFFCD06B17C7D67B064736F6C634300060C0033000000000000000000 ",
                "sourceMap": "748:2615:70:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2097:75:33;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5140:231;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;6391:919::-;;;;;;:::i;:::-;;:::i;4395:199::-;;;;;;;;;;;;;:::i;4046:227::-;;;;;;;;;;-1:-1:-1;4046:227:33;;;;;:::i;:::-;;:::i;:::-;;1990:63;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3583:275::-;;;;;;;;;;-1:-1:-1;3583:275:33;;;;;:::i;:::-;;:::i;4716:181::-;;;;;;;;;;;;;:::i;1191:2170:70:-;;;;;;:::i;:::-;;:::i;2423:964:33:-;;;;;;;;;;-1:-1:-1;2423:964:33;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;11267:185::-;;;;;;;;;;;;;:::i;2097:75::-;;;:::o;5140:231::-;5240:19;1466:13:36;1506:4;1482:36;;;:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1466:54;-1:-1:-1;1538:10:36;:19;;;;1534:180;;1577:122;:112;1634:10;1666:5;1577:35;:112::i;:::-;:120;:122::i;:::-;5140:231:33;5284:17:::1;;;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;5275:26;;5358:6;5311:37;:35;:37::i;:::-;:53:::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;5140:231;:::o;6391:919::-;6678:25;6720:20;6742:30;6788:41;6820:8;;6788:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6788:31:33;;-1:-1:-1;;;6788:41:33:i;:::-;6719:110;;;;6846:457;6882:411;;;;;;;;6926:10;6882:411;;;;;;6966:10;6882:411;;;;;;7007:11;6882:411;;;;;;7054:16;6882:411;;;;7110:20;6882:411;;;;7165:15;6882:411;;;;7212:12;6882:411;;;;7261:17;6882:411;;;6846:22;:457::i;:::-;6839:464;6391:919;-1:-1:-1;;;;;;;;6391:919:33:o;4395:199::-;4491:16;4530:37;:35;:37::i;:::-;:57;;;;;;-1:-1:-1;4395:199:33;:::o;4046:227::-;1466:13:36;1506:4;1482:36;;;:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1466:54;-1:-1:-1;1538:10:36;:19;;;;1534:180;;1577:122;:112;1634:10;1666:5;1577:35;:112::i;:122::-;4046:227:33;4209:11:::1;4157:37;:35;:37::i;:::-;:49;;:63:::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;4235:31:::1;::::0;::::1;::::0;::::1;::::0;4254:11;;4235:31:::1;:::i;:::-;;;;;;;;4046:227:::0;:::o;1990:63::-;;;;;;;;;;;;;;;;;;;:::o;3583:275::-;1466:13:36;1506:4;1482:36;;;:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1466:54;-1:-1:-1;1538:10:36;:19;;;;1534:180;;1577:122;:112;1634:10;1666:5;1577:35;:112::i;:122::-;3583:275:33;3770:19:::1;3710:37;:35;:37::i;:::-;:57;;:79:::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;3804:47:::1;::::0;::::1;::::0;::::1;::::0;3831:19;;3804:47:::1;:::i;4716:181::-:0;4804:14;4841:37;:35;:37::i;:::-;:49;;;;;;-1:-1:-1;4716:181:33;:::o;1191:2170:70:-;1313:25;1358:9;1371:3;1358:16;1354:61;;;1390:14;;;;;;;;;;:::i;:::-;;;;;;;;1354:61;1429:9;1442:3;1429:16;1425:656;;;1598:438;;;;;;;;-1:-1:-1;1598:438:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1518:552;;;;;1551:4;;1518:62;;:552;;1598:438;1518:552;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1425:656;2095:9;2108:3;2095:16;2091:892;;;2267:53;;;2318:1;2267:53;;;;;;;;;2190:58;;2267:53;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;2362:14:70;;;2374:1;2362:14;;;;;;;;;2190:130;;-1:-1:-1;2334:25:70;;2362:14;;;;;;;;;;;;;;;;;;;;;2334:42;;2400:394;;;;;;;;2479:1;2400:394;;;;;;2515:1;2400:394;;;;;;2548:1;2400:394;;;;2580:1;2400:394;;;;2622:1;2400:394;;;;2647:1;2400:394;;;;;;;;;;;;;;;;;;;;2703:1;2400:394;;;;2747:1;2400:394;;;;;;2778:1;2400:394;;;2390:4;2395:1;2390:7;;;;;;;;;;;;;:404;;;;2808:18;;;;;;;;;;;;:10;2819:1;2808:13;;;;;;;;;;;;;;;;;:18;2840:132;;;;;2873:4;;2840:68;;:132;;2926:4;;2948:10;;2840:132;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2091:892;;;2998:335;3032:10;3056:9;3079:4;:10;;;3103:4;:15;;;3132:4;:16;;;3162:4;:21;;;3197:4;:25;;;3236:4;:20;;;3270:4;:17;;;3301:4;:22;;;2998:335;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;3350:4:70;1191:2170;;;;:::o;2423:964:33:-;2503:14;2533:62;2558:36;2533:24;:62::i;:::-;2605:61;2630:35;2605:24;:61::i;:::-;2676:58;2701:32;2676:24;:58::i;:::-;2744:62;2769:36;2744:24;:62::i;:::-;2816:54;2841:28;2816:24;:54::i;:::-;2880;2905:28;2880:24;:54::i;:::-;2944;2969:28;2944:24;:54::i;:::-;3008:55;3033:29;3008:24;:55::i;:::-;3127:1;3077:53;;:4;:23;;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;;;3073:176;;;3210:4;:26;;;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3073:176;3318:19;3258:37;:35;:37::i;:::-;:57;;:79;;;;;;;;;;;;;;;-1:-1:-1;3354:26:33;;2423:964;-1:-1:-1;2423:964:33:o;11267:185::-;11359:19;11401:37;:35;:37::i;:::-;:44;;;;-1:-1:-1;11267:185:33;:::o;686:303:5:-;810:12;888:44;947:6;967:5;845:137;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;686:303:5;;;;;:::o;1492:170:86:-;1635:9;1629:16;1622:4;1611:9;1607:20;1600:46;1179:475:51;1224:20;1256:19;1278:84;1317:35;1278:25;:84::i;1416:1335:35:-;1509:20;1531:22;2191:2;2173:8;:15;:20;:174;;;-1:-1:-1;2326:15:35;;2306:41;;2326:8;;:20;;2306:19;:41::i;:::-;2284:63;;:18;:63;;2173:174;2091:331;;;2380:19;;;;;;;-1:-1:-1;2372:39:35;;2091:331;2639:15;;2635:24;;;2630:2;2616:17;;2606:54;;-1:-1:-1;2691:53:35;;2645:8;;2706:20;;;;2691:14;:53::i;:::-;2679:65;;1416:1335;;;;:::o;7964:3130:33:-;8061:25;8242:2;8209:4;:21;;;:36;8205:199;;;8365:15;;;;8382:10;;8285:108;;;;;8314:4;;8285:79;;:108;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8261:21;;;:132;8205:199;8414:39;;:::i;:::-;8478:20;:18;:20::i;:::-;8463:35;;;;8536:24;:22;:24::i;:::-;8508:52;;:25;;;:52;8726:16;;;;8744:10;;8688:67;;8726:16;8688:37;:67::i;:::-;8638:35;;;:117;8899:15;;;;8928:10;;8960:12;;8987:21;;;;8851:167;;8899:15;8928:10;8960:12;8851:34;:167::i;:::-;9172:25;9200:110;9239:4;:17;;;9274:4;:22;;;9200:21;:110::i;:::-;9172:138;;9369:9;9364:462;9388:4;:20;;;:27;9384:1;:31;9364:462;;;9440:371;9484:5;:12;;;9518:4;:20;;;9539:1;9518:23;;;;;;;;;;;;;;9563:5;:25;;;9610:4;:10;;;9776:17;9440:22;:371::i;:::-;9417:3;;9364:462;;;;7964:3130;9971:67;10009:4;:16;;;10027:4;:10;;;9971:37;:67::i;:::-;9922:34;;;:116;;;10089:35;;;;-1:-1:-1;10048:321:33;;;10140:218;:208;10227:4;:16;;;10300:5;:34;;;10262:5;:35;;;:72;10140:61;:208::i;:218::-;10454:35;;;;10398:34;;;;:101;;:42;:101::i;:::-;10378:121;;10599:4;:25;;;10579:17;:45;10575:278;;;10640:202;:192;10723:4;:16;;;10758:17;10793:4;:25;;;10640:57;:192::i;:202::-;10924:4;:10;;;10894:193;;;10956:4;:15;;;10994:4;:16;;;11025:4;:21;;;11060:17;10894:193;;;;;;;;;:::i;:::-;;;;;;;;7964:3130;;;;:::o;2140:168:36:-;2222:79;;;;;2261:4;;2222:52;;:79;;2275:8;;2285:15;;2222:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2140:168;:::o;1572:335:49:-;1664:12;883:3;1865:9;1857:18;;;;;;;;1878:1;1857:22;1856:44;;;1572:335;-1:-1:-1;;1572:335:49:o;16975:880:80:-;17095:13;17139:5;17147:1;17139:9;17128:1;:8;:20;17124:299;;;17164:248;17189:222;17254:90;17362:1;:8;17388:5;17396:1;17388:9;17189:47;:222::i;17164:248::-;-1:-1:-1;17596:13:80;17499:2;17596:13;17590:20;17749:66;17737:79;;16975:880::o;6501:1119::-;6635:19;6815:2;6808:4;:9;6804:270;;;6833:230;6858:204;6923:83;7024:4;7046:2;6858:47;:204::i;6833:230::-;7092:1;:8;7087:2;:13;7083:280;;;7116:236;7141:210;7206:85;7309:2;7329:1;:8;7141:47;:210::i;7116:236::-;7455:4;7450:2;:9;7440:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7440:20:80;;7431:29;;7470:120;7491:23;:6;:21;:23::i;:::-;7549:4;7528:18;:1;:16;:18::i;:::-;:25;7567:6;:13;7470:7;:120::i;:::-;6501:1119;;;;;:::o;2381:260:53:-;2492:20;2532:17;2543:5;2532:10;:17::i;:::-;2528:68;;;-1:-1:-1;2572:13:53;;;;2565:20;;2528:68;2612:22;;;;;:15;;;;;;:22;;2628:5;;2612:22;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;11759:899:33:-;11990:9;:14;11986:67;;12020:22;;:11;;;;12032:9;12020:22;;;;;;;;;12032:9;12020:11;:22;;;;;;;;;;;;;;;;;;;;;11986:67;12101:42;12132:10;12101:30;:42::i;:::-;12096:556;;12214:161;;;;;12243:4;;12214:53;;:161;;12285:10;;12313:4;;12335:2;;12355:6;;12214:161;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12096:556;;;12408:6;12396:9;:18;12392:260;;;12510:131;:121;12584:9;12611:6;12510:56;:121::i;:131::-;11759:899;;;;:::o;14683:699::-;14828:25;14869:19;14891:16;:14;:16::i;:::-;14869:38;-1:-1:-1;14921:25:33;;;14917:175;;15069:12;15062:19;;;;;14917:175;15105:16;;15101:69;;-1:-1:-1;15157:1:33;;-1:-1:-1;15142:17:33;;15101:69;15184:146;;;;;15219:4;;15184:62;;:146;;15260:12;;15286:11;;15311:9;;15184:146;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;15180:196;;;15353:12;15346:19;;;;;15180:196;14683:699;;;;;:::o;12986:1420::-;13296:27;13326:125;13378:19;13411:14;:30;;;13326:38;:125::i;:::-;13296:155;;13518:23;13544:6;:26;;;13616:11;13707:36;;;13761:223;;;;;;;;13832:12;13761:223;;;;13874:10;13761:223;;;;;;13913:5;13761:223;;;;;;13946:14;:19;;;13761:223;;;13667:331;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;13544:464;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13518:490;;14082:10;:17;14103:2;14082:23;;:114;;;-1:-1:-1;14121:32:33;;14157:39;;14121:32;;;;;;;;;;;;:::i;:::-;:75;;;;14082:114;14078:322;;;14221:168;:158;14289:11;14318:14;:19;;;14355:10;14221:50;:158::i;:168::-;12986:1420;;;;;;;:::o;1534:383:10:-;1698:12;1776:63;1854:11;1879:21;1733:177;;;;;;;;;:::i;1586:373:81:-;1672:7;1703:1;1699;:5;1695:236;;;1720:200;1745:174;1805:62;1885:1;1904;1745:42;:174::i;1720:200::-;-1:-1:-1;1947:5:81;;;1586:373::o;1081:447:10:-;1275:12;1353:67;1435:11;1460:17;1491:20;1310:211;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1081:447:10;;;;;:::o;1295:378:84:-;1483:12;1235:10;1554:37;;1605:9;1628:6;1648:8;1518:148;;;;;;;;;;:::i;1429:228:80:-;1608:2;1597:14;;1429:228::o;1896:4297::-;2046:2;2037:6;:11;2033:4154;;;2367:13;;2422:11;;2321:2;2317:15;;;2312:3;2308:25;2304:33;;2382:9;;2363:29;;;2418:22;;2470:8;2457:22;;2274:219;;;2597:4;2587:6;:14;2583:59;;;2621:7;;2583:59;3331:4;3322:6;:13;3318:2859;;;3657:2;3649:6;3645:15;3635:25;;3705:6;3697;3693:19;3755:6;3749:4;3745:17;4062:4;4056:11;4330:198;4348:4;4340:6;4337:16;4330:198;;;4396:13;;4383:27;;4457:2;4493:13;;;;4445:15;;;;4330:198;;;4597:18;;-1:-1:-1;3364:1269:80;;;4878:2;4870:6;4866:15;4856:25;;4926:6;4918;4914:19;4976:6;4970:4;4966:17;5286:6;5280:13;5865:191;5882:4;5876;5872:15;5865:191;;;5930:11;;5917:25;;5975:13;;;;;6021;;;;5865:191;;;6126:19;;-1:-1:-1;;4680:1483:80;1896:4297;;;:::o;1973:164:53:-;2095:35;;;945:42;2095:35;1973:164;;;:::o;726:349:10:-;873:12;951:58;1024:11;1049:9;908:160;;;;;;;;;:::i;4558:717:53:-;4675:33;4998:21;5022:31;5037:15;5022:14;:31::i;:::-;4998:55;;5157:8;:15;5145:9;:27;5134:40;;5199:9;5188:22;;5224:8;5246;5104:160;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;5094:171;;5104:160;5094:171;;;;;4558:717;-1:-1:-1;;;;4558:717:53:o;1923:415:10:-;2108:12;2186:56;2257:11;2282:15;2311:10;2143:188;;;;;;;;;;:::i;1314:322:87:-;1467:12;779:10;1538:28;;1580:9;1603:1;1618;1502:127;;;;;;;;;;:::i;2818:1397:53:-;2903:21;3025:10;;;3021:1188;;3062:12;;;3072:1;3062:12;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3062:12:53;3051:23;;3102:4;3088:18;;:8;3097:1;3088:11;;;;;;;;;;;:18;;;;;;;;;;;3021:1188;;;3135:4;3127:5;:12;;;3123:1086;;;3166:12;;;3176:1;3166:12;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3166:12:53;3155:23;;3217:5;3206:18;;3192:8;3201:1;3192:11;;;;;;;3123:1086;3254:4;3245:5;:13;;;3241:968;;3285:12;;;3295:1;3285:12;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3285:12:53;3274:23;;3325:4;3311:18;;:8;3320:1;3311:11;;;;;;;;;;;:18;;;;;;;;;;;3368:5;3357:18;;3343:8;3352:1;3343:11;;;;;;;3241:968;3405:6;3396:5;:15;;;3392:817;;3438:12;;;3448:1;3438:12;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3438:12:53;3427:23;;3478:4;3464:18;;:8;3473:1;3464:11;;;;;;;;;;;:18;;;;;;;;;;-1:-1:-1;3496:11:53;;3510:34;;;;;;;3496:8;;3505:1;;3496:11;;;;;;;;;:48;;;;;;;;;;;3583:5;3572:18;;3558:8;3567:1;3558:11;;;;;;;3392:817;3620:8;3611:5;:17;;;3607:602;;3655:12;;;3665:1;3655:12;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3655:12:53;3644:23;;3695:4;3681:18;;:8;3690:1;3681:11;;;;;;;;;;;:18;;;;;;;;;;-1:-1:-1;3713:11:53;;3727:37;;;;;;;3713:8;;3722:1;;3713:11;;;;;;;;;:51;;;;;;;;;;-1:-1:-1;3778:11:53;;3792:34;;;;;;;3778:8;;3787:1;;3778:11;;;;;;;;;:48;;;;;;;;;;;3865:5;3854:18;;3840:8;3849:1;3840:11;;;;;;;3607:602;3914:12;;;3924:1;3914:12;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3914:12:53;3903:23;;3954:4;3940:18;;:8;3949:1;3940:11;;;;;;;;;;;:18;;;;;;;;;;-1:-1:-1;3972:11:53;;3986:39;;;;;;;3972:8;;3981:1;;3972:11;;;;;;;;;:53;;;;;;;;;;-1:-1:-1;4039:11:53;;4053:37;;;;;;;4039:8;;4048:1;;4039:11;;;;;;;;;:51;;;;;;;;;;-1:-1:-1;4104:11:53;;4118:34;;;;;;;4104:8;;4113:1;;4104:11;;;;;;;;;:48;;;;;;;;;;;4191:5;4180:18;;4166:8;4175:1;4166:11;;;;;;;;;;;:32;;;;;;;;;;;2818:1397;;;:::o;-1:-1:-1:-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;283:146::-;358:20;;383:41;358:20;383:41;:::i;1228:774::-;;1377:3;1370:4;1362:6;1358:17;1354:27;1344:2;;-1:-1;;1385:12;1344:2;1432:6;1419:20;1454:112;1469:96;1558:6;1469:96;:::i;:::-;1454:112;:::i;:::-;1594:21;;;1445:121;-1:-1;1638:4;1651:14;;;;1626:17;;;1746:1;1731:265;1756:6;1753:1;1750:13;1731:265;;;1839:3;1826:17;1630:6;1814:30;5637:4;;5616:19;1814:30;5620:3;5616:19;;5612:30;5609:2;;;1746:1;;5645:12;5609:2;5673:20;5637:4;5673:20;:::i;:::-;1638:4;1814:30;;6446:20;6471:32;6497:5;6471:32;:::i;:::-;5761:74;;5909:18;;;5896:32;;5948:18;5937:30;;5934:2;;;1746:1;;5970:12;5934:2;6015:58;6069:3;1638:4;6060:6;1814:30;6045:22;;6015:58;:::i;:::-;5997:16;;;5990:84;1851:82;;-1:-1;;1947:14;;;;1975;;;;1778:1;1771:9;1731:265;;;1735:14;;;;;1337:665;;;;:::o;2422:440::-;;2523:3;2516:4;2508:6;2504:17;2500:27;2490:2;;-1:-1;;2531:12;2490:2;2578:6;2565:20;2600:64;2615:48;2656:6;2615:48;:::i;2600:64::-;2591:73;;2684:6;2677:5;2670:21;2788:3;2720:4;2779:6;2712;2770:16;;2767:25;2764:2;;;2805:1;;2795:12;2764:2;44342:6;2720:4;2712:6;2708:17;2720:4;2746:5;2742:16;44319:30;44398:1;44380:16;;;2720:4;44380:16;44373:27;2746:5;2483:379;-1:-1;;2483:379::o;2871:442::-;;2983:3;2976:4;2968:6;2964:17;2960:27;2950:2;;-1:-1;;2991:12;2950:2;3031:6;3025:13;3053:64;3068:48;3109:6;3068:48;:::i;3053:64::-;3044:73;;3137:6;3130:5;3123:21;3241:3;3173:4;3232:6;3165;3223:16;;3220:25;3217:2;;;3258:1;;3248:12;3217:2;3268:39;3300:6;3173:4;3199:5;3195:16;3173:4;3165:6;3161:17;3268:39;:::i;6515:241::-;;6619:2;6607:9;6598:7;6594:23;6590:32;6587:2;;;-1:-1;;6625:12;6587:2;85:6;72:20;97:33;124:5;97:33;:::i;6763:263::-;;6878:2;6866:9;6857:7;6853:23;6849:32;6846:2;;;-1:-1;;6884:12;6846:2;226:6;220:13;238:33;265:5;238:33;:::i;7033:410::-;;7182:2;;7170:9;7161:7;7157:23;7153:32;7150:2;;;-1:-1;;7188:12;7150:2;7239:17;7233:24;7277:18;7269:6;7266:30;7263:2;;;-1:-1;;7299:12;7263:2;7395:22;;582:4;570:17;;566:27;-1:-1;556:2;;-1:-1;;597:12;556:2;637:6;631:13;659:89;674:73;740:6;674:73;:::i;659:89::-;776:21;;;833:14;;;;808:17;;;-1:-1;913:246;938:6;935:1;932:13;913:246;;;1038:57;1091:3;7182:2;1014:3;1008:10;812:6;996:23;;1038:57;:::i;:::-;1026:70;;1110:14;;;;1138;;;;960:1;953:9;913:246;;;-1:-1;7319:108;;7144:299;-1:-1;;;;;;;;7144:299::o;7450:257::-;;7562:2;7550:9;7541:7;7537:23;7533:32;7530:2;;;-1:-1;;7568:12;7530:2;2091:6;2085:13;45774:5;41618:13;41611:21;45752:5;45749:32;45739:2;;-1:-1;;45785:12;7714:261;;7828:2;7816:9;7807:7;7803:23;7799:32;7796:2;;;-1:-1;;7834:12;7796:2;2365:6;2359:13;41946:66;46020:5;41935:78;45996:5;45993:34;45983:2;;-1:-1;;46031:12;7982:360;;8106:2;8094:9;8085:7;8081:23;8077:32;8074:2;;;-1:-1;;8112:12;8074:2;8163:17;8157:24;8201:18;8193:6;8190:30;8187:2;;;-1:-1;;8223:12;8187:2;8253:73;8318:7;8309:6;8298:9;8294:22;8253:73;:::i;:::-;8243:83;8068:274;-1:-1;;;;8068:274::o;8349:1035::-;;;;;;8624:3;8612:9;8603:7;8599:23;8595:33;8592:2;;;-1:-1;;8631:12;8592:2;3424:6;3411:20;3436:56;3486:5;3436:56;:::i;:::-;8683:86;-1:-1;8806:2;8868:22;;3411:20;3436:56;3411:20;3436:56;:::i;:::-;8814:86;-1:-1;8937:2;8976:22;;6169:20;;-1:-1;9045:2;9084:22;;6169:20;;-1:-1;9181:3;9166:19;;9153:33;9206:18;9195:30;;9192:2;;;-1:-1;;9228:12;9192:2;9258:110;9360:7;9351:6;9340:9;9336:22;9258:110;:::i;:::-;9248:120;;;8586:798;;;;;;;;:::o;9703:399::-;;9843:2;9831:9;9822:7;9818:23;9814:32;9811:2;;;-1:-1;;9849:12;9811:2;9907:17;9894:31;9945:18;;9937:6;9934:30;9931:2;;;-1:-1;;9967:12;9931:2;10069:6;10058:9;10054:22;;;3867:6;;3855:9;3850:3;3846:19;3842:32;3839:2;;;-1:-1;;3877:12;3839:2;3905:22;3867:6;3905:22;:::i;:::-;3896:31;;4010:57;4063:3;4039:22;4010:57;:::i;:::-;3992:16;3985:83;4168:72;4236:3;9843:2;4216:9;4212:22;4168:72;:::i;:::-;9843:2;4154:5;4150:16;4143:98;4342:72;4410:3;4309:2;4390:9;4386:22;4342:72;:::i;:::-;4309:2;4328:5;4324:16;4317:98;4488:2;4546:9;4542:22;6169:20;4488:2;4507:5;4503:16;4496:75;4648:3;4707:9;4703:22;6169:20;4648:3;4668:5;4664:16;4657:75;4832:3;4821:9;4817:19;4804:33;9945:18;4849:6;4846:30;4843:2;;;-1:-1;;4879:12;4843:2;4924:106;5026:3;5017:6;5006:9;5002:22;4924:106;:::i;:::-;4832:3;4910:5;4906:16;4899:132;;5100:3;5159:9;5155:22;2212:20;5100:3;5120:5;5116:16;5109:75;5286:3;5275:9;5271:19;5258:33;9945:18;5303:6;5300:30;5297:2;;;-1:-1;;5333:12;5297:2;5378:58;5432:3;5423:6;5412:9;5408:22;5378:58;:::i;:::-;5286:3;5360:16;;5353:84;-1:-1;5364:5;9805:297;-1:-1;;;;;9805:297::o;10109:263::-;;10224:2;10212:9;10203:7;10199:23;10195:32;10192:2;;;-1:-1;;10230:12;10192:2;-1:-1;6317:13;;10186:186;-1:-1;10186:186::o;11326:127::-;42686:42;42675:54;11403:45;;11397:56::o;15938:323::-;;16070:5;38974:12;40192:6;40187:3;40180:19;16153:52;16198:6;40229:4;40224:3;40220:14;40229:4;16179:5;16175:16;16153:52;:::i;:::-;45057:2;45037:14;45053:7;45033:28;16217:39;;;;40229:4;16217:39;;16018:243;-1:-1;;16018:243::o;18940:1913::-;;19105:6;19204:79;19268:14;19181:16;19175:23;19204:79;:::i;:::-;19364:4;19357:5;19353:16;19347:23;19376:63;19364:4;19428:3;19424:14;19410:12;19376:63;:::i;:::-;;19525:4;19518:5;19514:16;19508:23;19525:4;19589:3;19585:14;15652:37;19686:4;19679:5;19675:16;19669:23;19686:4;19750:3;19746:14;15652:37;19857:4;19850:5;19846:16;19840:23;19857:4;19921:3;19917:14;15652:37;20011:4;20004:5;20000:16;19994:23;20011:4;20075:3;20071:14;15652:37;20169:4;20162:5;20158:16;20152:23;19105:6;20169:4;20199:3;20195:14;20188:38;20241:71;19105:6;19100:3;19096:16;20293:12;20241:71;:::i;:::-;20233:79;;;20398:4;20391:5;20387:16;20381:23;20398:4;20462:3;20458:14;15652:37;20556:6;;20549:5;20545:18;20539:25;20570:88;20556:6;20645:3;20641:16;20627:12;20570:88;:::i;:::-;-1:-1;;20742:6;20731:18;;;20725:25;20804:16;;;;15652:37;;;;20837:11;19078:1775;-1:-1;19078:1775::o;24966:678::-;;41716:66;;15571:5;41705:78;15530:3;15523:56;41716:66;15571:5;41705:78;25287:1;25282:3;25278:11;15523:56;;45144:14;41428:5;45148:2;45144:14;;25386:11;25282:3;25386:11;11923:58;16778:5;38974:12;16889:52;16934:6;25496:12;25282:3;25496:12;16922:4;16915:5;16911:16;16889:52;:::i;:::-;16953:16;;;;25496:12;16953:16;;25180:464;-1:-1;;;;;25180:464::o;25651:222::-;42686:42;42675:54;;;;11403:45;;25778:2;25763:18;;25749:124::o;25880:449::-;;42686:42;41428:5;42675:54;11410:3;11403:45;26069:2;26203;26192:9;26188:18;26181:48;26243:76;26069:2;26058:9;26054:18;26305:6;26243:76;:::i;26336:1712::-;;26909:3;;26898:9;26894:19;42686:42;;41428:5;42675:54;11263:3;11256:58;27082:2;15682:5;27082:2;27071:9;27067:18;15652:37;27173:2;42686:42;41428:5;42675:54;27173:2;27162:9;27158:18;11256:58;42686:42;17131:5;42675:54;27279:2;27268:9;27264:18;17065:73;42686:42;41428:5;42675:54;27385:3;27374:9;27370:19;11403:45;15682:5;27469:3;27458:9;27454:19;15652:37;15682:5;27553:3;27542:9;27538:19;15652:37;26909:3;27591;27580:9;27576:19;27569:49;27632:172;;;14613:5;38974:12;14519:100;;40192:6;40187:3;40180:19;40220:14;;;;26898:9;40220:14;14625:125;;40220:14;27082:2;14807:6;14803:17;26898:9;14794:27;;14782:39;;27082:2;14924:5;38434:14;-1:-1;14963:426;14988:6;14985:1;14982:13;14963:426;;;15040:20;;;;;15028:33;;15089:13;;24272:23;;42892:10;42881:22;24918:36;;24430:16;;24424:23;24467:14;;;24460:38;;;24513:71;24186:14;;;24424:23;24513:71;:::i;:::-;15368:14;;;;15109:136;-1:-1;;39727:14;;;;15010:1;15003:9;14963:426;;;14967:14;;;;;15682:5;27883:3;27872:9;27868:19;15652:37;27937:9;27931:4;27927:20;27921:3;27910:9;27906:19;27899:49;27962:76;28033:4;28024:6;27962:76;:::i;:::-;27954:84;26880:1168;-1:-1;;;;;;;;;;;;;;26880:1168::o;28055:333::-;42686:42;42675:54;;;11403:45;;42675:54;;28374:2;28359:18;;11403:45;28210:2;28195:18;;28181:207::o;28395:556::-;42686:42;42675:54;;;11403:45;;42675:54;;;;28771:2;28756:18;;11403:45;28854:2;28839:18;;15652:37;28937:2;28922:18;;15652:37;;;;28606:3;28591:19;;28577:374::o;28958:612::-;;42686:42;11441:5;42675:54;11410:3;11403:45;29177:2;29295;29284:9;29280:18;29273:48;29335:76;29177:2;29166:9;29162:18;29397:6;29335:76;:::i;:::-;29459:9;29453:4;29449:20;29444:2;29433:9;29429:18;29422:48;29484:76;29555:4;29546:6;29484:76;:::i;:::-;29476:84;29148:422;-1:-1;;;;;;29148:422::o;29577:333::-;42686:42;42675:54;;;;11403:45;;29896:2;29881:18;;15652:37;29732:2;29717:18;;29703:207::o;29917:444::-;42686:42;42675:54;;;;11403:45;;30264:2;30249:18;;15652:37;;;;30347:2;30332:18;;15652:37;30100:2;30085:18;;30071:290::o;30368:813::-;;30715:2;30704:9;30700:18;30715:2;30736:17;30729:47;30790:182;13371:5;38974:12;40192:6;40187:3;40180:19;40220:14;30704:9;40220:14;13383:130;;40229:4;;;40220:14;40229:4;13570:6;13566:17;30704:9;13557:27;;40229:4;13692:5;38434:14;-1:-1;13731:441;13756:6;13753:1;13750:13;13731:441;;;13808:20;30704:9;13812:4;13808:20;;13803:3;13796:33;10753:120;10869:3;13863:6;13857:13;10753:120;:::i;:::-;14151:14;;;;13877:146;-1:-1;39727:14;;;;13778:1;13771:9;13731:441;;;13735:14;;31020:9;31014:4;31010:20;40229:4;30994:9;30990:18;30983:48;31045:126;;;12240:5;38974:12;12169:77;;12259:95;12347:6;12342:3;12259:95;:::i;:::-;12252:102;;;;40229:4;12411:6;12407:17;12402:3;12398:27;40229:4;12505:5;38434:14;-1:-1;12544:357;12569:6;12566:1;12563:13;12544:357;;;12631:9;12625:4;12621:20;12616:3;12609:33;10499:64;10559:3;12676:6;12670:13;10499:64;:::i;:::-;12880:14;;;;12690:90;-1:-1;39727:14;;;;13778:1;12584:9;12544:357;;;-1:-1;31037:134;;30686:495;-1:-1;;;;;;;;;30686:495::o;31188:528::-;;15682:5;15659:3;15652:37;42686:42;41428:5;42675:54;31553:2;31542:9;31538:18;11403:45;31389:2;31590;31579:9;31575:18;31568:48;31630:76;31389:2;31378:9;31374:18;31692:6;31630:76;:::i;:::-;31622:84;31360:356;-1:-1;;;;;31360:356::o;31723:218::-;41946:66;41935:78;;;;15890:36;;31848:2;31833:18;;31819:122::o;31948:329::-;41946:66;41935:78;;;;15890:36;;42686:42;42675:54;32263:2;32248:18;;11403:45;32101:2;32086:18;;32072:205::o;32686:618::-;42686:42;42675:54;;;17065:73;;42675:54;;;33116:2;33101:18;;11403:45;42675:54;;33207:2;33192:18;;11256:58;33290:2;33275:18;;15652:37;;;;32928:3;32913:19;;32899:405::o;33598:482::-;33800:2;33785:18;;45266:1;45256:12;;45246:2;;45272:9;45246:2;17610:69;;;33983:2;33968:18;;15652:37;;;;34066:2;34051:18;;;15652:37;33771:309;:::o;34087:512::-;34304:2;34289:18;;45400:1;45390:12;;45380:2;;45406:9;34606:310;;34753:2;34774:17;34767:47;34828:78;34753:2;34742:9;34738:18;34892:6;34828:78;:::i;34923:416::-;35123:2;35137:47;;;18471:1;35108:18;;;40180:19;18506:6;40220:14;;;18486:27;18532:12;;;35094:245::o;35346:721::-;;35647:2;35668:17;35661:47;35722:132;35647:2;35636:9;35632:18;35840:6;35722:132;:::i;:::-;35892:20;;;35887:2;35872:18;;;35865:48;40180:19;;;40220:14;;35618:449;-1:-1;35618:449::o;36074:406::-;;36269:2;36290:17;36283:47;23245:16;23239:23;36269:2;36258:9;36254:18;15652:37;36269:2;23405:5;23401:16;23395:23;42686:42;;41428:5;42675:54;23488:14;36258:9;23488:14;11403:45;42686:42;23488:14;23576:5;23572:16;23566:23;42675:54;23659:14;36258:9;23659:14;11403:45;;;23659:14;23746:5;23742:16;23736:23;23165:4;;36258:9;23779:14;23772:38;23825:71;23156:14;36258:9;23156:14;23877:12;23825:71;:::i;36487:222::-;15652:37;;;36614:2;36599:18;;36585:124::o;36716:333::-;15652:37;;;37035:2;37020:18;;15652:37;36871:2;36856:18;;36842:207::o;37056:256::-;37118:2;37112:9;37144:17;;;37219:18;37204:34;;37240:22;;;37201:62;37198:2;;;37276:1;;37266:12;37198:2;37118;37285:22;37096:216;;-1:-1;37096:216::o;37319:313::-;;37487:18;37479:6;37476:30;37473:2;;;-1:-1;;37509:12;37473:2;-1:-1;37554:4;37542:17;;;37607:15;;37410:222::o;37982:321::-;;38125:18;38117:6;38114:30;38111:2;;;-1:-1;;38147:12;38111:2;-1:-1;38224:4;38201:17;38220:9;38197:33;38288:4;38278:15;;38048:255::o;44415:268::-;44480:1;44487:101;44501:6;44498:1;44495:13;44487:101;;;44568:11;;;44562:18;44549:11;;;44542:39;44523:2;44516:10;44487:101;;;44603:6;44600:1;44597:13;44594:2;;;-1:-1;;44480:1;44650:16;;44643:27;44464:219::o;45429:117::-;42686:42;45516:5;42675:54;45491:5;45488:35;45478:2;;45537:1;;45527:12;45478:2;45472:74;:::o;46517:115::-;42892:10;46602:5;42881:22;46578:5;46575:34;46565:2;;46623:1;;46613:12"
            }
        }
    },
    "sourceTreeHashHex": "0xeedbde1475a1240c1113e92bca2bdec9e004dfbf0d6fba066e4790eeda0a07ea",
    "sources": {
        "./TestMetaTransactionsTransformERC20Feature.sol": {
            "id": 70
        },
        "../src/features/TransformERC20Feature.sol": {
            "id": 33
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 76
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 78
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 86
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 80
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 84
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 81
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 87
        },
        "../src/errors/LibTransformERC20RichErrors.sol": {
            "id": 10
        },
        "../src/fixins/FixinCommon.sol": {
            "id": 36
        },
        "../src/errors/LibCommonRichErrors.sol": {
            "id": 2
        },
        "../src/errors/LibOwnableRichErrors.sol": {
            "id": 5
        },
        "../src/features/IOwnableFeature.sol": {
            "id": 21
        },
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": {
            "id": 89
        },
        "../src/features/ISimpleFunctionRegistryFeature.sol": {
            "id": 23
        },
        "../src/migrations/LibMigrate.sol": {
            "id": 42
        },
        "../src/external/IFlashWallet.sol": {
            "id": 15
        },
        "../src/external/FlashWallet.sol": {
            "id": 13
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibOwnableRichErrorsV06.sol": {
            "id": 85
        },
        "../src/errors/LibWalletRichErrors.sol": {
            "id": 11
        },
        "../src/storage/LibTransformERC20Storage.sol": {
            "id": 51
        },
        "../src/storage/LibStorage.sol": {
            "id": 49
        },
        "../src/transformers/IERC20Transformer.sol": {
            "id": 52
        },
        "../src/transformers/LibERC20Transformer.sol": {
            "id": 53
        },
        "../src/features/libs/LibSignedCallData.sol": {
            "id": 35
        },
        "../src/features/ITransformERC20Feature.sol": {
            "id": 25
        },
        "../src/features/ITokenSpenderFeature.sol": {
            "id": 24
        },
        "../src/features/IFeature.sol": {
            "id": 18
        },
        "../src/features/ISignatureValidatorFeature.sol": {
            "id": 22
        },
        "../src/features/IMetaTransactionsFeature.sol": {
            "id": 20
        }
    },
    "sourceCodes": {
        "./TestMetaTransactionsTransformERC20Feature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"../src/features/TransformERC20Feature.sol\";\nimport \"../src/features/IMetaTransactionsFeature.sol\";\n\n\ncontract TestMetaTransactionsTransformERC20Feature is\n    TransformERC20Feature\n{\n    event TransformERC20Called(\n        address sender,\n        uint256 value,\n        address taker,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 minOutputTokenAmount,\n        Transformation[] transformations,\n        bytes32 callDataHash,\n        bytes callDataSignature\n    );\n\n    function _transformERC20(TransformERC20Args memory args)\n        public\n        override\n        payable\n        returns (uint256 outputTokenAmount)\n    {\n        if (msg.value == 666) {\n            revert('FAIL');\n        }\n\n        if (msg.value == 777) {\n            // Try to reenter `executeMetaTransaction()`\n            IMetaTransactionsFeature(address(this)).executeMetaTransaction(\n                IMetaTransactionsFeature.MetaTransactionData({\n                    signer: address(0),\n                    sender: address(0),\n                    minGasPrice: 0,\n                    maxGasPrice: 0,\n                    expirationTimeSeconds: 0,\n                    salt: 0,\n                    callData: \"\",\n                    value: 0,\n                    feeToken: IERC20TokenV06(0),\n                    feeAmount: 0\n                }),\n                \"\"\n            );\n        }\n\n        if (msg.value == 888) {\n            // Try to reenter `batchExecuteMetaTransactions()`\n            IMetaTransactionsFeature.MetaTransactionData[] memory mtxs =\n                new IMetaTransactionsFeature.MetaTransactionData[](1);\n            bytes[] memory signatures = new bytes[](1);\n            mtxs[0] = IMetaTransactionsFeature.MetaTransactionData({\n                signer: address(0),\n                sender: address(0),\n                minGasPrice: 0,\n                maxGasPrice: 0,\n                expirationTimeSeconds: 0,\n                salt: 0,\n                callData: \"\",\n                value: 0,\n                feeToken: IERC20TokenV06(0),\n                feeAmount: 0\n            });\n            signatures[0] = \"\";\n            IMetaTransactionsFeature(address(this)).batchExecuteMetaTransactions(\n                mtxs,\n                signatures\n            );\n        }\n\n        emit TransformERC20Called(\n            msg.sender,\n            msg.value,\n            args.taker,\n            args.inputToken,\n            args.outputToken,\n            args.inputTokenAmount,\n            args.minOutputTokenAmount,\n            args.transformations,\n            args.callDataHash,\n            args.callDataSignature\n        );\n        return 1337;\n    }\n}\n",
        "../src/features/TransformERC20Feature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../errors/LibTransformERC20RichErrors.sol\";\nimport \"../fixins/FixinCommon.sol\";\nimport \"../migrations/LibMigrate.sol\";\nimport \"../external/IFlashWallet.sol\";\nimport \"../external/FlashWallet.sol\";\nimport \"../storage/LibTransformERC20Storage.sol\";\nimport \"../transformers/IERC20Transformer.sol\";\nimport \"../transformers/LibERC20Transformer.sol\";\nimport \"./libs/LibSignedCallData.sol\";\nimport \"./ITransformERC20Feature.sol\";\nimport \"./ITokenSpenderFeature.sol\";\nimport \"./IFeature.sol\";\nimport \"./ISignatureValidatorFeature.sol\";\n\n\n/// @dev Feature to composably transform between ERC20 tokens.\ncontract TransformERC20Feature is\n    IFeature,\n    ITransformERC20Feature,\n    FixinCommon\n{\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Stack vars for `_transformERC20Private()`.\n    struct TransformERC20PrivateState {\n        IFlashWallet wallet;\n        address transformerDeployer;\n        uint256 takerOutputTokenBalanceBefore;\n        uint256 takerOutputTokenBalanceAfter;\n    }\n\n    /// @dev Name of this feature.\n    string public constant override FEATURE_NAME = \"TransformERC20\";\n    /// @dev Version of this feature.\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 2, 0);\n\n    /// @dev Initialize and register this feature.\n    ///      Should be delegatecalled by `Migrate.migrate()`.\n    /// @param transformerDeployer The trusted deployer for transformers.\n    /// @return success `LibMigrate.SUCCESS` on success.\n    function migrate(address transformerDeployer)\n        external\n        returns (bytes4 success)\n    {\n        _registerFeatureFunction(this.getTransformerDeployer.selector);\n        _registerFeatureFunction(this.createTransformWallet.selector);\n        _registerFeatureFunction(this.getTransformWallet.selector);\n        _registerFeatureFunction(this.setTransformerDeployer.selector);\n        _registerFeatureFunction(this.setQuoteSigner.selector);\n        _registerFeatureFunction(this.getQuoteSigner.selector);\n        _registerFeatureFunction(this.transformERC20.selector);\n        _registerFeatureFunction(this._transformERC20.selector);\n        if (this.getTransformWallet() == IFlashWallet(address(0))) {\n            // Create the transform wallet if it doesn't exist.\n            this.createTransformWallet();\n        }\n        LibTransformERC20Storage.getStorage().transformerDeployer = transformerDeployer;\n        return LibMigrate.MIGRATE_SUCCESS;\n    }\n\n    /// @dev Replace the allowed deployer for transformers.\n    ///      Only callable by the owner.\n    /// @param transformerDeployer The address of the trusted deployer for transformers.\n    function setTransformerDeployer(address transformerDeployer)\n        external\n        override\n        onlyOwner\n    {\n        LibTransformERC20Storage.getStorage().transformerDeployer = transformerDeployer;\n        emit TransformerDeployerUpdated(transformerDeployer);\n    }\n\n    /// @dev Replace the optional signer for `transformERC20()` calldata.\n    ///      Only callable by the owner.\n    /// @param quoteSigner The address of the new calldata signer.\n    function setQuoteSigner(address quoteSigner)\n        external\n        override\n        onlyOwner\n    {\n        LibTransformERC20Storage.getStorage().quoteSigner = quoteSigner;\n        emit QuoteSignerUpdated(quoteSigner);\n    }\n\n    /// @dev Return the allowed deployer for transformers.\n    /// @return deployer The transform deployer address.\n    function getTransformerDeployer()\n        public\n        override\n        view\n        returns (address deployer)\n    {\n        return LibTransformERC20Storage.getStorage().transformerDeployer;\n    }\n\n    /// @dev Return the optional signer for `transformERC20()` calldata.\n    /// @return signer The signer address.\n    function getQuoteSigner()\n        public\n        override\n        view\n        returns (address signer)\n    {\n        return LibTransformERC20Storage.getStorage().quoteSigner;\n    }\n\n    /// @dev Deploy a new wallet instance and replace the current one with it.\n    ///      Useful if we somehow break the current wallet instance.\n    ///      Only callable by the owner.\n    /// @return wallet The new wallet instance.\n    function createTransformWallet()\n        public\n        override\n        onlyOwner\n        returns (IFlashWallet wallet)\n    {\n        wallet = new FlashWallet();\n        LibTransformERC20Storage.getStorage().wallet = wallet;\n    }\n\n    /// @dev Executes a series of transformations to convert an ERC20 `inputToken`\n    ///      to an ERC20 `outputToken`.\n    /// @param inputToken The token being provided by the sender.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the sender.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the sender.\n    ///        If set to `uint256(-1)`, the entire spendable balance of the taker\n    ///        will be solt.\n    /// @param minOutputTokenAmount The minimum amount of `outputToken` the sender\n    ///        must receive for the entire transformation to succeed. If set to zero,\n    ///        the minimum output token transfer will not be asserted.\n    /// @param transformations The transformations to execute on the token balance(s)\n    ///        in sequence.\n    /// @return outputTokenAmount The amount of `outputToken` received by the sender.\n    function transformERC20(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 minOutputTokenAmount,\n        Transformation[] memory transformations\n    )\n        public\n        override\n        payable\n        returns (uint256 outputTokenAmount)\n    {\n        (bytes32 callDataHash, bytes memory callDataSignature) =\n            LibSignedCallData.parseCallData(msg.data);\n        return _transformERC20Private(\n            TransformERC20Args({\n                taker: msg.sender,\n                inputToken: inputToken,\n                outputToken: outputToken,\n                inputTokenAmount: inputTokenAmount,\n                minOutputTokenAmount: minOutputTokenAmount,\n                transformations: transformations,\n                callDataHash: callDataHash,\n                callDataSignature: callDataSignature\n            })\n        );\n    }\n\n    /// @dev Internal version of `transformERC20()`. Only callable from within.\n    /// @param args A `TransformERC20Args` struct.\n    /// @return outputTokenAmount The amount of `outputToken` received by the taker.\n    function _transformERC20(TransformERC20Args memory args)\n        public\n        virtual\n        override\n        payable\n        onlySelf\n        returns (uint256 outputTokenAmount)\n    {\n        return _transformERC20Private(args);\n    }\n\n    /// @dev Private version of `transformERC20()`.\n    /// @param args A `TransformERC20Args` struct.\n    /// @return outputTokenAmount The amount of `outputToken` received by the taker.\n    function _transformERC20Private(TransformERC20Args memory args)\n        private\n        returns (uint256 outputTokenAmount)\n    {\n        // If the input token amount is -1, transform the taker's entire\n        // spendable balance.\n        if (args.inputTokenAmount == uint256(-1)) {\n            args.inputTokenAmount = ITokenSpenderFeature(address(this))\n                .getSpendableERC20BalanceOf(args.inputToken, args.taker);\n        }\n\n        TransformERC20PrivateState memory state;\n        state.wallet = getTransformWallet();\n        state.transformerDeployer = getTransformerDeployer();\n\n        // Remember the initial output token balance of the taker.\n        state.takerOutputTokenBalanceBefore =\n            LibERC20Transformer.getTokenBalanceOf(args.outputToken, args.taker);\n\n        // Pull input tokens from the taker to the wallet and transfer attached ETH.\n        _transferInputTokensAndAttachedEth(\n            args.inputToken,\n            args.taker,\n            address(state.wallet),\n            args.inputTokenAmount\n        );\n\n        {\n            // Validate that the calldata was signed by the quote signer.\n            // `validCallDataHash` will be 0x0 if not.\n            bytes32 validCallDataHash = _getValidCallDataHash(\n                args.callDataHash,\n                args.callDataSignature\n            );\n            // Perform transformations.\n            for (uint256 i = 0; i < args.transformations.length; ++i) {\n                _executeTransformation(\n                    state.wallet,\n                    args.transformations[i],\n                    state.transformerDeployer,\n                    args.taker,\n                    // Transformers will receive a null calldata hash if\n                    // the calldata was not properly signed.\n                    validCallDataHash\n                );\n            }\n        }\n\n        // Compute how much output token has been transferred to the taker.\n        state.takerOutputTokenBalanceAfter =\n            LibERC20Transformer.getTokenBalanceOf(args.outputToken, args.taker);\n        if (state.takerOutputTokenBalanceAfter < state.takerOutputTokenBalanceBefore) {\n            LibTransformERC20RichErrors.NegativeTransformERC20OutputError(\n                address(args.outputToken),\n                state.takerOutputTokenBalanceBefore - state.takerOutputTokenBalanceAfter\n            ).rrevert();\n        }\n        outputTokenAmount = state.takerOutputTokenBalanceAfter.safeSub(\n            state.takerOutputTokenBalanceBefore\n        );\n        // Ensure enough output token has been sent to the taker.\n        if (outputTokenAmount < args.minOutputTokenAmount) {\n            LibTransformERC20RichErrors.IncompleteTransformERC20Error(\n                address(args.outputToken),\n                outputTokenAmount,\n                args.minOutputTokenAmount\n            ).rrevert();\n        }\n\n        // Emit an event.\n        emit TransformedERC20(\n            args.taker,\n            address(args.inputToken),\n            address(args.outputToken),\n            args.inputTokenAmount,\n            outputTokenAmount\n        );\n    }\n\n    /// @dev Return the current wallet instance that will serve as the execution\n    ///      context for transformations.\n    /// @return wallet The wallet instance.\n    function getTransformWallet()\n        public\n        override\n        view\n        returns (IFlashWallet wallet)\n    {\n        return LibTransformERC20Storage.getStorage().wallet;\n    }\n\n    /// @dev Transfer input tokens from the taker and any attached ETH to `to`\n    /// @param inputToken The token to pull from the taker.\n    /// @param from The from (taker) address.\n    /// @param to The recipient of tokens and ETH.\n    /// @param amount Amount of `inputToken` tokens to transfer.\n    function _transferInputTokensAndAttachedEth(\n        IERC20TokenV06 inputToken,\n        address from,\n        address payable to,\n        uint256 amount\n    )\n        private\n    {\n        // Transfer any attached ETH.\n        if (msg.value != 0) {\n            to.transfer(msg.value);\n        }\n        // Transfer input tokens.\n        if (!LibERC20Transformer.isTokenETH(inputToken)) {\n            // Token is not ETH, so pull ERC20 tokens.\n            ITokenSpenderFeature(address(this))._spendERC20Tokens(\n                inputToken,\n                from,\n                to,\n                amount\n            );\n        } else if (msg.value < amount) {\n             // Token is ETH, so the caller must attach enough ETH to the call.\n            LibTransformERC20RichErrors.InsufficientEthAttachedError(\n                msg.value,\n                amount\n            ).rrevert();\n        }\n    }\n\n    /// @dev Executs a transformer in the context of `wallet`.\n    /// @param wallet The wallet instance.\n    /// @param transformation The transformation.\n    /// @param transformerDeployer The address of the transformer deployer.\n    /// @param taker The taker address.\n    /// @param callDataHash Hash of the calldata.\n    function _executeTransformation(\n        IFlashWallet wallet,\n        Transformation memory transformation,\n        address transformerDeployer,\n        address payable taker,\n        bytes32 callDataHash\n    )\n        private\n    {\n        // Derive the transformer address from the deployment nonce.\n        address payable transformer = LibERC20Transformer.getDeployedAddress(\n            transformerDeployer,\n            transformation.deploymentNonce\n        );\n        // Call `transformer.transform()` as the wallet.\n        bytes memory resultData = wallet.executeDelegateCall(\n            // The call target.\n            transformer,\n            // Call data.\n            abi.encodeWithSelector(\n                IERC20Transformer.transform.selector,\n                IERC20Transformer.TransformContext({\n                    callDataHash: callDataHash,\n                    sender: msg.sender,\n                    taker: taker,\n                    data: transformation.data\n                })\n            )\n        );\n        // Ensure the transformer returned the magic bytes.\n        if (resultData.length != 32 ||\n            abi.decode(resultData, (bytes4)) != LibERC20Transformer.TRANSFORMER_SUCCESS\n        ) {\n            LibTransformERC20RichErrors.TransformerFailedError(\n                transformer,\n                transformation.data,\n                resultData\n            ).rrevert();\n        }\n    }\n\n    /// @dev Check if a call data hash is signed by the quote signer.\n    /// @param callDataHash The hash of the callData.\n    /// @param signature The signature provided by `getQuoteSigner()`.\n    /// @return validCallDataHash `callDataHash` if so and `0x0` otherwise.\n    function _getValidCallDataHash(\n        bytes32 callDataHash,\n        bytes memory signature\n    )\n        private\n        view\n        returns (bytes32 validCallDataHash)\n    {\n        address quoteSigner = getQuoteSigner();\n        if (quoteSigner == address(0)) {\n            // If no quote signer is configured, then all calldata hashes are\n            // valid.\n            return callDataHash;\n        }\n        if (signature.length == 0) {\n            return bytes32(0);\n        }\n\n        if (ISignatureValidatorFeature(address(this)).isValidHashSignature(\n            callDataHash,\n            quoteSigner,\n            signature\n        )) {\n            return callDataHash;\n        }\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length == 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length == 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "../src/errors/LibTransformERC20RichErrors.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibTransformERC20RichErrors {\n\n    // solhint-disable func-name-mixedcase,separate-by-one-line-in-contract\n\n    function InsufficientEthAttachedError(\n        uint256 ethAttached,\n        uint256 ethNeeded\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InsufficientEthAttachedError(uint256,uint256)\")),\n            ethAttached,\n            ethNeeded\n        );\n    }\n\n    function IncompleteTransformERC20Error(\n        address outputToken,\n        uint256 outputTokenAmount,\n        uint256 minOutputTokenAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IncompleteTransformERC20Error(address,uint256,uint256)\")),\n            outputToken,\n            outputTokenAmount,\n            minOutputTokenAmount\n        );\n    }\n\n    function NegativeTransformERC20OutputError(\n        address outputToken,\n        uint256 outputTokenLostAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"NegativeTransformERC20OutputError(address,uint256)\")),\n            outputToken,\n            outputTokenLostAmount\n        );\n    }\n\n    function TransformerFailedError(\n        address transformer,\n        bytes memory transformerData,\n        bytes memory resultData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransformerFailedError(address,bytes,bytes)\")),\n            transformer,\n            transformerData,\n            resultData\n        );\n    }\n\n    // Common Transformer errors ///////////////////////////////////////////////\n\n    function OnlyCallableByDeployerError(\n        address caller,\n        address deployer\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableByDeployerError(address,address)\")),\n            caller,\n            deployer\n        );\n    }\n\n    function InvalidExecutionContextError(\n        address actualContext,\n        address expectedContext\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidExecutionContextError(address,address)\")),\n            actualContext,\n            expectedContext\n        );\n    }\n\n    enum InvalidTransformDataErrorCode {\n        INVALID_TOKENS,\n        INVALID_ARRAY_LENGTH\n    }\n\n    function InvalidTransformDataError(\n        InvalidTransformDataErrorCode errorCode,\n        bytes memory transformData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidTransformDataError(uint8,bytes)\")),\n            errorCode,\n            transformData\n        );\n    }\n\n    // FillQuoteTransformer errors /////////////////////////////////////////////\n\n    function IncompleteFillSellQuoteError(\n        address sellToken,\n        uint256 soldAmount,\n        uint256 sellAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IncompleteFillSellQuoteError(address,uint256,uint256)\")),\n            sellToken,\n            soldAmount,\n            sellAmount\n        );\n    }\n\n    function IncompleteFillBuyQuoteError(\n        address buyToken,\n        uint256 boughtAmount,\n        uint256 buyAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IncompleteFillBuyQuoteError(address,uint256,uint256)\")),\n            buyToken,\n            boughtAmount,\n            buyAmount\n        );\n    }\n\n    function InsufficientTakerTokenError(\n        uint256 tokenBalance,\n        uint256 tokensNeeded\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InsufficientTakerTokenError(uint256,uint256)\")),\n            tokenBalance,\n            tokensNeeded\n        );\n    }\n\n    function InsufficientProtocolFeeError(\n        uint256 ethBalance,\n        uint256 ethNeeded\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InsufficientProtocolFeeError(uint256,uint256)\")),\n            ethBalance,\n            ethNeeded\n        );\n    }\n\n    function InvalidERC20AssetDataError(\n        bytes memory assetData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidERC20AssetDataError(bytes)\")),\n            assetData\n        );\n    }\n\n    function InvalidTakerFeeTokenError(\n        address token\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidTakerFeeTokenError(address)\")),\n            token\n        );\n    }\n}\n",
        "../src/fixins/FixinCommon.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\nimport \"../features/IOwnableFeature.sol\";\nimport \"../features/ISimpleFunctionRegistryFeature.sol\";\n\n\n/// @dev Common feature utilities.\nabstract contract FixinCommon {\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev The implementation address of this feature.\n    address internal immutable _implementation;\n\n    /// @dev The caller must be this contract.\n    modifier onlySelf() virtual {\n        if (msg.sender != address(this)) {\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\n        }\n        _;\n    }\n\n    /// @dev The caller of this function must be the owner.\n    modifier onlyOwner() virtual {\n        {\n            address owner = IOwnableFeature(address(this)).owner();\n            if (msg.sender != owner) {\n                LibOwnableRichErrors.OnlyOwnerError(\n                    msg.sender,\n                    owner\n                ).rrevert();\n            }\n        }\n        _;\n    }\n\n    constructor() internal {\n        // Remember this feature's original address.\n        _implementation = address(this);\n    }\n\n    /// @dev Registers a function implemented by this feature at `_implementation`.\n    ///      Can and should only be called within a `migrate()`.\n    /// @param selector The selector of the function whose implementation\n    ///        is at `_implementation`.\n    function _registerFeatureFunction(bytes4 selector)\n        internal\n    {\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\n    }\n\n    /// @dev Encode a feature version as a `uint256`.\n    /// @param major The major version number of the feature.\n    /// @param minor The minor version number of the feature.\n    /// @param revision The revision number of the feature.\n    /// @return encodedVersion The encoded version number.\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\n        internal\n        pure\n        returns (uint256 encodedVersion)\n    {\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\n    }\n}\n",
        "../src/errors/LibCommonRichErrors.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibCommonRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyCallableBySelfError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableBySelfError(address)\")),\n            sender\n        );\n    }\n\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IllegalReentrancyError(bytes4,uint256)\")),\n            selector,\n            reentrancyFlags\n        );\n    }\n}\n",
        "../src/errors/LibOwnableRichErrors.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOwnerError(address,address)\")),\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n        );\n    }\n\n    function MigrateCallFailedError(address target, bytes memory resultData)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MigrateCallFailedError(address,bytes)\")),\n            target,\n            resultData\n        );\n    }\n}\n",
        "../src/features/IOwnableFeature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\n/// @dev Owner management and migration features.\ninterface IOwnableFeature is\n    IOwnableV06\n{\n    /// @dev Emitted when `migrate()` is called.\n    /// @param caller The caller of `migrate()`.\n    /// @param migrator The migration contract.\n    /// @param newOwner The address of the new owner.\n    event Migrated(address caller, address migrator, address newOwner);\n\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\n    ///      The result of the function being called should be the magic bytes\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\n    ///      The owner will be temporarily set to `address(this)` inside the call.\n    ///      Before returning, the owner will be set to `newOwner`.\n    /// @param target The migrator contract address.\n    /// @param newOwner The address of the new owner.\n    /// @param data The call data.\n    function migrate(address target, bytes calldata data, address newOwner) external;\n}\n",
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n",
        "../src/features/ISimpleFunctionRegistryFeature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic registry management features.\ninterface ISimpleFunctionRegistryFeature {\n\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\n    /// @param selector The function selector.\n    /// @param oldImpl The implementation contract address being replaced.\n    /// @param newImpl The replacement implementation contract address.\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\n\n    /// @dev Roll back to a prior implementation of a function.\n    /// @param selector The function selector.\n    /// @param targetImpl The address of an older implementation of the function.\n    function rollback(bytes4 selector, address targetImpl) external;\n\n    /// @dev Register or replace a function.\n    /// @param selector The function selector.\n    /// @param impl The implementation contract for the function.\n    function extend(bytes4 selector, address impl) external;\n\n    /// @dev Retrieve the length of the rollback history for a function.\n    /// @param selector The function selector.\n    /// @return rollbackLength The number of items in the rollback history for\n    ///         the function.\n    function getRollbackLength(bytes4 selector)\n        external\n        view\n        returns (uint256 rollbackLength);\n\n    /// @dev Retrieve an entry in the rollback history for a function.\n    /// @param selector The function selector.\n    /// @param idx The index in the rollback history.\n    /// @return impl An implementation address for the function at\n    ///         index `idx`.\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\n        external\n        view\n        returns (address impl);\n}\n",
        "../src/migrations/LibMigrate.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\nlibrary LibMigrate {\n\n    /// @dev Magic bytes returned by a migrator to indicate success.\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\n    /// @param target The call target.\n    /// @param data The call data.\n    function delegatecallMigrateFunction(\n        address target,\n        bytes memory data\n    )\n        internal\n    {\n        (bool success, bytes memory resultData) = target.delegatecall(data);\n        if (!success ||\n            resultData.length != 32 ||\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\n        {\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\n        }\n    }\n}\n",
        "../src/external/IFlashWallet.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n/// @dev A contract that can execute arbitrary calls from its owner.\ninterface IFlashWallet {\n\n    /// @dev Execute an arbitrary call. Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @param value Ether to attach to the call.\n    /// @return resultData The data returned by the call.\n    function executeCall(\n        address payable target,\n        bytes calldata callData,\n        uint256 value\n    )\n        external\n        payable\n        returns (bytes memory resultData);\n\n    /// @dev Execute an arbitrary delegatecall, in the context of this puppet.\n    ///      Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @return resultData The data returned by the call.\n    function executeDelegateCall(\n        address payable target,\n        bytes calldata callData\n    )\n        external\n        payable\n        returns (bytes memory resultData);\n\n    /// @dev Allows the puppet to receive ETH.\n    receive() external payable;\n\n    /// @dev Fetch the immutable owner/deployer of this contract.\n    /// @return owner_ The immutable owner/deployer/\n    function owner() external view returns (address owner_);\n}\n",
        "../src/external/FlashWallet.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibOwnableRichErrorsV06.sol\";\nimport \"../errors/LibWalletRichErrors.sol\";\nimport \"./IFlashWallet.sol\";\n\n\n/// @dev A contract that can execute arbitrary calls from its owner.\ncontract FlashWallet is\n    IFlashWallet\n{\n    // solhint-disable no-unused-vars,indent,no-empty-blocks\n    using LibRichErrorsV06 for bytes;\n\n    // solhint-disable\n    /// @dev Store the owner/deployer as an immutable to make this contract stateless.\n    address public override immutable owner;\n    // solhint-enable\n\n    constructor() public {\n        // The deployer is the owner.\n        owner = msg.sender;\n    }\n\n    /// @dev Allows only the (immutable) owner to call a function.\n    modifier onlyOwner() virtual {\n        if (msg.sender != owner) {\n            LibOwnableRichErrorsV06.OnlyOwnerError(\n                msg.sender,\n                owner\n            ).rrevert();\n        }\n        _;\n    }\n\n    /// @dev Execute an arbitrary call. Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @param value Ether to attach to the call.\n    /// @return resultData The data returned by the call.\n    function executeCall(\n        address payable target,\n        bytes calldata callData,\n        uint256 value\n    )\n        external\n        payable\n        override\n        onlyOwner\n        returns (bytes memory resultData)\n    {\n        bool success;\n        (success, resultData) = target.call{value: value}(callData);\n        if (!success) {\n            LibWalletRichErrors\n                .WalletExecuteCallFailedError(\n                    address(this),\n                    target,\n                    callData,\n                    value,\n                    resultData\n                )\n                .rrevert();\n        }\n    }\n\n    /// @dev Execute an arbitrary delegatecall, in the context of this puppet.\n    ///      Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @return resultData The data returned by the call.\n    function executeDelegateCall(\n        address payable target,\n        bytes calldata callData\n    )\n        external\n        payable\n        override\n        onlyOwner\n        returns (bytes memory resultData)\n    {\n        bool success;\n        (success, resultData) = target.delegatecall(callData);\n        if (!success) {\n            LibWalletRichErrors\n                .WalletExecuteDelegateCallFailedError(\n                    address(this),\n                    target,\n                    callData,\n                    resultData\n                )\n                .rrevert();\n        }\n    }\n\n    // solhint-disable\n    /// @dev Allows this contract to receive ether.\n    receive() external override payable {}\n    // solhint-enable\n\n    /// @dev Signal support for receiving ERC1155 tokens.\n    /// @param interfaceID The interface ID, as per ERC-165 rules.\n    /// @return hasSupport `true` if this contract supports an ERC-165 interface.\n    function supportsInterface(bytes4 interfaceID)\n        external\n        pure\n        returns (bool hasSupport)\n    {\n        return  interfaceID == this.supportsInterface.selector ||\n                interfaceID == this.onERC1155Received.selector ^ this.onERC1155BatchReceived.selector ||\n                interfaceID == this.tokenFallback.selector;\n    }\n\n    ///  @dev Allow this contract to receive ERC1155 tokens.\n    ///  @return success  `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n    function onERC1155Received(\n        address, // operator,\n        address, // from,\n        uint256, // id,\n        uint256, // value,\n        bytes calldata //data\n    )\n        external\n        pure\n        returns (bytes4 success)\n    {\n        return this.onERC1155Received.selector;\n    }\n\n    ///  @dev Allow this contract to receive ERC1155 tokens.\n    ///  @return success  `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n    function onERC1155BatchReceived(\n        address, // operator,\n        address, // from,\n        uint256[] calldata, // ids,\n        uint256[] calldata, // values,\n        bytes calldata // data\n    )\n        external\n        pure\n        returns (bytes4 success)\n    {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /// @dev Allows this contract to receive ERC223 tokens.\n    function tokenFallback(\n        address, // from,\n        uint256, // value,\n        bytes calldata // value\n    )\n        external\n        pure\n    {}\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibOwnableRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrorsV06 {\n\n    // bytes4(keccak256(\"OnlyOwnerError(address,address)\"))\n    bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR =\n        0x1de45ad1;\n\n    // bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n    bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES =\n        hex\"e69edc3e\";\n\n    // solhint-disable func-name-mixedcase\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_OWNER_ERROR_SELECTOR,\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return TRANSFER_OWNER_TO_ZERO_ERROR_BYTES;\n    }\n}\n",
        "../src/errors/LibWalletRichErrors.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibWalletRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function WalletExecuteCallFailedError(\n        address wallet,\n        address callTarget,\n        bytes memory callData,\n        uint256 callValue,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"WalletExecuteCallFailedError(address,address,bytes,uint256,bytes)\")),\n            wallet,\n            callTarget,\n            callData,\n            callValue,\n            errorData\n        );\n    }\n\n    function WalletExecuteDelegateCallFailedError(\n        address wallet,\n        address callTarget,\n        bytes memory callData,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"WalletExecuteDelegateCallFailedError(address,address,bytes,bytes)\")),\n            wallet,\n            callTarget,\n            callData,\n            errorData\n        );\n    }\n}\n",
        "../src/storage/LibTransformERC20Storage.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"./LibStorage.sol\";\nimport \"../external/IFlashWallet.sol\";\n\n\n/// @dev Storage helpers for the `TransformERC20` feature.\nlibrary LibTransformERC20Storage {\n\n    /// @dev Storage bucket for this feature.\n    struct Storage {\n        // The current wallet instance.\n        IFlashWallet wallet;\n        // The transformer deployer address.\n        address transformerDeployer;\n        // The optional signer for `transformERC20()` calldata.\n        address quoteSigner;\n    }\n\n    /// @dev Get the storage bucket for this contract.\n    function getStorage() internal pure returns (Storage storage stor) {\n        uint256 storageSlot = LibStorage.getStorageSlot(\n            LibStorage.StorageId.TransformERC20\n        );\n        // Dip into assembly to change the slot pointed to by the local\n        // variable `stor`.\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\n        assembly { stor_slot := storageSlot }\n    }\n}\n",
        "../src/storage/LibStorage.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Common storage helpers\nlibrary LibStorage {\n\n    /// @dev What to bit-shift a storage ID by to get its slot.\n    ///      This gives us a maximum of 2**128 inline fields in each bucket.\n    uint256 private constant STORAGE_SLOT_EXP = 128;\n\n    /// @dev Storage IDs for feature storage buckets.\n    ///      WARNING: APPEND-ONLY.\n    enum StorageId {\n        Proxy,\n        SimpleFunctionRegistry,\n        Ownable,\n        TokenSpender,\n        TransformERC20,\n        MetaTransactions,\n        ReentrancyGuard,\n        LiquidityProvider\n    }\n\n    /// @dev Get the storage slot given a storage ID. We assign unique, well-spaced\n    ///     slots to storage bucket variables to ensure they do not overlap.\n    ///     See: https://solidity.readthedocs.io/en/v0.6.6/assembly.html#access-to-external-variables-functions-and-libraries\n    /// @param storageId An entry in `StorageId`\n    /// @return slot The storage slot.\n    function getStorageSlot(StorageId storageId)\n        internal\n        pure\n        returns (uint256 slot)\n    {\n        // This should never overflow with a reasonable `STORAGE_SLOT_EXP`\n        // because Solidity will do a range check on `storageId` during the cast.\n        return (uint256(storageId) + 1) << STORAGE_SLOT_EXP;\n    }\n}\n",
        "../src/transformers/IERC20Transformer.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev A transformation callback used in `TransformERC20.transformERC20()`.\ninterface IERC20Transformer {\n\n    /// @dev Context information to pass into `transform()` by `TransformERC20.transformERC20()`.\n    struct TransformContext {\n        // The hash of the `TransformERC20.transformERC20()` calldata.\n        // Will be null if the calldata is not signed.\n        bytes32 callDataHash;\n        // The caller of `TransformERC20.transformERC20()`.\n        address payable sender;\n        // taker The taker address, which may be distinct from `sender` in the case\n        // meta-transactions.\n        address payable taker;\n        // Arbitrary data to pass to the transformer.\n        bytes data;\n    }\n\n    /// @dev Called from `TransformERC20.transformERC20()`. This will be\n    ///      delegatecalled in the context of the FlashWallet instance being used.\n    /// @param context Context information.\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\n    function transform(TransformContext calldata context)\n        external\n        returns (bytes4 success);\n}\n",
        "../src/transformers/LibERC20Transformer.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\nlibrary LibERC20Transformer {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev ETH pseudo-token address.\n    address constant internal ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev ETH pseudo-token.\n    IERC20TokenV06 constant internal ETH_TOKEN = IERC20TokenV06(ETH_TOKEN_ADDRESS);\n    /// @dev Return value indicating success in `IERC20Transformer.transform()`.\n    ///      This is just `keccak256('TRANSFORMER_SUCCESS')`.\n    bytes4 constant internal TRANSFORMER_SUCCESS = 0x13c9929e;\n\n    /// @dev Transfer ERC20 tokens and ETH.\n    /// @param token An ERC20 or the ETH pseudo-token address (`ETH_TOKEN_ADDRESS`).\n    /// @param to The recipient.\n    /// @param amount The transfer amount.\n    function transformerTransfer(\n        IERC20TokenV06 token,\n        address payable to,\n        uint256 amount\n    )\n        internal\n    {\n        if (isTokenETH(token)) {\n            to.transfer(amount);\n        } else {\n            token.compatTransfer(to, amount);\n        }\n    }\n\n    /// @dev Check if a token is the ETH pseudo-token.\n    /// @param token The token to check.\n    /// @return isETH `true` if the token is the ETH pseudo-token.\n    function isTokenETH(IERC20TokenV06 token)\n        internal\n        pure\n        returns (bool isETH)\n    {\n        return address(token) == ETH_TOKEN_ADDRESS;\n    }\n\n    /// @dev Check the balance of an ERC20 token or ETH.\n    /// @param token An ERC20 or the ETH pseudo-token address (`ETH_TOKEN_ADDRESS`).\n    /// @param owner Holder of the tokens.\n    /// @return tokenBalance The balance of `owner`.\n    function getTokenBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 tokenBalance)\n    {\n        if (isTokenETH(token)) {\n            return owner.balance;\n        }\n        return token.balanceOf(owner);\n    }\n\n    /// @dev RLP-encode a 32-bit or less account nonce.\n    /// @param nonce A positive integer in the range 0 <= nonce < 2^32.\n    /// @return rlpNonce The RLP encoding.\n    function rlpEncodeNonce(uint32 nonce)\n        internal\n        pure\n        returns (bytes memory rlpNonce)\n    {\n        // See https://github.com/ethereum/wiki/wiki/RLP for RLP encoding rules.\n        if (nonce == 0) {\n            rlpNonce = new bytes(1);\n            rlpNonce[0] = 0x80;\n        } else if (nonce < 0x80) {\n            rlpNonce = new bytes(1);\n            rlpNonce[0] = byte(uint8(nonce));\n        } else if (nonce <= 0xFF) {\n            rlpNonce = new bytes(2);\n            rlpNonce[0] = 0x81;\n            rlpNonce[1] = byte(uint8(nonce));\n        } else if (nonce <= 0xFFFF) {\n            rlpNonce = new bytes(3);\n            rlpNonce[0] = 0x82;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[2] = byte(uint8(nonce));\n        } else if (nonce <= 0xFFFFFF) {\n            rlpNonce = new bytes(4);\n            rlpNonce[0] = 0x83;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF0000) >> 16));\n            rlpNonce[2] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[3] = byte(uint8(nonce));\n        } else {\n            rlpNonce = new bytes(5);\n            rlpNonce[0] = 0x84;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF000000) >> 24));\n            rlpNonce[2] = byte(uint8((nonce & 0xFF0000) >> 16));\n            rlpNonce[3] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[4] = byte(uint8(nonce));\n        }\n    }\n\n    /// @dev Compute the expected deployment address by `deployer` at\n    ///      the nonce given by `deploymentNonce`.\n    /// @param deployer The address of the deployer.\n    /// @param deploymentNonce The nonce that the deployer had when deploying\n    ///        a contract.\n    /// @return deploymentAddress The deployment address.\n    function getDeployedAddress(address deployer, uint32 deploymentNonce)\n        internal\n        pure\n        returns (address payable deploymentAddress)\n    {\n        // The address of if a deployed contract is the lower 20 bytes of the\n        // hash of the RLP-encoded deployer's account address + account nonce.\n        // See: https://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n        bytes memory rlpNonce = rlpEncodeNonce(deploymentNonce);\n        return address(uint160(uint256(keccak256(abi.encodePacked(\n            byte(uint8(0xC0 + 21 + rlpNonce.length)),\n            byte(uint8(0x80 + 20)),\n            deployer,\n            rlpNonce\n        )))));\n    }\n}\n",
        "../src/features/libs/LibSignedCallData.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\n/// @dev Library for working with signed calldata.\nlibrary LibSignedCallData {\n    using LibBytesV06 for bytes;\n\n    // bytes4(keccak256('SignedCallDataSignature(bytes)'))\n    bytes4 constant private SIGNATURE_SELECTOR = 0xf86d1d92;\n\n    /// @dev Try to parse potentially signed calldata into its hash and signature\n    ///      components. Signed calldata has signature data appended to it.\n    /// @param callData the raw call data.\n    /// @return callDataHash If a signature is detected, this will be the hash of\n    ///         the bytes preceding the signature data. Otherwise, this\n    ///         will be the hash of the entire `callData`.\n    /// @return signature The signature bytes, if present.\n    function parseCallData(bytes memory callData)\n        internal\n        pure\n        returns (bytes32 callDataHash, bytes memory signature)\n    {\n        // Signed calldata has a 70 byte signature appended as:\n        // ```\n        //   abi.encodePacked(\n        //     callData,\n        //     bytes4(keccak256('SignedCallDataSignature(bytes)')),\n        //     signature // 66 bytes\n        //   );\n        // ```\n\n        // Try to detect an appended signature. This isn't foolproof, but an\n        // accidental false positive should highly unlikely. Additinally, the\n        // signature would also have to pass verification, so the risk here is\n        // low.\n        if (\n            // Signed callData has to be at least 70 bytes long.\n            callData.length < 70 ||\n            // The bytes4 at offset -70 should equal `SIGNATURE_SELECTOR`.\n            SIGNATURE_SELECTOR != callData.readBytes4(callData.length - 70)\n        ) {\n            return (keccak256(callData), signature);\n        }\n        // Consider everything before the signature selector as the original\n        // calldata and everything after as the signature.\n        assembly {\n            callDataHash := keccak256(add(callData, 32), sub(mload(callData), 70))\n        }\n        signature = callData.slice(callData.length - 66, callData.length);\n    }\n}\n",
        "../src/features/ITransformERC20Feature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../transformers/IERC20Transformer.sol\";\nimport \"../external/IFlashWallet.sol\";\n\n\n/// @dev Feature to composably transform between ERC20 tokens.\ninterface ITransformERC20Feature {\n\n    /// @dev Defines a transformation to run in `transformERC20()`.\n    struct Transformation {\n        // The deployment nonce for the transformer.\n        // The address of the transformer contract will be derived from this\n        // value.\n        uint32 deploymentNonce;\n        // Arbitrary data to pass to the transformer.\n        bytes data;\n    }\n\n    /// @dev Arguments for `_transformERC20()`.\n    struct TransformERC20Args {\n        // The taker address.\n        address payable taker;\n        // The token being provided by the taker.\n        // If `0xeee...`, ETH is implied and should be provided with the call.`\n        IERC20TokenV06 inputToken;\n        // The token to be acquired by the taker.\n        // `0xeee...` implies ETH.\n        IERC20TokenV06 outputToken;\n        // The amount of `inputToken` to take from the taker.\n        // If set to `uint256(-1)`, the entire spendable balance of the taker\n        // will be solt.\n        uint256 inputTokenAmount;\n        // The minimum amount of `outputToken` the taker\n        // must receive for the entire transformation to succeed. If set to zero,\n        // the minimum output token transfer will not be asserted.\n        uint256 minOutputTokenAmount;\n        // The transformations to execute on the token balance(s)\n        // in sequence.\n        Transformation[] transformations;\n        // The hash of the calldata for the `transformERC20()` call.\n        bytes32 callDataHash;\n        // The signature for `callDataHash` signed by `getQuoteSigner()`.\n        bytes callDataSignature;\n    }\n\n    /// @dev Raised upon a successful `transformERC20`.\n    /// @param taker The taker (caller) address.\n    /// @param inputToken The token being provided by the taker.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the taker.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the taker.\n    /// @param outputTokenAmount The amount of `outputToken` received by the taker.\n    event TransformedERC20(\n        address indexed taker,\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    /// @dev Raised when `setTransformerDeployer()` is called.\n    /// @param transformerDeployer The new deployer address.\n    event TransformerDeployerUpdated(address transformerDeployer);\n\n    /// @dev Raised when `setQuoteSigner()` is called.\n    /// @param quoteSigner The new quote signer.\n    event QuoteSignerUpdated(address quoteSigner);\n\n    /// @dev Replace the allowed deployer for transformers.\n    ///      Only callable by the owner.\n    /// @param transformerDeployer The address of the new trusted deployer\n    ///        for transformers.\n    function setTransformerDeployer(address transformerDeployer)\n        external;\n\n    /// @dev Replace the optional signer for `transformERC20()` calldata.\n    ///      Only callable by the owner.\n    /// @param quoteSigner The address of the new calldata signer.\n    function setQuoteSigner(address quoteSigner)\n        external;\n\n    /// @dev Deploy a new flash wallet instance and replace the current one with it.\n    ///      Useful if we somehow break the current wallet instance.\n    ///       Only callable by the owner.\n    /// @return wallet The new wallet instance.\n    function createTransformWallet()\n        external\n        returns (IFlashWallet wallet);\n\n    /// @dev Executes a series of transformations to convert an ERC20 `inputToken`\n    ///      to an ERC20 `outputToken`.\n    /// @param inputToken The token being provided by the sender.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the sender.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the sender.\n    /// @param minOutputTokenAmount The minimum amount of `outputToken` the sender\n    ///        must receive for the entire transformation to succeed.\n    /// @param transformations The transformations to execute on the token balance(s)\n    ///        in sequence.\n    /// @return outputTokenAmount The amount of `outputToken` received by the sender.\n    function transformERC20(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 minOutputTokenAmount,\n        Transformation[] calldata transformations\n    )\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n\n    /// @dev Internal version of `transformERC20()`. Only callable from within.\n    /// @param args A `TransformERC20Args` struct.\n    /// @return outputTokenAmount The amount of `outputToken` received by the taker.\n    function _transformERC20(TransformERC20Args calldata args)\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n\n    /// @dev Return the current wallet instance that will serve as the execution\n    ///      context for transformations.\n    /// @return wallet The wallet instance.\n    function getTransformWallet()\n        external\n        view\n        returns (IFlashWallet wallet);\n\n    /// @dev Return the allowed deployer for transformers.\n    /// @return deployer The transform deployer address.\n    function getTransformerDeployer()\n        external\n        view\n        returns (address deployer);\n\n    /// @dev Return the optional signer for `transformERC20()` calldata.\n    /// @return signer The transform deployer address.\n    function getQuoteSigner()\n        external\n        view\n        returns (address signer);\n}\n",
        "../src/features/ITokenSpenderFeature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev Feature that allows spending token allowances.\ninterface ITokenSpenderFeature {\n\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\n    ///      Only callable from within.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _spendERC20Tokens(\n        IERC20TokenV06 token,\n        address owner,\n        address to,\n        uint256 amount\n    )\n        external;\n\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\n    ///      pulled from `owner`.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @return amount The amount of tokens that can be pulled.\n    function getSpendableERC20BalanceOf(IERC20TokenV06 token, address owner)\n        external\n        view\n        returns (uint256 amount);\n\n    /// @dev Get the address of the allowance target.\n    /// @return target The target of token allowances.\n    function getAllowanceTarget() external view returns (address target);\n}\n",
        "../src/features/IFeature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic interface for a feature contract.\ninterface IFeature {\n\n    // solhint-disable func-name-mixedcase\n\n    /// @dev The name of this feature set.\n    function FEATURE_NAME() external view returns (string memory name);\n\n    /// @dev The version of this feature set.\n    function FEATURE_VERSION() external view returns (uint256 version);\n}\n",
        "../src/features/ISignatureValidatorFeature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Feature for validating signatures.\ninterface ISignatureValidatorFeature {\n\n   /// @dev Allowed signature types.\n    enum SignatureType {\n        Illegal,                     // 0x00, default value\n        Invalid,                     // 0x01\n        EIP712,                      // 0x02\n        EthSign,                     // 0x03\n        NSignatureTypes              // 0x04, number of signature types. Always leave at end.\n    }\n\n    /// @dev Validate that `hash` was signed by `signer` given `signature`.\n    ///      Reverts otherwise.\n    /// @param hash The hash that was signed.\n    /// @param signer The signer of the hash.\n    /// @param signature The signature. The last byte of this signature should\n    ///        be a member of the `SignatureType` enum.\n    function validateHashSignature(\n        bytes32 hash,\n        address signer,\n        bytes calldata signature\n    )\n        external\n        view;\n\n    /// @dev Check that `hash` was signed by `signer` given `signature`.\n    /// @param hash The hash that was signed.\n    /// @param signer The signer of the hash.\n    /// @param signature The signature. The last byte of this signature should\n    ///        be a member of the `SignatureType` enum.\n    /// @return isValid `true` on success.\n    function isValidHashSignature(\n        bytes32 hash,\n        address signer,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bool isValid);\n}\n",
        "../src/features/IMetaTransactionsFeature.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev Meta-transactions feature.\ninterface IMetaTransactionsFeature {\n\n    /// @dev Describes an exchange proxy meta transaction.\n    struct MetaTransactionData {\n        // Signer of meta-transaction. On whose behalf to execute the MTX.\n        address payable signer;\n        // Required sender, or NULL for anyone.\n        address sender;\n        // Minimum gas price.\n        uint256 minGasPrice;\n        // Maximum gas price.\n        uint256 maxGasPrice;\n        // MTX is invalid after this time.\n        uint256 expirationTimeSeconds;\n        // Nonce to make this MTX unique.\n        uint256 salt;\n        // Encoded call data to a function on the exchange proxy.\n        bytes callData;\n        // Amount of ETH to attach to the call.\n        uint256 value;\n        // ERC20 fee `signer` pays `sender`.\n        IERC20TokenV06 feeToken;\n        // ERC20 fee amount.\n        uint256 feeAmount;\n    }\n\n    /// @dev Emitted whenever a meta-transaction is executed via\n    ///      `executeMetaTransaction()` or `executeMetaTransactions()`.\n    /// @param hash The meta-transaction hash.\n    /// @param selector The selector of the function being executed.\n    /// @param signer Who to execute the meta-transaction on behalf of.\n    /// @param sender Who executed the meta-transaction.\n    event MetaTransactionExecuted(\n        bytes32 hash,\n        bytes4 indexed selector,\n        address signer,\n        address sender\n    );\n\n    /// @dev Execute a single meta-transaction.\n    /// @param mtx The meta-transaction.\n    /// @param signature The signature by `mtx.signer`.\n    /// @return returnResult The ABI-encoded result of the underlying call.\n    function executeMetaTransaction(\n        MetaTransactionData calldata mtx,\n        bytes calldata signature\n    )\n        external\n        payable\n        returns (bytes memory returnResult);\n\n    /// @dev Execute multiple meta-transactions.\n    /// @param mtxs The meta-transactions.\n    /// @param signatures The signature by each respective `mtx.signer`.\n    /// @return returnResults The ABI-encoded results of the underlying calls.\n    function batchExecuteMetaTransactions(\n        MetaTransactionData[] calldata mtxs,\n        bytes[] calldata signatures\n    )\n        external\n        payable\n        returns (bytes[] memory returnResults);\n\n    /// @dev Execute a meta-transaction via `sender`. Privileged variant.\n    ///      Only callable from within.\n    /// @param sender Who is executing the meta-transaction..\n    /// @param mtx The meta-transaction.\n    /// @param signature The signature by `mtx.signer`.\n    /// @return returnResult The ABI-encoded result of the underlying call.\n    function _executeMetaTransaction(\n        address sender,\n        MetaTransactionData calldata mtx,\n        bytes calldata signature\n    )\n        external\n        payable\n        returns (bytes memory returnResult);\n\n    /// @dev Get the block at which a meta-transaction has been executed.\n    /// @param mtx The meta-transaction.\n    /// @return blockNumber The block height when the meta-transactioin was executed.\n    function getMetaTransactionExecutedBlock(MetaTransactionData calldata mtx)\n        external\n        view\n        returns (uint256 blockNumber);\n\n    /// @dev Get the block at which a meta-transaction hash has been executed.\n    /// @param mtxHash The meta-transaction hash.\n    /// @return blockNumber The block height when the meta-transactioin was executed.\n    function getMetaTransactionHashExecutedBlock(bytes32 mtxHash)\n        external\n        view\n        returns (uint256 blockNumber);\n\n    /// @dev Get the EIP712 hash of a meta-transaction.\n    /// @param mtx The meta-transaction.\n    /// @return mtxHash The EIP712 hash of `mtx`.\n    function getMetaTransactionHash(MetaTransactionData calldata mtx)\n        external\n        view\n        returns (bytes32 mtxHash);\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/node_modules/@0x/contracts-erc20"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
