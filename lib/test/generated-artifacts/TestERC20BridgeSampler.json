{
    "schemaVersion": "2.0.0",
    "contractName": "TestERC20BridgeSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "FAILURE_ADDRESS",
                "outputs": [
                    {
                        "internalType": "address payable",
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "callDatas",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchCall",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "callResults",
                        "type": "bytes[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address[]",
                        "name": "tokenAddresses",
                        "type": "address[]"
                    }
                ],
                "name": "createTokenExchanges",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [],
                "name": "enableFailTrigger",
                "outputs": [],
                "payable": true,
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "eth2Dai",
                "outputs": [
                    {
                        "internalType": "contract TestERC20BridgeSamplerEth2Dai",
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registryAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "getLiquidityProviderFromRegistry",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibOrder.Order[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "orderSignatures",
                        "type": "bytes[]"
                    }
                ],
                "name": "getOrderFillableMakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableMakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibOrder.Order[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "orderSignatures",
                        "type": "bytes[]"
                    }
                ],
                "name": "getOrderFillableTakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableTakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibOrder.Order",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "internalType": "bytes",
                        "name": "",
                        "type": "bytes"
                    }
                ],
                "name": "getOrderRelevantState",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "enum LibOrder.OrderStatus",
                                "name": "orderStatus",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "orderHash",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint256",
                                "name": "orderTakerAssetFilledAmount",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibOrder.OrderInfo",
                        "name": "orderInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "fillableTakerAssetAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bool",
                        "name": "isValidSignature",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "kyber",
                "outputs": [
                    {
                        "internalType": "contract TestERC20BridgeSamplerKyberNetwork",
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registryAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromLiquidityProviderRegistry",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "curveAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registryAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromLiquidityProviderRegistry",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "uniswap",
                "outputs": [
                    {
                        "internalType": "contract TestERC20BridgeSamplerUniswapExchangeFactory",
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "methods": {
                "batchCall(bytes[])": {
                    "details": "Call multiple public functions on this contract in a single transaction.",
                    "params": {
                        "callDatas": "ABI-encoded call data for each function call."
                    },
                    "return": "callResults ABI-encoded results data for each call."
                },
                "getLiquidityProviderFromRegistry(address,address,address)": {
                    "details": "Returns the address of a liquidity provider for the given market      (takerToken, makerToken), from a registry of liquidity providers.      Returns address(0) if no such provider exists in the registry.",
                    "params": {
                        "makerToken": "Maker asset managed by liquidity provider.",
                        "takerToken": "Taker asset managed by liquidity provider."
                    },
                    "return": "providerAddress Address of the liquidity provider."
                },
                "getOrderFillableMakerAssetAmounts((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],bytes[])": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or",
                    "params": {
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native orders to query."
                    },
                    "return": "orderFillableMakerAssetAmounts How much maker asset can be filled         by each order in `orders`."
                },
                "getOrderFillableTakerAssetAmounts((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],bytes[])": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or      maker/taker asset amounts (returning 0).",
                    "params": {
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native orders to query."
                    },
                    "return": "orderFillableTakerAssetAmounts How much taker asset can be filled         by each order in `orders`."
                },
                "sampleBuysFromEth2Dai(address,address,uint256[])": {
                    "details": "Sample buy quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Maker token sell amount for each sample."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleBuysFromLiquidityProviderRegistry(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "registryAddress": "Address of the liquidity provider registry contract.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleBuysFromUniswap(address,address,uint256[])": {
                    "details": "Sample buy quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleSellsFromCurve(address,int128,int128,uint256[])": {
                    "details": "Sample sell quotes from Curve.",
                    "params": {
                        "curveAddress": "Address of the Curve contract.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromEth2Dai(address,address,uint256[])": {
                    "details": "Sample sell quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromKyberNetwork(address,address,uint256[])": {
                    "details": "Sample sell quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromLiquidityProviderRegistry(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "registryAddress": "Address of the liquidity provider registry contract.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromUniswap(address,address,uint256[])": {
                    "details": "Sample sell quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                }
            }
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x20 SWAP1 PUSH3 0xFC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x3D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH3 0x6C SWAP1 PUSH3 0x10A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x89 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH3 0xB8 SWAP1 PUSH3 0x118 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0xD5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 0x126 JUMP JUMPDEST PUSH2 0x8E7 DUP1 PUSH3 0x2FAB DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0x51B DUP1 PUSH3 0x3892 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0x423 DUP1 PUSH3 0x3DAD DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0x2E75 DUP1 PUSH3 0x136 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x144 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x68BE3CF2 GT PUSH2 0xC0 JUMPI DUP1 PUSH4 0xA2D10BA5 GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xCD72D789 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xCD72D789 EQ PUSH2 0x34D JUMPI DUP1 PUSH4 0xE77286EB EQ PUSH2 0x362 JUMPI DUP1 PUSH4 0xFEA12A03 EQ PUSH2 0x391 JUMPI PUSH2 0x144 JUMP JUMPDEST DUP1 PUSH4 0xA2D10BA5 EQ PUSH2 0x318 JUMPI DUP1 PUSH4 0xC7F7142E EQ PUSH2 0x32D JUMPI PUSH2 0x144 JUMP JUMPDEST DUP1 PUSH4 0x8B123A02 GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0x8B123A02 EQ PUSH2 0x2B8 JUMPI DUP1 PUSH4 0x9F76AD35 EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0xA2C28D4B EQ PUSH2 0x2F8 JUMPI PUSH2 0x144 JUMP JUMPDEST DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x26B JUMPI DUP1 PUSH4 0x6DD6B78D EQ PUSH2 0x298 JUMPI PUSH2 0x144 JUMP JUMPDEST DUP1 PUSH4 0x4703A7E6 GT PUSH2 0x117 JUMPI DUP1 PUSH4 0x59F515D0 GT PUSH2 0xFC JUMPI DUP1 PUSH4 0x59F515D0 EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0x60EE052A EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x64EE6ADE EQ PUSH2 0x24B JUMPI PUSH2 0x144 JUMP JUMPDEST DUP1 PUSH4 0x4703A7E6 EQ PUSH2 0x1CB JUMPI DUP1 PUSH4 0x4CB8E253 EQ PUSH2 0x1EB JUMPI PUSH2 0x144 JUMP JUMPDEST DUP1 PUSH4 0x11F2928B EQ PUSH2 0x149 JUMPI DUP1 PUSH4 0x2681F7E4 EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x31268657 EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0x354152A3 EQ PUSH2 0x19E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x151 PUSH2 0x3A6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x168 PUSH2 0x3E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x175 SWAP2 SWAP1 PUSH2 0x29BE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x151 PUSH2 0x199 CALLDATASIZE PUSH1 0x4 PUSH2 0x2731 JUMP JUMPDEST PUSH2 0x405 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x1B9 CALLDATASIZE PUSH1 0x4 PUSH2 0x26F3 JUMP JUMPDEST PUSH2 0x493 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x175 SWAP2 SWAP1 PUSH2 0x2B0F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x1E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x2693 JUMP JUMPDEST PUSH2 0x664 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x206 CALLDATASIZE PUSH1 0x4 PUSH2 0x2693 JUMP JUMPDEST PUSH2 0x840 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x226 CALLDATASIZE PUSH1 0x4 PUSH2 0x2771 JUMP JUMPDEST PUSH2 0xB30 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x246 CALLDATASIZE PUSH1 0x4 PUSH2 0x2693 JUMP JUMPDEST PUSH2 0xBD9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x2693 JUMP JUMPDEST PUSH2 0xE99 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28B PUSH2 0x286 CALLDATASIZE PUSH1 0x4 PUSH2 0x2731 JUMP JUMPDEST PUSH2 0x105F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x175 SWAP2 SWAP1 PUSH2 0x2A91 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x2B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2693 JUMP JUMPDEST PUSH2 0x119E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x2D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2771 JUMP JUMPDEST PUSH2 0x1446 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x2F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2620 JUMP JUMPDEST PUSH2 0x170E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x304 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x313 CALLDATASIZE PUSH1 0x4 PUSH2 0x2620 JUMP JUMPDEST PUSH2 0x1913 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x324 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x168 PUSH2 0x1AFF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x339 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x168 PUSH2 0x348 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D6 JUMP JUMPDEST PUSH2 0x1B1B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x168 PUSH2 0x1C56 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x382 PUSH2 0x37D CALLDATASIZE PUSH1 0x4 PUSH2 0x288F JUMP JUMPDEST PUSH2 0x1C6E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x175 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2BFD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x168 PUSH2 0x1D17 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x3E6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x3126865700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x31268657 SWAP1 PUSH2 0x45D SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A37 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x477 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x48B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4C5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x65A JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x927C0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7211EF7 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x522 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x53C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B82 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5C5 SWAP2 SWAP1 PUSH2 0x29A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x601 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x606 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x62F JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x628 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x28E6 JUMP JUMPDEST SWAP1 POP PUSH2 0x637 JUMP JUMPDEST POP POP POP PUSH2 0x65A JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x644 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x4CB JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x670 DUP4 DUP6 PUSH2 0x1D33 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x69B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x837 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x6B5 PUSH2 0x1DA6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xF4240 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFF1FD974 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x6FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x719 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A06 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x7A2 SWAP2 SWAP1 PUSH2 0x29A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7DE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7E3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x80C JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x805 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x28E6 JUMP JUMPDEST SWAP1 POP PUSH2 0x814 JUMP JUMPDEST POP POP POP PUSH2 0x837 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x821 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x6A1 JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x84C DUP4 DUP6 PUSH2 0x1D33 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x856 PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x88E JUMPI DUP5 PUSH2 0x8A4 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8B0 PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x8E8 JUMPI DUP5 PUSH2 0x8FE JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x90B DUP8 PUSH2 0x1DDA JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x91B DUP8 PUSH2 0x1DDA JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 DUP7 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x950 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP6 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB23 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x96A PUSH2 0x1DED JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x16E360 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x809A9E55 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP15 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x9B4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9CE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A06 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0xA57 SWAP2 SWAP1 PUSH2 0x29A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA93 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA98 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0xAC1 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xABA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x28E6 JUMP JUMPDEST SWAP1 POP PUSH2 0xAC9 JUMP JUMPDEST POP POP POP PUSH2 0xB23 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP8 PUSH1 0xA EXP DUP8 PUSH1 0xA EXP DUP14 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0xAE6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 MUL MUL DUP2 PUSH2 0xAF8 JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0xB00 JUMPI INVALID JUMPDEST DIV DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xB0D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x956 JUMP JUMPDEST POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xB3C DUP4 DUP4 PUSH2 0x1446 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0xBD2 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xB56 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0xBCA JUMPI PUSH2 0xBB1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xB74 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB88 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xBA0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH2 0x1E09 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBBD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xB41 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xBE5 DUP4 DUP6 PUSH2 0x1D33 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0xC10 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0xC1D PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC5D JUMPI PUSH2 0xC58 DUP7 PUSH2 0x1E4B JUMP JUMPDEST PUSH2 0xC60 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC6C PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCAC JUMPI PUSH2 0xCA7 DUP7 PUSH2 0x1E4B JUMP JUMPDEST PUSH2 0xCAF JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE8E JUMPI PUSH1 0x1 PUSH2 0xCC6 PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD5D JUMPI DUP7 MLOAD PUSH2 0xD3C SWAP1 DUP6 SWAP1 PUSH32 0x2640F62C00000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0xD2F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1EDD JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD48 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0xE7A JUMP JUMPDEST PUSH2 0xD65 PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xDCE JUMPI DUP7 MLOAD PUSH2 0xD3C SWAP1 DUP5 SWAP1 PUSH32 0x59E9486200000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0xD2F JUMPI INVALID JUMPDEST DUP7 MLOAD PUSH1 0x0 SWAP1 PUSH2 0xE07 SWAP1 DUP6 SWAP1 PUSH32 0x59E9486200000000000000000000000000000000000000000000000000000000 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0xD2F JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0xE5D JUMPI PUSH2 0xE3C DUP6 PUSH32 0x2640F62C00000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x1EDD JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE48 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0xE78 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xE6B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0xE85 JUMPI POP PUSH2 0xE8E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xCB4 JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xEA5 DUP4 DUP6 PUSH2 0x1D33 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0xED0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x837 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0xEEA PUSH2 0x1DA6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xF4240 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x144A2752 SWAP1 POP PUSH1 0xE0 SHL DUP10 DUP12 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0xF34 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xF4E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A06 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0xFD7 SWAP2 SWAP1 PUSH2 0x29A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1013 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1018 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x80C JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x103A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x28E6 JUMP JUMPDEST SWAP1 POP DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1049 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0xED6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 DUP3 DUP1 ISZERO PUSH2 0x1095 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1080 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0xBD2 JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x10B3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL DUP3 ADD SWAP1 POP DUP1 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 CALLDATASIZE DUP5 SWAP1 SUB ADD DUP2 SLT PUSH2 0x10ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 ADD PUSH1 0x20 DUP2 ADD SWAP2 POP CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x110C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x111C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x112A SWAP3 SWAP2 SWAP1 PUSH2 0x2992 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1165 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x116A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x117C JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1189 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x109B JUMP JUMPDEST PUSH1 0x60 PUSH2 0x11AA DUP4 DUP6 PUSH2 0x1D33 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x11D5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x11E2 PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1222 JUMPI PUSH2 0x121D DUP7 PUSH2 0x1E4B JUMP JUMPDEST PUSH2 0x1225 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1231 PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1271 JUMPI PUSH2 0x126C DUP7 PUSH2 0x1E4B JUMP JUMPDEST PUSH2 0x1274 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE8E JUMPI PUSH1 0x1 PUSH2 0x128B PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1315 JUMPI DUP7 MLOAD PUSH2 0x12F4 SWAP1 DUP6 SWAP1 PUSH32 0x95B68FE700000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0xD2F JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1300 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1432 JUMP JUMPDEST PUSH2 0x131D PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1386 JUMPI DUP7 MLOAD PUSH2 0x12F4 SWAP1 DUP5 SWAP1 PUSH32 0xCD7724C300000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0xD2F JUMPI INVALID JUMPDEST DUP7 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x13BF SWAP1 DUP7 SWAP1 PUSH32 0x95B68FE700000000000000000000000000000000000000000000000000000000 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0xD2F JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x1415 JUMPI PUSH2 0x13F4 DUP5 PUSH32 0xCD7724C300000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x1EDD JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1400 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1430 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1423 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x143D JUMPI POP PUSH2 0xE8E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1279 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1473 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0xBD2 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x148D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x14BB JUMPI POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x14AB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH1 0x0 EQ JUMPDEST DUP1 PUSH2 0x14DD JUMPI POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x14CD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x1501 JUMPI PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x14F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x1706 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x150D PUSH2 0x2026 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x7A120 PUSH2 0x152F PUSH2 0x2026 JUMP JUMPDEST POP DUP8 MLOAD PUSH32 0xE77286EB00000000000000000000000000000000000000000000000000000000 SWAP1 DUP10 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0x1560 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x1574 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x158D SWAP3 SWAP2 SWAP1 PUSH2 0x2C3C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1616 SWAP2 SWAP1 PUSH2 0x29A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1652 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1657 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1682 JUMPI PUSH1 0x0 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x166F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP PUSH2 0x1706 JUMP JUMPDEST PUSH2 0x168A PUSH2 0x2289 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x16A1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2822 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x3 DUP4 MLOAD PUSH1 0x6 DUP2 GT ISZERO PUSH2 0x16B7 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x16C2 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x16E6 JUMPI PUSH1 0x0 DUP8 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x16D5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x1700 JUMP JUMPDEST DUP2 DUP8 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x16F3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP POP POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1479 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1740 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x1750 DUP8 DUP8 DUP8 PUSH2 0x1B1B JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1775 JUMPI POP PUSH2 0x190B SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1907 JUMPI PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x30D40 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x343FBCDD SWAP1 POP PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x17CF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x17E9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A06 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1872 SWAP2 SWAP1 PUSH2 0x29A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x18AE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x18B3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x18DC JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x18D5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x28E6 JUMP JUMPDEST SWAP1 POP PUSH2 0x18E4 JUMP JUMPDEST POP POP POP PUSH2 0x1907 JUMP JUMPDEST DUP1 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x18F1 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1778 JUMP JUMPDEST POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1945 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x1955 DUP8 DUP8 DUP8 PUSH2 0x1B1B JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x197A JUMPI POP PUSH2 0x190B SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1907 JUMPI PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x30D40 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x45060EB0 SWAP1 POP PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x19D4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x19EE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A06 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1A77 SWAP2 SWAP1 PUSH2 0x29A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1AB3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1AB8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x18DC JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1ADA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x28E6 JUMP JUMPDEST SWAP1 POP DUP1 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1AE9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x197D JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 PUSH32 0x153F599700000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x1B56 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x29DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1BDE SWAP2 SWAP1 PUSH2 0x29A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1C19 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1C1E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1C31 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x1C4B JUMPI PUSH2 0x1C41 DUP2 PUSH1 0xC PUSH2 0x202A JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x1C4F JUMP JUMPDEST POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C DUP2 JUMP JUMPDEST PUSH2 0x1C76 PUSH2 0x2289 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH2 0x120 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1C91 SWAP2 SWAP1 PUSH2 0x2D90 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 SWAP1 DUP6 ADD DUP2 SWAP1 MSTORE SWAP1 POP PUSH1 0x5A PUSH1 0x64 DUP3 MOD GT ISZERO PUSH2 0x1CE4 JUMPI PUSH1 0x5 DUP5 MSTORE PUSH2 0x1CE9 JUMP JUMPDEST PUSH1 0x3 DUP5 MSTORE JUMPDEST PUSH1 0xA0 DUP7 ADD MLOAD DUP2 DUP2 PUSH2 0x1CF6 JUMPI INVALID JUMPDEST MOD PUSH1 0x40 DUP6 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP8 ADD MLOAD SUB SWAP3 POP PUSH1 0x2 DUP2 MOD PUSH1 0x1 EQ SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1DA2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D99 SWAP1 PUSH2 0x2BA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DE5 DUP3 PUSH2 0x2079 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x190B DUP4 PUSH2 0x1E3F PUSH2 0x1E23 DUP3 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x210B AND JUMP JUMPDEST PUSH2 0x1E33 DUP9 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x212A AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x215B AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x2177 AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E55 PUSH2 0x21A1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6F2BF62 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E8D SWAP2 SWAP1 PUSH2 0x29BE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1EA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1EB9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1DE5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x25BA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x1F00 JUMPI PUSH2 0x201E JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1F2F SWAP2 SWAP1 PUSH2 0x2D90 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1FB8 SWAP2 SWAP1 PUSH2 0x29A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1FF4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FF9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x201C JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2019 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x28E6 JUMP JUMPDEST SWAP3 POP JUMPDEST POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST ADDRESS SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x2050 JUMPI PUSH2 0x2050 PUSH2 0x204B PUSH1 0x4 DUP6 MLOAD DUP6 PUSH1 0x14 ADD PUSH2 0x21BD JUMP JUMPDEST PUSH2 0x2262 JUMP JUMPDEST POP PUSH1 0x14 DUP2 DUP4 ADD DUP2 ADD MLOAD SWAP2 ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ ISZERO PUSH2 0x20B5 JUMPI POP PUSH1 0x12 PUSH2 0x1DE8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x20C8 SWAP2 SWAP1 PUSH2 0x2962 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0xF AND PUSH1 0x4 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x2124 JUMPI PUSH2 0x2124 PUSH2 0x204B PUSH1 0x2 DUP6 DUP6 PUSH2 0x226A JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2139 JUMPI POP PUSH1 0x0 PUSH2 0x2073 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x2146 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1C4F JUMPI PUSH2 0x1C4F PUSH2 0x204B PUSH1 0x1 DUP7 DUP7 PUSH2 0x226A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1C4F JUMPI PUSH2 0x1C4F PUSH2 0x204B PUSH1 0x0 DUP7 DUP7 PUSH2 0x226A JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x218D JUMPI PUSH2 0x218D PUSH2 0x204B PUSH1 0x3 DUP6 DUP6 PUSH2 0x226A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x2198 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x21DC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B74 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x21DC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B52 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x2073 DUP2 PUSH2 0x2E10 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x22C7 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x22DE JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x22F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x230F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2322 PUSH2 0x231D DUP3 PUSH2 0x2DC0 JUMP JUMPDEST PUSH2 0x2D99 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x235F JUMPI PUSH2 0x234A DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x23D2 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2332 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2379 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2387 PUSH2 0x231D DUP3 PUSH2 0x2DC0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x23A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x23C7 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x23AB JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x23E2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23F8 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2429 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x2D99 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xF DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0x2073 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1C0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x247E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2487 DUP2 PUSH2 0x2D99 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2494 DUP4 DUP4 PUSH2 0x22AB JUMP JUMPDEST DUP2 MSTORE PUSH2 0x24A3 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x22AB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x24B5 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x22AB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x24C7 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x22AB JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2529 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2535 DUP7 DUP4 DUP8 ADD PUSH2 0x23D2 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2551 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x255D DUP7 DUP4 DUP8 ADD PUSH2 0x23D2 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2579 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2585 DUP7 DUP4 DUP8 ADD PUSH2 0x23D2 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x25A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25AE DUP6 DUP3 DUP7 ADD PUSH2 0x23D2 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25CB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1C4F DUP2 PUSH2 0x2E10 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x25EA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x25F5 DUP2 PUSH2 0x2E10 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2605 DUP2 PUSH2 0x2E10 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x2615 DUP2 PUSH2 0x2E10 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2635 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x2640 DUP2 PUSH2 0x2E10 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x2650 DUP2 PUSH2 0x2E10 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x2660 DUP2 PUSH2 0x2E10 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x267B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2687 DUP8 DUP3 DUP9 ADD PUSH2 0x2369 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x26A7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x26B2 DUP2 PUSH2 0x2E10 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x26C2 DUP2 PUSH2 0x2E10 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26DD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x26E9 DUP7 DUP3 DUP8 ADD PUSH2 0x2369 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2708 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x2713 DUP2 PUSH2 0x2E10 JUMP JUMPDEST SWAP4 POP PUSH2 0x2722 DUP7 PUSH1 0x20 DUP8 ADD PUSH2 0x2459 JUMP JUMPDEST SWAP3 POP PUSH2 0x2660 DUP7 PUSH1 0x40 DUP8 ADD PUSH2 0x2459 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2743 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2759 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x2765 DUP6 DUP3 DUP7 ADD PUSH2 0x22B6 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2783 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x279A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x27AB JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP PUSH2 0x27BB PUSH2 0x231D DUP5 PUSH2 0x2DC0 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP4 DUP2 ADD DUP9 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x27F3 JUMPI PUSH2 0x27E1 DUP13 DUP5 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x246B JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x27CA JUMP JUMPDEST POP SWAP2 SWAP8 POP DUP9 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x280B JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x2818 DUP6 DUP3 DUP7 ADD PUSH2 0x22FF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x2837 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x2844 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x284F PUSH1 0x60 PUSH2 0x2D99 JUMP JUMPDEST DUP5 MLOAD PUSH1 0x7 DUP2 LT PUSH2 0x285D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP7 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x80 DUP7 ADD MLOAD SWAP2 SWAP5 POP SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2615 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28A1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x28B8 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x28C4 DUP7 DUP4 DUP8 ADD PUSH2 0x246B JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x28D9 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x2818 DUP6 DUP3 DUP7 ADD PUSH2 0x23D2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x28F7 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2930 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2DE0 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x29B4 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2DE0 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 DUP4 PUSH1 0x40 DUP4 ADD DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2A87 JUMPI DUP3 CALLDATALOAD PUSH2 0x2A5D DUP2 PUSH2 0x2E10 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2A4A JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2B02 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x2AF0 DUP6 DUP4 MLOAD PUSH2 0x2918 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2AB6 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP5 ADD SWAP1 PUSH1 0x40 DUP5 ADD SWAP1 DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2B47 JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2B29 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x2B60 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x2B60 JUMPI INVALID JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F50414952000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0xA0 DUP3 ADD SWAP1 PUSH1 0x7 DUP2 LT PUSH2 0x2C0E JUMPI INVALID JUMPDEST DUP1 DUP4 MSTORE POP PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE DUP4 PUSH1 0x60 DUP4 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x2C50 PUSH1 0x40 DUP4 ADD DUP6 MLOAD PUSH2 0x28FE JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x2C62 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x28FE JUMP JUMPDEST POP PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x2C75 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x28FE JUMP JUMPDEST POP PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x2C88 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x28FE JUMP JUMPDEST POP PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH1 0xC0 DUP5 ADD MLOAD PUSH2 0x100 DUP2 DUP2 DUP6 ADD MSTORE PUSH1 0xE0 DUP7 ADD MLOAD SWAP2 POP PUSH2 0x120 DUP3 DUP2 DUP7 ADD MSTORE DUP2 DUP8 ADD MLOAD SWAP3 POP PUSH2 0x140 SWAP2 POP DUP3 DUP3 DUP7 ADD MSTORE DUP1 DUP8 ADD MLOAD SWAP3 POP POP PUSH2 0x160 DUP3 DUP2 DUP7 ADD MSTORE DUP2 DUP8 ADD MLOAD SWAP3 POP PUSH2 0x1C0 SWAP2 POP PUSH2 0x180 DUP3 DUP2 DUP8 ADD MSTORE PUSH2 0x2CF9 PUSH2 0x200 DUP8 ADD DUP6 PUSH2 0x2918 JUMP JUMPDEST DUP3 DUP10 ADD MLOAD SWAP5 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 SWAP3 POP PUSH2 0x1A0 DUP4 DUP9 DUP4 SUB ADD DUP2 DUP10 ADD MSTORE PUSH2 0x2D38 DUP3 DUP8 PUSH2 0x2918 JUMP JUMPDEST DUP4 DUP12 ADD MLOAD SWAP7 POP DUP5 DUP10 DUP3 SUB ADD DUP7 DUP11 ADD MSTORE PUSH2 0x2D51 DUP2 DUP9 PUSH2 0x2918 JUMP JUMPDEST SWAP6 POP POP DUP1 DUP11 ADD MLOAD SWAP6 POP POP POP POP DUP1 DUP6 DUP4 SUB ADD PUSH2 0x1E0 DUP7 ADD MSTORE POP PUSH2 0x2D73 DUP2 DUP4 PUSH2 0x2918 JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x2D85 DUP2 DUP8 PUSH2 0x2918 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2DB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2DD6 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2DFB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2DE3 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2E0A JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3E6 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 SWAP3 0xC GT PUSH19 0xCE6E67257A2459B5383485A7B465655C04C79D 0xAB CHAINID SELFBALANCE COINBASE ISZERO CALLVALUE 0x2A SWAP10 CODESIZE PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV LT STOP BLOCKHASH PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8C7 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6F2BF62 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x31268657 EQ PUSH2 0x64 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x173 JUMP JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x21A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x77 PUSH2 0x72 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AE JUMP JUMPDEST PUSH2 0xA4 JUMP JUMPDEST STOP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x161 JUMPI PUSH1 0x0 DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0xBD JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 PUSH2 0xD2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x173 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x40 MLOAD PUSH2 0xE1 SWAP1 PUSH2 0x166 JUMP JUMPDEST PUSH2 0xEB SWAP2 SWAP1 PUSH2 0x21A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x107 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH1 0x1 ADD PUSH2 0xA7 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x649 DUP1 PUSH2 0x23C DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x184 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1A7 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1D7 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x1E8 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x1F8 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP6 MUL DUP4 ADD ADD GT ISZERO PUSH2 0x20B JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x20 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x649 CODESIZE SUB DUP1 PUSH2 0x649 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x9E JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH2 0x7D SWAP1 PUSH32 0x1D6A6A0506B0B4A554B907A4C29D9F4674E461989D9C1921FEB17B26716385AB SWAP1 DUP4 SWAP1 PUSH1 0x20 ADD PUSH2 0xCC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0x1 SSTORE POP PUSH2 0xE7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xC5 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 ADD SWAP1 JUMP JUMPDEST PUSH2 0x553 DUP1 PUSH2 0xF6 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9D76EA58 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x9D76EA58 EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0xBFA0B133 EQ PUSH2 0x102 JUMPI DUP1 PUSH4 0xCD72D789 EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0xCD7724C3 EQ PUSH2 0xC0 JUMPI PUSH2 0x7B JUMP JUMPDEST DUP1 PUSH4 0x11F2928B EQ PUSH2 0x80 JUMPI DUP1 PUSH4 0x2640F62C EQ PUSH2 0x8A JUMPI DUP1 PUSH4 0x59E94862 EQ PUSH2 0x8A JUMPI DUP1 PUSH4 0x95B68FE7 EQ PUSH2 0xC0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x88 PUSH2 0x12C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAA PUSH2 0xA5 CALLDATASIZE PUSH1 0x4 PUSH2 0x429 JUMP JUMPDEST PUSH2 0x16F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB7 SWAP2 SWAP1 PUSH2 0x4D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAA PUSH2 0xDB CALLDATASIZE PUSH1 0x4 PUSH2 0x429 JUMP JUMPDEST PUSH2 0x1AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH2 0x1E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB7 SWAP2 SWAP1 PUSH2 0x4AF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAA PUSH2 0x203 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH2 0x209 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x16C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x179 PUSH2 0x221 JUMP JUMPDEST PUSH2 0x1A6 PUSH1 0x1 SLOAD PUSH2 0x187 PUSH2 0x279 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH2 0x291 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B8 PUSH2 0x221 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD PUSH2 0x1A6 SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1E1 PUSH2 0x279 JUMP JUMPDEST DUP6 PUSH2 0x2F2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C DUP2 JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C BALANCE ISZERO PUSH2 0x277 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x26E SWAP1 PUSH2 0x4D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x29D DUP6 PUSH2 0x33E JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x2B0 DUP6 PUSH2 0x33E JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x2C5 DUP9 DUP9 DUP9 PUSH2 0x3D0 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 DUP5 PUSH8 0xDE0B6B3A7640000 DUP9 MUL MUL DUP2 PUSH2 0x2DD JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x2E5 JUMPI INVALID JUMPDEST DIV SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2FE DUP6 PUSH2 0x33E JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x311 DUP6 PUSH2 0x33E JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x326 DUP9 DUP9 DUP9 PUSH2 0x3D0 JUMP JUMPDEST SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP4 DUP4 DUP4 DUP9 MUL MUL DUP2 PUSH2 0x2DD JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ ISZERO PUSH2 0x37A JUMPI POP PUSH1 0x12 PUSH2 0x1A9 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x38D SWAP2 SWAP1 PUSH2 0x441 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0xF AND PUSH1 0x4 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3E8 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x471 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x64 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x412 JUMPI INVALID JUMPDEST DIV PUSH9 0x56BA3D73AF34F0000 DUP3 MOD ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x43A JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 SWAP3 DUP4 SHL DUP2 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SHL AND PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x48 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4641494C5F545249474745524544000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0x2B MLOAD 0xFC DUP4 0x26 DUP10 0xC4 PUSH23 0x183BBB9914FE532C84AD04607427F878B6219980061CE0 0x4D PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV LT STOP BLOCKHASH LOG3 PUSH6 0x627A7A723158 KECCAK256 0xE6 TIMESTAMP 0xF6 ADDRESS ADDRESS SUB 0xC7 0xE2 0xB5 0xF8 PUSH32 0x2EE82CF2BEEFD4E7D06531E7449C6259603039C17F6C6578706572696D656E74 PUSH2 0x6CF5 PUSH5 0x736F6C6343 STOP SDIV LT STOP BLOCKHASH PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4FB DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x11F2928B EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x144A2752 EQ PUSH2 0x4E JUMPI DUP1 PUSH4 0xCD72D789 EQ PUSH2 0x84 JUMPI DUP1 PUSH4 0xFF1FD974 EQ PUSH2 0xA6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4C PUSH2 0xC6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6E PUSH2 0x69 CALLDATASIZE PUSH1 0x4 PUSH2 0x387 JUMP JUMPDEST PUSH2 0x109 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7B SWAP2 SWAP1 PUSH2 0x48D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x99 PUSH2 0x147 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7B SWAP2 SWAP1 PUSH2 0x435 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6E PUSH2 0xC1 CALLDATASIZE PUSH1 0x4 PUSH2 0x387 JUMP JUMPDEST PUSH2 0x15F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x106 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x113 PUSH2 0x195 JUMP JUMPDEST PUSH2 0x13F PUSH32 0xB713B61BB9BB2958A0F5D1534B21E94FC68C4C0C034B0902ED844F2F6CD1B4F7 DUP5 DUP7 DUP6 PUSH2 0x1ED JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x169 PUSH2 0x195 JUMP JUMPDEST PUSH2 0x13F PUSH32 0xB713B61BB9BB2958A0F5D1534B21E94FC68C4C0C034B0902ED844F2F6CD1B4F7 DUP6 DUP6 DUP6 PUSH2 0x24E JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C BALANCE ISZERO PUSH2 0x1EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E2 SWAP1 PUSH2 0x456 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F9 DUP6 PUSH2 0x29A JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x20C DUP6 PUSH2 0x29A JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x221 DUP9 DUP9 DUP9 PUSH2 0x32E JUMP JUMPDEST SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP4 DUP4 DUP4 DUP9 MUL MUL DUP2 PUSH2 0x239 JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x241 JUMPI INVALID JUMPDEST DIV SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x25A DUP6 PUSH2 0x29A JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x26D DUP6 PUSH2 0x29A JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x282 DUP9 DUP9 DUP9 PUSH2 0x32E JUMP JUMPDEST SWAP1 POP DUP2 DUP2 DUP5 PUSH8 0xDE0B6B3A7640000 DUP9 MUL MUL DUP2 PUSH2 0x239 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ ISZERO PUSH2 0x2D6 JUMPI POP PUSH1 0x12 PUSH2 0x329 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2E9 SWAP2 SWAP1 PUSH2 0x3C7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0xF AND PUSH1 0x4 ADD SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x346 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3F7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x64 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x370 JUMPI INVALID JUMPDEST DIV PUSH9 0x56BA3D73AF34F0000 DUP3 MOD ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x39B JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x3A6 DUP2 PUSH2 0x496 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x3B6 DUP2 PUSH2 0x496 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 SWAP3 DUP4 SHL DUP2 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SHL AND PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x48 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4641494C5F545249474745524544000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x106 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 SLT PUSH29 0xEFAE3191A7DD768E753EFFFE3624723CD097663F65AD7CBCAF47B425C7 0xF6 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV LT STOP BLOCKHASH PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x403 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x11F2928B EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x809A9E55 EQ PUSH2 0x4E JUMPI DUP1 PUSH4 0xA734F06E EQ PUSH2 0x85 JUMPI DUP1 PUSH4 0xCD72D789 EQ PUSH2 0xA7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4C PUSH2 0xBC JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6E PUSH2 0x69 CALLDATASIZE PUSH1 0x4 PUSH2 0x2BA JUMP JUMPDEST PUSH2 0xFF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7C SWAP3 SWAP2 SWAP1 PUSH2 0x390 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9A PUSH2 0x1C1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7C SWAP2 SWAP1 PUSH2 0x338 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9A PUSH2 0x1D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xFC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10A PUSH2 0x1F1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ PUSH2 0x141 JUMPI DUP5 PUSH2 0x149 JUMP JUMPDEST PUSH2 0x149 PUSH2 0x249 JUMP JUMPDEST SWAP5 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ PUSH2 0x182 JUMPI DUP4 PUSH2 0x18A JUMP JUMPDEST PUSH2 0x18A PUSH2 0x249 JUMP JUMPDEST SWAP4 POP PUSH2 0x1B7 PUSH32 0xFF3CA9D46195C39F9A12AFB74207B4970349FB3CFB1E459BBF170298D326BC7 DUP7 DUP7 PUSH2 0x261 JUMP JUMPDEST SWAP2 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C DUP2 JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C BALANCE ISZERO PUSH2 0x247 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23E SWAP1 PUSH2 0x359 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x279 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2FA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x64 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x2A3 JUMPI INVALID JUMPDEST DIV PUSH9 0x56BA3D73AF34F0000 DUP3 MOD ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2CE JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2D9 DUP2 PUSH2 0x39E JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2E9 DUP2 PUSH2 0x39E JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 SWAP3 DUP4 SHL DUP2 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SHL AND PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x48 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4641494C5F545249474745524544000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xFC JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xFC CALLCODE 0xAA ADD PUSH4 0xB0D74CE3 PUSH1 0x46 0xB9 LOG4 0xD0 0xDF 0xDF LT PUSH17 0x348492535455E686D495FB6D5EBA6C6578 PUSH17 0x6572696D656E74616CF564736F6C634300 SDIV LT STOP BLOCKHASH ",
                "sourceMap": "8473:2898:11:-;;;8813:211;8:9:-1;5:2;;;30:1;27;20:12;5:2;8813:211:11;8854:50;;;;;:::i;:::-;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;8844:7:11;:60;;-1:-1:-1;;;;;;8844:60:11;-1:-1:-1;;;;;8844:60:11;;;;;;;;;;8924:35;;;;;:::i;:::-;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;8914:7:11;:45;;-1:-1:-1;;;;;;8914:45:11;-1:-1:-1;;;;;8914:45:11;;;;;;;;;;8977:40;;;;;:::i;:::-;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;8969:5:11;:48;;-1:-1:-1;;;;;;8969:48:11;-1:-1:-1;;;;;8969:48:11;;;;;;;;;;8473:2898;;;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "0x6080604052600436106101445760003560e01c806368be3cf2116100c0578063a2d10ba511610074578063cd72d78911610059578063cd72d7891461034d578063e77286eb14610362578063fea12a031461039157610144565b8063a2d10ba514610318578063c7f7142e1461032d57610144565b80638b123a02116100a55780638b123a02146102b85780639f76ad35146102d8578063a2c28d4b146102f857610144565b806368be3cf21461026b5780636dd6b78d1461029857610144565b80634703a7e61161011757806359f515d0116100fc57806359f515d01461020b57806360ee052a1461022b57806364ee6ade1461024b57610144565b80634703a7e6146101cb5780634cb8e253146101eb57610144565b806311f2928b146101495780632681f7e414610153578063312686571461017e578063354152a31461019e575b600080fd5b6101516103a6565b005b34801561015f57600080fd5b506101686103e9565b60405161017591906129be565b60405180910390f35b34801561018a57600080fd5b50610151610199366004612731565b610405565b3480156101aa57600080fd5b506101be6101b93660046126f3565b610493565b6040516101759190612b0f565b3480156101d757600080fd5b506101be6101e6366004612693565b610664565b3480156101f757600080fd5b506101be610206366004612693565b610840565b34801561021757600080fd5b506101be610226366004612771565b610b30565b34801561023757600080fd5b506101be610246366004612693565b610bd9565b34801561025757600080fd5b506101be610266366004612693565b610e99565b34801561027757600080fd5b5061028b610286366004612731565b61105f565b6040516101759190612a91565b3480156102a457600080fd5b506101be6102b3366004612693565b61119e565b3480156102c457600080fd5b506101be6102d3366004612771565b611446565b3480156102e457600080fd5b506101be6102f3366004612620565b61170e565b34801561030457600080fd5b506101be610313366004612620565b611913565b34801561032457600080fd5b50610168611aff565b34801561033957600080fd5b506101686103483660046125d6565b611b1b565b34801561035957600080fd5b50610168611c56565b34801561036e57600080fd5b5061038261037d36600461288f565b611c6e565b60405161017593929190612bfd565b34801561039d57600080fd5b50610168611d17565b60405173e9db8717bc5dfb20aaf538b4a5a02b7791ff430c903480156108fc02916000818181858888f193505050501580156103e6573d6000803e3d6000fd5b50565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6000546040517f3126865700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063312686579061045d9085908590600401612a37565b600060405180830381600087803b15801561047757600080fd5b505af115801561048b573d6000803e3d6000fd5b505050505050565b6060600082519050806040519080825280602002602001820160405280156104c5578160200160208202803883390190505b50915060005b8181101561065a57600060608873ffffffffffffffffffffffffffffffffffffffff16620927c0600073ffffffffffffffffffffffffffffffffffffffff166307211ef7905060e01b8a8a8a888151811061052257fe5b602002602001015160405160240161053c93929190612b82565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516105c591906129a2565b6000604051808303818686fa925050503d8060008114610601576040519150601f19603f3d011682016040523d82523d6000602084013e610606565b606091505b5090925090506000821561062f578180602001905161062891908101906128e6565b9050610637565b50505061065a565b8086858151811061064457fe5b60209081029190910101525050506001016104cb565b5050949350505050565b60606106708385611d33565b815160408051828152602080840282010190915281801561069b578160200160208202803883390190505b50915060005b8181101561083757600060606106b5611da6565b73ffffffffffffffffffffffffffffffffffffffff16620f4240600073ffffffffffffffffffffffffffffffffffffffff1663ff1fd974905060e01b8a8a8a88815181106106ff57fe5b602002602001015160405160240161071993929190612a06565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516107a291906129a2565b6000604051808303818686fa925050503d80600081146107de576040519150601f19603f3d011682016040523d82523d6000602084013e6107e3565b606091505b5090925090506000821561080c578180602001905161080591908101906128e6565b9050610814565b505050610837565b8086858151811061082157fe5b60209081029190910101525050506001016106a1565b50509392505050565b606061084c8385611d33565b6000610856611dc2565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461088e57846108a4565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b905060006108b0611dc2565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146108e857846108fe565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b9050600061090b87611dda565b60ff169050600061091b87611dda565b60ff16905060008651905080604051908082528060200260200182016040528015610950578160200160208202803883390190505b50955060005b81811015610b23576000606061096a611ded565b73ffffffffffffffffffffffffffffffffffffffff166216e360600073ffffffffffffffffffffffffffffffffffffffff1663809a9e55905060e01b8a8a8e88815181106109b457fe5b60200260200101516040516024016109ce93929190612a06565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610a5791906129a2565b6000604051808303818686fa925050503d8060008114610a93576040519150601f19603f3d011682016040523d82523d6000602084013e610a98565b606091505b50909250905060008215610ac15781806020019051610aba91908101906128e6565b9050610ac9565b505050610b23565b670de0b6b3a764000087600a0a87600a0a8d8781518110610ae657fe5b602002602001015184020281610af857fe5b0481610b0057fe5b048a8581518110610b0d57fe5b6020908102919091010152505050600101610956565b5050505050509392505050565b6060610b3c8383611446565b905060005b8351811015610bd257818181518110610b5657fe5b6020026020010151600014610bca57610bb1828281518110610b7457fe5b6020026020010151858381518110610b8857fe5b602002602001015160a00151868481518110610ba057fe5b602002602001015160800151611e09565b828281518110610bbd57fe5b6020026020010181815250505b600101610b41565b5092915050565b6060610be58385611d33565b8151604080518281526020808402820101909152818015610c10578160200160208202803883390190505b5091506000610c1d611dc2565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610c5d57610c5886611e4b565b610c60565b60005b90506000610c6c611dc2565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610cac57610ca786611e4b565b610caf565b60005b905060005b83811015610e8e576001610cc6611dc2565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415610d5d578651610d3c9085907f2640f62c00000000000000000000000000000000000000000000000000000000908a9086908110610d2f57fe5b6020026020010151611edd565b878481518110610d4857fe5b60200260200101819350828152505050610e7a565b610d65611dc2565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415610dce578651610d3c9084907f59e9486200000000000000000000000000000000000000000000000000000000908a9086908110610d2f57fe5b8651600090610e079085907f59e9486200000000000000000000000000000000000000000000000000000000908b9087908110610d2f57fe5b925090508015610e5d57610e3c857f2640f62c0000000000000000000000000000000000000000000000000000000083611edd565b888581518110610e4857fe5b60200260200101819450828152505050610e78565b6000878481518110610e6b57fe5b6020026020010181815250505b505b80610e855750610e8e565b50600101610cb4565b505050509392505050565b6060610ea58385611d33565b8151604080518281526020808402820101909152818015610ed0578160200160208202803883390190505b50915060005b818110156108375760006060610eea611da6565b73ffffffffffffffffffffffffffffffffffffffff16620f4240600073ffffffffffffffffffffffffffffffffffffffff1663144a2752905060e01b898b8a8881518110610f3457fe5b6020026020010151604051602401610f4e93929190612a06565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610fd791906129a2565b6000604051808303818686fa925050503d8060008114611013576040519150601f19603f3d011682016040523d82523d6000602084013e611018565b606091505b5090925090506000821561080c578180602001905161103a91908101906128e6565b90508086858151811061104957fe5b6020908102919091010152505050600101610ed6565b60408051828152602080840282010190915260609082801561109557816020015b60608152602001906001900390816110805790505b50905060005b808314610bd25760006060308686858181106110b357fe5b6020028201905080357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1368490030181126110ed57600080fd5b9091016020810191503567ffffffffffffffff81111561110c57600080fd5b3681900382131561111c57600080fd5b60405161112a929190612992565b600060405180830381855afa9150503d8060008114611165576040519150601f19603f3d011682016040523d82523d6000602084013e61116a565b606091505b50915091508161117c57805160208201fd5b8084848151811061118957fe5b6020908102919091010152505060010161109b565b60606111aa8385611d33565b81516040805182815260208084028201019091528180156111d5578160200160208202803883390190505b50915060006111e2611dc2565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146112225761121d86611e4b565b611225565b60005b90506000611231611dc2565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146112715761126c86611e4b565b611274565b60005b905060005b83811015610e8e57600161128b611dc2565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614156113155786516112f49085907f95b68fe700000000000000000000000000000000000000000000000000000000908a9086908110610d2f57fe5b87848151811061130057fe5b60200260200101819350828152505050611432565b61131d611dc2565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614156113865786516112f49084907fcd7724c300000000000000000000000000000000000000000000000000000000908a9086908110610d2f57fe5b86516000906113bf9086907f95b68fe700000000000000000000000000000000000000000000000000000000908b9087908110610d2f57fe5b925090508015611415576113f4847fcd7724c30000000000000000000000000000000000000000000000000000000083611edd565b88858151811061140057fe5b60200260200101819450828152505050611430565b600087848151811061142357fe5b6020026020010181815250505b505b8061143d5750610e8e565b50600101611279565b60608251604051908082528060200260200182016040528015611473578160200160208202803883390190505b50905060005b83518114610bd25782818151811061148d57fe5b602002602001015151600014806114bb57508381815181106114ab57fe5b6020026020010151608001516000145b806114dd57508381815181106114cd57fe5b602002602001015160a001516000145b156115015760008282815181106114f057fe5b602002602001018181525050611706565b6000606061150d612026565b73ffffffffffffffffffffffffffffffffffffffff166207a12061152f612026565b5087517fe77286eb000000000000000000000000000000000000000000000000000000009089908790811061156057fe5b602002602001015188878151811061157457fe5b602002602001015160405160240161158d929190612c3c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161161691906129a2565b6000604051808303818686fa925050503d8060008114611652576040519150601f19603f3d011682016040523d82523d6000602084013e611657565b606091505b50915091508161168257600084848151811061166f57fe5b6020026020010181815250505050611706565b61168a612289565b600080838060200190516116a19190810190612822565b919450925090506003835160068111156116b757fe5b1415806116c2575080155b156116e65760008787815181106116d557fe5b602002602001018181525050611700565b818787815181106116f357fe5b6020026020010181815250505b50505050505b600101611479565b606060008251905080604051908082528060200260200182016040528015611740578160200160208202803883390190505b5091506000611750878787611b1b565b905073ffffffffffffffffffffffffffffffffffffffff8116611775575061190b9050565b60005b8281101561190757600060608373ffffffffffffffffffffffffffffffffffffffff1662030d40600073ffffffffffffffffffffffffffffffffffffffff1663343fbcdd905060e01b8b8b8b88815181106117cf57fe5b60200260200101516040516024016117e993929190612a06565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161187291906129a2565b6000604051808303818686fa925050503d80600081146118ae576040519150601f19603f3d011682016040523d82523d6000602084013e6118b3565b606091505b509092509050600082156118dc57818060200190516118d591908101906128e6565b90506118e4565b505050611907565b808785815181106118f157fe5b6020908102919091010152505050600101611778565b5050505b949350505050565b606060008251905080604051908082528060200260200182016040528015611945578160200160208202803883390190505b5091506000611955878787611b1b565b905073ffffffffffffffffffffffffffffffffffffffff811661197a575061190b9050565b60005b8281101561190757600060608373ffffffffffffffffffffffffffffffffffffffff1662030d40600073ffffffffffffffffffffffffffffffffffffffff166345060eb0905060e01b8b8b8b88815181106119d457fe5b60200260200101516040516024016119ee93929190612a06565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051611a7791906129a2565b6000604051808303818686fa925050503d8060008114611ab3576040519150601f19603f3d011682016040523d82523d6000602084013e611ab8565b606091505b509092509050600082156118dc5781806020019051611ada91908101906128e6565b905080878581518110611ae957fe5b602090810291909101015250505060010161197d565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b6040516000906060907f153f59970000000000000000000000000000000000000000000000000000000090611b5690869086906024016129df565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608673ffffffffffffffffffffffffffffffffffffffff1683604051611bde91906129a2565b600060405180830381855afa9150503d8060008114611c19576040519150601f19603f3d011682016040523d82523d6000602084013e611c1e565b606091505b5091509150818015611c31575080516020145b15611c4b57611c4181600c61202a565b9350505050611c4f565b5050505b9392505050565b73e9db8717bc5dfb20aaf538b4a5a02b7791ff430c81565b611c76612289565b6000806000856101200151604051602001611c919190612d90565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020918201209085018190529050605a606482061115611ce45760058452611ce9565b600384525b60a08601518181611cf657fe5b066040850181905260a0870151039250600281066001149150509250925092565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611da2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9990612ba0565b60405180910390fd5b5050565b60015473ffffffffffffffffffffffffffffffffffffffff1690565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b6000611de582612079565b90505b919050565b60025473ffffffffffffffffffffffffffffffffffffffff1690565b600061190b83611e3f611e2382600163ffffffff61210b16565b611e33888763ffffffff61212a16565b9063ffffffff61215b16565b9063ffffffff61217716565b6000611e556121a1565b73ffffffffffffffffffffffffffffffffffffffff166306f2bf62836040518263ffffffff1660e01b8152600401611e8d91906129be565b60206040518083038186803b158015611ea557600080fd5b505afa158015611eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611de591908101906125ba565b60008073ffffffffffffffffffffffffffffffffffffffff8516611f005761201e565b60608573ffffffffffffffffffffffffffffffffffffffff16620249f08686604051602401611f2f9190612d90565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051611fb891906129a2565b6000604051808303818686fa925050503d8060008114611ff4576040519150601f19603f3d011682016040523d82523d6000602084013e611ff9565b606091505b509092509050811561201c578080602001905161201991908101906128e6565b92505b505b935093915050565b3090565b600081601401835110156120505761205061204b60048551856014016121bd565b612262565b50601481830181015191019073ffffffffffffffffffffffffffffffffffffffff165b92915050565b600073ffffffffffffffffffffffffffffffffffffffff821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214156120b557506012611de8565b6000826040516020016120c89190612962565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529190528051602090910120600f166004019392505050565b6000828211156121245761212461204b6002858561226a565b50900390565b60008261213957506000612073565b8282028284828161214657fe5b0414611c4f57611c4f61204b6001868661226a565b600082820183811015611c4f57611c4f61204b6000868661226a565b60008161218d5761218d61204b6003858561226a565b600082848161219857fe5b04949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b6060632800659560e01b8484846040516024016121dc93929190612b74565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b606063e946c1bb60e01b8484846040516024016121dc93929190612b52565b6040805160608101909152806000815260006020820181905260409091015290565b803561207381612e10565b60008083601f8401126122c7578182fd5b50813567ffffffffffffffff8111156122de578182fd5b60208301915083602080830285010111156122f857600080fd5b9250929050565b600082601f83011261230f578081fd5b813561232261231d82612dc0565b612d99565b8181529150602080830190840160005b8381101561235f5761234a87602084358901016123d2565b83526020928301929190910190600101612332565b5050505092915050565b600082601f830112612379578081fd5b813561238761231d82612dc0565b8181529150602080830190848101818402860182018710156123a857600080fd5b60005b848110156123c7578135845292820192908201906001016123ab565b505050505092915050565b600082601f8301126123e2578081fd5b813567ffffffffffffffff8111156123f8578182fd5b61242960207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612d99565b915080825283602082850101111561244057600080fd5b8060208401602084013760009082016020015292915050565b8035600f81900b811461207357600080fd5b60006101c080838503121561247e578182fd5b61248781612d99565b91505061249483836122ab565b81526124a383602084016122ab565b60208201526124b583604084016122ab565b60408201526124c783606084016122ab565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013567ffffffffffffffff8082111561252957600080fd5b612535868387016123d2565b8385015261016092508285013591508082111561255157600080fd5b61255d868387016123d2565b8385015261018092508285013591508082111561257957600080fd5b612585868387016123d2565b838501526101a09250828501359150808211156125a157600080fd5b506125ae858286016123d2565b82840152505092915050565b6000602082840312156125cb578081fd5b8151611c4f81612e10565b6000806000606084860312156125ea578182fd5b83356125f581612e10565b9250602084013561260581612e10565b9150604084013561261581612e10565b809150509250925092565b60008060008060808587031215612635578182fd5b843561264081612e10565b9350602085013561265081612e10565b9250604085013561266081612e10565b9150606085013567ffffffffffffffff81111561267b578182fd5b61268787828801612369565b91505092959194509250565b6000806000606084860312156126a7578081fd5b83356126b281612e10565b925060208401356126c281612e10565b9150604084013567ffffffffffffffff8111156126dd578182fd5b6126e986828701612369565b9150509250925092565b60008060008060808587031215612708578182fd5b843561271381612e10565b93506127228660208701612459565b92506126608660408701612459565b60008060208385031215612743578182fd5b823567ffffffffffffffff811115612759578283fd5b612765858286016122b6565b90969095509350505050565b60008060408385031215612783578182fd5b823567ffffffffffffffff8082111561279a578384fd5b81850186601f8201126127ab578485fd5b803592506127bb61231d84612dc0565b83815260208082019190838101885b878110156127f3576127e18c84843589010161246b565b855293820193908201906001016127ca565b5091975088013594505050508082111561280b578283fd5b50612818858286016122ff565b9150509250929050565b600080600083850360a0811215612837578182fd5b6060811215612844578182fd5b5061284f6060612d99565b84516007811061285d578283fd5b815260208581015190820152604080860151908201526060850151608086015191945092508015158114612615578182fd5b600080604083850312156128a1578182fd5b823567ffffffffffffffff808211156128b8578384fd5b6128c48683870161246b565b935060208501359150808211156128d9578283fd5b50612818858286016123d2565b6000602082840312156128f7578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff169052565b60008151808452612930816020860160208601612de0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6000828483379101908152919050565b600082516129b4818460208701612de0565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b6020808252810182905260008360408301825b85811015612a87578235612a5d81612e10565b73ffffffffffffffffffffffffffffffffffffffff16825260209283019290910190600101612a4a565b5095945050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015612b02577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612af0858351612918565b94509285019290850190600101612ab6565b5092979650505050505050565b602080825282518282018190526000918401906040840190835b81811015612b47578351835260209384019390920191600101612b29565b509095945050505050565b6060810160048510612b6057fe5b938152602081019290925260409091015290565b6060810160088510612b6057fe5b600f93840b81529190920b6020820152604081019190915260600190565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e60408201527f5f50414952000000000000000000000000000000000000000000000000000000606082015260800190565b835160a082019060078110612c0e57fe5b8083525060208501516020830152604085015160408301528360608301528215156080830152949350505050565b600060408252612c506040830185516128fe565b6020840151612c6260608401826128fe565b506040840151612c7560808401826128fe565b506060840151612c8860a08401826128fe565b50608084015160c083015260a084015160e083015260c0840151610100818185015260e086015191506101208281860152818701519250610140915082828601528087015192505061016082818601528187015192506101c091506101808281870152612cf9610200870185612918565b8289015194507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc092506101a0838883030181890152612d388287612918565b838b015196508489820301868a0152612d518188612918565b955050808a0151955050505080858303016101e086015250612d738183612918565b8481036020860152612d858187612918565b979650505050505050565b90815260200190565b60405181810167ffffffffffffffff81118282101715612db857600080fd5b604052919050565b600067ffffffffffffffff821115612dd6578081fd5b5060209081020190565b60005b83811015612dfb578181015183820152602001612de3565b83811115612e0a576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff811681146103e657600080fdfea365627a7a72315820920c1172ce6e67257a2459b5383485a7b465655c04c79dab46474115342a99386c6578706572696d656e74616cf564736f6c63430005100040",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x144 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x68BE3CF2 GT PUSH2 0xC0 JUMPI DUP1 PUSH4 0xA2D10BA5 GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xCD72D789 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xCD72D789 EQ PUSH2 0x34D JUMPI DUP1 PUSH4 0xE77286EB EQ PUSH2 0x362 JUMPI DUP1 PUSH4 0xFEA12A03 EQ PUSH2 0x391 JUMPI PUSH2 0x144 JUMP JUMPDEST DUP1 PUSH4 0xA2D10BA5 EQ PUSH2 0x318 JUMPI DUP1 PUSH4 0xC7F7142E EQ PUSH2 0x32D JUMPI PUSH2 0x144 JUMP JUMPDEST DUP1 PUSH4 0x8B123A02 GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0x8B123A02 EQ PUSH2 0x2B8 JUMPI DUP1 PUSH4 0x9F76AD35 EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0xA2C28D4B EQ PUSH2 0x2F8 JUMPI PUSH2 0x144 JUMP JUMPDEST DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x26B JUMPI DUP1 PUSH4 0x6DD6B78D EQ PUSH2 0x298 JUMPI PUSH2 0x144 JUMP JUMPDEST DUP1 PUSH4 0x4703A7E6 GT PUSH2 0x117 JUMPI DUP1 PUSH4 0x59F515D0 GT PUSH2 0xFC JUMPI DUP1 PUSH4 0x59F515D0 EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0x60EE052A EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x64EE6ADE EQ PUSH2 0x24B JUMPI PUSH2 0x144 JUMP JUMPDEST DUP1 PUSH4 0x4703A7E6 EQ PUSH2 0x1CB JUMPI DUP1 PUSH4 0x4CB8E253 EQ PUSH2 0x1EB JUMPI PUSH2 0x144 JUMP JUMPDEST DUP1 PUSH4 0x11F2928B EQ PUSH2 0x149 JUMPI DUP1 PUSH4 0x2681F7E4 EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x31268657 EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0x354152A3 EQ PUSH2 0x19E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x151 PUSH2 0x3A6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x168 PUSH2 0x3E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x175 SWAP2 SWAP1 PUSH2 0x29BE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x151 PUSH2 0x199 CALLDATASIZE PUSH1 0x4 PUSH2 0x2731 JUMP JUMPDEST PUSH2 0x405 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x1B9 CALLDATASIZE PUSH1 0x4 PUSH2 0x26F3 JUMP JUMPDEST PUSH2 0x493 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x175 SWAP2 SWAP1 PUSH2 0x2B0F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x1E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x2693 JUMP JUMPDEST PUSH2 0x664 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x206 CALLDATASIZE PUSH1 0x4 PUSH2 0x2693 JUMP JUMPDEST PUSH2 0x840 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x226 CALLDATASIZE PUSH1 0x4 PUSH2 0x2771 JUMP JUMPDEST PUSH2 0xB30 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x246 CALLDATASIZE PUSH1 0x4 PUSH2 0x2693 JUMP JUMPDEST PUSH2 0xBD9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x2693 JUMP JUMPDEST PUSH2 0xE99 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28B PUSH2 0x286 CALLDATASIZE PUSH1 0x4 PUSH2 0x2731 JUMP JUMPDEST PUSH2 0x105F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x175 SWAP2 SWAP1 PUSH2 0x2A91 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x2B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2693 JUMP JUMPDEST PUSH2 0x119E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x2D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2771 JUMP JUMPDEST PUSH2 0x1446 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x2F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2620 JUMP JUMPDEST PUSH2 0x170E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x304 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE PUSH2 0x313 CALLDATASIZE PUSH1 0x4 PUSH2 0x2620 JUMP JUMPDEST PUSH2 0x1913 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x324 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x168 PUSH2 0x1AFF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x339 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x168 PUSH2 0x348 CALLDATASIZE PUSH1 0x4 PUSH2 0x25D6 JUMP JUMPDEST PUSH2 0x1B1B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x168 PUSH2 0x1C56 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x382 PUSH2 0x37D CALLDATASIZE PUSH1 0x4 PUSH2 0x288F JUMP JUMPDEST PUSH2 0x1C6E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x175 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2BFD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x168 PUSH2 0x1D17 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x3E6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x3126865700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x31268657 SWAP1 PUSH2 0x45D SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A37 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x477 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x48B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4C5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x65A JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x927C0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7211EF7 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x522 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x53C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B82 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5C5 SWAP2 SWAP1 PUSH2 0x29A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x601 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x606 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x62F JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x628 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x28E6 JUMP JUMPDEST SWAP1 POP PUSH2 0x637 JUMP JUMPDEST POP POP POP PUSH2 0x65A JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x644 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x4CB JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x670 DUP4 DUP6 PUSH2 0x1D33 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x69B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x837 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x6B5 PUSH2 0x1DA6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xF4240 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFF1FD974 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x6FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x719 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A06 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x7A2 SWAP2 SWAP1 PUSH2 0x29A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7DE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7E3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x80C JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x805 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x28E6 JUMP JUMPDEST SWAP1 POP PUSH2 0x814 JUMP JUMPDEST POP POP POP PUSH2 0x837 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x821 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x6A1 JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x84C DUP4 DUP6 PUSH2 0x1D33 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x856 PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x88E JUMPI DUP5 PUSH2 0x8A4 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8B0 PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x8E8 JUMPI DUP5 PUSH2 0x8FE JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x90B DUP8 PUSH2 0x1DDA JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x91B DUP8 PUSH2 0x1DDA JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 DUP7 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x950 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP6 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB23 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x96A PUSH2 0x1DED JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x16E360 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x809A9E55 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP15 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x9B4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9CE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A06 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0xA57 SWAP2 SWAP1 PUSH2 0x29A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA93 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA98 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0xAC1 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xABA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x28E6 JUMP JUMPDEST SWAP1 POP PUSH2 0xAC9 JUMP JUMPDEST POP POP POP PUSH2 0xB23 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP8 PUSH1 0xA EXP DUP8 PUSH1 0xA EXP DUP14 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0xAE6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 MUL MUL DUP2 PUSH2 0xAF8 JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0xB00 JUMPI INVALID JUMPDEST DIV DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xB0D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x956 JUMP JUMPDEST POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xB3C DUP4 DUP4 PUSH2 0x1446 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0xBD2 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xB56 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0xBCA JUMPI PUSH2 0xBB1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xB74 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB88 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xBA0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH2 0x1E09 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBBD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xB41 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xBE5 DUP4 DUP6 PUSH2 0x1D33 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0xC10 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0xC1D PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC5D JUMPI PUSH2 0xC58 DUP7 PUSH2 0x1E4B JUMP JUMPDEST PUSH2 0xC60 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC6C PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCAC JUMPI PUSH2 0xCA7 DUP7 PUSH2 0x1E4B JUMP JUMPDEST PUSH2 0xCAF JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE8E JUMPI PUSH1 0x1 PUSH2 0xCC6 PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD5D JUMPI DUP7 MLOAD PUSH2 0xD3C SWAP1 DUP6 SWAP1 PUSH32 0x2640F62C00000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0xD2F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1EDD JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD48 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0xE7A JUMP JUMPDEST PUSH2 0xD65 PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xDCE JUMPI DUP7 MLOAD PUSH2 0xD3C SWAP1 DUP5 SWAP1 PUSH32 0x59E9486200000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0xD2F JUMPI INVALID JUMPDEST DUP7 MLOAD PUSH1 0x0 SWAP1 PUSH2 0xE07 SWAP1 DUP6 SWAP1 PUSH32 0x59E9486200000000000000000000000000000000000000000000000000000000 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0xD2F JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0xE5D JUMPI PUSH2 0xE3C DUP6 PUSH32 0x2640F62C00000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x1EDD JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE48 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0xE78 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xE6B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0xE85 JUMPI POP PUSH2 0xE8E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xCB4 JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xEA5 DUP4 DUP6 PUSH2 0x1D33 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0xED0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x837 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0xEEA PUSH2 0x1DA6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xF4240 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x144A2752 SWAP1 POP PUSH1 0xE0 SHL DUP10 DUP12 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0xF34 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xF4E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A06 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0xFD7 SWAP2 SWAP1 PUSH2 0x29A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1013 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1018 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x80C JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x103A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x28E6 JUMP JUMPDEST SWAP1 POP DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1049 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0xED6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 DUP3 DUP1 ISZERO PUSH2 0x1095 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1080 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0xBD2 JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x10B3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL DUP3 ADD SWAP1 POP DUP1 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 CALLDATASIZE DUP5 SWAP1 SUB ADD DUP2 SLT PUSH2 0x10ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 ADD PUSH1 0x20 DUP2 ADD SWAP2 POP CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x110C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x111C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x112A SWAP3 SWAP2 SWAP1 PUSH2 0x2992 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1165 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x116A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x117C JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1189 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x109B JUMP JUMPDEST PUSH1 0x60 PUSH2 0x11AA DUP4 DUP6 PUSH2 0x1D33 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x11D5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x11E2 PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1222 JUMPI PUSH2 0x121D DUP7 PUSH2 0x1E4B JUMP JUMPDEST PUSH2 0x1225 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1231 PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1271 JUMPI PUSH2 0x126C DUP7 PUSH2 0x1E4B JUMP JUMPDEST PUSH2 0x1274 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE8E JUMPI PUSH1 0x1 PUSH2 0x128B PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1315 JUMPI DUP7 MLOAD PUSH2 0x12F4 SWAP1 DUP6 SWAP1 PUSH32 0x95B68FE700000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0xD2F JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1300 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1432 JUMP JUMPDEST PUSH2 0x131D PUSH2 0x1DC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1386 JUMPI DUP7 MLOAD PUSH2 0x12F4 SWAP1 DUP5 SWAP1 PUSH32 0xCD7724C300000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0xD2F JUMPI INVALID JUMPDEST DUP7 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x13BF SWAP1 DUP7 SWAP1 PUSH32 0x95B68FE700000000000000000000000000000000000000000000000000000000 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0xD2F JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x1415 JUMPI PUSH2 0x13F4 DUP5 PUSH32 0xCD7724C300000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x1EDD JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1400 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1430 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1423 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x143D JUMPI POP PUSH2 0xE8E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1279 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1473 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0xBD2 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x148D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x14BB JUMPI POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x14AB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH1 0x0 EQ JUMPDEST DUP1 PUSH2 0x14DD JUMPI POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x14CD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x1501 JUMPI PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x14F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x1706 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x150D PUSH2 0x2026 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x7A120 PUSH2 0x152F PUSH2 0x2026 JUMP JUMPDEST POP DUP8 MLOAD PUSH32 0xE77286EB00000000000000000000000000000000000000000000000000000000 SWAP1 DUP10 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0x1560 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x1574 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x158D SWAP3 SWAP2 SWAP1 PUSH2 0x2C3C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1616 SWAP2 SWAP1 PUSH2 0x29A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1652 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1657 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1682 JUMPI PUSH1 0x0 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x166F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP PUSH2 0x1706 JUMP JUMPDEST PUSH2 0x168A PUSH2 0x2289 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x16A1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2822 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x3 DUP4 MLOAD PUSH1 0x6 DUP2 GT ISZERO PUSH2 0x16B7 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x16C2 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x16E6 JUMPI PUSH1 0x0 DUP8 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x16D5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x1700 JUMP JUMPDEST DUP2 DUP8 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x16F3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP POP POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1479 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1740 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x1750 DUP8 DUP8 DUP8 PUSH2 0x1B1B JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1775 JUMPI POP PUSH2 0x190B SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1907 JUMPI PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x30D40 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x343FBCDD SWAP1 POP PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x17CF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x17E9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A06 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1872 SWAP2 SWAP1 PUSH2 0x29A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x18AE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x18B3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x18DC JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x18D5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x28E6 JUMP JUMPDEST SWAP1 POP PUSH2 0x18E4 JUMP JUMPDEST POP POP POP PUSH2 0x1907 JUMP JUMPDEST DUP1 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x18F1 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1778 JUMP JUMPDEST POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1945 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x1955 DUP8 DUP8 DUP8 PUSH2 0x1B1B JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x197A JUMPI POP PUSH2 0x190B SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1907 JUMPI PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x30D40 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x45060EB0 SWAP1 POP PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x19D4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x19EE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A06 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1A77 SWAP2 SWAP1 PUSH2 0x29A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1AB3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1AB8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x18DC JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1ADA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x28E6 JUMP JUMPDEST SWAP1 POP DUP1 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1AE9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x197D JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 PUSH32 0x153F599700000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x1B56 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x29DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1BDE SWAP2 SWAP1 PUSH2 0x29A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1C19 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1C1E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1C31 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x1C4B JUMPI PUSH2 0x1C41 DUP2 PUSH1 0xC PUSH2 0x202A JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x1C4F JUMP JUMPDEST POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C DUP2 JUMP JUMPDEST PUSH2 0x1C76 PUSH2 0x2289 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH2 0x120 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1C91 SWAP2 SWAP1 PUSH2 0x2D90 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 SWAP1 DUP6 ADD DUP2 SWAP1 MSTORE SWAP1 POP PUSH1 0x5A PUSH1 0x64 DUP3 MOD GT ISZERO PUSH2 0x1CE4 JUMPI PUSH1 0x5 DUP5 MSTORE PUSH2 0x1CE9 JUMP JUMPDEST PUSH1 0x3 DUP5 MSTORE JUMPDEST PUSH1 0xA0 DUP7 ADD MLOAD DUP2 DUP2 PUSH2 0x1CF6 JUMPI INVALID JUMPDEST MOD PUSH1 0x40 DUP6 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP8 ADD MLOAD SUB SWAP3 POP PUSH1 0x2 DUP2 MOD PUSH1 0x1 EQ SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1DA2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D99 SWAP1 PUSH2 0x2BA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DE5 DUP3 PUSH2 0x2079 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x190B DUP4 PUSH2 0x1E3F PUSH2 0x1E23 DUP3 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x210B AND JUMP JUMPDEST PUSH2 0x1E33 DUP9 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x212A AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x215B AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x2177 AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E55 PUSH2 0x21A1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6F2BF62 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E8D SWAP2 SWAP1 PUSH2 0x29BE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1EA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1EB9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1DE5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x25BA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x1F00 JUMPI PUSH2 0x201E JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1F2F SWAP2 SWAP1 PUSH2 0x2D90 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1FB8 SWAP2 SWAP1 PUSH2 0x29A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1FF4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FF9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x201C JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2019 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x28E6 JUMP JUMPDEST SWAP3 POP JUMPDEST POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST ADDRESS SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x2050 JUMPI PUSH2 0x2050 PUSH2 0x204B PUSH1 0x4 DUP6 MLOAD DUP6 PUSH1 0x14 ADD PUSH2 0x21BD JUMP JUMPDEST PUSH2 0x2262 JUMP JUMPDEST POP PUSH1 0x14 DUP2 DUP4 ADD DUP2 ADD MLOAD SWAP2 ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ ISZERO PUSH2 0x20B5 JUMPI POP PUSH1 0x12 PUSH2 0x1DE8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x20C8 SWAP2 SWAP1 PUSH2 0x2962 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0xF AND PUSH1 0x4 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x2124 JUMPI PUSH2 0x2124 PUSH2 0x204B PUSH1 0x2 DUP6 DUP6 PUSH2 0x226A JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2139 JUMPI POP PUSH1 0x0 PUSH2 0x2073 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x2146 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1C4F JUMPI PUSH2 0x1C4F PUSH2 0x204B PUSH1 0x1 DUP7 DUP7 PUSH2 0x226A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1C4F JUMPI PUSH2 0x1C4F PUSH2 0x204B PUSH1 0x0 DUP7 DUP7 PUSH2 0x226A JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x218D JUMPI PUSH2 0x218D PUSH2 0x204B PUSH1 0x3 DUP6 DUP6 PUSH2 0x226A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x2198 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x21DC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B74 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x21DC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B52 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x2073 DUP2 PUSH2 0x2E10 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x22C7 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x22DE JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x22F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x230F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2322 PUSH2 0x231D DUP3 PUSH2 0x2DC0 JUMP JUMPDEST PUSH2 0x2D99 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x235F JUMPI PUSH2 0x234A DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x23D2 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2332 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2379 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2387 PUSH2 0x231D DUP3 PUSH2 0x2DC0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x23A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x23C7 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x23AB JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x23E2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23F8 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2429 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x2D99 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xF DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0x2073 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1C0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x247E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2487 DUP2 PUSH2 0x2D99 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2494 DUP4 DUP4 PUSH2 0x22AB JUMP JUMPDEST DUP2 MSTORE PUSH2 0x24A3 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x22AB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x24B5 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x22AB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x24C7 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x22AB JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2529 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2535 DUP7 DUP4 DUP8 ADD PUSH2 0x23D2 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2551 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x255D DUP7 DUP4 DUP8 ADD PUSH2 0x23D2 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2579 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2585 DUP7 DUP4 DUP8 ADD PUSH2 0x23D2 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x25A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25AE DUP6 DUP3 DUP7 ADD PUSH2 0x23D2 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25CB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1C4F DUP2 PUSH2 0x2E10 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x25EA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x25F5 DUP2 PUSH2 0x2E10 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2605 DUP2 PUSH2 0x2E10 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x2615 DUP2 PUSH2 0x2E10 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2635 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x2640 DUP2 PUSH2 0x2E10 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x2650 DUP2 PUSH2 0x2E10 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x2660 DUP2 PUSH2 0x2E10 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x267B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2687 DUP8 DUP3 DUP9 ADD PUSH2 0x2369 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x26A7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x26B2 DUP2 PUSH2 0x2E10 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x26C2 DUP2 PUSH2 0x2E10 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26DD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x26E9 DUP7 DUP3 DUP8 ADD PUSH2 0x2369 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2708 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x2713 DUP2 PUSH2 0x2E10 JUMP JUMPDEST SWAP4 POP PUSH2 0x2722 DUP7 PUSH1 0x20 DUP8 ADD PUSH2 0x2459 JUMP JUMPDEST SWAP3 POP PUSH2 0x2660 DUP7 PUSH1 0x40 DUP8 ADD PUSH2 0x2459 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2743 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2759 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x2765 DUP6 DUP3 DUP7 ADD PUSH2 0x22B6 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2783 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x279A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x27AB JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP PUSH2 0x27BB PUSH2 0x231D DUP5 PUSH2 0x2DC0 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP4 DUP2 ADD DUP9 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x27F3 JUMPI PUSH2 0x27E1 DUP13 DUP5 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x246B JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x27CA JUMP JUMPDEST POP SWAP2 SWAP8 POP DUP9 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x280B JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x2818 DUP6 DUP3 DUP7 ADD PUSH2 0x22FF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x2837 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x2844 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x284F PUSH1 0x60 PUSH2 0x2D99 JUMP JUMPDEST DUP5 MLOAD PUSH1 0x7 DUP2 LT PUSH2 0x285D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP7 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x80 DUP7 ADD MLOAD SWAP2 SWAP5 POP SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2615 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28A1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x28B8 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x28C4 DUP7 DUP4 DUP8 ADD PUSH2 0x246B JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x28D9 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x2818 DUP6 DUP3 DUP7 ADD PUSH2 0x23D2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x28F7 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2930 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2DE0 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x29B4 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2DE0 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 DUP4 PUSH1 0x40 DUP4 ADD DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2A87 JUMPI DUP3 CALLDATALOAD PUSH2 0x2A5D DUP2 PUSH2 0x2E10 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2A4A JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2B02 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x2AF0 DUP6 DUP4 MLOAD PUSH2 0x2918 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2AB6 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP5 ADD SWAP1 PUSH1 0x40 DUP5 ADD SWAP1 DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2B47 JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2B29 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x2B60 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x2B60 JUMPI INVALID JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F50414952000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0xA0 DUP3 ADD SWAP1 PUSH1 0x7 DUP2 LT PUSH2 0x2C0E JUMPI INVALID JUMPDEST DUP1 DUP4 MSTORE POP PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE DUP4 PUSH1 0x60 DUP4 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x2C50 PUSH1 0x40 DUP4 ADD DUP6 MLOAD PUSH2 0x28FE JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x2C62 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x28FE JUMP JUMPDEST POP PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x2C75 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x28FE JUMP JUMPDEST POP PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x2C88 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x28FE JUMP JUMPDEST POP PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH1 0xC0 DUP5 ADD MLOAD PUSH2 0x100 DUP2 DUP2 DUP6 ADD MSTORE PUSH1 0xE0 DUP7 ADD MLOAD SWAP2 POP PUSH2 0x120 DUP3 DUP2 DUP7 ADD MSTORE DUP2 DUP8 ADD MLOAD SWAP3 POP PUSH2 0x140 SWAP2 POP DUP3 DUP3 DUP7 ADD MSTORE DUP1 DUP8 ADD MLOAD SWAP3 POP POP PUSH2 0x160 DUP3 DUP2 DUP7 ADD MSTORE DUP2 DUP8 ADD MLOAD SWAP3 POP PUSH2 0x1C0 SWAP2 POP PUSH2 0x180 DUP3 DUP2 DUP8 ADD MSTORE PUSH2 0x2CF9 PUSH2 0x200 DUP8 ADD DUP6 PUSH2 0x2918 JUMP JUMPDEST DUP3 DUP10 ADD MLOAD SWAP5 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 SWAP3 POP PUSH2 0x1A0 DUP4 DUP9 DUP4 SUB ADD DUP2 DUP10 ADD MSTORE PUSH2 0x2D38 DUP3 DUP8 PUSH2 0x2918 JUMP JUMPDEST DUP4 DUP12 ADD MLOAD SWAP7 POP DUP5 DUP10 DUP3 SUB ADD DUP7 DUP11 ADD MSTORE PUSH2 0x2D51 DUP2 DUP9 PUSH2 0x2918 JUMP JUMPDEST SWAP6 POP POP DUP1 DUP11 ADD MLOAD SWAP6 POP POP POP POP DUP1 DUP6 DUP4 SUB ADD PUSH2 0x1E0 DUP7 ADD MSTORE POP PUSH2 0x2D73 DUP2 DUP4 PUSH2 0x2918 JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x2D85 DUP2 DUP8 PUSH2 0x2918 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2DB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2DD6 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2DFB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2DE3 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2E0A JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3E6 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 SWAP3 0xC GT PUSH19 0xCE6E67257A2459B5383485A7B465655C04C79D 0xAB CHAINID SELFBALANCE COINBASE ISZERO CALLVALUE 0x2A SWAP10 CODESIZE PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV LT STOP BLOCKHASH ",
                "sourceMap": "8473:2898:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3353:98;;;:::i;:::-;;8554:59;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8554:59:11;;;:::i;:::-;;;;;;;;;;;;;;;;9084:147;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;9084:147:11;;;;;;;;:::i;17026:1028:2:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;17026:1028:2;;;;;;;;:::i;:::-;;;;;;;;10322:1057;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;10322:1057:2;;;;;;;;:::i;6976:1559::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;6976:1559:2;;;;;;;;:::i;5734:882::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5734:882:2;;;;;;;;:::i;14357:2252::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;14357:2252:2;;;;;;;;:::i;8903:1054::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;8903:1054:2;;;;;;;;:::i;2389:515::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2389:515:2;;;;;;;;:::i;:::-;;;;;;;;11741:2257;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;11741:2257:2;;;;;;;;:::i;3358:1976::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3358:1976:2;;;;;;;;:::i;18533:1559::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;18533:1559:2;;;;;;;;:::i;20567:1619::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;20567:1619:2;;;;;;;;:::i;8669:47:11:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8669:47:11;;;:::i;22630:625:2:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;22630:625:2;;;;;;;;:::i;3222:92:11:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3222:92:11;;;:::i;9331:962::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;9331:962:11;;;;;;;;:::i;:::-;;;;;;;;;;8619:44;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8619:44:11;;;:::i;3353:98::-;3409:35;;3272:42;;3434:9;3409:35;;;;;;;;;3434:9;3272:42;3409:35;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3409:35:11;3353:98::o;8554:59::-;;;;;;:::o;9084:147::-;9180:7;;:44;;;;;:7;;;;;:28;;:44;;9209:14;;;;9180:44;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9180:44:11;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9180:44:11;;;;9084:147;;:::o;17026:1028:2:-;17237:34;17287:18;17308:17;:24;17287:45;;17376:10;17362:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;17362:25:2;-1:-1:-1;17342:45:2;-1:-1:-1;17402:9:2;17397:651;17421:10;17417:1;:14;17397:651;;;17453:15;17470:23;17513:12;:23;;2019:5;17633:1;17626:27;;;:36;;;;17688:12;17726:10;17762:17;17780:1;17762:20;;;;;;;;;;;;;;17578:226;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;17578:226:2;;;49:4:-1;25:18;;61:17;;17578:226:2;182:15:-1;17578:226:2;;;;179:29:-1;;;;160:49;;;17513:292:2;;;;17578:226;17513:292;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;17452:353:2;;-1:-1:-1;17452:353:2;-1:-1:-1;17819:17:2;17854:138;;;;17911:10;17900:33;;;;;;;;;;;;;;17888:45;;17854:138;;;17972:5;;;;;17854:138;18028:9;18005:17;18023:1;18005:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;17433:3:2;;17397:651;;;;17026:1028;;;;;;;:::o;10322:1057::-;10504:34;10554:40;10571:10;10583;10554:16;:40::i;:::-;10625:24;;10679:25;;;;;;;;;;;;;;;;10625:24;10679:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;10679:25:2;-1:-1:-1;10659:45:2;-1:-1:-1;10719:9:2;10714:659;10738:10;10734:1;:14;10714:659;;;10770:15;10787:23;10830:20;:18;:20::i;:::-;:31;;1799:6;10962:1;10953:24;;;:33;;;;11012:10;11048;11084:17;11102:1;11084:20;;;;;;;;;;;;;;10905:221;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;10905:221:2;;;49:4:-1;25:18;;61:17;;10905:221:2;182:15:-1;10905:221:2;;;;179:29:-1;;;;160:49;;;10830:297:2;;;;10905:221;10830:297;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;10769:358:2;;-1:-1:-1;10769:358:2;-1:-1:-1;11141:18:2;11177:139;;;;11235:10;11224:33;;;;;;;;;;;;;;11211:46;;11177:139;;;11296:5;;;;;11177:139;11352:10;11329:17;11347:1;11329:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;;;10750:3:2;;10714:659;;;;10322:1057;;;;;;:::o;6976:1559::-;7164:34;7214:40;7231:10;7243;7214:16;:40::i;:::-;7264:19;7300:17;:15;:17::i;:::-;7286:31;;:10;:31;;;:64;;7340:10;7286:64;;;3134:42:30;7286:64:2;7264:86;;7360:19;7396:17;:15;:17::i;:::-;7382:31;;:10;:31;;;:64;;7436:10;7382:64;;;3134:42:30;7382:64:2;7360:86;;7456:26;7485:29;7503:10;7485:17;:29::i;:::-;7456:58;;;;7524:26;7553:29;7571:10;7553:17;:29::i;:::-;7524:58;;;;7592:18;7613:17;:24;7592:45;;7681:10;7667:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;7667:25:2;-1:-1:-1;7647:45:2;-1:-1:-1;7707:9:2;7702:827;7726:10;7722:1;:14;7702:827;;;7758:15;7775:23;7818:30;:28;:30::i;:::-;:41;;1581:6;7963:1;7949:32;;;:41;;;;8016:11;8053;8090:17;8108:1;8090:20;;;;;;;;;;;;;;7901:231;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;7901:231:2;;;49:4:-1;25:18;;61:17;;7901:231:2;182:15:-1;7901:231:2;;;;179:29:-1;;;;160:49;;;7818:315:2;;;;7901:231;7818:315;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;7757:376:2;;-1:-1:-1;7757:376:2;-1:-1:-1;8147:12:2;8177:133;;;;8229:10;8218:33;;;;;;;;;;;;;;8211:40;;8177:133;;;8290:5;;;;;8177:133;8510:8;8473:18;8467:2;:24;8430:18;8424:2;:24;8385:17;8403:1;8385:20;;;;;;;;;;;;;;8362:4;:43;:86;:129;;;;;;:156;;;;;;8323:17;8341:1;8323:20;;;;;;;;;;;;;;;;;:195;-1:-1:-1;;;7738:3:2;;7702:827;;;;6976:1559;;;;;;;;;;:::o;5734:882::-;5908:47;6004:92;6051:6;6071:15;6004:33;:92::i;:::-;5971:125;-1:-1:-1;6237:9:2;6232:378;6256:6;:13;6252:1;:17;6232:378;;;6294:30;6325:1;6294:33;;;;;;;;;;;;;;6331:1;6294:38;6290:310;;6388:197;6438:30;6469:1;6438:33;;;;;;;;;;;;;;6493:6;6500:1;6493:9;;;;;;;;;;;;;;:26;;;6541:6;6548:1;6541:9;;;;;;;;;;;;;;:26;;;6388:28;:197::i;:::-;6352:30;6383:1;6352:33;;;;;;;;;;;;;:233;;;;;6290:310;6271:3;;6232:378;;;;5734:882;;;;:::o;14357:2252::-;14539:34;14589:40;14606:10;14618;14589:16;:40::i;:::-;14660:24;;14714:25;;;;;;;;;;;;;;;;14660:24;14714:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;14714:25:2;;14694:45;;14749:41;14807:17;:15;:17::i;:::-;14793:31;;:10;:31;;;:105;;14867:31;14887:10;14867:19;:31::i;:::-;14793:105;;;14862:1;14793:105;14749:149;;14908:41;14966:17;:15;:17::i;:::-;14952:31;;:10;:31;;;:105;;15026:31;15046:10;15026:19;:31::i;:::-;14952:105;;;15021:1;14952:105;14908:149;-1:-1:-1;15072:9:2;15067:1536;15091:10;15087:1;:14;15067:1536;;;15140:4;15176:17;:15;:17::i;:::-;15162:31;;:10;:31;;;15158:1367;;;15428:20;;15250:216;;15313:18;;15354:52;;15428:17;;15446:1;;15428:20;;;;;;;;;;;;15250:33;:216::i;:::-;15214:17;15232:1;15214:20;;;;;;;;;;;;;15213:253;;;;;;;;;15158:1367;;;15505:17;:15;:17::i;:::-;15491:31;;:10;:31;;;15487:1038;;;15757:20;;15579:216;;15642:18;;15683:52;;15757:17;;15775:1;;15757:20;;;;;15487:1038;16069:20;;15834:15;;15891:216;;15954:18;;15995:52;;16069:17;;16087:1;;16069:20;;;;;15891:216;15867:240;-1:-1:-1;15867:240:2;-1:-1:-1;16129:12:2;;16125:386;;16202:219;16269:18;16314:52;16392:7;16202:33;:219::i;:::-;16166:17;16184:1;16166:20;;;;;;;;;;;;;16165:256;;;;;;;;;16125:386;;;16491:1;16468:17;16486:1;16468:20;;;;;;;;;;;;;:24;;;;;16125:386;15487:1038;;16543:10;16538:55;;16573:5;;;16538:55;-1:-1:-1;15103:3:2;;15067:1536;;;;14357:2252;;;;;;;;:::o;8903:1054::-;9086:34;9136:40;9153:10;9165;9136:16;:40::i;:::-;9207:24;;9261:25;;;;;;;;;;;;;;;;9207:24;9261:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;9261:25:2;-1:-1:-1;9241:45:2;-1:-1:-1;9301:9:2;9296:655;9320:10;9316:1;:14;9296:655;;;9352:15;9369:23;9412:20;:18;:20::i;:::-;:31;;1799:6;9544:1;9535:24;;;:33;;;;9594:10;9630;9666:17;9684:1;9666:20;;;;;;;;;;;;;;9487:221;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;9487:221:2;;;49:4:-1;25:18;;61:17;;9487:221:2;182:15:-1;9487:221:2;;;;179:29:-1;;;;160:49;;;9412:297:2;;;;9487:221;9412:297;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;9351:358:2;;-1:-1:-1;9351:358:2;-1:-1:-1;9723:17:2;9758:137;;;;9815:10;9804:33;;;;;;;;;;;;;;9792:45;;9931:9;9908:17;9926:1;9908:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;9332:3:2;;9296:655;;2389:515;2539:29;;;;;;;;;;;;;;;;2483:26;;2551:9;2539:29;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2525:43:2;-1:-1:-1;2583:9:2;2578:320;2598:21;;;2578:320;;2641:15;2658:23;2693:4;2710:9;;2720:1;2710:12;;;;;;;;;;;;-1:-1:-1;30:25;;92:48;100:14;96:29;;;92:48;68:73;;58:2;;155:1;152;145:12;58:2;174:33;;;69:4;55:19;;;-1:-1;16:22;93:18;82:30;;79:2;;;125:1;122;115:12;79:2;155:14;151:38;;;137:53;;134:2;;;203:1;200;193:12;134:2;2685:38:2;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;2640:83:2;;;;2742:10;2737:110;;2819:10;2813:17;2806:4;2794:10;2790:21;2783:48;2781:52;2877:10;2860:11;2872:1;2860:14;;;;;;;;;;;;;;;;;:27;-1:-1:-1;;2621:3:2;;2578:320;;11741:2257;11924:34;11974:40;11991:10;12003;11974:16;:40::i;:::-;12045:24;;12099:25;;;;;;;;;;;;;;;;12045:24;12099:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;12099:25:2;;12079:45;;12134:41;12192:17;:15;:17::i;:::-;12178:31;;:10;:31;;;:105;;12252:31;12272:10;12252:19;:31::i;:::-;12178:105;;;12247:1;12178:105;12134:149;;12293:41;12351:17;:15;:17::i;:::-;12337:31;;:10;:31;;;:105;;12411:31;12431:10;12411:19;:31::i;:::-;12337:105;;;12406:1;12337:105;12293:149;-1:-1:-1;12457:9:2;12452:1540;12476:10;12472:1;:14;12452:1540;;;12525:4;12561:17;:15;:17::i;:::-;12547:31;;:10;:31;;;12543:1371;;;12812:20;;12635:215;;12698:18;;12739:51;;12812:17;;12830:1;;12812:20;;;;;12635:215;12599:17;12617:1;12599:20;;;;;;;;;;;;;12598:252;;;;;;;;;12543:1371;;;12889:17;:15;:17::i;:::-;12875:31;;:10;:31;;;12871:1043;;;13140:20;;12963:215;;13026:18;;13067:51;;13140:17;;13158:1;;13140:20;;;;;12871:1043;13455:20;;13217:17;;13278:215;;13341:18;;13382:51;;13455:17;;13473:1;;13455:20;;;;;13278:215;13252:241;-1:-1:-1;13252:241:2;-1:-1:-1;13515:14:2;;13511:389;;13590:220;13657:18;13702:51;13779:9;13590:33;:220::i;:::-;13554:17;13572:1;13554:20;;;;;;;;;;;;;13553:257;;;;;;;;;13511:389;;;13880:1;13857:17;13875:1;13857:20;;;;;;;;;;;;;:24;;;;;13511:389;12871:1043;;13932:10;13927:55;;13962:5;;;13927:55;-1:-1:-1;12488:3:2;;12452:1540;;3358:1976;3532:47;3642:6;:13;3628:28;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;3628:28:2;-1:-1:-1;3595:61:2;-1:-1:-1;3671:9:2;3666:1662;3691:6;:13;3686:1;:18;3666:1662;;3806:15;3822:1;3806:18;;;;;;;;;;;;;;:25;3835:1;3806:30;:81;;;;3856:6;3863:1;3856:9;;;;;;;;;;;;;;:26;;;3886:1;3856:31;3806:81;:132;;;;3907:6;3914:1;3907:9;;;;;;;;;;;;;;:26;;;3937:1;3907:31;3806:132;3802:234;;;3994:1;3958:30;3989:1;3958:33;;;;;;;;;;;;;:37;;;;;4013:8;;3802:234;4088:15;4105:23;4148:21;:19;:21::i;:::-;:53;;1479:5;4325:21;:19;:21::i;:::-;-1:-1:-1;4403:9:2;;4315:63;;4403:6;;4410:1;;4403:9;;;;;;;;;;;;4437:15;4453:1;4437:18;;;;;;;;;;;;;;4268:209;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;4268:209:2;;;49:4:-1;25:18;;61:17;;4268:209:2;182:15:-1;4268:209:2;;;;179:29:-1;;;;160:49;;;4148:330:2;;;;4268:209;4148:330;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4087:391:2;;;;4534:10;4529:113;;4600:1;4564:30;4595:1;4564:33;;;;;;;;;;;;;:37;;;;;4619:8;;;;4529:113;4673:35;;:::i;:::-;4726:32;4776:21;4842:10;4814:105;;;;;;;;;;;;;;4655:264;;-1:-1:-1;4655:264:2;-1:-1:-1;4655:264:2;-1:-1:-1;5081:29:2;5056:21;;:54;;;;;;;;;;:91;;;;5131:16;5130:17;5056:91;5052:266;;;5203:1;5167:30;5198:1;5167:33;;;;;;;;;;;;;:37;;;;;5052:266;;;5279:24;5243:30;5274:1;5243:33;;;;;;;;;;;;;:60;;;;;5052:266;3666:1662;;;;;;3706:3;;3666:1662;;18533:1559;18767:34;18869:18;18890:17;:24;18869:45;;18958:10;18944:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;18944:25:2;;18924:45;;19028:23;19054:119;19100:15;19129:10;19153;19054:32;:119::i;:::-;19028:145;-1:-1:-1;19243:29:2;;;19239:84;;-1:-1:-1;19288:24:2;;-1:-1:-1;19288:24:2;19239:84;19338:9;19333:753;19357:10;19353:1;:14;19333:753;;;19389:15;19406:23;19449:15;:26;;2144:5;19586:1;19567:34;;;:43;;;;19636:10;19672;19708:17;19726:1;19708:20;;;;;;;;;;;;;;19519:231;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;19519:231:2;;;49:4:-1;25:18;;61:17;;19519:231:2;182:15:-1;19519:231:2;;;;179:29:-1;;;;160:49;;;19449:302:2;;;;19519:231;19449:302;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;19388:363:2;;-1:-1:-1;19388:363:2;-1:-1:-1;19765:17:2;19800:230;;;;19857:10;19846:33;;;;;;;;;;;;;;19834:45;;19800:230;;;20010:5;;;;;19800:230;20066:9;20043:17;20061:1;20043:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;19369:3:2;;19333:753;;;;18533:1559;;;;;;;;;:::o;20567:1619::-;20800:34;20902:18;20923:17;:24;20902:45;;20991:10;20977:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;20977:25:2;;20957:45;;21061:23;21087:119;21133:15;21162:10;21186;21087:32;:119::i;:::-;21061:145;-1:-1:-1;21276:29:2;;;21272:84;;-1:-1:-1;21321:24:2;;-1:-1:-1;21321:24:2;21272:84;21430:9;21425:755;21449:10;21445:1;:14;21425:755;;;21481:15;21498:23;21541:15;:26;;2144:5;21678:1;21659:33;;;:42;;;;21727:10;21763;21799:17;21817:1;21799:20;;;;;;;;;;;;;;21611:230;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;21611:230:2;;;49:4:-1;25:18;;61:17;;21611:230:2;182:15:-1;21611:230:2;;;;179:29:-1;;;;160:49;;;21541:301:2;;;;21611:230;21541:301;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;21480:362:2;;-1:-1:-1;21480:362:2;-1:-1:-1;21856:18:2;21892:231;;;;21950:10;21939:33;;;;;;;;;;;;;;21926:46;;22159:10;22136:17;22154:1;22136:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;;;21461:3:2;;21425:755;;8669:47:11;;;;;;:::o;22630:625:2:-;22875:162;;22812:23;;22851:21;;22911:68;;22875:162;;22993:10;;23017;;22875:162;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;22875:162:2;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;22875:162:2;22851:186;;23048:15;23065:23;23092:15;:26;;23119:8;23092:36;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;23047:81:2;;;;23142:10;:37;;;;;23156:10;:17;23177:2;23156:23;23142:37;23138:111;;;23202:36;23223:10;23235:2;23202:20;:36::i;:::-;23195:43;;;;;;;23138:111;22630:625;;;;;;;;;:::o;3222:92:11:-;3272:42;3222:92;:::o;9331:962::-;9472:35;;:::i;:::-;9521:32;9567:21;9669:17;9710:5;:10;;;9699:22;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;9699:22:11;;;9689:33;;49:4:-1;9689:33:11;;;;9785:19;;;:31;;;9689:33;-1:-1:-1;9857:2:11;9851:3;9689:33;9830:24;:29;9826:201;;;9899:33;9875:57;;9826:201;;;9987:29;9963:53;;9826:201;10097:22;;;;10084:9;10097:22;10076:43;;;;;10036:37;;;:83;;;10168:22;;;;:62;;-1:-1:-1;10280:1:11;10267:9;10259:22;10285:1;10259:27;10240:46;;9331:962;;;;;;:::o;8619:44::-;;;;;;:::o;25512:190:2:-;25643:10;25629:24;;:10;:24;;;;25621:74;;;;;;;;;;;;;;;;;;;;;;25512:190;;:::o;10805:145:11:-;10935:7;;;;10805:145;:::o;3724:135:30:-;732:42;3724:135;:::o;10350:206:11:-;10446:14;10483:66;10536:12;10483:52;:66::i;:::-;10476:73;;10350:206;;;;:::o;11218:151::-;11356:5;;;;11218:151;:::o;3762:545:17:-;3925:21;4165:104;4257:11;4165:70;4212:22;4257:11;4232:1;4212:22;:19;:22;:::i;:::-;4165:25;:9;4183:6;4165:25;:17;:25;:::i;:::-;:46;:70;:46;:70;:::i;:::-;:91;:104;:91;:104;:::i;25019:316:2:-;25116:31;25242:35;:33;:35::i;:::-;25218:85;;;25304:12;25218:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;25218:99:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;25218:99:2;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;25218:99:2;;;;;;;;24056:721;24253:20;;24310:36;;;24306:100;;24362:33;;24306:100;24415:23;24487:22;:33;;1688:5;24604:16;24642:11;24560:111;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;24560:111:2;;;49:4:-1;25:18;;61:17;;24560:111:2;182:15:-1;24560:111:2;;;;179:29:-1;;;;160:49;;;24487:185:2;;;;24560:111;24487:185;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;24448:224:2;;-1:-1:-1;24448:224:2;-1:-1:-1;24682:89:2;;;;24738:10;24727:33;;;;;;;;;;;;;;24712:48;;24682:89;24056:721;;;;;;;;:::o;10608:143:11:-;10739:4;10608:143;:::o;10753:1071:31:-;10874:14;10919:5;10927:2;10919:10;10908:1;:8;:21;10904:321;;;10945:269;10967:246;11029:89;11136:1;:8;11162:5;11170:2;11162:10;10967:44;:246::i;:::-;10945:21;:269::i;:::-;-1:-1:-1;11471:2:31;11726:13;;;;;11720:20;11462:11;;;11742:42;11716:69;10753:1071;;;;;:::o;2481:341:11:-;2582:14;2616:21;;;1080:42;2616:21;2612:61;;;-1:-1:-1;2660:2:11;2653:9;;2612:61;2682:12;2724:5;2707:23;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;2707:23:11;;;2697:34;;49:4:-1;2697:34:11;;;;2754:45;;1351:1;2748:67;;;-1:-1:-1;;;2481:341:11:o;965:364:35:-;1051:7;1082:1;1078;:5;1074:227;;;1099:191;1121:168;1178:59;1255:1;1274;1121:39;:168::i;1099:191::-;-1:-1:-1;1317:5:35;;;965:364::o;122:448::-;208:7;235:6;231:45;;-1:-1:-1;264:1:35;257:8;;231:45;297:5;;;301:1;297;:5;:1;316:5;;;;;:10;312:234;;342:193;364:170;421:61;500:1;519;364:39;:170::i;1335:383::-;1421:7;1456:5;;;1475;;;1471:223;;;1496:187;1518:164;1575:55;1648:1;1667;1518:39;:164::i;576:383::-;662:7;689:6;685:223;;711:186;733:163;790:54;862:1;881;733:39;:163::i;711:186::-;917:9;933:1;929;:5;;;;;;;576:383;-1:-1:-1;;;;576:383:35:o;11004:160:11:-;11096:22;11149:7;;;11004:160;:::o;1292:378:32:-;1480:12;1232:10;1551:37;;1602:9;1625:6;1645:8;1515:148;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;1515:148:32;;;49:4:-1;25:18;;61:17;;1515:148:32;182:15:-1;1515:148:32;;;;179:29:-1;;;;160:49;;;1515:148:32;-1:-1:-1;1292:378:32;;;;;:::o;1511:170:34:-;1654:9;1648:16;1641:4;1630:9;1626:20;1619:46;731:322:36;884:12;196:10;955:28;;997:9;1020:1;1035;919:127;;;;;;;;;;;8473:2898:11;;;;;;;;;;;-1:-1:-1;8473:2898:11;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;97:33;72:20;97:33;;301:352;;;431:3;424:4;416:6;412:17;408:27;398:2;;-1:-1;;439:12;398:2;-1:-1;469:20;;509:18;498:30;;495:2;;;-1:-1;;531:12;495:2;575:4;567:6;563:17;551:29;;626:3;575:4;;610:6;606:17;567:6;592:32;;589:41;586:2;;;643:1;;633:12;586:2;391:262;;;;;;1060:693;;1182:3;1175:4;1167:6;1163:17;1159:27;1149:2;;-1:-1;;1190:12;1149:2;1237:6;1224:20;1259:85;1274:69;1336:6;1274:69;;;1259:85;;;1372:21;;;1250:94;-1:-1;1416:4;1429:14;;;;1404:17;;1524:1;1509:238;1534:6;1531:1;1528:13;1509:238;;;1641:42;1679:3;1416:4;1617:3;1604:17;1408:6;1592:30;;1641:42;;;1629:55;;1416:4;1698:14;;;;1726;;;;;1556:1;1549:9;1509:238;;;1513:14;;;;1142:611;;;;;2554:707;;2671:3;2664:4;2656:6;2652:17;2648:27;2638:2;;-1:-1;;2679:12;2638:2;2726:6;2713:20;2748:80;2763:64;2820:6;2763:64;;2748:80;2856:21;;;2739:89;-1:-1;2900:4;2913:14;;;;2888:17;;;3002;;;2993:27;;;;2990:36;-1:-1;2987:2;;;3039:1;;3029:12;2987:2;3064:1;3049:206;3074:6;3071:1;3068:13;3049:206;;;11055:20;;3142:50;;3206:14;;;;3234;;;;3096:1;3089:9;3049:206;;;3053:14;;;;;2631:630;;;;;3546:432;;3643:3;3636:4;3628:6;3624:17;3620:27;3610:2;;-1:-1;;3651:12;3610:2;3698:6;3685:20;36299:18;36291:6;36288:30;36285:2;;;-1:-1;;36321:12;36285:2;3720:60;36462:4;36394:9;3636:4;36379:6;36375:17;36371:33;36452:15;3720:60;;;3711:69;;3800:6;3793:5;3786:21;3904:3;36462:4;3895:6;3828;3886:16;;3883:25;3880:2;;;3921:1;;3911:12;3880:2;42357:6;36462:4;3828:6;3824:17;36462:4;3862:5;3858:16;42334:30;42413:1;42395:16;;;36462:4;42395:16;42388:27;3862:5;3603:375;-1:-1;;3603:375;4608:128;4674:20;;40434:2;40423:21;;;44017:34;;44007:2;;44065:1;;44055:12;5514:2714;;5622:6;;5610:9;5605:3;5601:19;5597:32;5594:2;;;-1:-1;;5632:12;5594:2;5660:22;5622:6;5660:22;;;5651:31;;;5772:49;5817:3;5793:22;5772:49;;;5754:16;5747:75;5924:49;5969:3;5891:2;5949:9;5945:22;5924:49;;;5891:2;5910:5;5906:16;5899:75;6083:49;6128:3;6050:2;6108:9;6104:22;6083:49;;;6050:2;6069:5;6065:16;6058:75;6236:49;6281:3;6203:2;6261:9;6257:22;6236:49;;;6203:2;6222:5;6218:16;6211:75;6359:3;6418:9;6414:22;11055:20;6359:3;6379:5;6375:16;6368:75;6516:3;6575:9;6571:22;11055:20;6516:3;6536:5;6532:16;6525:75;6665:3;6724:9;6720:22;11055:20;6665:3;6685:5;6681:16;6674:75;6814:3;6873:9;6869:22;11055:20;6814:3;6834:5;6830:16;6823:75;6976:3;;7037:9;7033:22;11055:20;6976:3;6996:5;6992:18;6985:77;;7123:3;;7184:9;7180:22;11055:20;7123:3;7143:5;7139:18;7132:77;;7308:3;;7297:9;7293:19;7280:33;7333:18;;7325:6;7322:30;7319:2;;;5740:1;;7355:12;7319:2;7402:54;7452:3;7443:6;7432:9;7428:22;7402:54;;;7308:3;7386:5;7382:18;7375:82;7556:3;;;;7545:9;7541:19;7528:33;7514:47;;7333:18;7573:6;7570:30;7567:2;;;5740:1;;7603:12;7567:2;7650:54;7700:3;7691:6;7680:9;7676:22;7650:54;;;7556:3;7634:5;7630:18;7623:82;7807:3;;;;7796:9;7792:19;7779:33;7765:47;;7333:18;7824:6;7821:30;7818:2;;;5740:1;;7854:12;7818:2;7901:54;7951:3;7942:6;7931:9;7927:22;7901:54;;;7807:3;7885:5;7881:18;7874:82;8058:3;;;;8047:9;8043:19;8030:33;8016:47;;7333:18;8075:6;8072:30;8069:2;;;5740:1;;8105:12;8069:2;;8152:54;8202:3;8193:6;8182:9;8178:22;8152:54;;;8058:3;8136:5;8132:18;8125:82;;;5588:2640;;;;;11266:263;;11381:2;11369:9;11360:7;11356:23;11352:32;11349:2;;;-1:-1;;11387:12;11349:2;226:6;220:13;238:33;265:5;238:33;;11536:491;;;;11674:2;11662:9;11653:7;11649:23;11645:32;11642:2;;;-1:-1;;11680:12;11642:2;85:6;72:20;97:33;124:5;97:33;;;11732:63;-1:-1;11832:2;11871:22;;72:20;97:33;72:20;97:33;;;11840:63;-1:-1;11940:2;11979:22;;72:20;97:33;72:20;97:33;;;11948:63;;;;11636:391;;;;;;12034:753;;;;;12214:3;12202:9;12193:7;12189:23;12185:33;12182:2;;;-1:-1;;12221:12;12182:2;85:6;72:20;97:33;124:5;97:33;;;12273:63;-1:-1;12373:2;12412:22;;72:20;97:33;72:20;97:33;;;12381:63;-1:-1;12481:2;12520:22;;72:20;97:33;72:20;97:33;;;12489:63;-1:-1;12617:2;12602:18;;12589:32;12641:18;12630:30;;12627:2;;;-1:-1;;12663:12;12627:2;12693:78;12763:7;12754:6;12743:9;12739:22;12693:78;;;12683:88;;;12176:611;;;;;;;;12794:627;;;;12957:2;12945:9;12936:7;12932:23;12928:32;12925:2;;;-1:-1;;12963:12;12925:2;85:6;72:20;97:33;124:5;97:33;;;13015:63;-1:-1;13115:2;13154:22;;72:20;97:33;72:20;97:33;;;13123:63;-1:-1;13251:2;13236:18;;13223:32;13275:18;13264:30;;13261:2;;;-1:-1;;13297:12;13261:2;13327:78;13397:7;13388:6;13377:9;13373:22;13327:78;;;13317:88;;;12919:502;;;;;;13428:749;;;;;13606:3;13594:9;13585:7;13581:23;13577:33;13574:2;;;-1:-1;;13613:12;13574:2;85:6;72:20;97:33;124:5;97:33;;;13665:63;-1:-1;13783:52;13827:7;13765:2;13803:22;;13783:52;;;13773:62;;13890:52;13934:7;13872:2;13914:9;13910:22;13890:52;;14184:397;;;14323:2;14311:9;14302:7;14298:23;14294:32;14291:2;;;-1:-1;;14329:12;14291:2;14387:17;14374:31;14425:18;14417:6;14414:30;14411:2;;;-1:-1;;14447:12;14411:2;14485:80;14557:7;14548:6;14537:9;14533:22;14485:80;;;14475:90;;;;-1:-1;14285:296;-1:-1;;;;14285:296;15006:686;;;15201:2;15189:9;15180:7;15176:23;15172:32;15169:2;;;-1:-1;;15207:12;15169:2;15265:17;15252:31;15303:18;;15295:6;15292:30;15289:2;;;-1:-1;;15325:12;15289:2;15435:6;15424:9;15420:22;1929:3;1922:4;1914:6;1910:17;1906:27;1896:2;;-1:-1;;1937:12;1896:2;1984:6;1971:20;1957:34;;2006:99;2021:83;2097:6;2021:83;;2006:99;2133:21;;;2177:4;2190:14;;;;2111:16;2165:17;;;-1:-1;2270:252;2295:6;2292:1;2289:13;2270:252;;;2402:56;2454:3;2177:4;2378:3;2365:17;2169:6;2353:30;;2402:56;;;2390:69;;2473:14;;;;2501;;;;2317:1;2310:9;2270:252;;;-1:-1;15345:107;;-1:-1;15502:18;;15489:32;;-1:-1;;;;15530:30;;;15527:2;;;-1:-1;;15563:12;15527:2;;15593:83;15668:7;15659:6;15648:9;15644:22;15593:83;;;15583:93;;;15163:529;;;;;;15699:577;;;;15856:9;15847:7;15843:23;15868:3;15843:23;15839:33;15836:2;;;-1:-1;;15875:12;15836:2;4898:4;4877:19;4873:30;4870:2;;;-1:-1;;4906:12;4870:2;;4934:20;4898:4;4934:20;;;4535:6;4529:13;43927:1;43920:5;43917:12;43907:2;;-1:-1;;43933:12;43907:2;5018:102;;5186:2;5251:22;;;3482:13;5201:16;;;5194:86;5364:2;5429:22;;;11203:13;5379:16;;;5372:86;4898:4;16111:22;;11203:13;16180:3;16228:22;;3344:13;5025:16;;-1:-1;11203:13;-1:-1;39776:13;;39769:21;43656:32;;43646:2;;-1:-1;;43692:12;16283:602;;;16436:2;16424:9;16415:7;16411:23;16407:32;16404:2;;;-1:-1;;16442:12;16404:2;16500:17;16487:31;16538:18;;16530:6;16527:30;16524:2;;;-1:-1;;16560:12;16524:2;16590:76;16658:7;16649:6;16638:9;16634:22;16590:76;;;16580:86;;16731:2;16720:9;16716:18;16703:32;16689:46;;16538:18;16747:6;16744:30;16741:2;;;-1:-1;;16777:12;16741:2;;16807:62;16861:7;16852:6;16841:9;16837:22;16807:62;;16892:263;;17007:2;16995:9;16986:7;16982:23;16978:32;16975:2;;;-1:-1;;17013:12;16975:2;-1:-1;11203:13;;16969:186;-1:-1;16969:186;17712:137;40529:42;40518:54;17799:45;;17793:56;21522:315;;21646:5;37366:12;38286:6;38281:3;38274:19;21729:52;21774:6;38323:4;38318:3;38314:14;38323:4;21755:5;21751:16;21729:52;;;42992:2;42972:14;42988:7;42968:28;21793:39;;;;38323:4;21793:39;;21598:239;-1:-1;;21598:239;27689:244;43083:2;43079:14;;;;;;18175:58;;27905:2;27896:12;;27796:137;27940:274;;42357:6;42352:3;42347;42334:30;42395:16;;42388:27;;;42395:16;28071:143;-1:-1;28071:143;28221:262;;21319:5;37366:12;21430:52;21475:6;21470:3;21463:4;21456:5;21452:16;21430:52;;;21494:16;;;;;28346:137;-1:-1;;28346:137;28490:213;40529:42;40518:54;;;;17799:45;;28608:2;28593:18;;28579:124;28962:324;40529:42;40518:54;;;17799:45;;40518:54;;29272:2;29257:18;;17799:45;29108:2;29093:18;;29079:207;29293:435;40529:42;40518:54;;;17799:45;;40518:54;;;;29631:2;29616:18;;17799:45;29714:2;29699:18;;20773:37;;;;29467:2;29452:18;;29438:290;29735:381;29913:2;29927:47;;;29898:18;;38274:19;;;29735:381;18601:21;38314:14;;;29735:381;18628:291;18653:6;18650:1;18647:13;18628:291;;;85:6;72:20;97:33;124:5;97:33;;;40529:42;40518:54;17799:45;;29913:2;39479:12;;;;17316:14;;;;18675:1;18668:9;18628:291;;;-1:-1;29980:126;29884:232;-1:-1;;;;;29884:232;30123:381;;30301:2;;30290:9;30286:18;30301:2;30322:17;30315:47;30376:118;19184:5;37366:12;38286:6;38281:3;38274:19;38314:14;30290:9;38314:14;19196:98;;38314:14;30301:2;19351:6;19347:17;30290:9;19338:27;;19326:39;;30301:2;19441:5;37057:14;-1:-1;19480:345;19505:6;19502:1;19499:13;19480:345;;;19557:20;30290:9;19561:4;19557:20;;19552:3;19545:33;17456:60;17512:3;19612:6;19606:13;17456:60;;;19626:82;-1:-1;19804:14;;;;37894;;;;19527:1;19520:9;19480:345;;;-1:-1;30368:126;;30272:232;-1:-1;;;;;;;30272:232;30511:361;30679:2;30693:47;;;37366:12;;30664:18;;;38274:19;;;30511:361;;37057:14;;;38314;;;;30511:361;20311:260;20336:6;20333:1;20330:13;20311:260;;;20397:13;;20773:37;;30679:2;37894:14;;;;17684;;;;20358:1;20351:9;20311:260;;;-1:-1;30746:116;;30650:222;-1:-1;;;;;30650:222;31807:471;31999:2;31984:18;;43200:1;43190:12;;43180:2;;43206:9;43180:2;22942:68;;;32181:2;32166:18;;20773:37;;;;32264:2;32249:18;;;20773:37;31970:308;;32285:501;32492:2;32477:18;;43333:1;43323:12;;43313:2;;43339:9;32793:427;40434:2;40423:21;;;23441:36;;40423:21;;;;33123:2;33108:18;;23441:36;33206:2;33191:18;;20773:37;;;;32963:2;32948:18;;32934:286;33227:407;33418:2;33432:47;;;23714:2;33403:18;;;38274:19;23750:34;38314:14;;;23730:55;23819:7;23805:12;;;23798:29;23846:12;;;33389:245;33641:533;24153:23;;33863:3;33848:19;;;43447:1;43437:12;;43427:2;;43453:9;43427:2;42223:40;23303:3;23296:64;;24343:4;24336:5;24332:16;24326:23;24343:4;24407:3;24403:14;20773:37;24520:4;24513:5;24509:16;24503:23;24520:4;24584:3;24580:14;20773:37;20803:5;34082:2;34071:9;34067:18;20773:37;20693:5;39776:13;39769:21;34159:3;34148:9;34144:19;20666:34;33834:340;;;;;;;34181:532;;34383:2;34404:17;34397:47;24924:63;34383:2;34372:9;34368:18;24901:16;24895:23;24924:63;;;25074:4;25067:5;25063:16;25057:23;25086:63;25134:14;34372:9;25134:14;25120:12;25086:63;;;;34383:2;25236:5;25232:16;25226:23;25255:63;25303:14;34372:9;25303:14;25289:12;25255:63;;;;25134:14;25399:5;25395:16;25389:23;25418:63;25466:14;34372:9;25466:14;25452:12;25418:63;;;;25303:14;25565:5;25561:16;25555:23;25632:14;34372:9;25632:14;20773:37;25466:14;25731:5;25727:16;25721:23;25798:14;34372:9;25798:14;20773:37;25632:14;25889:5;25885:16;25879:23;25956:14;25879:23;25956:14;34372:9;25956:14;20773:37;25798:14;26047:5;26043:16;26037:23;;;26114:14;26037:23;26114:14;34372:9;26114:14;20773:37;25956:14;26218:5;26214:18;26208:25;;;26287:16;;;26208:25;26287:16;34372:9;26287:16;20773:37;26114:14;26376:5;26372:18;26366:25;;;;26445:16;26366:25;26445:16;34372:9;26445:16;20773:37;26287:16;26544:5;26540:18;26534:25;26514:45;;24819:6;;;26579:16;24819:6;26579:16;34372:9;26579:16;26572:40;26627:67;24810:16;34372:9;24810:16;26675:12;26627:67;;;26445:16;26782:5;26778:18;26772:25;26752:45;;26835:14;;;26817:16;26835:14;34372:9;26839:4;26835:14;;26817:16;34372:9;26817:16;26810:40;26865:67;26927:4;26913:12;26865:67;;;26579:16;27023:5;27019:18;27013:25;26993:45;;26835:14;34372:9;27080:4;27076:14;;24819:6;34372:9;27058:16;27051:40;27106:67;27168:4;27154:12;27106:67;;;27098:75;;;26817:16;27264:5;27260:18;27254:25;27234:45;;;;;26835:14;34372:9;27321:4;27317:14;;27299:16;34372:9;27299:16;27292:40;;27347:67;27409:4;27395:12;27347:67;;;34606:9;34600:4;34596:20;25074:4;34580:9;34576:18;34569:48;34631:72;34698:4;34689:6;34631:72;;;34623:80;34354:359;-1:-1;;;;;;;34354:359;34720:213;20773:37;;;34838:2;34823:18;;34809:124;34940:256;35002:2;34996:9;35028:17;;;35103:18;35088:34;;35124:22;;;35085:62;35082:2;;;35160:1;;35150:12;35082:2;35002;35169:22;34980:216;;-1:-1;34980:216;35203:309;;35367:18;35359:6;35356:30;35353:2;;;-1:-1;;35389:12;35353:2;-1:-1;35434:4;35422:17;;;35487:15;;35290:222;42430:268;42495:1;42502:101;42516:6;42513:1;42510:13;42502:101;;;42583:11;;;42577:18;42564:11;;;42557:39;42538:2;42531:10;42502:101;;;42618:6;42615:1;42612:13;42609:2;;;42495:1;42674:6;42669:3;42665:16;42658:27;42609:2;;42479:219;;;;43476:117;40529:42;43563:5;40518:54;43538:5;43535:35;43525:2;;43584:1;;43574:12"
            }
        }
    },
    "sources": {
        "test/TestERC20BridgeSampler.sol": {
            "id": 11
        },
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchangeFactory.sol": {
            "id": 13
        },
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchange.sol": {
            "id": 12
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol": {
            "id": 22
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IExchangeCore.sol": {
            "id": 23
        },
        "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": {
            "id": 19
        },
        "@0x/contracts-utils/contracts/src/LibEIP712.sol": {
            "id": 33
        },
        "@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": {
            "id": 16
        },
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": {
            "id": 35
        },
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": {
            "id": 34
        },
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": {
            "id": 36
        },
        "@0x/contracts-exchange-libs/contracts/src/LibMath.sol": {
            "id": 17
        },
        "@0x/contracts-exchange-libs/contracts/src/LibMathRichErrors.sol": {
            "id": 18
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IProtocolFees.sol": {
            "id": 25
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IMatchOrders.sol": {
            "id": 24
        },
        "@0x/contracts-exchange/contracts/src/interfaces/ISignatureValidator.sol": {
            "id": 26
        },
        "@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol": {
            "id": 20
        },
        "@0x/contracts-exchange/contracts/src/interfaces/ITransactions.sol": {
            "id": 27
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IAssetProxyDispatcher.sol": {
            "id": 21
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IWrapperFunctions.sol": {
            "id": 29
        },
        "@0x/contracts-exchange/contracts/src/interfaces/ITransferSimulator.sol": {
            "id": 28
        },
        "src/ERC20BridgeSampler.sol": {
            "id": 2
        },
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": {
            "id": 14
        },
        "@0x/contracts-utils/contracts/src/LibBytes.sol": {
            "id": 31
        },
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": {
            "id": 32
        },
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": {
            "id": 15
        },
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": {
            "id": 30
        },
        "src/IDevUtils.sol": {
            "id": 4
        },
        "src/IERC20BridgeSampler.sol": {
            "id": 5
        },
        "src/IEth2Dai.sol": {
            "id": 6
        },
        "src/IKyberNetwork.sol": {
            "id": 7
        },
        "src/IUniswapExchangeQuotes.sol": {
            "id": 10
        },
        "src/ICurve.sol": {
            "id": 3
        },
        "src/ILiquidityProvider.sol": {
            "id": 8
        },
        "src/ILiquidityProviderRegistry.sol": {
            "id": 9
        }
    },
    "sourceCodes": {
        "test/TestERC20BridgeSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchangeFactory.sol\";\nimport \"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"../src/ERC20BridgeSampler.sol\";\nimport \"../src/IEth2Dai.sol\";\nimport \"../src/IDevUtils.sol\";\nimport \"../src/IKyberNetwork.sol\";\n\n\nlibrary LibDeterministicQuotes {\n\n    address private constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    uint256 private constant RATE_DENOMINATOR = 1 ether;\n    uint256 private constant MIN_RATE = RATE_DENOMINATOR / 100;\n    uint256 private constant MAX_RATE = 100 * RATE_DENOMINATOR;\n    uint8 private constant MIN_DECIMALS = 4;\n    uint8 private constant MAX_DECIMALS = 20;\n\n    function getDeterministicSellQuote(\n        bytes32 salt,\n        address sellToken,\n        address buyToken,\n        uint256 sellAmount\n    )\n        internal\n        pure\n        returns (uint256 buyAmount)\n    {\n        uint256 sellBase = uint256(10) ** getDeterministicTokenDecimals(sellToken);\n        uint256 buyBase = uint256(10) ** getDeterministicTokenDecimals(buyToken);\n        uint256 rate = getDeterministicRate(salt, sellToken, buyToken);\n        return sellAmount * rate * buyBase / sellBase / RATE_DENOMINATOR;\n    }\n\n    function getDeterministicBuyQuote(\n        bytes32 salt,\n        address sellToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        internal\n        pure\n        returns (uint256 sellAmount)\n    {\n        uint256 sellBase = uint256(10) ** getDeterministicTokenDecimals(sellToken);\n        uint256 buyBase = uint256(10) ** getDeterministicTokenDecimals(buyToken);\n        uint256 rate = getDeterministicRate(salt, sellToken, buyToken);\n        return buyAmount * RATE_DENOMINATOR * sellBase / rate / buyBase;\n    }\n\n    function getDeterministicTokenDecimals(address token)\n        internal\n        pure\n        returns (uint8 decimals)\n    {\n        if (token == WETH_ADDRESS) {\n            return 18;\n        }\n        bytes32 seed = keccak256(abi.encodePacked(token));\n        return uint8(uint256(seed) % (MAX_DECIMALS - MIN_DECIMALS)) + MIN_DECIMALS;\n    }\n\n    function getDeterministicRate(bytes32 salt, address sellToken, address buyToken)\n        internal\n        pure\n        returns (uint256 rate)\n    {\n        bytes32 seed = keccak256(abi.encodePacked(salt, sellToken, buyToken));\n        return uint256(seed) % (MAX_RATE - MIN_RATE) + MIN_RATE;\n    }\n}\n\n\ncontract FailTrigger {\n\n    // Give this address a balance to force operations to fail.\n    address payable constant public FAILURE_ADDRESS = 0xe9dB8717BC5DFB20aaf538b4a5a02B7791FF430C;\n\n    // Funds `FAILURE_ADDRESS`.\n    function enableFailTrigger() external payable {\n        FAILURE_ADDRESS.transfer(msg.value);\n    }\n\n    function _revertIfShouldFail() internal view {\n        if (FAILURE_ADDRESS.balance != 0) {\n            revert(\"FAIL_TRIGGERED\");\n        }\n    }\n}\n\n\ncontract TestERC20BridgeSamplerUniswapExchange is\n    IUniswapExchangeQuotes,\n    DeploymentConstants,\n    FailTrigger\n{\n    bytes32 constant private BASE_SALT = 0x1d6a6a0506b0b4a554b907a4c29d9f4674e461989d9c1921feb17b26716385ab;\n\n    address public tokenAddress;\n    bytes32 public salt;\n\n    constructor(address _tokenAddress) public {\n        tokenAddress = _tokenAddress;\n        salt = keccak256(abi.encodePacked(BASE_SALT, _tokenAddress));\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getEthToTokenInputPrice()`.\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicSellQuote(\n            salt,\n            tokenAddress,\n            _getWethAddress(),\n            ethSold\n        );\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getEthToTokenOutputPrice()`.\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicBuyQuote(\n            salt,\n            _getWethAddress(),\n            tokenAddress,\n            tokensBought\n        );\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getTokenToEthInputPrice()`.\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicSellQuote(\n            salt,\n            tokenAddress,\n            _getWethAddress(),\n            tokensSold\n        );\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getTokenToEthOutputPrice()`.\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicBuyQuote(\n            salt,\n            _getWethAddress(),\n            tokenAddress,\n            ethBought\n        );\n    }\n}\n\n\ncontract TestERC20BridgeSamplerKyberNetwork is\n    IKyberNetwork,\n    DeploymentConstants,\n    FailTrigger\n{\n    bytes32 constant private SALT = 0x0ff3ca9d46195c39f9a12afb74207b4970349fb3cfb1e459bbf170298d326bc7;\n    address constant public ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    // Deterministic `IKyberNetwork.getExpectedRate()`.\n    function getExpectedRate(\n        address fromToken,\n        address toToken,\n        uint256\n    )\n        external\n        view\n        returns (uint256 expectedRate, uint256)\n    {\n        _revertIfShouldFail();\n        fromToken = fromToken == ETH_ADDRESS ? _getWethAddress() : fromToken;\n        toToken = toToken == ETH_ADDRESS ? _getWethAddress() : toToken;\n        expectedRate = LibDeterministicQuotes.getDeterministicRate(\n            SALT,\n            fromToken,\n            toToken\n        );\n    }\n}\n\n\ncontract TestERC20BridgeSamplerEth2Dai is\n    IEth2Dai,\n    FailTrigger\n{\n    bytes32 constant private SALT = 0xb713b61bb9bb2958a0f5d1534b21e94fc68c4c0c034b0902ed844f2f6cd1b4f7;\n\n    // Deterministic `IEth2Dai.getBuyAmount()`.\n    function getBuyAmount(\n        address buyToken,\n        address payToken,\n        uint256 payAmount\n    )\n        external\n        view\n        returns (uint256 buyAmount)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicSellQuote(\n            SALT,\n            payToken,\n            buyToken,\n            payAmount\n        );\n    }\n\n    // Deterministic `IEth2Dai.getPayAmount()`.\n    function getPayAmount(\n        address payToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 payAmount)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicBuyQuote(\n            SALT,\n            payToken,\n            buyToken,\n            buyAmount\n        );\n    }\n}\n\n\ncontract TestERC20BridgeSamplerUniswapExchangeFactory is\n    IUniswapExchangeFactory\n{\n    mapping (address => IUniswapExchangeQuotes) private _exchangesByToken;\n\n    // Creates Uniswap exchange contracts for tokens.\n    function createTokenExchanges(address[] calldata tokenAddresses)\n        external\n    {\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\n            address tokenAddress = tokenAddresses[i];\n            _exchangesByToken[tokenAddress] =\n                new TestERC20BridgeSamplerUniswapExchange(tokenAddress);\n        }\n    }\n\n    // `IUniswapExchangeFactory.getExchange()`.\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address)\n    {\n        return address(_exchangesByToken[tokenAddress]);\n    }\n}\n\n\ncontract TestERC20BridgeSampler is\n    ERC20BridgeSampler,\n    FailTrigger\n{\n    TestERC20BridgeSamplerUniswapExchangeFactory public uniswap;\n    TestERC20BridgeSamplerEth2Dai public eth2Dai;\n    TestERC20BridgeSamplerKyberNetwork public kyber;\n\n    uint8 private constant MAX_ORDER_STATUS = uint8(LibOrder.OrderStatus.CANCELLED) + 1;\n\n    constructor() public {\n        uniswap = new TestERC20BridgeSamplerUniswapExchangeFactory();\n        eth2Dai = new TestERC20BridgeSamplerEth2Dai();\n        kyber = new TestERC20BridgeSamplerKyberNetwork();\n    }\n\n    // Creates Uniswap exchange contracts for tokens.\n    function createTokenExchanges(address[] calldata tokenAddresses)\n        external\n    {\n        uniswap.createTokenExchanges(tokenAddresses);\n    }\n\n    // `IDevUtils.getOrderRelevantState()`, overridden to return deterministic\n    // states.\n    function getOrderRelevantState(\n        LibOrder.Order memory order,\n        bytes memory\n    )\n        public\n        returns (\n            LibOrder.OrderInfo memory orderInfo,\n            uint256 fillableTakerAssetAmount,\n            bool isValidSignature\n        )\n    {\n        // The order hash is just the hash of the salt.\n        bytes32 orderHash = keccak256(abi.encode(order.salt));\n        // Everything else is derived from the hash.\n        orderInfo.orderHash = orderHash;\n        if (uint256(orderHash) % 100 > 90) {\n            orderInfo.orderStatus = LibOrder.OrderStatus.FULLY_FILLED;\n        } else {\n            orderInfo.orderStatus = LibOrder.OrderStatus.FILLABLE;\n        }\n        orderInfo.orderTakerAssetFilledAmount = uint256(orderHash) % order.takerAssetAmount;\n        fillableTakerAssetAmount =\n            order.takerAssetAmount - orderInfo.orderTakerAssetFilledAmount;\n        isValidSignature = uint256(orderHash) % 2 == 1;\n    }\n\n    // Overriden to return deterministic decimals.\n    function _getTokenDecimals(address tokenAddress)\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibDeterministicQuotes.getDeterministicTokenDecimals(tokenAddress);\n    }\n\n    // Overriden to point to a this contract.\n    function _getDevUtilsAddress()\n        internal\n        view\n        returns (address devUtilAddress)\n    {\n        return address(this);\n    }\n\n    // Overriden to point to a custom contract.\n    function _getEth2DaiAddress()\n        internal\n        view\n        returns (address eth2daiAddress)\n    {\n        return address(eth2Dai);\n    }\n\n    // Overriden to point to a custom contract.\n    function _getUniswapExchangeFactoryAddress()\n        internal\n        view\n        returns (address uniswapAddress)\n    {\n        return address(uniswap);\n    }\n\n    // Overriden to point to a custom contract.\n    function _getKyberNetworkProxyAddress()\n        internal\n        view\n        returns (address kyberAddress)\n    {\n        return address(kyber);\n    }\n}\n",
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchangeFactory.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./IUniswapExchange.sol\";\n\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address);\n}\n",
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchange.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IUniswapExchange {\n\n    /// @dev Buys at least `minTokensBought` tokens with ETH and transfer them\n    ///      to `recipient`.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @return tokensBought Amount of tokens bought.\n    function ethToTokenTransferInput(\n        uint256 minTokensBought,\n        uint256 deadline,\n        address recipient\n    )\n        external\n        payable\n        returns (uint256 tokensBought);\n\n    /// @dev Buys at least `minEthBought` ETH with tokens.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minEthBought The minimum amount of ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @return ethBought Amount of tokens bought.\n    function tokenToEthSwapInput(\n        uint256 tokensSold,\n        uint256 minEthBought,\n        uint256 deadline\n    )\n        external\n        returns (uint256 ethBought);\n\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token\n    ///      and transfer them to `recipient`.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @param toTokenAddress The token being bought.\n    /// @return tokensBought Amount of tokens bought.\n    function tokenToTokenTransferInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        address recipient,\n        address toTokenAddress\n    )\n        external\n        returns (uint256 tokensBought);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./IExchangeCore.sol\";\nimport \"./IProtocolFees.sol\";\nimport \"./IMatchOrders.sol\";\nimport \"./ISignatureValidator.sol\";\nimport \"./ITransactions.sol\";\nimport \"./IAssetProxyDispatcher.sol\";\nimport \"./IWrapperFunctions.sol\";\nimport \"./ITransferSimulator.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract IExchange is\n    IProtocolFees,\n    IExchangeCore,\n    IMatchOrders,\n    ISignatureValidator,\n    ITransactions,\n    IAssetProxyDispatcher,\n    ITransferSimulator,\n    IWrapperFunctions\n{}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IExchangeCore.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IExchangeCore {\n\n    // Fill event is emitted whenever an order is filled.\n    event Fill(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that received fees.\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData,                 // Encoded data specific to takerAsset.\n        bytes makerFeeAssetData,              // Encoded data specific to makerFeeAsset.\n        bytes takerFeeAssetData,              // Encoded data specific to takerFeeAsset.\n        bytes32 indexed orderHash,            // EIP712 hash of order (see LibOrder.getTypedDataHash).\n        address takerAddress,                 // Address that filled the order.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        uint256 makerAssetFilledAmount,       // Amount of makerAsset sold by maker and bought by taker.\n        uint256 takerAssetFilledAmount,       // Amount of takerAsset sold by taker and bought by maker.\n        uint256 makerFeePaid,                 // Amount of makerFeeAssetData paid to feeRecipient by maker.\n        uint256 takerFeePaid,                 // Amount of takerFeeAssetData paid to feeRecipient by taker.\n        uint256 protocolFeePaid               // Amount of eth or weth paid to the staking contract.\n    );\n\n    // Cancel event is emitted whenever an individual order is cancelled.\n    event Cancel(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that would have recieved fees if order was filled.\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData,                 // Encoded data specific to takerAsset.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        bytes32 indexed orderHash             // EIP712 hash of order (see LibOrder.getTypedDataHash).\n    );\n\n    // CancelUpTo event is emitted whenever `cancelOrdersUpTo` is executed succesfully.\n    event CancelUpTo(\n        address indexed makerAddress,         // Orders cancelled must have been created by this address.\n        address indexed orderSenderAddress,   // Orders cancelled must have a `senderAddress` equal to this address.\n        uint256 orderEpoch                    // Orders with specified makerAddress and senderAddress with a salt less than this value are considered cancelled.\n    );\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external\n        payable;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrder(LibOrder.Order memory order)\n        public\n        payable;\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\nlibrary LibOrder {\n\n    using LibOrder for Order;\n\n    // Hash for the EIP712 Order Schema:\n    // keccak256(abi.encodePacked(\n    //     \"Order(\",\n    //     \"address makerAddress,\",\n    //     \"address takerAddress,\",\n    //     \"address feeRecipientAddress,\",\n    //     \"address senderAddress,\",\n    //     \"uint256 makerAssetAmount,\",\n    //     \"uint256 takerAssetAmount,\",\n    //     \"uint256 makerFee,\",\n    //     \"uint256 takerFee,\",\n    //     \"uint256 expirationTimeSeconds,\",\n    //     \"uint256 salt,\",\n    //     \"bytes makerAssetData,\",\n    //     \"bytes takerAssetData,\",\n    //     \"bytes makerFeeAssetData,\",\n    //     \"bytes takerFeeAssetData\",\n    //     \")\"\n    // ))\n    bytes32 constant internal _EIP712_ORDER_SCHEMA_HASH =\n        0xf80322eb8376aafb64eadf8f0d7623f22130fd9491a221e902b713cb984a7534;\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's status is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    /// @dev Canonical order structure.\n    struct Order {\n        address makerAddress;           // Address that created the order.\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 makerFee;               // Fee paid to feeRecipient by maker when order is filled.\n        uint256 takerFee;               // Fee paid to feeRecipient by taker when order is filled.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes makerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring makerFeeAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring takerFeeAsset. The leading bytes4 references the id of the asset proxy.\n    }\n    // solhint-enable max-line-length\n\n    /// @dev Order information returned by `getOrderInfo()`.\n    struct OrderInfo {\n        OrderStatus orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 typed data hash of the order (see LibOrder.getTypedDataHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates the EIP712 typed data hash of an order with a given domain separator.\n    /// @param order The order structure.\n    /// @return EIP712 typed data hash of the order.\n    function getTypedDataHash(Order memory order, bytes32 eip712ExchangeDomainHash)\n        internal\n        pure\n        returns (bytes32 orderHash)\n    {\n        orderHash = LibEIP712.hashEIP712Message(\n            eip712ExchangeDomainHash,\n            order.getStructHash()\n        );\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order struct.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order struct.\n    function getStructHash(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_ORDER_SCHEMA_HASH;\n        bytes memory makerAssetData = order.makerAssetData;\n        bytes memory takerAssetData = order.takerAssetData;\n        bytes memory makerFeeAssetData = order.makerFeeAssetData;\n        bytes memory takerFeeAssetData = order.takerFeeAssetData;\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     uint256(order.makerAddress),\n        //     uint256(order.takerAddress),\n        //     uint256(order.feeRecipientAddress),\n        //     uint256(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData),\n        //     keccak256(order.makerFeeAssetData),\n        //     keccak256(order.takerFeeAssetData)\n        // ));\n\n        assembly {\n            // Assert order offset (this is an internal error that should never be triggered)\n            if lt(order, 32) {\n                invalid()\n            }\n\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n            let pos4 := add(order, 384)\n            let pos5 := add(order, 416)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n            let temp4 := mload(pos4)\n            let temp5 := mload(pos5)\n\n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, keccak256(add(makerAssetData, 32), mload(makerAssetData)))        // store hash of makerAssetData\n            mstore(pos3, keccak256(add(takerAssetData, 32), mload(takerAssetData)))        // store hash of takerAssetData\n            mstore(pos4, keccak256(add(makerFeeAssetData, 32), mload(makerFeeAssetData)))  // store hash of makerFeeAssetData\n            mstore(pos5, keccak256(add(takerFeeAssetData, 32), mload(takerFeeAssetData)))  // store hash of takerFeeAssetData\n            result := keccak256(pos1, 480)\n\n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n            mstore(pos4, temp4)\n            mstore(pos5, temp5)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibEIP712.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibEIP712 {\n\n    // Hash of the EIP712 Domain Separator Schema\n    // keccak256(abi.encodePacked(\n    //     \"EIP712Domain(\",\n    //     \"string name,\",\n    //     \"string version,\",\n    //     \"uint256 chainId,\",\n    //     \"address verifyingContract\",\n    //     \")\"\n    // ))\n    bytes32 constant internal _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\n\n    /// @dev Calculates a EIP712 domain separator.\n    /// @param name The EIP712 domain name.\n    /// @param version The EIP712 domain version.\n    /// @param verifyingContract The EIP712 verifying contract.\n    /// @return EIP712 domain separator.\n    function hashEIP712Domain(\n        string memory name,\n        string memory version,\n        uint256 chainId,\n        address verifyingContract\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH;\n\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n        //     keccak256(bytes(name)),\n        //     keccak256(bytes(version)),\n        //     chainId,\n        //     uint256(verifyingContract)\n        // ))\n\n        assembly {\n            // Calculate hashes of dynamic data\n            let nameHash := keccak256(add(name, 32), mload(name))\n            let versionHash := keccak256(add(version, 32), mload(version))\n\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            // Store params in memory\n            mstore(memPtr, schemaHash)\n            mstore(add(memPtr, 32), nameHash)\n            mstore(add(memPtr, 64), versionHash)\n            mstore(add(memPtr, 96), chainId)\n            mstore(add(memPtr, 128), verifyingContract)\n\n            // Compute hash\n            result := keccak256(memPtr, 160)\n        }\n        return result;\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct with a given domain hash.\n    /// @param eip712DomainHash Hash of the domain domain separator data, computed\n    ///                         with getDomainHash().\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to the given EIP712 Domain.\n    function hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct\n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"./LibMath.sol\";\nimport \"./LibOrder.sol\";\n\n\nlibrary LibFillResults {\n\n    using LibSafeMath for uint256;\n\n    struct BatchMatchedFillResults {\n        FillResults[] left;              // Fill results for left orders\n        FillResults[] right;             // Fill results for right orders\n        uint256 profitInLeftMakerAsset;  // Profit taken from left makers\n        uint256 profitInRightMakerAsset; // Profit taken from right makers\n    }\n\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of fees paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of fees paid by taker to feeRecipients(s).\n        uint256 protocolFeePaid;         // Total amount of fees paid by taker to the staking contract.\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                // Amounts filled and fees paid of left order.\n        FillResults right;               // Amounts filled and fees paid of right order.\n        uint256 profitInLeftMakerAsset;  // Profit taken from the left maker\n        uint256 profitInRightMakerAsset; // Profit taken from the right maker\n    }\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param protocolFeeMultiplier The current protocol fee of the exchange contract.\n    /// @param gasPrice The gasprice of the transaction. This is provided so that the function call can continue\n    ///        to be pure rather than view.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        LibOrder.Order memory order,\n        uint256 takerAssetFilledAmount,\n        uint256 protocolFeeMultiplier,\n        uint256 gasPrice\n    )\n        internal\n        pure\n        returns (FillResults memory fillResults)\n    {\n        // Compute proportional transfer amounts\n        fillResults.takerAssetFilledAmount = takerAssetFilledAmount;\n        fillResults.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerAssetAmount\n        );\n        fillResults.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerFee\n        );\n        fillResults.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.takerFee\n        );\n\n        // Compute the protocol fee that should be paid for a single fill.\n        fillResults.protocolFeePaid = gasPrice.safeMul(protocolFeeMultiplier);\n\n        return fillResults;\n    }\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param protocolFeeMultiplier The current protocol fee of the exchange contract.\n    /// @param gasPrice The gasprice of the transaction. This is provided so that the function call can continue\n    ///        to be pure rather than view.\n    /// @param shouldMaximallyFillOrders A value that indicates whether or not this calculation should use\n    ///                                  the maximal fill order matching strategy.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount,\n        uint256 protocolFeeMultiplier,\n        uint256 gasPrice,\n        bool shouldMaximallyFillOrders\n    )\n        internal\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Derive maker asset amounts for left & right orders, given store taker assert amounts\n        uint256 leftTakerAssetAmountRemaining = leftOrder.takerAssetAmount.safeSub(leftOrderTakerAssetFilledAmount);\n        uint256 leftMakerAssetAmountRemaining = LibMath.safeGetPartialAmountFloor(\n            leftOrder.makerAssetAmount,\n            leftOrder.takerAssetAmount,\n            leftTakerAssetAmountRemaining\n        );\n        uint256 rightTakerAssetAmountRemaining = rightOrder.takerAssetAmount.safeSub(rightOrderTakerAssetFilledAmount);\n        uint256 rightMakerAssetAmountRemaining = LibMath.safeGetPartialAmountFloor(\n            rightOrder.makerAssetAmount,\n            rightOrder.takerAssetAmount,\n            rightTakerAssetAmountRemaining\n        );\n\n        // Maximally fill the orders and pay out profits to the matcher in one or both of the maker assets.\n        if (shouldMaximallyFillOrders) {\n            matchedFillResults = _calculateMatchedFillResultsWithMaximalFill(\n                leftOrder,\n                rightOrder,\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else {\n            matchedFillResults = _calculateMatchedFillResults(\n                leftOrder,\n                rightOrder,\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Compute fees for left order\n        matchedFillResults.left.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.left.makerAssetFilledAmount,\n            leftOrder.makerAssetAmount,\n            leftOrder.makerFee\n        );\n        matchedFillResults.left.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.left.takerAssetFilledAmount,\n            leftOrder.takerAssetAmount,\n            leftOrder.takerFee\n        );\n\n        // Compute fees for right order\n        matchedFillResults.right.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.right.makerAssetFilledAmount,\n            rightOrder.makerAssetAmount,\n            rightOrder.makerFee\n        );\n        matchedFillResults.right.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.right.takerAssetFilledAmount,\n            rightOrder.takerAssetAmount,\n            rightOrder.takerFee\n        );\n\n        // Compute the protocol fee that should be paid for a single fill. In this\n        // case this should be made the protocol fee for both the left and right orders.\n        uint256 protocolFee = gasPrice.safeMul(protocolFeeMultiplier);\n        matchedFillResults.left.protocolFeePaid = protocolFee;\n        matchedFillResults.right.protocolFeePaid = protocolFee;\n\n        // Return fill results\n        return matchedFillResults;\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    /// @param fillResults1 The first FillResults.\n    /// @param fillResults2 The second FillResults.\n    /// @return The sum of both fill results.\n    function addFillResults(\n        FillResults memory fillResults1,\n        FillResults memory fillResults2\n    )\n        internal\n        pure\n        returns (FillResults memory totalFillResults)\n    {\n        totalFillResults.makerAssetFilledAmount = fillResults1.makerAssetFilledAmount.safeAdd(fillResults2.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = fillResults1.takerAssetFilledAmount.safeAdd(fillResults2.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = fillResults1.makerFeePaid.safeAdd(fillResults2.makerFeePaid);\n        totalFillResults.takerFeePaid = fillResults1.takerFeePaid.safeAdd(fillResults2.takerFeePaid);\n        totalFillResults.protocolFeePaid = fillResults1.protocolFeePaid.safeAdd(fillResults2.protocolFeePaid);\n\n        return totalFillResults;\n    }\n\n    /// @dev Calculates part of the matched fill results for a given situation using the fill strategy that only\n    ///      awards profit denominated in the left maker asset.\n    /// @param leftOrder The left order in the order matching situation.\n    /// @param rightOrder The right order in the order matching situation.\n    /// @param leftMakerAssetAmountRemaining The amount of the left order maker asset that can still be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left order taker asset that can still be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right order maker asset that can still be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right order taker asset that can still be filled.\n    /// @return MatchFillResults struct that does not include fees paid.\n    function _calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Calculate fill results for maker and taker assets: at least one order will be fully filled.\n        // The maximum amount the left maker can buy is `leftTakerAssetAmountRemaining`\n        // The maximum amount the right maker can sell is `rightMakerAssetAmountRemaining`\n        // We have two distinct cases for calculating the fill results:\n        // Case 1.\n        //   If the left maker can buy more than the right maker can sell, then only the right order is fully filled.\n        //   If the left maker can buy exactly what the right maker can sell, then both orders are fully filled.\n        // Case 2.\n        //   If the left maker cannot buy more than the right maker can sell, then only the left order is fully filled.\n        // Case 3.\n        //   If the left maker can buy exactly as much as the right maker can sell, then both orders are fully filled.\n        if (leftTakerAssetAmountRemaining > rightMakerAssetAmountRemaining) {\n            // Case 1: Right order is fully filled\n            matchedFillResults = _calculateCompleteRightFill(\n                leftOrder,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else if (leftTakerAssetAmountRemaining < rightMakerAssetAmountRemaining) {\n            // Case 2: Left order is fully filled\n            matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            matchedFillResults.right.makerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            // Round up to ensure the maker's exchange rate does not exceed the price specified by the order.\n            // We favor the maker when the exchange rate must be rounded.\n            matchedFillResults.right.takerAssetFilledAmount = LibMath.safeGetPartialAmountCeil(\n                rightOrder.takerAssetAmount,\n                rightOrder.makerAssetAmount,\n                leftTakerAssetAmountRemaining // matchedFillResults.right.makerAssetFilledAmount\n            );\n        } else {\n            // leftTakerAssetAmountRemaining == rightMakerAssetAmountRemaining\n            // Case 3: Both orders are fully filled. Technically, this could be captured by the above cases, but\n            //         this calculation will be more precise since it does not include rounding.\n            matchedFillResults = _calculateCompleteFillBoth(\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Calculate amount given to taker\n        matchedFillResults.profitInLeftMakerAsset = matchedFillResults.left.makerAssetFilledAmount.safeSub(\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates part of the matched fill results for a given situation using the maximal fill order matching\n    ///      strategy.\n    /// @param leftOrder The left order in the order matching situation.\n    /// @param rightOrder The right order in the order matching situation.\n    /// @param leftMakerAssetAmountRemaining The amount of the left order maker asset that can still be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left order taker asset that can still be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right order maker asset that can still be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right order taker asset that can still be filled.\n    /// @return MatchFillResults struct that does not include fees paid.\n    function _calculateMatchedFillResultsWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // If a maker asset is greater than the opposite taker asset, than there will be a spread denominated in that maker asset.\n        bool doesLeftMakerAssetProfitExist = leftMakerAssetAmountRemaining > rightTakerAssetAmountRemaining;\n        bool doesRightMakerAssetProfitExist = rightMakerAssetAmountRemaining > leftTakerAssetAmountRemaining;\n\n        // Calculate the maximum fill results for the maker and taker assets. At least one of the orders will be fully filled.\n        //\n        // The maximum that the left maker can possibly buy is the amount that the right order can sell.\n        // The maximum that the right maker can possibly buy is the amount that the left order can sell.\n        //\n        // If the left order is fully filled, profit will be paid out in the left maker asset. If the right order is fully filled,\n        // the profit will be out in the right maker asset.\n        //\n        // There are three cases to consider:\n        // Case 1.\n        //   If the left maker can buy more than the right maker can sell, then only the right order is fully filled.\n        // Case 2.\n        //   If the right maker can buy more than the left maker can sell, then only the right order is fully filled.\n        // Case 3.\n        //   If the right maker can sell the max of what the left maker can buy and the left maker can sell the max of\n        //   what the right maker can buy, then both orders are fully filled.\n        if (leftTakerAssetAmountRemaining > rightMakerAssetAmountRemaining) {\n            // Case 1: Right order is fully filled with the profit paid in the left makerAsset\n            matchedFillResults = _calculateCompleteRightFill(\n                leftOrder,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else if (rightTakerAssetAmountRemaining > leftMakerAssetAmountRemaining) {\n            // Case 2: Left order is fully filled with the profit paid in the right makerAsset.\n            matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            // Round down to ensure the right maker's exchange rate does not exceed the price specified by the order.\n            // We favor the right maker when the exchange rate must be rounded and the profit is being paid in the\n            // right maker asset.\n            matchedFillResults.right.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n                rightOrder.makerAssetAmount,\n                rightOrder.takerAssetAmount,\n                leftMakerAssetAmountRemaining\n            );\n            matchedFillResults.right.takerAssetFilledAmount = leftMakerAssetAmountRemaining;\n        } else {\n            // Case 3: The right and left orders are fully filled\n            matchedFillResults = _calculateCompleteFillBoth(\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Calculate amount given to taker in the left order's maker asset if the left spread will be part of the profit.\n        if (doesLeftMakerAssetProfitExist) {\n            matchedFillResults.profitInLeftMakerAsset = matchedFillResults.left.makerAssetFilledAmount.safeSub(\n                matchedFillResults.right.takerAssetFilledAmount\n            );\n        }\n\n        // Calculate amount given to taker in the right order's maker asset if the right spread will be part of the profit.\n        if (doesRightMakerAssetProfitExist) {\n            matchedFillResults.profitInRightMakerAsset = matchedFillResults.right.makerAssetFilledAmount.safeSub(\n                matchedFillResults.left.takerAssetFilledAmount\n            );\n        }\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates the fill results for the maker and taker in the order matching and writes the results\n    ///      to the fillResults that are being collected on the order. Both orders will be fully filled in this\n    ///      case.\n    /// @param leftMakerAssetAmountRemaining The amount of the left maker asset that is remaining to be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left taker asset that is remaining to be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right maker asset that is remaining to be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right taker asset that is remaining to be filled.\n    /// @return MatchFillResults struct that does not include fees paid or spreads taken.\n    function _calculateCompleteFillBoth(\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Calculate the fully filled results for both orders.\n        matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n        matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n        matchedFillResults.right.makerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        matchedFillResults.right.takerAssetFilledAmount = rightTakerAssetAmountRemaining;\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates the fill results for the maker and taker in the order matching and writes the results\n    ///      to the fillResults that are being collected on the order.\n    /// @param leftOrder The left order that is being maximally filled. All of the information about fill amounts\n    ///                  can be derived from this order and the right asset remaining fields.\n    /// @param rightMakerAssetAmountRemaining The amount of the right maker asset that is remaining to be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right taker asset that is remaining to be filled.\n    /// @return MatchFillResults struct that does not include fees paid or spreads taken.\n    function _calculateCompleteRightFill(\n        LibOrder.Order memory leftOrder,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        matchedFillResults.right.makerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        matchedFillResults.right.takerAssetFilledAmount = rightTakerAssetAmountRemaining;\n        matchedFillResults.left.takerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        // Round down to ensure the left maker's exchange rate does not exceed the price specified by the order.\n        // We favor the left maker when the exchange rate must be rounded and the profit is being paid in the\n        // left maker asset.\n        matchedFillResults.left.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n            leftOrder.makerAssetAmount,\n            leftOrder.takerAssetAmount,\n            rightMakerAssetAmountRemaining\n        );\n\n        return matchedFillResults;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\nimport \"./LibRichErrors.sol\";\nimport \"./LibSafeMathRichErrors.sol\";\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMathRichErrors {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibMath.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"./LibMathRichErrors.sol\";\n\n\nlibrary LibMath {\n\n    using LibSafeMath for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibMathRichErrors {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IProtocolFees.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IProtocolFees {\n\n    // Logs updates to the protocol fee multiplier.\n    event ProtocolFeeMultiplier(uint256 oldProtocolFeeMultiplier, uint256 updatedProtocolFeeMultiplier);\n\n    // Logs updates to the protocolFeeCollector address.\n    event ProtocolFeeCollectorAddress(address oldProtocolFeeCollector, address updatedProtocolFeeCollector);\n\n    /// @dev Allows the owner to update the protocol fee multiplier.\n    /// @param updatedProtocolFeeMultiplier The updated protocol fee multiplier.\n    function setProtocolFeeMultiplier(uint256 updatedProtocolFeeMultiplier)\n        external;\n\n    /// @dev Allows the owner to update the protocolFeeCollector address.\n    /// @param updatedProtocolFeeCollector The updated protocolFeeCollector contract address.\n    function setProtocolFeeCollectorAddress(address updatedProtocolFeeCollector)\n        external;\n\n    /// @dev Returns the protocolFeeMultiplier\n    function protocolFeeMultiplier()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the protocolFeeCollector address\n    function protocolFeeCollector()\n        external\n        view\n        returns (address);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IMatchOrders.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IMatchOrders {\n\n    /// @dev Match complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point, and\n    ///      the matcher receives a profit denominated in the left maker asset.\n    /// @param leftOrders Set of orders with the same maker / taker asset.\n    /// @param rightOrders Set of orders to match against `leftOrders`\n    /// @param leftSignatures Proof that left orders were created by the left makers.\n    /// @param rightSignatures Proof that right orders were created by the right makers.\n    /// @return batchMatchedFillResults Amounts filled and profit generated.\n    function batchMatchOrders(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults);\n\n    /// @dev Match complementary orders that have a profitable spread.\n    ///      Each order is maximally filled at their respective price point, and\n    ///      the matcher receives a profit denominated in either the left maker asset,\n    ///      right maker asset, or a combination of both.\n    /// @param leftOrders Set of orders with the same maker / taker asset.\n    /// @param rightOrders Set of orders to match against `leftOrders`\n    /// @param leftSignatures Proof that left orders were created by the left makers.\n    /// @param rightSignatures Proof that right orders were created by the right makers.\n    /// @return batchMatchedFillResults Amounts filled and profit generated.\n    function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults);\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is maximally filled at their respective price point, and\n    ///      the matcher receives a profit denominated in either the left maker asset,\n    ///      right maker asset, or a combination of both.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled by maker and taker of matched orders.\n    function matchOrdersWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/ISignatureValidator.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol\";\n\n\ncontract ISignatureValidator {\n\n   // Allowed signature types.\n    enum SignatureType {\n        Illegal,                     // 0x00, default value\n        Invalid,                     // 0x01\n        EIP712,                      // 0x02\n        EthSign,                     // 0x03\n        Wallet,                      // 0x04\n        Validator,                   // 0x05\n        PreSigned,                   // 0x06\n        EIP1271Wallet,               // 0x07\n        NSignatureTypes              // 0x08, number of signature types. Always leave at end.\n    }\n\n    event SignatureValidatorApproval(\n        address indexed signerAddress,     // Address that approves or disapproves a contract to verify signatures.\n        address indexed validatorAddress,  // Address of signature validator contract.\n        bool isApproved                    // Approval or disapproval of validator contract.\n    );\n\n    /// @dev Approves a hash on-chain.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param hash Any 32-byte hash.\n    function preSign(bytes32 hash)\n        external\n        payable;\n\n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external\n        payable;\n\n    /// @dev Verifies that a hash has been signed by the given signer.\n    /// @param hash Any 32-byte hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid `true` if the signature is valid for the given hash and signer.\n    function isValidHashSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a signature for an order is valid.\n    /// @param order The order.\n    /// @param signature Proof that the order has been signed by signer.\n    /// @return isValid true if the signature is valid for the given order and signer.\n    function isValidOrderSignature(\n        LibOrder.Order memory order,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a signature for a transaction is valid.\n    /// @param transaction The transaction.\n    /// @param signature Proof that the order has been signed by signer.\n    /// @return isValid true if the signature is valid for the given transaction and signer.\n    function isValidTransactionSignature(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that an order, with provided order hash, has been signed\n    ///      by the given signer.\n    /// @param order The order.\n    /// @param orderHash The hash of the order.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid True if the signature is valid for the given order and signer.\n    function _isValidOrderWithHashSignature(\n        LibOrder.Order memory order,\n        bytes32 orderHash,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a transaction, with provided order hash, has been signed\n    ///      by the given signer.\n    /// @param transaction The transaction.\n    /// @param transactionHash The hash of the transaction.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid True if the signature is valid for the given transaction and signer.\n    function _isValidTransactionWithHashSignature(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes32 transactionHash,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid);\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\nlibrary LibZeroExTransaction {\n\n    using LibZeroExTransaction for ZeroExTransaction;\n\n    // Hash for the EIP712 0x transaction schema\n    // keccak256(abi.encodePacked(\n    //    \"ZeroExTransaction(\",\n    //    \"uint256 salt,\",\n    //    \"uint256 expirationTimeSeconds,\",\n    //    \"uint256 gasPrice,\",\n    //    \"address signerAddress,\",\n    //    \"bytes data\",\n    //    \")\"\n    // ));\n    bytes32 constant internal _EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH = 0xec69816980a3a3ca4554410e60253953e9ff375ba4536a98adfa15cc71541508;\n\n    struct ZeroExTransaction {\n        uint256 salt;                   // Arbitrary number to ensure uniqueness of transaction hash.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which transaction expires.\n        uint256 gasPrice;               // gasPrice that transaction is required to be executed with.\n        address signerAddress;          // Address of transaction signer.\n        bytes data;                     // AbiV2 encoded calldata.\n    }\n\n    /// @dev Calculates the EIP712 typed data hash of a transaction with a given domain separator.\n    /// @param transaction 0x transaction structure.\n    /// @return EIP712 typed data hash of the transaction.\n    function getTypedDataHash(ZeroExTransaction memory transaction, bytes32 eip712ExchangeDomainHash)\n        internal\n        pure\n        returns (bytes32 transactionHash)\n    {\n        // Hash the transaction with the domain separator of the Exchange contract.\n        transactionHash = LibEIP712.hashEIP712Message(\n            eip712ExchangeDomainHash,\n            transaction.getStructHash()\n        );\n        return transactionHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the 0x transaction struct.\n    /// @param transaction 0x transaction structure.\n    /// @return EIP712 hash of the transaction struct.\n    function getStructHash(ZeroExTransaction memory transaction)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH;\n        bytes memory data = transaction.data;\n        uint256 salt = transaction.salt;\n        uint256 expirationTimeSeconds = transaction.expirationTimeSeconds;\n        uint256 gasPrice = transaction.gasPrice;\n        address signerAddress = transaction.signerAddress;\n\n        // Assembly for more efficiently computing:\n        // result = keccak256(abi.encodePacked(\n        //     schemaHash,\n        //     salt,\n        //     expirationTimeSeconds,\n        //     gasPrice,\n        //     uint256(signerAddress),\n        //     keccak256(data)\n        // ));\n\n        assembly {\n            // Compute hash of data\n            let dataHash := keccak256(add(data, 32), mload(data))\n\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, schemaHash)                                                                // hash of schema\n            mstore(add(memPtr, 32), salt)                                                             // salt\n            mstore(add(memPtr, 64), expirationTimeSeconds)                                            // expirationTimeSeconds\n            mstore(add(memPtr, 96), gasPrice)                                                         // gasPrice\n            mstore(add(memPtr, 128), and(signerAddress, 0xffffffffffffffffffffffffffffffffffffffff))  // signerAddress\n            mstore(add(memPtr, 160), dataHash)                                                        // hash of data\n\n            // Compute hash\n            result := keccak256(memPtr, 192)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/ITransactions.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol\";\n\n\ncontract ITransactions {\n\n    // TransactionExecution event is emitted when a ZeroExTransaction is executed.\n    event TransactionExecution(bytes32 indexed transactionHash);\n\n    /// @dev Executes an Exchange method call in the context of signer.\n    /// @param transaction 0x transaction containing salt, signerAddress, and data.\n    /// @param signature Proof that transaction has been signed by signer.\n    /// @return ABI encoded return data of the underlying Exchange function call.\n    function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (bytes memory);\n\n    /// @dev Executes a batch of Exchange method calls in the context of signer(s).\n    /// @param transactions Array of 0x transactions containing salt, signerAddress, and data.\n    /// @param signatures Array of proofs that transactions have been signed by signer(s).\n    /// @return Array containing ABI encoded return data for each of the underlying Exchange function calls.\n    function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] memory transactions,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (bytes[] memory);\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function _getCurrentContextAddress()\n        internal\n        view\n        returns (address);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IAssetProxyDispatcher.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IAssetProxyDispatcher {\n\n    // Logs registration of new asset proxy\n    event AssetProxyRegistered(\n        bytes4 id,              // Id of new registered AssetProxy.\n        address assetProxy      // Address of new registered AssetProxy.\n    );\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IWrapperFunctions.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IWrapperFunctions {\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrKillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder. If any fill reverts, the error is caught and ignored.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      If any fill reverts, the error is caught and ignored.\n    ///      NOTE: This function does not enforce that the takerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    ///      If any fill reverts, the error is caught and ignored.\n    ///      NOTE: This function does not enforce that the makerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Calls marketSellOrdersNoThrow then reverts if < takerAssetFillAmount has been sold.\n    ///      NOTE: This function does not enforce that the takerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Minimum amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Calls marketBuyOrdersNoThrow then reverts if < makerAssetFillAmount has been bought.\n    ///      NOTE: This function does not enforce that the makerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Minimum amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of cancelOrder.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n        payable;\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/ITransferSimulator.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ncontract ITransferSimulator {\n\n    /// @dev This function may be used to simulate any amount of transfers\n    /// As they would occur through the Exchange contract. Note that this function\n    /// will always revert, even if all transfers are successful. However, it may\n    /// be used with eth_call or with a try/catch pattern in order to simulate\n    /// the results of the transfers.\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\n    /// @param fromAddresses Array containing the `from` addresses that correspond with each transfer.\n    /// @param toAddresses Array containing the `to` addresses that correspond with each transfer.\n    /// @param amounts Array containing the amounts that correspond to each transfer.\n    /// @return This function does not return a value. However, it will always revert with\n    /// `Error(\"TRANSFERS_SUCCESSFUL\")` if all of the transfers were successful.\n    function simulateDispatchTransferFromCalls(\n        bytes[] memory assetData,\n        address[] memory fromAddresses,\n        address[] memory toAddresses,\n        uint256[] memory amounts\n    )\n        public;\n}\n",
        "src/ERC20BridgeSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchangeFactory.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"./IDevUtils.sol\";\nimport \"./IERC20BridgeSampler.sol\";\nimport \"./IEth2Dai.sol\";\nimport \"./IKyberNetwork.sol\";\nimport \"./IUniswapExchangeQuotes.sol\";\nimport \"./ICurve.sol\";\nimport \"./ILiquidityProvider.sol\";\nimport \"./ILiquidityProviderRegistry.sol\";\n\n\ncontract ERC20BridgeSampler is\n    IERC20BridgeSampler,\n    DeploymentConstants\n{\n    /// @dev Gas limit for DevUtils calls.\n    uint256 constant internal DEV_UTILS_CALL_GAS = 500e3; // 500k\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant internal KYBER_CALL_GAS = 1500e3; // 1.5m\n    /// @dev Gas limit for Uniswap calls.\n    uint256 constant internal UNISWAP_CALL_GAS = 150e3; // 150k\n    /// @dev Base gas limit for Eth2Dai calls.\n    uint256 constant internal ETH2DAI_CALL_GAS = 1000e3; // 1m\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\n    uint256 constant internal CURVE_CALL_GAS = 600e3; // 600k\n    /// @dev Default gas limit for liquidity provider calls.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        view\n        returns (bytes[] memory callResults)\n    {\n        callResults = new bytes[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            (bool didSucceed, bytes memory resultData) = address(this).staticcall(callDatas[i]);\n            if (!didSucceed) {\n                assembly { revert(add(resultData, 0x20), mload(resultData)) }\n            }\n            callResults[i] = resultData;\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getOrderFillableTakerAssetAmounts(\n        LibOrder.Order[] memory orders,\n        bytes[] memory orderSignatures\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            // Ignore orders with no signature or empty maker/taker amounts.\n            if (orderSignatures[i].length == 0 ||\n                orders[i].makerAssetAmount == 0 ||\n                orders[i].takerAssetAmount == 0) {\n                orderFillableTakerAssetAmounts[i] = 0;\n                continue;\n            }\n            // solhint-disable indent\n            (bool didSucceed, bytes memory resultData) =\n                _getDevUtilsAddress()\n                    .staticcall\n                    .gas(DEV_UTILS_CALL_GAS)\n                    (abi.encodeWithSelector(\n                       IDevUtils(_getDevUtilsAddress()).getOrderRelevantState.selector,\n                       orders[i],\n                       orderSignatures[i]\n                    ));\n            // solhint-enable indent\n            if (!didSucceed) {\n                orderFillableTakerAssetAmounts[i] = 0;\n                continue;\n            }\n            (\n                LibOrder.OrderInfo memory orderInfo,\n                uint256 fillableTakerAssetAmount,\n                bool isValidSignature\n            ) = abi.decode(\n                resultData,\n                (LibOrder.OrderInfo, uint256, bool)\n            );\n            // The fillable amount is zero if the order is not fillable or if the\n            // signature is invalid.\n            if (orderInfo.orderStatus != LibOrder.OrderStatus.FILLABLE ||\n                !isValidSignature) {\n                orderFillableTakerAssetAmounts[i] = 0;\n            } else {\n                orderFillableTakerAssetAmounts[i] = fillableTakerAssetAmount;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getOrderFillableMakerAssetAmounts(\n        LibOrder.Order[] memory orders,\n        bytes[] memory orderSignatures\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMath.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAssetAmount,\n                    orders[i].makerAssetAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberNetwork(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        address _takerToken = takerToken == _getWethAddress() ? KYBER_ETH_ADDRESS : takerToken;\n        address _makerToken = makerToken == _getWethAddress() ? KYBER_ETH_ADDRESS : makerToken;\n        uint256 takerTokenDecimals = _getTokenDecimals(takerToken);\n        uint256 makerTokenDecimals = _getTokenDecimals(makerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                _getKyberNetworkProxyAddress().staticcall.gas(KYBER_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IKyberNetwork(0).getExpectedRate.selector,\n                        _takerToken,\n                        _makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 rate = 0;\n            if (didSucceed) {\n                rate = abi.decode(resultData, (uint256));\n            } else {\n                break;\n            }\n            makerTokenAmounts[i] =\n                rate *\n                takerTokenAmounts[i] *\n                10 ** makerTokenDecimals /\n                10 ** takerTokenDecimals /\n                10 ** 18;\n        }\n    }\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2Dai(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                _getEth2DaiAddress().staticcall.gas(ETH2DAI_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IEth2Dai(0).getBuyAmount.selector,\n                        makerToken,\n                        takerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            } else{\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from Eth2Dai/Oasis.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromEth2Dai(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                _getEth2DaiAddress().staticcall.gas(ETH2DAI_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IEth2Dai(0).getPayAmount.selector,\n                        takerToken,\n                        makerToken,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            } else {\n                break;\n            }\n            takerTokenAmounts[i] = sellAmount;\n        }\n    }\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == _getWethAddress()) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else if (takerToken == _getWethAddress()) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethBought;\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n                if (ethBought != 0) {\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(makerTokenExchange),\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\n                        ethBought\n                    );\n                } else {\n                    makerTokenAmounts[i] = 0;\n                }\n            }\n            if (!didSucceed) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == _getWethAddress()) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else if (takerToken == _getWethAddress()) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethSold;\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n                if (ethSold != 0) {\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(takerTokenExchange),\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\n                        ethSold\n                    );\n                } else {\n                    takerTokenAmounts[i] = 0;\n                }\n            }\n            if (!didSucceed) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveAddress Address of the Curve contract.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        address curveAddress,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        ICurve(0).get_dy_underlying.selector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            } else {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param registryAddress Address of the liquidity provider registry contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProviderRegistry(\n        address registryAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // Query registry for provider address.\n        address providerAddress = getLiquidityProviderFromRegistry(\n            registryAddress,\n            takerToken,\n            makerToken\n        );\n        // If provider doesn't exist, return all zeros.\n        if (providerAddress == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                providerAddress.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        ILiquidityProvider(0).getSellQuote.selector,\n                        takerToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            } else {\n                // Exit early if the amount is too high for the liquidity provider to serve\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param registryAddress Address of the liquidity provider registry contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProviderRegistry(\n        address registryAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        // Initialize array of taker token amounts.\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        // Query registry for provider address.\n        address providerAddress = getLiquidityProviderFromRegistry(\n            registryAddress,\n            takerToken,\n            makerToken\n        );\n        // If provider doesn't exist, return all zeros.\n        if (providerAddress == address(0)) {\n            return takerTokenAmounts;\n        }\n\n        // Otherwise, query liquidity provider for quotes.\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                providerAddress.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        ILiquidityProvider(0).getBuyQuote.selector,\n                        takerToken,\n                        makerToken,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            } else {\n                // Exit early if the amount is too high for the liquidity provider to serve\n                break;\n            }\n            takerTokenAmounts[i] = sellAmount;\n        }\n    }\n\n    /// @dev Returns the address of a liquidity provider for the given market\n    ///      (takerToken, makerToken), from a registry of liquidity providers.\n    ///      Returns address(0) if no such provider exists in the registry.\n    /// @param takerToken Taker asset managed by liquidity provider.\n    /// @param makerToken Maker asset managed by liquidity provider.\n    /// @return providerAddress Address of the liquidity provider.\n    function getLiquidityProviderFromRegistry(\n        address registryAddress,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (address providerAddress)\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            ILiquidityProviderRegistry(0).getLiquidityProviderForMarket.selector,\n            takerToken,\n            makerToken\n        );\n        (bool didSucceed, bytes memory returnData) = registryAddress.staticcall(callData);\n        if (didSucceed && returnData.length == 32) {\n            return LibBytes.readAddress(returnData, 12);\n        }\n    }\n\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress)\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibERC20Token.decimals(tokenAddress);\n    }\n\n    /// @dev Gracefully calls a Uniswap pricing function.\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\n    /// @param functionSelector Selector of the target function.\n    /// @param inputAmount Quantity parameter particular to the pricing function.\n    /// @return outputAmount The returned amount from the function call. Will be\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\n    function _callUniswapExchangePriceFunction(\n        address uniswapExchangeAddress,\n        bytes4 functionSelector,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount, bool didSucceed)\n    {\n        if (uniswapExchangeAddress == address(0)) {\n            return (outputAmount, didSucceed);\n        }\n        bytes memory resultData;\n        (didSucceed, resultData) =\n            uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\n                abi.encodeWithSelector(\n                    functionSelector,\n                    inputAmount\n                ));\n        if (didSucceed) {\n            outputAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Retrive an existing Uniswap exchange contract.\n    ///      Throws if the exchange does not exist.\n    /// @param tokenAddress Address of the token contract.\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\n    function _getUniswapExchange(address tokenAddress)\n        private\n        view\n        returns (IUniswapExchangeQuotes exchange)\n    {\n        exchange = IUniswapExchangeQuotes(\n            address(IUniswapExchangeFactory(_getUniswapExchangeFactoryAddress())\n            .getExchange(tokenAddress))\n        );\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        private\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"../src/interfaces/IERC20Token.sol\";\n\n\nlibrary LibERC20Token {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20Token(token).approve()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function approve(\n        address token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).transfer()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transfer(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).transferFrom()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function decimals(address token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = token.staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length == 32) {\n            tokenDecimals = uint8(LibBytes.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance The allowance for a token, owner, and spender.\n    function allowance(address token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            allowance_ = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function balanceOf(address token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            balance = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed) {\n            if (resultData.length == 0) {\n                return;\n            }\n            if (resultData.length == 32) {\n                uint256 result = LibBytes.readUint256(resultData, 0);\n                if (result == 1) {\n                    return;\n                }\n            }\n        }\n        LibRichErrors.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./LibBytesRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibBytesRichErrors {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n}\n",
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract DeploymentConstants {\n    /// @dev Mainnet address of the WETH contract.\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    // /// @dev Kovan address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    /// @dev Mainnet address of the KyberNetworkProxy contract.\n    address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\n    // /// @dev Kovan address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\n    /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\n    // /// @dev Kovan address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xD3E51Ef092B2845f10401a0159B2B96e8B6c3D30;\n    /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    address constant private ETH2DAI_ADDRESS = 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\n    // /// @dev Kovan address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = 0xe325acB9765b02b8b418199bf9650972299235F4;\n    /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x8ED95d1746bf1E4dAb58d8ED4724f1Ef95B20Db0;\n    // /// @dev Kovan address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xFb2DD2A1366dE37f7241C83d47DA58fd503E2C64;\n    ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    address constant private DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    // ///@dev Kovan address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\n    /// @dev Mainnet address of the `Chai` contract\n    address constant private CHAI_ADDRESS = 0x06AF07097C9Eeb7fD685c692751D5C66dB49c215;\n    /// @dev Mainnet address of the 0x DevUtils contract.\n    address constant private DEV_UTILS_ADDRESS = 0x74134CF88b21383713E096a5ecF59e297dc7f547;\n    // /// @dev Kovan address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0x161793Cdca4fF9E766A706c2C49c36AC1340bbcd;\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev Mainnet address of the dYdX contract.\n    address constant private DYDX_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n\n    /// @dev Overridable way to get the `KyberNetworkProxy` address.\n    /// @return kyberAddress The `IKyberNetworkProxy` address.\n    function _getKyberNetworkProxyAddress()\n        internal\n        view\n        returns (address kyberAddress)\n    {\n        return KYBER_NETWORK_PROXY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the WETH address.\n    /// @return wethAddress The WETH address.\n    function _getWethAddress()\n        internal\n        view\n        returns (address wethAddress)\n    {\n        return WETH_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapExchangeFactory` address.\n    /// @return uniswapAddress The `UniswapExchangeFactory` address.\n    function _getUniswapExchangeFactoryAddress()\n        internal\n        view\n        returns (address uniswapAddress)\n    {\n        return UNISWAP_EXCHANGE_FACTORY_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the Eth2Dai `MatchingMarket` contract.\n    /// @return eth2daiAddress The Eth2Dai `MatchingMarket` contract.\n    function _getEth2DaiAddress()\n        internal\n        view\n        returns (address eth2daiAddress)\n    {\n        return ETH2DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `ERC20BridgeProxy` contract.\n    /// @return erc20BridgeProxyAddress The `ERC20BridgeProxy` contract.\n    function _getERC20BridgeProxyAddress()\n        internal\n        view\n        returns (address erc20BridgeProxyAddress)\n    {\n        return ERC20_BRIDGE_PROXY_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Dai` contract.\n    /// @return daiAddress The `Dai` contract.\n    function _getDaiAddress()\n        internal\n        view\n        returns (address daiAddress)\n    {\n        return DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Chai` contract.\n    /// @return chaiAddress The `Chai` contract.\n    function _getChaiAddress()\n        internal\n        view\n        returns (address chaiAddress)\n    {\n        return CHAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the 0x `DevUtils` contract address.\n    /// @return devUtils The 0x `DevUtils` contract address.\n    function _getDevUtilsAddress()\n        internal\n        view\n        returns (address devUtils)\n    {\n        return DEV_UTILS_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the DyDx contract.\n    /// @return exchange The DyDx exchange contract.\n    function _getDydxAddress()\n        internal\n        view\n        returns (address dydxAddress)\n    {\n        return DYDX_ADDRESS;\n    }\n}\n",
        "src/IDevUtils.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\n\n\ninterface IDevUtils {\n\n    /// @dev Fetches all order-relevant information needed to validate if the supplied order is fillable.\n    /// @param order The order structure.\n    /// @param signature Signature provided by maker that proves the order's authenticity.\n    /// `0x01` can always be provided if the signature does not need to be validated.\n    /// @return The orderInfo (hash, status, and `takerAssetAmount` already filled for the given order),\n    /// fillableTakerAssetAmount (amount of the order's `takerAssetAmount` that is fillable given all on-chain state),\n    /// and isValidSignature (validity of the provided signature).\n    /// NOTE: If the `takerAssetData` encodes data for multiple assets, `fillableTakerAssetAmount` will represent a \"scaled\"\n    /// amount, meaning it must be multiplied by all the individual asset amounts within the `takerAssetData` to get the final\n    /// amount of each asset that can be filled.\n    function getOrderRelevantState(LibOrder.Order calldata order, bytes calldata signature)\n        external\n        view\n        returns (\n            LibOrder.OrderInfo memory orderInfo,\n            uint256 fillableTakerAssetAmount,\n            bool isValidSignature\n        );\n}\n",
        "src/IERC20BridgeSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\n\n\ninterface IERC20BridgeSampler {\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        view\n        returns (bytes[] memory callResults);\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getOrderFillableTakerAssetAmounts(\n        LibOrder.Order[] calldata orders,\n        bytes[] calldata orderSignatures\n    )\n        external\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts);\n\n    /// @dev Queries the fillable maker asset amounts of native orders.\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getOrderFillableMakerAssetAmounts(\n        LibOrder.Order[] calldata orders,\n        bytes[] calldata orderSignatures\n    )\n        external\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts);\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberNetwork(\n        address takerToken,\n        address makerToken,\n        uint256[] calldata takerTokenAmounts\n    )\n        external\n        view\n        returns (uint256[] memory makerTokenAmounts);\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2Dai(\n        address takerToken,\n        address makerToken,\n        uint256[] calldata takerTokenAmounts\n    )\n        external\n        view\n        returns (uint256[] memory makerTokenAmounts);\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address takerToken,\n        address makerToken,\n        uint256[] calldata takerTokenAmounts\n    )\n        external\n        view\n        returns (uint256[] memory makerTokenAmounts);\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address takerToken,\n        address makerToken,\n        uint256[] calldata makerTokenAmounts\n    )\n        external\n        view\n        returns (uint256[] memory takerTokenAmounts);\n\n    /// @dev Sample buy quotes from Eth2Dai/Oasis.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromEth2Dai(\n        address takerToken,\n        address makerToken,\n        uint256[] calldata makerTokenAmounts\n    )\n        external\n        view\n        returns (uint256[] memory takerTokenAmounts);\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveAddress Address of the Curve contract.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        address curveAddress,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] calldata takerTokenAmounts\n    )\n        external\n        view\n        returns (uint256[] memory makerTokenAmounts);\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param registryAddress Address of the liquidity provider registry contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProviderRegistry(\n        address registryAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] calldata takerTokenAmounts\n    )\n        external\n        view\n        returns (uint256[] memory makerTokenAmounts);\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param registryAddress Address of the liquidity provider registry contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProviderRegistry(\n        address registryAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] calldata makerTokenAmounts\n    )\n        external\n        view\n        returns (uint256[] memory takerTokenAmounts);\n\n    /// @dev Returns the address of a liquidity provider for the given market\n    ///      (takerToken, makerToken), from a registry of liquidity providers.\n    ///      Returns address(0) if no such provider exists in the registry.\n    /// @param takerToken Taker asset managed by liquidity provider.\n    /// @param makerToken Maker asset managed by liquidity provider.\n    /// @return providerAddress Address of the liquidity provider.\n    function getLiquidityProviderFromRegistry(\n        address registryAddress,\n        address takerToken,\n        address makerToken\n    )\n        external\n        view\n        returns (address providerAddress);\n}\n",
        "src/IEth2Dai.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IEth2Dai {\n\n    function getBuyAmount(\n        address buyToken,\n        address payToken,\n        uint256 payAmount\n    )\n        external\n        view\n        returns (uint256 buyAmount);\n\n    function getPayAmount(\n        address payToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 payAmount);\n}\n",
        "src/IKyberNetwork.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IKyberNetwork {\n\n    function getExpectedRate(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount\n    )\n        external\n        view\n        returns (uint256 expectedRate, uint256 slippageRate);\n}\n",
        "src/IUniswapExchangeQuotes.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IUniswapExchangeQuotes {\n\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought);\n\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold);\n\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought);\n\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold);\n}\n",
        "src/ICurve.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on early versions of Curve (USDC/DAI)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    /// @param deadline The time in seconds when this operation should expire.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount,\n        uint256 deadline\n    )\n        external;\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(\n        int128 i,\n        int128 j,\n        uint256 buyAmount\n    )\n        external\n        returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(\n        int128 i\n    )\n        external\n        returns (address tokenAddress);\n}\n",
        "src/ILiquidityProvider.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface ILiquidityProvider {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n\n    /// @dev Quotes the amount of `takerToken` that would need to be sold in\n    ///      order to obtain `buyAmount` of `makerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param buyAmount Amount of `makerToken` to buy.\n    /// @return takerTokenAmount Amount of `takerToken` that would need to be sold.\n    function getBuyQuote(\n        address takerToken,\n        address makerToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 takerTokenAmount);\n}\n",
        "src/ILiquidityProviderRegistry.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface ILiquidityProviderRegistry {\n\n    /// @dev Returns the address of a liquidity provider for the given market\n    ///      (takerToken, makerToken), reverting if the pool does not exist.\n    /// @param takerToken Taker asset managed by liquidity provider.\n    /// @param makerToken Maker asset managed by liquidity provider.\n    /// @return Address of the liquidity provider.\n    function getLiquidityProviderForMarket(\n        address takerToken,\n        address makerToken\n    )\n        external\n        view\n        returns (address providerAddress);\n}\n"
    },
    "sourceTreeHashHex": "0x3beee5c7ae7e518697be2b191127ff9915cfb8f31416e4395ddd3b49a7b36516",
    "compiler": {
        "name": "solc",
        "version": "soljson-v0.5.16+commit.9c3226ce.js",
        "settings": {
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul",
            "remappings": [
                "@0x/contracts-asset-proxy=/Users/danielpyrathon/Desktop/Projects/0x-monorepo/node_modules/@0x/contracts-asset-proxy",
                "@0x/contracts-erc20=/Users/danielpyrathon/Desktop/Projects/0x-monorepo/node_modules/@0x/contracts-erc20",
                "@0x/contracts-utils=/Users/danielpyrathon/Desktop/Projects/0x-monorepo/node_modules/@0x/contracts-utils",
                "@0x/contracts-exchange-libs=/Users/danielpyrathon/Desktop/Projects/0x-monorepo/node_modules/@0x/contracts-exchange-libs",
                "@0x/contracts-exchange=/Users/danielpyrathon/Desktop/Projects/0x-monorepo/node_modules/@0x/contracts-exchange"
            ]
        }
    },
    "chains": {}
}
