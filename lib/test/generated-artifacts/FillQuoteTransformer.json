{
    "schemaVersion": "2.0.0",
    "contractName": "FillQuoteTransformer",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange_",
                        "type": "address"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "inputs": [],
                "name": "deployer",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address payable",
                        "name": "ethRecipient",
                        "type": "address"
                    }
                ],
                "name": "die",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "erc20Proxy",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "exchange",
                "outputs": [
                    {
                        "internalType": "contract IExchange",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address payable",
                        "name": "",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "data_",
                        "type": "bytes"
                    }
                ],
                "name": "transform",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "success",
                        "type": "bytes4"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "details": "A transformer that fills an ERC20 market sell/buy quote.",
            "methods": {
                "constructor": {
                    "details": "Create this contract.",
                    "params": {
                        "exchange_": "The Exchange V3 instance."
                    }
                },
                "die(address)": {
                    "details": "Destruct this contract. Only callable by the deployer and will not      succeed in the context of a delegatecall (from another contract).",
                    "params": {
                        "ethRecipient": "The recipient of ETH held in this contract."
                    }
                },
                "transform(bytes32,address,bytes)": {
                    "details": "Sell this contract's entire balance of of `sellToken` in exchange      for `buyToken` by filling `orders`. Protocol fees should be attached      to this call. `buyToken` and excess ETH will be transferred back to the caller.",
                    "params": {
                        "data_": "ABI-encoded `TransformData`."
                    },
                    "returns": {
                        "success": "The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`)."
                    }
                }
            },
            "stateVariables": {
                "ERC20_ASSET_PROXY_ID": {
                    "details": "The Exchange ERC20Proxy ID."
                },
                "MAX_UINT256": {
                    "details": "Maximum uint256 value."
                },
                "erc20Proxy": {
                    "details": "The ERC20Proxy address."
                },
                "exchange": {
                    "details": "The Exchange contract."
                }
            }
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x6101006040523480156200001257600080fd5b5060405162002306380380620023068339810160408190526200003591620000f4565b33606090811b60805230811b60a05281901b6001600160601b03191660c052604051630c0e082160e31b81526001600160a01b038216906360704108906200008990630f47261b60e41b906004016200011a565b60206040518083038186803b158015620000a257600080fd5b505afa158015620000b7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000dd9190620000f4565b60601b6001600160601b03191660e0525062000148565b60006020828403121562000106578081fd5b815162000113816200012f565b9392505050565b6001600160e01b031991909116815260200190565b6001600160a01b03811681146200014557600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c612155620001b16000398060d152806103a95280610b495280610ce05250806101e752806103ff528061115552508061017a52806101a852508061010b5280610139528061020b52506121556000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063d2f7265a11610050578063d2f7265a1461009f578063d5f39488146100a7578063e063ed81146100af57610067565b80637f555b031461006c578063c9353cb51461008a575b600080fd5b6100746100cf565b6040516100819190611de9565b60405180910390f35b61009d6100983660046118f5565b6100f3565b005b6100746101e5565b610074610209565b6100c26100bd366004611911565b61022d565b6040516100819190611e85565b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101625761016261015d337f0000000000000000000000000000000000000000000000000000000000000000610768565b610817565b3073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101cc576101cc61015d307f000000000000000000000000000000000000000000000000000000000000000061081f565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061023761153d565b610243838501856119e8565b9050610268816020015173ffffffffffffffffffffffffffffffffffffffff1661082d565b806102915750610291816040015173ffffffffffffffffffffffffffffffffffffffff1661082d565b156102da576102da61015d600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061086092505050565b8060800151518160600151511461032f5761032f61015d600186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061086092505050565b60008151600181111561033e57fe5b14801561036e57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160c00151145b156103a457602081015161039e9073ffffffffffffffffffffffffffffffffffffffff163063ffffffff61088916565b60c08201525b6103f77f00000000000000000000000000000000000000000000000000000000000000008260c00151836020015173ffffffffffffffffffffffffffffffffffffffff166109609092919063ffffffff16565b60006104a73a7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631ce4c78b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561046357600080fd5b505afa158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b9190611ad9565b9063ffffffff610a3c16565b905047600080805b8560600151518110156106da576000865160018111156104cb57fe5b14156104e6578560c0015182106104e1576106da565b6104f6565b8560c0015183106104f6576106da565b8484101561050b5761050b61015d8587610a6d565b6105136115a7565b60008751600181111561052257fe5b14156105e1576105da876040015188602001518960600151858151811061054557fe5b60200260200101518a60800151868151811061055d57fe5b60200260200101516105d4878d60a00151511161059a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6105b3565b8c60a0015188815181106105aa57fe5b60200260200101515b60c08e01516105c8908b63ffffffff610a9616565b9063ffffffff610ab516565b8b610acb565b905061068a565b61068787604001518860200151896060015185815181106105fe57fe5b60200260200101518a60800151868151811061061657fe5b6020026020010151610681878d60a001515111610653577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61066c565b8c60a00151888151811061066357fe5b60200260200101515b60c08e01516105c8908c63ffffffff610a9616565b8b610c3f565b90505b805161069d90849063ffffffff610d7c16565b92506106b6816020015185610d7c90919063ffffffff16565b93506106cf816040015186610a9690919063ffffffff16565b9450506001016104af565b506000855160018111156106ea57fe5b1415610717578460c001518110156107125761071261015d8660200151838860c00151610d98565b610739565b8460c001518210156107395761073961015d8660400151848860c00151610e49565b507f13c9929e000000000000000000000000000000000000000000000000000000009998505050505050505050565b606060405161077690611c0f565b60405180910390208383604051602401610791929190611e0a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290505b92915050565b805160208201fd5b606060405161077690611cfc565b73ffffffffffffffffffffffffffffffffffffffff811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b919050565b606060405161086e90611bc0565b60405180910390208383604051602401610791929190611ef5565b60006108948361082d565b156108b7575073ffffffffffffffffffffffffffffffffffffffff811631610811565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190610909908590600401611de9565b60206040518083038186803b15801561092157600080fd5b505afa158015610935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109599190611ad9565b9392505050565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152819073ffffffffffffffffffffffffffffffffffffffff85169063dd62ed3e906109b69030908790600401611e0a565b60206040518083038186803b1580156109ce57600080fd5b505afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a069190611ad9565b1015610a3757610a3783837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610e57565b505050565b600082610a4b57506000610811565b82820282848281610a5857fe5b04146109595761095961015d60018686610f03565b6060604051610a7b90611d4b565b60405180910390208383604051602401610791929190612079565b600082821115610aaf57610aaf61015d60028585610f03565b50900390565b6000818310610ac45781610959565b5090919050565b610ad36115a7565b6000610ae3866101a00151610f22565b60e0870151909150849015610be6578873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b795760e0870151610b749073ffffffffffffffffffffffffffffffffffffffff8416907f00000000000000000000000000000000000000000000000000000000000000009063ffffffff61096016565b610be6565b8773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610bda5760a087015160e0880151610bd39190610bcd90829063ffffffff610d7c16565b87610faf565b9050610be6565b610be661015d83610ff9565b610bf4818860a00151610ab5565b9050610c32878783878d8d73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146110a4565b9998505050505050505050565b610c476115a7565b6000610c57866101a00151610f22565b90506000610c6e8588608001518960a00151610faf565b90508660e00151600014610d6e578873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d2f57610cd985610ccf8960e001518a60800151610a9690919063ffffffff16565b8960a00151610faf565b9050610d2a7f00000000000000000000000000000000000000000000000000000000000000008860e001518473ffffffffffffffffffffffffffffffffffffffff166109609092919063ffffffff16565b610d6e565b8773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610d6e57610d6e61015d83610ff9565b610bf48760a0015182610ab5565b6000828201838110156109595761095961015d60008686610f03565b6060604051610da690611cad565b6040518091039020848484604051602401610dc393929190611e57565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b6060604051610da690611b71565b606063095ea7b360e01b8383604051602401610e74929190611e31565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050610efd8482611330565b50505050565b606063e946c1bb60e01b848484604051602401610dc393929190611ec5565b6000815160001415610f365750600061085b565b81516024141580610f9357507ff47261b000000000000000000000000000000000000000000000000000000000610f6e8360006113ca565b7fffffffff000000000000000000000000000000000000000000000000000000001614155b15610fa457610fa461015d83611416565b61081182601061143d565b6000610ff183610fe5610fc982600163ffffffff610a9616565b610fd9888763ffffffff610a3c16565b9063ffffffff610d7c16565b9063ffffffff61147d16565b949350505050565b606060405161100790611c5e565b6040518091039020826040516024016110209190611de9565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050919050565b6110ac6115a7565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190611101903090600401611de9565b60206040518083038186803b15801561111957600080fd5b505afa15801561112d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111519190611ad9565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639b44d556868a898b6040518563ffffffff1660e01b81526004016111b193929190611f18565b60a0604051808303818588803b1580156111ca57600080fd5b505af193505050508015611219575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261121691810190611997565b60015b611253573d808015611247576040519150601f19603f3d011682016040523d82523d6000602084013e61124c565b606091505b5050611325565b6112ec828673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112909190611de9565b60206040518083038186803b1580156112a857600080fd5b505afa1580156112bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e09190611ad9565b9063ffffffff610a9616565b602080850191909152608082015160408501528101518352831561132357606081015183516113209163ffffffff610d7c16565b83525b505b509695505050505050565b600060608373ffffffffffffffffffffffffffffffffffffffff16836040516113599190611b55565b6000604051808303816000865af19150503d8060008114611396576040519150601f19603f3d011682016040523d82523d6000602084013e61139b565b606091505b50915091508180156113b157506113b1816114a7565b156113bd5750506113c6565b610efd81610817565b5050565b600081600401835110156113eb576113eb61015d60038551856004016114ed565b5001602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b606060405161142490611d9a565b6040518091039020826040516024016110209190611eb2565b6000816014018351101561145e5761145e61015d60048551856014016114ed565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b6000816114935761149361015d60038585610f03565b600082848161149e57fe5b04949350505050565b60008151600014156114bb5750600161085b565b81516020141561085b5760006114d283600061150c565b905080600114156114e757600191505061085b565b50919050565b6060632800659560e01b848484604051602401610dc393929190611ee7565b60006109598383600081602001835110156115345761153461015d60058551856020016114ed565b50016020015190565b6040805160e081019091528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b8035610811816120fa565b600082601f8301126115e3578081fd5b81356115f66115f1826120ae565b612087565b818152915060208083019084810160005b848110156116305761161e888484358a010161185f565b84529282019290820190600101611607565b505050505092915050565b600082601f83011261164b578081fd5b81356116596115f1826120ae565b818152915060208083019084810160005b8481101561163057813587016101c0807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838c030112156116aa57600080fd5b6116b381612087565b6116bf8b8785016115c8565b815260406116cf8c8286016115c8565b8783015260606116e18d8287016115c8565b82840152608091506116f58d8387016115c8565b818401525060a0808501358284015260c0915081850135818401525060e080850135828401526101009150818501358184015250610120808501358284015261014091508185013581840152506101608085013567ffffffffffffffff8082111561175f57600080fd5b61176d8f8b848a010161185f565b8486015261018093508387013591508082111561178957600080fd5b6117978f8b848a010161185f565b838601526101a09250828701359150808211156117b357600080fd5b6117c18f8b848a010161185f565b84860152858701359350808411156117d857600080fd5b50506117e88d898488010161185f565b908301525086525050928201929082019060010161166a565b600082601f830112611811578081fd5b813561181f6115f1826120ae565b81815291506020808301908481018184028601820187101561184057600080fd5b60005b8481101561163057813584529282019290820190600101611843565b600082601f83011261186f578081fd5b813567ffffffffffffffff811115611885578182fd5b6118b660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612087565b91508082528360208285010111156118cd57600080fd5b8060208401602084013760009082016020015292915050565b80356002811061081157600080fd5b600060208284031215611906578081fd5b8135610959816120fa565b60008060008060608587031215611926578283fd5b843593506020850135611938816120fa565b9250604085013567ffffffffffffffff80821115611954578384fd5b81870188601f820112611965578485fd5b8035925081831115611975578485fd5b886020848301011115611986578485fd5b959894975050602090940194505050565b600060a082840312156119a8578081fd5b6119b260a0612087565b82518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b6000602082840312156119f9578081fd5b813567ffffffffffffffff80821115611a10578283fd5b81840160e08187031215611a22578384fd5b611a2c60e0612087565b9250611a3886826118e6565b8352611a4786602083016115c8565b6020840152611a5986604083016115c8565b6040840152606081013582811115611a6f578485fd5b611a7b8782840161163b565b606085015250608081013582811115611a92578485fd5b611a9e878284016115d3565b60808501525060a081013582811115611ab5578485fd5b611ac187828401611801565b60a08501525060c09081013590830152509392505050565b600060208284031215611aea578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff169052565b60008151808452611b238160208601602086016120ce565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251611b678184602087016120ce565b9190910192915050565b7f496e636f6d706c65746546696c6c42757951756f74654572726f72286164647281527f6573732c75696e743235362c75696e7432353629000000000000000000000000602082015260340190565b7f496e76616c69645472616e73666f726d446174614572726f722875696e74382c81527f6279746573290000000000000000000000000000000000000000000000000000602082015260260190565b7f4f6e6c7943616c6c61626c6542794465706c6f7965724572726f72286164647281527f6573732c616464726573732900000000000000000000000000000000000000006020820152602c0190565b7f496e76616c696454616b6572466565546f6b656e4572726f722861646472657381527f7329000000000000000000000000000000000000000000000000000000000000602082015260220190565b7f496e636f6d706c65746546696c6c53656c6c51756f74654572726f722861646481527f726573732c75696e743235362c75696e74323536290000000000000000000000602082015260350190565b7f496e76616c6964457865637574696f6e436f6e746578744572726f722861646481527f726573732c6164647265737329000000000000000000000000000000000000006020820152602d0190565b7f496e73756666696369656e7450726f746f636f6c4665654572726f722875696e81527f743235362c75696e7432353629000000000000000000000000000000000000006020820152602d0190565b7f496e76616c696445524332304173736574446174614572726f7228627974657381527f2900000000000000000000000000000000000000000000000000000000000000602082015260210190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b6000602082526109596020830184611b0b565b6060810160048510611ed357fe5b938152602081019290925260409091015290565b6060810160088510611ed357fe5b600060028410611f0157fe5b83825260406020830152610ff16040830184611b0b565b600060608252611f2c606083018651611af1565b6020850151611f3e6080840182611af1565b506040850151611f5160a0840182611af1565b506060850151611f6460c0840182611af1565b50608085015160e083015260a0850151610100818185015260c08701519150610120828186015260e0880151925061014083818701528289015193506101609250838387015281890151935061018091508382870152808901519350506101c06101a08181880152611fda610220880186611b0b565b848b015195507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa094508488820301838901526120168187611b0b565b925050828a0151945083878303016101e08801526120348286611b0b565b9250808a01519450505081858203016102008601526120538184611b0b565b915050856020850152838103604085015261206e8186611b0b565b979650505050505050565b918252602082015260400190565b60405181810167ffffffffffffffff811182821017156120a657600080fd5b604052919050565b600067ffffffffffffffff8211156120c4578081fd5b5060209081020190565b60005b838110156120e95781810151838201526020016120d1565b83811115610efd5750506000910152565b73ffffffffffffffffffffffffffffffffffffffff8116811461211c57600080fd5b5056fea2646970667358221220fa070931d1d12d8aa408168992a9ec8f39000452643ec82f885ea824c5b7080c64736f6c634300060a0033",
                "opcodes": "PUSH2 0x100 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2306 CODESIZE SUB DUP1 PUSH3 0x2306 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0xF4 JUMP JUMPDEST CALLER PUSH1 0x60 SWAP1 DUP2 SHL PUSH1 0x80 MSTORE ADDRESS DUP2 SHL PUSH1 0xA0 MSTORE DUP2 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0xC0 MSTORE PUSH1 0x40 MLOAD PUSH4 0xC0E0821 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH3 0x89 SWAP1 PUSH4 0xF47261B PUSH1 0xE4 SHL SWAP1 PUSH1 0x4 ADD PUSH3 0x11A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xB7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xDD SWAP2 SWAP1 PUSH3 0xF4 JUMP JUMPDEST PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0xE0 MSTORE POP PUSH3 0x148 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x106 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x113 DUP2 PUSH3 0x12F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH1 0xE0 MLOAD PUSH1 0x60 SHR PUSH2 0x2155 PUSH3 0x1B1 PUSH1 0x0 CODECOPY DUP1 PUSH1 0xD1 MSTORE DUP1 PUSH2 0x3A9 MSTORE DUP1 PUSH2 0xB49 MSTORE DUP1 PUSH2 0xCE0 MSTORE POP DUP1 PUSH2 0x1E7 MSTORE DUP1 PUSH2 0x3FF MSTORE DUP1 PUSH2 0x1155 MSTORE POP DUP1 PUSH2 0x17A MSTORE DUP1 PUSH2 0x1A8 MSTORE POP DUP1 PUSH2 0x10B MSTORE DUP1 PUSH2 0x139 MSTORE DUP1 PUSH2 0x20B MSTORE POP PUSH2 0x2155 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD2F7265A GT PUSH2 0x50 JUMPI DUP1 PUSH4 0xD2F7265A EQ PUSH2 0x9F JUMPI DUP1 PUSH4 0xD5F39488 EQ PUSH2 0xA7 JUMPI DUP1 PUSH4 0xE063ED81 EQ PUSH2 0xAF JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x7F555B03 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0xC9353CB5 EQ PUSH2 0x8A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x74 PUSH2 0xCF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0x1DE9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9D PUSH2 0x98 CALLDATASIZE PUSH1 0x4 PUSH2 0x18F5 JUMP JUMPDEST PUSH2 0xF3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x74 PUSH2 0x1E5 JUMP JUMPDEST PUSH2 0x74 PUSH2 0x209 JUMP JUMPDEST PUSH2 0xC2 PUSH2 0xBD CALLDATASIZE PUSH1 0x4 PUSH2 0x1911 JUMP JUMPDEST PUSH2 0x22D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0x1E85 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x162 JUMPI PUSH2 0x162 PUSH2 0x15D CALLER PUSH32 0x0 PUSH2 0x768 JUMP JUMPDEST PUSH2 0x817 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x1CC JUMPI PUSH2 0x1CC PUSH2 0x15D ADDRESS PUSH32 0x0 PUSH2 0x81F JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFDESTRUCT JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x237 PUSH2 0x153D JUMP JUMPDEST PUSH2 0x243 DUP4 DUP6 ADD DUP6 PUSH2 0x19E8 JUMP JUMPDEST SWAP1 POP PUSH2 0x268 DUP2 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x82D JUMP JUMPDEST DUP1 PUSH2 0x291 JUMPI POP PUSH2 0x291 DUP2 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x82D JUMP JUMPDEST ISZERO PUSH2 0x2DA JUMPI PUSH2 0x2DA PUSH2 0x15D PUSH1 0x0 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x860 SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x80 ADD MLOAD MLOAD DUP2 PUSH1 0x60 ADD MLOAD MLOAD EQ PUSH2 0x32F JUMPI PUSH2 0x32F PUSH2 0x15D PUSH1 0x1 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x860 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x33E JUMPI INVALID JUMPDEST EQ DUP1 ISZERO PUSH2 0x36E JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 PUSH1 0xC0 ADD MLOAD EQ JUMPDEST ISZERO PUSH2 0x3A4 JUMPI PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x39E SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH4 0xFFFFFFFF PUSH2 0x889 AND JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE JUMPDEST PUSH2 0x3F7 PUSH32 0x0 DUP3 PUSH1 0xC0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x960 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A7 GASPRICE PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1CE4C78B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x463 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x477 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x49B SWAP2 SWAP1 PUSH2 0x1AD9 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xA3C AND JUMP JUMPDEST SWAP1 POP SELFBALANCE PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP6 PUSH1 0x60 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x6DA JUMPI PUSH1 0x0 DUP7 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x4CB JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4E6 JUMPI DUP6 PUSH1 0xC0 ADD MLOAD DUP3 LT PUSH2 0x4E1 JUMPI PUSH2 0x6DA JUMP JUMPDEST PUSH2 0x4F6 JUMP JUMPDEST DUP6 PUSH1 0xC0 ADD MLOAD DUP4 LT PUSH2 0x4F6 JUMPI PUSH2 0x6DA JUMP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x50B JUMPI PUSH2 0x50B PUSH2 0x15D DUP6 DUP8 PUSH2 0xA6D JUMP JUMPDEST PUSH2 0x513 PUSH2 0x15A7 JUMP JUMPDEST PUSH1 0x0 DUP8 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x522 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x5E1 JUMPI PUSH2 0x5DA DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x545 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x80 ADD MLOAD DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x55D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x5D4 DUP8 DUP14 PUSH1 0xA0 ADD MLOAD MLOAD GT PUSH2 0x59A JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x5B3 JUMP JUMPDEST DUP13 PUSH1 0xA0 ADD MLOAD DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x5AA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST PUSH1 0xC0 DUP15 ADD MLOAD PUSH2 0x5C8 SWAP1 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xA96 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xAB5 AND JUMP JUMPDEST DUP12 PUSH2 0xACB JUMP JUMPDEST SWAP1 POP PUSH2 0x68A JUMP JUMPDEST PUSH2 0x687 DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x80 ADD MLOAD DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x616 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x681 DUP8 DUP14 PUSH1 0xA0 ADD MLOAD MLOAD GT PUSH2 0x653 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x66C JUMP JUMPDEST DUP13 PUSH1 0xA0 ADD MLOAD DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x663 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST PUSH1 0xC0 DUP15 ADD MLOAD PUSH2 0x5C8 SWAP1 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xA96 AND JUMP JUMPDEST DUP12 PUSH2 0xC3F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 MLOAD PUSH2 0x69D SWAP1 DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xD7C AND JUMP JUMPDEST SWAP3 POP PUSH2 0x6B6 DUP2 PUSH1 0x20 ADD MLOAD DUP6 PUSH2 0xD7C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP4 POP PUSH2 0x6CF DUP2 PUSH1 0x40 ADD MLOAD DUP7 PUSH2 0xA96 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP5 POP POP PUSH1 0x1 ADD PUSH2 0x4AF JUMP JUMPDEST POP PUSH1 0x0 DUP6 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x6EA JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x717 JUMPI DUP5 PUSH1 0xC0 ADD MLOAD DUP2 LT ISZERO PUSH2 0x712 JUMPI PUSH2 0x712 PUSH2 0x15D DUP7 PUSH1 0x20 ADD MLOAD DUP4 DUP9 PUSH1 0xC0 ADD MLOAD PUSH2 0xD98 JUMP JUMPDEST PUSH2 0x739 JUMP JUMPDEST DUP5 PUSH1 0xC0 ADD MLOAD DUP3 LT ISZERO PUSH2 0x739 JUMPI PUSH2 0x739 PUSH2 0x15D DUP7 PUSH1 0x40 ADD MLOAD DUP5 DUP9 PUSH1 0xC0 ADD MLOAD PUSH2 0xE49 JUMP JUMPDEST POP PUSH32 0x13C9929E00000000000000000000000000000000000000000000000000000000 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x776 SWAP1 PUSH2 0x1C0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x791 SWAP3 SWAP2 SWAP1 PUSH2 0x1E0A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x776 SWAP1 PUSH2 0x1CFC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x86E SWAP1 PUSH2 0x1BC0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x791 SWAP3 SWAP2 SWAP1 PUSH2 0x1EF5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x894 DUP4 PUSH2 0x82D JUMP JUMPDEST ISZERO PUSH2 0x8B7 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND BALANCE PUSH2 0x811 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x909 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1DE9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x921 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x935 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x959 SWAP2 SWAP1 PUSH2 0x1AD9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x9B6 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1E0A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9E2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA06 SWAP2 SWAP1 PUSH2 0x1AD9 JUMP JUMPDEST LT ISZERO PUSH2 0xA37 JUMPI PUSH2 0xA37 DUP4 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0xE57 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xA4B JUMPI POP PUSH1 0x0 PUSH2 0x811 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xA58 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x959 JUMPI PUSH2 0x959 PUSH2 0x15D PUSH1 0x1 DUP7 DUP7 PUSH2 0xF03 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0xA7B SWAP1 PUSH2 0x1D4B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x791 SWAP3 SWAP2 SWAP1 PUSH2 0x2079 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xAAF JUMPI PUSH2 0xAAF PUSH2 0x15D PUSH1 0x2 DUP6 DUP6 PUSH2 0xF03 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xAC4 JUMPI DUP2 PUSH2 0x959 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAD3 PUSH2 0x15A7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAE3 DUP7 PUSH2 0x1A0 ADD MLOAD PUSH2 0xF22 JUMP JUMPDEST PUSH1 0xE0 DUP8 ADD MLOAD SWAP1 SWAP2 POP DUP5 SWAP1 ISZERO PUSH2 0xBE6 JUMPI DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xB79 JUMPI PUSH1 0xE0 DUP8 ADD MLOAD PUSH2 0xB74 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH32 0x0 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x960 AND JUMP JUMPDEST PUSH2 0xBE6 JUMP JUMPDEST DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xBDA JUMPI PUSH1 0xA0 DUP8 ADD MLOAD PUSH1 0xE0 DUP9 ADD MLOAD PUSH2 0xBD3 SWAP2 SWAP1 PUSH2 0xBCD SWAP1 DUP3 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xD7C AND JUMP JUMPDEST DUP8 PUSH2 0xFAF JUMP JUMPDEST SWAP1 POP PUSH2 0xBE6 JUMP JUMPDEST PUSH2 0xBE6 PUSH2 0x15D DUP4 PUSH2 0xFF9 JUMP JUMPDEST PUSH2 0xBF4 DUP2 DUP9 PUSH1 0xA0 ADD MLOAD PUSH2 0xAB5 JUMP JUMPDEST SWAP1 POP PUSH2 0xC32 DUP8 DUP8 DUP4 DUP8 DUP14 DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x10A4 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC47 PUSH2 0x15A7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC57 DUP7 PUSH2 0x1A0 ADD MLOAD PUSH2 0xF22 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC6E DUP6 DUP9 PUSH1 0x80 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD PUSH2 0xFAF JUMP JUMPDEST SWAP1 POP DUP7 PUSH1 0xE0 ADD MLOAD PUSH1 0x0 EQ PUSH2 0xD6E JUMPI DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD2F JUMPI PUSH2 0xCD9 DUP6 PUSH2 0xCCF DUP10 PUSH1 0xE0 ADD MLOAD DUP11 PUSH1 0x80 ADD MLOAD PUSH2 0xA96 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP10 PUSH1 0xA0 ADD MLOAD PUSH2 0xFAF JUMP JUMPDEST SWAP1 POP PUSH2 0xD2A PUSH32 0x0 DUP9 PUSH1 0xE0 ADD MLOAD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x960 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xD6E JUMP JUMPDEST DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD6E JUMPI PUSH2 0xD6E PUSH2 0x15D DUP4 PUSH2 0xFF9 JUMP JUMPDEST PUSH2 0xBF4 DUP8 PUSH1 0xA0 ADD MLOAD DUP3 PUSH2 0xAB5 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x959 JUMPI PUSH2 0x959 PUSH2 0x15D PUSH1 0x0 DUP7 DUP7 PUSH2 0xF03 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0xDA6 SWAP1 PUSH2 0x1CAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xDC3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E57 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0xDA6 SWAP1 PUSH2 0x1B71 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xE74 SWAP3 SWAP2 SWAP1 PUSH2 0x1E31 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0xEFD DUP5 DUP3 PUSH2 0x1330 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xDC3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1EC5 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xF36 JUMPI POP PUSH1 0x0 PUSH2 0x85B JUMP JUMPDEST DUP2 MLOAD PUSH1 0x24 EQ ISZERO DUP1 PUSH2 0xF93 JUMPI POP PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 PUSH2 0xF6E DUP4 PUSH1 0x0 PUSH2 0x13CA JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xFA4 JUMPI PUSH2 0xFA4 PUSH2 0x15D DUP4 PUSH2 0x1416 JUMP JUMPDEST PUSH2 0x811 DUP3 PUSH1 0x10 PUSH2 0x143D JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF1 DUP4 PUSH2 0xFE5 PUSH2 0xFC9 DUP3 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0xA96 AND JUMP JUMPDEST PUSH2 0xFD9 DUP9 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xA3C AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xD7C AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x147D AND JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x1007 SWAP1 PUSH2 0x1C5E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1020 SWAP2 SWAP1 PUSH2 0x1DE9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10AC PUSH2 0x15A7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x1101 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1DE9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x112D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1151 SWAP2 SWAP1 PUSH2 0x1AD9 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9B44D556 DUP7 DUP11 DUP10 DUP12 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11B1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F18 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1219 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1216 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1997 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1253 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1247 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x124C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1325 JUMP JUMPDEST PUSH2 0x12EC DUP3 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1290 SWAP2 SWAP1 PUSH2 0x1DE9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12E0 SWAP2 SWAP1 PUSH2 0x1AD9 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xA96 AND JUMP JUMPDEST PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x40 DUP6 ADD MSTORE DUP2 ADD MLOAD DUP4 MSTORE DUP4 ISZERO PUSH2 0x1323 JUMPI PUSH1 0x60 DUP2 ADD MLOAD DUP4 MLOAD PUSH2 0x1320 SWAP2 PUSH4 0xFFFFFFFF PUSH2 0xD7C AND JUMP JUMPDEST DUP4 MSTORE JUMPDEST POP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1359 SWAP2 SWAP1 PUSH2 0x1B55 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1396 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x139B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x13B1 JUMPI POP PUSH2 0x13B1 DUP2 PUSH2 0x14A7 JUMP JUMPDEST ISZERO PUSH2 0x13BD JUMPI POP POP PUSH2 0x13C6 JUMP JUMPDEST PUSH2 0xEFD DUP2 PUSH2 0x817 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0x13EB JUMPI PUSH2 0x13EB PUSH2 0x15D PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0x14ED JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x1424 SWAP1 PUSH2 0x1D9A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1020 SWAP2 SWAP1 PUSH2 0x1EB2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x145E JUMPI PUSH2 0x145E PUSH2 0x15D PUSH1 0x4 DUP6 MLOAD DUP6 PUSH1 0x14 ADD PUSH2 0x14ED JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1493 JUMPI PUSH2 0x1493 PUSH2 0x15D PUSH1 0x3 DUP6 DUP6 PUSH2 0xF03 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x149E JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x14BB JUMPI POP PUSH1 0x1 PUSH2 0x85B JUMP JUMPDEST DUP2 MLOAD PUSH1 0x20 EQ ISZERO PUSH2 0x85B JUMPI PUSH1 0x0 PUSH2 0x14D2 DUP4 PUSH1 0x0 PUSH2 0x150C JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x14E7 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x85B JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xDC3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1EE7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x959 DUP4 DUP4 PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1534 JUMPI PUSH2 0x1534 PUSH2 0x15D PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x14ED JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x811 DUP2 PUSH2 0x20FA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x15E3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x15F6 PUSH2 0x15F1 DUP3 PUSH2 0x20AE JUMP JUMPDEST PUSH2 0x2087 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1630 JUMPI PUSH2 0x161E DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x185F JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1607 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x164B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1659 PUSH2 0x15F1 DUP3 PUSH2 0x20AE JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1630 JUMPI DUP2 CALLDATALOAD DUP8 ADD PUSH2 0x1C0 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP13 SUB ADD SLT ISZERO PUSH2 0x16AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16B3 DUP2 PUSH2 0x2087 JUMP JUMPDEST PUSH2 0x16BF DUP12 DUP8 DUP6 ADD PUSH2 0x15C8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 PUSH2 0x16CF DUP13 DUP3 DUP7 ADD PUSH2 0x15C8 JUMP JUMPDEST DUP8 DUP4 ADD MSTORE PUSH1 0x60 PUSH2 0x16E1 DUP14 DUP3 DUP8 ADD PUSH2 0x15C8 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH1 0x80 SWAP2 POP PUSH2 0x16F5 DUP14 DUP4 DUP8 ADD PUSH2 0x15C8 JUMP JUMPDEST DUP2 DUP5 ADD MSTORE POP PUSH1 0xA0 DUP1 DUP6 ADD CALLDATALOAD DUP3 DUP5 ADD MSTORE PUSH1 0xC0 SWAP2 POP DUP2 DUP6 ADD CALLDATALOAD DUP2 DUP5 ADD MSTORE POP PUSH1 0xE0 DUP1 DUP6 ADD CALLDATALOAD DUP3 DUP5 ADD MSTORE PUSH2 0x100 SWAP2 POP DUP2 DUP6 ADD CALLDATALOAD DUP2 DUP5 ADD MSTORE POP PUSH2 0x120 DUP1 DUP6 ADD CALLDATALOAD DUP3 DUP5 ADD MSTORE PUSH2 0x140 SWAP2 POP DUP2 DUP6 ADD CALLDATALOAD DUP2 DUP5 ADD MSTORE POP PUSH2 0x160 DUP1 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x175F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x176D DUP16 DUP12 DUP5 DUP11 ADD ADD PUSH2 0x185F JUMP JUMPDEST DUP5 DUP7 ADD MSTORE PUSH2 0x180 SWAP4 POP DUP4 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1789 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1797 DUP16 DUP12 DUP5 DUP11 ADD ADD PUSH2 0x185F JUMP JUMPDEST DUP4 DUP7 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x17B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17C1 DUP16 DUP12 DUP5 DUP11 ADD ADD PUSH2 0x185F JUMP JUMPDEST DUP5 DUP7 ADD MSTORE DUP6 DUP8 ADD CALLDATALOAD SWAP4 POP DUP1 DUP5 GT ISZERO PUSH2 0x17D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH2 0x17E8 DUP14 DUP10 DUP5 DUP9 ADD ADD PUSH2 0x185F JUMP JUMPDEST SWAP1 DUP4 ADD MSTORE POP DUP7 MSTORE POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x166A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1811 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x181F PUSH2 0x15F1 DUP3 PUSH2 0x20AE JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1840 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1630 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1843 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x186F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1885 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x18B6 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x2087 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x18CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x2 DUP2 LT PUSH2 0x811 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1906 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x959 DUP2 PUSH2 0x20FA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1926 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1938 DUP2 PUSH2 0x20FA JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1954 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD DUP9 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x1965 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x1975 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP5 DUP4 ADD ADD GT ISZERO PUSH2 0x1986 JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 SWAP1 SWAP5 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19A8 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x19B2 PUSH1 0xA0 PUSH2 0x2087 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP3 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19F9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1A10 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD PUSH1 0xE0 DUP2 DUP8 SUB SLT ISZERO PUSH2 0x1A22 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1A2C PUSH1 0xE0 PUSH2 0x2087 JUMP JUMPDEST SWAP3 POP PUSH2 0x1A38 DUP7 DUP3 PUSH2 0x18E6 JUMP JUMPDEST DUP4 MSTORE PUSH2 0x1A47 DUP7 PUSH1 0x20 DUP4 ADD PUSH2 0x15C8 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1A59 DUP7 PUSH1 0x40 DUP4 ADD PUSH2 0x15C8 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1A6F JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1A7B DUP8 DUP3 DUP5 ADD PUSH2 0x163B JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE POP PUSH1 0x80 DUP2 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1A92 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1A9E DUP8 DUP3 DUP5 ADD PUSH2 0x15D3 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MSTORE POP PUSH1 0xA0 DUP2 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1AB5 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1AC1 DUP8 DUP3 DUP5 ADD PUSH2 0x1801 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD MSTORE POP PUSH1 0xC0 SWAP1 DUP2 ADD CALLDATALOAD SWAP1 DUP4 ADD MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AEA JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1B23 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x20CE JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1B67 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x20CE JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E636F6D706C65746546696C6C42757951756F74654572726F722861646472 DUP2 MSTORE PUSH32 0x6573732C75696E743235362C75696E7432353629000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 ADD SWAP1 JUMP JUMPDEST PUSH32 0x496E76616C69645472616E73666F726D446174614572726F722875696E74382C DUP2 MSTORE PUSH32 0x6279746573290000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x26 ADD SWAP1 JUMP JUMPDEST PUSH32 0x4F6E6C7943616C6C61626C6542794465706C6F7965724572726F722861646472 DUP2 MSTORE PUSH32 0x6573732C61646472657373290000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2C ADD SWAP1 JUMP JUMPDEST PUSH32 0x496E76616C696454616B6572466565546F6B656E4572726F7228616464726573 DUP2 MSTORE PUSH32 0x7329000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 ADD SWAP1 JUMP JUMPDEST PUSH32 0x496E636F6D706C65746546696C6C53656C6C51756F74654572726F7228616464 DUP2 MSTORE PUSH32 0x726573732C75696E743235362C75696E74323536290000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x35 ADD SWAP1 JUMP JUMPDEST PUSH32 0x496E76616C6964457865637574696F6E436F6E746578744572726F7228616464 DUP2 MSTORE PUSH32 0x726573732C616464726573732900000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2D ADD SWAP1 JUMP JUMPDEST PUSH32 0x496E73756666696369656E7450726F746F636F6C4665654572726F722875696E DUP2 MSTORE PUSH32 0x743235362C75696E743235362900000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2D ADD SWAP1 JUMP JUMPDEST PUSH32 0x496E76616C696445524332304173736574446174614572726F72286279746573 DUP2 MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x21 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x959 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1B0B JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x1ED3 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x1ED3 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP5 LT PUSH2 0x1F01 JUMPI INVALID JUMPDEST DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xFF1 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1B0B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x1F2C PUSH1 0x60 DUP4 ADD DUP7 MLOAD PUSH2 0x1AF1 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x1F3E PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x1AF1 JUMP JUMPDEST POP PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x1F51 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x1AF1 JUMP JUMPDEST POP PUSH1 0x60 DUP6 ADD MLOAD PUSH2 0x1F64 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x1AF1 JUMP JUMPDEST POP PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH1 0xA0 DUP6 ADD MLOAD PUSH2 0x100 DUP2 DUP2 DUP6 ADD MSTORE PUSH1 0xC0 DUP8 ADD MLOAD SWAP2 POP PUSH2 0x120 DUP3 DUP2 DUP7 ADD MSTORE PUSH1 0xE0 DUP9 ADD MLOAD SWAP3 POP PUSH2 0x140 DUP4 DUP2 DUP8 ADD MSTORE DUP3 DUP10 ADD MLOAD SWAP4 POP PUSH2 0x160 SWAP3 POP DUP4 DUP4 DUP8 ADD MSTORE DUP2 DUP10 ADD MLOAD SWAP4 POP PUSH2 0x180 SWAP2 POP DUP4 DUP3 DUP8 ADD MSTORE DUP1 DUP10 ADD MLOAD SWAP4 POP POP PUSH2 0x1C0 PUSH2 0x1A0 DUP2 DUP2 DUP9 ADD MSTORE PUSH2 0x1FDA PUSH2 0x220 DUP9 ADD DUP7 PUSH2 0x1B0B JUMP JUMPDEST DUP5 DUP12 ADD MLOAD SWAP6 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0 SWAP5 POP DUP5 DUP9 DUP3 SUB ADD DUP4 DUP10 ADD MSTORE PUSH2 0x2016 DUP2 DUP8 PUSH2 0x1B0B JUMP JUMPDEST SWAP3 POP POP DUP3 DUP11 ADD MLOAD SWAP5 POP DUP4 DUP8 DUP4 SUB ADD PUSH2 0x1E0 DUP9 ADD MSTORE PUSH2 0x2034 DUP3 DUP7 PUSH2 0x1B0B JUMP JUMPDEST SWAP3 POP DUP1 DUP11 ADD MLOAD SWAP5 POP POP POP DUP2 DUP6 DUP3 SUB ADD PUSH2 0x200 DUP7 ADD MSTORE PUSH2 0x2053 DUP2 DUP5 PUSH2 0x1B0B JUMP JUMPDEST SWAP2 POP POP DUP6 PUSH1 0x20 DUP6 ADD MSTORE DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x206E DUP2 DUP7 PUSH2 0x1B0B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x20A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x20C4 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20E9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x20D1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xEFD JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x211C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL SMOD MULMOD BALANCE 0xD1 0xD1 0x2D DUP11 LOG4 ADDMOD AND DUP10 SWAP3 0xA9 0xEC DUP16 CODECOPY STOP DIV MSTORE PUSH5 0x3EC82F885E 0xA8 0x24 0xC5 0xB7 ADDMOD 0xC PUSH5 0x736F6C6343 STOP MOD EXP STOP CALLER ",
                "sourceMap": "1266:15789:36:-:0;;;3581:179;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1208:10:40;1197:21;;;;;;1254:4;1228:31;;;;3665:20:36;;;-1:-1:-1;;;;;;3665:20:36;::::1;::::0;3708:45:::1;::::0;-1:-1:-1;;;3708:45:36;;-1:-1:-1;;;;;3665:20:36;::::1;::::0;3708:23:::1;::::0;:45:::1;::::0;-1:-1:-1;;;3732:20:36;3708:45:::1;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3695:58;::::0;-1:-1:-1;;;;;;3695:58:36;::::1;::::0;-1:-1:-1;1266:15789:36;;323:263:-1;;438:2;426:9;417:7;413:23;409:32;406:2;;;-1:-1;;444:12;406:2;89:6;83:13;101:33;128:5;101:33;;;496:74;400:186;-1:-1;;;400:186;1016:218;-1:-1;;;;;;1400:78;;;;968:36;;1141:2;1126:18;;1112:122;1734:117;-1:-1;;;;;1668:54;;1793:35;;1783:2;;1842:1;;1832:12;1783:2;1777:74;;;1266:15789:36;;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "4013": [
                        {
                            "length": 32,
                            "start": 487
                        },
                        {
                            "length": 32,
                            "start": 1023
                        },
                        {
                            "length": 32,
                            "start": 4437
                        }
                    ],
                    "4016": [
                        {
                            "length": 32,
                            "start": 209
                        },
                        {
                            "length": 32,
                            "start": 937
                        },
                        {
                            "length": 32,
                            "start": 2889
                        },
                        {
                            "length": 32,
                            "start": 3296
                        }
                    ],
                    "5304": [
                        {
                            "length": 32,
                            "start": 267
                        },
                        {
                            "length": 32,
                            "start": 313
                        },
                        {
                            "length": 32,
                            "start": 523
                        }
                    ],
                    "5307": [
                        {
                            "length": 32,
                            "start": 378
                        },
                        {
                            "length": 32,
                            "start": 424
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063d2f7265a11610050578063d2f7265a1461009f578063d5f39488146100a7578063e063ed81146100af57610067565b80637f555b031461006c578063c9353cb51461008a575b600080fd5b6100746100cf565b6040516100819190611de9565b60405180910390f35b61009d6100983660046118f5565b6100f3565b005b6100746101e5565b610074610209565b6100c26100bd366004611911565b61022d565b6040516100819190611e85565b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101625761016261015d337f0000000000000000000000000000000000000000000000000000000000000000610768565b610817565b3073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101cc576101cc61015d307f000000000000000000000000000000000000000000000000000000000000000061081f565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061023761153d565b610243838501856119e8565b9050610268816020015173ffffffffffffffffffffffffffffffffffffffff1661082d565b806102915750610291816040015173ffffffffffffffffffffffffffffffffffffffff1661082d565b156102da576102da61015d600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061086092505050565b8060800151518160600151511461032f5761032f61015d600186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061086092505050565b60008151600181111561033e57fe5b14801561036e57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160c00151145b156103a457602081015161039e9073ffffffffffffffffffffffffffffffffffffffff163063ffffffff61088916565b60c08201525b6103f77f00000000000000000000000000000000000000000000000000000000000000008260c00151836020015173ffffffffffffffffffffffffffffffffffffffff166109609092919063ffffffff16565b60006104a73a7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631ce4c78b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561046357600080fd5b505afa158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b9190611ad9565b9063ffffffff610a3c16565b905047600080805b8560600151518110156106da576000865160018111156104cb57fe5b14156104e6578560c0015182106104e1576106da565b6104f6565b8560c0015183106104f6576106da565b8484101561050b5761050b61015d8587610a6d565b6105136115a7565b60008751600181111561052257fe5b14156105e1576105da876040015188602001518960600151858151811061054557fe5b60200260200101518a60800151868151811061055d57fe5b60200260200101516105d4878d60a00151511161059a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6105b3565b8c60a0015188815181106105aa57fe5b60200260200101515b60c08e01516105c8908b63ffffffff610a9616565b9063ffffffff610ab516565b8b610acb565b905061068a565b61068787604001518860200151896060015185815181106105fe57fe5b60200260200101518a60800151868151811061061657fe5b6020026020010151610681878d60a001515111610653577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61066c565b8c60a00151888151811061066357fe5b60200260200101515b60c08e01516105c8908c63ffffffff610a9616565b8b610c3f565b90505b805161069d90849063ffffffff610d7c16565b92506106b6816020015185610d7c90919063ffffffff16565b93506106cf816040015186610a9690919063ffffffff16565b9450506001016104af565b506000855160018111156106ea57fe5b1415610717578460c001518110156107125761071261015d8660200151838860c00151610d98565b610739565b8460c001518210156107395761073961015d8660400151848860c00151610e49565b507f13c9929e000000000000000000000000000000000000000000000000000000009998505050505050505050565b606060405161077690611c0f565b60405180910390208383604051602401610791929190611e0a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290505b92915050565b805160208201fd5b606060405161077690611cfc565b73ffffffffffffffffffffffffffffffffffffffff811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b919050565b606060405161086e90611bc0565b60405180910390208383604051602401610791929190611ef5565b60006108948361082d565b156108b7575073ffffffffffffffffffffffffffffffffffffffff811631610811565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190610909908590600401611de9565b60206040518083038186803b15801561092157600080fd5b505afa158015610935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109599190611ad9565b9392505050565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152819073ffffffffffffffffffffffffffffffffffffffff85169063dd62ed3e906109b69030908790600401611e0a565b60206040518083038186803b1580156109ce57600080fd5b505afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a069190611ad9565b1015610a3757610a3783837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610e57565b505050565b600082610a4b57506000610811565b82820282848281610a5857fe5b04146109595761095961015d60018686610f03565b6060604051610a7b90611d4b565b60405180910390208383604051602401610791929190612079565b600082821115610aaf57610aaf61015d60028585610f03565b50900390565b6000818310610ac45781610959565b5090919050565b610ad36115a7565b6000610ae3866101a00151610f22565b60e0870151909150849015610be6578873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b795760e0870151610b749073ffffffffffffffffffffffffffffffffffffffff8416907f00000000000000000000000000000000000000000000000000000000000000009063ffffffff61096016565b610be6565b8773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610bda5760a087015160e0880151610bd39190610bcd90829063ffffffff610d7c16565b87610faf565b9050610be6565b610be661015d83610ff9565b610bf4818860a00151610ab5565b9050610c32878783878d8d73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146110a4565b9998505050505050505050565b610c476115a7565b6000610c57866101a00151610f22565b90506000610c6e8588608001518960a00151610faf565b90508660e00151600014610d6e578873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d2f57610cd985610ccf8960e001518a60800151610a9690919063ffffffff16565b8960a00151610faf565b9050610d2a7f00000000000000000000000000000000000000000000000000000000000000008860e001518473ffffffffffffffffffffffffffffffffffffffff166109609092919063ffffffff16565b610d6e565b8773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610d6e57610d6e61015d83610ff9565b610bf48760a0015182610ab5565b6000828201838110156109595761095961015d60008686610f03565b6060604051610da690611cad565b6040518091039020848484604051602401610dc393929190611e57565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b6060604051610da690611b71565b606063095ea7b360e01b8383604051602401610e74929190611e31565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050610efd8482611330565b50505050565b606063e946c1bb60e01b848484604051602401610dc393929190611ec5565b6000815160001415610f365750600061085b565b81516024141580610f9357507ff47261b000000000000000000000000000000000000000000000000000000000610f6e8360006113ca565b7fffffffff000000000000000000000000000000000000000000000000000000001614155b15610fa457610fa461015d83611416565b61081182601061143d565b6000610ff183610fe5610fc982600163ffffffff610a9616565b610fd9888763ffffffff610a3c16565b9063ffffffff610d7c16565b9063ffffffff61147d16565b949350505050565b606060405161100790611c5e565b6040518091039020826040516024016110209190611de9565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050919050565b6110ac6115a7565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190611101903090600401611de9565b60206040518083038186803b15801561111957600080fd5b505afa15801561112d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111519190611ad9565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639b44d556868a898b6040518563ffffffff1660e01b81526004016111b193929190611f18565b60a0604051808303818588803b1580156111ca57600080fd5b505af193505050508015611219575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261121691810190611997565b60015b611253573d808015611247576040519150601f19603f3d011682016040523d82523d6000602084013e61124c565b606091505b5050611325565b6112ec828673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112909190611de9565b60206040518083038186803b1580156112a857600080fd5b505afa1580156112bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e09190611ad9565b9063ffffffff610a9616565b602080850191909152608082015160408501528101518352831561132357606081015183516113209163ffffffff610d7c16565b83525b505b509695505050505050565b600060608373ffffffffffffffffffffffffffffffffffffffff16836040516113599190611b55565b6000604051808303816000865af19150503d8060008114611396576040519150601f19603f3d011682016040523d82523d6000602084013e61139b565b606091505b50915091508180156113b157506113b1816114a7565b156113bd5750506113c6565b610efd81610817565b5050565b600081600401835110156113eb576113eb61015d60038551856004016114ed565b5001602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b606060405161142490611d9a565b6040518091039020826040516024016110209190611eb2565b6000816014018351101561145e5761145e61015d60048551856014016114ed565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b6000816114935761149361015d60038585610f03565b600082848161149e57fe5b04949350505050565b60008151600014156114bb5750600161085b565b81516020141561085b5760006114d283600061150c565b905080600114156114e757600191505061085b565b50919050565b6060632800659560e01b848484604051602401610dc393929190611ee7565b60006109598383600081602001835110156115345761153461015d60058551856020016114ed565b50016020015190565b6040805160e081019091528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b8035610811816120fa565b600082601f8301126115e3578081fd5b81356115f66115f1826120ae565b612087565b818152915060208083019084810160005b848110156116305761161e888484358a010161185f565b84529282019290820190600101611607565b505050505092915050565b600082601f83011261164b578081fd5b81356116596115f1826120ae565b818152915060208083019084810160005b8481101561163057813587016101c0807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838c030112156116aa57600080fd5b6116b381612087565b6116bf8b8785016115c8565b815260406116cf8c8286016115c8565b8783015260606116e18d8287016115c8565b82840152608091506116f58d8387016115c8565b818401525060a0808501358284015260c0915081850135818401525060e080850135828401526101009150818501358184015250610120808501358284015261014091508185013581840152506101608085013567ffffffffffffffff8082111561175f57600080fd5b61176d8f8b848a010161185f565b8486015261018093508387013591508082111561178957600080fd5b6117978f8b848a010161185f565b838601526101a09250828701359150808211156117b357600080fd5b6117c18f8b848a010161185f565b84860152858701359350808411156117d857600080fd5b50506117e88d898488010161185f565b908301525086525050928201929082019060010161166a565b600082601f830112611811578081fd5b813561181f6115f1826120ae565b81815291506020808301908481018184028601820187101561184057600080fd5b60005b8481101561163057813584529282019290820190600101611843565b600082601f83011261186f578081fd5b813567ffffffffffffffff811115611885578182fd5b6118b660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612087565b91508082528360208285010111156118cd57600080fd5b8060208401602084013760009082016020015292915050565b80356002811061081157600080fd5b600060208284031215611906578081fd5b8135610959816120fa565b60008060008060608587031215611926578283fd5b843593506020850135611938816120fa565b9250604085013567ffffffffffffffff80821115611954578384fd5b81870188601f820112611965578485fd5b8035925081831115611975578485fd5b886020848301011115611986578485fd5b959894975050602090940194505050565b600060a082840312156119a8578081fd5b6119b260a0612087565b82518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b6000602082840312156119f9578081fd5b813567ffffffffffffffff80821115611a10578283fd5b81840160e08187031215611a22578384fd5b611a2c60e0612087565b9250611a3886826118e6565b8352611a4786602083016115c8565b6020840152611a5986604083016115c8565b6040840152606081013582811115611a6f578485fd5b611a7b8782840161163b565b606085015250608081013582811115611a92578485fd5b611a9e878284016115d3565b60808501525060a081013582811115611ab5578485fd5b611ac187828401611801565b60a08501525060c09081013590830152509392505050565b600060208284031215611aea578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff169052565b60008151808452611b238160208601602086016120ce565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251611b678184602087016120ce565b9190910192915050565b7f496e636f6d706c65746546696c6c42757951756f74654572726f72286164647281527f6573732c75696e743235362c75696e7432353629000000000000000000000000602082015260340190565b7f496e76616c69645472616e73666f726d446174614572726f722875696e74382c81527f6279746573290000000000000000000000000000000000000000000000000000602082015260260190565b7f4f6e6c7943616c6c61626c6542794465706c6f7965724572726f72286164647281527f6573732c616464726573732900000000000000000000000000000000000000006020820152602c0190565b7f496e76616c696454616b6572466565546f6b656e4572726f722861646472657381527f7329000000000000000000000000000000000000000000000000000000000000602082015260220190565b7f496e636f6d706c65746546696c6c53656c6c51756f74654572726f722861646481527f726573732c75696e743235362c75696e74323536290000000000000000000000602082015260350190565b7f496e76616c6964457865637574696f6e436f6e746578744572726f722861646481527f726573732c6164647265737329000000000000000000000000000000000000006020820152602d0190565b7f496e73756666696369656e7450726f746f636f6c4665654572726f722875696e81527f743235362c75696e7432353629000000000000000000000000000000000000006020820152602d0190565b7f496e76616c696445524332304173736574446174614572726f7228627974657381527f2900000000000000000000000000000000000000000000000000000000000000602082015260210190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b6000602082526109596020830184611b0b565b6060810160048510611ed357fe5b938152602081019290925260409091015290565b6060810160088510611ed357fe5b600060028410611f0157fe5b83825260406020830152610ff16040830184611b0b565b600060608252611f2c606083018651611af1565b6020850151611f3e6080840182611af1565b506040850151611f5160a0840182611af1565b506060850151611f6460c0840182611af1565b50608085015160e083015260a0850151610100818185015260c08701519150610120828186015260e0880151925061014083818701528289015193506101609250838387015281890151935061018091508382870152808901519350506101c06101a08181880152611fda610220880186611b0b565b848b015195507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa094508488820301838901526120168187611b0b565b925050828a0151945083878303016101e08801526120348286611b0b565b9250808a01519450505081858203016102008601526120538184611b0b565b915050856020850152838103604085015261206e8186611b0b565b979650505050505050565b918252602082015260400190565b60405181810167ffffffffffffffff811182821017156120a657600080fd5b604052919050565b600067ffffffffffffffff8211156120c4578081fd5b5060209081020190565b60005b838110156120e95781810151838201526020016120d1565b83811115610efd5750506000910152565b73ffffffffffffffffffffffffffffffffffffffff8116811461211c57600080fd5b5056fea2646970667358221220fa070931d1d12d8aa408168992a9ec8f39000452643ec82f885ea824c5b7080c64736f6c634300060a0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD2F7265A GT PUSH2 0x50 JUMPI DUP1 PUSH4 0xD2F7265A EQ PUSH2 0x9F JUMPI DUP1 PUSH4 0xD5F39488 EQ PUSH2 0xA7 JUMPI DUP1 PUSH4 0xE063ED81 EQ PUSH2 0xAF JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x7F555B03 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0xC9353CB5 EQ PUSH2 0x8A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x74 PUSH2 0xCF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0x1DE9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9D PUSH2 0x98 CALLDATASIZE PUSH1 0x4 PUSH2 0x18F5 JUMP JUMPDEST PUSH2 0xF3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x74 PUSH2 0x1E5 JUMP JUMPDEST PUSH2 0x74 PUSH2 0x209 JUMP JUMPDEST PUSH2 0xC2 PUSH2 0xBD CALLDATASIZE PUSH1 0x4 PUSH2 0x1911 JUMP JUMPDEST PUSH2 0x22D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0x1E85 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x162 JUMPI PUSH2 0x162 PUSH2 0x15D CALLER PUSH32 0x0 PUSH2 0x768 JUMP JUMPDEST PUSH2 0x817 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x1CC JUMPI PUSH2 0x1CC PUSH2 0x15D ADDRESS PUSH32 0x0 PUSH2 0x81F JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFDESTRUCT JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x237 PUSH2 0x153D JUMP JUMPDEST PUSH2 0x243 DUP4 DUP6 ADD DUP6 PUSH2 0x19E8 JUMP JUMPDEST SWAP1 POP PUSH2 0x268 DUP2 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x82D JUMP JUMPDEST DUP1 PUSH2 0x291 JUMPI POP PUSH2 0x291 DUP2 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x82D JUMP JUMPDEST ISZERO PUSH2 0x2DA JUMPI PUSH2 0x2DA PUSH2 0x15D PUSH1 0x0 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x860 SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x80 ADD MLOAD MLOAD DUP2 PUSH1 0x60 ADD MLOAD MLOAD EQ PUSH2 0x32F JUMPI PUSH2 0x32F PUSH2 0x15D PUSH1 0x1 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x860 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x33E JUMPI INVALID JUMPDEST EQ DUP1 ISZERO PUSH2 0x36E JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 PUSH1 0xC0 ADD MLOAD EQ JUMPDEST ISZERO PUSH2 0x3A4 JUMPI PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x39E SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH4 0xFFFFFFFF PUSH2 0x889 AND JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE JUMPDEST PUSH2 0x3F7 PUSH32 0x0 DUP3 PUSH1 0xC0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x960 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A7 GASPRICE PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1CE4C78B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x463 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x477 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x49B SWAP2 SWAP1 PUSH2 0x1AD9 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xA3C AND JUMP JUMPDEST SWAP1 POP SELFBALANCE PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP6 PUSH1 0x60 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x6DA JUMPI PUSH1 0x0 DUP7 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x4CB JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4E6 JUMPI DUP6 PUSH1 0xC0 ADD MLOAD DUP3 LT PUSH2 0x4E1 JUMPI PUSH2 0x6DA JUMP JUMPDEST PUSH2 0x4F6 JUMP JUMPDEST DUP6 PUSH1 0xC0 ADD MLOAD DUP4 LT PUSH2 0x4F6 JUMPI PUSH2 0x6DA JUMP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x50B JUMPI PUSH2 0x50B PUSH2 0x15D DUP6 DUP8 PUSH2 0xA6D JUMP JUMPDEST PUSH2 0x513 PUSH2 0x15A7 JUMP JUMPDEST PUSH1 0x0 DUP8 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x522 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x5E1 JUMPI PUSH2 0x5DA DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x545 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x80 ADD MLOAD DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x55D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x5D4 DUP8 DUP14 PUSH1 0xA0 ADD MLOAD MLOAD GT PUSH2 0x59A JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x5B3 JUMP JUMPDEST DUP13 PUSH1 0xA0 ADD MLOAD DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x5AA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST PUSH1 0xC0 DUP15 ADD MLOAD PUSH2 0x5C8 SWAP1 DUP12 PUSH4 0xFFFFFFFF PUSH2 0xA96 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xAB5 AND JUMP JUMPDEST DUP12 PUSH2 0xACB JUMP JUMPDEST SWAP1 POP PUSH2 0x68A JUMP JUMPDEST PUSH2 0x687 DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x80 ADD MLOAD DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x616 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x681 DUP8 DUP14 PUSH1 0xA0 ADD MLOAD MLOAD GT PUSH2 0x653 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x66C JUMP JUMPDEST DUP13 PUSH1 0xA0 ADD MLOAD DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x663 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST PUSH1 0xC0 DUP15 ADD MLOAD PUSH2 0x5C8 SWAP1 DUP13 PUSH4 0xFFFFFFFF PUSH2 0xA96 AND JUMP JUMPDEST DUP12 PUSH2 0xC3F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 MLOAD PUSH2 0x69D SWAP1 DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xD7C AND JUMP JUMPDEST SWAP3 POP PUSH2 0x6B6 DUP2 PUSH1 0x20 ADD MLOAD DUP6 PUSH2 0xD7C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP4 POP PUSH2 0x6CF DUP2 PUSH1 0x40 ADD MLOAD DUP7 PUSH2 0xA96 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP5 POP POP PUSH1 0x1 ADD PUSH2 0x4AF JUMP JUMPDEST POP PUSH1 0x0 DUP6 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x6EA JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x717 JUMPI DUP5 PUSH1 0xC0 ADD MLOAD DUP2 LT ISZERO PUSH2 0x712 JUMPI PUSH2 0x712 PUSH2 0x15D DUP7 PUSH1 0x20 ADD MLOAD DUP4 DUP9 PUSH1 0xC0 ADD MLOAD PUSH2 0xD98 JUMP JUMPDEST PUSH2 0x739 JUMP JUMPDEST DUP5 PUSH1 0xC0 ADD MLOAD DUP3 LT ISZERO PUSH2 0x739 JUMPI PUSH2 0x739 PUSH2 0x15D DUP7 PUSH1 0x40 ADD MLOAD DUP5 DUP9 PUSH1 0xC0 ADD MLOAD PUSH2 0xE49 JUMP JUMPDEST POP PUSH32 0x13C9929E00000000000000000000000000000000000000000000000000000000 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x776 SWAP1 PUSH2 0x1C0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x791 SWAP3 SWAP2 SWAP1 PUSH2 0x1E0A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x776 SWAP1 PUSH2 0x1CFC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x86E SWAP1 PUSH2 0x1BC0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x791 SWAP3 SWAP2 SWAP1 PUSH2 0x1EF5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x894 DUP4 PUSH2 0x82D JUMP JUMPDEST ISZERO PUSH2 0x8B7 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND BALANCE PUSH2 0x811 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x909 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1DE9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x921 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x935 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x959 SWAP2 SWAP1 PUSH2 0x1AD9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x9B6 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1E0A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9E2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA06 SWAP2 SWAP1 PUSH2 0x1AD9 JUMP JUMPDEST LT ISZERO PUSH2 0xA37 JUMPI PUSH2 0xA37 DUP4 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0xE57 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xA4B JUMPI POP PUSH1 0x0 PUSH2 0x811 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xA58 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x959 JUMPI PUSH2 0x959 PUSH2 0x15D PUSH1 0x1 DUP7 DUP7 PUSH2 0xF03 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0xA7B SWAP1 PUSH2 0x1D4B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x791 SWAP3 SWAP2 SWAP1 PUSH2 0x2079 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xAAF JUMPI PUSH2 0xAAF PUSH2 0x15D PUSH1 0x2 DUP6 DUP6 PUSH2 0xF03 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xAC4 JUMPI DUP2 PUSH2 0x959 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAD3 PUSH2 0x15A7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAE3 DUP7 PUSH2 0x1A0 ADD MLOAD PUSH2 0xF22 JUMP JUMPDEST PUSH1 0xE0 DUP8 ADD MLOAD SWAP1 SWAP2 POP DUP5 SWAP1 ISZERO PUSH2 0xBE6 JUMPI DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xB79 JUMPI PUSH1 0xE0 DUP8 ADD MLOAD PUSH2 0xB74 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH32 0x0 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x960 AND JUMP JUMPDEST PUSH2 0xBE6 JUMP JUMPDEST DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xBDA JUMPI PUSH1 0xA0 DUP8 ADD MLOAD PUSH1 0xE0 DUP9 ADD MLOAD PUSH2 0xBD3 SWAP2 SWAP1 PUSH2 0xBCD SWAP1 DUP3 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xD7C AND JUMP JUMPDEST DUP8 PUSH2 0xFAF JUMP JUMPDEST SWAP1 POP PUSH2 0xBE6 JUMP JUMPDEST PUSH2 0xBE6 PUSH2 0x15D DUP4 PUSH2 0xFF9 JUMP JUMPDEST PUSH2 0xBF4 DUP2 DUP9 PUSH1 0xA0 ADD MLOAD PUSH2 0xAB5 JUMP JUMPDEST SWAP1 POP PUSH2 0xC32 DUP8 DUP8 DUP4 DUP8 DUP14 DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x10A4 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC47 PUSH2 0x15A7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC57 DUP7 PUSH2 0x1A0 ADD MLOAD PUSH2 0xF22 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC6E DUP6 DUP9 PUSH1 0x80 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD PUSH2 0xFAF JUMP JUMPDEST SWAP1 POP DUP7 PUSH1 0xE0 ADD MLOAD PUSH1 0x0 EQ PUSH2 0xD6E JUMPI DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD2F JUMPI PUSH2 0xCD9 DUP6 PUSH2 0xCCF DUP10 PUSH1 0xE0 ADD MLOAD DUP11 PUSH1 0x80 ADD MLOAD PUSH2 0xA96 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP10 PUSH1 0xA0 ADD MLOAD PUSH2 0xFAF JUMP JUMPDEST SWAP1 POP PUSH2 0xD2A PUSH32 0x0 DUP9 PUSH1 0xE0 ADD MLOAD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x960 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xD6E JUMP JUMPDEST DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD6E JUMPI PUSH2 0xD6E PUSH2 0x15D DUP4 PUSH2 0xFF9 JUMP JUMPDEST PUSH2 0xBF4 DUP8 PUSH1 0xA0 ADD MLOAD DUP3 PUSH2 0xAB5 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x959 JUMPI PUSH2 0x959 PUSH2 0x15D PUSH1 0x0 DUP7 DUP7 PUSH2 0xF03 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0xDA6 SWAP1 PUSH2 0x1CAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xDC3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E57 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0xDA6 SWAP1 PUSH2 0x1B71 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xE74 SWAP3 SWAP2 SWAP1 PUSH2 0x1E31 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0xEFD DUP5 DUP3 PUSH2 0x1330 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xDC3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1EC5 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xF36 JUMPI POP PUSH1 0x0 PUSH2 0x85B JUMP JUMPDEST DUP2 MLOAD PUSH1 0x24 EQ ISZERO DUP1 PUSH2 0xF93 JUMPI POP PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 PUSH2 0xF6E DUP4 PUSH1 0x0 PUSH2 0x13CA JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xFA4 JUMPI PUSH2 0xFA4 PUSH2 0x15D DUP4 PUSH2 0x1416 JUMP JUMPDEST PUSH2 0x811 DUP3 PUSH1 0x10 PUSH2 0x143D JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF1 DUP4 PUSH2 0xFE5 PUSH2 0xFC9 DUP3 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0xA96 AND JUMP JUMPDEST PUSH2 0xFD9 DUP9 DUP8 PUSH4 0xFFFFFFFF PUSH2 0xA3C AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xD7C AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x147D AND JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x1007 SWAP1 PUSH2 0x1C5E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1020 SWAP2 SWAP1 PUSH2 0x1DE9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10AC PUSH2 0x15A7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x1101 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1DE9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x112D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1151 SWAP2 SWAP1 PUSH2 0x1AD9 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9B44D556 DUP7 DUP11 DUP10 DUP12 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11B1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F18 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1219 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1216 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1997 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1253 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1247 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x124C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1325 JUMP JUMPDEST PUSH2 0x12EC DUP3 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1290 SWAP2 SWAP1 PUSH2 0x1DE9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12E0 SWAP2 SWAP1 PUSH2 0x1AD9 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xA96 AND JUMP JUMPDEST PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x40 DUP6 ADD MSTORE DUP2 ADD MLOAD DUP4 MSTORE DUP4 ISZERO PUSH2 0x1323 JUMPI PUSH1 0x60 DUP2 ADD MLOAD DUP4 MLOAD PUSH2 0x1320 SWAP2 PUSH4 0xFFFFFFFF PUSH2 0xD7C AND JUMP JUMPDEST DUP4 MSTORE JUMPDEST POP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1359 SWAP2 SWAP1 PUSH2 0x1B55 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1396 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x139B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x13B1 JUMPI POP PUSH2 0x13B1 DUP2 PUSH2 0x14A7 JUMP JUMPDEST ISZERO PUSH2 0x13BD JUMPI POP POP PUSH2 0x13C6 JUMP JUMPDEST PUSH2 0xEFD DUP2 PUSH2 0x817 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0x13EB JUMPI PUSH2 0x13EB PUSH2 0x15D PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0x14ED JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x1424 SWAP1 PUSH2 0x1D9A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1020 SWAP2 SWAP1 PUSH2 0x1EB2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x145E JUMPI PUSH2 0x145E PUSH2 0x15D PUSH1 0x4 DUP6 MLOAD DUP6 PUSH1 0x14 ADD PUSH2 0x14ED JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1493 JUMPI PUSH2 0x1493 PUSH2 0x15D PUSH1 0x3 DUP6 DUP6 PUSH2 0xF03 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x149E JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x14BB JUMPI POP PUSH1 0x1 PUSH2 0x85B JUMP JUMPDEST DUP2 MLOAD PUSH1 0x20 EQ ISZERO PUSH2 0x85B JUMPI PUSH1 0x0 PUSH2 0x14D2 DUP4 PUSH1 0x0 PUSH2 0x150C JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x14E7 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x85B JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xDC3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1EE7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x959 DUP4 DUP4 PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1534 JUMPI PUSH2 0x1534 PUSH2 0x15D PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x14ED JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x811 DUP2 PUSH2 0x20FA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x15E3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x15F6 PUSH2 0x15F1 DUP3 PUSH2 0x20AE JUMP JUMPDEST PUSH2 0x2087 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1630 JUMPI PUSH2 0x161E DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x185F JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1607 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x164B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1659 PUSH2 0x15F1 DUP3 PUSH2 0x20AE JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1630 JUMPI DUP2 CALLDATALOAD DUP8 ADD PUSH2 0x1C0 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP13 SUB ADD SLT ISZERO PUSH2 0x16AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16B3 DUP2 PUSH2 0x2087 JUMP JUMPDEST PUSH2 0x16BF DUP12 DUP8 DUP6 ADD PUSH2 0x15C8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 PUSH2 0x16CF DUP13 DUP3 DUP7 ADD PUSH2 0x15C8 JUMP JUMPDEST DUP8 DUP4 ADD MSTORE PUSH1 0x60 PUSH2 0x16E1 DUP14 DUP3 DUP8 ADD PUSH2 0x15C8 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH1 0x80 SWAP2 POP PUSH2 0x16F5 DUP14 DUP4 DUP8 ADD PUSH2 0x15C8 JUMP JUMPDEST DUP2 DUP5 ADD MSTORE POP PUSH1 0xA0 DUP1 DUP6 ADD CALLDATALOAD DUP3 DUP5 ADD MSTORE PUSH1 0xC0 SWAP2 POP DUP2 DUP6 ADD CALLDATALOAD DUP2 DUP5 ADD MSTORE POP PUSH1 0xE0 DUP1 DUP6 ADD CALLDATALOAD DUP3 DUP5 ADD MSTORE PUSH2 0x100 SWAP2 POP DUP2 DUP6 ADD CALLDATALOAD DUP2 DUP5 ADD MSTORE POP PUSH2 0x120 DUP1 DUP6 ADD CALLDATALOAD DUP3 DUP5 ADD MSTORE PUSH2 0x140 SWAP2 POP DUP2 DUP6 ADD CALLDATALOAD DUP2 DUP5 ADD MSTORE POP PUSH2 0x160 DUP1 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x175F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x176D DUP16 DUP12 DUP5 DUP11 ADD ADD PUSH2 0x185F JUMP JUMPDEST DUP5 DUP7 ADD MSTORE PUSH2 0x180 SWAP4 POP DUP4 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1789 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1797 DUP16 DUP12 DUP5 DUP11 ADD ADD PUSH2 0x185F JUMP JUMPDEST DUP4 DUP7 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x17B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17C1 DUP16 DUP12 DUP5 DUP11 ADD ADD PUSH2 0x185F JUMP JUMPDEST DUP5 DUP7 ADD MSTORE DUP6 DUP8 ADD CALLDATALOAD SWAP4 POP DUP1 DUP5 GT ISZERO PUSH2 0x17D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH2 0x17E8 DUP14 DUP10 DUP5 DUP9 ADD ADD PUSH2 0x185F JUMP JUMPDEST SWAP1 DUP4 ADD MSTORE POP DUP7 MSTORE POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x166A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1811 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x181F PUSH2 0x15F1 DUP3 PUSH2 0x20AE JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1840 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1630 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1843 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x186F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1885 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x18B6 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x2087 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x18CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x2 DUP2 LT PUSH2 0x811 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1906 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x959 DUP2 PUSH2 0x20FA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1926 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1938 DUP2 PUSH2 0x20FA JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1954 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD DUP9 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x1965 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x1975 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP5 DUP4 ADD ADD GT ISZERO PUSH2 0x1986 JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 SWAP1 SWAP5 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19A8 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x19B2 PUSH1 0xA0 PUSH2 0x2087 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP3 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19F9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1A10 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD PUSH1 0xE0 DUP2 DUP8 SUB SLT ISZERO PUSH2 0x1A22 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1A2C PUSH1 0xE0 PUSH2 0x2087 JUMP JUMPDEST SWAP3 POP PUSH2 0x1A38 DUP7 DUP3 PUSH2 0x18E6 JUMP JUMPDEST DUP4 MSTORE PUSH2 0x1A47 DUP7 PUSH1 0x20 DUP4 ADD PUSH2 0x15C8 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1A59 DUP7 PUSH1 0x40 DUP4 ADD PUSH2 0x15C8 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1A6F JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1A7B DUP8 DUP3 DUP5 ADD PUSH2 0x163B JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE POP PUSH1 0x80 DUP2 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1A92 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1A9E DUP8 DUP3 DUP5 ADD PUSH2 0x15D3 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MSTORE POP PUSH1 0xA0 DUP2 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1AB5 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1AC1 DUP8 DUP3 DUP5 ADD PUSH2 0x1801 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD MSTORE POP PUSH1 0xC0 SWAP1 DUP2 ADD CALLDATALOAD SWAP1 DUP4 ADD MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AEA JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1B23 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x20CE JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1B67 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x20CE JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E636F6D706C65746546696C6C42757951756F74654572726F722861646472 DUP2 MSTORE PUSH32 0x6573732C75696E743235362C75696E7432353629000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 ADD SWAP1 JUMP JUMPDEST PUSH32 0x496E76616C69645472616E73666F726D446174614572726F722875696E74382C DUP2 MSTORE PUSH32 0x6279746573290000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x26 ADD SWAP1 JUMP JUMPDEST PUSH32 0x4F6E6C7943616C6C61626C6542794465706C6F7965724572726F722861646472 DUP2 MSTORE PUSH32 0x6573732C61646472657373290000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2C ADD SWAP1 JUMP JUMPDEST PUSH32 0x496E76616C696454616B6572466565546F6B656E4572726F7228616464726573 DUP2 MSTORE PUSH32 0x7329000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 ADD SWAP1 JUMP JUMPDEST PUSH32 0x496E636F6D706C65746546696C6C53656C6C51756F74654572726F7228616464 DUP2 MSTORE PUSH32 0x726573732C75696E743235362C75696E74323536290000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x35 ADD SWAP1 JUMP JUMPDEST PUSH32 0x496E76616C6964457865637574696F6E436F6E746578744572726F7228616464 DUP2 MSTORE PUSH32 0x726573732C616464726573732900000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2D ADD SWAP1 JUMP JUMPDEST PUSH32 0x496E73756666696369656E7450726F746F636F6C4665654572726F722875696E DUP2 MSTORE PUSH32 0x743235362C75696E743235362900000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2D ADD SWAP1 JUMP JUMPDEST PUSH32 0x496E76616C696445524332304173736574446174614572726F72286279746573 DUP2 MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x21 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x959 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1B0B JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x1ED3 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x1ED3 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP5 LT PUSH2 0x1F01 JUMPI INVALID JUMPDEST DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xFF1 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1B0B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x1F2C PUSH1 0x60 DUP4 ADD DUP7 MLOAD PUSH2 0x1AF1 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x1F3E PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x1AF1 JUMP JUMPDEST POP PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x1F51 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x1AF1 JUMP JUMPDEST POP PUSH1 0x60 DUP6 ADD MLOAD PUSH2 0x1F64 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x1AF1 JUMP JUMPDEST POP PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH1 0xA0 DUP6 ADD MLOAD PUSH2 0x100 DUP2 DUP2 DUP6 ADD MSTORE PUSH1 0xC0 DUP8 ADD MLOAD SWAP2 POP PUSH2 0x120 DUP3 DUP2 DUP7 ADD MSTORE PUSH1 0xE0 DUP9 ADD MLOAD SWAP3 POP PUSH2 0x140 DUP4 DUP2 DUP8 ADD MSTORE DUP3 DUP10 ADD MLOAD SWAP4 POP PUSH2 0x160 SWAP3 POP DUP4 DUP4 DUP8 ADD MSTORE DUP2 DUP10 ADD MLOAD SWAP4 POP PUSH2 0x180 SWAP2 POP DUP4 DUP3 DUP8 ADD MSTORE DUP1 DUP10 ADD MLOAD SWAP4 POP POP PUSH2 0x1C0 PUSH2 0x1A0 DUP2 DUP2 DUP9 ADD MSTORE PUSH2 0x1FDA PUSH2 0x220 DUP9 ADD DUP7 PUSH2 0x1B0B JUMP JUMPDEST DUP5 DUP12 ADD MLOAD SWAP6 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0 SWAP5 POP DUP5 DUP9 DUP3 SUB ADD DUP4 DUP10 ADD MSTORE PUSH2 0x2016 DUP2 DUP8 PUSH2 0x1B0B JUMP JUMPDEST SWAP3 POP POP DUP3 DUP11 ADD MLOAD SWAP5 POP DUP4 DUP8 DUP4 SUB ADD PUSH2 0x1E0 DUP9 ADD MSTORE PUSH2 0x2034 DUP3 DUP7 PUSH2 0x1B0B JUMP JUMPDEST SWAP3 POP DUP1 DUP11 ADD MLOAD SWAP5 POP POP POP DUP2 DUP6 DUP3 SUB ADD PUSH2 0x200 DUP7 ADD MSTORE PUSH2 0x2053 DUP2 DUP5 PUSH2 0x1B0B JUMP JUMPDEST SWAP2 POP POP DUP6 PUSH1 0x20 DUP6 ADD MSTORE DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x206E DUP2 DUP7 PUSH2 0x1B0B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x20A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x20C4 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20E9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x20D1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xEFD JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x211C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL SMOD MULMOD BALANCE 0xD1 0xD1 0x2D DUP11 LOG4 ADDMOD AND DUP10 SWAP3 0xA9 0xEC DUP16 CODECOPY STOP DIV MSTORE PUSH5 0x3EC82F885E 0xA8 0x24 0xC5 0xB7 ADDMOD 0xC PUSH5 0x736F6C6343 STOP MOD EXP STOP CALLER ",
                "sourceMap": "1266:15789:36:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3453:35;;;:::i;:::-;;;;;;;;;;;;;;;;1503:600:40;;;;;;;;;:::i;:::-;;3375:35:36;;;:::i;992:33:40:-;;;:::i;4157:4732:36:-;;;;;;;;;:::i;:::-;;;;;;;;3453:35;;;:::o;1503:600:40:-;1641:10;:22;1655:8;1641:22;;1637:174;;1679:121;:94;1752:10;1764:8;1679:72;:94::i;:::-;:119;:121::i;:::-;1878:4;1870:32;1887:15;1870:32;;1866:195;;1918:132;:105;2000:4;2007:15;1918:73;:105::i;:132::-;2083:12;2070:26;;;3375:35:36;;;:::o;992:33:40:-;;;:::o;4157:4732:36:-;4332:14;4362:25;;:::i;:::-;4390:34;;;;4401:5;4390:34;;;4362:62;;4472:27;:4;:14;;;:25;;;:27::i;:::-;:57;;;;4503:26;:4;:13;;;:24;;;:26::i;:::-;4468:278;;;4545:190;:180;4616:72;4706:5;;4545:180;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4545:53:36;;-1:-1:-1;;;4545:180:36:i;:190::-;4781:4;:15;;;:22;4759:4;:11;;;:18;:44;4755:271;;4819:196;:186;4890:78;4986:5;;4819:186;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4819:53:36;;-1:-1:-1;;;4819:186:36:i;:196::-;5053:9;5040;;:22;;;;;;;;;:56;;;;;3329:2;5066:4;:15;;;:30;5040:56;5036:411;;;5389:14;;;;:47;;:32;;5430:4;5389:47;:32;:47;:::i;:::-;5371:15;;;:65;5036:411;5514:58;5544:10;5556:4;:15;;;5514:4;:14;;;:29;;;;:58;;;;;:::i;:::-;5611:25;5639:53;5680:11;5639:8;:30;;;:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:40;:53;:40;:53;:::i;:::-;5611:81;-1:-1:-1;5725:21:36;5702:20;;;5822:2202;5846:4;:11;;;:18;5842:1;:22;5822:2202;;;5949:9;5936;;:22;;;;;;;;;5932:337;;;6034:4;:15;;;6020:10;:29;6016:81;;6073:5;;6016:81;5932:337;;;6192:4;:15;;;6176:12;:31;6172:83;;6231:5;;6172:83;6370:17;6355:12;:32;6351:212;;;6407:141;:110;6485:12;6499:17;6407:77;:110::i;:141::-;6608:31;;:::i;:::-;6670:9;6657;;:22;;;;;;;;;6653:1096;;;6741:455;6775:4;:13;;;6810:4;:14;;;6846:4;:11;;;6858:1;6846:14;;;;;;;;;;;;;;6882:4;:15;;;6898:1;6882:18;;;;;;;;;;;;;;6922:217;7024:1;6990:4;:24;;;:31;:35;:127;;3329:2;6990:127;;;7052:4;:24;;;7077:1;7052:27;;;;;;;;;;;;;;6990:127;6922:15;;;;:35;;6946:10;6922:35;:23;:35;:::i;:::-;:42;:217;:42;:217;:::i;:::-;7161:17;6741:12;:455::i;:::-;6731:465;;6653:1096;;;7276:458;7311:4;:13;;;7346:4;:14;;;7382:4;:11;;;7394:1;7382:14;;;;;;;;;;;;;;7418:4;:15;;;7434:1;7418:18;;;;;;;;;;;;;;7458:219;7562:1;7528:4;:24;;;:31;:35;:127;;3329:2;7528:127;;;7590:4;:24;;;7615:1;7590:27;;;;;;;;;;;;;;7528:127;7458:15;;;;:37;;7482:12;7458:37;:23;:37;:::i;:219::-;7699:17;7276:13;:458::i;:::-;7266:468;;6653:1096;7829:28;;7810:48;;:10;;:48;:18;:48;:::i;:::-;7797:61;;7887:52;7908:7;:30;;;7887:12;:20;;:52;;;;:::i;:::-;7872:67;;7968:45;7989:7;:23;;;7968:12;:20;;:45;;;;:::i;:::-;7953:60;-1:-1:-1;;5866:3:36;;5822:2202;;;-1:-1:-1;8089:9:36;8076;;:22;;;;;;;;;8072:755;;;8165:4;:15;;;8152:10;:28;8148:302;;;8200:235;:225;8311:4;:14;;;8352:10;8388:4;:15;;;8200:77;:225::i;:235::-;8072:755;;;8532:4;:15;;;8517:12;:30;8513:304;;;8567:235;:225;8677:4;:13;;;8717:12;8755:4;:15;;;8567:76;:225::i;:235::-;-1:-1:-1;8843:39:36;;4157:4732;-1:-1:-1;;;;;;;;;4157:4732:36:o;2426:335:6:-;2566:12;2644:57;;;;;;;;;;;;;;2716:6;2736:8;2601:153;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2426:335:6;;;;;:::o;1492:170:76:-;1635:9;1629:16;1622:4;1611:9;1607:20;1600:46;2767:365:6;2922:12;3000:58;;;;;;1858:164:38;1980:35;;;945:42;1980:35;1858:164;;;;:::o;3239:370:6:-;3412:12;3490:51;;;;;;;;;;;;;;3556:9;3579:13;3447:155;;;;;;;;;;2266:260:38;2377:20;2417:17;2428:5;2417:10;:17::i;:::-;2413:68;;;-1:-1:-1;2457:13:38;;;;2450:20;;2413:68;2497:22;;;;;:15;;;;;;:22;;2513:5;;2497:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2490:29;2266:260;-1:-1:-1;;;2266:260:38:o;1948:267:66:-;2092:39;;;;;2134:6;;2092:15;;;;;;:39;;2116:4;;2123:7;;2092:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:48;2088:121;;;2156:42;2170:5;2177:7;2194:2;2156:13;:42::i;:::-;1948:267;;;:::o;725:457:70:-;811:7;838:6;834:45;;-1:-1:-1;867:1:70;860:8;;834:45;900:5;;;904:1;900;:5;:1;919:5;;;;;:10;915:243;;945:202;970:176;1030:64;1112:1;1131;970:42;:176::i;4882:347:6:-;5028:12;5106:58;;;;;;;;;;;;;;5179:10;5203:9;5063:159;;;;;;;;;;1586:373:70;1672:7;1703:1;1699;:5;1695:236;;;1720:200;1745:174;1805:62;1885:1;1904;1745:42;:174::i;1720:200::-;-1:-1:-1;1947:5:70;;;1586:373::o;2505:135::-;2590:7;2624:1;2620;:5;:13;;2632:1;2620:13;;;-1:-1:-1;2628:1:70;;2505:135;-1:-1:-1;2505:135:70:o;9266:2268:36:-;9524:31;;:::i;:::-;9571:28;9614:52;9642:5;:23;;;9614:27;:52::i;:::-;9733:14;;;;9571:95;;-1:-1:-1;9708:10:36;;9733:19;9729:1387;;9789:10;9772:27;;:13;:27;;;9768:1338;;;10236:14;;;;10195:56;;:28;;;;10224:10;;10195:56;:28;:56;:::i;:::-;9768:1338;;;10293:10;10276:27;;:13;:27;;;10272:834;;;10709:22;;;;10784:14;;;;10656:193;;10709:22;10753:46;;10709:22;;10753:46;:30;:46;:::i;:::-;10821:10;10656:31;:193::i;:::-;10633:216;;10272:834;;;10966:125;:115;11049:13;10966:53;:115::i;:125::-;11193:101;11228:20;11262:5;:22;;;11193:21;:101::i;:::-;11170:124;;11341:186;11365:5;11384:9;11407:20;11441:11;11466:10;11507;11490:27;;:13;:27;;;11341:10;:186::i;:::-;11334:193;9266:2268;-1:-1:-1;;;;;;;;;9266:2268:36:o;11907:2385::-;12165:31;;:::i;:::-;12212:28;12255:52;12283:5;:23;;;12255:27;:52::i;:::-;12212:95;;12373:28;12404:136;12449:9;12472:5;:22;;;12508:5;:22;;;12404:31;:136::i;:::-;12373:167;;12555:5;:14;;;12573:1;12555:19;12551:1335;;12611:10;12594:27;;:13;:27;;;12590:1286;;;13018:192;13071:9;13102:46;13133:5;:14;;;13102:5;:22;;;:30;;:46;;;;:::i;:::-;13170:5;:22;;;13018:31;:192::i;:::-;12995:215;;13530:56;13559:10;13571:5;:14;;;13530:13;:28;;;;:56;;;;;:::i;:::-;12590:1286;;;13628:10;13611:27;;:13;:27;;;13607:269;;13736:125;:115;13819:13;13736:53;:115::i;:125::-;13951:101;13986:5;:22;;;14022:20;13951:21;:101::i;1965:392:70:-;2051:7;2086:5;;;2105;;;2101:232;;;2126:196;2151:170;2211:58;2287:1;2306;2151:42;:170::i;3697:407:6:-;3871:12;3949:66;;;;;;;;;;;;;;4030:9;4053:10;4077;3906:191;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3697:407:6;;;;;:::o;4110:405::-;4283:12;4361:65;;;;;;1178:351:66;1320:21;1380:22;;;1416:7;1437:9;1344:112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1466:56:66;1505:5;1344:112;1466:30;:56::i;:::-;1178:351;;;;:::o;1314:322:77:-;1467:12;779:10;1538:28;;1580:9;1603:1;1618;1502:127;;;;;;;;;;;16493:560:36;16600:20;16640:9;:16;16660:1;16640:21;16636:85;;;-1:-1:-1;16707:1:36;16677:33;;16636:85;16734:9;:16;16754:2;16734:22;;:98;;;-1:-1:-1;16812:20:36;16772:36;16795:9;16806:1;16772:22;:36::i;:::-;:60;;;;16734:98;16730:246;;;16856:109;:82;16928:9;16856:71;:82::i;:109::-;17007:38;17031:9;17042:2;17007:23;:38::i;3795:545:69:-;3958:21;4198:104;4290:11;4198:70;4245:22;4290:11;4265:1;4245:22;:19;:22;:::i;:::-;4198:25;:9;4216:6;4198:25;:17;:25;:::i;:::-;:46;:70;:46;:70;:::i;:::-;:91;:104;:91;:104;:::i;:::-;4182:120;3795:545;-1:-1:-1;;;;3795:545:69:o;5527:273:6:-;5638:12;5716:47;;;;;;;;;;;;;;5778:5;5673:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5527:273:6;;;:::o;14813:1487:36:-;15081:31;;:::i;:::-;15216:35;;;;;15181:32;;15216:20;;;;;;:35;;15245:4;;15216:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15181:70;;15277:8;:18;;;15320:11;15350:5;15357:20;15379:9;15277:112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15277:112:36;;;;;;;;;;;;;;;;;;;;;;;;;15261:1033;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16200:94;15261:1033;;;15581:86;15642:24;15581:10;:20;;;15610:4;15581:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:60;:86;:60;:86;:::i;:::-;15548:30;;;;:119;;;;15769:27;;;;15743:23;;;:53;15841:34;;;15810:65;;16015:174;;;;16149:24;;;;16112:28;;:62;;;:36;:62;:::i;:::-;16061:113;;16015:174;15402:797;15261:1033;14813:1487;;;;;;;;;:::o;6884:340:66:-;7016:15;7033:23;7060:6;:11;;7072:8;7060:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7015:66;;;;7095:10;:44;;;;;7109:30;7128:10;7109:18;:30::i;:::-;7091:81;;;7155:7;;;;7091:81;7181:36;7206:10;7181:24;:36::i;6884:340::-;;;:::o;16975:880:68:-;17095:13;17139:5;17147:1;17139:9;17128:1;:8;:20;17124:299;;;17164:248;17189:222;17254:90;17362:1;:8;17388:5;17396:1;17388:9;17189:47;:222::i;17164:248::-;-1:-1:-1;17596:13:68;17499:2;17596:13;17590:20;17749:66;17737:79;;16975:880::o;5235:286:6:-;5356:12;5434:46;;;;;;;;;;;;;;5495:9;5391:123;;;;;;;;;10857:1080:68;10978:14;11023:5;11031:2;11023:10;11012:1;:8;:21;11008:330;;;11049:278;11074:252;11139:92;11249:1;:8;11275:5;11283:2;11275:10;11074:47;:252::i;11049:278::-;-1:-1:-1;11839:13:68;11584:2;11839:13;11833:20;11855:42;11829:69;;10857:1080::o;1188:392:70:-;1274:7;1301:6;1297:232;;1323:195;1348:169;1408:57;1483:1;1502;1348:42;:169::i;1323:195::-;1538:9;1554:1;1550;:5;;;;;;;1188:392;-1:-1:-1;;;;1188:392:70:o;6198:395:66:-;6298:17;6335:10;:17;6356:1;6335:22;6331:64;;;-1:-1:-1;6380:4:66;6373:11;;6331:64;6408:10;:17;6429:2;6408:23;6404:183;;;6447:14;6464:38;6488:10;6500:1;6464:23;:38::i;:::-;6447:55;;6520:6;6530:1;6520:11;6516:61;;;6558:4;6551:11;;;;;6516:61;6404:183;6198:395;;;:::o;1295:378:73:-;1483:12;1235:10;1554:37;;1605:9;1628:6;1648:8;1518:148;;;;;;;;;;;16083:220:68;16204:14;16251:21;16263:1;16266:5;14383:14;14428:5;14436:2;14428:10;14417:1;:8;:21;14413:306;;;14454:254;14479:228;14544:95;14657:1;:8;14683:5;14691:2;14683:10;14479:47;:228::i;14454:254::-;-1:-1:-1;14897:13:68;14799:2;14897:13;14891:20;;14262:688::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130::-;72:20;;97:33;72:20;97:33;;311:705;;437:3;430:4;422:6;418:17;414:27;404:2;;-1:-1;;445:12;404:2;492:6;479:20;514:89;529:73;595:6;529:73;;;514:89;;;631:21;;;505:98;-1:-1;675:4;688:14;;;;663:17;;;783:1;768:242;793:6;790:1;787:13;768:242;;;900:46;942:3;675:4;876:3;863:17;667:6;851:30;;900:46;;;888:59;;961:14;;;;989;;;;815:1;808:9;768:242;;;772:14;;;;;397:619;;;;;1057:747;;1197:3;1190:4;1182:6;1178:17;1174:27;1164:2;;-1:-1;;1205:12;1164:2;1252:6;1239:20;1274:103;1289:87;1369:6;1289:87;;1274:103;1405:21;;;1265:112;-1:-1;1449:4;1462:14;;;;1437:17;;;1557:1;1542:256;1567:6;1564:1;1561:13;1542:256;;;1650:3;1637:17;1441:6;1625:30;5043:6;;5022:19;1625:30;5026:3;5022:19;;5018:32;5015:2;;;1557:1;;5053:12;5015:2;5081:22;5043:6;5081:22;;;5193:49;5238:3;1449:4;1625:30;;5193:49;;;5175:16;5168:75;5366:22;5345:49;5390:3;5366:22;1625:30;5366:22;5345:49;;;1449:4;5331:5;5327:16;5320:75;5525:22;5504:49;5549:3;5525:22;1625:30;5525:22;5504:49;;;5366:22;5490:5;5486:16;5479:75;5678:22;;;5657:49;5702:3;5678:22;1625:30;5678:22;5657:49;;;5525:22;5643:5;5639:16;5632:75;;5835:22;;1625:30;5835:22;9448:20;5678:22;5800:5;5796:16;5789:75;5992:22;;;;1625:30;5992:22;9448:20;5835:22;5957:5;5953:16;5946:75;;6141:22;;1625:30;6141:22;9448:20;5992:22;6106:5;6102:16;6095:75;6290:22;;;;1625:30;6290:22;9448:20;6141:22;6255:5;6251:16;6244:75;;6454:22;;1625:30;6454:22;9448:20;6290:22;6417:5;6413:18;6406:77;6601:22;;;;1625:30;6601:22;9448:20;6454:22;6564:5;6560:18;6553:77;;6714:19;;1625:30;6714:19;6701:33;6754:18;;6746:6;6743:30;6740:2;;;1557:1;;6776:12;6740:2;6823:58;6877:3;1449:4;6868:6;1625:30;6853:22;;6823:58;;;6601:22;6807:5;6803:18;6796:86;6966:19;;;;1625:30;6966:19;6953:33;6939:47;;6754:18;6998:6;6995:30;6992:2;;;1557:1;;7028:12;6992:2;7075:58;7129:3;1449:4;7120:6;1625:30;7105:22;;7075:58;;;6714:19;7059:5;7055:18;7048:86;7221:19;;;;1625:30;7221:19;7208:33;7194:47;;6754:18;7253:6;7250:30;7247:2;;;1557:1;;7283:12;7247:2;7330:58;7384:3;1449:4;7375:6;1625:30;7360:22;;7330:58;;;6966:19;7314:5;7310:18;7303:86;5043:6;1625:30;7476:19;7463:33;7449:47;;6754:18;7508:6;7505:30;7502:2;;;1557:1;;7538:12;7502:2;;;7585:58;7639:3;1449:4;7630:6;1625:30;7615:22;;7585:58;;;7565:18;;;7558:86;-1:-1;1662:73;;-1:-1;;1749:14;;;;1777;;;;1589:1;1582:9;1542:256;;1830:707;;1947:3;1940:4;1932:6;1928:17;1924:27;1914:2;;-1:-1;;1955:12;1914:2;2002:6;1989:20;2024:80;2039:64;2096:6;2039:64;;2024:80;2132:21;;;2015:89;-1:-1;2176:4;2189:14;;;;2164:17;;;2278;;;2269:27;;;;2266:36;-1:-1;2263:2;;;2315:1;;2305:12;2263:2;2340:1;2325:206;2350:6;2347:1;2344:13;2325:206;;;9448:20;;2418:50;;2482:14;;;;2510;;;;2372:1;2365:9;2325:206;;3041:440;;3142:3;3135:4;3127:6;3123:17;3119:27;3109:2;;-1:-1;;3150:12;3109:2;3197:6;3184:20;29587:18;29579:6;29576:30;29573:2;;;-1:-1;;29609:12;29573:2;3219:64;29750:4;29682:9;3135:4;29667:6;29663:17;29659:33;29740:15;3219:64;;;3210:73;;3303:6;3296:5;3289:21;3407:3;29750:4;3398:6;3331;3389:16;;3386:25;3383:2;;;3424:1;;3414:12;3383:2;32710:6;29750:4;3331:6;3327:17;29750:4;3365:5;3361:16;32687:30;32766:1;32748:16;;;29750:4;32748:16;32741:27;3365:5;3102:379;-1:-1;;3102:379;3672:148;3748:20;;34182:1;34172:12;;34162:2;;34198:1;;34188:12;9659:257;;9771:2;9759:9;9750:7;9746:23;9742:32;9739:2;;;-1:-1;;9777:12;9739:2;230:6;217:20;242:41;277:5;242:41;;9923:631;;;;;10088:2;10076:9;10067:7;10063:23;10059:32;10056:2;;;-1:-1;;10094:12;10056:2;2625:6;2612:20;10146:63;;10246:2;10297:9;10293:22;217:20;242:41;277:5;242:41;;;10254:71;-1:-1;10390:2;10375:18;;10362:32;10414:18;10403:30;;;10400:2;;;-1:-1;;10436:12;10400:2;10521:6;10510:9;10506:22;2810:3;2803:4;2795:6;2791:17;2787:27;2777:2;;-1:-1;;2818:12;2777:2;2861:6;2848:20;2838:30;;10414:18;2880:6;2877:30;2874:2;;;-1:-1;;2910:12;2874:2;3005:3;10246:2;2985:17;2946:6;2971:32;;2968:41;2965:2;;;-1:-1;;3012:12;2965:2;10050:504;;;;-1:-1;;10246:2;2942:17;;;;-1:-1;;;10050:504;10561:322;;10705:3;10693:9;10684:7;10680:23;10676:33;10673:2;;;-1:-1;;10712:12;10673:2;4027:20;10705:3;4027:20;;;4179:22;9596:13;4129:16;4122:86;4287:2;4356:9;4352:22;9596:13;4287:2;4306:5;4302:16;4295:86;4450:2;4519:9;4515:22;9596:13;4450:2;4469:5;4465:16;4458:86;4613:2;4682:9;4678:22;9596:13;4613:2;4632:5;4628:16;4621:86;4779:3;4849:9;4845:22;9596:13;4779:3;4799:5;4795:16;4788:86;10764:103;;;;10667:216;;;;;10890:389;;11025:2;11013:9;11004:7;11000:23;10996:32;10993:2;;;-1:-1;;11031:12;10993:2;11089:17;11076:31;11127:18;;11119:6;11116:30;11113:2;;;-1:-1;;11149:12;11113:2;11246:6;11235:9;11231:22;7840:4;7828:9;7823:3;7819:19;7815:30;7812:2;;;-1:-1;;7848:12;7812:2;7876:20;7840:4;7876:20;;;7867:29;;7978:58;8032:3;8008:22;7978:58;;;7960:16;7953:84;8136:72;8204:3;11025:2;8184:9;8180:22;8136:72;;;11025:2;8122:5;8118:16;8111:98;8307:72;8375:3;8274:2;8355:9;8351:22;8307:72;;;8274:2;8293:5;8289:16;8282:98;8471:2;8460:9;8456:18;8443:32;11127:18;8487:6;8484:30;8481:2;;;-1:-1;;8517:12;8481:2;8562:97;8655:3;8646:6;8635:9;8631:22;8562:97;;;8471:2;8548:5;8544:16;8537:123;;8755:3;8744:9;8740:19;8727:33;11127:18;8772:6;8769:30;8766:2;;;-1:-1;;8802:12;8766:2;8847:83;8926:3;8917:6;8906:9;8902:22;8847:83;;;8755:3;8833:5;8829:16;8822:109;;9035:3;9024:9;9020:19;9007:33;11127:18;9052:6;9049:30;9046:2;;;-1:-1;;9082:12;9046:2;9127:74;9197:3;9188:6;9177:9;9173:22;9127:74;;;9035:3;9109:16;;9102:100;-1:-1;9269:3;9324:22;;;9448:20;9285:16;;;9278:75;-1:-1;9113:5;10987:292;-1:-1;;;10987:292;11286:263;;11401:2;11389:9;11380:7;11376:23;11372:32;11369:2;;;-1:-1;;11407:12;11369:2;-1:-1;9596:13;;11363:186;-1:-1;11363:186;11556:103;31682:42;31671:54;11617:37;;11611:48;11903:323;;12035:5;29859:12;30005:6;30000:3;29993:19;12118:52;12163:6;30042:4;30037:3;30033:14;30042:4;12144:5;12140:16;12118:52;;;33147:2;33127:14;33143:7;33123:28;12182:39;;;;30042:4;12182:39;;11983:243;-1:-1;;11983:243;20166:271;;12743:5;29859:12;12854:52;12899:6;12894:3;12887:4;12880:5;12876:16;12854:52;;;12918:16;;;;;20300:137;-1:-1;;20300:137;20444:381;13975:34;13955:55;;14044:22;14039:2;14030:12;;14023:44;13939:2;14086:12;;20633:192;20832:381;14409:34;14389:55;;14478:8;14473:2;14464:12;;14457:30;14373:2;14506:12;;21021:192;21220:381;14829:34;14809:55;;14898:14;14893:2;14884:12;;14877:36;14793:2;14932:12;;21409:192;21608:381;15255:34;15235:55;;15324:4;15319:2;15310:12;;15303:26;15219:2;15348:12;;21797:192;21996:381;15671:34;15651:55;;15740:23;15735:2;15726:12;;15719:45;15635:2;15783:12;;22185:192;22384:381;16106:34;16086:55;;16175:15;16170:2;16161:12;;16154:37;16070:2;16210:12;;22573:192;22772:381;16533:34;16513:55;;16602:15;16597:2;16588:12;;16581:37;16497:2;16637:12;;22961:192;23160:381;16960:34;16940:55;;17029:3;17024:2;17015:12;;17008:25;16924:2;17052:12;;23349:192;23548:222;31682:42;31671:54;;;;11617:37;;23675:2;23660:18;;23646:124;23777:333;31682:42;31671:54;;;11617:37;;31671:54;;24096:2;24081:18;;11617:37;23932:2;23917:18;;23903:207;24117:333;31682:42;31671:54;;;;11617:37;;24436:2;24421:18;;19997:37;24272:2;24257:18;;24243:207;24457:444;31682:42;31671:54;;;;11617:37;;24804:2;24789:18;;19997:37;;;;24887:2;24872:18;;19997:37;24640:2;24625:18;;24611:290;24908:218;30894:66;30883:78;;;;11855:36;;25033:2;25018:18;;25004:122;25133:306;;25278:2;25299:17;25292:47;25353:76;25278:2;25267:9;25263:18;25415:6;25353:76;;25711:480;25912:2;25897:18;;33253:1;33243:12;;33233:2;;33259:9;33233:2;13204:68;;;26094:2;26079:18;;19997:37;;;;26177:2;26162:18;;;19997:37;25883:308;;26198:510;26414:2;26399:18;;33386:1;33376:12;;33366:2;;33392:9;26715:479;;33517:1;33510:5;33507:12;33497:2;;33523:9;33497:2;32559:57;13592:3;13585:81;26919:2;27068;27057:9;27053:18;27046:48;27108:76;26919:2;26908:9;26904:18;27170:6;27108:76;;27201:668;;27448:2;27469:17;27462:47;17385:63;27448:2;27437:9;27433:18;17362:16;17356:23;17385:63;;;17535:4;17528:5;17524:16;17518:23;17547:63;17595:14;27437:9;17595:14;17581:12;17547:63;;;;17704:4;17697:5;17693:16;17687:23;17716:63;17764:14;27437:9;17764:14;17750:12;17716:63;;;;27448:2;17860:5;17856:16;17850:23;17879:63;17927:14;27437:9;17927:14;17913:12;17879:63;;;;17595:14;18026:5;18022:16;18016:23;18093:14;27437:9;18093:14;19997:37;17764:14;18192:5;18188:16;18182:23;18259:14;18182:23;18259:14;27437:9;18259:14;19997:37;17927:14;18350:5;18346:16;18340:23;;;18417:14;18340:23;18417:14;27437:9;18417:14;19997:37;18093:14;18508:5;18504:16;18498:23;;;18575:14;18498:23;18575:14;27437:9;18575:14;19997:37;18259:14;18679:5;18675:18;18669:25;;;18748:16;;;18669:25;18748:16;27437:9;18748:16;19997:37;18417:14;18837:5;18833:18;18827:25;;;18906:16;;;18827:25;18906:16;27437:9;18906:16;19997:37;18575:14;19005:5;19001:18;18995:25;18975:45;;;17280:6;19040:16;17280:6;19040:16;27437:9;19040:16;19033:40;19088:71;17271:16;27437:9;17271:16;19140:12;19088:71;;;18748:16;19247:5;19243:18;19237:25;19217:45;;19300:14;;;;27437:9;19304:4;19300:14;;17280:6;27437:9;19282:16;19275:40;19330:71;19396:4;19382:12;19330:71;;;19322:79;;;18906:16;19492:5;19488:18;19482:25;19462:45;;19300:14;27437:9;19549:4;19545:14;;19527:16;27437:9;19527:16;19520:40;19575:71;19641:4;19627:12;19575:71;;;19567:79;;19040:16;19737:5;19733:18;19727:25;19707:45;;;;19300:14;27437:9;19794:4;19790:14;;19772:16;27437:9;19772:16;19765:40;19820:71;19886:4;19872:12;19820:71;;;19913:11;;;20027:5;17535:4;27695:9;27691:18;19997:37;27758:9;27752:4;27748:20;17704:4;27732:9;27728:18;27721:48;27783:76;27854:4;27845:6;27783:76;;;27775:84;27419:450;-1:-1;;;;;;;27419:450;27876:333;19997:37;;;28195:2;28180:18;;19997:37;28031:2;28016:18;;28002:207;28216:256;28278:2;28272:9;28304:17;;;28379:18;28364:34;;28400:22;;;28361:62;28358:2;;;28436:1;;28426:12;28358:2;28278;28445:22;28256:216;;-1:-1;28256:216;28479:313;;28647:18;28639:6;28636:30;28633:2;;;-1:-1;;28669:12;28633:2;-1:-1;28714:4;28702:17;;;28767:15;;28570:222;32783:268;32848:1;32855:101;32869:6;32866:1;32863:13;32855:101;;;32936:11;;;32930:18;32917:11;;;32910:39;32891:2;32884:10;32855:101;;;32971:6;32968:1;32965:13;32962:2;;;-1:-1;;32848:1;33018:16;;33011:27;32832:219;33546:117;31682:42;33633:5;31671:54;33608:5;33605:35;33595:2;;33654:1;;33644:12;33595:2;33589:74;"
            }
        }
    },
    "sourceTreeHashHex": "0xd49fedc46de3c10d069c01f7d356e3e12dfd3b456e27dd36c51a0a60552f68b7",
    "sources": {
        "./FillQuoteTransformer.sol": {
            "id": 36
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 76
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 64
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 68
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 73
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 66
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 70
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 77
        },
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": {
            "id": 69
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": {
            "id": 74
        },
        "../errors/LibTransformERC20RichErrors.sol": {
            "id": 6
        },
        "../vendor/v3/IExchange.sol": {
            "id": 42
        },
        "./Transformer.sol": {
            "id": 40
        },
        "./IERC20Transformer.sol": {
            "id": 37
        },
        "./LibERC20Transformer.sol": {
            "id": 38
        }
    },
    "sourceCodes": {
        "./FillQuoteTransformer.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"../errors/LibTransformERC20RichErrors.sol\";\nimport \"../vendor/v3/IExchange.sol\";\nimport \"./Transformer.sol\";\nimport \"./LibERC20Transformer.sol\";\n\n\n/// @dev A transformer that fills an ERC20 market sell/buy quote.\ncontract FillQuoteTransformer is\n    Transformer\n{\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibERC20Transformer for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Whether we are performing a market sell or buy.\n    enum Side {\n        Sell,\n        Buy\n    }\n\n    /// @dev Transform data to ABI-encode and pass into `transform()`.\n    struct TransformData {\n        // Whether we aer performing a market sell or buy.\n        Side side;\n        // The token being sold.\n        // This should be an actual token, not the ETH pseudo-token.\n        IERC20TokenV06 sellToken;\n        // The token being bought.\n        // This should be an actual token, not the ETH pseudo-token.\n        IERC20TokenV06 buyToken;\n        // The orders to fill.\n        IExchange.Order[] orders;\n        // Signatures for each respective order in `orders`.\n        bytes[] signatures;\n        // Maximum fill amount for each order. This may be shorter than the\n        // number of orders, where missing entries will be treated as `uint256(-1)`.\n        // For sells, this will be the maximum sell amount (taker asset).\n        // For buys, this will be the maximum buy amount (maker asset).\n        uint256[] maxOrderFillAmounts;\n        // Amount of `sellToken` to sell or `buyToken` to buy.\n        // For sells, this may be `uint256(-1)` to sell the entire balance of\n        // `sellToken`.\n        uint256 fillAmount;\n    }\n\n    /// @dev Results of a call to `_fillOrder()`.\n    struct FillOrderResults {\n        // The amount of taker tokens sold, according to balance checks.\n        uint256 takerTokenSoldAmount;\n        // The amount of maker tokens sold, according to balance checks.\n        uint256 makerTokenBoughtAmount;\n        // The amount of protocol fee paid.\n        uint256 protocolFeePaid;\n    }\n\n    /// @dev The Exchange ERC20Proxy ID.\n    bytes4 private constant ERC20_ASSET_PROXY_ID = 0xf47261b0;\n    /// @dev Maximum uint256 value.\n    uint256 private constant MAX_UINT256 = uint256(-1);\n\n    /// @dev The Exchange contract.\n    IExchange public immutable exchange;\n    /// @dev The ERC20Proxy address.\n    address public immutable erc20Proxy;\n\n    /// @dev Create this contract.\n    /// @param exchange_ The Exchange V3 instance.\n    constructor(IExchange exchange_)\n        public\n        Transformer()\n    {\n        exchange = exchange_;\n        erc20Proxy = exchange_.getAssetProxy(ERC20_ASSET_PROXY_ID);\n    }\n\n    /// @dev Sell this contract's entire balance of of `sellToken` in exchange\n    ///      for `buyToken` by filling `orders`. Protocol fees should be attached\n    ///      to this call. `buyToken` and excess ETH will be transferred back to the caller.\n    /// @param data_ ABI-encoded `TransformData`.\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\n    function transform(\n        bytes32, // callDataHash,\n        address payable, // taker,\n        bytes calldata data_\n    )\n        external\n        override\n        returns (bytes4 success)\n    {\n        TransformData memory data = abi.decode(data_, (TransformData));\n\n        // Validate data fields.\n        if (data.sellToken.isTokenETH() || data.buyToken.isTokenETH()) {\n            LibTransformERC20RichErrors.InvalidTransformDataError(\n                LibTransformERC20RichErrors.InvalidTransformDataErrorCode.INVALID_TOKENS,\n                data_\n            ).rrevert();\n        }\n        if (data.orders.length != data.signatures.length) {\n            LibTransformERC20RichErrors.InvalidTransformDataError(\n                LibTransformERC20RichErrors.InvalidTransformDataErrorCode.INVALID_ARRAY_LENGTH,\n                data_\n            ).rrevert();\n        }\n\n        if (data.side == Side.Sell && data.fillAmount == MAX_UINT256) {\n            // If `sellAmount == -1 then we are selling\n            // the entire balance of `sellToken`. This is useful in cases where\n            // the exact sell amount is not exactly known in advance, like when\n            // unwrapping Chai/cUSDC/cDAI.\n            data.fillAmount = data.sellToken.getTokenBalanceOf(address(this));\n        }\n\n        // Approve the ERC20 proxy to spend `sellToken`.\n        data.sellToken.approveIfBelow(erc20Proxy, data.fillAmount);\n\n        // Fill the orders.\n        uint256 singleProtocolFee = exchange.protocolFeeMultiplier().safeMul(tx.gasprice);\n        uint256 ethRemaining = address(this).balance;\n        uint256 boughtAmount = 0;\n        uint256 soldAmount = 0;\n        for (uint256 i = 0; i < data.orders.length; ++i) {\n            // Check if we've hit our targets.\n            if (data.side == Side.Sell) {\n                // Market sell check.\n                if (soldAmount >= data.fillAmount) {\n                    break;\n                }\n            } else {\n                // Market buy check.\n                if (boughtAmount >= data.fillAmount) {\n                    break;\n                }\n            }\n\n            // Ensure we have enough ETH to cover the protocol fee.\n            if (ethRemaining < singleProtocolFee) {\n                LibTransformERC20RichErrors\n                    .InsufficientProtocolFeeError(ethRemaining, singleProtocolFee)\n                    .rrevert();\n            }\n\n            // Fill the order.\n            FillOrderResults memory results;\n            if (data.side == Side.Sell) {\n                // Market sell.\n                results = _sellToOrder(\n                    data.buyToken,\n                    data.sellToken,\n                    data.orders[i],\n                    data.signatures[i],\n                    data.fillAmount.safeSub(soldAmount).min256(\n                        data.maxOrderFillAmounts.length > i\n                        ? data.maxOrderFillAmounts[i]\n                        : MAX_UINT256\n                    ),\n                    singleProtocolFee\n                );\n            } else {\n                // Market buy.\n                results = _buyFromOrder(\n                    data.buyToken,\n                    data.sellToken,\n                    data.orders[i],\n                    data.signatures[i],\n                    data.fillAmount.safeSub(boughtAmount).min256(\n                        data.maxOrderFillAmounts.length > i\n                        ? data.maxOrderFillAmounts[i]\n                        : MAX_UINT256\n                    ),\n                    singleProtocolFee\n                );\n            }\n\n            // Accumulate totals.\n            soldAmount = soldAmount.safeAdd(results.takerTokenSoldAmount);\n            boughtAmount = boughtAmount.safeAdd(results.makerTokenBoughtAmount);\n            ethRemaining = ethRemaining.safeSub(results.protocolFeePaid);\n        }\n\n        // Ensure we hit our targets.\n        if (data.side == Side.Sell) {\n            // Market sell check.\n            if (soldAmount < data.fillAmount) {\n                LibTransformERC20RichErrors\n                    .IncompleteFillSellQuoteError(\n                        address(data.sellToken),\n                        soldAmount,\n                        data.fillAmount\n                    ).rrevert();\n            }\n        } else {\n            // Market buy check.\n            if (boughtAmount < data.fillAmount) {\n                LibTransformERC20RichErrors\n                    .IncompleteFillBuyQuoteError(\n                        address(data.buyToken),\n                        boughtAmount,\n                        data.fillAmount\n                    ).rrevert();\n            }\n        }\n        return LibERC20Transformer.TRANSFORMER_SUCCESS;\n    }\n\n    /// @dev Try to sell up to `sellAmount` from an order.\n    /// @param makerToken The maker/buy token.\n    /// @param takerToken The taker/sell token.\n    /// @param order The order to fill.\n    /// @param signature The signature for `order`.\n    /// @param sellAmount Amount of taker token to sell.\n    /// @param protocolFee The protocol fee needed to fill `order`.\n    function _sellToOrder(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        IExchange.Order memory order,\n        bytes memory signature,\n        uint256 sellAmount,\n        uint256 protocolFee\n    )\n        private\n        returns (FillOrderResults memory results)\n    {\n        IERC20TokenV06 takerFeeToken =\n            _getTokenFromERC20AssetData(order.takerFeeAssetData);\n\n        uint256 takerTokenFillAmount = sellAmount;\n\n        if (order.takerFee != 0) {\n            if (takerFeeToken == makerToken) {\n                // Taker fee is payable in the maker token, so we need to\n                // approve the proxy to spend the maker token.\n                // It isn't worth computing the actual taker fee\n                // since `approveIfBelow()` will set the allowance to infinite. We\n                // just need a reasonable upper bound to avoid unnecessarily re-approving.\n                takerFeeToken.approveIfBelow(erc20Proxy, order.takerFee);\n            } else if (takerFeeToken == takerToken){\n                // Taker fee is payable in the taker token, so we need to\n                // reduce the fill amount to cover the fee.\n                // takerTokenFillAmount' =\n                //   (takerTokenFillAmount * order.takerAssetAmount) /\n                //   (order.takerAssetAmount + order.takerFee)\n                takerTokenFillAmount = LibMathV06.getPartialAmountCeil(\n                    order.takerAssetAmount,\n                    order.takerAssetAmount.safeAdd(order.takerFee),\n                    sellAmount\n                );\n            } else {\n                //  Only support taker or maker asset denominated taker fees.\n                LibTransformERC20RichErrors.InvalidTakerFeeTokenError(\n                    address(takerFeeToken)\n                ).rrevert();\n            }\n        }\n\n        // Clamp fill amount to order size.\n        takerTokenFillAmount = LibSafeMathV06.min256(\n            takerTokenFillAmount,\n            order.takerAssetAmount\n        );\n\n        // Perform the fill.\n        return _fillOrder(\n            order,\n            signature,\n            takerTokenFillAmount,\n            protocolFee,\n            makerToken,\n            takerFeeToken == takerToken\n        );\n    }\n\n    /// @dev Try to buy up to `buyAmount` from an order.\n    /// @param makerToken The maker/buy token.\n    /// @param takerToken The taker/sell token.\n    /// @param order The order to fill.\n    /// @param signature The signature for `order`.\n    /// @param buyAmount Amount of maker token to buy.\n    /// @param protocolFee The protocol fee needed to fill `order`.\n    function _buyFromOrder(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        IExchange.Order memory order,\n        bytes memory signature,\n        uint256 buyAmount,\n        uint256 protocolFee\n    )\n        private\n        returns (FillOrderResults memory results)\n    {\n        IERC20TokenV06 takerFeeToken =\n            _getTokenFromERC20AssetData(order.takerFeeAssetData);\n        // Compute the default taker token fill amount.\n        uint256 takerTokenFillAmount = LibMathV06.getPartialAmountCeil(\n            buyAmount,\n            order.makerAssetAmount,\n            order.takerAssetAmount\n        );\n\n        if (order.takerFee != 0) {\n            if (takerFeeToken == makerToken) {\n                // Taker fee is payable in the maker token.\n                // Adjust the taker token fill amount to account for maker\n                // tokens being lost to the taker fee.\n                // takerTokenFillAmount' =\n                //  (order.takerAssetAmount * buyAmount) /\n                //  (order.makerAssetAmount - order.takerFee)\n                takerTokenFillAmount = LibMathV06.getPartialAmountCeil(\n                    buyAmount,\n                    order.makerAssetAmount.safeSub(order.takerFee),\n                    order.takerAssetAmount\n                );\n                // Approve the proxy to spend the maker token.\n                // It isn't worth computing the actual taker fee\n                // since `approveIfBelow()` will set the allowance to infinite. We\n                // just need a reasonable upper bound to avoid unnecessarily re-approving.\n                takerFeeToken.approveIfBelow(erc20Proxy, order.takerFee);\n            } else if (takerFeeToken != takerToken) {\n                //  Only support taker or maker asset denominated taker fees.\n                LibTransformERC20RichErrors.InvalidTakerFeeTokenError(\n                    address(takerFeeToken)\n                ).rrevert();\n            }\n        }\n\n        // Clamp to order size.\n        takerTokenFillAmount = LibSafeMathV06.min256(\n            order.takerAssetAmount,\n            takerTokenFillAmount\n        );\n\n        // Perform the fill.\n        return _fillOrder(\n            order,\n            signature,\n            takerTokenFillAmount,\n            protocolFee,\n            makerToken,\n            takerFeeToken == takerToken\n        );\n    }\n\n    /// @dev Attempt to fill an order. If the fill reverts, the revert will be\n    ///      swallowed and `results` will be zeroed out.\n    /// @param order The order to fill.\n    /// @param signature The order signature.\n    /// @param takerAssetFillAmount How much taker asset to fill.\n    /// @param protocolFee The protocol fee needed to fill this order.\n    /// @param makerToken The maker token.\n    /// @param isTakerFeeInTakerToken Whether the taker fee token is the same as the\n    ///        taker token.\n    function _fillOrder(\n        IExchange.Order memory order,\n        bytes memory signature,\n        uint256 takerAssetFillAmount,\n        uint256 protocolFee,\n        IERC20TokenV06 makerToken,\n        bool isTakerFeeInTakerToken\n    )\n        private\n        returns (FillOrderResults memory results)\n    {\n        // Track changes in the maker token balance.\n        uint256 initialMakerTokenBalance = makerToken.balanceOf(address(this));\n        try\n            exchange.fillOrder\n                {value: protocolFee}\n                (order, takerAssetFillAmount, signature)\n            returns (IExchange.FillResults memory fillResults)\n        {\n            // Update maker quantity based on changes in token balances.\n            results.makerTokenBoughtAmount = makerToken.balanceOf(address(this))\n                .safeSub(initialMakerTokenBalance);\n            // We can trust the other fill result quantities.\n            results.protocolFeePaid = fillResults.protocolFeePaid;\n            results.takerTokenSoldAmount = fillResults.takerAssetFilledAmount;\n            // If the taker fee is payable in the taker asset, include the\n            // taker fee in the total amount sold.\n            if (isTakerFeeInTakerToken) {\n                results.takerTokenSoldAmount =\n                    results.takerTokenSoldAmount.safeAdd(fillResults.takerFeePaid);\n            }\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n        }\n    }\n\n    /// @dev Extract the token from plain ERC20 asset data.\n    ///      If the asset-data is empty, a zero token address will be returned.\n    /// @param assetData The order asset data.\n    function _getTokenFromERC20AssetData(bytes memory assetData)\n        private\n        pure\n        returns (IERC20TokenV06 token)\n    {\n        if (assetData.length == 0) {\n            return IERC20TokenV06(address(0));\n        }\n        if (assetData.length != 36 ||\n            LibBytesV06.readBytes4(assetData, 0) != ERC20_ASSET_PROXY_ID)\n        {\n            LibTransformERC20RichErrors\n                .InvalidERC20AssetDataError(assetData)\n                .rrevert();\n        }\n        return IERC20TokenV06(LibBytesV06.readAddress(assetData, 16));\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length == 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length == 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "../errors/LibTransformERC20RichErrors.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibTransformERC20RichErrors {\n\n    // solhint-disable func-name-mixedcase,separate-by-one-line-in-contract\n\n    function InsufficientEthAttachedError(\n        uint256 ethAttached,\n        uint256 ethNeeded\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InsufficientEthAttachedError(uint256,uint256)\")),\n            ethAttached,\n            ethNeeded\n        );\n    }\n\n    function IncompleteTransformERC20Error(\n        address outputToken,\n        uint256 outputTokenAmount,\n        uint256 minOutputTokenAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IncompleteTransformERC20Error(address,uint256,uint256)\")),\n            outputToken,\n            outputTokenAmount,\n            minOutputTokenAmount\n        );\n    }\n\n    function NegativeTransformERC20OutputError(\n        address outputToken,\n        uint256 outputTokenLostAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"NegativeTransformERC20OutputError(address,uint256)\")),\n            outputToken,\n            outputTokenLostAmount\n        );\n    }\n\n    function TransformerFailedError(\n        address transformer,\n        bytes memory transformerData,\n        bytes memory resultData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransformerFailedError(address,bytes,bytes)\")),\n            transformer,\n            transformerData,\n            resultData\n        );\n    }\n\n    // Common Transformer errors ///////////////////////////////////////////////\n\n    function OnlyCallableByDeployerError(\n        address caller,\n        address deployer\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableByDeployerError(address,address)\")),\n            caller,\n            deployer\n        );\n    }\n\n    function InvalidExecutionContextError(\n        address actualContext,\n        address expectedContext\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidExecutionContextError(address,address)\")),\n            actualContext,\n            expectedContext\n        );\n    }\n\n    enum InvalidTransformDataErrorCode {\n        INVALID_TOKENS,\n        INVALID_ARRAY_LENGTH\n    }\n\n    function InvalidTransformDataError(\n        InvalidTransformDataErrorCode errorCode,\n        bytes memory transformData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidTransformDataError(uint8,bytes)\")),\n            errorCode,\n            transformData\n        );\n    }\n\n    // FillQuoteTransformer errors /////////////////////////////////////////////\n\n    function IncompleteFillSellQuoteError(\n        address sellToken,\n        uint256 soldAmount,\n        uint256 sellAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IncompleteFillSellQuoteError(address,uint256,uint256)\")),\n            sellToken,\n            soldAmount,\n            sellAmount\n        );\n    }\n\n    function IncompleteFillBuyQuoteError(\n        address buyToken,\n        uint256 boughtAmount,\n        uint256 buyAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IncompleteFillBuyQuoteError(address,uint256,uint256)\")),\n            buyToken,\n            boughtAmount,\n            buyAmount\n        );\n    }\n\n    function InsufficientTakerTokenError(\n        uint256 tokenBalance,\n        uint256 tokensNeeded\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InsufficientTakerTokenError(uint256,uint256)\")),\n            tokenBalance,\n            tokensNeeded\n        );\n    }\n\n    function InsufficientProtocolFeeError(\n        uint256 ethBalance,\n        uint256 ethNeeded\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InsufficientProtocolFeeError(uint256,uint256)\")),\n            ethBalance,\n            ethNeeded\n        );\n    }\n\n    function InvalidERC20AssetDataError(\n        bytes memory assetData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidERC20AssetDataError(bytes)\")),\n            assetData\n        );\n    }\n\n    function InvalidTakerFeeTokenError(\n        address token\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidTakerFeeTokenError(address)\")),\n            token\n        );\n    }\n}\n",
        "../vendor/v3/IExchange.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Interface to the V3 Exchange.\ninterface IExchange {\n\n    /// @dev V3 Order structure.\n    struct Order {\n        // Address that created the order.\n        address makerAddress;\n        // Address that is allowed to fill the order.\n        // If set to 0, any address is allowed to fill the order.\n        address takerAddress;\n        // Address that will recieve fees when order is filled.\n        address feeRecipientAddress;\n        // Address that is allowed to call Exchange contract methods that affect this order.\n        // If set to 0, any address is allowed to call these methods.\n        address senderAddress;\n        // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 makerAssetAmount;\n        // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 takerAssetAmount;\n        // Fee paid to feeRecipient by maker when order is filled.\n        uint256 makerFee;\n        // Fee paid to feeRecipient by taker when order is filled.\n        uint256 takerFee;\n        // Timestamp in seconds at which order expires.\n        uint256 expirationTimeSeconds;\n        // Arbitrary number to facilitate uniqueness of the order's hash.\n        uint256 salt;\n        // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset.\n        // The leading bytes4 references the id of the asset proxy.\n        bytes makerAssetData;\n        // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset.\n        // The leading bytes4 references the id of the asset proxy.\n        bytes takerAssetData;\n        // Encoded data that can be decoded by a specified proxy contract when transferring makerFeeAsset.\n        // The leading bytes4 references the id of the asset proxy.\n        bytes makerFeeAssetData;\n        // Encoded data that can be decoded by a specified proxy contract when transferring takerFeeAsset.\n        // The leading bytes4 references the id of the asset proxy.\n        bytes takerFeeAssetData;\n    }\n\n    /// @dev V3 `fillOrder()` results.`\n    struct FillResults {\n        // Total amount of makerAsset(s) filled.\n        uint256 makerAssetFilledAmount;\n        // Total amount of takerAsset(s) filled.\n        uint256 takerAssetFilledAmount;\n        // Total amount of fees paid by maker(s) to feeRecipient(s).\n        uint256 makerFeePaid;\n        // Total amount of fees paid by taker to feeRecipients(s).\n        uint256 takerFeePaid;\n        // Total amount of fees paid by taker to the staking contract.\n        uint256 protocolFeePaid;\n    }\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        Order calldata order,\n        uint256 takerAssetFillAmount,\n        bytes calldata signature\n    )\n        external\n        payable\n        returns (FillResults memory fillResults);\n\n    /// @dev Returns the protocolFeeMultiplier\n    /// @return multiplier The multiplier for protocol fees.\n    function protocolFeeMultiplier()\n        external\n        view\n        returns (uint256 multiplier);\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return proxyAddress The asset proxy registered to assetProxyId.\n    ///         Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address proxyAddress);\n}\n",
        "./Transformer.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibTransformERC20RichErrors.sol\";\nimport \"./IERC20Transformer.sol\";\n\n\n/// @dev Abstract base class for transformers.\nabstract contract Transformer is\n    IERC20Transformer\n{\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev The address of the deployer.\n    address public immutable deployer;\n    /// @dev The original address of this contract.\n    address private immutable _implementation;\n\n    /// @dev Create this contract.\n    constructor() public {\n        deployer = msg.sender;\n        _implementation = address(this);\n    }\n\n    /// @dev Destruct this contract. Only callable by the deployer and will not\n    ///      succeed in the context of a delegatecall (from another contract).\n    /// @param ethRecipient The recipient of ETH held in this contract.\n    function die(address payable ethRecipient)\n        external\n        virtual\n    {\n        // Only the deployer can call this.\n        if (msg.sender != deployer) {\n            LibTransformERC20RichErrors\n                .OnlyCallableByDeployerError(msg.sender, deployer)\n                .rrevert();\n        }\n        // Must be executing our own context.\n        if (address(this) != _implementation) {\n            LibTransformERC20RichErrors\n                .InvalidExecutionContextError(address(this), _implementation)\n                .rrevert();\n        }\n        selfdestruct(ethRecipient);\n    }\n}\n",
        "./IERC20Transformer.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev A transformation callback used in `TransformERC20.transformERC20()`.\ninterface IERC20Transformer {\n\n    /// @dev Called from `TransformERC20.transformERC20()`. This will be\n    ///      delegatecalled in the context of the FlashWallet instance being used.\n    /// @param callDataHash The hash of the `TransformERC20.transformERC20()` calldata.\n    /// @param taker The taker address (caller of `TransformERC20.transformERC20()`).\n    /// @param data Arbitrary data to pass to the transformer.\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\n    function transform(\n        bytes32 callDataHash,\n        address payable taker,\n        bytes calldata data\n    )\n        external\n        returns (bytes4 success);\n}\n",
        "./LibERC20Transformer.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\nlibrary LibERC20Transformer {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev ETH pseudo-token address.\n    address constant internal ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev Return value indicating success in `IERC20Transformer.transform()`.\n    ///      This is just `keccak256('TRANSFORMER_SUCCESS')`.\n    bytes4 constant internal TRANSFORMER_SUCCESS = 0x13c9929e;\n\n    /// @dev Transfer ERC20 tokens and ETH.\n    /// @param token An ERC20 or the ETH pseudo-token address (`ETH_TOKEN_ADDRESS`).\n    /// @param to The recipient.\n    /// @param amount The transfer amount.\n    function transformerTransfer(\n        IERC20TokenV06 token,\n        address payable to,\n        uint256 amount\n    )\n        internal\n    {\n        if (isTokenETH(token)) {\n            to.transfer(amount);\n        } else {\n            token.compatTransfer(to, amount);\n        }\n    }\n\n    /// @dev Check if a token is the ETH pseudo-token.\n    /// @param token The token to check.\n    /// @return isETH `true` if the token is the ETH pseudo-token.\n    function isTokenETH(IERC20TokenV06 token)\n        internal\n        pure\n        returns (bool isETH)\n    {\n        return address(token) == ETH_TOKEN_ADDRESS;\n    }\n\n    /// @dev Check the balance of an ERC20 token or ETH.\n    /// @param token An ERC20 or the ETH pseudo-token address (`ETH_TOKEN_ADDRESS`).\n    /// @param owner Holder of the tokens.\n    /// @return tokenBalance The balance of `owner`.\n    function getTokenBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 tokenBalance)\n    {\n        if (isTokenETH(token)) {\n            return owner.balance;\n        }\n        return token.balanceOf(owner);\n    }\n\n    /// @dev RLP-encode a 32-bit or less account nonce.\n    /// @param nonce A positive integer in the range 0 <= nonce < 2^32.\n    /// @return rlpNonce The RLP encoding.\n    function rlpEncodeNonce(uint32 nonce)\n        internal\n        pure\n        returns (bytes memory rlpNonce)\n    {\n        // See https://github.com/ethereum/wiki/wiki/RLP for RLP encoding rules.\n        if (nonce == 0) {\n            rlpNonce = new bytes(1);\n            rlpNonce[0] = 0x80;\n        } else if (nonce < 0x80) {\n            rlpNonce = new bytes(1);\n            rlpNonce[0] = byte(uint8(nonce));\n        } else if (nonce <= 0xFF) {\n            rlpNonce = new bytes(2);\n            rlpNonce[0] = 0x81;\n            rlpNonce[1] = byte(uint8(nonce));\n        } else if (nonce <= 0xFFFF) {\n            rlpNonce = new bytes(3);\n            rlpNonce[0] = 0x82;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[2] = byte(uint8(nonce));\n        } else if (nonce <= 0xFFFFFF) {\n            rlpNonce = new bytes(4);\n            rlpNonce[0] = 0x83;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF0000) >> 16));\n            rlpNonce[2] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[3] = byte(uint8(nonce));\n        } else {\n            rlpNonce = new bytes(5);\n            rlpNonce[0] = 0x84;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF000000) >> 24));\n            rlpNonce[2] = byte(uint8((nonce & 0xFF0000) >> 16));\n            rlpNonce[3] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[4] = byte(uint8(nonce));\n        }\n    }\n\n    /// @dev Compute the expected deployment address by `deployer` at\n    ///      the nonce given by `deploymentNonce`.\n    /// @param deployer The address of the deployer.\n    /// @param deploymentNonce The nonce that the deployer had when deploying\n    ///        a contract.\n    /// @return deploymentAddress The deployment address.\n    function getDeployedAddress(address deployer, uint32 deploymentNonce)\n        internal\n        pure\n        returns (address payable deploymentAddress)\n    {\n        // The address of if a deployed contract is the lower 20 bytes of the\n        // hash of the RLP-encoded deployer's account address + account nonce.\n        // See: https://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n        bytes memory rlpNonce = rlpEncodeNonce(deploymentNonce);\n        return address(uint160(uint256(keccak256(abi.encodePacked(\n            byte(uint8(0xC0 + 21 + rlpNonce.length)),\n            byte(uint8(0x80 + 20)),\n            deployer,\n            rlpNonce\n        )))));\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.10+commit.00c0fcaf",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/node_modules/@0x/contracts-erc20"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
