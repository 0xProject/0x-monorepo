{
    "schemaVersion": "2.0.0",
    "contractName": "TokenInteract",
    "compilerOutput": {
        "abi": [],
        "devdoc": {
            "author": "dYdX * This library contains basic functions for interacting with ERC20 tokens",
            "methods": {},
            "title": "TokenInteract"
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72305820b2026a40dd6a0312660efabbebc8315f7bd7b9e8742f13a059fe1faf2c35d92264736f6c63430005090032",
                "opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0xb2 MUL PUSH11 0x40DD6A0312660EFABBEBC8 BALANCE 0x5f PUSH28 0xD7B9E8742F13A059FE1FAF2C35D92264736F6C634300050900320000 ",
                "sourceMap": "952:2716:21:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "0x73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72305820b2026a40dd6a0312660efabbebc8315f7bd7b9e8742f13a059fe1faf2c35d92264736f6c63430005090032",
                "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0xb2 MUL PUSH11 0x40DD6A0312660EFABBEBC8 BALANCE 0x5f PUSH28 0xD7B9E8742F13A059FE1FAF2C35D92264736F6C634300050900320000 ",
                "sourceMap": "952:2716:21:-;;;;;;;;"
            }
        }
    },
    "sources": {
        "TokenInteract.sol": {
            "id": 21
        },
        "GeneralERC20.sol": {
            "id": 18
        }
    },
    "sourceCodes": {
        "TokenInteract.sol": "/* Retrieved from https://raw.githubusercontent.com/dydxprotocol/exchange-wrappers/master/contracts/lib/TokenInteract.sol\non August 29, 2019. */\n\n/*\n\n    Copyright 2018 dYdX Trading Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n*/\n\npragma solidity 0.5.9;\n\nimport { GeneralERC20 } from \"./GeneralERC20.sol\";\n\n\n/**\n * @title TokenInteract\n * @author dYdX\n *\n * This library contains basic functions for interacting with ERC20 tokens\n */\nlibrary TokenInteract {\n    function balanceOf(\n        address token,\n        address owner\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        return GeneralERC20(token).balanceOf(owner);\n    }\n\n    function allowance(\n        address token,\n        address owner,\n        address spender\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        return GeneralERC20(token).allowance(owner, spender);\n    }\n\n    function approve(\n        address token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        GeneralERC20(token).approve(spender, amount);\n\n        require(\n            checkSuccess(),\n            \"TokenInteract#approve: Approval failed\"\n        );\n    }\n\n    function transfer(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        address from = address(this);\n        if (\n            amount == 0\n            || from == to\n        ) {\n            return;\n        }\n\n        GeneralERC20(token).transfer(to, amount);\n\n        require(\n            checkSuccess(),\n            \"TokenInteract#transfer: Transfer failed\"\n        );\n    }\n\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        if (\n            amount == 0\n            || from == to\n        ) {\n            return;\n        }\n\n        GeneralERC20(token).transferFrom(from, to, amount);\n\n        require(\n            checkSuccess(),\n            \"TokenInteract#transferFrom: TransferFrom failed\"\n        );\n    }\n\n    // ============ Private Helper-Functions ============\n\n    /**\n     * Checks the return value of the previous function up to 32 bytes. Returns true if the previous\n     * function returned 0 bytes or 32 bytes that are not all-zero.\n     */\n    function checkSuccess(\n    )\n        private\n        pure\n        returns (bool)\n    {\n        uint256 returnValue = 0;\n\n        /* solium-disable-next-line security/no-inline-assembly */\n        assembly {\n            // check number of bytes returned from last function call\n            switch returndatasize\n\n            // no bytes returned: assume success\n            case 0x0 {\n                returnValue := 1\n            }\n\n            // 32 bytes returned: check if non-zero\n            case 0x20 {\n                // copy 32 bytes into scratch space\n                returndatacopy(0x0, 0x0, 0x20)\n\n                // load those bytes into returnValue\n                returnValue := mload(0x0)\n            }\n\n            // not sure what was returned: dont mark as success\n            default { }\n        }\n\n        return returnValue != 0;\n    }\n}\n",
        "GeneralERC20.sol": "/* Retrieved from https://raw.githubusercontent.com/dydxprotocol/exchange-wrappers/master/contracts/lib/GeneralERC20.sol\non August 29, 2019. */\n\n/*\n\n    Copyright 2018 dYdX Trading Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n*/\n\npragma solidity 0.5.9;\n\n\n/**\n * @title GeneralERC20\n * @author dYdX\n *\n * Interface for using ERC20 Tokens. We have to use a special interface to call ERC20 functions so\n * that we dont automatically revert when calling non-compliant tokens that have no return value for\n * transfer(), transferFrom(), or approve().\n */\ninterface GeneralERC20 {\n    function totalSupply(\n    )\n        external\n        view\n        returns (uint256);\n\n    function balanceOf(\n        address who\n    )\n        external\n        view\n        returns (uint256);\n\n    function allowance(\n        address owner,\n        address spender\n    )\n        external\n        view\n        returns (uint256);\n\n    function transfer(\n        address to,\n        uint256 value\n    )\n        external;\n\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external;\n\n    function approve(\n        address spender,\n        uint256 value\n    )\n        external;\n}\n"
    },
    "sourceTreeHashHex": "0x63680273fb12cb9ec5e6a437937935e7b270136d75092a0770bf5d75b03f4b3f",
    "compiler": {
        "name": "solc",
        "version": "soljson-v0.5.9+commit.e560f70d.js",
        "settings": {
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap",
                        "devdoc"
                    ]
                }
            },
            "evmVersion": "constantinople",
            "remappings": [
                "@0x/contracts-exchange=/home/gene/dev/0x-monorepo/node_modules/@0x/contracts-exchange",
                "@0x/contracts-exchange-libs=/home/gene/dev/0x-monorepo/node_modules/@0x/contracts-exchange-libs",
                "@0x/contracts-utils=/home/gene/dev/0x-monorepo/node_modules/@0x/contracts-utils",
                "@0x/contracts-coordinator=/home/gene/dev/0x-monorepo/node_modules/@0x/contracts-coordinator"
            ]
        }
    },
    "networks": {}
}
