{
    "schemaVersion": "2.0.0",
    "contractName": "MathHelpers",
    "compilerOutput": {
        "abi": [],
        "devdoc": {
            "author": "dYdX * This library helps with common math functions in Solidity",
            "methods": {},
            "title": "MathHelpers"
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72305820e0b273f17168da8ba4148a099c430c71a2990cdb0938d235c2a04a6af00d9ca564736f6c63430005090032",
                "opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0xe0 0xb2 PUSH20 0xF17168DA8BA4148A099C430C71A2990CDB0938D2 CALLDATALOAD 0xc2 LOG0 0x4a PUSH11 0xF00D9CA564736F6C634300 SDIV MULMOD STOP ORIGIN ",
                "sourceMap": "926:2972:19:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "0x73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72305820e0b273f17168da8ba4148a099c430c71a2990cdb0938d235c2a04a6af00d9ca564736f6c63430005090032",
                "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0xe0 0xb2 PUSH20 0xF17168DA8BA4148A099C430C71A2990CDB0938D2 CALLDATALOAD 0xc2 LOG0 0x4a PUSH11 0xF00D9CA564736F6C634300 SDIV MULMOD STOP ORIGIN ",
                "sourceMap": "926:2972:19:-;;;;;;;;"
            }
        }
    },
    "sources": {
        "MathHelpers.sol": {
            "id": 19
        },
        "SafeMath.sol": {
            "id": 20
        }
    },
    "sourceCodes": {
        "MathHelpers.sol": "/* Retrieved from https://raw.githubusercontent.com/dydxprotocol/exchange-wrappers/master/contracts/lib/MathHelpers.sol\non August 29, 2019. */\n\n/*\n\n    Copyright 2018 dYdX Trading Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n*/\n\npragma solidity 0.5.9;\n\nimport { SafeMath } from \"./SafeMath.sol\";\n\n\n/**\n * @title MathHelpers\n * @author dYdX\n *\n * This library helps with common math functions in Solidity\n */\nlibrary MathHelpers {\n    using SafeMath for uint256;\n\n    /**\n     * Calculates partial value given a numerator and denominator.\n     *\n     * @param  numerator    Numerator\n     * @param  denominator  Denominator\n     * @param  target       Value to calculate partial of\n     * @return              target * numerator / denominator\n     */\n    function getPartialAmount(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        return numerator.mul(target).div(denominator);\n    }\n\n    /**\n     * Calculates partial value given a numerator and denominator, rounded up.\n     *\n     * @param  numerator    Numerator\n     * @param  denominator  Denominator\n     * @param  target       Value to calculate partial of\n     * @return              Rounded-up result of target * numerator / denominator\n     */\n    function getPartialAmountRoundedUp(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        return divisionRoundedUp(numerator.mul(target), denominator);\n    }\n\n    /**\n     * Calculates division given a numerator and denominator, rounded up.\n     *\n     * @param  numerator    Numerator.\n     * @param  denominator  Denominator.\n     * @return              Rounded-up result of numerator / denominator\n     */\n    function divisionRoundedUp(\n        uint256 numerator,\n        uint256 denominator\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        assert(denominator != 0); // coverage-enable-line\n        if (numerator == 0) {\n            return 0;\n        }\n        return numerator.sub(1).div(denominator).add(1);\n    }\n\n    /**\n     * Calculates and returns the maximum value for a uint256 in solidity\n     *\n     * @return  The maximum value for uint256\n     */\n    function maxUint256(\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        return 2 ** 256 - 1;\n    }\n\n    /**\n     * Calculates and returns the maximum value for a uint256 in solidity\n     *\n     * @return  The maximum value for uint256\n     */\n    function maxUint32(\n    )\n        internal\n        pure\n        returns (uint32)\n    {\n        return 2 ** 32 - 1;\n    }\n\n    /**\n     * Returns the number of bits in a uint256. That is, the lowest number, x, such that n >> x == 0\n     *\n     * @param  n  The uint256 to get the number of bits in\n     * @return    The number of bits in n\n     */\n    function getNumBits(\n        uint256 n\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 first = 0;\n        uint256 last = 256;\n        while (first < last) {\n            uint256 check = (first + last) / 2;\n            if ((n >> check) == 0) {\n                last = check;\n            } else {\n                first = check + 1;\n            }\n        }\n        assert(first <= 256);\n        return first;\n    }\n}\n",
        "SafeMath.sol": "/**\n * Taken from https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/math/SafeMath.sol\n * on August 29, 2019.\n */\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "sourceTreeHashHex": "0xa2de13c054c0f77b8457e76b266ee49c4046ea9162efec6de0a0cb8e536e03dd",
    "compiler": {
        "name": "solc",
        "version": "soljson-v0.5.9+commit.e560f70d.js",
        "settings": {
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap",
                        "devdoc"
                    ]
                }
            },
            "evmVersion": "constantinople",
            "remappings": [
                "@0x/contracts-exchange=/home/gene/dev/0x-monorepo/node_modules/@0x/contracts-exchange",
                "@0x/contracts-exchange-libs=/home/gene/dev/0x-monorepo/node_modules/@0x/contracts-exchange-libs",
                "@0x/contracts-utils=/home/gene/dev/0x-monorepo/node_modules/@0x/contracts-utils",
                "@0x/contracts-coordinator=/home/gene/dev/0x-monorepo/node_modules/@0x/contracts-coordinator"
            ]
        }
    },
    "networks": {}
}
