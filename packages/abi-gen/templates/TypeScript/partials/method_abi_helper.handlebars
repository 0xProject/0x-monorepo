/**
 * Returns the ABI encoded transaction data needed to send an Ethereum transaction calling this method. Before
 * sending the Ethereum tx, this encoded tx data can first be sent to a separate signing service or can be used
 * to create a 0x transaction (see protocol spec for more details).
{{> params_docstring inputs=inputs docstrings=devdoc.params}}
 */
getABIEncodedTransactionData(
    {{> typed_params inputs=inputs}}
    ): string {
    {{#each inputs}}
    {{#assertionType name type}}{{/assertionType}}
    {{/each}}
    const self = this as any as {{contractName}}Contract;
    const abiEncodedTransactionData = self._strictEncodeArguments('{{this.functionSignature}}', [{{> normalized_params inputs=inputs}}]);
    return abiEncodedTransactionData;
},
getABIDecodedTransactionData(
    callData: string
): ({{> return_type inputs=inputs ~}}) {
    const self = this as any as {{contractName}}Contract;
    const abiEncoder = self._lookupAbiEncoder('{{this.functionSignature}}');
    // tslint:disable boolean-naming
    const abiDecodedCallData = abiEncoder.strictDecode<{{> return_type inputs=inputs}}>(callData);
    return abiDecodedCallData;
},
getABIDecodedReturnData(
    returnData: string
): ({{> return_type outputs=outputs ~}}) {
    const self = this as any as {{contractName}}Contract;
    const abiEncoder = self._lookupAbiEncoder('{{this.functionSignature}}');
    // tslint:disable boolean-naming
    const abiDecodedReturnData = abiEncoder.strictDecodeReturnValue<{{> return_type outputs=outputs}}>(returnData);
    return abiDecodedReturnData;
},
