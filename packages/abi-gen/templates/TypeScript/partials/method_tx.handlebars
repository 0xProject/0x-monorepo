async sendTransactionAsync(
    txData?: Partial<TxData> | undefined,
    opts: SendTransactionOpts = { shouldValidate: true },
): Promise<string> {
    const encodedData = self._strictEncodeArguments(functionSignature, [{{> normalized_params inputs=inputs}}]);
    const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({...txData, data: encodedData});
    if (opts.shouldValidate !== false) {
        await this.callAsync(txDataWithDefaults);
    }
    return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
},
awaitTransactionSuccessAsync(
    txData?: Partial<TxData>,
    opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
    return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
},
async estimateGasAsync(
    txData?: Partial<TxData> | undefined,
): Promise<number> {
    const encodedData = self._strictEncodeArguments(functionSignature, [{{> normalized_params inputs=inputs}}]);
    const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({ ...txData, data: encodedData, });
    return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
},
