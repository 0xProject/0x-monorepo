async rawCallAsync(
    callData: Partial<CallData> = {},
    defaultBlock?: BlockParam,
): Promise<string> {
    BaseContract._assertCallParams(callData, defaultBlock);
    {{#ifEquals this.stateMutability "pure" }}
    if (self._deployedBytecodeIfExists) {
        return await self._evmExecAsync(this.getABIEncodedTransactionData());
    } else {
        return await self._performCallAsync({ data: this.getABIEncodedTransactionData(), ...callData }, defaultBlock);
    }
    {{else}}
    return await self._performCallAsync({ data: this.getABIEncodedTransactionData(), ...callData }, defaultBlock);
    {{/ifEquals}}
},
async callAsync(
    callData: Partial<CallData> = {},
    defaultBlock?: BlockParam,
): Promise<{{> return_type outputs=outputs}}> {
    let rawCallResult = await this.rawCallAsync(callData, defaultBlock);
    const abiEncoder = self._lookupAbiEncoder(functionSignature);
    BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
    return abiEncoder.strictDecodeReturnValue<{{> return_type outputs=outputs}}>(rawCallResult);
},
getABIEncodedTransactionData(): string {
    return self._strictEncodeArguments(functionSignature, [{{> normalized_params inputs=inputs}}]);
},
