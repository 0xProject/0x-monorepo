public {{this.name}} = {
    async sendTransactionAsync(
    {{> typed_params inputs=inputs}}
    {{#this.payable}}
        txData: TxDataPayable = {},
    {{/this.payable}}
    {{^this.payable}}
        txData: TxData = {},
    {{/this.payable}}
    ): Promise<string> {
        const self = this as {{contractName}}Contract;
        const inputAbi = _.find(this.abi, {name: '{{this.name}}'}).inputs;
        [{{> params inputs=inputs}}] = BaseContract._transformABIData(inputAbi, [{{> params inputs=inputs}}], BaseContract._bigNumberToString.bind(this));
        const encodedData = this._ethersInterface.functions.{{this.name}}(
            {{> params inputs=inputs}}
        ).data
        const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
            {
                ...txData,
                data: encodedData,
            },
            self.{{this.name}}.estimateGasAsync.bind(
                self,
                {{> params inputs=inputs}}
            ),
        );
        const txHash = await this._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
        return txHash;
    },
    async estimateGasAsync(
    {{> typed_params inputs=inputs}}
        txData: TxData = {},
    ): Promise<number> {
        const self = this as {{contractName}}Contract;
        const inputAbi = _.find(this.abi, {name: '{{this.name}}'}).inputs;
        [{{> params inputs=inputs}}] = BaseContract._transformABIData(inputAbi, [{{> params inputs=inputs}}], BaseContract._bigNumberToString.bind(this));
        const encodedData = this._ethersInterface.functions.{{this.name}}(
            {{> params inputs=inputs}}
        ).data
        const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
            {
                ...txData,
                data: encodedData,
            }
        );
        const gas = await this._web3Wrapper.estimateGasAsync(txDataWithDefaults);
        return gas;
    },
    getABIEncodedTransactionData(
    {{> typed_params inputs=inputs}}
        txData: TxData = {},
    ): string {
        const self = this as {{contractName}}Contract;
        const inputAbi = _.find(this.abi, {name: '{{this.name}}'}).inputs;
        [{{> params inputs=inputs}}] = BaseContract._transformABIData(inputAbi, [{{> params inputs=inputs}}], BaseContract._bigNumberToString.bind(this));
        const abiEncodedTransactionData = this._ethersInterface.functions.{{this.name}}(
            {{> params inputs=inputs}}
        ).data
        return abiEncodedTransactionData;
    },
    {{> callAsync}}
};
