{
	"schemaVersion": "2.0.0",
	"contractName": "ReentrantERC20Token",
	"compilerOutput": {
		"abi": [
			{
				"constant": false,
				"inputs": [
					{
						"name": "_spender",
						"type": "address"
					},
					{
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_from",
						"type": "address"
					},
					{
						"name": "_to",
						"type": "address"
					},
					{
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_to",
						"type": "address"
					},
					{
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_currentFunctionId",
						"type": "uint8"
					}
				],
				"name": "setCurrentFunction",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "_owner",
						"type": "address"
					},
					{
						"name": "_spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "_exchange",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "_from",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "_to",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "_spender",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x60806040526003805460a060020a60ff021916905534801561002057600080fd5b506040516020806113a3833981018060405261003f9190810190610077565b60038054600160a060020a031916600160a060020a03929092169190911790556100a9565b6000610070825161009d565b9392505050565b60006020828403121561008957600080fd5b60006100958484610064565b949350505050565b600160a060020a031690565b6112eb806100b86000396000f3006080604052600436106100825763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663095ea7b3811461008757806318160ddd146100bd57806323b872dd146100df57806370a08231146100ff578063a9059cbb1461011f578063b348a4d41461013f578063dd62ed3e14610161575b600080fd5b34801561009357600080fd5b506100a76100a2366004610d39565b610181565b6040516100b49190611129565b60405180910390f35b3480156100c957600080fd5b506100d26101f9565b6040516100b4919061120f565b3480156100eb57600080fd5b506100a76100fa366004610cec565b6101ff565b34801561010b57600080fd5b506100d261011a366004610c8c565b6108b8565b34801561012b57600080fd5b506100a761013a366004610d39565b6108e0565b34801561014b57600080fd5b5061015f61015a366004610d69565b6109ff565b005b34801561016d57600080fd5b506100d261017c366004610cb2565b610a4b565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906101e790869061120f565b60405180910390a35060015b92915050565b60025490565b6000610209610bae565b60608080808080600060035474010000000000000000000000000000000000000000900460ff908116911614156102f6576040517fb4be83d500000000000000000000000000000000000000000000000000000000906102729089906000908a90602401611186565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529150610719565b60035460ff740100000000000000000000000000000000000000009091041660011415610355576040517f64a3bc1500000000000000000000000000000000000000000000000000000000906102729089906000908a90602401611186565b60035460ff7401000000000000000000000000000000000000000090910416600214156103b3576040517f297bb70b0000000000000000000000000000000000000000000000000000000090610272908790879087906024016110be565b6003805474010000000000000000000000000000000000000000900460ff16141561040f576040517f4d0ae5460000000000000000000000000000000000000000000000000000000090610272908790879087906024016110be565b60035460ff74010000000000000000000000000000000000000000909104166004141561046e576040517fe5fa431b000000000000000000000000000000000000000000000000000000009061027290879060009087906024016110f7565b60035460ff7401000000000000000000000000000000000000000090910416600514156104cd576040517f7e1d9808000000000000000000000000000000000000000000000000000000009061027290879060009087906024016110f7565b60035460ff74010000000000000000000000000000000000000000909104166006141561052d576040517f3c28d861000000000000000000000000000000000000000000000000000000009061027290899081908a9081906024016111b8565b60035460ff740100000000000000000000000000000000000000009091041660071415610587576040517fd46b02c30000000000000000000000000000000000000000000000000000000090610272908990602401611175565b60035460ff7401000000000000000000000000000000000000000090910416600814156105e1576040517f4ac1478200000000000000000000000000000000000000000000000000000000906102729087906024016110ad565b60035460ff74010000000000000000000000000000000000000000909104166009141561063c576040517f4f9559b1000000000000000000000000000000000000000000000000000000009061027290600090602401611137565b60035460ff7401000000000000000000000000000000000000000090910416600a1415610719576040517f77fcce680000000000000000000000000000000000000000000000000000000090610699906000908190602401611092565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915291505b600354604051835173ffffffffffffffffffffffffffffffffffffffff909216918491908190602084019080838360005b8381101561076257818101518382015260200161074a565b50505050905090810190601f16801561078f5780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af1505060408051606480825260a08201909252915060208201610c808038833901905050905060646000602083013e604080517f4572726f7228737472696e6729000000000000000000000000000000000000008152905190819003600d01812061089d9183919061081490602401611165565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529063ffffffff610a8316565b156108a757600080fd5b5060019a9950505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b33600090815260208190526040812054821115610932576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092990611145565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020548281011015610993576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092990611155565b336000818152602081905260408082208054869003905573ffffffffffffffffffffffffffffffffffffffff861680835291819020805486019055519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906101e790869061120f565b6003805460ff90921674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b600081518351148015610ba75750816040518082805190602001908083835b60208310610adf57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610aa2565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199092169116179052604051919093018190038120885190955088945090928392508401908083835b60208310610b7457805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610b37565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916145b9392505050565b61018060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b6000610ba78235611227565b6000610ba78235611245565b6000610ba78235611248565b600060208284031215610c9e57600080fd5b6000610caa8484610c68565b949350505050565b60008060408385031215610cc557600080fd5b6000610cd18585610c68565b9250506020610ce285828601610c68565b9150509250929050565b600080600060608486031215610d0157600080fd5b6000610d0d8686610c68565b9350506020610d1e86828701610c68565b9250506040610d2f86828701610c74565b9150509250925092565b60008060408385031215610d4c57600080fd5b6000610d588585610c68565b9250506020610ce285828601610c74565b600060208284031215610d7b57600080fd5b6000610caa8484610c80565b610d9081611227565b82525050565b6000610da182611223565b80845260208401935083602082028501610dba8561121d565b60005b84811015610df1578383038852610dd5838351610eb8565b9250610de08261121d565b602098909801979150600101610dbd565b50909695505050505050565b6000610e0882611223565b80845260208401935083602082028501610e218561121d565b60005b84811015610df1578383038852610e3c838351610f86565b9250610e478261121d565b602098909801979150600101610e24565b6000610e6382611223565b808452602084019350610e758361121d565b60005b82811015610ea557610e8b868351611089565b610e948261121d565b602096909601959150600101610e78565b5093949350505050565b610d9081611240565b6000610ec382611223565b808452610ed7816020860160208601611259565b610ee081611289565b9093016020019392505050565b610d908161124e565b601a81527f45524332305f494e53554646494349454e545f42414c414e4345000000000000602082015260400190565b601081527f55494e543235365f4f564552464c4f5700000000000000000000000000000000602082015260400190565b601281527f5245454e5452414e43595f494c4c4547414c0000000000000000000000000000602082015260400190565b8051600090610180840190610f9b8582610d87565b506020830151610fae6020860182610d87565b506040830151610fc16040860182610d87565b506060830151610fd46060860182610d87565b506080830151610fe76080860182611089565b5060a0830151610ffa60a0860182611089565b5060c083015161100d60c0860182611089565b5060e083015161102060e0860182611089565b50610100830151611035610100860182611089565b5061012083015161104a610120860182611089565b506101408301518482036101408601526110648282610eb8565b9150506101608301518482036101608601526110808282610eb8565b95945050505050565b610d9081611245565b604081016110a08285610d87565b610ba76020830184610eaf565b60208082528101610ba78184610dfd565b606080825281016110cf8186610dfd565b905081810360208301526110e38185610e58565b905081810360408301526110808184610d96565b606080825281016111088186610dfd565b90506111176020830185610eed565b81810360408301526110808184610d96565b602081016101f38284610eaf565b602081016101f38284610eed565b602080825281016101f381610ef6565b602080825281016101f381610f26565b602080825281016101f381610f56565b60208082528101610ba78184610f86565b606080825281016111978186610f86565b90506111a66020830185610eed565b81810360408301526110808184610eb8565b608080825281016111c98187610f86565b905081810360208301526111dd8186610f86565b905081810360408301526111f18185610eb8565b905081810360608301526112058184610eb8565b9695505050505050565b602081016101f38284611089565b60200190565b5190565b73ffffffffffffffffffffffffffffffffffffffff1690565b151590565b90565b60ff1690565b60006101f382611248565b60005b8381101561127457818101518382015260200161125c565b83811115611283576000848401525b50505050565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016905600a265627a7a72305820ad6a59a75df05d02f4fc07b1e6946ed489d4b2023352e62893eb449bb73ffc166c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0xA0 PUSH1 0x2 EXP PUSH1 0xFF MUL NOT AND SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 PUSH2 0x13A3 DUP4 CODECOPY DUP2 ADD DUP1 PUSH1 0x40 MSTORE PUSH2 0x3F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xA9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x70 DUP3 MLOAD PUSH2 0x9D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x95 DUP5 DUP5 PUSH2 0x64 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x12EB DUP1 PUSH2 0xB8 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x82 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x95EA7B3 DUP2 EQ PUSH2 0x87 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xDF JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0xB348A4D4 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x161 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA7 PUSH2 0xA2 CALLDATASIZE PUSH1 0x4 PUSH2 0xD39 JUMP JUMPDEST PUSH2 0x181 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB4 SWAP2 SWAP1 PUSH2 0x1129 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD2 PUSH2 0x1F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB4 SWAP2 SWAP1 PUSH2 0x120F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA7 PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0xCEC JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD2 PUSH2 0x11A CALLDATASIZE PUSH1 0x4 PUSH2 0xC8C JUMP JUMPDEST PUSH2 0x8B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA7 PUSH2 0x13A CALLDATASIZE PUSH1 0x4 PUSH2 0xD39 JUMP JUMPDEST PUSH2 0x8E0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15F PUSH2 0x15A CALLDATASIZE PUSH1 0x4 PUSH2 0xD69 JUMP JUMPDEST PUSH2 0x9FF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD2 PUSH2 0x17C CALLDATASIZE PUSH1 0x4 PUSH2 0xCB2 JUMP JUMPDEST PUSH2 0xA4B JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE MLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x1E7 SWAP1 DUP7 SWAP1 PUSH2 0x120F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x209 PUSH2 0xBAE JUMP JUMPDEST PUSH1 0x60 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH1 0x0 PUSH1 0x3 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF SWAP1 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x2F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB4BE83D500000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 DUP10 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x24 ADD PUSH2 0x1186 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP2 POP PUSH2 0x719 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x1 EQ ISZERO PUSH2 0x355 JUMPI PUSH1 0x40 MLOAD PUSH32 0x64A3BC1500000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 DUP10 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x24 ADD PUSH2 0x1186 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x2 EQ ISZERO PUSH2 0x3B3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x297BB70B00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x10BE JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND EQ ISZERO PUSH2 0x40F JUMPI PUSH1 0x40 MLOAD PUSH32 0x4D0AE54600000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x10BE JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x4 EQ ISZERO PUSH2 0x46E JUMPI PUSH1 0x40 MLOAD PUSH32 0xE5FA431B00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 DUP8 SWAP1 PUSH1 0x0 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x10F7 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x5 EQ ISZERO PUSH2 0x4CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x7E1D980800000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 DUP8 SWAP1 PUSH1 0x0 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x10F7 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x6 EQ ISZERO PUSH2 0x52D JUMPI PUSH1 0x40 MLOAD PUSH32 0x3C28D86100000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 DUP10 SWAP1 DUP2 SWAP1 DUP11 SWAP1 DUP2 SWAP1 PUSH1 0x24 ADD PUSH2 0x11B8 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x7 EQ ISZERO PUSH2 0x587 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD46B02C300000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 DUP10 SWAP1 PUSH1 0x24 ADD PUSH2 0x1175 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x8 EQ ISZERO PUSH2 0x5E1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4AC1478200000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x10AD JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x9 EQ ISZERO PUSH2 0x63C JUMPI PUSH1 0x40 MLOAD PUSH32 0x4F9559B100000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x24 ADD PUSH2 0x1137 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV AND PUSH1 0xA EQ ISZERO PUSH2 0x719 JUMPI PUSH1 0x40 MLOAD PUSH32 0x77FCCE6800000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x699 SWAP1 PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x24 ADD PUSH2 0x1092 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP2 POP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 DUP5 SWAP2 SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x762 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x74A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x78F JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x64 DUP1 DUP3 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 POP PUSH1 0x20 DUP3 ADD PUSH2 0xC80 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x64 PUSH1 0x0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY PUSH1 0x40 DUP1 MLOAD PUSH32 0x4572726F7228737472696E672900000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xD ADD DUP2 KECCAK256 PUSH2 0x89D SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x814 SWAP1 PUSH1 0x24 ADD PUSH2 0x1165 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xA83 AND JUMP JUMPDEST ISZERO PUSH2 0x8A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x932 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x929 SWAP1 PUSH2 0x1145 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 DUP2 ADD LT ISZERO PUSH2 0x993 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x929 SWAP1 PUSH2 0x1155 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP4 MSTORE SWAP2 DUP2 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD SWAP1 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x1E7 SWAP1 DUP7 SWAP1 PUSH2 0x120F JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0xFF SWAP1 SWAP3 AND PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0xBA7 JUMPI POP DUP2 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xADF JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xAA2 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP4 ADD DUP2 SWAP1 SUB DUP2 KECCAK256 DUP9 MLOAD SWAP1 SWAP6 POP DUP9 SWAP5 POP SWAP1 SWAP3 DUP4 SWAP3 POP DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xB74 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xB37 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 NOT AND EQ JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x180 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBA7 DUP3 CALLDATALOAD PUSH2 0x1227 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBA7 DUP3 CALLDATALOAD PUSH2 0x1245 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBA7 DUP3 CALLDATALOAD PUSH2 0x1248 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCAA DUP5 DUP5 PUSH2 0xC68 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCD1 DUP6 DUP6 PUSH2 0xC68 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xCE2 DUP6 DUP3 DUP7 ADD PUSH2 0xC68 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xD01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xD0D DUP7 DUP7 PUSH2 0xC68 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xD1E DUP7 DUP3 DUP8 ADD PUSH2 0xC68 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xD2F DUP7 DUP3 DUP8 ADD PUSH2 0xC74 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xD58 DUP6 DUP6 PUSH2 0xC68 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xCE2 DUP6 DUP3 DUP7 ADD PUSH2 0xC74 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCAA DUP5 DUP5 PUSH2 0xC80 JUMP JUMPDEST PUSH2 0xD90 DUP2 PUSH2 0x1227 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA1 DUP3 PUSH2 0x1223 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0xDBA DUP6 PUSH2 0x121D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xDF1 JUMPI DUP4 DUP4 SUB DUP9 MSTORE PUSH2 0xDD5 DUP4 DUP4 MLOAD PUSH2 0xEB8 JUMP JUMPDEST SWAP3 POP PUSH2 0xDE0 DUP3 PUSH2 0x121D JUMP JUMPDEST PUSH1 0x20 SWAP9 SWAP1 SWAP9 ADD SWAP8 SWAP2 POP PUSH1 0x1 ADD PUSH2 0xDBD JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE08 DUP3 PUSH2 0x1223 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0xE21 DUP6 PUSH2 0x121D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xDF1 JUMPI DUP4 DUP4 SUB DUP9 MSTORE PUSH2 0xE3C DUP4 DUP4 MLOAD PUSH2 0xF86 JUMP JUMPDEST SWAP3 POP PUSH2 0xE47 DUP3 PUSH2 0x121D JUMP JUMPDEST PUSH1 0x20 SWAP9 SWAP1 SWAP9 ADD SWAP8 SWAP2 POP PUSH1 0x1 ADD PUSH2 0xE24 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE63 DUP3 PUSH2 0x1223 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH2 0xE75 DUP4 PUSH2 0x121D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xEA5 JUMPI PUSH2 0xE8B DUP7 DUP4 MLOAD PUSH2 0x1089 JUMP JUMPDEST PUSH2 0xE94 DUP3 PUSH2 0x121D JUMP JUMPDEST PUSH1 0x20 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP2 POP PUSH1 0x1 ADD PUSH2 0xE78 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xD90 DUP2 PUSH2 0x1240 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEC3 DUP3 PUSH2 0x1223 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0xED7 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1259 JUMP JUMPDEST PUSH2 0xEE0 DUP2 PUSH2 0x1289 JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xD90 DUP2 PUSH2 0x124E JUMP JUMPDEST PUSH1 0x1A DUP2 MSTORE PUSH32 0x45524332305F494E53554646494349454E545F42414C414E4345000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x10 DUP2 MSTORE PUSH32 0x55494E543235365F4F564552464C4F5700000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x12 DUP2 MSTORE PUSH32 0x5245454E5452414E43595F494C4C4547414C0000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x180 DUP5 ADD SWAP1 PUSH2 0xF9B DUP6 DUP3 PUSH2 0xD87 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0xFAE PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0xD87 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0xFC1 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0xD87 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0xFD4 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0xD87 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0xFE7 PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x1089 JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0xFFA PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x1089 JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x100D PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0x1089 JUMP JUMPDEST POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x1020 PUSH1 0xE0 DUP7 ADD DUP3 PUSH2 0x1089 JUMP JUMPDEST POP PUSH2 0x100 DUP4 ADD MLOAD PUSH2 0x1035 PUSH2 0x100 DUP7 ADD DUP3 PUSH2 0x1089 JUMP JUMPDEST POP PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x104A PUSH2 0x120 DUP7 ADD DUP3 PUSH2 0x1089 JUMP JUMPDEST POP PUSH2 0x140 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x140 DUP7 ADD MSTORE PUSH2 0x1064 DUP3 DUP3 PUSH2 0xEB8 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x160 DUP7 ADD MSTORE PUSH2 0x1080 DUP3 DUP3 PUSH2 0xEB8 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xD90 DUP2 PUSH2 0x1245 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x10A0 DUP3 DUP6 PUSH2 0xD87 JUMP JUMPDEST PUSH2 0xBA7 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xEAF JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xBA7 DUP2 DUP5 PUSH2 0xDFD JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10CF DUP2 DUP7 PUSH2 0xDFD JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x10E3 DUP2 DUP6 PUSH2 0xE58 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1080 DUP2 DUP5 PUSH2 0xD96 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1108 DUP2 DUP7 PUSH2 0xDFD JUMP JUMPDEST SWAP1 POP PUSH2 0x1117 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xEED JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1080 DUP2 DUP5 PUSH2 0xD96 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1F3 DUP3 DUP5 PUSH2 0xEAF JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1F3 DUP3 DUP5 PUSH2 0xEED JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1F3 DUP2 PUSH2 0xEF6 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1F3 DUP2 PUSH2 0xF26 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1F3 DUP2 PUSH2 0xF56 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xBA7 DUP2 DUP5 PUSH2 0xF86 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1197 DUP2 DUP7 PUSH2 0xF86 JUMP JUMPDEST SWAP1 POP PUSH2 0x11A6 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xEED JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1080 DUP2 DUP5 PUSH2 0xEB8 JUMP JUMPDEST PUSH1 0x80 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x11C9 DUP2 DUP8 PUSH2 0xF86 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x11DD DUP2 DUP7 PUSH2 0xF86 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x11F1 DUP2 DUP6 PUSH2 0xEB8 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1205 DUP2 DUP5 PUSH2 0xEB8 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1F3 DUP3 DUP5 PUSH2 0x1089 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F3 DUP3 PUSH2 0x1248 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1274 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x125C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1283 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP1 JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 0xad PUSH11 0x59A75DF05D02F4FC07B1E6 SWAP5 PUSH15 0xD489D4B2023352E62893EB449BB73F 0xfc AND PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
				"sourceMap": "879:5654:61:-;;;1740:36;;;-1:-1:-1;;;;;;1740:36:61;;;1783:99;5:2:-1;;;;30:1;27;20:12;5:2;1783:99:61;;;;;;;;;;;;;;;;;;;;;;1844:8;:31;;-1:-1:-1;;;;;;1844:31:61;-1:-1:-1;;;;;1844:31:61;;;;;;;;;;879:5654;;5:122:-1;;83:39;114:6;108:13;83:39;;;74:48;68:59;-1:-1;;;68:59;134:263;;249:2;237:9;228:7;224:23;220:32;217:2;;;265:1;262;255:12;217:2;300:1;317:64;373:7;353:9;317:64;;;307:74;211:186;-1:-1;;;;211:186;404:128;-1:-1;;;;;473:54;;456:76;;879:5654:61;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052600436106100825763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663095ea7b3811461008757806318160ddd146100bd57806323b872dd146100df57806370a08231146100ff578063a9059cbb1461011f578063b348a4d41461013f578063dd62ed3e14610161575b600080fd5b34801561009357600080fd5b506100a76100a2366004610d39565b610181565b6040516100b49190611129565b60405180910390f35b3480156100c957600080fd5b506100d26101f9565b6040516100b4919061120f565b3480156100eb57600080fd5b506100a76100fa366004610cec565b6101ff565b34801561010b57600080fd5b506100d261011a366004610c8c565b6108b8565b34801561012b57600080fd5b506100a761013a366004610d39565b6108e0565b34801561014b57600080fd5b5061015f61015a366004610d69565b6109ff565b005b34801561016d57600080fd5b506100d261017c366004610cb2565b610a4b565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906101e790869061120f565b60405180910390a35060015b92915050565b60025490565b6000610209610bae565b60608080808080600060035474010000000000000000000000000000000000000000900460ff908116911614156102f6576040517fb4be83d500000000000000000000000000000000000000000000000000000000906102729089906000908a90602401611186565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529150610719565b60035460ff740100000000000000000000000000000000000000009091041660011415610355576040517f64a3bc1500000000000000000000000000000000000000000000000000000000906102729089906000908a90602401611186565b60035460ff7401000000000000000000000000000000000000000090910416600214156103b3576040517f297bb70b0000000000000000000000000000000000000000000000000000000090610272908790879087906024016110be565b6003805474010000000000000000000000000000000000000000900460ff16141561040f576040517f4d0ae5460000000000000000000000000000000000000000000000000000000090610272908790879087906024016110be565b60035460ff74010000000000000000000000000000000000000000909104166004141561046e576040517fe5fa431b000000000000000000000000000000000000000000000000000000009061027290879060009087906024016110f7565b60035460ff7401000000000000000000000000000000000000000090910416600514156104cd576040517f7e1d9808000000000000000000000000000000000000000000000000000000009061027290879060009087906024016110f7565b60035460ff74010000000000000000000000000000000000000000909104166006141561052d576040517f3c28d861000000000000000000000000000000000000000000000000000000009061027290899081908a9081906024016111b8565b60035460ff740100000000000000000000000000000000000000009091041660071415610587576040517fd46b02c30000000000000000000000000000000000000000000000000000000090610272908990602401611175565b60035460ff7401000000000000000000000000000000000000000090910416600814156105e1576040517f4ac1478200000000000000000000000000000000000000000000000000000000906102729087906024016110ad565b60035460ff74010000000000000000000000000000000000000000909104166009141561063c576040517f4f9559b1000000000000000000000000000000000000000000000000000000009061027290600090602401611137565b60035460ff7401000000000000000000000000000000000000000090910416600a1415610719576040517f77fcce680000000000000000000000000000000000000000000000000000000090610699906000908190602401611092565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915291505b600354604051835173ffffffffffffffffffffffffffffffffffffffff909216918491908190602084019080838360005b8381101561076257818101518382015260200161074a565b50505050905090810190601f16801561078f5780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af1505060408051606480825260a08201909252915060208201610c808038833901905050905060646000602083013e604080517f4572726f7228737472696e6729000000000000000000000000000000000000008152905190819003600d01812061089d9183919061081490602401611165565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529063ffffffff610a8316565b156108a757600080fd5b5060019a9950505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b33600090815260208190526040812054821115610932576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092990611145565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020548281011015610993576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092990611155565b336000818152602081905260408082208054869003905573ffffffffffffffffffffffffffffffffffffffff861680835291819020805486019055519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906101e790869061120f565b6003805460ff90921674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b600081518351148015610ba75750816040518082805190602001908083835b60208310610adf57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610aa2565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199092169116179052604051919093018190038120885190955088945090928392508401908083835b60208310610b7457805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610b37565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916145b9392505050565b61018060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b6000610ba78235611227565b6000610ba78235611245565b6000610ba78235611248565b600060208284031215610c9e57600080fd5b6000610caa8484610c68565b949350505050565b60008060408385031215610cc557600080fd5b6000610cd18585610c68565b9250506020610ce285828601610c68565b9150509250929050565b600080600060608486031215610d0157600080fd5b6000610d0d8686610c68565b9350506020610d1e86828701610c68565b9250506040610d2f86828701610c74565b9150509250925092565b60008060408385031215610d4c57600080fd5b6000610d588585610c68565b9250506020610ce285828601610c74565b600060208284031215610d7b57600080fd5b6000610caa8484610c80565b610d9081611227565b82525050565b6000610da182611223565b80845260208401935083602082028501610dba8561121d565b60005b84811015610df1578383038852610dd5838351610eb8565b9250610de08261121d565b602098909801979150600101610dbd565b50909695505050505050565b6000610e0882611223565b80845260208401935083602082028501610e218561121d565b60005b84811015610df1578383038852610e3c838351610f86565b9250610e478261121d565b602098909801979150600101610e24565b6000610e6382611223565b808452602084019350610e758361121d565b60005b82811015610ea557610e8b868351611089565b610e948261121d565b602096909601959150600101610e78565b5093949350505050565b610d9081611240565b6000610ec382611223565b808452610ed7816020860160208601611259565b610ee081611289565b9093016020019392505050565b610d908161124e565b601a81527f45524332305f494e53554646494349454e545f42414c414e4345000000000000602082015260400190565b601081527f55494e543235365f4f564552464c4f5700000000000000000000000000000000602082015260400190565b601281527f5245454e5452414e43595f494c4c4547414c0000000000000000000000000000602082015260400190565b8051600090610180840190610f9b8582610d87565b506020830151610fae6020860182610d87565b506040830151610fc16040860182610d87565b506060830151610fd46060860182610d87565b506080830151610fe76080860182611089565b5060a0830151610ffa60a0860182611089565b5060c083015161100d60c0860182611089565b5060e083015161102060e0860182611089565b50610100830151611035610100860182611089565b5061012083015161104a610120860182611089565b506101408301518482036101408601526110648282610eb8565b9150506101608301518482036101608601526110808282610eb8565b95945050505050565b610d9081611245565b604081016110a08285610d87565b610ba76020830184610eaf565b60208082528101610ba78184610dfd565b606080825281016110cf8186610dfd565b905081810360208301526110e38185610e58565b905081810360408301526110808184610d96565b606080825281016111088186610dfd565b90506111176020830185610eed565b81810360408301526110808184610d96565b602081016101f38284610eaf565b602081016101f38284610eed565b602080825281016101f381610ef6565b602080825281016101f381610f26565b602080825281016101f381610f56565b60208082528101610ba78184610f86565b606080825281016111978186610f86565b90506111a66020830185610eed565b81810360408301526110808184610eb8565b608080825281016111c98187610f86565b905081810360208301526111dd8186610f86565b905081810360408301526111f18185610eb8565b905081810360608301526112058184610eb8565b9695505050505050565b602081016101f38284611089565b60200190565b5190565b73ffffffffffffffffffffffffffffffffffffffff1690565b151590565b90565b60ff1690565b60006101f382611248565b60005b8381101561127457818101518382015260200161125c565b83811115611283576000848401525b50505050565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016905600a265627a7a72305820ad6a59a75df05d02f4fc07b1e6946ed489d4b2023352e62893eb449bb73ffc166c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x82 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x95EA7B3 DUP2 EQ PUSH2 0x87 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xDF JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0xB348A4D4 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x161 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA7 PUSH2 0xA2 CALLDATASIZE PUSH1 0x4 PUSH2 0xD39 JUMP JUMPDEST PUSH2 0x181 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB4 SWAP2 SWAP1 PUSH2 0x1129 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD2 PUSH2 0x1F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB4 SWAP2 SWAP1 PUSH2 0x120F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA7 PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0xCEC JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD2 PUSH2 0x11A CALLDATASIZE PUSH1 0x4 PUSH2 0xC8C JUMP JUMPDEST PUSH2 0x8B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA7 PUSH2 0x13A CALLDATASIZE PUSH1 0x4 PUSH2 0xD39 JUMP JUMPDEST PUSH2 0x8E0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15F PUSH2 0x15A CALLDATASIZE PUSH1 0x4 PUSH2 0xD69 JUMP JUMPDEST PUSH2 0x9FF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD2 PUSH2 0x17C CALLDATASIZE PUSH1 0x4 PUSH2 0xCB2 JUMP JUMPDEST PUSH2 0xA4B JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE MLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x1E7 SWAP1 DUP7 SWAP1 PUSH2 0x120F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x209 PUSH2 0xBAE JUMP JUMPDEST PUSH1 0x60 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH1 0x0 PUSH1 0x3 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF SWAP1 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x2F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB4BE83D500000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 DUP10 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x24 ADD PUSH2 0x1186 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP2 POP PUSH2 0x719 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x1 EQ ISZERO PUSH2 0x355 JUMPI PUSH1 0x40 MLOAD PUSH32 0x64A3BC1500000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 DUP10 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x24 ADD PUSH2 0x1186 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x2 EQ ISZERO PUSH2 0x3B3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x297BB70B00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x10BE JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND EQ ISZERO PUSH2 0x40F JUMPI PUSH1 0x40 MLOAD PUSH32 0x4D0AE54600000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x10BE JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x4 EQ ISZERO PUSH2 0x46E JUMPI PUSH1 0x40 MLOAD PUSH32 0xE5FA431B00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 DUP8 SWAP1 PUSH1 0x0 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x10F7 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x5 EQ ISZERO PUSH2 0x4CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x7E1D980800000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 DUP8 SWAP1 PUSH1 0x0 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x10F7 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x6 EQ ISZERO PUSH2 0x52D JUMPI PUSH1 0x40 MLOAD PUSH32 0x3C28D86100000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 DUP10 SWAP1 DUP2 SWAP1 DUP11 SWAP1 DUP2 SWAP1 PUSH1 0x24 ADD PUSH2 0x11B8 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x7 EQ ISZERO PUSH2 0x587 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD46B02C300000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 DUP10 SWAP1 PUSH1 0x24 ADD PUSH2 0x1175 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x8 EQ ISZERO PUSH2 0x5E1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4AC1478200000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x10AD JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV AND PUSH1 0x9 EQ ISZERO PUSH2 0x63C JUMPI PUSH1 0x40 MLOAD PUSH32 0x4F9559B100000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x272 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x24 ADD PUSH2 0x1137 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV AND PUSH1 0xA EQ ISZERO PUSH2 0x719 JUMPI PUSH1 0x40 MLOAD PUSH32 0x77FCCE6800000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x699 SWAP1 PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x24 ADD PUSH2 0x1092 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP2 POP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 DUP5 SWAP2 SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x762 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x74A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x78F JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x64 DUP1 DUP3 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 POP PUSH1 0x20 DUP3 ADD PUSH2 0xC80 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x64 PUSH1 0x0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY PUSH1 0x40 DUP1 MLOAD PUSH32 0x4572726F7228737472696E672900000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xD ADD DUP2 KECCAK256 PUSH2 0x89D SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x814 SWAP1 PUSH1 0x24 ADD PUSH2 0x1165 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xA83 AND JUMP JUMPDEST ISZERO PUSH2 0x8A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x932 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x929 SWAP1 PUSH2 0x1145 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 DUP2 ADD LT ISZERO PUSH2 0x993 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x929 SWAP1 PUSH2 0x1155 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP4 MSTORE SWAP2 DUP2 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD SWAP1 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x1E7 SWAP1 DUP7 SWAP1 PUSH2 0x120F JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0xFF SWAP1 SWAP3 AND PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0xBA7 JUMPI POP DUP2 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xADF JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xAA2 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP4 ADD DUP2 SWAP1 SUB DUP2 KECCAK256 DUP9 MLOAD SWAP1 SWAP6 POP DUP9 SWAP5 POP SWAP1 SWAP3 DUP4 SWAP3 POP DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xB74 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xB37 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 NOT AND EQ JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x180 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBA7 DUP3 CALLDATALOAD PUSH2 0x1227 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBA7 DUP3 CALLDATALOAD PUSH2 0x1245 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBA7 DUP3 CALLDATALOAD PUSH2 0x1248 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCAA DUP5 DUP5 PUSH2 0xC68 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCD1 DUP6 DUP6 PUSH2 0xC68 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xCE2 DUP6 DUP3 DUP7 ADD PUSH2 0xC68 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xD01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xD0D DUP7 DUP7 PUSH2 0xC68 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xD1E DUP7 DUP3 DUP8 ADD PUSH2 0xC68 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xD2F DUP7 DUP3 DUP8 ADD PUSH2 0xC74 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xD58 DUP6 DUP6 PUSH2 0xC68 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xCE2 DUP6 DUP3 DUP7 ADD PUSH2 0xC74 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCAA DUP5 DUP5 PUSH2 0xC80 JUMP JUMPDEST PUSH2 0xD90 DUP2 PUSH2 0x1227 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA1 DUP3 PUSH2 0x1223 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0xDBA DUP6 PUSH2 0x121D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xDF1 JUMPI DUP4 DUP4 SUB DUP9 MSTORE PUSH2 0xDD5 DUP4 DUP4 MLOAD PUSH2 0xEB8 JUMP JUMPDEST SWAP3 POP PUSH2 0xDE0 DUP3 PUSH2 0x121D JUMP JUMPDEST PUSH1 0x20 SWAP9 SWAP1 SWAP9 ADD SWAP8 SWAP2 POP PUSH1 0x1 ADD PUSH2 0xDBD JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE08 DUP3 PUSH2 0x1223 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0xE21 DUP6 PUSH2 0x121D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xDF1 JUMPI DUP4 DUP4 SUB DUP9 MSTORE PUSH2 0xE3C DUP4 DUP4 MLOAD PUSH2 0xF86 JUMP JUMPDEST SWAP3 POP PUSH2 0xE47 DUP3 PUSH2 0x121D JUMP JUMPDEST PUSH1 0x20 SWAP9 SWAP1 SWAP9 ADD SWAP8 SWAP2 POP PUSH1 0x1 ADD PUSH2 0xE24 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE63 DUP3 PUSH2 0x1223 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH2 0xE75 DUP4 PUSH2 0x121D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xEA5 JUMPI PUSH2 0xE8B DUP7 DUP4 MLOAD PUSH2 0x1089 JUMP JUMPDEST PUSH2 0xE94 DUP3 PUSH2 0x121D JUMP JUMPDEST PUSH1 0x20 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP2 POP PUSH1 0x1 ADD PUSH2 0xE78 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xD90 DUP2 PUSH2 0x1240 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEC3 DUP3 PUSH2 0x1223 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0xED7 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1259 JUMP JUMPDEST PUSH2 0xEE0 DUP2 PUSH2 0x1289 JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xD90 DUP2 PUSH2 0x124E JUMP JUMPDEST PUSH1 0x1A DUP2 MSTORE PUSH32 0x45524332305F494E53554646494349454E545F42414C414E4345000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x10 DUP2 MSTORE PUSH32 0x55494E543235365F4F564552464C4F5700000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x12 DUP2 MSTORE PUSH32 0x5245454E5452414E43595F494C4C4547414C0000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x180 DUP5 ADD SWAP1 PUSH2 0xF9B DUP6 DUP3 PUSH2 0xD87 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0xFAE PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0xD87 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0xFC1 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0xD87 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0xFD4 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0xD87 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0xFE7 PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x1089 JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0xFFA PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x1089 JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x100D PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0x1089 JUMP JUMPDEST POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x1020 PUSH1 0xE0 DUP7 ADD DUP3 PUSH2 0x1089 JUMP JUMPDEST POP PUSH2 0x100 DUP4 ADD MLOAD PUSH2 0x1035 PUSH2 0x100 DUP7 ADD DUP3 PUSH2 0x1089 JUMP JUMPDEST POP PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x104A PUSH2 0x120 DUP7 ADD DUP3 PUSH2 0x1089 JUMP JUMPDEST POP PUSH2 0x140 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x140 DUP7 ADD MSTORE PUSH2 0x1064 DUP3 DUP3 PUSH2 0xEB8 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x160 DUP7 ADD MSTORE PUSH2 0x1080 DUP3 DUP3 PUSH2 0xEB8 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xD90 DUP2 PUSH2 0x1245 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x10A0 DUP3 DUP6 PUSH2 0xD87 JUMP JUMPDEST PUSH2 0xBA7 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xEAF JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xBA7 DUP2 DUP5 PUSH2 0xDFD JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10CF DUP2 DUP7 PUSH2 0xDFD JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x10E3 DUP2 DUP6 PUSH2 0xE58 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1080 DUP2 DUP5 PUSH2 0xD96 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1108 DUP2 DUP7 PUSH2 0xDFD JUMP JUMPDEST SWAP1 POP PUSH2 0x1117 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xEED JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1080 DUP2 DUP5 PUSH2 0xD96 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1F3 DUP3 DUP5 PUSH2 0xEAF JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1F3 DUP3 DUP5 PUSH2 0xEED JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1F3 DUP2 PUSH2 0xEF6 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1F3 DUP2 PUSH2 0xF26 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1F3 DUP2 PUSH2 0xF56 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xBA7 DUP2 DUP5 PUSH2 0xF86 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1197 DUP2 DUP7 PUSH2 0xF86 JUMP JUMPDEST SWAP1 POP PUSH2 0x11A6 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xEED JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1080 DUP2 DUP5 PUSH2 0xEB8 JUMP JUMPDEST PUSH1 0x80 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x11C9 DUP2 DUP8 PUSH2 0xF86 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x11DD DUP2 DUP7 PUSH2 0xF86 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x11F1 DUP2 DUP6 PUSH2 0xEB8 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1205 DUP2 DUP5 PUSH2 0xEB8 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1F3 DUP3 DUP5 PUSH2 0x1089 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F3 DUP3 PUSH2 0x1248 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1274 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x125C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1283 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP1 JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 0xad PUSH11 0x59A75DF05D02F4FC07B1E6 SWAP5 PUSH15 0xD489D4B2023352E62893EB449BB73F 0xfc AND PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
				"sourceMap": "879:5654:61:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2896:270:70;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2896:270:70;;;;;;;;;;;;;;;;;;;;;;;;;3251:119;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3251:119:70;;;;;;;;;;;;2429:4102:61;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2429:4102:61;;;;;;;;;3524:135:70;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3524:135:70;;;;;;;;;1055:514;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1055:514:70;;;;;;;;;2049:130:61;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2049:130:61;;;;;;;;;;;3867:162:70;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3867:162:70;;;;;;;;;2896:270;3009:10;2981:4;3001:19;;;:7;:19;;;;;;;;;:29;;;;;;;;;;:38;;;3054:84;2981:4;;3001:29;;3054:84;;;;3033:6;;3054:84;;;;;;;;;;-1:-1:-1;3155:4:70;2896:270;;;;;:::o;3251:119::-;3351:12;;3251:119;:::o;2429:4102:61:-;2559:4;2777:27;;:::i;:::-;2863:22;;;;;;3159:27;3132:17;;;;;:55;:17;;;:55;;;3128:2862;;;3214:150;;3254:27;;3214:150;;3299:5;;3254:8;;3341:9;;3214:150;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;3214:150:61;;;49:4:-1;25:18;;61:17;;3214:150:61;182:15:-1;3214:150:61;;;;179:29:-1;;;;160:49;;;3214:150:61;-1:-1:-1;3128:2862:61;;;3385:17;;:63;:17;;;;;3412:35;3385:63;3381:2609;;;3475:156;;3515:33;;3475:156;;3566:5;;3515:8;;3608:9;;3475:156;;;;3381:2609;3652:17;;:62;:17;;;;;3679:34;3652:62;3648:2342;;;3741:178;;3781:33;;3741:178;;3832:6;;3856:21;;3895:10;;3741:178;;;;3648:2342;3967:42;3940:17;;;;;:70;:17;:70;3936:2054;;;4037:184;;4077:39;;4037:184;;4134:6;;4158:21;;4197:10;;4037:184;;;;3936:2054;4242:17;;:62;:17;;;;;4269:34;4242:62;4238:1752;;;4331:158;;4371:33;;4331:158;;4422:6;;4371:8;;4465:10;;4331:158;;;;4238:1752;4510:17;;:63;:17;;;;;4537:35;4510:63;4506:1484;;;4600:159;;4640:34;;4600:159;;4692:6;;4640:8;;4735:10;;4600:159;;;;4506:1484;4780:17;;:57;:17;;;;;4807:29;4780:57;4776:1214;;;4864:183;;4904:29;;4864:183;;4951:5;;;;4997:9;;;;4864:183;;;;4776:1214;5068:17;;:57;:17;;;;;5095:29;5068:57;5064:926;;;5152:106;;5192:29;;5152:106;;5239:5;;5152:106;;;;5064:926;5279:17;;:64;:17;;;;;5306:36;5279:64;5275:715;;;5370:113;;5410:35;;5370:113;;5463:6;;5370:113;;;;5275:715;5504:17;;:64;:17;;;;;5531:36;5504:64;5500:490;;;5595:107;;5635:34;;5595:107;;5635:8;;5595:107;;;;5500:490;5723:17;;:77;:17;;;;;5750:49;5723:77;5719:271;;;5827:152;;5867:47;;5827:152;;5867:8;;;;5827:152;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;5827:152:61;;;49:4:-1;25:18;;61:17;;5827:152:61;182:15:-1;5827:152:61;;;;179:29:-1;;;;160:49;;;5827:152:61;-1:-1:-1;5719:271:61;6057:8;;6049:32;;;;6057:8;;;;;6072;;6049:32;;;;;;;;;;6057:8;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;6049:32:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6156:14:61;;;6166:3;6156:14;;;;;;;;;;-1:-1:-1;6156:14:61;;;17:15:-1;;105:10;6156:14:61;88:34:-1;136:17;;-1:-1;6156:14:61;6130:40;;6271:3;6268:1;6263:2;6251:10;6247:19;6232:43;1147:26;;;;;;;;;;;;;;;;6373:51;;6413:10;;1147:26;1108:102;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;1108:102:61;;;49:4:-1;25:18;;61:17;;1108:102:61;182:15:-1;1108:102:61;;;;179:29:-1;;;;160:49;;;1108:102:61;6373:51;:39;:51;:::i;:::-;6372:52;6364:61;;;;;;-1:-1:-1;6520:4:61;;2429:4102;-1:-1:-1;;;;;;;;;;2429:4102:61:o;3524:135:70:-;3636:16;;3606:7;3636:16;;;;;;;;;;;;3524:135::o;1055:514::-;1186:10;1136:4;1177:20;;;;;;;;;;;:30;-1:-1:-1;1177:30:70;1156:103;;;;;;;;;;;;;;;;;;;;;;1316:13;;;:8;:13;;;;;;;;;;;1290:22;;;:39;;1269:102;;;;;;;;;;;;;;1391:10;1382:8;:20;;;;;;;;;;;:30;;;;;;;:20;1422:13;;;;;;;;;:23;;;;;;1461:79;1422:13;;1391:10;1461:79;;;;1406:6;;1461:79;;2049:130:61;2134:17;:38;;;;;;;;;;;;;;;;;;2049:130::o;3867:162:70:-;3997:15;;;;3967:7;3997:15;;;:7;:15;;;;;;;;:25;;;;;;;;;;;;;3867:162::o;9651:403:80:-;9772:10;10001:3;:10;9987:3;:10;:24;:60;;;;;10043:3;10033:14;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;139:12;;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;246:30;;311:9;;295:26;;;340:21;;377:20;365:33;;10033:14:80;;;;;;;;;;;10015;;10033;;-1:-1:-1;10015:14:80;;-1:-1:-1;10033:14:80;;;;-1:-1:-1;10015:14:80;;;;10033;10015;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;139:12;;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;10015:14:80;;;;;;;;;;;;;;;;:32;;;;9987:60;9980:67;9651:403;-1:-1:-1;;;9651:403:80:o;879:5654:61:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;130:118;;197:46;235:6;222:20;197:46;;255:114;;320:44;356:6;343:20;320:44;;376:241;;480:2;468:9;459:7;455:23;451:32;448:2;;;496:1;493;486:12;448:2;531:1;548:53;593:7;573:9;548:53;;;538:63;442:175;-1:-1;;;;442:175;624:366;;;745:2;733:9;724:7;720:23;716:32;713:2;;;761:1;758;751:12;713:2;796:1;813:53;858:7;838:9;813:53;;;803:63;;775:97;903:2;921:53;966:7;957:6;946:9;942:22;921:53;;;911:63;;882:98;707:283;;;;;;997:491;;;;1135:2;1123:9;1114:7;1110:23;1106:32;1103:2;;;1151:1;1148;1141:12;1103:2;1186:1;1203:53;1248:7;1228:9;1203:53;;;1193:63;;1165:97;1293:2;1311:53;1356:7;1347:6;1336:9;1332:22;1311:53;;;1301:63;;1272:98;1401:2;1419:53;1464:7;1455:6;1444:9;1440:22;1419:53;;;1409:63;;1380:98;1097:391;;;;;;1495:366;;;1616:2;1604:9;1595:7;1591:23;1587:32;1584:2;;;1632:1;1629;1622:12;1584:2;1667:1;1684:53;1729:7;1709:9;1684:53;;;1674:63;;1646:97;1774:2;1792:53;1837:7;1828:6;1817:9;1813:22;1792:53;;1868:237;;1970:2;1958:9;1949:7;1945:23;1941:32;1938:2;;;1986:1;1983;1976:12;1938:2;2021:1;2038:51;2081:7;2061:9;2038:51;;2112:110;2185:31;2210:5;2185:31;;;2180:3;2173:44;2167:55;;;2256:766;;2401:59;2454:5;2401:59;;;2478:6;2473:3;2466:19;2502:4;2497:3;2493:14;2486:21;;2550:3;2592:4;2584:6;2580:17;2575:3;2571:27;2618:61;2673:5;2618:61;;;2700:1;2685:298;2710:6;2707:1;2704:13;2685:298;;;2772:9;2766:4;2762:20;2757:3;2750:33;2798:68;2861:4;2852:6;2846:13;2798:68;;;2790:76;;2883:65;2941:6;2883:65;;;2971:4;2962:14;;;;;2873:75;-1:-1;2732:1;2725:9;2685:298;;;-1:-1;2996:4;;2380:642;-1:-1;;;;;;2380:642;3089:864;;3262:73;3329:5;3262:73;;;3353:6;3348:3;3341:19;3377:4;3372:3;3368:14;3361:21;;3425:3;3467:4;3459:6;3455:17;3450:3;3446:27;3493:75;3562:5;3493:75;;;3589:1;3574:340;3599:6;3596:1;3593:13;3574:340;;;3661:9;3655:4;3651:20;3646:3;3639:33;3687:96;3778:4;3769:6;3763:13;3687:96;;;3679:104;;3800:79;3872:6;3800:79;;;3902:4;3893:14;;;;;3790:89;-1:-1;3621:1;3614:9;3574:340;;3992:590;;4127:54;4175:5;4127:54;;;4199:6;4194:3;4187:19;4223:4;4218:3;4214:14;4207:21;;4268:56;4318:5;4268:56;;;4345:1;4330:230;4355:6;4352:1;4349:13;4330:230;;;4395:53;4444:3;4435:6;4429:13;4395:53;;;4465:60;4518:6;4465:60;;;4548:4;4539:14;;;;;4455:70;-1:-1;4377:1;4370:9;4330:230;;;-1:-1;4573:3;;4106:476;-1:-1;;;;4106:476;4590:101;4657:28;4679:5;4657:28;;4698:297;;4798:38;4830:5;4798:38;;;4853:6;4848:3;4841:19;4865:63;4921:6;4914:4;4909:3;4905:14;4898:4;4891:5;4887:16;4865:63;;;4960:29;4982:6;4960:29;;;4940:50;;;4953:4;4940:50;;4778:217;-1:-1;;;4778:217;5298:128;5377:43;5414:5;5377:43;;5434:296;5589:2;5577:15;;5626:66;5621:2;5612:12;;5605:88;5721:2;5712:12;;5570:160;5739:296;5894:2;5882:15;;5931:66;5926:2;5917:12;;5910:88;6026:2;6017:12;;5875:160;6044:296;6199:2;6187:15;;6236:66;6231:2;6222:12;;6215:88;6331:2;6322:12;;6180:160;6401:2419;6616:22;;6401:2419;;6538:5;6529:15;;;6650:61;6533:3;6616:22;6650:61;;;6559:164;6807:4;6800:5;6796:16;6790:23;6825:62;6881:4;6876:3;6872:14;6859:11;6825:62;;;6733:166;6990:4;6983:5;6979:16;6973:23;7008:62;7064:4;7059:3;7055:14;7042:11;7008:62;;;6909:173;7167:4;7160:5;7156:16;7150:23;7185:62;7241:4;7236:3;7232:14;7219:11;7185:62;;;7092:167;7347:4;7340:5;7336:16;7330:23;7365:62;7421:4;7416:3;7412:14;7399:11;7365:62;;;7269:170;7527:4;7520:5;7516:16;7510:23;7545:62;7601:4;7596:3;7592:14;7579:11;7545:62;;;7449:170;7699:4;7692:5;7688:16;7682:23;7717:62;7773:4;7768:3;7764:14;7751:11;7717:62;;;7629:162;7871:4;7864:5;7860:16;7854:23;7889:62;7945:4;7940:3;7936:14;7923:11;7889:62;;;7801:162;8056:5;8049;8045:17;8039:24;8075:63;8131:5;8126:3;8122:15;8109:11;8075:63;;;7973:177;8226:5;8219;8215:17;8209:24;8245:63;8301:5;8296:3;8292:15;8279:11;8245:63;;;8160:160;8406:5;8399;8395:17;8389:24;8459:3;8453:4;8449:14;8441:5;8436:3;8432:15;8425:39;8479:66;8540:4;8527:11;8479:66;;;8471:74;;8330:227;8643:5;8636;8632:17;8626:24;8696:3;8690:4;8686:14;8678:5;8673:3;8669:15;8662:39;8716:66;8777:4;8764:11;8716:66;;;8708:74;6511:2309;-1:-1;;;;;6511:2309;11302:110;11375:31;11400:5;11375:31;;11419:282;11549:2;11534:18;;11563:61;11538:9;11597:6;11563:61;;;11635:56;11687:2;11676:9;11672:18;11663:6;11635:56;;11708:417;11904:2;11918:47;;;11889:18;;11979:136;11889:18;12101:6;11979:136;;12132:935;12494:2;12508:47;;;12479:18;;12569:136;12479:18;12691:6;12569:136;;;12561:144;;12753:9;12747:4;12743:20;12738:2;12727:9;12723:18;12716:48;12778:98;12871:4;12862:6;12778:98;;;12770:106;;12924:9;12918:4;12914:20;12909:2;12898:9;12894:18;12887:48;12949:108;13052:4;13043:6;12949:108;;13074:799;13392:2;13406:47;;;13377:18;;13467:136;13377:18;13589:6;13467:136;;;13459:144;;13614:68;13678:2;13667:9;13663:18;13654:6;13614:68;;;13730:9;13724:4;13720:20;13715:2;13704:9;13700:18;13693:48;13755:108;13858:4;13849:6;13755:108;;13880:181;13982:2;13967:18;;13996:55;13971:9;14024:6;13996:55;;14068:205;14182:2;14167:18;;14196:67;14171:9;14236:6;14196:67;;14280:387;14461:2;14475:47;;;14446:18;;14536:121;14446:18;14536:121;;14674:387;14855:2;14869:47;;;14840:18;;14930:121;14840:18;14930:121;;15068:387;15249:2;15263:47;;;15234:18;;15324:121;15234:18;15324:121;;15462:333;15616:2;15630:47;;;15601:18;;15691:94;15601:18;15771:6;15691:94;;15802:631;16036:2;16050:47;;;16021:18;;16111:94;16021:18;16191:6;16111:94;;;16103:102;;16216:68;16280:2;16269:9;16265:18;16256:6;16216:68;;;16332:9;16326:4;16322:20;16317:2;16306:9;16302:18;16295:48;16357:66;16418:4;16409:6;16357:66;;16440:945;16760:3;16775:47;;;16745:19;;16836:94;16745:19;16916:6;16836:94;;;16828:102;;16978:9;16972:4;16968:20;16963:2;16952:9;16948:18;16941:48;17003:94;17092:4;17083:6;17003:94;;;16995:102;;17145:9;17139:4;17135:20;17130:2;17119:9;17115:18;17108:48;17170:66;17231:4;17222:6;17170:66;;;17162:74;;17284:9;17278:4;17274:20;17269:2;17258:9;17254:18;17247:48;17309:66;17370:4;17361:6;17309:66;;;17301:74;16731:654;-1:-1;;;;;;16731:654;17392:193;17500:2;17485:18;;17514:61;17489:9;17548:6;17514:61;;17594:126;17708:4;17696:17;;17677:43;18012:112;18107:12;;18091:33;18987:128;19067:42;19056:54;;19039:76;19122:92;19195:13;19188:21;;19171:43;19221:79;19290:5;19273:27;19307:88;19385:4;19374:16;;19357:38;19718:119;;19803:29;19826:5;19803:29;;19845:268;19910:1;19917:101;19931:6;19928:1;19925:13;19917:101;;;19998:11;;;19992:18;19979:11;;;19972:39;19953:2;19946:10;19917:101;;;20033:6;20030:1;20027:13;20024:2;;;20098:1;20089:6;20084:3;20080:16;20073:27;20024:2;19894:219;;;;;20121:97;20209:2;20189:14;20205:7;20185:28;;20169:49"
			}
		}
	},
	"sources": {
		"test/ReentrantERC20Token/ReentrantERC20Token.sol": {
			"id": 61
		},
		"utils/LibBytes/LibBytes.sol": {
			"id": 80
		},
		"tokens/ERC20Token/ERC20Token.sol": {
			"id": 70
		},
		"tokens/ERC20Token/IERC20Token.sol": {
			"id": 71
		},
		"protocol/Exchange/interfaces/IExchange.sol": {
			"id": 34
		},
		"protocol/Exchange/interfaces/IExchangeCore.sol": {
			"id": 35
		},
		"protocol/Exchange/libs/LibOrder.sol": {
			"id": 48
		},
		"protocol/Exchange/libs/LibEIP712.sol": {
			"id": 44
		},
		"protocol/Exchange/libs/LibFillResults.sol": {
			"id": 46
		},
		"utils/SafeMath/SafeMath.sol": {
			"id": 84
		},
		"protocol/Exchange/interfaces/IMatchOrders.sol": {
			"id": 36
		},
		"protocol/Exchange/interfaces/ISignatureValidator.sol": {
			"id": 37
		},
		"protocol/Exchange/interfaces/ITransactions.sol": {
			"id": 38
		},
		"protocol/Exchange/interfaces/IAssetProxyDispatcher.sol": {
			"id": 33
		},
		"protocol/Exchange/interfaces/IWrapperFunctions.sol": {
			"id": 41
		}
	},
	"sourceCodes": {
		"test/ReentrantERC20Token/ReentrantERC20Token.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/LibBytes/LibBytes.sol\";\nimport \"../../tokens/ERC20Token/ERC20Token.sol\";\nimport \"../../protocol/Exchange/interfaces/IExchange.sol\";\nimport \"../../protocol/Exchange/libs/LibOrder.sol\";\n\n\n// solhint-disable no-unused-vars\ncontract ReentrantERC20Token is\n    ERC20Token\n{\n    using LibBytes for bytes;\n\n    // solhint-disable-next-line var-name-mixedcase\n    IExchange internal EXCHANGE;\n\n    bytes internal constant REENTRANCY_ILLEGAL_REVERT_REASON = abi.encodeWithSelector(\n        bytes4(keccak256(\"Error(string)\")),\n        \"REENTRANCY_ILLEGAL\"\n    );\n\n    // All of these functions are potentially vulnerable to reentrancy\n    // We do not test any \"noThrow\" functions because `fillOrderNoThrow` makes a delegatecall to `fillOrder`\n    enum ExchangeFunction {\n        FILL_ORDER,\n        FILL_OR_KILL_ORDER,\n        BATCH_FILL_ORDERS,\n        BATCH_FILL_OR_KILL_ORDERS,\n        MARKET_BUY_ORDERS,\n        MARKET_SELL_ORDERS,\n        MATCH_ORDERS,\n        CANCEL_ORDER,\n        BATCH_CANCEL_ORDERS,\n        CANCEL_ORDERS_UP_TO,\n        SET_SIGNATURE_VALIDATOR_APPROVAL\n    }\n\n    uint8 internal currentFunctionId = 0;\n\n    constructor (address _exchange)\n        public\n    {\n        EXCHANGE = IExchange(_exchange);\n    }\n\n    /// @dev Set the current function that will be called when `transferFrom` is called.\n    /// @param _currentFunctionId Id that corresponds to function name.\n    function setCurrentFunction(uint8 _currentFunctionId)\n        external\n    {\n        currentFunctionId = _currentFunctionId;\n    }\n\n    /// @dev A version of `transferFrom` that attempts to reenter the Exchange contract.\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool)\n    {\n        // This order would normally be invalid, but it will be used strictly for testing reentrnacy.\n        // Any reentrancy checks will happen before any other checks that invalidate the order.\n        LibOrder.Order memory order;\n\n        // Initialize remaining null parameters\n        bytes memory signature;\n        LibOrder.Order[] memory orders;\n        uint256[] memory takerAssetFillAmounts;\n        bytes[] memory signatures;\n        bytes memory calldata;\n\n        // Create calldata for function that corresponds to currentFunctionId\n        if (currentFunctionId == uint8(ExchangeFunction.FILL_ORDER)) {\n            calldata = abi.encodeWithSelector(\n                EXCHANGE.fillOrder.selector,\n                order,\n                0,\n                signature\n            );\n        } else if (currentFunctionId == uint8(ExchangeFunction.FILL_OR_KILL_ORDER)) {\n            calldata = abi.encodeWithSelector(\n                EXCHANGE.fillOrKillOrder.selector,\n                order,\n                0,\n                signature\n            );\n        } else if (currentFunctionId == uint8(ExchangeFunction.BATCH_FILL_ORDERS)) {\n            calldata = abi.encodeWithSelector(\n                EXCHANGE.batchFillOrders.selector,\n                orders,\n                takerAssetFillAmounts,\n                signatures\n            );\n        } else if (currentFunctionId == uint8(ExchangeFunction.BATCH_FILL_OR_KILL_ORDERS)) {\n            calldata = abi.encodeWithSelector(\n                EXCHANGE.batchFillOrKillOrders.selector,\n                orders,\n                takerAssetFillAmounts,\n                signatures\n            );\n        } else if (currentFunctionId == uint8(ExchangeFunction.MARKET_BUY_ORDERS)) {\n            calldata = abi.encodeWithSelector(\n                EXCHANGE.marketBuyOrders.selector,\n                orders,\n                0,\n                signatures\n            );\n        } else if (currentFunctionId == uint8(ExchangeFunction.MARKET_SELL_ORDERS)) {\n            calldata = abi.encodeWithSelector(\n                EXCHANGE.marketSellOrders.selector,\n                orders,\n                0,\n                signatures\n            );\n        } else if (currentFunctionId == uint8(ExchangeFunction.MATCH_ORDERS)) {\n            calldata = abi.encodeWithSelector(\n                EXCHANGE.matchOrders.selector,\n                order,\n                order,\n                signature,\n                signature\n            );\n        } else if (currentFunctionId == uint8(ExchangeFunction.CANCEL_ORDER)) {\n            calldata = abi.encodeWithSelector(\n                EXCHANGE.cancelOrder.selector,\n                order\n            );\n        } else if (currentFunctionId == uint8(ExchangeFunction.BATCH_CANCEL_ORDERS)) {\n            calldata = abi.encodeWithSelector(\n                EXCHANGE.batchCancelOrders.selector,\n                orders\n            );\n        } else if (currentFunctionId == uint8(ExchangeFunction.CANCEL_ORDERS_UP_TO)) {\n            calldata = abi.encodeWithSelector(\n                EXCHANGE.cancelOrdersUpTo.selector,\n                0\n            );\n        } else if (currentFunctionId == uint8(ExchangeFunction.SET_SIGNATURE_VALIDATOR_APPROVAL)) {\n            calldata = abi.encodeWithSelector(\n                EXCHANGE.setSignatureValidatorApproval.selector,\n                address(0),\n                false\n            );\n        }\n\n        // Call Exchange function, swallow error\n        address(EXCHANGE).call(calldata);\n\n        // Revert reason is 100 bytes\n        bytes memory returnData = new bytes(100);\n\n        // Copy return data\n        assembly {\n            returndatacopy(add(returnData, 32), 0, 100)\n        }\n\n        // Revert if function reverted with REENTRANCY_ILLEGAL error\n        require(!REENTRANCY_ILLEGAL_REVERT_REASON.equals(returnData));\n\n        // Transfer will return true if function failed for any other reason\n        return true;\n    }\n}",
		"utils/LibBytes/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n    \n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n                    \n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n                    \n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to < b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n    \n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to < b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            \"GREATER_THAN_ZERO_LENGTH_REQUIRED\"\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n            \n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= index + 4,\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @dev NOTE: the returned value overlaps with the input value.\n    ///            Both should be treated as immutable.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytesWithLength(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n        \n        // Return a pointer to the byte array as it exists inside `b`\n        assembly {\n            result := add(b, index)\n        }\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytesWithLength(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            b.contentAddress() + index,\n            input.rawAddress(), // includes length of <input>\n            input.length + 32   // +32 bytes to store <input> length\n        );\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function deepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        internal\n        pure\n    {\n        uint256 sourceLen = source.length;\n        // Dest length must be >= source length, or some bytes would not be copied.\n        require(\n            dest.length >= sourceLen,\n            \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\"\n        );\n        memCopy(\n            dest.contentAddress(),\n            source.contentAddress(),\n            sourceLen\n        );\n    }\n}\n",
		"tokens/ERC20Token/ERC20Token.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\nimport \"./IERC20Token.sol\";\n\n\ncontract ERC20Token is\n    IERC20Token\n{\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    uint256 internal _totalSupply;\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool)\n    {\n        require(\n            balances[msg.sender] >= _value,\n            \"ERC20_INSUFFICIENT_BALANCE\"\n        );\n        require(\n            balances[_to] + _value >= balances[_to],\n            \"UINT256_OVERFLOW\"\n        );\n\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n\n        emit Transfer(\n            msg.sender,\n            _to,\n            _value\n        );\n\n        return true;\n    }\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool)\n    {\n        require(\n            balances[_from] >= _value,\n            \"ERC20_INSUFFICIENT_BALANCE\"\n        );\n        require(\n            allowed[_from][msg.sender] >= _value,\n            \"ERC20_INSUFFICIENT_ALLOWANCE\"\n        );\n        require(\n            balances[_to] + _value >= balances[_to],\n            \"UINT256_OVERFLOW\"\n        );\n\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n    \n        emit Transfer(\n            _from,\n            _to,\n            _value\n        );\n    \n        return true;\n    }\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool)\n    {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(\n            msg.sender,\n            _spender,\n            _value\n        );\n        return true;\n    }\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256)\n    {\n        return _totalSupply;\n    }\n\n    /// @dev Query the balance of owner\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256)\n    {\n        return balances[_owner];\n    }\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n}\n",
		"tokens/ERC20Token/IERC20Token.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\n\ncontract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n    \n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n    \n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n}\n",
		"protocol/Exchange/interfaces/IExchange.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./IExchangeCore.sol\";\nimport \"./IMatchOrders.sol\";\nimport \"./ISignatureValidator.sol\";\nimport \"./ITransactions.sol\";\nimport \"./IAssetProxyDispatcher.sol\";\nimport \"./IWrapperFunctions.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract IExchange is\n    IExchangeCore,\n    IMatchOrders,\n    ISignatureValidator,\n    ITransactions,\n    IAssetProxyDispatcher,\n    IWrapperFunctions\n{}\n",
		"protocol/Exchange/interfaces/IExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\n\n\ncontract IExchangeCore {\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrder(LibOrder.Order memory order)\n        public;\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n}\n",
		"protocol/Exchange/libs/LibOrder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\nimport \"./LibEIP712.sol\";\n\n\ncontract LibOrder is\n    LibEIP712\n{\n    // Hash for the EIP712 Order Schema\n    bytes32 constant internal EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"Order(\",\n        \"address makerAddress,\",\n        \"address takerAddress,\",\n        \"address feeRecipientAddress,\",\n        \"address senderAddress,\",\n        \"uint256 makerAssetAmount,\",\n        \"uint256 takerAssetAmount,\",\n        \"uint256 makerFee,\",\n        \"uint256 takerFee,\",\n        \"uint256 expirationTimeSeconds,\",\n        \"uint256 salt,\",\n        \"bytes makerAssetData,\",\n        \"bytes takerAssetData\",\n        \")\"\n    ));\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's state is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    struct Order {\n        address makerAddress;           // Address that created the order.      \n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.          \n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.      \n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.        \n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.        \n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.          \n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.     \n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\n    }\n    // solhint-enable max-line-length\n\n    struct OrderInfo {\n        uint8 orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 hash of the order (see LibOrder.getOrderHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates Keccak-256 hash of the order.\n    /// @param order The order structure.\n    /// @return Keccak-256 EIP712 hash of the order.\n    function getOrderHash(Order memory order)\n        internal\n        view\n        returns (bytes32 orderHash)\n    {\n        orderHash = hashEIP712Message(hashOrder(order));\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order.\n    function hashOrder(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = EIP712_ORDER_SCHEMA_HASH;\n        bytes32 makerAssetDataHash = keccak256(order.makerAssetData);\n        bytes32 takerAssetDataHash = keccak256(order.takerAssetData);\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     bytes32(order.makerAddress),\n        //     bytes32(order.takerAddress),\n        //     bytes32(order.feeRecipientAddress),\n        //     bytes32(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData)\n        // ));\n\n        assembly {\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n            \n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, makerAssetDataHash)\n            mstore(pos3, takerAssetDataHash)\n            result := keccak256(pos1, 416)\n            \n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n        }\n        return result;\n    }\n}\n",
		"protocol/Exchange/libs/LibEIP712.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\n\ncontract LibEIP712 {\n\n    // EIP191 header for EIP712 prefix\n    string constant internal EIP191_HEADER = \"\\x19\\x01\";\n\n    // EIP712 Domain Name value\n    string constant internal EIP712_DOMAIN_NAME = \"0x Protocol\";\n\n    // EIP712 Domain Version value\n    string constant internal EIP712_DOMAIN_VERSION = \"2\";\n\n    // Hash of the EIP712 Domain Separator Schema\n    bytes32 constant internal EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"EIP712Domain(\",\n        \"string name,\",\n        \"string version,\",\n        \"address verifyingContract\",\n        \")\"\n    ));\n\n    // Hash of the EIP712 Domain Separator data\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 public EIP712_DOMAIN_HASH;\n\n    constructor ()\n        public\n    {\n        EIP712_DOMAIN_HASH = keccak256(abi.encodePacked(\n            EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n            keccak256(bytes(EIP712_DOMAIN_NAME)),\n            keccak256(bytes(EIP712_DOMAIN_VERSION)),\n            bytes32(address(this))\n        ));\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct in this EIP712 Domain.\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to this EIP712 Domain.\n    function hashEIP712Message(bytes32 hashStruct)\n        internal\n        view\n        returns (bytes32 result)\n    {\n        bytes32 eip712DomainHash = EIP712_DOMAIN_HASH;\n\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct    \n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n",
		"protocol/Exchange/libs/LibFillResults.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\nimport \"../../../utils/SafeMath/SafeMath.sol\";\n\n\ncontract LibFillResults is\n    SafeMath\n{\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of ZRX paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of ZRX paid by taker to feeRecipients(s).\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                    // Amounts filled and fees paid of left order.\n        FillResults right;                   // Amounts filled and fees paid of right order.\n        uint256 leftMakerAssetSpreadAmount;  // Spread between price of left and right order, denominated in the left order's makerAsset, paid to taker.\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    ///      Modifies the first FillResults instance specified.\n    /// @param totalFillResults Fill results instance that will be added onto.\n    /// @param singleFillResults Fill results instance that will be added to totalFillResults.\n    function addFillResults(FillResults memory totalFillResults, FillResults memory singleFillResults)\n        internal\n        pure\n    {\n        totalFillResults.makerAssetFilledAmount = safeAdd(totalFillResults.makerAssetFilledAmount, singleFillResults.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = safeAdd(totalFillResults.takerAssetFilledAmount, singleFillResults.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = safeAdd(totalFillResults.makerFeePaid, singleFillResults.makerFeePaid);\n        totalFillResults.takerFeePaid = safeAdd(totalFillResults.takerFeePaid, singleFillResults.takerFeePaid);\n    }\n}\n",
		"utils/SafeMath/SafeMath.sol": "pragma solidity 0.4.24;\n\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(\n            c / a == b,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(\n            b <= a,\n            \"UINT256_UNDERFLOW\"\n        );\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        require(\n            c >= a,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
		"protocol/Exchange/interfaces/IMatchOrders.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\n\n\ncontract IMatchOrders {\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n",
		"protocol/Exchange/interfaces/ISignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\n\ncontract ISignatureValidator {\n\n    /// @dev Approves a hash on-chain using any valid signature type.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    function preSign(\n        bytes32 hash,\n        address signerAddress,\n        bytes signature\n    )\n        external;\n    \n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external;\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signerAddress Address of signer.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n}\n",
		"protocol/Exchange/interfaces/ITransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity 0.4.24;\n\n\ncontract ITransactions {\n\n    /// @dev Executes an exchange method call in the context of signer.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @param signature Proof of signer transaction by signer.\n    function executeTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes data,\n        bytes signature\n    )\n        external;\n}\n",
		"protocol/Exchange/interfaces/IAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\n\ncontract IAssetProxyDispatcher {\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n",
		"protocol/Exchange/interfaces/IWrapperFunctions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\n\n\ncontract IWrapperFunctions {\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrKill.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrders(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrders(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously cancels multiple orders in a single transaction.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public;\n\n    /// @dev Fetches information for all passed in orders\n    /// @param orders Array of order specifications.\n    /// @return Array of OrderInfo instances that correspond to each order.\n    function getOrdersInfo(LibOrder.Order[] memory orders)\n        public\n        view\n        returns (LibOrder.OrderInfo[] memory);\n}\n"
	},
	"sourceTreeHashHex": "0x0a50f8669272e24a379ae0e6b297acf97d913b411d5c072fa0e68e4296260e74",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.4.24+commit.e67f0147.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"networks": {}
}