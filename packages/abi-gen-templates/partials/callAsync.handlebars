async callAsync(
{{> typed_params inputs=inputs}}
    callData: Partial<CallData> = {},
    defaultBlock?: BlockParam,
): Promise<{{> return_type outputs=outputs}}> {
    const self = this as any as {{contractName}}Contract;
    const functionSignature = '{{this.functionSignature}}';
    const inputAbi = self._lookupAbi(functionSignature).inputs;
    [{{> params inputs=inputs}}] = BaseContract._formatABIDataItemList(inputAbi, [{{> params inputs=inputs}}], BaseContract._bigNumberToString.bind(self));
    const abiEncoder = self._lookupAbiEncoder(functionSignature);
    const encodedData = abiEncoder.encode([{{> params inputs=inputs}}]);
    const callDataWithDefaults = await BaseContract._applyDefaultsToTxDataAsync(
        {
            to: self.address,
            ...callData,
            data: encodedData,
        },
        self._web3Wrapper.getContractDefaults(),
    );
    const rawCallResult = await self._web3Wrapper.callAsync(callDataWithDefaults, defaultBlock);
    BaseContract._throwIfRevertWithReasonCallResult(rawCallResult);
    const decodingRules = {structsAsObjects: false};
    let resultArray = abiEncoder.decodeReturnValues(rawCallResult, decodingRules);
    const outputAbi = (_.find(self.abi, {name: '{{this.name}}'}) as MethodAbi).outputs;
    resultArray = BaseContract._formatABIDataItemList(outputAbi, resultArray, BaseContract._lowercaseAddress.bind(this));
    resultArray = BaseContract._formatABIDataItemList(outputAbi, resultArray, BaseContract._bnToBigNumber.bind(this));
    return resultArray{{#singleReturnValue}}[0]{{/singleReturnValue}};
},
