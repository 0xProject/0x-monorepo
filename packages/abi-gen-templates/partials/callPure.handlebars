public {{this.tsName}} = {
    async callAsync(
    {{> typed_params inputs=inputs}}
    ): Promise<{{> return_type outputs=outputs}}> {
        const self = this as any as {{contractName}}Contract;
        const encodedData = self._strictEncodeArguments('{{this.functionSignature}}', [{{> params inputs=inputs}}]);
        const encodedDataBytes = Buffer.from(encodedData.substr(2), 'hex');
        const rawCallResultBytes = await self.evmExecAsync(encodedDataBytes);
        const rawCallResultHex = `0x${Buffer.from(rawCallResultBytes).toString('hex')}`;
        BaseContract._throwIfRevertWithReasonCallResult(rawCallResultHex);
        const abiEncoder = self._lookupAbiEncoder('{{this.functionSignature}}');
        // tslint:disable boolean-naming
        const result = abiEncoder.strictDecodeReturnValue<{{> return_type outputs=outputs}}>(rawCallResultHex);
        // tslint:enable boolean-naming
        return result;
    }
};
