public {{this.tsName}} = {
    async sendTransactionAsync(
    {{> typed_params inputs=inputs}}
    {{#this.payable}}
        txData: Partial<TxDataPayable> = {},
    {{/this.payable}}
    {{^this.payable}}
        txData: Partial<TxData> = {},
    {{/this.payable}}
    ): Promise<string> {
        const self = this as any as {{contractName}}Contract;
        const encodedData = self._strictEncodeArguments('{{this.functionSignature}}', [{{> params inputs=inputs}}]);
        const txDataWithDefaults = await BaseContract._applyDefaultsToTxDataAsync(
            {
                to: self.address,
                ...txData,
                data: encodedData,
            },
            self._web3Wrapper.getContractDefaults(),
            self.{{this.tsName}}.estimateGasAsync.bind(
                self,
                {{> params inputs=inputs}}
            ),
        );
        const txHash = await self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
        return txHash;
    },
    async awaitTransactionSuccessAsync(
    {{> typed_params inputs=inputs}}
        pollingIntervalMs?: number,
        timeoutMs?: number,
    ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
        const self = this as any as {{contractName}}Contract;
        const txHash = await self.{{this.tsName}}.sendTransactionAsync({{> params input=inputs}});
        // tslint:disable-next-line: no-unnecessary-type-assertion
        const receiptPromise = self._web3Wrapper.awaitTransactionSuccessAsync(
            txHash,
            pollingIntervalMs,
            timeoutMs,
        ) as PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs>;
        receiptPromise.txHash = txHash;
        return receiptPromise;
    },
    async estimateGasAsync(
    {{> typed_params inputs=inputs}}
        txData: Partial<TxData> = {},
    ): Promise<number> {
        const self = this as any as {{contractName}}Contract;
        const encodedData = self._strictEncodeArguments('{{this.functionSignature}}', [{{> params inputs=inputs}}]);
        const txDataWithDefaults = await BaseContract._applyDefaultsToTxDataAsync(
            {
                to: self.address,
                ...txData,
                data: encodedData,
            },
            self._web3Wrapper.getContractDefaults(),
        );
        const gas = await self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
        return gas;
    },
    getABIEncodedTransactionData(
    {{> typed_params inputs=inputs}}
    ): string {
        const self = this as any as {{contractName}}Contract;
        const abiEncodedTransactionData = self._strictEncodeArguments('{{this.functionSignature}}', [{{> params inputs=inputs}}]);
        return abiEncodedTransactionData;
    },
    {{> callAsync}}
};
