public {{this.tsName}} = {
    async sendTransactionAsync(
    {{> typed_params inputs=inputs}}
    {{#this.payable}}
        txData: Partial<TxDataPayable> = {},
    {{/this.payable}}
    {{^this.payable}}
        txData: Partial<TxData> = {},
    {{/this.payable}}
    ): Promise<string> {
        const self = this as any as {{contractName}}Contract;
        const encodedData = self._strictEncodeArguments(self.{{this.tsName}}.functionSignature, [{{> params inputs=inputs}}]);
        const gasEstimateFunction = self.{{this.tsName}}.estimateGasAsync.bind(self, {{> params inputs=inputs}});
        const txHash = await self._sendTransactionAsync(self.address, encodedData, txData, gasEstimateFunction);
        return txHash;
    },
    async estimateGasAsync(
    {{> typed_params inputs=inputs}}
        txData: Partial<TxData> = {},
    ): Promise<number> {
        const self = this as any as {{contractName}}Contract;
        const encodedData = self._strictEncodeArguments(self.{{this.tsName}}.functionSignature, [{{> params inputs=inputs}}]);
        const gas = await self._estimateGasAsync(self.address, encodedData, txData);
        return gas;
    },
    getABIEncodedTransactionData(
    {{> typed_params inputs=inputs}}
    ): string {
        const self = this as any as {{contractName}}Contract;
        const abiEncodedTransactionData = self._strictEncodeArguments(self.{{this.tsName}}.functionSignature, [{{> params inputs=inputs}}]);
        return abiEncodedTransactionData;
    },
    {{> callAsync}}
};
