"""Generated wrapper for {{contractName}} Solidity contract."""

from typing import Optional, Tuple, Union

from hexbytes import HexBytes
from web3.datastructures import AttributeDict
from web3.providers.base import BaseProvider

from zero_ex.contract_artifacts import abi_by_name

from ._base_contract_wrapper import BaseContractWrapper
from .tx_params import TxParams


class {{contractName}}(BaseContractWrapper):
    """Wrapper class for {{contractName}} Solidity contract."""

    def __init__(
        self,
        provider: BaseProvider,
        account_address: str = None,
        private_key: str = None,
    ):
        """Get an instance of wrapper for smart contract.

        :param provider: instance of :class:`web3.providers.base.BaseProvider`
        """
        super({{contractName}}, self).__init__(
            provider=provider,
            account_address=account_address,
            private_key=private_key,
        )

    def _get_contract_instance(self, token_address):
        """Get an instance of the smart contract at a specific address.

        :returns: contract object
        """
        return self._contract_instance(
            address=token_address, abi=abi_by_name("{{contractName}}")
        )
{{#each methods}}
{{> call contractName=../contractName}}
{{/each}}
{{#each events}}
{{> event}}
{{/each}}
