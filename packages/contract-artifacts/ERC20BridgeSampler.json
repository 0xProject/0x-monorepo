{
	"schemaVersion": "2.0.0",
	"contractName": "ERC20BridgeSampler",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "devUtilsAddress",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "callDatas",
						"type": "bytes[]"
					}
				],
				"name": "batchCall",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "callResults",
						"type": "bytes[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "registryAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "takerToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "makerToken",
						"type": "address"
					}
				],
				"name": "getLiquidityProviderFromRegistry",
				"outputs": [
					{
						"internalType": "address",
						"name": "providerAddress",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "makerAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "takerAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "senderAddress",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "salt",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "takerAssetData",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "makerFeeAssetData",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "takerFeeAssetData",
								"type": "bytes"
							}
						],
						"internalType": "struct LibOrder.Order[]",
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"internalType": "bytes[]",
						"name": "orderSignatures",
						"type": "bytes[]"
					}
				],
				"name": "getOrderFillableMakerAssetAmounts",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "orderFillableMakerAssetAmounts",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "makerAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "takerAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "senderAddress",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "salt",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "takerAssetData",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "makerFeeAssetData",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "takerFeeAssetData",
								"type": "bytes"
							}
						],
						"internalType": "struct LibOrder.Order[]",
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"internalType": "bytes[]",
						"name": "orderSignatures",
						"type": "bytes[]"
					}
				],
				"name": "getOrderFillableTakerAssetAmounts",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "orderFillableTakerAssetAmounts",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "curveAddress",
						"type": "address"
					},
					{
						"internalType": "int128",
						"name": "fromTokenIdx",
						"type": "int128"
					},
					{
						"internalType": "int128",
						"name": "toTokenIdx",
						"type": "int128"
					},
					{
						"internalType": "uint256[]",
						"name": "makerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"name": "sampleBuysFromCurve",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "takerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "takerToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "makerToken",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "makerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"name": "sampleBuysFromEth2Dai",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "takerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "takerToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "makerToken",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "makerTokenAmounts",
						"type": "uint256[]"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "targetSlippageBps",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxIterations",
								"type": "uint256"
							}
						],
						"internalType": "struct IERC20BridgeSampler.FakeBuyOptions",
						"name": "opts",
						"type": "tuple"
					}
				],
				"name": "sampleBuysFromKyberNetwork",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "takerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "registryAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "takerToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "makerToken",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "makerTokenAmounts",
						"type": "uint256[]"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "targetSlippageBps",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxIterations",
								"type": "uint256"
							}
						],
						"internalType": "struct IERC20BridgeSampler.FakeBuyOptions",
						"name": "opts",
						"type": "tuple"
					}
				],
				"name": "sampleBuysFromLiquidityProviderRegistry",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "takerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "takerToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "makerToken",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "makerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"name": "sampleBuysFromUniswap",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "takerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address[]",
						"name": "path",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "makerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"name": "sampleBuysFromUniswapV2",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "takerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "curveAddress",
						"type": "address"
					},
					{
						"internalType": "int128",
						"name": "fromTokenIdx",
						"type": "int128"
					},
					{
						"internalType": "int128",
						"name": "toTokenIdx",
						"type": "int128"
					},
					{
						"internalType": "uint256[]",
						"name": "takerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"name": "sampleSellsFromCurve",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "makerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "takerToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "makerToken",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "takerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"name": "sampleSellsFromEth2Dai",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "makerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "takerToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "makerToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "intermediateToken",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "takerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"name": "sampleSellsFromEth2DaiHop",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "makerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "takerToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "makerToken",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "takerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"name": "sampleSellsFromKyberNetwork",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "makerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "registryAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "takerToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "makerToken",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "takerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"name": "sampleSellsFromLiquidityProviderRegistry",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "makerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "multibridge",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "takerToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "intermediateToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "makerToken",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "takerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"name": "sampleSellsFromMultiBridge",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "makerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "takerToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "makerToken",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "takerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"name": "sampleSellsFromUniswap",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "makerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address[]",
						"name": "path",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "takerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"name": "sampleSellsFromUniswapV2",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "makerTokenAmounts",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {
				"batchCall(bytes[])": {
					"details": "Call multiple public functions on this contract in a single transaction.",
					"params": {
						"callDatas": "ABI-encoded call data for each function call."
					},
					"return": "callResults ABI-encoded results data for each call."
				},
				"getLiquidityProviderFromRegistry(address,address,address)": {
					"details": "Returns the address of a liquidity provider for the given market      (takerToken, makerToken), from a registry of liquidity providers.      Returns address(0) if no such provider exists in the registry.",
					"params": {
						"makerToken": "Maker asset managed by liquidity provider.",
						"takerToken": "Taker asset managed by liquidity provider."
					},
					"return": "providerAddress Address of the liquidity provider."
				},
				"getOrderFillableMakerAssetAmounts((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],bytes[])": {
					"details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or",
					"params": {
						"orderSignatures": "Signatures for each respective order in `orders`.",
						"orders": "Native orders to query."
					},
					"return": "orderFillableMakerAssetAmounts How much maker asset can be filled         by each order in `orders`."
				},
				"getOrderFillableTakerAssetAmounts((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],bytes[])": {
					"details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or      maker/taker asset amounts (returning 0).",
					"params": {
						"orderSignatures": "Signatures for each respective order in `orders`.",
						"orders": "Native orders to query."
					},
					"return": "orderFillableTakerAssetAmounts How much taker asset can be filled         by each order in `orders`."
				},
				"sampleBuysFromCurve(address,int128,int128,uint256[])": {
					"details": "Sample buy quotes from Curve.",
					"params": {
						"curveAddress": "Address of the Curve contract.",
						"fromTokenIdx": "Index of the taker token (what to sell).",
						"makerTokenAmounts": "Maker token buy amount for each sample.",
						"toTokenIdx": "Index of the maker token (what to buy)."
					},
					"return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
				},
				"sampleBuysFromEth2Dai(address,address,uint256[])": {
					"details": "Sample buy quotes from Eth2Dai/Oasis.",
					"params": {
						"makerToken": "Address of the maker token (what to buy).",
						"takerToken": "Address of the taker token (what to sell).",
						"takerTokenAmounts": "Maker token sell amount for each sample."
					},
					"return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
				},
				"sampleBuysFromKyberNetwork(address,address,uint256[],(uint256,uint256))": {
					"details": "Sample buy quotes from Kyber.",
					"params": {
						"makerToken": "Address of the maker token (what to buy).",
						"makerTokenAmounts": "Maker token buy amount for each sample.",
						"opts": "`FakeBuyOptions` specifying target slippage and max iterations.",
						"takerToken": "Address of the taker token (what to sell)."
					},
					"return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
				},
				"sampleBuysFromLiquidityProviderRegistry(address,address,address,uint256[],(uint256,uint256))": {
					"details": "Sample buy quotes from an arbitrary on-chain liquidity provider.",
					"params": {
						"makerToken": "Address of the maker token (what to buy).",
						"makerTokenAmounts": "Maker token buy amount for each sample.",
						"opts": "`FakeBuyOptions` specifying target slippage and max iterations.",
						"registryAddress": "Address of the liquidity provider registry contract.",
						"takerToken": "Address of the taker token (what to sell)."
					},
					"return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
				},
				"sampleBuysFromUniswap(address,address,uint256[])": {
					"details": "Sample buy quotes from Uniswap.",
					"params": {
						"makerToken": "Address of the maker token (what to buy).",
						"makerTokenAmounts": "Maker token sell amount for each sample.",
						"takerToken": "Address of the taker token (what to sell)."
					},
					"return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
				},
				"sampleBuysFromUniswapV2(address[],uint256[])": {
					"details": "Sample buy quotes from UniswapV2.",
					"params": {
						"makerTokenAmounts": "Maker token buy amount for each sample.",
						"path": "Token route. Should be takerToken -> makerToken."
					},
					"return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
				},
				"sampleSellsFromCurve(address,int128,int128,uint256[])": {
					"details": "Sample sell quotes from Curve.",
					"params": {
						"curveAddress": "Address of the Curve contract.",
						"fromTokenIdx": "Index of the taker token (what to sell).",
						"takerTokenAmounts": "Taker token sell amount for each sample.",
						"toTokenIdx": "Index of the maker token (what to buy)."
					},
					"return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
				},
				"sampleSellsFromEth2Dai(address,address,uint256[])": {
					"details": "Sample sell quotes from Eth2Dai/Oasis.",
					"params": {
						"makerToken": "Address of the maker token (what to buy).",
						"takerToken": "Address of the taker token (what to sell).",
						"takerTokenAmounts": "Taker token sell amount for each sample."
					},
					"return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
				},
				"sampleSellsFromEth2DaiHop(address,address,address,uint256[])": {
					"details": "Sample sell quotes from Eth2Dai/Oasis using a hop to an intermediate token.      I.e WBTC/DAI via ETH or WBTC/ETH via DAI",
					"params": {
						"intermediateToken": "Address of the token to hop to.",
						"makerToken": "Address of the maker token (what to buy).",
						"takerToken": "Address of the taker token (what to sell).",
						"takerTokenAmounts": "Taker token sell amount for each sample."
					},
					"return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
				},
				"sampleSellsFromKyberNetwork(address,address,uint256[])": {
					"details": "Sample sell quotes from Kyber.",
					"params": {
						"makerToken": "Address of the maker token (what to buy).",
						"takerToken": "Address of the taker token (what to sell).",
						"takerTokenAmounts": "Taker token sell amount for each sample."
					},
					"return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
				},
				"sampleSellsFromLiquidityProviderRegistry(address,address,address,uint256[])": {
					"details": "Sample sell quotes from an arbitrary on-chain liquidity provider.",
					"params": {
						"makerToken": "Address of the maker token (what to buy).",
						"registryAddress": "Address of the liquidity provider registry contract.",
						"takerToken": "Address of the taker token (what to sell).",
						"takerTokenAmounts": "Taker token sell amount for each sample."
					},
					"return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
				},
				"sampleSellsFromMultiBridge(address,address,address,address,uint256[])": {
					"details": "Sample sell quotes from MultiBridge.",
					"params": {
						"intermediateToken": "The address of the intermediate token to        use in an indirect route.",
						"makerToken": "Address of the maker token (what to buy).",
						"multibridge": "Address of the MultiBridge contract.",
						"takerToken": "Address of the taker token (what to sell).",
						"takerTokenAmounts": "Taker token sell amount for each sample."
					},
					"return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
				},
				"sampleSellsFromUniswap(address,address,uint256[])": {
					"details": "Sample sell quotes from Uniswap.",
					"params": {
						"makerToken": "Address of the maker token (what to buy).",
						"takerToken": "Address of the taker token (what to sell).",
						"takerTokenAmounts": "Taker token sell amount for each sample."
					},
					"return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
				},
				"sampleSellsFromUniswapV2(address[],uint256[])": {
					"details": "Sample sell quotes from UniswapV2.",
					"params": {
						"path": "Token route. Should be takerToken -> makerToken",
						"takerTokenAmounts": "Taker token sell amount for each sample."
					},
					"return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
				}
			}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x60806040523480156200001157600080fd5b5060405162003d9738038062003d9783398101604081905262000034916200005a565b600080546001600160a01b0319166001600160a01b03929092169190911790556200008a565b6000602082840312156200006c578081fd5b81516001600160a01b038116811462000083578182fd5b9392505050565b613cfd806200009a6000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c806368be3cf2116100b25780639f76ad3511610081578063c7f7142e11610066578063c7f7142e1461027b578063d0eea06d1461029b578063e68248f7146102ae57610136565b80639f76ad3514610255578063abffc7611461026857610136565b806368be3cf2146101fc5780636dd6b78d1461021c5780638b123a021461022f57806398cdafba1461024257610136565b80634cb8e2531161010957806359f515d0116100ee57806359f515d0146101c357806360ee052a146101d657806364ee6ade146101e957610136565b80634cb8e2531461019d57806358306ba0146101b057610136565b80631796fb871461013b5780632d753aa414610164578063354152a3146101775780634703a7e61461018a575b600080fd5b61014e6101493660046133ca565b6102c1565b60405161015b919061399f565b60405180910390f35b61014e61017236600461317a565b610492565b61014e6101853660046133ca565b610688565b61014e6101983660046132f8565b610842565b61014e6101ab3660046132f8565b610a1e565b61014e6101be366004613200565b610c38565b61014e6101d1366004613537565b610ccf565b61014e6101e43660046132f8565b610d78565b61014e6101f73660046132f8565b611038565b61020f61020a3660046134cb565b6111fe565b60405161015b9190613921565b61014e61022a3660046132f8565b61133d565b61014e61023d366004613537565b6115e5565b61014e610250366004613273565b6118be565b61014e610263366004613200565b6118f8565b61014e610276366004613408565b611afc565b61028e610289366004613130565b611cdf565b60405161015b91906137c1565b61014e6102a9366004613358565b611e1a565b61014e6102bc366004613408565b611e4b565b6060600082519050806040519080825280602002602001820160405280156102f3578160200160208202803883390190505b50915060005b8181101561048857600060608873ffffffffffffffffffffffffffffffffffffffff16620927c0600073ffffffffffffffffffffffffffffffffffffffff16630e71d1b9905060e01b8a8a8a888151811061035057fe5b602002602001015160405160240161036a939291906139e2565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516103f391906137a5565b6000604051808303818686fa925050503d806000811461042f576040519150601f19603f3d011682016040523d82523d6000602084013e610434565b606091505b5090925090506000821561045d578180602001905161045691908101906136de565b9050610465565b505050610488565b8086858151811061047257fe5b60209081029190910101525050506001016102f9565b5050949350505050565b6060600082519050806040519080825280602002602001820160405280156104c4578160200160208202803883390190505b50915073ffffffffffffffffffffffffffffffffffffffff87166104e8575061067f565b60005b8181101561067c57600060608973ffffffffffffffffffffffffffffffffffffffff1662061a80600073ffffffffffffffffffffffffffffffffffffffff16636e79e133905060e01b8b8b8b8b898151811061054357fe5b602002602001015160405160240161055e949392919061384a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516105e791906137a5565b6000604051808303818686fa925050503d8060008114610623576040519150601f19603f3d011682016040523d82523d6000602084013e610628565b606091505b50909250905060008215610651578180602001905161064a91908101906136de565b9050610659565b50505061067c565b8086858151811061066657fe5b60209081029190910101525050506001016104eb565b50505b95945050505050565b6060600082519050806040519080825280602002602001820160405280156106ba578160200160208202803883390190505b50915060005b8181101561048857600060608873ffffffffffffffffffffffffffffffffffffffff16620927c0600073ffffffffffffffffffffffffffffffffffffffff166307211ef7905060e01b8a8a8a888151811061071757fe5b6020026020010151604051602401610731939291906139e2565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516107ba91906137a5565b6000604051808303818686fa925050503d80600081146107f6576040519150601f19603f3d011682016040523d82523d6000602084013e6107fb565b606091505b5090925090506000821561045d578180602001905161081d91908101906136de565b90508086858151811061082c57fe5b60209081029190910101525050506001016106c0565b606061084e838561201e565b8151604080518281526020808402820101909152818015610879578160200160208202803883390190505b50915060005b81811015610a155760006060610893612091565b73ffffffffffffffffffffffffffffffffffffffff16620f4240600073ffffffffffffffffffffffffffffffffffffffff1663ff1fd974905060e01b8a8a8a88815181106108dd57fe5b60200260200101516040516024016108f7939291906138ba565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161098091906137a5565b6000604051808303818686fa925050503d80600081146109bc576040519150601f19603f3d011682016040523d82523d6000602084013e6109c1565b606091505b509092509050600082156109ea57818060200190516109e391908101906136de565b90506109f2565b505050610a15565b808685815181106109ff57fe5b602090810291909101015250505060010161087f565b50509392505050565b6060610a2a838561201e565b8151604080518281526020808402820101909152818015610a55578160200160208202803883390190505b5091506000610a626120a9565b9050600080805b84811015610c2c578373ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480610ad657508373ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b15610b6e57610af98989898481518110610aec57fe5b60200260200101516120c1565b909350915073ffffffffffffffffffffffffffffffffffffffff82167331e085afd48a1d6e51cc193153d625e8f0514c7f1480610b5f575073ffffffffffffffffffffffffffffffffffffffff8216731e158c0e93c30d24e918ef83d1e0be23595c3c0f145b15610b6957600092505b610c0c565b610b7f8985898481518110610aec57fe5b90935091508215610c0c576000610b97858a866120c1565b909450905073ffffffffffffffffffffffffffffffffffffffff83167331e085afd48a1d6e51cc193153d625e8f0514c7f148015610c0057508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15610c0a57600093505b505b82868281518110610c1957fe5b6020908102919091010152600101610a69565b50505050509392505050565b60608273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610c9f57508273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b15610ca957610cc7565b6060610cb6868585611038565b9050610cc3848683611038565b9150505b949350505050565b6060610cdb83836115e5565b905060005b8351811015610d7157818181518110610cf557fe5b6020026020010151600014610d6957610d50828281518110610d1357fe5b6020026020010151858381518110610d2757fe5b602002602001015160a00151868481518110610d3f57fe5b602002602001015160800151612435565b828281518110610d5c57fe5b6020026020010181815250505b600101610ce0565b5092915050565b6060610d84838561201e565b8151604080518281526020808402820101909152818015610daf578160200160208202803883390190505b5091506000610dbc6120a9565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610dfc57610df786612477565b610dff565b60005b90506000610e0b6120a9565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610e4b57610e4686612477565b610e4e565b60005b905060005b8381101561102d576001610e656120a9565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415610efc578651610edb9085907f2640f62c00000000000000000000000000000000000000000000000000000000908a9086908110610ece57fe5b602002602001015161250f565b878481518110610ee757fe5b60200260200101819350828152505050611019565b610f046120a9565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415610f6d578651610edb9084907f59e9486200000000000000000000000000000000000000000000000000000000908a9086908110610ece57fe5b8651600090610fa69085907f59e9486200000000000000000000000000000000000000000000000000000000908b9087908110610ece57fe5b925090508015610ffc57610fdb857f2640f62c000000000000000000000000000000000000000000000000000000008361250f565b888581518110610fe757fe5b60200260200101819450828152505050611017565b600087848151811061100a57fe5b6020026020010181815250505b505b80611024575061102d565b50600101610e53565b505050509392505050565b6060611044838561201e565b815160408051828152602080840282010190915281801561106f578160200160208202803883390190505b50915060005b81811015610a155760006060611089612091565b73ffffffffffffffffffffffffffffffffffffffff16620f4240600073ffffffffffffffffffffffffffffffffffffffff1663144a2752905060e01b898b8a88815181106110d357fe5b60200260200101516040516024016110ed939291906138ba565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161117691906137a5565b6000604051808303818686fa925050503d80600081146111b2576040519150601f19603f3d011682016040523d82523d6000602084013e6111b7565b606091505b509092509050600082156109ea57818060200190516111d991908101906136de565b9050808685815181106111e857fe5b6020908102919091010152505050600101611075565b60408051828152602080840282010190915260609082801561123457816020015b606081526020019060019003908161121f5790505b50905060005b808314610d7157600060603086868581811061125257fe5b6020028201905080357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe13684900301811261128c57600080fd5b9091016020810191503567ffffffffffffffff8111156112ab57600080fd5b368190038213156112bb57600080fd5b6040516112c9929190613795565b600060405180830381855afa9150503d8060008114611304576040519150601f19603f3d011682016040523d82523d6000602084013e611309565b606091505b50915091508161131b57805160208201fd5b8084848151811061132857fe5b6020908102919091010152505060010161123a565b6060611349838561201e565b8151604080518281526020808402820101909152818015611374578160200160208202803883390190505b50915060006113816120a9565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146113c1576113bc86612477565b6113c4565b60005b905060006113d06120a9565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146114105761140b86612477565b611413565b60005b905060005b8381101561102d57600161142a6120a9565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614156114b45786516114939085907f95b68fe700000000000000000000000000000000000000000000000000000000908a9086908110610ece57fe5b87848151811061149f57fe5b602002602001018193508281525050506115d1565b6114bc6120a9565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614156115255786516114939084907fcd7724c300000000000000000000000000000000000000000000000000000000908a9086908110610ece57fe5b865160009061155e9086907f95b68fe700000000000000000000000000000000000000000000000000000000908b9087908110610ece57fe5b9250905080156115b457611593847fcd7724c3000000000000000000000000000000000000000000000000000000008361250f565b88858151811061159f57fe5b602002602001018194508281525050506115cf565b60008784815181106115c257fe5b6020026020010181815250505b505b806115dc575061102d565b50600101611418565b60608251604051908082528060200260200182016040528015611612578160200160208202803883390190505b506000805491925073ffffffffffffffffffffffffffffffffffffffff909116905b845181146118b65783818151811061164857fe5b60200260200101515160001480611676575084818151811061166657fe5b6020026020010151608001516000145b80611698575084818151811061168857fe5b602002602001015160a001516000145b156116bc5760008382815181106116ab57fe5b6020026020010181815250506118ae565b600060608373ffffffffffffffffffffffffffffffffffffffff166207a1208573ffffffffffffffffffffffffffffffffffffffff1663e77286eb905060e01b89868151811061170857fe5b602002602001015189878151811061171c57fe5b6020026020010151604051602401611735929190613a5d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516117be91906137a5565b6000604051808303818686fa925050503d80600081146117fa576040519150601f19603f3d011682016040523d82523d6000602084013e6117ff565b606091505b50915091508161182a57600085848151811061181757fe5b60200260200101818152505050506118ae565b611832612dce565b600080838060200190516118499190810190613671565b9194509250905060038351600681111561185f57fe5b14158061186a575080155b1561188e57600088878151811061187d57fe5b6020026020010181815250506118a8565b8188878151811061189b57fe5b6020026020010181815250505b50505050505b600101611634565b505092915050565b60606118ee858585857f9f76ad35000000000000000000000000000000000000000000000000000000008b612657565b9695505050505050565b60606000825190508060405190808252806020026020018201604052801561192a578160200160208202803883390190505b509150600061193a878787611cdf565b905073ffffffffffffffffffffffffffffffffffffffff811661195f5750610cc79050565b60005b82811015611af157600060608373ffffffffffffffffffffffffffffffffffffffff1662061a80600073ffffffffffffffffffffffffffffffffffffffff1663343fbcdd905060e01b8b8b8b88815181106119b957fe5b60200260200101516040516024016119d3939291906138ba565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051611a5c91906137a5565b6000604051808303818686fa925050503d8060008114611a98576040519150601f19603f3d011682016040523d82523d6000602084013e611a9d565b606091505b50909250905060008215611ac65781806020019051611abf91908101906136de565b9050611ace565b505050611af1565b80878581518110611adb57fe5b6020908102919091010152505050600101611962565b505050949350505050565b606060008251905080604051908082528060200260200182016040528015611b2e578160200160208202803883390190505b50915060005b818110156118b65760006060611b4861281d565b73ffffffffffffffffffffffffffffffffffffffff16620249f0600073ffffffffffffffffffffffffffffffffffffffff1663d06ca61f905060e01b888681518110611b9057fe5b60200260200101518a604051602401611baa929190613bba565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051611c3391906137a5565b6000604051808303818686fa925050503d8060008114611c6f576040519150601f19603f3d011682016040523d82523d6000602084013e611c74565b606091505b50909250905060008215611cb45781806020019051611c9691908101906135de565b600189510381518110611ca557fe5b60200260200101519050611cbc565b5050506118b6565b80868581518110611cc957fe5b6020908102919091010152505050600101611b34565b6040516000906060907f153f59970000000000000000000000000000000000000000000000000000000090611d1a90869086906024016137e2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608673ffffffffffffffffffffffffffffffffffffffff1683604051611da291906137a5565b600060405180830381855afa9150503d8060008114611ddd576040519150601f19603f3d011682016040523d82523d6000602084013e611de2565b606091505b5091509150818015611df5575080516020145b15611e0f57611e0581600c612835565b9350505050611e13565b5050505b9392505050565b606061067f858585857f4cb8e253000000000000000000000000000000000000000000000000000000006000612657565b606060008251905080604051908082528060200260200182016040528015611e7d578160200160208202803883390190505b50915060005b818110156118b65760006060611e9761281d565b73ffffffffffffffffffffffffffffffffffffffff16620249f0600073ffffffffffffffffffffffffffffffffffffffff16631f00ca74905060e01b888681518110611edf57fe5b60200260200101518a604051602401611ef9929190613bba565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051611f8291906137a5565b6000604051808303818686fa925050503d8060008114611fbe576040519150601f19603f3d011682016040523d82523d6000602084013e611fc3565b606091505b50909250905060008215611cb45781806020019051611fe591908101906135de565b600081518110611ff157fe5b602002602001015190508086858151811061200857fe5b6020908102919091010152505050600101611e83565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561208d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208490613a00565b60405180910390fd5b5050565b73794e6e91555438afc3ccf1c5076a74f42133d08d90565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b60008060006120ce6120a9565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614612106578561211c565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b905060006121286120a9565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146121605785612176565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b905060006121838861287a565b60ff16905060006121938861287a565b60ff169050600060606121a4612885565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f4f61ff8b00000000000000000000000000000000000000000000000000000000179052905173ffffffffffffffffffffffffffffffffffffffff929092169162061a8091612224916137a5565b6000604051808303818686fa925050503d8060008114612260576040519150601f19603f3d011682016040523d82523d6000602084013e612265565b606091505b50915091508161228257506000965086955061242d945050505050565b60008180602001905161229891908101906130e7565b90508073ffffffffffffffffffffffffffffffffffffffff166216e360600073ffffffffffffffffffffffffffffffffffffffff16630c235d96905060e01b89898e60006040516024016122ef94939291906138eb565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161237891906137a5565b6000604051808303818686fa925050503d80600081146123b4576040519150601f19603f3d011682016040523d82523d6000602084013e6123b9565b606091505b50909350915060008084156123e557838060200190516123dc9190810190613103565b925090506123fb565b506000995089985061242d975050505050505050565b670de0b6b3a764000087600a0a87600a0a8e8502028161241757fe5b048161241f57fe5b049a50985050505050505050505b935093915050565b6000610cc78361246b61244f82600163ffffffff61289d16565b61245f888763ffffffff6128bc16565b9063ffffffff6128ed16565b9063ffffffff61290916565b6000612481612933565b73ffffffffffffffffffffffffffffffffffffffff166306f2bf62836040518263ffffffff1660e01b81526004016124b991906137c1565b60206040518083038186803b1580156124d157600080fd5b505afa1580156124e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061250991908101906130e7565b92915050565b60008073ffffffffffffffffffffffffffffffffffffffff85166125325761242d565b60608573ffffffffffffffffffffffffffffffffffffffff16620249f086866040516024016125619190613bb1565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516125ea91906137a5565b6000604051808303818686fa925050503d8060008114612626576040519150601f19603f3d011682016040523d82523d6000602084013e61262b565b606091505b509092509050811561264e578080602001905161264b91908101906136de565b92505b50935093915050565b6060612663868861201e565b845161266e576118ee565b6000806000875160405190808252806020026020018201604052801561269e578160200160208202803883390190505b5093506126c2898b8a6000815181106126b357fe5b6020026020010151898961294b565b9250826126d257506118ee915050565b6126df8a8a85898961294b565b9150816126ef57506118ee915050565b60005b885181101561280f5760005b88602001518110156127d1576127288a838151811061271957fe5b60200260200101518587612435565b945061273f89600001516127100161271087612435565b945060006127508d8d888c8c61294b565b90508061275d57506127d1565b8094508a838151811061276c57fe5b602002602001015185106127c85760008b848151811061278857fe5b60200260200101518c858151811061279c57fe5b6020026020010151870361271002816127b157fe5b0490508a6000015181116127c65750506127d1565b505b506001016126fe565b506127f08982815181106127e157fe5b60200260200101518486612435565b8582815181106127fc57fe5b60209081029190910101526001016126f2565b505050509695505050505050565b73f164fc0ec4e93095b804a4795bbe1e041497b92a90565b6000816014018351101561285b5761285b6128566004855185601401612c00565b612ca5565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b600061250982612cad565b73818e6fecd516ecc3849daf6845e3ec868087b75590565b6000828211156128b6576128b661285660028585612d7e565b50900390565b6000826128cb57506000612509565b828202828482816128d857fe5b0414611e1357611e1361285660018686612d7e565b600082820183811015611e1357611e1361285660008686612d7e565b60008161291f5761291f61285660038585612d7e565b600082848161292a57fe5b04949350505050565b73c0a47dfe034b400b47bdad5fecda2621de6c4d9590565b604080516001808252818301909252600091606091829160208083019080388339019050509050858160008151811061298057fe5b60209081029190910101527fffffffff0000000000000000000000000000000000000000000000000000000085167f4cb8e253000000000000000000000000000000000000000000000000000000001415612a90576040517f4cb8e2530000000000000000000000000000000000000000000000000000000090612a0c908a908a908590602401613881565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529150612b49565b6040517f9f76ad350000000000000000000000000000000000000000000000000000000090612ac99086908b908b908690602401613809565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915291505b600060603073ffffffffffffffffffffffffffffffffffffffff1684604051612b7291906137a5565b600060405180830381855afa9150503d8060008114612bad576040519150601f19603f3d011682016040523d82523d6000602084013e612bb2565b606091505b509150915081612bc957600094505050505061067f565b80806020019051612bdd91908101906135de565b600081518110612be957fe5b602002602001015194505050505095945050505050565b6060632800659560e01b848484604051602401612c1f939291906139d4565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b600060129050600060608373ffffffffffffffffffffffffffffffffffffffff166040518060400160405280600481526020017f313ce56700000000000000000000000000000000000000000000000000000000815250604051612d1191906137a5565b600060405180830381855afa9150503d8060008114612d4c576040519150601f19603f3d011682016040523d82523d6000602084013e612d51565b606091505b5091509150818015612d64575080516020145b15612d7757612d74816000612d9d565b92505b5050919050565b606063e946c1bb60e01b848484604051602401612c1f939291906139b2565b6000611e13838360008160200183511015612dc557612dc56128566005855185602001612c00565b50016020015190565b6040805160608101909152806000815260006020820181905260409091015290565b803561250981613c95565b600082601f830112612e0b578081fd5b8135612e1e612e1982613c45565b613c1e565b8181529150602080830190840160005b83811015612e5b57612e468760208435890101612ece565b83526020928301929190910190600101612e2e565b5050505092915050565b600082601f830112612e75578081fd5b8135612e83612e1982613c45565b818152915060208083019084810181840286018201871015612ea457600080fd5b60005b84811015612ec357813584529282019290820190600101612ea7565b505050505092915050565b600082601f830112612ede578081fd5b813567ffffffffffffffff811115612ef4578182fd5b612f2560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613c1e565b9150808252836020828501011115612f3c57600080fd5b8060208401602084013760009082016020015292915050565b8035600f81900b811461250957600080fd5b600060408284031215612f78578081fd5b612f826040613c1e565b9050813581526020820135602082015292915050565b60006101c0808385031215612fab578182fd5b612fb481613c1e565b915050612fc18383612df0565b8152612fd08360208401612df0565b6020820152612fe28360408401612df0565b6040820152612ff48360608401612df0565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013567ffffffffffffffff8082111561305657600080fd5b61306286838701612ece565b8385015261016092508285013591508082111561307e57600080fd5b61308a86838701612ece565b838501526101809250828501359150808211156130a657600080fd5b6130b286838701612ece565b838501526101a09250828501359150808211156130ce57600080fd5b506130db85828601612ece565b82840152505092915050565b6000602082840312156130f8578081fd5b8151611e1381613c95565b60008060408385031215613115578081fd5b825161312081613c95565b6020939093015192949293505050565b600080600060608486031215613144578081fd5b833561314f81613c95565b9250602084013561315f81613c95565b9150604084013561316f81613c95565b809150509250925092565b600080600080600060a08688031215613191578283fd5b853561319c81613c95565b945060208601356131ac81613c95565b935060408601356131bc81613c95565b925060608601356131cc81613c95565b9150608086013567ffffffffffffffff8111156131e7578182fd5b6131f388828901612e65565b9150509295509295909350565b60008060008060808587031215613215578182fd5b843561322081613c95565b9350602085013561323081613c95565b9250604085013561324081613c95565b9150606085013567ffffffffffffffff81111561325b578182fd5b61326787828801612e65565b91505092959194509250565b600080600080600060c0868803121561328a578283fd5b853561329581613c95565b945060208601356132a581613c95565b935060408601356132b581613c95565b9250606086013567ffffffffffffffff8111156132d0578182fd5b6132dc88828901612e65565b9250506132ec8760808801612f67565b90509295509295909350565b60008060006060848603121561330c578081fd5b833561331781613c95565b9250602084013561332781613c95565b9150604084013567ffffffffffffffff811115613342578182fd5b61334e86828701612e65565b9150509250925092565b60008060008060a0858703121561336d578182fd5b843561337881613c95565b9350602085013561338881613c95565b9250604085013567ffffffffffffffff8111156133a3578283fd5b6133af87828801612e65565b9250506133bf8660608701612f67565b905092959194509250565b600080600080608085870312156133df578182fd5b84356133ea81613c95565b93506133f98660208701612f55565b92506132408660408701612f55565b6000806040838503121561341a578182fd5b823567ffffffffffffffff80821115613431578384fd5b81850186601f820112613442578485fd5b80359250613452612e1984613c45565b80848252602080830192508084018a828389028701011115613472578889fd5b8894505b8685101561349d57803561348981613c95565b845260019490940193928101928101613476565b5090965087013593505050808211156134b4578283fd5b506134c185828601612e65565b9150509250929050565b600080602083850312156134dd578182fd5b823567ffffffffffffffff808211156134f4578384fd5b81850186601f820112613505578485fd5b8035925081831115613515578485fd5b8660208085028301011115613528578485fd5b60200196919550909350505050565b60008060408385031215613549578182fd5b823567ffffffffffffffff80821115613560578384fd5b81850186601f820112613571578485fd5b80359250613581612e1984613c45565b83815260208082019190838101885b878110156135b9576135a78c848435890101612f98565b85529382019390820190600101613590565b509197508801359450505050808211156135d1578283fd5b506134c185828601612dfb565b600060208083850312156135f0578182fd5b825167ffffffffffffffff811115613606578283fd5b80840185601f820112613617578384fd5b80519150613627612e1983613c45565b8281528381019082850185850284018601891015613643578687fd5b8693505b84841015613665578051835260019390930192918501918501613647565b50979650505050505050565b600080600083850360a0811215613686578182fd5b6060811215613693578182fd5b5061369e6060613c1e565b8451600781106136ac578283fd5b81526020858101519082015260408086015190820152606085015160808601519194509250801515811461316f578182fd5b6000602082840312156136ef578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208401935060208301825b82811015613741578151865260209586019590910190600101613723565b5093949350505050565b60008151808452613763816020860160208601613c65565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000828483379101908152919050565b600082516137b7818460208701613c65565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b600073ffffffffffffffffffffffffffffffffffffffff80871683528086166020840152808516604084015250608060608301526118ee6080830184613710565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b600073ffffffffffffffffffffffffffffffffffffffff80861683528085166020840152506060604083015261067f6060830184613710565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff94851681529290931660208301526040820152901515606082015260800190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015613992577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261398085835161374b565b94509285019290850190600101613946565b5092979650505050505050565b600060208252611e136020830184613710565b60608101600485106139c057fe5b938152602081019290925260409091015290565b60608101600885106139c057fe5b600f93840b81529190920b6020820152604081019190915260600190565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e60408201527f5f50414952000000000000000000000000000000000000000000000000000000606082015260800190565b600060408252613a716040830185516136f6565b6020840151613a8360608401826136f6565b506040840151613a9660808401826136f6565b506060840151613aa960a08401826136f6565b50608084015160c083015260a084015160e083015260c0840151610100818185015260e086015191506101208281860152818701519250610140915082828601528087015192505061016082818601528187015192506101c091506101808281870152613b1a61020087018561374b565b8289015194507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc092506101a0838883030181890152613b59828761374b565b838b015196508489820301868a0152613b72818861374b565b955050808a0151955050505080858303016101e086015250613b94818361374b565b8481036020860152613ba6818761374b565b979650505050505050565b90815260200190565b60006040820184835260406020840152808451808352606085019150602086019250835b81811015613c1257835173ffffffffffffffffffffffffffffffffffffffff16835260209384019390920191600101613bde565b50909695505050505050565b60405181810167ffffffffffffffff81118282101715613c3d57600080fd5b604052919050565b600067ffffffffffffffff821115613c5b578081fd5b5060209081020190565b60005b83811015613c80578181015183820152602001613c68565b83811115613c8f576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff81168114613cb757600080fd5b5056fea365627a7a72315820a87fc7253056a246e4a91d483bd03f17a76820224b3bf36e5df9de67803770596c6578706572696d656e74616cf564736f6c63430005110040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3D97 CODESIZE SUB DUP1 PUSH3 0x3D97 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x5A JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 0x8A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x6C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x83 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x3CFD DUP1 PUSH3 0x9A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x136 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x68BE3CF2 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x9F76AD35 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xC7F7142E GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC7F7142E EQ PUSH2 0x27B JUMPI DUP1 PUSH4 0xD0EEA06D EQ PUSH2 0x29B JUMPI DUP1 PUSH4 0xE68248F7 EQ PUSH2 0x2AE JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x9F76AD35 EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0xABFFC761 EQ PUSH2 0x268 JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x6DD6B78D EQ PUSH2 0x21C JUMPI DUP1 PUSH4 0x8B123A02 EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0x98CDAFBA EQ PUSH2 0x242 JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x4CB8E253 GT PUSH2 0x109 JUMPI DUP1 PUSH4 0x59F515D0 GT PUSH2 0xEE JUMPI DUP1 PUSH4 0x59F515D0 EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x60EE052A EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x64EE6ADE EQ PUSH2 0x1E9 JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x4CB8E253 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0x58306BA0 EQ PUSH2 0x1B0 JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x1796FB87 EQ PUSH2 0x13B JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x164 JUMPI DUP1 PUSH4 0x354152A3 EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x4703A7E6 EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14E PUSH2 0x149 CALLDATASIZE PUSH1 0x4 PUSH2 0x33CA JUMP JUMPDEST PUSH2 0x2C1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15B SWAP2 SWAP1 PUSH2 0x399F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14E PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0x317A JUMP JUMPDEST PUSH2 0x492 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0x33CA JUMP JUMPDEST PUSH2 0x688 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x198 CALLDATASIZE PUSH1 0x4 PUSH2 0x32F8 JUMP JUMPDEST PUSH2 0x842 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x32F8 JUMP JUMPDEST PUSH2 0xA1E JUMP JUMPDEST PUSH2 0x14E PUSH2 0x1BE CALLDATASIZE PUSH1 0x4 PUSH2 0x3200 JUMP JUMPDEST PUSH2 0xC38 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x1D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3537 JUMP JUMPDEST PUSH2 0xCCF JUMP JUMPDEST PUSH2 0x14E PUSH2 0x1E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x32F8 JUMP JUMPDEST PUSH2 0xD78 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x32F8 JUMP JUMPDEST PUSH2 0x1038 JUMP JUMPDEST PUSH2 0x20F PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0x34CB JUMP JUMPDEST PUSH2 0x11FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15B SWAP2 SWAP1 PUSH2 0x3921 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0x32F8 JUMP JUMPDEST PUSH2 0x133D JUMP JUMPDEST PUSH2 0x14E PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0x3537 JUMP JUMPDEST PUSH2 0x15E5 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x250 CALLDATASIZE PUSH1 0x4 PUSH2 0x3273 JUMP JUMPDEST PUSH2 0x18BE JUMP JUMPDEST PUSH2 0x14E PUSH2 0x263 CALLDATASIZE PUSH1 0x4 PUSH2 0x3200 JUMP JUMPDEST PUSH2 0x18F8 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x276 CALLDATASIZE PUSH1 0x4 PUSH2 0x3408 JUMP JUMPDEST PUSH2 0x1AFC JUMP JUMPDEST PUSH2 0x28E PUSH2 0x289 CALLDATASIZE PUSH1 0x4 PUSH2 0x3130 JUMP JUMPDEST PUSH2 0x1CDF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15B SWAP2 SWAP1 PUSH2 0x37C1 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x2A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x3358 JUMP JUMPDEST PUSH2 0x1E1A JUMP JUMPDEST PUSH2 0x14E PUSH2 0x2BC CALLDATASIZE PUSH1 0x4 PUSH2 0x3408 JUMP JUMPDEST PUSH2 0x1E4B JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2F3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x488 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x927C0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE71D1B9 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x350 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x36A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x39E2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3F3 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x42F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x434 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x45D JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x456 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x36DE JUMP JUMPDEST SWAP1 POP PUSH2 0x465 JUMP JUMPDEST POP POP POP PUSH2 0x488 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x472 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x2F9 JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4C4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH2 0x4E8 JUMPI POP PUSH2 0x67F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x67C JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x61A80 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6E79E133 SWAP1 POP PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x543 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x55E SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x384A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5E7 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x623 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x628 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x651 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x64A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x36DE JUMP JUMPDEST SWAP1 POP PUSH2 0x659 JUMP JUMPDEST POP POP POP PUSH2 0x67C JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x666 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x4EB JUMP JUMPDEST POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6BA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x488 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x927C0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7211EF7 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x717 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x731 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x39E2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x7BA SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7F6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7FB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x45D JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x81D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x36DE JUMP JUMPDEST SWAP1 POP DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x82C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x6C0 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x84E DUP4 DUP6 PUSH2 0x201E JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x879 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA15 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x893 PUSH2 0x2091 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xF4240 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFF1FD974 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x8DD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8F7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x38BA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x980 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9BC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9C1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x9EA JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x9E3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x36DE JUMP JUMPDEST SWAP1 POP PUSH2 0x9F2 JUMP JUMPDEST POP POP POP PUSH2 0xA15 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x9FF JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x87F JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA2A DUP4 DUP6 PUSH2 0x201E JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0xA55 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0xA62 PUSH2 0x20A9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xC2C JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xAD6 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0xB6E JUMPI PUSH2 0xAF9 DUP10 DUP10 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xAEC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x20C1 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH20 0x31E085AFD48A1D6E51CC193153D625E8F0514C7F EQ DUP1 PUSH2 0xB5F JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH20 0x1E158C0E93C30D24E918EF83D1E0BE23595C3C0F EQ JUMPDEST ISZERO PUSH2 0xB69 JUMPI PUSH1 0x0 SWAP3 POP JUMPDEST PUSH2 0xC0C JUMP JUMPDEST PUSH2 0xB7F DUP10 DUP6 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xAEC JUMPI INVALID JUMPDEST SWAP1 SWAP4 POP SWAP2 POP DUP3 ISZERO PUSH2 0xC0C JUMPI PUSH1 0x0 PUSH2 0xB97 DUP6 DUP11 DUP7 PUSH2 0x20C1 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH20 0x31E085AFD48A1D6E51CC193153D625E8F0514C7F EQ DUP1 ISZERO PUSH2 0xC00 JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0xC0A JUMPI PUSH1 0x0 SWAP4 POP JUMPDEST POP JUMPDEST DUP3 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC19 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0xA69 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xC9F JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0xCA9 JUMPI PUSH2 0xCC7 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xCB6 DUP7 DUP6 DUP6 PUSH2 0x1038 JUMP JUMPDEST SWAP1 POP PUSH2 0xCC3 DUP5 DUP7 DUP4 PUSH2 0x1038 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xCDB DUP4 DUP4 PUSH2 0x15E5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0xD71 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xCF5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0xD69 JUMPI PUSH2 0xD50 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD13 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xD27 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD3F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH2 0x2435 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD5C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xCE0 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xD84 DUP4 DUP6 PUSH2 0x201E JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0xDAF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0xDBC PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDFC JUMPI PUSH2 0xDF7 DUP7 PUSH2 0x2477 JUMP JUMPDEST PUSH2 0xDFF JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE0B PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE4B JUMPI PUSH2 0xE46 DUP7 PUSH2 0x2477 JUMP JUMPDEST PUSH2 0xE4E JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x102D JUMPI PUSH1 0x1 PUSH2 0xE65 PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xEFC JUMPI DUP7 MLOAD PUSH2 0xEDB SWAP1 DUP6 SWAP1 PUSH32 0x2640F62C00000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0xECE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x250F JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xEE7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1019 JUMP JUMPDEST PUSH2 0xF04 PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF6D JUMPI DUP7 MLOAD PUSH2 0xEDB SWAP1 DUP5 SWAP1 PUSH32 0x59E9486200000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0xECE JUMPI INVALID JUMPDEST DUP7 MLOAD PUSH1 0x0 SWAP1 PUSH2 0xFA6 SWAP1 DUP6 SWAP1 PUSH32 0x59E9486200000000000000000000000000000000000000000000000000000000 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0xECE JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0xFFC JUMPI PUSH2 0xFDB DUP6 PUSH32 0x2640F62C00000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x250F JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xFE7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1017 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x100A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x1024 JUMPI POP PUSH2 0x102D JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xE53 JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1044 DUP4 DUP6 PUSH2 0x201E JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x106F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA15 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x1089 PUSH2 0x2091 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xF4240 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x144A2752 SWAP1 POP PUSH1 0xE0 SHL DUP10 DUP12 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x10D3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x10ED SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x38BA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1176 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x11B2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x11B7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x9EA JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x11D9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x36DE JUMP JUMPDEST SWAP1 POP DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x11E8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 DUP3 DUP1 ISZERO PUSH2 0x1234 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x121F JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0xD71 JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x1252 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL DUP3 ADD SWAP1 POP DUP1 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 CALLDATASIZE DUP5 SWAP1 SUB ADD DUP2 SLT PUSH2 0x128C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 ADD PUSH1 0x20 DUP2 ADD SWAP2 POP CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x12BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12C9 SWAP3 SWAP2 SWAP1 PUSH2 0x3795 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1304 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1309 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x131B JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1328 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x123A JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1349 DUP4 DUP6 PUSH2 0x201E JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x1374 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x1381 PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x13C1 JUMPI PUSH2 0x13BC DUP7 PUSH2 0x2477 JUMP JUMPDEST PUSH2 0x13C4 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x13D0 PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1410 JUMPI PUSH2 0x140B DUP7 PUSH2 0x2477 JUMP JUMPDEST PUSH2 0x1413 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x102D JUMPI PUSH1 0x1 PUSH2 0x142A PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x14B4 JUMPI DUP7 MLOAD PUSH2 0x1493 SWAP1 DUP6 SWAP1 PUSH32 0x95B68FE700000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0xECE JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x149F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x15D1 JUMP JUMPDEST PUSH2 0x14BC PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1525 JUMPI DUP7 MLOAD PUSH2 0x1493 SWAP1 DUP5 SWAP1 PUSH32 0xCD7724C300000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0xECE JUMPI INVALID JUMPDEST DUP7 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x155E SWAP1 DUP7 SWAP1 PUSH32 0x95B68FE700000000000000000000000000000000000000000000000000000000 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0xECE JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x15B4 JUMPI PUSH2 0x1593 DUP5 PUSH32 0xCD7724C300000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x250F JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x159F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x15CF JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x15C2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x15DC JUMPI POP PUSH2 0x102D JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1418 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1612 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD SWAP2 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x18B6 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1648 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x1676 JUMPI POP DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1666 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH1 0x0 EQ JUMPDEST DUP1 PUSH2 0x1698 JUMPI POP DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1688 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x16BC JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x16AB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x18AE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x7A120 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE77286EB SWAP1 POP PUSH1 0xE0 SHL DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1708 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x171C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1735 SWAP3 SWAP2 SWAP1 PUSH2 0x3A5D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x17BE SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x17FA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x17FF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x182A JUMPI PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1817 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP PUSH2 0x18AE JUMP JUMPDEST PUSH2 0x1832 PUSH2 0x2DCE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1849 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x3671 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x3 DUP4 MLOAD PUSH1 0x6 DUP2 GT ISZERO PUSH2 0x185F JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x186A JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x188E JUMPI PUSH1 0x0 DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x187D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x18A8 JUMP JUMPDEST DUP2 DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x189B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP POP POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1634 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x18EE DUP6 DUP6 DUP6 DUP6 PUSH32 0x9F76AD3500000000000000000000000000000000000000000000000000000000 DUP12 PUSH2 0x2657 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x192A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x193A DUP8 DUP8 DUP8 PUSH2 0x1CDF JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x195F JUMPI POP PUSH2 0xCC7 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1AF1 JUMPI PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x61A80 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x343FBCDD SWAP1 POP PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x19B9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x19D3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x38BA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1A5C SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1A98 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A9D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1AC6 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1ABF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x36DE JUMP JUMPDEST SWAP1 POP PUSH2 0x1ACE JUMP JUMPDEST POP POP POP PUSH2 0x1AF1 JUMP JUMPDEST DUP1 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1ADB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1962 JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1B2E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x18B6 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x1B48 PUSH2 0x281D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD06CA61F SWAP1 POP PUSH1 0xE0 SHL DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1B90 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1BAA SWAP3 SWAP2 SWAP1 PUSH2 0x3BBA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1C33 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1C6F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1C74 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1CB4 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1C96 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x35DE JUMP JUMPDEST PUSH1 0x1 DUP10 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1CA5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x1CBC JUMP JUMPDEST POP POP POP PUSH2 0x18B6 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1CC9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1B34 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 PUSH32 0x153F599700000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x1D1A SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x37E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1DA2 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1DDD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1DF5 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x1E0F JUMPI PUSH2 0x1E05 DUP2 PUSH1 0xC PUSH2 0x2835 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x1E13 JUMP JUMPDEST POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x67F DUP6 DUP6 DUP6 DUP6 PUSH32 0x4CB8E25300000000000000000000000000000000000000000000000000000000 PUSH1 0x0 PUSH2 0x2657 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1E7D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x18B6 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x1E97 PUSH2 0x281D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1F00CA74 SWAP1 POP PUSH1 0xE0 SHL DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1EDF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1EF9 SWAP3 SWAP2 SWAP1 PUSH2 0x3BBA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1F82 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1FBE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FC3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1CB4 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1FE5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x35DE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1FF1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2008 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1E83 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x208D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2084 SWAP1 PUSH2 0x3A00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH20 0x794E6E91555438AFC3CCF1C5076A74F42133D08D SWAP1 JUMP JUMPDEST PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x20CE PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2106 JUMPI DUP6 PUSH2 0x211C JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2128 PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2160 JUMPI DUP6 PUSH2 0x2176 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2183 DUP9 PUSH2 0x287A JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x2193 DUP9 PUSH2 0x287A JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x60 PUSH2 0x21A4 PUSH2 0x2885 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4F61FF8B00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH3 0x61A80 SWAP2 PUSH2 0x2224 SWAP2 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2260 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2265 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x2282 JUMPI POP PUSH1 0x0 SWAP7 POP DUP7 SWAP6 POP PUSH2 0x242D SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2298 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x30E7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x16E360 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC235D96 SWAP1 POP PUSH1 0xE0 SHL DUP10 DUP10 DUP15 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x22EF SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x38EB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2378 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x23B4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x23B9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP4 POP SWAP2 POP PUSH1 0x0 DUP1 DUP5 ISZERO PUSH2 0x23E5 JUMPI DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x23DC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x3103 JUMP JUMPDEST SWAP3 POP SWAP1 POP PUSH2 0x23FB JUMP JUMPDEST POP PUSH1 0x0 SWAP10 POP DUP10 SWAP9 POP PUSH2 0x242D SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP8 PUSH1 0xA EXP DUP8 PUSH1 0xA EXP DUP15 DUP6 MUL MUL DUP2 PUSH2 0x2417 JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x241F JUMPI INVALID JUMPDEST DIV SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCC7 DUP4 PUSH2 0x246B PUSH2 0x244F DUP3 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x289D AND JUMP JUMPDEST PUSH2 0x245F DUP9 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x28BC AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x28ED AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x2909 AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2481 PUSH2 0x2933 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6F2BF62 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x24B9 SWAP2 SWAP1 PUSH2 0x37C1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x24D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x24E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x2509 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x30E7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x2532 JUMPI PUSH2 0x242D JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2561 SWAP2 SWAP1 PUSH2 0x3BB1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x25EA SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2626 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x262B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x264E JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x264B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x36DE JUMP JUMPDEST SWAP3 POP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2663 DUP7 DUP9 PUSH2 0x201E JUMP JUMPDEST DUP5 MLOAD PUSH2 0x266E JUMPI PUSH2 0x18EE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x269E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x26C2 DUP10 DUP12 DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x26B3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x294B JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x26D2 JUMPI POP PUSH2 0x18EE SWAP2 POP POP JUMP JUMPDEST PUSH2 0x26DF DUP11 DUP11 DUP6 DUP10 DUP10 PUSH2 0x294B JUMP JUMPDEST SWAP2 POP DUP2 PUSH2 0x26EF JUMPI POP PUSH2 0x18EE SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP9 MLOAD DUP2 LT ISZERO PUSH2 0x280F JUMPI PUSH1 0x0 JUMPDEST DUP9 PUSH1 0x20 ADD MLOAD DUP2 LT ISZERO PUSH2 0x27D1 JUMPI PUSH2 0x2728 DUP11 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2719 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP8 PUSH2 0x2435 JUMP JUMPDEST SWAP5 POP PUSH2 0x273F DUP10 PUSH1 0x0 ADD MLOAD PUSH2 0x2710 ADD PUSH2 0x2710 DUP8 PUSH2 0x2435 JUMP JUMPDEST SWAP5 POP PUSH1 0x0 PUSH2 0x2750 DUP14 DUP14 DUP9 DUP13 DUP13 PUSH2 0x294B JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x275D JUMPI POP PUSH2 0x27D1 JUMP JUMPDEST DUP1 SWAP5 POP DUP11 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x276C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 LT PUSH2 0x27C8 JUMPI PUSH1 0x0 DUP12 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2788 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP13 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x279C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB PUSH2 0x2710 MUL DUP2 PUSH2 0x27B1 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP11 PUSH1 0x0 ADD MLOAD DUP2 GT PUSH2 0x27C6 JUMPI POP POP PUSH2 0x27D1 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x26FE JUMP JUMPDEST POP PUSH2 0x27F0 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x27E1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x2435 JUMP JUMPDEST DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x27FC JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x26F2 JUMP JUMPDEST POP POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xF164FC0EC4E93095B804A4795BBE1E041497B92A SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x285B JUMPI PUSH2 0x285B PUSH2 0x2856 PUSH1 0x4 DUP6 MLOAD DUP6 PUSH1 0x14 ADD PUSH2 0x2C00 JUMP JUMPDEST PUSH2 0x2CA5 JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2509 DUP3 PUSH2 0x2CAD JUMP JUMPDEST PUSH20 0x818E6FECD516ECC3849DAF6845E3EC868087B755 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x28B6 JUMPI PUSH2 0x28B6 PUSH2 0x2856 PUSH1 0x2 DUP6 DUP6 PUSH2 0x2D7E JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x28CB JUMPI POP PUSH1 0x0 PUSH2 0x2509 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x28D8 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1E13 JUMPI PUSH2 0x1E13 PUSH2 0x2856 PUSH1 0x1 DUP7 DUP7 PUSH2 0x2D7E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1E13 JUMPI PUSH2 0x1E13 PUSH2 0x2856 PUSH1 0x0 DUP7 DUP7 PUSH2 0x2D7E JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x291F JUMPI PUSH2 0x291F PUSH2 0x2856 PUSH1 0x3 DUP6 DUP6 PUSH2 0x2D7E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x292A JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xC0A47DFE034B400B47BDAD5FECDA2621DE6C4D95 SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x60 SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2980 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP6 AND PUSH32 0x4CB8E25300000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x2A90 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4CB8E25300000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x2A0C SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP6 SWAP1 PUSH1 0x24 ADD PUSH2 0x3881 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP2 POP PUSH2 0x2B49 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x9F76AD3500000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x2AC9 SWAP1 DUP7 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x3809 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP2 POP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x2B72 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2BAD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2BB2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x2BC9 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x67F JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2BDD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x35DE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2BE9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2C1F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x39D4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x2D11 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2D4C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2D51 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x2D64 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x2D77 JUMPI PUSH2 0x2D74 DUP2 PUSH1 0x0 PUSH2 0x2D9D JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2C1F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x39B2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E13 DUP4 DUP4 PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x2DC5 JUMPI PUSH2 0x2DC5 PUSH2 0x2856 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x2C00 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x2509 DUP2 PUSH2 0x3C95 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2E0B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2E1E PUSH2 0x2E19 DUP3 PUSH2 0x3C45 JUMP JUMPDEST PUSH2 0x3C1E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2E5B JUMPI PUSH2 0x2E46 DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x2ECE JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2E2E JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2E75 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2E83 PUSH2 0x2E19 DUP3 PUSH2 0x3C45 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x2EA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2EC3 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2EA7 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2EDE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2EF4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2F25 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x3C1E JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2F3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xF DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0x2509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F78 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2F82 PUSH1 0x40 PUSH2 0x3C1E JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2FAB JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2FB4 DUP2 PUSH2 0x3C1E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2FC1 DUP4 DUP4 PUSH2 0x2DF0 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x2FD0 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x2DF0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2FE2 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x2DF0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x2FF4 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x2DF0 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3056 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3062 DUP7 DUP4 DUP8 ADD PUSH2 0x2ECE JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x307E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x308A DUP7 DUP4 DUP8 ADD PUSH2 0x2ECE JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x30A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30B2 DUP7 DUP4 DUP8 ADD PUSH2 0x2ECE JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x30CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x30DB DUP6 DUP3 DUP7 ADD PUSH2 0x2ECE JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x30F8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1E13 DUP2 PUSH2 0x3C95 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3115 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x3120 DUP2 PUSH2 0x3C95 JUMP JUMPDEST PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD MLOAD SWAP3 SWAP5 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3144 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x314F DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x315F DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x316F DUP2 PUSH2 0x3C95 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3191 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x319C DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x31AC DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x31BC DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x31CC DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x31E7 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x31F3 DUP9 DUP3 DUP10 ADD PUSH2 0x2E65 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3215 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3220 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x3230 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x3240 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x325B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3267 DUP8 DUP3 DUP9 ADD PUSH2 0x2E65 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xC0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x328A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x3295 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x32A5 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x32B5 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x32D0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x32DC DUP9 DUP3 DUP10 ADD PUSH2 0x2E65 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x32EC DUP8 PUSH1 0x80 DUP9 ADD PUSH2 0x2F67 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x330C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x3317 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x3327 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3342 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x334E DUP7 DUP3 DUP8 ADD PUSH2 0x2E65 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x336D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3378 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x3388 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x33A3 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x33AF DUP8 DUP3 DUP9 ADD PUSH2 0x2E65 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x33BF DUP7 PUSH1 0x60 DUP8 ADD PUSH2 0x2F67 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x33DF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x33EA DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP4 POP PUSH2 0x33F9 DUP7 PUSH1 0x20 DUP8 ADD PUSH2 0x2F55 JUMP JUMPDEST SWAP3 POP PUSH2 0x3240 DUP7 PUSH1 0x40 DUP8 ADD PUSH2 0x2F55 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x341A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3431 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x3442 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP PUSH2 0x3452 PUSH2 0x2E19 DUP5 PUSH2 0x3C45 JUMP JUMPDEST DUP1 DUP5 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP5 ADD DUP11 DUP3 DUP4 DUP10 MUL DUP8 ADD ADD GT ISZERO PUSH2 0x3472 JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP5 POP JUMPDEST DUP7 DUP6 LT ISZERO PUSH2 0x349D JUMPI DUP1 CALLDATALOAD PUSH2 0x3489 DUP2 PUSH2 0x3C95 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x3476 JUMP JUMPDEST POP SWAP1 SWAP7 POP DUP8 ADD CALLDATALOAD SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x34B4 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x34C1 DUP6 DUP3 DUP7 ADD PUSH2 0x2E65 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x34DD JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x34F4 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x3505 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x3515 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP6 MUL DUP4 ADD ADD GT ISZERO PUSH2 0x3528 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3549 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3560 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x3571 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP PUSH2 0x3581 PUSH2 0x2E19 DUP5 PUSH2 0x3C45 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP4 DUP2 ADD DUP9 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x35B9 JUMPI PUSH2 0x35A7 DUP13 DUP5 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x2F98 JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3590 JUMP JUMPDEST POP SWAP2 SWAP8 POP DUP9 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x35D1 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x34C1 DUP6 DUP3 DUP7 ADD PUSH2 0x2DFB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x35F0 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3606 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP5 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x3617 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x3627 PUSH2 0x2E19 DUP4 PUSH2 0x3C45 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP6 DUP6 MUL DUP5 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x3643 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x3665 JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x3647 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x3686 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x3693 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x369E PUSH1 0x60 PUSH2 0x3C1E JUMP JUMPDEST DUP5 MLOAD PUSH1 0x7 DUP2 LT PUSH2 0x36AC JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP7 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x80 DUP7 ADD MLOAD SWAP2 SWAP5 POP SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x316F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x36EF JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD DUP3 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3741 JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3723 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3763 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x3C65 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x37B7 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3C65 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP6 AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x18EE PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x3710 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND DUP4 MSTORE DUP1 DUP6 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x67F PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x3710 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3992 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x3980 DUP6 DUP4 MLOAD PUSH2 0x374B JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3946 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1E13 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3710 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x39C0 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x39C0 JUMPI INVALID JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F50414952000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x3A71 PUSH1 0x40 DUP4 ADD DUP6 MLOAD PUSH2 0x36F6 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x3A83 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x36F6 JUMP JUMPDEST POP PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x3A96 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x36F6 JUMP JUMPDEST POP PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x3AA9 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x36F6 JUMP JUMPDEST POP PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH1 0xC0 DUP5 ADD MLOAD PUSH2 0x100 DUP2 DUP2 DUP6 ADD MSTORE PUSH1 0xE0 DUP7 ADD MLOAD SWAP2 POP PUSH2 0x120 DUP3 DUP2 DUP7 ADD MSTORE DUP2 DUP8 ADD MLOAD SWAP3 POP PUSH2 0x140 SWAP2 POP DUP3 DUP3 DUP7 ADD MSTORE DUP1 DUP8 ADD MLOAD SWAP3 POP POP PUSH2 0x160 DUP3 DUP2 DUP7 ADD MSTORE DUP2 DUP8 ADD MLOAD SWAP3 POP PUSH2 0x1C0 SWAP2 POP PUSH2 0x180 DUP3 DUP2 DUP8 ADD MSTORE PUSH2 0x3B1A PUSH2 0x200 DUP8 ADD DUP6 PUSH2 0x374B JUMP JUMPDEST DUP3 DUP10 ADD MLOAD SWAP5 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 SWAP3 POP PUSH2 0x1A0 DUP4 DUP9 DUP4 SUB ADD DUP2 DUP10 ADD MSTORE PUSH2 0x3B59 DUP3 DUP8 PUSH2 0x374B JUMP JUMPDEST DUP4 DUP12 ADD MLOAD SWAP7 POP DUP5 DUP10 DUP3 SUB ADD DUP7 DUP11 ADD MSTORE PUSH2 0x3B72 DUP2 DUP9 PUSH2 0x374B JUMP JUMPDEST SWAP6 POP POP DUP1 DUP11 ADD MLOAD SWAP6 POP POP POP POP DUP1 DUP6 DUP4 SUB ADD PUSH2 0x1E0 DUP7 ADD MSTORE POP PUSH2 0x3B94 DUP2 DUP4 PUSH2 0x374B JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x3BA6 DUP2 DUP8 PUSH2 0x374B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD DUP5 DUP4 MSTORE PUSH1 0x40 PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP5 MLOAD DUP1 DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 POP PUSH1 0x20 DUP7 ADD SWAP3 POP DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3C12 JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x3BDE JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3C3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3C5B JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3C80 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3C68 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x3C8F JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3CB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xA8 PUSH32 0xC7253056A246E4A91D483BD03F17A76820224B3BF36E5DF9DE67803770596C65 PUSH25 0x706572696D656E74616CF564736F6C63430005110040000000 ",
				"sourceMap": "1402:38475:2:-;;;2701:95;8:9:-1;5:2;;;30:1;27;20:12;5:2;2701:95:2;;;;;;;;;;;;;;;;;;;;;2755:16;:34;;-1:-1:-1;;;;;;2755:34:2;-1:-1:-1;;;;;2755:34:2;;;;;;;;;;1402:38475;;146:263:-1;;261:2;249:9;240:7;236:23;232:32;229:2;;;-1:-1;;267:12;229:2;83:13;;-1:-1;;;;;576:54;;701:35;;691:2;;-1:-1;;740:12;691:2;319:74;223:186;-1:-1;;;223:186;;1402:38475:2;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c806368be3cf2116100b25780639f76ad3511610081578063c7f7142e11610066578063c7f7142e1461027b578063d0eea06d1461029b578063e68248f7146102ae57610136565b80639f76ad3514610255578063abffc7611461026857610136565b806368be3cf2146101fc5780636dd6b78d1461021c5780638b123a021461022f57806398cdafba1461024257610136565b80634cb8e2531161010957806359f515d0116100ee57806359f515d0146101c357806360ee052a146101d657806364ee6ade146101e957610136565b80634cb8e2531461019d57806358306ba0146101b057610136565b80631796fb871461013b5780632d753aa414610164578063354152a3146101775780634703a7e61461018a575b600080fd5b61014e6101493660046133ca565b6102c1565b60405161015b919061399f565b60405180910390f35b61014e61017236600461317a565b610492565b61014e6101853660046133ca565b610688565b61014e6101983660046132f8565b610842565b61014e6101ab3660046132f8565b610a1e565b61014e6101be366004613200565b610c38565b61014e6101d1366004613537565b610ccf565b61014e6101e43660046132f8565b610d78565b61014e6101f73660046132f8565b611038565b61020f61020a3660046134cb565b6111fe565b60405161015b9190613921565b61014e61022a3660046132f8565b61133d565b61014e61023d366004613537565b6115e5565b61014e610250366004613273565b6118be565b61014e610263366004613200565b6118f8565b61014e610276366004613408565b611afc565b61028e610289366004613130565b611cdf565b60405161015b91906137c1565b61014e6102a9366004613358565b611e1a565b61014e6102bc366004613408565b611e4b565b6060600082519050806040519080825280602002602001820160405280156102f3578160200160208202803883390190505b50915060005b8181101561048857600060608873ffffffffffffffffffffffffffffffffffffffff16620927c0600073ffffffffffffffffffffffffffffffffffffffff16630e71d1b9905060e01b8a8a8a888151811061035057fe5b602002602001015160405160240161036a939291906139e2565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516103f391906137a5565b6000604051808303818686fa925050503d806000811461042f576040519150601f19603f3d011682016040523d82523d6000602084013e610434565b606091505b5090925090506000821561045d578180602001905161045691908101906136de565b9050610465565b505050610488565b8086858151811061047257fe5b60209081029190910101525050506001016102f9565b5050949350505050565b6060600082519050806040519080825280602002602001820160405280156104c4578160200160208202803883390190505b50915073ffffffffffffffffffffffffffffffffffffffff87166104e8575061067f565b60005b8181101561067c57600060608973ffffffffffffffffffffffffffffffffffffffff1662061a80600073ffffffffffffffffffffffffffffffffffffffff16636e79e133905060e01b8b8b8b8b898151811061054357fe5b602002602001015160405160240161055e949392919061384a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516105e791906137a5565b6000604051808303818686fa925050503d8060008114610623576040519150601f19603f3d011682016040523d82523d6000602084013e610628565b606091505b50909250905060008215610651578180602001905161064a91908101906136de565b9050610659565b50505061067c565b8086858151811061066657fe5b60209081029190910101525050506001016104eb565b50505b95945050505050565b6060600082519050806040519080825280602002602001820160405280156106ba578160200160208202803883390190505b50915060005b8181101561048857600060608873ffffffffffffffffffffffffffffffffffffffff16620927c0600073ffffffffffffffffffffffffffffffffffffffff166307211ef7905060e01b8a8a8a888151811061071757fe5b6020026020010151604051602401610731939291906139e2565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516107ba91906137a5565b6000604051808303818686fa925050503d80600081146107f6576040519150601f19603f3d011682016040523d82523d6000602084013e6107fb565b606091505b5090925090506000821561045d578180602001905161081d91908101906136de565b90508086858151811061082c57fe5b60209081029190910101525050506001016106c0565b606061084e838561201e565b8151604080518281526020808402820101909152818015610879578160200160208202803883390190505b50915060005b81811015610a155760006060610893612091565b73ffffffffffffffffffffffffffffffffffffffff16620f4240600073ffffffffffffffffffffffffffffffffffffffff1663ff1fd974905060e01b8a8a8a88815181106108dd57fe5b60200260200101516040516024016108f7939291906138ba565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161098091906137a5565b6000604051808303818686fa925050503d80600081146109bc576040519150601f19603f3d011682016040523d82523d6000602084013e6109c1565b606091505b509092509050600082156109ea57818060200190516109e391908101906136de565b90506109f2565b505050610a15565b808685815181106109ff57fe5b602090810291909101015250505060010161087f565b50509392505050565b6060610a2a838561201e565b8151604080518281526020808402820101909152818015610a55578160200160208202803883390190505b5091506000610a626120a9565b9050600080805b84811015610c2c578373ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480610ad657508373ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b15610b6e57610af98989898481518110610aec57fe5b60200260200101516120c1565b909350915073ffffffffffffffffffffffffffffffffffffffff82167331e085afd48a1d6e51cc193153d625e8f0514c7f1480610b5f575073ffffffffffffffffffffffffffffffffffffffff8216731e158c0e93c30d24e918ef83d1e0be23595c3c0f145b15610b6957600092505b610c0c565b610b7f8985898481518110610aec57fe5b90935091508215610c0c576000610b97858a866120c1565b909450905073ffffffffffffffffffffffffffffffffffffffff83167331e085afd48a1d6e51cc193153d625e8f0514c7f148015610c0057508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15610c0a57600093505b505b82868281518110610c1957fe5b6020908102919091010152600101610a69565b50505050509392505050565b60608273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610c9f57508273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b15610ca957610cc7565b6060610cb6868585611038565b9050610cc3848683611038565b9150505b949350505050565b6060610cdb83836115e5565b905060005b8351811015610d7157818181518110610cf557fe5b6020026020010151600014610d6957610d50828281518110610d1357fe5b6020026020010151858381518110610d2757fe5b602002602001015160a00151868481518110610d3f57fe5b602002602001015160800151612435565b828281518110610d5c57fe5b6020026020010181815250505b600101610ce0565b5092915050565b6060610d84838561201e565b8151604080518281526020808402820101909152818015610daf578160200160208202803883390190505b5091506000610dbc6120a9565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610dfc57610df786612477565b610dff565b60005b90506000610e0b6120a9565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610e4b57610e4686612477565b610e4e565b60005b905060005b8381101561102d576001610e656120a9565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415610efc578651610edb9085907f2640f62c00000000000000000000000000000000000000000000000000000000908a9086908110610ece57fe5b602002602001015161250f565b878481518110610ee757fe5b60200260200101819350828152505050611019565b610f046120a9565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415610f6d578651610edb9084907f59e9486200000000000000000000000000000000000000000000000000000000908a9086908110610ece57fe5b8651600090610fa69085907f59e9486200000000000000000000000000000000000000000000000000000000908b9087908110610ece57fe5b925090508015610ffc57610fdb857f2640f62c000000000000000000000000000000000000000000000000000000008361250f565b888581518110610fe757fe5b60200260200101819450828152505050611017565b600087848151811061100a57fe5b6020026020010181815250505b505b80611024575061102d565b50600101610e53565b505050509392505050565b6060611044838561201e565b815160408051828152602080840282010190915281801561106f578160200160208202803883390190505b50915060005b81811015610a155760006060611089612091565b73ffffffffffffffffffffffffffffffffffffffff16620f4240600073ffffffffffffffffffffffffffffffffffffffff1663144a2752905060e01b898b8a88815181106110d357fe5b60200260200101516040516024016110ed939291906138ba565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161117691906137a5565b6000604051808303818686fa925050503d80600081146111b2576040519150601f19603f3d011682016040523d82523d6000602084013e6111b7565b606091505b509092509050600082156109ea57818060200190516111d991908101906136de565b9050808685815181106111e857fe5b6020908102919091010152505050600101611075565b60408051828152602080840282010190915260609082801561123457816020015b606081526020019060019003908161121f5790505b50905060005b808314610d7157600060603086868581811061125257fe5b6020028201905080357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe13684900301811261128c57600080fd5b9091016020810191503567ffffffffffffffff8111156112ab57600080fd5b368190038213156112bb57600080fd5b6040516112c9929190613795565b600060405180830381855afa9150503d8060008114611304576040519150601f19603f3d011682016040523d82523d6000602084013e611309565b606091505b50915091508161131b57805160208201fd5b8084848151811061132857fe5b6020908102919091010152505060010161123a565b6060611349838561201e565b8151604080518281526020808402820101909152818015611374578160200160208202803883390190505b50915060006113816120a9565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146113c1576113bc86612477565b6113c4565b60005b905060006113d06120a9565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146114105761140b86612477565b611413565b60005b905060005b8381101561102d57600161142a6120a9565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614156114b45786516114939085907f95b68fe700000000000000000000000000000000000000000000000000000000908a9086908110610ece57fe5b87848151811061149f57fe5b602002602001018193508281525050506115d1565b6114bc6120a9565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614156115255786516114939084907fcd7724c300000000000000000000000000000000000000000000000000000000908a9086908110610ece57fe5b865160009061155e9086907f95b68fe700000000000000000000000000000000000000000000000000000000908b9087908110610ece57fe5b9250905080156115b457611593847fcd7724c3000000000000000000000000000000000000000000000000000000008361250f565b88858151811061159f57fe5b602002602001018194508281525050506115cf565b60008784815181106115c257fe5b6020026020010181815250505b505b806115dc575061102d565b50600101611418565b60608251604051908082528060200260200182016040528015611612578160200160208202803883390190505b506000805491925073ffffffffffffffffffffffffffffffffffffffff909116905b845181146118b65783818151811061164857fe5b60200260200101515160001480611676575084818151811061166657fe5b6020026020010151608001516000145b80611698575084818151811061168857fe5b602002602001015160a001516000145b156116bc5760008382815181106116ab57fe5b6020026020010181815250506118ae565b600060608373ffffffffffffffffffffffffffffffffffffffff166207a1208573ffffffffffffffffffffffffffffffffffffffff1663e77286eb905060e01b89868151811061170857fe5b602002602001015189878151811061171c57fe5b6020026020010151604051602401611735929190613a5d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516117be91906137a5565b6000604051808303818686fa925050503d80600081146117fa576040519150601f19603f3d011682016040523d82523d6000602084013e6117ff565b606091505b50915091508161182a57600085848151811061181757fe5b60200260200101818152505050506118ae565b611832612dce565b600080838060200190516118499190810190613671565b9194509250905060038351600681111561185f57fe5b14158061186a575080155b1561188e57600088878151811061187d57fe5b6020026020010181815250506118a8565b8188878151811061189b57fe5b6020026020010181815250505b50505050505b600101611634565b505092915050565b60606118ee858585857f9f76ad35000000000000000000000000000000000000000000000000000000008b612657565b9695505050505050565b60606000825190508060405190808252806020026020018201604052801561192a578160200160208202803883390190505b509150600061193a878787611cdf565b905073ffffffffffffffffffffffffffffffffffffffff811661195f5750610cc79050565b60005b82811015611af157600060608373ffffffffffffffffffffffffffffffffffffffff1662061a80600073ffffffffffffffffffffffffffffffffffffffff1663343fbcdd905060e01b8b8b8b88815181106119b957fe5b60200260200101516040516024016119d3939291906138ba565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051611a5c91906137a5565b6000604051808303818686fa925050503d8060008114611a98576040519150601f19603f3d011682016040523d82523d6000602084013e611a9d565b606091505b50909250905060008215611ac65781806020019051611abf91908101906136de565b9050611ace565b505050611af1565b80878581518110611adb57fe5b6020908102919091010152505050600101611962565b505050949350505050565b606060008251905080604051908082528060200260200182016040528015611b2e578160200160208202803883390190505b50915060005b818110156118b65760006060611b4861281d565b73ffffffffffffffffffffffffffffffffffffffff16620249f0600073ffffffffffffffffffffffffffffffffffffffff1663d06ca61f905060e01b888681518110611b9057fe5b60200260200101518a604051602401611baa929190613bba565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051611c3391906137a5565b6000604051808303818686fa925050503d8060008114611c6f576040519150601f19603f3d011682016040523d82523d6000602084013e611c74565b606091505b50909250905060008215611cb45781806020019051611c9691908101906135de565b600189510381518110611ca557fe5b60200260200101519050611cbc565b5050506118b6565b80868581518110611cc957fe5b6020908102919091010152505050600101611b34565b6040516000906060907f153f59970000000000000000000000000000000000000000000000000000000090611d1a90869086906024016137e2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608673ffffffffffffffffffffffffffffffffffffffff1683604051611da291906137a5565b600060405180830381855afa9150503d8060008114611ddd576040519150601f19603f3d011682016040523d82523d6000602084013e611de2565b606091505b5091509150818015611df5575080516020145b15611e0f57611e0581600c612835565b9350505050611e13565b5050505b9392505050565b606061067f858585857f4cb8e253000000000000000000000000000000000000000000000000000000006000612657565b606060008251905080604051908082528060200260200182016040528015611e7d578160200160208202803883390190505b50915060005b818110156118b65760006060611e9761281d565b73ffffffffffffffffffffffffffffffffffffffff16620249f0600073ffffffffffffffffffffffffffffffffffffffff16631f00ca74905060e01b888681518110611edf57fe5b60200260200101518a604051602401611ef9929190613bba565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051611f8291906137a5565b6000604051808303818686fa925050503d8060008114611fbe576040519150601f19603f3d011682016040523d82523d6000602084013e611fc3565b606091505b50909250905060008215611cb45781806020019051611fe591908101906135de565b600081518110611ff157fe5b602002602001015190508086858151811061200857fe5b6020908102919091010152505050600101611e83565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561208d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208490613a00565b60405180910390fd5b5050565b73794e6e91555438afc3ccf1c5076a74f42133d08d90565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b60008060006120ce6120a9565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614612106578561211c565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b905060006121286120a9565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146121605785612176565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b905060006121838861287a565b60ff16905060006121938861287a565b60ff169050600060606121a4612885565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f4f61ff8b00000000000000000000000000000000000000000000000000000000179052905173ffffffffffffffffffffffffffffffffffffffff929092169162061a8091612224916137a5565b6000604051808303818686fa925050503d8060008114612260576040519150601f19603f3d011682016040523d82523d6000602084013e612265565b606091505b50915091508161228257506000965086955061242d945050505050565b60008180602001905161229891908101906130e7565b90508073ffffffffffffffffffffffffffffffffffffffff166216e360600073ffffffffffffffffffffffffffffffffffffffff16630c235d96905060e01b89898e60006040516024016122ef94939291906138eb565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161237891906137a5565b6000604051808303818686fa925050503d80600081146123b4576040519150601f19603f3d011682016040523d82523d6000602084013e6123b9565b606091505b50909350915060008084156123e557838060200190516123dc9190810190613103565b925090506123fb565b506000995089985061242d975050505050505050565b670de0b6b3a764000087600a0a87600a0a8e8502028161241757fe5b048161241f57fe5b049a50985050505050505050505b935093915050565b6000610cc78361246b61244f82600163ffffffff61289d16565b61245f888763ffffffff6128bc16565b9063ffffffff6128ed16565b9063ffffffff61290916565b6000612481612933565b73ffffffffffffffffffffffffffffffffffffffff166306f2bf62836040518263ffffffff1660e01b81526004016124b991906137c1565b60206040518083038186803b1580156124d157600080fd5b505afa1580156124e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061250991908101906130e7565b92915050565b60008073ffffffffffffffffffffffffffffffffffffffff85166125325761242d565b60608573ffffffffffffffffffffffffffffffffffffffff16620249f086866040516024016125619190613bb1565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516125ea91906137a5565b6000604051808303818686fa925050503d8060008114612626576040519150601f19603f3d011682016040523d82523d6000602084013e61262b565b606091505b509092509050811561264e578080602001905161264b91908101906136de565b92505b50935093915050565b6060612663868861201e565b845161266e576118ee565b6000806000875160405190808252806020026020018201604052801561269e578160200160208202803883390190505b5093506126c2898b8a6000815181106126b357fe5b6020026020010151898961294b565b9250826126d257506118ee915050565b6126df8a8a85898961294b565b9150816126ef57506118ee915050565b60005b885181101561280f5760005b88602001518110156127d1576127288a838151811061271957fe5b60200260200101518587612435565b945061273f89600001516127100161271087612435565b945060006127508d8d888c8c61294b565b90508061275d57506127d1565b8094508a838151811061276c57fe5b602002602001015185106127c85760008b848151811061278857fe5b60200260200101518c858151811061279c57fe5b6020026020010151870361271002816127b157fe5b0490508a6000015181116127c65750506127d1565b505b506001016126fe565b506127f08982815181106127e157fe5b60200260200101518486612435565b8582815181106127fc57fe5b60209081029190910101526001016126f2565b505050509695505050505050565b73f164fc0ec4e93095b804a4795bbe1e041497b92a90565b6000816014018351101561285b5761285b6128566004855185601401612c00565b612ca5565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b600061250982612cad565b73818e6fecd516ecc3849daf6845e3ec868087b75590565b6000828211156128b6576128b661285660028585612d7e565b50900390565b6000826128cb57506000612509565b828202828482816128d857fe5b0414611e1357611e1361285660018686612d7e565b600082820183811015611e1357611e1361285660008686612d7e565b60008161291f5761291f61285660038585612d7e565b600082848161292a57fe5b04949350505050565b73c0a47dfe034b400b47bdad5fecda2621de6c4d9590565b604080516001808252818301909252600091606091829160208083019080388339019050509050858160008151811061298057fe5b60209081029190910101527fffffffff0000000000000000000000000000000000000000000000000000000085167f4cb8e253000000000000000000000000000000000000000000000000000000001415612a90576040517f4cb8e2530000000000000000000000000000000000000000000000000000000090612a0c908a908a908590602401613881565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529150612b49565b6040517f9f76ad350000000000000000000000000000000000000000000000000000000090612ac99086908b908b908690602401613809565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915291505b600060603073ffffffffffffffffffffffffffffffffffffffff1684604051612b7291906137a5565b600060405180830381855afa9150503d8060008114612bad576040519150601f19603f3d011682016040523d82523d6000602084013e612bb2565b606091505b509150915081612bc957600094505050505061067f565b80806020019051612bdd91908101906135de565b600081518110612be957fe5b602002602001015194505050505095945050505050565b6060632800659560e01b848484604051602401612c1f939291906139d4565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b600060129050600060608373ffffffffffffffffffffffffffffffffffffffff166040518060400160405280600481526020017f313ce56700000000000000000000000000000000000000000000000000000000815250604051612d1191906137a5565b600060405180830381855afa9150503d8060008114612d4c576040519150601f19603f3d011682016040523d82523d6000602084013e612d51565b606091505b5091509150818015612d64575080516020145b15612d7757612d74816000612d9d565b92505b5050919050565b606063e946c1bb60e01b848484604051602401612c1f939291906139b2565b6000611e13838360008160200183511015612dc557612dc56128566005855185602001612c00565b50016020015190565b6040805160608101909152806000815260006020820181905260409091015290565b803561250981613c95565b600082601f830112612e0b578081fd5b8135612e1e612e1982613c45565b613c1e565b8181529150602080830190840160005b83811015612e5b57612e468760208435890101612ece565b83526020928301929190910190600101612e2e565b5050505092915050565b600082601f830112612e75578081fd5b8135612e83612e1982613c45565b818152915060208083019084810181840286018201871015612ea457600080fd5b60005b84811015612ec357813584529282019290820190600101612ea7565b505050505092915050565b600082601f830112612ede578081fd5b813567ffffffffffffffff811115612ef4578182fd5b612f2560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613c1e565b9150808252836020828501011115612f3c57600080fd5b8060208401602084013760009082016020015292915050565b8035600f81900b811461250957600080fd5b600060408284031215612f78578081fd5b612f826040613c1e565b9050813581526020820135602082015292915050565b60006101c0808385031215612fab578182fd5b612fb481613c1e565b915050612fc18383612df0565b8152612fd08360208401612df0565b6020820152612fe28360408401612df0565b6040820152612ff48360608401612df0565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013567ffffffffffffffff8082111561305657600080fd5b61306286838701612ece565b8385015261016092508285013591508082111561307e57600080fd5b61308a86838701612ece565b838501526101809250828501359150808211156130a657600080fd5b6130b286838701612ece565b838501526101a09250828501359150808211156130ce57600080fd5b506130db85828601612ece565b82840152505092915050565b6000602082840312156130f8578081fd5b8151611e1381613c95565b60008060408385031215613115578081fd5b825161312081613c95565b6020939093015192949293505050565b600080600060608486031215613144578081fd5b833561314f81613c95565b9250602084013561315f81613c95565b9150604084013561316f81613c95565b809150509250925092565b600080600080600060a08688031215613191578283fd5b853561319c81613c95565b945060208601356131ac81613c95565b935060408601356131bc81613c95565b925060608601356131cc81613c95565b9150608086013567ffffffffffffffff8111156131e7578182fd5b6131f388828901612e65565b9150509295509295909350565b60008060008060808587031215613215578182fd5b843561322081613c95565b9350602085013561323081613c95565b9250604085013561324081613c95565b9150606085013567ffffffffffffffff81111561325b578182fd5b61326787828801612e65565b91505092959194509250565b600080600080600060c0868803121561328a578283fd5b853561329581613c95565b945060208601356132a581613c95565b935060408601356132b581613c95565b9250606086013567ffffffffffffffff8111156132d0578182fd5b6132dc88828901612e65565b9250506132ec8760808801612f67565b90509295509295909350565b60008060006060848603121561330c578081fd5b833561331781613c95565b9250602084013561332781613c95565b9150604084013567ffffffffffffffff811115613342578182fd5b61334e86828701612e65565b9150509250925092565b60008060008060a0858703121561336d578182fd5b843561337881613c95565b9350602085013561338881613c95565b9250604085013567ffffffffffffffff8111156133a3578283fd5b6133af87828801612e65565b9250506133bf8660608701612f67565b905092959194509250565b600080600080608085870312156133df578182fd5b84356133ea81613c95565b93506133f98660208701612f55565b92506132408660408701612f55565b6000806040838503121561341a578182fd5b823567ffffffffffffffff80821115613431578384fd5b81850186601f820112613442578485fd5b80359250613452612e1984613c45565b80848252602080830192508084018a828389028701011115613472578889fd5b8894505b8685101561349d57803561348981613c95565b845260019490940193928101928101613476565b5090965087013593505050808211156134b4578283fd5b506134c185828601612e65565b9150509250929050565b600080602083850312156134dd578182fd5b823567ffffffffffffffff808211156134f4578384fd5b81850186601f820112613505578485fd5b8035925081831115613515578485fd5b8660208085028301011115613528578485fd5b60200196919550909350505050565b60008060408385031215613549578182fd5b823567ffffffffffffffff80821115613560578384fd5b81850186601f820112613571578485fd5b80359250613581612e1984613c45565b83815260208082019190838101885b878110156135b9576135a78c848435890101612f98565b85529382019390820190600101613590565b509197508801359450505050808211156135d1578283fd5b506134c185828601612dfb565b600060208083850312156135f0578182fd5b825167ffffffffffffffff811115613606578283fd5b80840185601f820112613617578384fd5b80519150613627612e1983613c45565b8281528381019082850185850284018601891015613643578687fd5b8693505b84841015613665578051835260019390930192918501918501613647565b50979650505050505050565b600080600083850360a0811215613686578182fd5b6060811215613693578182fd5b5061369e6060613c1e565b8451600781106136ac578283fd5b81526020858101519082015260408086015190820152606085015160808601519194509250801515811461316f578182fd5b6000602082840312156136ef578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208401935060208301825b82811015613741578151865260209586019590910190600101613723565b5093949350505050565b60008151808452613763816020860160208601613c65565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000828483379101908152919050565b600082516137b7818460208701613c65565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b600073ffffffffffffffffffffffffffffffffffffffff80871683528086166020840152808516604084015250608060608301526118ee6080830184613710565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b600073ffffffffffffffffffffffffffffffffffffffff80861683528085166020840152506060604083015261067f6060830184613710565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff94851681529290931660208301526040820152901515606082015260800190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015613992577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261398085835161374b565b94509285019290850190600101613946565b5092979650505050505050565b600060208252611e136020830184613710565b60608101600485106139c057fe5b938152602081019290925260409091015290565b60608101600885106139c057fe5b600f93840b81529190920b6020820152604081019190915260600190565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e60408201527f5f50414952000000000000000000000000000000000000000000000000000000606082015260800190565b600060408252613a716040830185516136f6565b6020840151613a8360608401826136f6565b506040840151613a9660808401826136f6565b506060840151613aa960a08401826136f6565b50608084015160c083015260a084015160e083015260c0840151610100818185015260e086015191506101208281860152818701519250610140915082828601528087015192505061016082818601528187015192506101c091506101808281870152613b1a61020087018561374b565b8289015194507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc092506101a0838883030181890152613b59828761374b565b838b015196508489820301868a0152613b72818861374b565b955050808a0151955050505080858303016101e086015250613b94818361374b565b8481036020860152613ba6818761374b565b979650505050505050565b90815260200190565b60006040820184835260406020840152808451808352606085019150602086019250835b81811015613c1257835173ffffffffffffffffffffffffffffffffffffffff16835260209384019390920191600101613bde565b50909695505050505050565b60405181810167ffffffffffffffff81118282101715613c3d57600080fd5b604052919050565b600067ffffffffffffffff821115613c5b578081fd5b5060209081020190565b60005b83811015613c80578181015183820152602001613c68565b83811115613c8f576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff81168114613cb757600080fd5b5056fea365627a7a72315820a87fc7253056a246e4a91d483bd03f17a76820224b3bf36e5df9de67803770596c6578706572696d656e74616cf564736f6c63430005110040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x136 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x68BE3CF2 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x9F76AD35 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xC7F7142E GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC7F7142E EQ PUSH2 0x27B JUMPI DUP1 PUSH4 0xD0EEA06D EQ PUSH2 0x29B JUMPI DUP1 PUSH4 0xE68248F7 EQ PUSH2 0x2AE JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x9F76AD35 EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0xABFFC761 EQ PUSH2 0x268 JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x6DD6B78D EQ PUSH2 0x21C JUMPI DUP1 PUSH4 0x8B123A02 EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0x98CDAFBA EQ PUSH2 0x242 JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x4CB8E253 GT PUSH2 0x109 JUMPI DUP1 PUSH4 0x59F515D0 GT PUSH2 0xEE JUMPI DUP1 PUSH4 0x59F515D0 EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x60EE052A EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x64EE6ADE EQ PUSH2 0x1E9 JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x4CB8E253 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0x58306BA0 EQ PUSH2 0x1B0 JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x1796FB87 EQ PUSH2 0x13B JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x164 JUMPI DUP1 PUSH4 0x354152A3 EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x4703A7E6 EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14E PUSH2 0x149 CALLDATASIZE PUSH1 0x4 PUSH2 0x33CA JUMP JUMPDEST PUSH2 0x2C1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15B SWAP2 SWAP1 PUSH2 0x399F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14E PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0x317A JUMP JUMPDEST PUSH2 0x492 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0x33CA JUMP JUMPDEST PUSH2 0x688 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x198 CALLDATASIZE PUSH1 0x4 PUSH2 0x32F8 JUMP JUMPDEST PUSH2 0x842 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x32F8 JUMP JUMPDEST PUSH2 0xA1E JUMP JUMPDEST PUSH2 0x14E PUSH2 0x1BE CALLDATASIZE PUSH1 0x4 PUSH2 0x3200 JUMP JUMPDEST PUSH2 0xC38 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x1D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3537 JUMP JUMPDEST PUSH2 0xCCF JUMP JUMPDEST PUSH2 0x14E PUSH2 0x1E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x32F8 JUMP JUMPDEST PUSH2 0xD78 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x32F8 JUMP JUMPDEST PUSH2 0x1038 JUMP JUMPDEST PUSH2 0x20F PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0x34CB JUMP JUMPDEST PUSH2 0x11FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15B SWAP2 SWAP1 PUSH2 0x3921 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0x32F8 JUMP JUMPDEST PUSH2 0x133D JUMP JUMPDEST PUSH2 0x14E PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0x3537 JUMP JUMPDEST PUSH2 0x15E5 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x250 CALLDATASIZE PUSH1 0x4 PUSH2 0x3273 JUMP JUMPDEST PUSH2 0x18BE JUMP JUMPDEST PUSH2 0x14E PUSH2 0x263 CALLDATASIZE PUSH1 0x4 PUSH2 0x3200 JUMP JUMPDEST PUSH2 0x18F8 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x276 CALLDATASIZE PUSH1 0x4 PUSH2 0x3408 JUMP JUMPDEST PUSH2 0x1AFC JUMP JUMPDEST PUSH2 0x28E PUSH2 0x289 CALLDATASIZE PUSH1 0x4 PUSH2 0x3130 JUMP JUMPDEST PUSH2 0x1CDF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15B SWAP2 SWAP1 PUSH2 0x37C1 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x2A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x3358 JUMP JUMPDEST PUSH2 0x1E1A JUMP JUMPDEST PUSH2 0x14E PUSH2 0x2BC CALLDATASIZE PUSH1 0x4 PUSH2 0x3408 JUMP JUMPDEST PUSH2 0x1E4B JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2F3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x488 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x927C0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE71D1B9 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x350 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x36A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x39E2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3F3 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x42F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x434 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x45D JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x456 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x36DE JUMP JUMPDEST SWAP1 POP PUSH2 0x465 JUMP JUMPDEST POP POP POP PUSH2 0x488 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x472 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x2F9 JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4C4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH2 0x4E8 JUMPI POP PUSH2 0x67F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x67C JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x61A80 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6E79E133 SWAP1 POP PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x543 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x55E SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x384A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5E7 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x623 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x628 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x651 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x64A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x36DE JUMP JUMPDEST SWAP1 POP PUSH2 0x659 JUMP JUMPDEST POP POP POP PUSH2 0x67C JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x666 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x4EB JUMP JUMPDEST POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6BA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x488 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x927C0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7211EF7 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x717 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x731 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x39E2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x7BA SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7F6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7FB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x45D JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x81D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x36DE JUMP JUMPDEST SWAP1 POP DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x82C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x6C0 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x84E DUP4 DUP6 PUSH2 0x201E JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x879 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA15 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x893 PUSH2 0x2091 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xF4240 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFF1FD974 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x8DD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8F7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x38BA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x980 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9BC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9C1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x9EA JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x9E3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x36DE JUMP JUMPDEST SWAP1 POP PUSH2 0x9F2 JUMP JUMPDEST POP POP POP PUSH2 0xA15 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x9FF JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x87F JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA2A DUP4 DUP6 PUSH2 0x201E JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0xA55 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0xA62 PUSH2 0x20A9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xC2C JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xAD6 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0xB6E JUMPI PUSH2 0xAF9 DUP10 DUP10 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xAEC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x20C1 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH20 0x31E085AFD48A1D6E51CC193153D625E8F0514C7F EQ DUP1 PUSH2 0xB5F JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH20 0x1E158C0E93C30D24E918EF83D1E0BE23595C3C0F EQ JUMPDEST ISZERO PUSH2 0xB69 JUMPI PUSH1 0x0 SWAP3 POP JUMPDEST PUSH2 0xC0C JUMP JUMPDEST PUSH2 0xB7F DUP10 DUP6 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xAEC JUMPI INVALID JUMPDEST SWAP1 SWAP4 POP SWAP2 POP DUP3 ISZERO PUSH2 0xC0C JUMPI PUSH1 0x0 PUSH2 0xB97 DUP6 DUP11 DUP7 PUSH2 0x20C1 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH20 0x31E085AFD48A1D6E51CC193153D625E8F0514C7F EQ DUP1 ISZERO PUSH2 0xC00 JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0xC0A JUMPI PUSH1 0x0 SWAP4 POP JUMPDEST POP JUMPDEST DUP3 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC19 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0xA69 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xC9F JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0xCA9 JUMPI PUSH2 0xCC7 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xCB6 DUP7 DUP6 DUP6 PUSH2 0x1038 JUMP JUMPDEST SWAP1 POP PUSH2 0xCC3 DUP5 DUP7 DUP4 PUSH2 0x1038 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xCDB DUP4 DUP4 PUSH2 0x15E5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0xD71 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xCF5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0xD69 JUMPI PUSH2 0xD50 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD13 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xD27 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD3F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH2 0x2435 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD5C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xCE0 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xD84 DUP4 DUP6 PUSH2 0x201E JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0xDAF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0xDBC PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDFC JUMPI PUSH2 0xDF7 DUP7 PUSH2 0x2477 JUMP JUMPDEST PUSH2 0xDFF JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE0B PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE4B JUMPI PUSH2 0xE46 DUP7 PUSH2 0x2477 JUMP JUMPDEST PUSH2 0xE4E JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x102D JUMPI PUSH1 0x1 PUSH2 0xE65 PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xEFC JUMPI DUP7 MLOAD PUSH2 0xEDB SWAP1 DUP6 SWAP1 PUSH32 0x2640F62C00000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0xECE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x250F JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xEE7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1019 JUMP JUMPDEST PUSH2 0xF04 PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF6D JUMPI DUP7 MLOAD PUSH2 0xEDB SWAP1 DUP5 SWAP1 PUSH32 0x59E9486200000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0xECE JUMPI INVALID JUMPDEST DUP7 MLOAD PUSH1 0x0 SWAP1 PUSH2 0xFA6 SWAP1 DUP6 SWAP1 PUSH32 0x59E9486200000000000000000000000000000000000000000000000000000000 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0xECE JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0xFFC JUMPI PUSH2 0xFDB DUP6 PUSH32 0x2640F62C00000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x250F JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xFE7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1017 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x100A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x1024 JUMPI POP PUSH2 0x102D JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xE53 JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1044 DUP4 DUP6 PUSH2 0x201E JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x106F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA15 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x1089 PUSH2 0x2091 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xF4240 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x144A2752 SWAP1 POP PUSH1 0xE0 SHL DUP10 DUP12 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x10D3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x10ED SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x38BA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1176 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x11B2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x11B7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x9EA JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x11D9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x36DE JUMP JUMPDEST SWAP1 POP DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x11E8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 DUP3 DUP1 ISZERO PUSH2 0x1234 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x121F JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0xD71 JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x1252 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL DUP3 ADD SWAP1 POP DUP1 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 CALLDATASIZE DUP5 SWAP1 SUB ADD DUP2 SLT PUSH2 0x128C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 ADD PUSH1 0x20 DUP2 ADD SWAP2 POP CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x12BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12C9 SWAP3 SWAP2 SWAP1 PUSH2 0x3795 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1304 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1309 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x131B JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1328 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x123A JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1349 DUP4 DUP6 PUSH2 0x201E JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x1374 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x1381 PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x13C1 JUMPI PUSH2 0x13BC DUP7 PUSH2 0x2477 JUMP JUMPDEST PUSH2 0x13C4 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x13D0 PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1410 JUMPI PUSH2 0x140B DUP7 PUSH2 0x2477 JUMP JUMPDEST PUSH2 0x1413 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x102D JUMPI PUSH1 0x1 PUSH2 0x142A PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x14B4 JUMPI DUP7 MLOAD PUSH2 0x1493 SWAP1 DUP6 SWAP1 PUSH32 0x95B68FE700000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0xECE JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x149F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x15D1 JUMP JUMPDEST PUSH2 0x14BC PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1525 JUMPI DUP7 MLOAD PUSH2 0x1493 SWAP1 DUP5 SWAP1 PUSH32 0xCD7724C300000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0xECE JUMPI INVALID JUMPDEST DUP7 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x155E SWAP1 DUP7 SWAP1 PUSH32 0x95B68FE700000000000000000000000000000000000000000000000000000000 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0xECE JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x15B4 JUMPI PUSH2 0x1593 DUP5 PUSH32 0xCD7724C300000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x250F JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x159F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x15CF JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x15C2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x15DC JUMPI POP PUSH2 0x102D JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1418 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1612 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD SWAP2 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x18B6 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1648 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x1676 JUMPI POP DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1666 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH1 0x0 EQ JUMPDEST DUP1 PUSH2 0x1698 JUMPI POP DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1688 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x16BC JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x16AB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x18AE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x7A120 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE77286EB SWAP1 POP PUSH1 0xE0 SHL DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1708 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x171C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1735 SWAP3 SWAP2 SWAP1 PUSH2 0x3A5D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x17BE SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x17FA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x17FF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x182A JUMPI PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1817 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP PUSH2 0x18AE JUMP JUMPDEST PUSH2 0x1832 PUSH2 0x2DCE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1849 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x3671 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x3 DUP4 MLOAD PUSH1 0x6 DUP2 GT ISZERO PUSH2 0x185F JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x186A JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x188E JUMPI PUSH1 0x0 DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x187D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x18A8 JUMP JUMPDEST DUP2 DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x189B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP POP POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1634 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x18EE DUP6 DUP6 DUP6 DUP6 PUSH32 0x9F76AD3500000000000000000000000000000000000000000000000000000000 DUP12 PUSH2 0x2657 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x192A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x193A DUP8 DUP8 DUP8 PUSH2 0x1CDF JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x195F JUMPI POP PUSH2 0xCC7 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1AF1 JUMPI PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x61A80 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x343FBCDD SWAP1 POP PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x19B9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x19D3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x38BA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1A5C SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1A98 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A9D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1AC6 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1ABF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x36DE JUMP JUMPDEST SWAP1 POP PUSH2 0x1ACE JUMP JUMPDEST POP POP POP PUSH2 0x1AF1 JUMP JUMPDEST DUP1 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1ADB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1962 JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1B2E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x18B6 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x1B48 PUSH2 0x281D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD06CA61F SWAP1 POP PUSH1 0xE0 SHL DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1B90 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1BAA SWAP3 SWAP2 SWAP1 PUSH2 0x3BBA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1C33 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1C6F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1C74 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1CB4 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1C96 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x35DE JUMP JUMPDEST PUSH1 0x1 DUP10 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1CA5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x1CBC JUMP JUMPDEST POP POP POP PUSH2 0x18B6 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1CC9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1B34 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 PUSH32 0x153F599700000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x1D1A SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x37E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1DA2 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1DDD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1DF5 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x1E0F JUMPI PUSH2 0x1E05 DUP2 PUSH1 0xC PUSH2 0x2835 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x1E13 JUMP JUMPDEST POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x67F DUP6 DUP6 DUP6 DUP6 PUSH32 0x4CB8E25300000000000000000000000000000000000000000000000000000000 PUSH1 0x0 PUSH2 0x2657 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1E7D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x18B6 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x1E97 PUSH2 0x281D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1F00CA74 SWAP1 POP PUSH1 0xE0 SHL DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1EDF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1EF9 SWAP3 SWAP2 SWAP1 PUSH2 0x3BBA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1F82 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1FBE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FC3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1CB4 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1FE5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x35DE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1FF1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2008 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1E83 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x208D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2084 SWAP1 PUSH2 0x3A00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH20 0x794E6E91555438AFC3CCF1C5076A74F42133D08D SWAP1 JUMP JUMPDEST PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x20CE PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2106 JUMPI DUP6 PUSH2 0x211C JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2128 PUSH2 0x20A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2160 JUMPI DUP6 PUSH2 0x2176 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2183 DUP9 PUSH2 0x287A JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x2193 DUP9 PUSH2 0x287A JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x60 PUSH2 0x21A4 PUSH2 0x2885 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4F61FF8B00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH3 0x61A80 SWAP2 PUSH2 0x2224 SWAP2 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2260 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2265 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x2282 JUMPI POP PUSH1 0x0 SWAP7 POP DUP7 SWAP6 POP PUSH2 0x242D SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2298 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x30E7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x16E360 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC235D96 SWAP1 POP PUSH1 0xE0 SHL DUP10 DUP10 DUP15 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x22EF SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x38EB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2378 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x23B4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x23B9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP4 POP SWAP2 POP PUSH1 0x0 DUP1 DUP5 ISZERO PUSH2 0x23E5 JUMPI DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x23DC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x3103 JUMP JUMPDEST SWAP3 POP SWAP1 POP PUSH2 0x23FB JUMP JUMPDEST POP PUSH1 0x0 SWAP10 POP DUP10 SWAP9 POP PUSH2 0x242D SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP8 PUSH1 0xA EXP DUP8 PUSH1 0xA EXP DUP15 DUP6 MUL MUL DUP2 PUSH2 0x2417 JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x241F JUMPI INVALID JUMPDEST DIV SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCC7 DUP4 PUSH2 0x246B PUSH2 0x244F DUP3 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x289D AND JUMP JUMPDEST PUSH2 0x245F DUP9 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x28BC AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x28ED AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x2909 AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2481 PUSH2 0x2933 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6F2BF62 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x24B9 SWAP2 SWAP1 PUSH2 0x37C1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x24D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x24E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x2509 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x30E7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x2532 JUMPI PUSH2 0x242D JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2561 SWAP2 SWAP1 PUSH2 0x3BB1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x25EA SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2626 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x262B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x264E JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x264B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x36DE JUMP JUMPDEST SWAP3 POP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2663 DUP7 DUP9 PUSH2 0x201E JUMP JUMPDEST DUP5 MLOAD PUSH2 0x266E JUMPI PUSH2 0x18EE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x269E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x26C2 DUP10 DUP12 DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x26B3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x294B JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x26D2 JUMPI POP PUSH2 0x18EE SWAP2 POP POP JUMP JUMPDEST PUSH2 0x26DF DUP11 DUP11 DUP6 DUP10 DUP10 PUSH2 0x294B JUMP JUMPDEST SWAP2 POP DUP2 PUSH2 0x26EF JUMPI POP PUSH2 0x18EE SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP9 MLOAD DUP2 LT ISZERO PUSH2 0x280F JUMPI PUSH1 0x0 JUMPDEST DUP9 PUSH1 0x20 ADD MLOAD DUP2 LT ISZERO PUSH2 0x27D1 JUMPI PUSH2 0x2728 DUP11 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2719 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP8 PUSH2 0x2435 JUMP JUMPDEST SWAP5 POP PUSH2 0x273F DUP10 PUSH1 0x0 ADD MLOAD PUSH2 0x2710 ADD PUSH2 0x2710 DUP8 PUSH2 0x2435 JUMP JUMPDEST SWAP5 POP PUSH1 0x0 PUSH2 0x2750 DUP14 DUP14 DUP9 DUP13 DUP13 PUSH2 0x294B JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x275D JUMPI POP PUSH2 0x27D1 JUMP JUMPDEST DUP1 SWAP5 POP DUP11 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x276C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 LT PUSH2 0x27C8 JUMPI PUSH1 0x0 DUP12 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2788 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP13 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x279C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB PUSH2 0x2710 MUL DUP2 PUSH2 0x27B1 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP11 PUSH1 0x0 ADD MLOAD DUP2 GT PUSH2 0x27C6 JUMPI POP POP PUSH2 0x27D1 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x26FE JUMP JUMPDEST POP PUSH2 0x27F0 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x27E1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x2435 JUMP JUMPDEST DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x27FC JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x26F2 JUMP JUMPDEST POP POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xF164FC0EC4E93095B804A4795BBE1E041497B92A SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x285B JUMPI PUSH2 0x285B PUSH2 0x2856 PUSH1 0x4 DUP6 MLOAD DUP6 PUSH1 0x14 ADD PUSH2 0x2C00 JUMP JUMPDEST PUSH2 0x2CA5 JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2509 DUP3 PUSH2 0x2CAD JUMP JUMPDEST PUSH20 0x818E6FECD516ECC3849DAF6845E3EC868087B755 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x28B6 JUMPI PUSH2 0x28B6 PUSH2 0x2856 PUSH1 0x2 DUP6 DUP6 PUSH2 0x2D7E JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x28CB JUMPI POP PUSH1 0x0 PUSH2 0x2509 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x28D8 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1E13 JUMPI PUSH2 0x1E13 PUSH2 0x2856 PUSH1 0x1 DUP7 DUP7 PUSH2 0x2D7E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1E13 JUMPI PUSH2 0x1E13 PUSH2 0x2856 PUSH1 0x0 DUP7 DUP7 PUSH2 0x2D7E JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x291F JUMPI PUSH2 0x291F PUSH2 0x2856 PUSH1 0x3 DUP6 DUP6 PUSH2 0x2D7E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x292A JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xC0A47DFE034B400B47BDAD5FECDA2621DE6C4D95 SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x60 SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2980 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP6 AND PUSH32 0x4CB8E25300000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x2A90 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4CB8E25300000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x2A0C SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP6 SWAP1 PUSH1 0x24 ADD PUSH2 0x3881 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP2 POP PUSH2 0x2B49 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x9F76AD3500000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x2AC9 SWAP1 DUP7 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x3809 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP2 POP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x2B72 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2BAD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2BB2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x2BC9 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x67F JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2BDD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x35DE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2BE9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2C1F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x39D4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x2D11 SWAP2 SWAP1 PUSH2 0x37A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2D4C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2D51 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x2D64 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x2D77 JUMPI PUSH2 0x2D74 DUP2 PUSH1 0x0 PUSH2 0x2D9D JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2C1F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x39B2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E13 DUP4 DUP4 PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x2DC5 JUMPI PUSH2 0x2DC5 PUSH2 0x2856 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x2C00 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x2509 DUP2 PUSH2 0x3C95 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2E0B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2E1E PUSH2 0x2E19 DUP3 PUSH2 0x3C45 JUMP JUMPDEST PUSH2 0x3C1E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2E5B JUMPI PUSH2 0x2E46 DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x2ECE JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2E2E JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2E75 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2E83 PUSH2 0x2E19 DUP3 PUSH2 0x3C45 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x2EA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2EC3 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2EA7 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2EDE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2EF4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2F25 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x3C1E JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2F3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xF DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0x2509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F78 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2F82 PUSH1 0x40 PUSH2 0x3C1E JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2FAB JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2FB4 DUP2 PUSH2 0x3C1E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2FC1 DUP4 DUP4 PUSH2 0x2DF0 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x2FD0 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x2DF0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2FE2 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x2DF0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x2FF4 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x2DF0 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3056 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3062 DUP7 DUP4 DUP8 ADD PUSH2 0x2ECE JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x307E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x308A DUP7 DUP4 DUP8 ADD PUSH2 0x2ECE JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x30A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30B2 DUP7 DUP4 DUP8 ADD PUSH2 0x2ECE JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x30CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x30DB DUP6 DUP3 DUP7 ADD PUSH2 0x2ECE JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x30F8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1E13 DUP2 PUSH2 0x3C95 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3115 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x3120 DUP2 PUSH2 0x3C95 JUMP JUMPDEST PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD MLOAD SWAP3 SWAP5 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3144 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x314F DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x315F DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x316F DUP2 PUSH2 0x3C95 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3191 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x319C DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x31AC DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x31BC DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x31CC DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x31E7 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x31F3 DUP9 DUP3 DUP10 ADD PUSH2 0x2E65 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3215 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3220 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x3230 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x3240 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x325B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3267 DUP8 DUP3 DUP9 ADD PUSH2 0x2E65 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xC0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x328A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x3295 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x32A5 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x32B5 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x32D0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x32DC DUP9 DUP3 DUP10 ADD PUSH2 0x2E65 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x32EC DUP8 PUSH1 0x80 DUP9 ADD PUSH2 0x2F67 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x330C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x3317 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x3327 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3342 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x334E DUP7 DUP3 DUP8 ADD PUSH2 0x2E65 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x336D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3378 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x3388 DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x33A3 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x33AF DUP8 DUP3 DUP9 ADD PUSH2 0x2E65 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x33BF DUP7 PUSH1 0x60 DUP8 ADD PUSH2 0x2F67 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x33DF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x33EA DUP2 PUSH2 0x3C95 JUMP JUMPDEST SWAP4 POP PUSH2 0x33F9 DUP7 PUSH1 0x20 DUP8 ADD PUSH2 0x2F55 JUMP JUMPDEST SWAP3 POP PUSH2 0x3240 DUP7 PUSH1 0x40 DUP8 ADD PUSH2 0x2F55 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x341A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3431 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x3442 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP PUSH2 0x3452 PUSH2 0x2E19 DUP5 PUSH2 0x3C45 JUMP JUMPDEST DUP1 DUP5 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP5 ADD DUP11 DUP3 DUP4 DUP10 MUL DUP8 ADD ADD GT ISZERO PUSH2 0x3472 JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP5 POP JUMPDEST DUP7 DUP6 LT ISZERO PUSH2 0x349D JUMPI DUP1 CALLDATALOAD PUSH2 0x3489 DUP2 PUSH2 0x3C95 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x3476 JUMP JUMPDEST POP SWAP1 SWAP7 POP DUP8 ADD CALLDATALOAD SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x34B4 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x34C1 DUP6 DUP3 DUP7 ADD PUSH2 0x2E65 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x34DD JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x34F4 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x3505 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x3515 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP6 MUL DUP4 ADD ADD GT ISZERO PUSH2 0x3528 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3549 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3560 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x3571 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP PUSH2 0x3581 PUSH2 0x2E19 DUP5 PUSH2 0x3C45 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP4 DUP2 ADD DUP9 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x35B9 JUMPI PUSH2 0x35A7 DUP13 DUP5 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x2F98 JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3590 JUMP JUMPDEST POP SWAP2 SWAP8 POP DUP9 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x35D1 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x34C1 DUP6 DUP3 DUP7 ADD PUSH2 0x2DFB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x35F0 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3606 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP5 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x3617 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x3627 PUSH2 0x2E19 DUP4 PUSH2 0x3C45 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP6 DUP6 MUL DUP5 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x3643 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x3665 JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x3647 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x3686 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x3693 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x369E PUSH1 0x60 PUSH2 0x3C1E JUMP JUMPDEST DUP5 MLOAD PUSH1 0x7 DUP2 LT PUSH2 0x36AC JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP7 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x80 DUP7 ADD MLOAD SWAP2 SWAP5 POP SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x316F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x36EF JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD DUP3 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3741 JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3723 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3763 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x3C65 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x37B7 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3C65 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP6 AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x18EE PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x3710 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND DUP4 MSTORE DUP1 DUP6 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x67F PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x3710 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3992 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x3980 DUP6 DUP4 MLOAD PUSH2 0x374B JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3946 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1E13 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3710 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x39C0 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x39C0 JUMPI INVALID JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F50414952000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x3A71 PUSH1 0x40 DUP4 ADD DUP6 MLOAD PUSH2 0x36F6 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x3A83 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x36F6 JUMP JUMPDEST POP PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x3A96 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x36F6 JUMP JUMPDEST POP PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x3AA9 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x36F6 JUMP JUMPDEST POP PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH1 0xC0 DUP5 ADD MLOAD PUSH2 0x100 DUP2 DUP2 DUP6 ADD MSTORE PUSH1 0xE0 DUP7 ADD MLOAD SWAP2 POP PUSH2 0x120 DUP3 DUP2 DUP7 ADD MSTORE DUP2 DUP8 ADD MLOAD SWAP3 POP PUSH2 0x140 SWAP2 POP DUP3 DUP3 DUP7 ADD MSTORE DUP1 DUP8 ADD MLOAD SWAP3 POP POP PUSH2 0x160 DUP3 DUP2 DUP7 ADD MSTORE DUP2 DUP8 ADD MLOAD SWAP3 POP PUSH2 0x1C0 SWAP2 POP PUSH2 0x180 DUP3 DUP2 DUP8 ADD MSTORE PUSH2 0x3B1A PUSH2 0x200 DUP8 ADD DUP6 PUSH2 0x374B JUMP JUMPDEST DUP3 DUP10 ADD MLOAD SWAP5 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 SWAP3 POP PUSH2 0x1A0 DUP4 DUP9 DUP4 SUB ADD DUP2 DUP10 ADD MSTORE PUSH2 0x3B59 DUP3 DUP8 PUSH2 0x374B JUMP JUMPDEST DUP4 DUP12 ADD MLOAD SWAP7 POP DUP5 DUP10 DUP3 SUB ADD DUP7 DUP11 ADD MSTORE PUSH2 0x3B72 DUP2 DUP9 PUSH2 0x374B JUMP JUMPDEST SWAP6 POP POP DUP1 DUP11 ADD MLOAD SWAP6 POP POP POP POP DUP1 DUP6 DUP4 SUB ADD PUSH2 0x1E0 DUP7 ADD MSTORE POP PUSH2 0x3B94 DUP2 DUP4 PUSH2 0x374B JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x3BA6 DUP2 DUP8 PUSH2 0x374B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD DUP5 DUP4 MSTORE PUSH1 0x40 PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP5 MLOAD DUP1 DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 POP PUSH1 0x20 DUP7 ADD SWAP3 POP DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3C12 JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x3BDE JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3C3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3C5B JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3C80 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3C68 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x3C8F JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3CB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xA8 PUSH32 0xC7253056A246E4A91D483BD03F17A76820224B3BF36E5DF9DE67803770596C65 PUSH25 0x706572696D656E74616CF564736F6C63430005110040000000 ",
				"sourceMap": "1402:38475:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1402:38475:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21464:1030;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;25077:1399;;;;;;;;;:::i;20023:1028::-;;;;;;;;;:::i;13319:1057::-;;;;;;;;;:::i;7654:1762::-;;;;;;;;;:::i;12331:623::-;;;;;;;;;:::i;6412:882::-;;;;;;;;;:::i;17354:2252::-;;;;;;;;;:::i;10753:1054::-;;;;;;;;;:::i;3027:515::-;;;;;;;;;:::i;:::-;;;;;;;;14738:2257;;;;;;;;;:::i;3996:2016::-;;;;;;;;;:::i;27035:569::-;;;;;;;;;:::i;22973:1559::-;;;;;;;;;:::i;28968:1034::-;;;;;;;;;:::i;28048:625::-;;;;;;;;;:::i;:::-;;;;;;;;9856:529;;;;;;;;;:::i;30294:1021::-;;;;;;;;;:::i;21464:1030::-;21674:34;21724:18;21745:17;:24;21724:45;;21813:10;21799:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;21799:25:2;-1:-1:-1;21779:45:2;-1:-1:-1;21839:9:2;21834:654;21858:10;21854:1;:14;21834:654;;;21890:15;21907:23;21950:12;:23;;2228:5;22070:1;22063:27;;;:36;;;;22125:12;22163:10;22199:17;22217:1;22199:20;;;;;;;;;;;;;;22015:226;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;22015:226:2;;;49:4:-1;25:18;;61:17;;22015:226:2;182:15:-1;22015:226:2;;;;179:29:-1;;;;160:49;;;21950:292:2;;;;22015:226;21950:292;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;21889:353:2;;-1:-1:-1;21889:353:2;-1:-1:-1;22256:18:2;22292:139;;;;22350:10;22339:33;;;;;;;;;;;;;;22326:46;;22292:139;;;22411:5;;;;;22292:139;22467:10;22444:17;22462:1;22444:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;;;21870:3:2;;21834:654;;;;21464:1030;;;;;;;:::o;25077:1399::-;25328:34;25430:18;25451:17;:24;25430:45;;25519:10;25505:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;25505:25:2;-1:-1:-1;25485:45:2;-1:-1:-1;25598:25:2;;;25594:80;;-1:-1:-1;25639:24:2;;25594:80;25689:9;25684:786;25708:10;25704:1;:14;25684:786;;;25740:15;25757:23;25800:11;:22;;2353:5;25927:1;25914:28;;;:37;;;;25977:10;26013:17;26056:10;26092:17;26110:1;26092:20;;;;;;;;;;;;;;25866:268;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;25866:268:2;;;49:4:-1;25:18;;61:17;;25866:268:2;182:15:-1;25866:268:2;;;;179:29:-1;;;;160:49;;;25800:335:2;;;;25866:268;25800:335;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;25739:396:2;;-1:-1:-1;25739:396:2;-1:-1:-1;26149:17:2;26184:230;;;;26241:10;26230:33;;;;;;;;;;;;;;26218:45;;26184:230;;;26394:5;;;;;26184:230;26450:9;26427:17;26445:1;26427:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;25720:3:2;;25684:786;;;;25077:1399;;;;;;;;;:::o;20023:1028::-;20234:34;20284:18;20305:17;:24;20284:45;;20373:10;20359:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;20359:25:2;-1:-1:-1;20339:45:2;-1:-1:-1;20399:9:2;20394:651;20418:10;20414:1;:14;20394:651;;;20450:15;20467:23;20510:12;:23;;2228:5;20630:1;20623:27;;;:36;;;;20685:12;20723:10;20759:17;20777:1;20759:20;;;;;;;;;;;;;;20575:226;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;20575:226:2;;;49:4:-1;25:18;;61:17;;20575:226:2;182:15:-1;20575:226:2;;;;179:29:-1;;;;160:49;;;20510:292:2;;;;20575:226;20510:292;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;20449:353:2;;-1:-1:-1;20449:353:2;-1:-1:-1;20816:17:2;20851:138;;;;20908:10;20897:33;;;;;;;;;;;;;;20885:45;;21025:9;21002:17;21020:1;21002:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;20430:3:2;;20394:651;;13319:1057;13501:34;13551:40;13568:10;13580;13551:16;:40::i;:::-;13622:24;;13676:25;;;;;;;;;;;;;;;;13622:24;13676:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;13676:25:2;-1:-1:-1;13656:45:2;-1:-1:-1;13716:9:2;13711:659;13735:10;13731:1;:14;13711:659;;;13767:15;13784:23;13827:20;:18;:20::i;:::-;:31;;2008:6;13959:1;13950:24;;;:33;;;;14009:10;14045;14081:17;14099:1;14081:20;;;;;;;;;;;;;;13902:221;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;13902:221:2;;;49:4:-1;25:18;;61:17;;13902:221:2;182:15:-1;13902:221:2;;;;179:29:-1;;;;160:49;;;13827:297:2;;;;13902:221;13827:297;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;13766:358:2;;-1:-1:-1;13766:358:2;-1:-1:-1;14138:18:2;14174:139;;;;14232:10;14221:33;;;;;;;;;;;;;;14208:46;;14174:139;;;14293:5;;;;;14174:139;14349:10;14326:17;14344:1;14326:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;;;13747:3:2;;13711:659;;;;13319:1057;;;;;;:::o;7654:1762::-;7842:34;7892:40;7909:10;7921;7892:16;:40::i;:::-;7963:24;;8017:25;;;;;;;;;;;;;;;;7963:24;8017:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;8017:25:2;;7997:45;;8052:19;8074:17;:15;:17::i;:::-;8052:39;-1:-1:-1;8101:13:2;;;8149:1261;8173:10;8169:1;:14;8149:1261;;;8222:11;8208:25;;:10;:25;;;:54;;;;8251:11;8237:25;;:10;:25;;;8208:54;8204:1154;;;8343:73;8371:10;8383;8395:17;8413:1;8395:20;;;;;;;;;;;;;;8343:27;:73::i;:::-;8324:92;;-1:-1:-1;8324:92:2;-1:-1:-1;8540:31:2;;;2468:42;8540:31;;:67;;-1:-1:-1;8575:32:2;;;2613:42;8575:32;8540:67;8536:123;;;8639:1;8631:9;;8536:123;8204:1154;;;8746:74;8774:10;8786:11;8799:17;8817:1;8799:20;;;;;;;8746:74;8727:93;;-1:-1:-1;8727:93:2;-1:-1:-1;8842:10:2;;8838:506;;8876:20;8942:59;8970:11;8983:10;8995:5;8942:27;:59::i;:::-;8918:83;;-1:-1:-1;8918:83:2;-1:-1:-1;9208:31:2;;;2468:42;9208:31;:58;;;;;9254:12;9243:23;;:7;:23;;;9208:58;9204:122;;;9302:1;9294:9;;9204:122;8838:506;;9394:5;9371:17;9389:1;9371:20;;;;;;;;;;;;;;;;;:28;8185:3;;8149:1261;;;;7654:1762;;;;;;;;;:::o;12331:623::-;12552:34;12620:17;12606:31;;:10;:31;;;:66;;;;12655:17;12641:31;;:10;:31;;;12606:66;12602:121;;;12688:24;;12602:121;12732:36;12771:72;12794:10;12806:17;12825;12771:22;:72::i;:::-;12732:111;;12873:74;12896:17;12915:10;12927:19;12873:22;:74::i;:::-;12853:94;;12331:623;;;;;;;;:::o;6412:882::-;6586:47;6682:92;6729:6;6749:15;6682:33;:92::i;:::-;6649:125;-1:-1:-1;6915:9:2;6910:378;6934:6;:13;6930:1;:17;6910:378;;;6972:30;7003:1;6972:33;;;;;;;;;;;;;;7009:1;6972:38;6968:310;;7066:197;7116:30;7147:1;7116:33;;;;;;;;;;;;;;7171:6;7178:1;7171:9;;;;;;;;;;;;;;:26;;;7219:6;7226:1;7219:9;;;;;;;;;;;;;;:26;;;7066:28;:197::i;:::-;7030:30;7061:1;7030:33;;;;;;;;;;;;;:233;;;;;6968:310;6949:3;;6910:378;;;;6412:882;;;;:::o;17354:2252::-;17536:34;17586:40;17603:10;17615;17586:16;:40::i;:::-;17657:24;;17711:25;;;;;;;;;;;;;;;;17657:24;17711:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;17711:25:2;;17691:45;;17746:41;17804:17;:15;:17::i;:::-;17790:31;;:10;:31;;;:105;;17864:31;17884:10;17864:19;:31::i;:::-;17790:105;;;17859:1;17790:105;17746:149;;17905:41;17963:17;:15;:17::i;:::-;17949:31;;:10;:31;;;:105;;18023:31;18043:10;18023:19;:31::i;:::-;17949:105;;;18018:1;17949:105;17905:149;-1:-1:-1;18069:9:2;18064:1536;18088:10;18084:1;:14;18064:1536;;;18137:4;18173:17;:15;:17::i;:::-;18159:31;;:10;:31;;;18155:1367;;;18425:20;;18247:216;;18310:18;;18351:52;;18425:17;;18443:1;;18425:20;;;;;;;;;;;;18247:33;:216::i;:::-;18211:17;18229:1;18211:20;;;;;;;;;;;;;18210:253;;;;;;;;;18155:1367;;;18502:17;:15;:17::i;:::-;18488:31;;:10;:31;;;18484:1038;;;18754:20;;18576:216;;18639:18;;18680:52;;18754:17;;18772:1;;18754:20;;;;;18484:1038;19066:20;;18831:15;;18888:216;;18951:18;;18992:52;;19066:17;;19084:1;;19066:20;;;;;18888:216;18864:240;-1:-1:-1;18864:240:2;-1:-1:-1;19126:12:2;;19122:386;;19199:219;19266:18;19311:52;19389:7;19199:33;:219::i;:::-;19163:17;19181:1;19163:20;;;;;;;;;;;;;19162:256;;;;;;;;;19122:386;;;19488:1;19465:17;19483:1;19465:20;;;;;;;;;;;;;:24;;;;;19122:386;18484:1038;;19540:10;19535:55;;19570:5;;;19535:55;-1:-1:-1;18100:3:2;;18064:1536;;;;17354:2252;;;;;;;;:::o;10753:1054::-;10936:34;10986:40;11003:10;11015;10986:16;:40::i;:::-;11057:24;;11111:25;;;;;;;;;;;;;;;;11057:24;11111:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;11111:25:2;-1:-1:-1;11091:45:2;-1:-1:-1;11151:9:2;11146:655;11170:10;11166:1;:14;11146:655;;;11202:15;11219:23;11262:20;:18;:20::i;:::-;:31;;2008:6;11394:1;11385:24;;;:33;;;;11444:10;11480;11516:17;11534:1;11516:20;;;;;;;;;;;;;;11337:221;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;11337:221:2;;;49:4:-1;25:18;;61:17;;11337:221:2;182:15:-1;11337:221:2;;;;179:29:-1;;;;160:49;;;11262:297:2;;;;11337:221;11262:297;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;11201:358:2;;-1:-1:-1;11201:358:2;-1:-1:-1;11573:17:2;11608:137;;;;11665:10;11654:33;;;;;;;;;;;;;;11642:45;;11781:9;11758:17;11776:1;11758:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;11182:3:2;;11146:655;;3027:515;3177:29;;;;;;;;;;;;;;;;3121:26;;3189:9;3177:29;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3163:43:2;-1:-1:-1;3221:9:2;3216:320;3236:21;;;3216:320;;3279:15;3296:23;3331:4;3348:9;;3358:1;3348:12;;;;;;;;;;;;-1:-1:-1;30:25;;92:48;100:14;96:29;;;92:48;68:73;;58:2;;155:1;152;145:12;58:2;174:33;;;69:4;55:19;;;-1:-1;16:22;93:18;82:30;;79:2;;;125:1;122;115:12;79:2;155:14;151:38;;;137:53;;134:2;;;203:1;200;193:12;134:2;3323:38:2;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;3278:83:2;;;;3380:10;3375:110;;3457:10;3451:17;3444:4;3432:10;3428:21;3421:48;3419:52;3515:10;3498:11;3510:1;3498:14;;;;;;;;;;;;;;;;;:27;-1:-1:-1;;3259:3:2;;3216:320;;14738:2257;14921:34;14971:40;14988:10;15000;14971:16;:40::i;:::-;15042:24;;15096:25;;;;;;;;;;;;;;;;15042:24;15096:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;15096:25:2;;15076:45;;15131:41;15189:17;:15;:17::i;:::-;15175:31;;:10;:31;;;:105;;15249:31;15269:10;15249:19;:31::i;:::-;15175:105;;;15244:1;15175:105;15131:149;;15290:41;15348:17;:15;:17::i;:::-;15334:31;;:10;:31;;;:105;;15408:31;15428:10;15408:19;:31::i;:::-;15334:105;;;15403:1;15334:105;15290:149;-1:-1:-1;15454:9:2;15449:1540;15473:10;15469:1;:14;15449:1540;;;15522:4;15558:17;:15;:17::i;:::-;15544:31;;:10;:31;;;15540:1371;;;15809:20;;15632:215;;15695:18;;15736:51;;15809:17;;15827:1;;15809:20;;;;;15632:215;15596:17;15614:1;15596:20;;;;;;;;;;;;;15595:252;;;;;;;;;15540:1371;;;15886:17;:15;:17::i;:::-;15872:31;;:10;:31;;;15868:1043;;;16137:20;;15960:215;;16023:18;;16064:51;;16137:17;;16155:1;;16137:20;;;;;15868:1043;16452:20;;16214:17;;16275:215;;16338:18;;16379:51;;16452:17;;16470:1;;16452:20;;;;;16275:215;16249:241;-1:-1:-1;16249:241:2;-1:-1:-1;16512:14:2;;16508:389;;16587:220;16654:18;16699:51;16776:9;16587:33;:220::i;:::-;16551:17;16569:1;16551:20;;;;;;;;;;;;;16550:257;;;;;;;;;16508:389;;;16877:1;16854:17;16872:1;16854:20;;;;;;;;;;;;;:24;;;;;16508:389;15868:1043;;16929:10;16924:55;;16959:5;;;16924:55;-1:-1:-1;15485:3:2;;15449:1540;;3996:2016;4170:47;4280:6;:13;4266:28;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;4266:28:2;-1:-1:-1;4304:23:2;4330:16;;4233:61;;-1:-1:-1;4330:16:2;;;;;4356:1650;4381:6;:13;4376:1;:18;4356:1650;;4496:15;4512:1;4496:18;;;;;;;;;;;;;;:25;4525:1;4496:30;:81;;;;4546:6;4553:1;4546:9;;;;;;;;;;;;;;:26;;;4576:1;4546:31;4496:81;:132;;;;4597:6;4604:1;4597:9;;;;;;;;;;;;;;:26;;;4627:1;4597:31;4496:132;4492:234;;;4684:1;4648:30;4679:1;4648:33;;;;;;;;;;;;;:37;;;;;4703:8;;4492:234;4778:15;4795:23;4838:15;:47;;1578:5;5009:15;4999:48;;;:57;;;;5081:6;5088:1;5081:9;;;;;;;;;;;;;;5115:15;5131:1;5115:18;;;;;;;;;;;;;;4952:203;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;4952:203:2;;;49:4:-1;25:18;;61:17;;4952:203:2;182:15:-1;4952:203:2;;;;179:29:-1;;;;160:49;;;4838:318:2;;;;4952:203;4838:318;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4777:379:2;;;;5212:10;5207:113;;5278:1;5242:30;5273:1;5242:33;;;;;;;;;;;;;:37;;;;;5297:8;;;;5207:113;5351:35;;:::i;:::-;5404:32;5454:21;5520:10;5492:105;;;;;;;;;;;;;;5333:264;;-1:-1:-1;5333:264:2;-1:-1:-1;5333:264:2;-1:-1:-1;5759:29:2;5734:21;;:54;;;;;;;;;;:91;;;;5809:16;5808:17;5734:91;5730:266;;;5881:1;5845:30;5876:1;5845:33;;;;;;;;;;;;;:37;;;;;5730:266;;;5957:24;5921:30;5952:1;5921:33;;;;;;;;;;;;;:60;;;;;5730:266;4356:1650;;;;;;4396:3;;4356:1650;;;;3996:2016;;;;;:::o;27035:569::-;27304:34;27361:236;27407:10;27431;27455:17;27486:4;27504:54;27572:15;27361:32;:236::i;:::-;27354:243;27035:569;-1:-1:-1;;;;;;27035:569:2:o;22973:1559::-;23207:34;23309:18;23330:17;:24;23309:45;;23398:10;23384:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;23384:25:2;;23364:45;;23468:23;23494:119;23540:15;23569:10;23593;23494:32;:119::i;:::-;23468:145;-1:-1:-1;23683:29:2;;;23679:84;;-1:-1:-1;23728:24:2;;-1:-1:-1;23728:24:2;23679:84;23778:9;23773:753;23797:10;23793:1;:14;23773:753;;;23829:15;23846:23;23889:15;:26;;2353:5;24026:1;24007:34;;;:43;;;;24076:10;24112;24148:17;24166:1;24148:20;;;;;;;;;;;;;;23959:231;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;23959:231:2;;;49:4:-1;25:18;;61:17;;23959:231:2;182:15:-1;23959:231:2;;;;179:29:-1;;;;160:49;;;23889:302:2;;;;23959:231;23889:302;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;23828:363:2;;-1:-1:-1;23828:363:2;-1:-1:-1;24205:17:2;24240:230;;;;24297:10;24286:33;;;;;;;;;;;;;;24274:45;;24240:230;;;24450:5;;;;;24240:230;24506:9;24483:17;24501:1;24483:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;23809:3:2;;23773:753;;;;22973:1559;;;;;;;;:::o;28968:1034::-;29128:34;29178:18;29199:17;:24;29178:45;;29267:10;29253:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;29253:25:2;-1:-1:-1;29233:45:2;-1:-1:-1;29293:9:2;29288:708;29312:10;29308:1;:14;29288:708;;;29344:15;29361:23;29404:30;:28;:30::i;:::-;:41;;1897:5;29558:1;29539:35;;;:44;;;;29609:17;29627:1;29609:20;;;;;;;;;;;;;;29655:4;29491:190;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;29491:190:2;;;49:4:-1;25:18;;61:17;;29491:190:2;182:15:-1;29491:190:2;;;;179:29:-1;;;;160:49;;;29404:278:2;;;;29491:190;29404:278;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;29343:339:2;;-1:-1:-1;29343:339:2;-1:-1:-1;29696:17:2;29731:209;;;;29840:10;29829:35;;;;;;;;;;;;;;29879:1;29865:4;:11;:15;29829:52;;;;;;;;;;;;;;29817:64;;29731:209;;;29920:5;;;;;29731:209;29976:9;29953:17;29971:1;29953:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;29324:3:2;;29288:708;;28048:625;28293:162;;28230:23;;28269:21;;28329:68;;28293:162;;28411:10;;28435;;28293:162;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;28293:162:2;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;28293:162:2;28269:186;;28466:15;28483:23;28510:15;:26;;28537:8;28510:36;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;28465:81:2;;;;28560:10;:37;;;;;28574:10;:17;28595:2;28574:23;28560:37;28556:111;;;28620:36;28641:10;28653:2;28620:20;:36::i;:::-;28613:43;;;;;;;28556:111;28048:625;;;;;;;;;:::o;9856:529::-;10079:34;10136:242;10182:10;10206;10230:17;10261:4;10279:41;10342:1;10136:32;:242::i;30294:1021::-;30453:34;30503:18;30524:17;:24;30503:45;;30592:10;30578:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;30578:25:2;-1:-1:-1;30558:45:2;-1:-1:-1;30618:9:2;30613:696;30637:10;30633:1;:14;30613:696;;;30669:15;30686:23;30729:30;:28;:30::i;:::-;:41;;1897:5;30883:1;30864:34;;;:43;;;;30933:17;30951:1;30933:20;;;;;;;;;;;;;;30979:4;30816:189;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;30816:189:2;;;49:4:-1;25:18;;61:17;;30816:189:2;182:15:-1;30816:189:2;;;;179:29:-1;;;;160:49;;;30729:277:2;;;;30816:189;30729:277;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;30668:338:2;;-1:-1:-1;30668:338:2;-1:-1:-1;31020:18:2;31056:196;;;;31166:10;31155:35;;;;;;;;;;;;;;31191:1;31155:38;;;;;;;;;;;;;;31142:51;;31288:10;31265:17;31283:1;31265:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;;;30649:3:2;;30613:696;;33572:190;33703:10;33689:24;;:10;:24;;;;33681:74;;;;;;;;;;;;;;;;;;;;;;33572:190;;:::o;5517:144:33:-;2081:42;5517:144;:::o;4580:135::-;732:42;4580:135;:::o;38120:1755:2:-;38299:24;38325:15;38356:19;38392:17;:15;:17::i;:::-;38378:31;;:10;:31;;;:64;;38432:10;38378:64;;;3478:42:33;38378:64:2;38356:86;;38452:19;38488:17;:15;:17::i;:::-;38474:31;;:10;:31;;;:64;;38528:10;38474:64;;;3478:42:33;38474:64:2;38452:86;;38548:26;38577:29;38595:10;38577:17;:29::i;:::-;38548:58;;;;38616:26;38645:29;38663:10;38645:17;:29::i;:::-;38616:58;;;;38685:15;38702:23;38729:30;:28;:30::i;:::-;38806:105;;;22:32:-1;6:49;;38806:105:2;;;;;49:4:-1;25:18;;61:17;;38806:105:2;182:15:-1;38846:51:2;179:29:-1;160:49;;38729:183:2;;:41;;;;;;2353:5;;38729:183;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;38684:228:2;;;;38927:10;38922:64;;-1:-1:-1;38961:1:2;;-1:-1:-1;38961:1:2;;-1:-1:-1;38953:22:2;;-1:-1:-1;;;;;38953:22:2;38922:64;38995:28;39037:10;39026:33;;;;;;;;;;;;;;38995:64;;39108:20;:31;;1680:6;39235:1;39221:31;;;:40;;;;39283:11;39316;39349:16;39387:5;39177:254;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;39177:254:2;;;49:4:-1;25:18;;61:17;;39177:254:2;182:15:-1;39177:254:2;;;;179:29:-1;;;;160:49;;;39108:324:2;;;;39177:254;39108:324;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;39069:363:2;;-1:-1:-1;39069:363:2;-1:-1:-1;39442:12:2;;39493:154;;;;39552:10;39541:42;;;;;;;;;;;;;;39523:60;-1:-1:-1;39523:60:2;-1:-1:-1;39493:154:2;;;-1:-1:-1;39622:1:2;;-1:-1:-1;39622:1:2;;-1:-1:-1;39614:22:2;;-1:-1:-1;;;;;;;;39614:22:2;39493:154;39815:8;39782:18;39776:2;:24;39743:18;39737:2;:24;39706:16;39687:4;:35;:74;:113;;;;;;:136;;;;;;;-1:-1:-1;39860:7:2;-1:-1:-1;;;;;;;;;38120:1755:2;;;;;;;:::o;3762:545:20:-;3925:21;4165:104;4257:11;4165:70;4212:22;4257:11;4232:1;4212:22;:19;:22;:::i;:::-;4165:25;:9;4183:6;4165:25;:17;:25;:::i;:::-;:46;:70;:46;:70;:::i;:::-;:91;:104;:91;:104;:::i;33079:316:2:-;33176:31;33302:35;:33;:35::i;:::-;33278:85;;;33364:12;33278:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;33278:99:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33278:99:2;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;33278:99:2;;;;;;;;;33223:165;33079:316;-1:-1:-1;;33079:316:2:o;32116:721::-;32313:20;;32370:36;;;32366:100;;32422:33;;32366:100;32475:23;32547:22;:33;;1787:5;32664:16;32702:11;32620:111;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;32620:111:2;;;49:4:-1;25:18;;61:17;;32620:111:2;182:15:-1;32620:111:2;;;;179:29:-1;;;;160:49;;;32547:185:2;;;;32620:111;32547:185;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;32508:224:2;;-1:-1:-1;32508:224:2;-1:-1:-1;32742:89:2;;;;32798:10;32787:33;;;;;;;;;;;;;;32772:48;;32742:89;32116:721;;;;;;;:::o;34997:3117::-;35288:34;35338:40;35355:10;35367;35338:16;:40::i;:::-;35392:24;;35388:84;;35437:24;;35388:84;35481:18;35509:17;35536:26;35606:17;:24;35592:39;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;35592:39:2;;35572:59;;35654:174;35696:10;35720;35744:17;35762:1;35744:20;;;;;;;;;;;;;;35778:8;35800:18;35654:28;:174::i;:::-;35641:187;-1:-1:-1;35843:15:2;35839:70;;-1:-1:-1;35874:24:2;;-1:-1:-1;;35874:24:2;35839:70;35931:164;35973:10;35997;36021;36045:8;36067:18;35931:28;:164::i;:::-;35919:176;-1:-1:-1;36109:14:2;36105:69;;-1:-1:-1;36139:24:2;;-1:-1:-1;;36139:24:2;36105:69;36189:9;36184:1924;36208:17;:24;36204:1;:28;36184:1924;;;36258:12;36253:1440;36283:4;:18;;;36276:4;:25;36253:1440;;;36437:151;36487:17;36505:1;36487:20;;;;;;;;;;;;;;36529:9;36560:10;36437:28;:151::i;:::-;36424:164;;36619:159;36678:4;:22;;;36670:5;:30;36723:5;36750:10;36619:28;:159::i;:::-;36606:172;;36796:18;36817:212;36867:10;36899;36931;36963:8;36993:18;36817:28;:212::i;:::-;36796:233;-1:-1:-1;37051:15:2;37047:67;;37090:5;;;37047:67;37247:10;37235:22;;37349:17;37367:1;37349:20;;;;;;;;;;;;;;37336:9;:33;37332:347;;37393:26;37515:17;37533:1;37515:20;;;;;;;;;;;;;;37435:17;37453:1;37435:20;;;;;;;;;;;;;;37423:9;:32;37459:5;37422:42;:113;;;;;;37393:142;;37583:4;:22;;;37561:18;:44;37557:104;;37633:5;;;;37557:104;37332:347;;-1:-1:-1;36303:6:2;;36253:1440;;;;37962:135;38008:17;38026:1;38008:20;;;;;;;;;;;;;;38046:9;38073:10;37962:28;:135::i;:::-;37939:17;37957:1;37939:20;;;;;;;;;;;;;;;;;:158;36234:3;;36184:1924;;;;34997:3117;;;;;;;;;;;:::o;5185:173:33:-;1745:42;5185:173;:::o;10753:1071:34:-;10874:14;10919:5;10927:2;10919:10;10908:1;:8;:21;10904:321;;;10945:269;10967:246;11029:89;11136:1;:8;11162:5;11170:2;11162:10;10967:44;:246::i;:::-;10945:21;:269::i;:::-;-1:-1:-1;11726:13:34;11471:2;11726:13;11720:20;11742:42;11716:69;;10753:1071::o;31482:176:2:-;31578:14;31615:36;31638:12;31615:22;:36::i;4310:164:33:-;1042:42;4310:164;:::o;965:364:38:-;1051:7;1082:1;1078;:5;1074:227;;;1099:191;1121:168;1178:59;1255:1;1274;1121:39;:168::i;1099:191::-;-1:-1:-1;1317:5:38;;;965:364::o;122:448::-;208:7;235:6;231:45;;-1:-1:-1;264:1:38;257:8;;231:45;297:5;;;301:1;297;:5;:1;316:5;;;;;:10;312:234;;342:193;364:170;421:61;500:1;519;364:39;:170::i;1335:383::-;1421:7;1456:5;;;1475;;;1471:223;;;1496:187;1518:164;1575:55;1648:1;1667;1518:39;:164::i;576:383::-;662:7;689:6;685:223;;711:186;733:163;790:54;862:1;881;733:39;:163::i;711:186::-;917:9;933:1;929;:5;;;;;;;576:383;-1:-1:-1;;;;576:383:38:o;4864:176:33:-;1392:42;4864:176;:::o;33768:1223:2:-;34115:16;;;34129:1;34115:16;;;;;;;;;34009:24;;34049:21;;;;34115:16;;;;;;105:10:-1;34115:16:2;88:34:-1;136:17;;-1:-1;34115:16:2;34080:51;;34162:16;34141:15;34157:1;34141:18;;;;;;;;;;;;;;;;;:37;34192:53;;;34204:41;34192:53;34188:554;;;34272:184;;34312:41;;34272:184;;34371:10;;34399;;34427:15;;34272:184;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;34272:184:2;;;49:4:-1;25:18;;61:17;;34272:184:2;182:15:-1;34272:184:2;;;;179:29:-1;;;;160:49;;;34272:184:2;-1:-1:-1;34188:554:2;;;34498:233;;34538:54;;34498:233;;34610:18;;34646:10;;34674;;34702:15;;34498:233;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;34498:233:2;;;49:4:-1;25:18;;61:17;;34498:233:2;182:15:-1;34498:233:2;;;;179:29:-1;;;;160:49;;;34498:233:2;-1:-1:-1;34188:554:2;34752:12;34766:23;34801:4;34793:24;;34818:8;34793:34;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;34751:76:2;;;;34842:7;34837:47;;34872:1;34865:8;;;;;;;;34837:47;34957:10;34946:35;;;;;;;;;;;;;;34982:1;34946:38;;;;;;;;;;;;;;34927:57;;33768:1223;;;;;;;;;;;:::o;1292:378:35:-;1480:12;1232:10;1551:37;;1602:9;1625:6;1645:8;1515:148;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;1515:148:35;;;49:4:-1;25:18;;61:17;;1515:148:35;182:15:-1;1515:148:35;;;;179:29:-1;;;;160:49;;;1515:148:35;-1:-1:-1;1292:378:35;;;;;:::o;1511:170:37:-;1654:9;1648:16;1641:4;1630:9;1626:20;1619:46;3905:366:17;3985:19;4036:2;4020:18;;4049:15;4066:23;4093:5;:16;;4110:18;;;;;;;;;;;;;;;;;4093:36;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4048:81:17;;;;4143:10;:37;;;;;4157:10;:17;4178:2;4157:23;4143:37;4139:126;;;4218:35;4239:10;4251:1;4218:20;:35::i;:::-;4196:58;;4139:126;3905:366;;;;;:::o;731:322:39:-;884:12;196:10;955:28;;997:9;1020:1;1035;919:127;;;;;;;;;;;15929:220:34;16050:14;16097:21;16109:1;16112:5;14254:14;14299:5;14307:2;14299:10;14288:1;:8;:21;14284:297;;;14325:245;14347:222;14409:92;14519:1;:8;14545:5;14553:2;14545:10;14347:44;:222::i;14325:245::-;-1:-1:-1;14759:13:34;14661:2;14759:13;14753:20;;14133:679::o;1402:38475:2:-;;;;;;;;;;;-1:-1:-1;1402:38475:2;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;97:33;72:20;97:33;;1572:693;;1694:3;1687:4;1679:6;1675:17;1671:27;1661:2;;-1:-1;;1702:12;1661:2;1749:6;1736:20;1771:85;1786:69;1848:6;1786:69;;;1771:85;;;1884:21;;;1762:94;-1:-1;1928:4;1941:14;;;;1916:17;;2036:1;2021:238;2046:6;2043:1;2040:13;2021:238;;;2153:42;2191:3;1928:4;2129:3;2116:17;1920:6;2104:30;;2153:42;;;2141:55;;1928:4;2210:14;;;;2238;;;;;2068:1;2061:9;2021:238;;;2025:14;;;;1654:611;;;;;3806:707;;3923:3;3916:4;3908:6;3904:17;3900:27;3890:2;;-1:-1;;3931:12;3890:2;3978:6;3965:20;4000:80;4015:64;4072:6;4015:64;;4000:80;4108:21;;;3991:89;-1:-1;4152:4;4165:14;;;;4140:17;;;4254;;;4245:27;;;;4242:36;-1:-1;4239:2;;;4291:1;;4281:12;4239:2;4316:1;4301:206;4326:6;4323:1;4320:13;4301:206;;;9656:20;;4394:50;;4458:14;;;;4486;;;;4348:1;4341:9;4301:206;;;4305:14;;;;;3883:630;;;;;4798:432;;4895:3;4888:4;4880:6;4876:17;4872:27;4862:2;;-1:-1;;4903:12;4862:2;4950:6;4937:20;38076:18;38068:6;38065:30;38062:2;;;-1:-1;;38098:12;38062:2;4972:60;38239:4;38171:9;4888:4;38156:6;38152:17;38148:33;38229:15;4972:60;;;4963:69;;5052:6;5045:5;5038:21;5156:3;38239:4;5147:6;5080;5138:16;;5135:25;5132:2;;;5173:1;;5163:12;5132:2;42432:6;38239:4;5080:6;5076:17;38239:4;5114:5;5110:16;42409:30;42488:1;42470:16;;;38239:4;42470:16;42463:27;5114:5;4855:375;-1:-1;;4855:375;5411:128;5477:20;;41785:2;41774:21;;;43818:34;;43808:2;;43866:1;;43856:12;5594:496;;5715:4;5703:9;5698:3;5694:19;5690:30;5687:2;;;-1:-1;;5723:12;5687:2;5751:20;5715:4;5751:20;;;5742:29;;9669:6;9656:20;5848:16;5841:75;5986:2;6044:9;6040:22;9656:20;5986:2;6005:5;6001:16;5994:75;5681:409;;;;;6868:2714;;6976:6;;6964:9;6959:3;6955:19;6951:32;6948:2;;;-1:-1;;6986:12;6948:2;7014:22;6976:6;7014:22;;;7005:31;;;7126:49;7171:3;7147:22;7126:49;;;7108:16;7101:75;7278:49;7323:3;7245:2;7303:9;7299:22;7278:49;;;7245:2;7264:5;7260:16;7253:75;7437:49;7482:3;7404:2;7462:9;7458:22;7437:49;;;7404:2;7423:5;7419:16;7412:75;7590:49;7635:3;7557:2;7615:9;7611:22;7590:49;;;7557:2;7576:5;7572:16;7565:75;7713:3;7772:9;7768:22;9656:20;7713:3;7733:5;7729:16;7722:75;7870:3;7929:9;7925:22;9656:20;7870:3;7890:5;7886:16;7879:75;8019:3;8078:9;8074:22;9656:20;8019:3;8039:5;8035:16;8028:75;8168:3;8227:9;8223:22;9656:20;8168:3;8188:5;8184:16;8177:75;8330:3;;8391:9;8387:22;9656:20;8330:3;8350:5;8346:18;8339:77;;8477:3;;8538:9;8534:22;9656:20;8477:3;8497:5;8493:18;8486:77;;8662:3;;8651:9;8647:19;8634:33;8687:18;;8679:6;8676:30;8673:2;;;7094:1;;8709:12;8673:2;8756:54;8806:3;8797:6;8786:9;8782:22;8756:54;;;8662:3;8740:5;8736:18;8729:82;8910:3;;;;8899:9;8895:19;8882:33;8868:47;;8687:18;8927:6;8924:30;8921:2;;;7094:1;;8957:12;8921:2;9004:54;9054:3;9045:6;9034:9;9030:22;9004:54;;;8910:3;8988:5;8984:18;8977:82;9161:3;;;;9150:9;9146:19;9133:33;9119:47;;8687:18;9178:6;9175:30;9172:2;;;7094:1;;9208:12;9172:2;9255:54;9305:3;9296:6;9285:9;9281:22;9255:54;;;9161:3;9239:5;9235:18;9228:82;9412:3;;;;9401:9;9397:19;9384:33;9370:47;;8687:18;9429:6;9426:30;9423:2;;;7094:1;;9459:12;9423:2;;9506:54;9556:3;9547:6;9536:9;9532:22;9506:54;;;9412:3;9490:5;9486:18;9479:82;;;6942:2640;;;;;9867:263;;9982:2;9970:9;9961:7;9957:23;9953:32;9950:2;;;-1:-1;;9988:12;9950:2;226:6;220:13;238:33;265:5;238:33;;10423:415;;;10563:2;10551:9;10542:7;10538:23;10534:32;10531:2;;;-1:-1;;10569:12;10531:2;375:6;369:13;387:41;422:5;387:41;;;10740:2;10790:22;;;;9804:13;10621:82;;9804:13;;-1:-1;;;10525:313;10845:491;;;;10983:2;10971:9;10962:7;10958:23;10954:32;10951:2;;;-1:-1;;10989:12;10951:2;85:6;72:20;97:33;124:5;97:33;;;11041:63;-1:-1;11141:2;11180:22;;72:20;97:33;72:20;97:33;;;11149:63;-1:-1;11249:2;11288:22;;72:20;97:33;72:20;97:33;;;11257:63;;;;10945:391;;;;;;11343:879;;;;;;11540:3;11528:9;11519:7;11515:23;11511:33;11508:2;;;-1:-1;;11547:12;11508:2;85:6;72:20;97:33;124:5;97:33;;;11599:63;-1:-1;11699:2;11738:22;;72:20;97:33;72:20;97:33;;;11707:63;-1:-1;11807:2;11846:22;;72:20;97:33;72:20;97:33;;;11815:63;-1:-1;11915:2;11954:22;;72:20;97:33;72:20;97:33;;;11923:63;-1:-1;12051:3;12036:19;;12023:33;12076:18;12065:30;;12062:2;;;-1:-1;;12098:12;12062:2;12128:78;12198:7;12189:6;12178:9;12174:22;12128:78;;;12118:88;;;11502:720;;;;;;;;;12229:753;;;;;12409:3;12397:9;12388:7;12384:23;12380:33;12377:2;;;-1:-1;;12416:12;12377:2;85:6;72:20;97:33;124:5;97:33;;;12468:63;-1:-1;12568:2;12607:22;;72:20;97:33;72:20;97:33;;;12576:63;-1:-1;12676:2;12715:22;;72:20;97:33;72:20;97:33;;;12684:63;-1:-1;12812:2;12797:18;;12784:32;12836:18;12825:30;;12822:2;;;-1:-1;;12858:12;12822:2;12888:78;12958:7;12949:6;12938:9;12934:22;12888:78;;;12878:88;;;12371:611;;;;;;;;12989:943;;;;;;13218:3;13206:9;13197:7;13193:23;13189:33;13186:2;;;-1:-1;;13225:12;13186:2;85:6;72:20;97:33;124:5;97:33;;;13277:63;-1:-1;13377:2;13416:22;;72:20;97:33;72:20;97:33;;;13385:63;-1:-1;13485:2;13524:22;;72:20;97:33;72:20;97:33;;;13493:63;-1:-1;13621:2;13606:18;;13593:32;13645:18;13634:30;;13631:2;;;-1:-1;;13667:12;13631:2;13697:78;13767:7;13758:6;13747:9;13743:22;13697:78;;;13687:88;;;13831:85;13908:7;13812:3;13888:9;13884:22;13831:85;;;13821:95;;13180:752;;;;;;;;;13939:627;;;;14102:2;14090:9;14081:7;14077:23;14073:32;14070:2;;;-1:-1;;14108:12;14070:2;85:6;72:20;97:33;124:5;97:33;;;14160:63;-1:-1;14260:2;14299:22;;72:20;97:33;72:20;97:33;;;14268:63;-1:-1;14396:2;14381:18;;14368:32;14420:18;14409:30;;14406:2;;;-1:-1;;14442:12;14406:2;14472:78;14542:7;14533:6;14522:9;14518:22;14472:78;;;14462:88;;;14064:502;;;;;;14573:817;;;;;14785:3;14773:9;14764:7;14760:23;14756:33;14753:2;;;-1:-1;;14792:12;14753:2;85:6;72:20;97:33;124:5;97:33;;;14844:63;-1:-1;14944:2;14983:22;;72:20;97:33;72:20;97:33;;;14952:63;-1:-1;15080:2;15065:18;;15052:32;15104:18;15093:30;;15090:2;;;-1:-1;;15126:12;15090:2;15156:78;15226:7;15217:6;15206:9;15202:22;15156:78;;;15146:88;;;15289:85;15366:7;15271:2;15346:9;15342:22;15289:85;;;15279:95;;14747:643;;;;;;;;15397:749;;;;;15575:3;15563:9;15554:7;15550:23;15546:33;15543:2;;;-1:-1;;15582:12;15543:2;85:6;72:20;97:33;124:5;97:33;;;15634:63;-1:-1;15752:52;15796:7;15734:2;15772:22;;15752:52;;;15742:62;;15859:52;15903:7;15841:2;15883:9;15879:22;15859:52;;16153:638;;;16324:2;16312:9;16303:7;16299:23;16295:32;16292:2;;;-1:-1;;16330:12;16292:2;16388:17;16375:31;16426:18;;16418:6;16415:30;16412:2;;;-1:-1;;16448:12;16412:2;16539:6;16528:9;16524:22;575:3;568:4;560:6;556:17;552:27;542:2;;-1:-1;;583:12;542:2;630:6;617:20;603:34;;652:80;667:64;724:6;667:64;;652:80;738:16;774:6;767:5;760:21;804:4;;821:3;817:14;810:21;;804:4;796:6;792:17;926:3;804:4;;910:6;906:17;796:6;897:27;;894:36;891:2;;;-1:-1;;933:12;891:2;-1:-1;959:10;;953:206;978:6;975:1;972:13;953:206;;;85:6;72:20;97:33;124:5;97:33;;;1046:50;;1000:1;993:9;;;;;1110:14;;;;1138;;953:206;;;-1:-1;16468:88;;-1:-1;16606:18;;16593:32;;-1:-1;;;16634:30;;;16631:2;;;-1:-1;;16667:12;16631:2;;16697:78;16767:7;16758:6;16747:9;16743:22;16697:78;;;16687:88;;;16286:505;;;;;;16798:411;;;16944:2;16932:9;16923:7;16919:23;16915:32;16912:2;;;-1:-1;;16950:12;16912:2;17008:17;16995:31;17046:18;;17038:6;17035:30;17032:2;;;-1:-1;;17068:12;17032:2;17176:6;17165:9;17161:22;1326:3;1319:4;1311:6;1307:17;1303:27;1293:2;;-1:-1;;1334:12;1293:2;1377:6;1364:20;1354:30;;17046:18;1396:6;1393:30;1390:2;;;-1:-1;;1426:12;1390:2;1521:3;16944:2;;1505:6;1501:17;1462:6;1487:32;;1484:41;1481:2;;;-1:-1;;1528:12;1481:2;16944;1458:17;;17096:97;;-1:-1;16906:303;;-1:-1;;;;16906:303;17216:686;;;17411:2;17399:9;17390:7;17386:23;17382:32;17379:2;;;-1:-1;;17417:12;17379:2;17475:17;17462:31;17513:18;;17505:6;17502:30;17499:2;;;-1:-1;;17535:12;17499:2;17645:6;17634:9;17630:22;2441:3;2434:4;2426:6;2422:17;2418:27;2408:2;;-1:-1;;2449:12;2408:2;2496:6;2483:20;2469:34;;2518:99;2533:83;2609:6;2533:83;;2518:99;2645:21;;;2689:4;2702:14;;;;2623:16;2677:17;;;-1:-1;2782:252;2807:6;2804:1;2801:13;2782:252;;;2914:56;2966:3;2689:4;2890:3;2877:17;2681:6;2865:30;;2914:56;;;2902:69;;2985:14;;;;3013;;;;2829:1;2822:9;2782:252;;;-1:-1;17555:107;;-1:-1;17712:18;;17699:32;;-1:-1;;;;17740:30;;;17737:2;;;-1:-1;;17773:12;17737:2;;17803:83;17878:7;17869:6;17858:9;17854:22;17803:83;;17909:384;;18045:2;;18033:9;18024:7;18020:23;18016:32;18013:2;;;-1:-1;;18051:12;18013:2;18102:17;18096:24;18140:18;18132:6;18129:30;18126:2;;;-1:-1;;18162:12;18126:2;18260:6;18249:9;18245:22;3190:3;3183:4;3175:6;3171:17;3167:27;3157:2;;-1:-1;;3198:12;3157:2;3238:6;3232:13;3218:27;;3260:76;3275:60;3328:6;3275:60;;3260:76;3364:21;;;3421:14;;;;3396:17;;;3510;;;3501:27;;;;3498:36;-1:-1;3495:2;;;-1:-1;;3537:12;3495:2;-1:-1;3563:10;;3557:217;3582:6;3579:1;3576:13;3557:217;;;9804:13;;3650:61;;3604:1;3597:9;;;;;3725:14;;;;3753;;3557:217;;;-1:-1;18182:95;18007:286;-1:-1;;;;;;;18007:286;18300:577;;;;18457:9;18448:7;18444:23;18469:3;18444:23;18440:33;18437:2;;;-1:-1;;18476:12;18437:2;6252:4;6231:19;6227:30;6224:2;;;-1:-1;;6260:12;6224:2;;6288:20;6252:4;6288:20;;;5338:6;5332:13;43728:1;43721:5;43718:12;43708:2;;-1:-1;;43734:12;43708:2;6372:102;;6540:2;6605:22;;;4734:13;6555:16;;;6548:86;6718:2;6783:22;;;9804:13;6733:16;;;6726:86;6252:4;18712:22;;9804:13;18781:3;18829:22;;4596:13;6379:16;;-1:-1;9804:13;-1:-1;41272:13;;41265:21;43457:32;;43447:2;;-1:-1;;43493:12;18884:263;;18999:2;18987:9;18978:7;18974:23;18970:32;18967:2;;;-1:-1;;19005:12;18967:2;-1:-1;9804:13;;18961:186;-1:-1;18961:186;19704:103;41880:42;41869:54;19765:37;;19759:48;21617:690;;21810:5;38843:12;39910:6;39905:3;39898:19;39947:4;39942:3;39938:14;21822:93;;39947:4;21986:5;38376:14;-1:-1;22025:260;22050:6;22047:1;22044:13;22025:260;;;22111:13;;27910:37;;39947:4;19676:14;;;;39518;;;;22072:1;22065:9;22025:260;;;-1:-1;22291:10;;21741:566;-1:-1;;;;21741:566;23126:315;;23250:5;38843:12;39910:6;39905:3;39898:19;23333:52;23378:6;39947:4;39942:3;39938:14;39947:4;23359:5;23355:16;23333:52;;;42869:2;42849:14;42865:7;42845:28;23397:39;;;;39947:4;23397:39;;23202:239;-1:-1;;23202:239;28079:274;;42432:6;42427:3;42422;42409:30;42470:16;;42463:27;;;42470:16;28210:143;-1:-1;28210:143;28360:254;;22923:5;38843:12;23034:52;23079:6;23074:3;23067:4;23060:5;23056:16;23034:52;;;23098:16;;;;;28481:133;-1:-1;;28481:133;28890:213;41880:42;41869:54;;;;19765:37;;29008:2;28993:18;;28979:124;29110:324;41880:42;41869:54;;;19765:37;;41869:54;;29420:2;29405:18;;19765:37;29256:2;29241:18;;29227:207;29441:695;;41880:42;;41873:5;41869:54;19772:3;19765:37;41880:42;41873:5;41869:54;29858:2;29847:9;29843:18;19765:37;41880:42;41873:5;41869:54;29941:2;29930:9;29926:18;19765:37;;29693:3;29978:2;29967:9;29963:18;29956:48;30018:108;29693:3;29682:9;29678:19;30112:6;30018:108;;30143:547;41880:42;41869:54;;;19765:37;;41869:54;;;30510:2;30495:18;;19765:37;41869:54;;30593:2;30578:18;;19765:37;30676:2;30661:18;;27910:37;;;;30345:3;30330:19;;30316:374;30697:583;;41880:42;;19795:5;41869:54;19772:3;19765:37;41880:42;19795:5;41869:54;31085:2;31074:9;31070:18;19765:37;;30921:2;31122;31111:9;31107:18;31100:48;31162:108;30921:2;30910:9;30906:18;31256:6;31162:108;;31287:435;41880:42;41869:54;;;19765:37;;41869:54;;;;31625:2;31610:18;;19765:37;31708:2;31693:18;;27910:37;;;;31461:2;31446:18;;31432:290;31729:535;41880:42;41869:54;;;19765:37;;41869:54;;;;32090:2;32075:18;;19765:37;32173:2;32158:18;;27910:37;41272:13;;41265:21;32250:2;32235:18;;22380:34;31925:3;31910:19;;31896:368;32271:381;;32449:2;;32438:9;32434:18;32449:2;32470:17;32463:47;32524:118;20898:5;38843:12;39910:6;39905:3;39898:19;39938:14;32438:9;39938:14;20910:98;;39938:14;32449:2;21065:6;21061:17;32438:9;21052:27;;21040:39;;32449:2;21155:5;38376:14;-1:-1;21194:345;21219:6;21216:1;21213:13;21194:345;;;21271:20;32438:9;21275:4;21271:20;;21266:3;21259:33;19448:60;19504:3;21326:6;21320:13;19448:60;;;21340:82;-1:-1;21518:14;;;;39518;;;;21241:1;21234:9;21194:345;;;-1:-1;32516:126;;32420:232;-1:-1;;;;;;;32420:232;32659:361;;32827:2;32848:17;32841:47;32902:108;32827:2;32816:9;32812:18;32996:6;32902:108;;33027:471;33219:2;33204:18;;42975:1;42965:12;;42955:2;;42981:9;42955:2;24234:68;;;33401:2;33386:18;;27910:37;;;;33484:2;33469:18;;;27910:37;33190:308;;33505:501;33712:2;33697:18;;43108:1;43098:12;;43088:2;;43114:9;34013:427;41785:2;41774:21;;;24582:36;;41774:21;;;;34343:2;34328:18;;24582:36;34426:2;34411:18;;27910:37;;;;34183:2;34168:18;;34154:286;34447:407;34638:2;34652:47;;;24855:2;34623:18;;;39898:19;24891:34;39938:14;;;24871:55;24960:7;24946:12;;;24939:29;24987:12;;;34609:245;34861:532;;35063:2;35084:17;35077:47;25314:63;35063:2;35052:9;35048:18;25291:16;25285:23;25314:63;;;25464:4;25457:5;25453:16;25447:23;25476:63;25524:14;35052:9;25524:14;25510:12;25476:63;;;;35063:2;25626:5;25622:16;25616:23;25645:63;25693:14;35052:9;25693:14;25679:12;25645:63;;;;25524:14;25789:5;25785:16;25779:23;25808:63;25856:14;35052:9;25856:14;25842:12;25808:63;;;;25693:14;25955:5;25951:16;25945:23;26022:14;35052:9;26022:14;27910:37;25856:14;26121:5;26117:16;26111:23;26188:14;35052:9;26188:14;27910:37;26022:14;26279:5;26275:16;26269:23;26346:14;26269:23;26346:14;35052:9;26346:14;27910:37;26188:14;26437:5;26433:16;26427:23;;;26504:14;26427:23;26504:14;35052:9;26504:14;27910:37;26346:14;26608:5;26604:18;26598:25;;;26677:16;;;26598:25;26677:16;35052:9;26677:16;27910:37;26504:14;26766:5;26762:18;26756:25;;;;26835:16;26756:25;26835:16;35052:9;26835:16;27910:37;26677:16;26934:5;26930:18;26924:25;26904:45;;25209:6;;;26969:16;25209:6;26969:16;35052:9;26969:16;26962:40;27017:67;25200:16;35052:9;25200:16;27065:12;27017:67;;;26835:16;27172:5;27168:18;27162:25;27142:45;;27225:14;;;27207:16;27225:14;35052:9;27229:4;27225:14;;27207:16;35052:9;27207:16;27200:40;27255:67;27317:4;27303:12;27255:67;;;26969:16;27413:5;27409:18;27403:25;27383:45;;27225:14;35052:9;27470:4;27466:14;;25209:6;35052:9;27448:16;27441:40;27496:67;27558:4;27544:12;27496:67;;;27488:75;;;27207:16;27654:5;27650:18;27644:25;27624:45;;;;;27225:14;35052:9;27711:4;27707:14;;27689:16;35052:9;27689:16;27682:40;;27737:67;27799:4;27785:12;27737:67;;;35286:9;35280:4;35276:20;25464:4;35260:9;35256:18;35249:48;35311:72;35378:4;35369:6;35311:72;;;35303:80;35034:359;-1:-1;;;;;;;35034:359;35400:213;27910:37;;;35518:2;35503:18;;35489:124;35620:472;;35816:2;35805:9;35801:18;27940:5;27917:3;27910:37;35816:2;35934;35923:9;35919:18;35912:48;35974:108;20158:5;38843:12;39910:6;39905:3;39898:19;39938:14;35805:9;39938:14;20170:93;;35934:2;20334:5;38376:14;20346:21;;-1:-1;20373:260;20398:6;20395:1;20392:13;20373:260;;;20459:13;;41880:42;41869:54;19765:37;;35934:2;39518:14;;;;19308;;;;20420:1;20413:9;20373:260;;;-1:-1;35966:116;;35787:305;-1:-1;;;;;;35787:305;36099:256;36161:2;36155:9;36187:17;;;36262:18;36247:34;;36283:22;;;36244:62;36241:2;;;36319:1;;36309:12;36241:2;36161;36328:22;36139:216;;-1:-1;36139:216;36362:304;;36521:18;36513:6;36510:30;36507:2;;;-1:-1;;36543:12;36507:2;-1:-1;36588:4;36576:17;;;36641:15;;36444:222;42505:268;42570:1;42577:101;42591:6;42588:1;42585:13;42577:101;;;42658:11;;;42652:18;42639:11;;;42632:39;42613:2;42606:10;42577:101;;;42693:6;42690:1;42687:13;42684:2;;;42570:1;42749:6;42744:3;42740:16;42733:27;42684:2;;42554:219;;;;43137:117;41880:42;43224:5;41869:54;43199:5;43196:35;43186:2;;43245:1;;43235:12;43186:2;43180:74;"
			}
		}
	},
	"sourceTreeHashHex": "0xed04301a726c96b8a7cd9d43fbc3bf6d60461cc0f241417cbf0c5d769a00971c",
	"sources": {
		"./ERC20BridgeSampler.sol": {
			"id": 2
		},
		"@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchangeFactory.sol": {
			"id": 16
		},
		"@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchange.sol": {
			"id": 15
		},
		"@0x/contracts-erc20/contracts/src/LibERC20Token.sol": {
			"id": 17
		},
		"@0x/contracts-utils/contracts/src/LibRichErrors.sol": {
			"id": 37
		},
		"@0x/contracts-utils/contracts/src/LibBytes.sol": {
			"id": 34
		},
		"@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": {
			"id": 35
		},
		"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": {
			"id": 18
		},
		"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": {
			"id": 22
		},
		"@0x/contracts-utils/contracts/src/LibEIP712.sol": {
			"id": 36
		},
		"@0x/contracts-exchange-libs/contracts/src/LibMath.sol": {
			"id": 20
		},
		"@0x/contracts-utils/contracts/src/LibSafeMath.sol": {
			"id": 38
		},
		"@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": {
			"id": 39
		},
		"@0x/contracts-exchange-libs/contracts/src/LibMathRichErrors.sol": {
			"id": 21
		},
		"@0x/contracts-utils/contracts/src/DeploymentConstants.sol": {
			"id": 33
		},
		"./IDevUtils.sol": {
			"id": 4
		},
		"./IERC20BridgeSampler.sol": {
			"id": 5
		},
		"./IEth2Dai.sol": {
			"id": 6
		},
		"./IKyberNetwork.sol": {
			"id": 7
		},
		"./IKyberNetworkProxy.sol": {
			"id": 8
		},
		"./IUniswapExchangeQuotes.sol": {
			"id": 12
		},
		"./ICurve.sol": {
			"id": 3
		},
		"./ILiquidityProvider.sol": {
			"id": 9
		},
		"./ILiquidityProviderRegistry.sol": {
			"id": 10
		},
		"./IUniswapV2Router01.sol": {
			"id": 13
		},
		"./IMultiBridge.sol": {
			"id": 11
		}
	},
	"sourceCodes": {
		"./ERC20BridgeSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchangeFactory.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"./IDevUtils.sol\";\nimport \"./IERC20BridgeSampler.sol\";\nimport \"./IEth2Dai.sol\";\nimport \"./IKyberNetwork.sol\";\nimport \"./IKyberNetworkProxy.sol\";\nimport \"./IUniswapExchangeQuotes.sol\";\nimport \"./ICurve.sol\";\nimport \"./ILiquidityProvider.sol\";\nimport \"./ILiquidityProviderRegistry.sol\";\nimport \"./IUniswapV2Router01.sol\";\nimport \"./IMultiBridge.sol\";\n\n\ncontract ERC20BridgeSampler is\n    IERC20BridgeSampler,\n    DeploymentConstants\n{\n    /// @dev Gas limit for DevUtils calls.\n    uint256 constant internal DEV_UTILS_CALL_GAS = 500e3; // 500k\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant internal KYBER_CALL_GAS = 1500e3; // 1.5m\n    /// @dev Gas limit for Uniswap calls.\n    uint256 constant internal UNISWAP_CALL_GAS = 150e3; // 150k\n    /// @dev Gas limit for UniswapV2 calls.\n    uint256 constant internal UNISWAPV2_CALL_GAS = 150e3; // 150k\n    /// @dev Base gas limit for Eth2Dai calls.\n    uint256 constant internal ETH2DAI_CALL_GAS = 1000e3; // 1m\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\n    uint256 constant internal CURVE_CALL_GAS = 600e3; // 600k\n    /// @dev Default gas limit for liquidity provider calls.\n    uint256 constant internal DEFAULT_CALL_GAS = 400e3; // 400k\n    /// @dev The Kyber Uniswap Reserve address\n    address constant internal KYBER_UNIWAP_RESERVE = 0x31E085Afd48a1d6e51Cc193153d625e8f0514C7F;\n    /// @dev The Kyber Eth2Dai Reserve address\n    address constant internal KYBER_ETH2DAI_RESERVE = 0x1E158c0e93c30d24e918Ef83d1e0bE23595C3c0f;\n\n    address private _devUtilsAddress;\n\n    constructor(address devUtilsAddress) public {\n        _devUtilsAddress = devUtilsAddress;\n    }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        view\n        returns (bytes[] memory callResults)\n    {\n        callResults = new bytes[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            (bool didSucceed, bytes memory resultData) = address(this).staticcall(callDatas[i]);\n            if (!didSucceed) {\n                assembly { revert(add(resultData, 0x20), mload(resultData)) }\n            }\n            callResults[i] = resultData;\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getOrderFillableTakerAssetAmounts(\n        LibOrder.Order[] memory orders,\n        bytes[] memory orderSignatures\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        address devUtilsAddress = _devUtilsAddress;\n        for (uint256 i = 0; i != orders.length; i++) {\n            // Ignore orders with no signature or empty maker/taker amounts.\n            if (orderSignatures[i].length == 0 ||\n                orders[i].makerAssetAmount == 0 ||\n                orders[i].takerAssetAmount == 0) {\n                orderFillableTakerAssetAmounts[i] = 0;\n                continue;\n            }\n            // solhint-disable indent\n            (bool didSucceed, bytes memory resultData) =\n                devUtilsAddress\n                    .staticcall\n                    .gas(DEV_UTILS_CALL_GAS)\n                    (abi.encodeWithSelector(\n                       IDevUtils(devUtilsAddress).getOrderRelevantState.selector,\n                       orders[i],\n                       orderSignatures[i]\n                    ));\n            // solhint-enable indent\n            if (!didSucceed) {\n                orderFillableTakerAssetAmounts[i] = 0;\n                continue;\n            }\n            (\n                LibOrder.OrderInfo memory orderInfo,\n                uint256 fillableTakerAssetAmount,\n                bool isValidSignature\n            ) = abi.decode(\n                resultData,\n                (LibOrder.OrderInfo, uint256, bool)\n            );\n            // The fillable amount is zero if the order is not fillable or if the\n            // signature is invalid.\n            if (orderInfo.orderStatus != LibOrder.OrderStatus.FILLABLE ||\n                !isValidSignature) {\n                orderFillableTakerAssetAmounts[i] = 0;\n            } else {\n                orderFillableTakerAssetAmounts[i] = fillableTakerAssetAmount;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getOrderFillableMakerAssetAmounts(\n        LibOrder.Order[] memory orders,\n        bytes[] memory orderSignatures\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMath.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAssetAmount,\n                    orders[i].makerAssetAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberNetwork(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        address wethAddress = _getWethAddress();\n        uint256 value;\n        address reserve;\n        for (uint256 i = 0; i < numSamples; i++) {\n            if (takerToken == wethAddress || makerToken == wethAddress) {\n                // Direct ETH based trade\n                (value, reserve) = _sampleSellFromKyberNetwork(takerToken, makerToken, takerTokenAmounts[i]);\n                // If this fills on an on-chain reserve we remove it as that can introduce collisions\n                if (reserve == KYBER_UNIWAP_RESERVE || reserve == KYBER_ETH2DAI_RESERVE) {\n                    value = 0;\n                }\n            } else {\n                // Hop to ETH\n                (value, reserve) = _sampleSellFromKyberNetwork(takerToken, wethAddress, takerTokenAmounts[i]);\n                if (value != 0) {\n                    address otherReserve;\n                    (value, otherReserve) = _sampleSellFromKyberNetwork(wethAddress, makerToken, value);\n                    // If this fills on Eth2Dai it is ok as we queried a different market\n                    // If this fills on Uniswap on both legs then this is a hard collision\n                    if (reserve == KYBER_UNIWAP_RESERVE && reserve == otherReserve) {\n                        value = 0;\n                    }\n                }\n            }\n            makerTokenAmounts[i] = value;\n        }\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @param opts `FakeBuyOptions` specifying target slippage and max iterations.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberNetwork(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts,\n        FakeBuyOptions memory opts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuysFromSource(\n            takerToken,\n            makerToken,\n            makerTokenAmounts,\n            opts,\n            this.sampleSellsFromKyberNetwork.selector,\n            address(0) // PLP registry address\n        );\n    }\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2Dai(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                _getEth2DaiAddress().staticcall.gas(ETH2DAI_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IEth2Dai(0).getBuyAmount.selector,\n                        makerToken,\n                        takerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            } else{\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis using a hop to an intermediate token.\n    ///      I.e WBTC/DAI via ETH or WBTC/ETH via DAI\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param intermediateToken Address of the token to hop to.\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2DaiHop(\n        address takerToken,\n        address makerToken,\n        address intermediateToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        if (makerToken == intermediateToken || takerToken == intermediateToken) {\n            return makerTokenAmounts;\n        }\n        uint256[] memory intermediateAmounts = sampleSellsFromEth2Dai(takerToken, intermediateToken, takerTokenAmounts);\n        makerTokenAmounts = sampleSellsFromEth2Dai(intermediateToken, makerToken, intermediateAmounts);\n    }\n\n    /// @dev Sample buy quotes from Eth2Dai/Oasis.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromEth2Dai(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                _getEth2DaiAddress().staticcall.gas(ETH2DAI_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IEth2Dai(0).getPayAmount.selector,\n                        takerToken,\n                        makerToken,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            } else {\n                break;\n            }\n            takerTokenAmounts[i] = sellAmount;\n        }\n    }\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == _getWethAddress()) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else if (takerToken == _getWethAddress()) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethBought;\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n                if (ethBought != 0) {\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(makerTokenExchange),\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\n                        ethBought\n                    );\n                } else {\n                    makerTokenAmounts[i] = 0;\n                }\n            }\n            if (!didSucceed) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == _getWethAddress()) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else if (takerToken == _getWethAddress()) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethSold;\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n                if (ethSold != 0) {\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(takerTokenExchange),\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\n                        ethSold\n                    );\n                } else {\n                    takerTokenAmounts[i] = 0;\n                }\n            }\n            if (!didSucceed) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveAddress Address of the Curve contract.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        address curveAddress,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        ICurve(0).get_dy_underlying.selector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            } else {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveAddress Address of the Curve contract.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        address curveAddress,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        ICurve(0).get_dx_underlying.selector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            } else {\n                break;\n            }\n            takerTokenAmounts[i] = sellAmount;\n        }\n    }\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param registryAddress Address of the liquidity provider registry contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProviderRegistry(\n        address registryAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // Query registry for provider address.\n        address providerAddress = getLiquidityProviderFromRegistry(\n            registryAddress,\n            takerToken,\n            makerToken\n        );\n        // If provider doesn't exist, return all zeros.\n        if (providerAddress == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                providerAddress.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        ILiquidityProvider(0).getSellQuote.selector,\n                        takerToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            } else {\n                // Exit early if the amount is too high for the liquidity provider to serve\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample sell quotes from MultiBridge.\n    /// @param multibridge Address of the MultiBridge contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMultiBridge(\n        address multibridge,\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // If no address provided, return all zeros.\n        if (multibridge == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                multibridge.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IMultiBridge(0).getSellQuote.selector,\n                        takerToken,\n                        intermediateToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            } else {\n                // Exit early if the amount is too high for the liquidity provider to serve\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param registryAddress Address of the liquidity provider registry contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @param opts `FakeBuyOptions` specifying target slippage and max iterations.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProviderRegistry(\n        address registryAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts,\n        FakeBuyOptions memory opts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuysFromSource(\n            takerToken,\n            makerToken,\n            makerTokenAmounts,\n            opts,\n            this.sampleSellsFromLiquidityProviderRegistry.selector,\n            registryAddress\n        );\n    }\n\n    /// @dev Returns the address of a liquidity provider for the given market\n    ///      (takerToken, makerToken), from a registry of liquidity providers.\n    ///      Returns address(0) if no such provider exists in the registry.\n    /// @param takerToken Taker asset managed by liquidity provider.\n    /// @param makerToken Maker asset managed by liquidity provider.\n    /// @return providerAddress Address of the liquidity provider.\n    function getLiquidityProviderFromRegistry(\n        address registryAddress,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (address providerAddress)\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            ILiquidityProviderRegistry(0).getLiquidityProviderForMarket.selector,\n            takerToken,\n            makerToken\n        );\n        (bool didSucceed, bytes memory returnData) = registryAddress.staticcall(callData);\n        if (didSucceed && returnData.length == 32) {\n            return LibBytes.readAddress(returnData, 12);\n        }\n    }\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                _getUniswapV2Router01Address().staticcall.gas(UNISWAPV2_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IUniswapV2Router01(0).getAmountsOut.selector,\n                        takerTokenAmounts[i],\n                        path\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                // solhint-disable-next-line indent\n                buyAmount = abi.decode(resultData, (uint256[]))[path.length - 1];\n            } else {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                _getUniswapV2Router01Address().staticcall.gas(UNISWAPV2_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IUniswapV2Router01(0).getAmountsIn.selector,\n                        makerTokenAmounts[i],\n                        path\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                // solhint-disable-next-line indent\n                sellAmount = abi.decode(resultData, (uint256[]))[0];\n            } else {\n                break;\n            }\n            takerTokenAmounts[i] = sellAmount;\n        }\n    }\n\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress)\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibERC20Token.decimals(tokenAddress);\n    }\n\n    /// @dev Gracefully calls a Uniswap pricing function.\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\n    /// @param functionSelector Selector of the target function.\n    /// @param inputAmount Quantity parameter particular to the pricing function.\n    /// @return outputAmount The returned amount from the function call. Will be\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\n    function _callUniswapExchangePriceFunction(\n        address uniswapExchangeAddress,\n        bytes4 functionSelector,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount, bool didSucceed)\n    {\n        if (uniswapExchangeAddress == address(0)) {\n            return (outputAmount, didSucceed);\n        }\n        bytes memory resultData;\n        (didSucceed, resultData) =\n            uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\n                abi.encodeWithSelector(\n                    functionSelector,\n                    inputAmount\n                ));\n        if (didSucceed) {\n            outputAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Retrive an existing Uniswap exchange contract.\n    ///      Throws if the exchange does not exist.\n    /// @param tokenAddress Address of the token contract.\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\n    function _getUniswapExchange(address tokenAddress)\n        private\n        view\n        returns (IUniswapExchangeQuotes exchange)\n    {\n        exchange = IUniswapExchangeQuotes(\n            address(IUniswapExchangeFactory(_getUniswapExchangeFactoryAddress())\n            .getExchange(tokenAddress))\n        );\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        private\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n\n    function _sampleSellForApproximateBuy(\n        address takerToken,\n        address makerToken,\n        uint256 takerTokenAmount,\n        bytes4 selector,\n        address plpRegistryAddress\n    )\n        private\n        view\n        returns (uint256 makerTokenAmount)\n    {\n        bytes memory callData;\n        uint256[] memory tmpTakerAmounts = new uint256[](1);\n        tmpTakerAmounts[0] = takerTokenAmount;\n        if (selector == this.sampleSellsFromKyberNetwork.selector) {\n            callData = abi.encodeWithSelector(\n                this.sampleSellsFromKyberNetwork.selector,\n                takerToken,\n                makerToken,\n                tmpTakerAmounts\n            );\n        } else {\n            callData = abi.encodeWithSelector(\n                this.sampleSellsFromLiquidityProviderRegistry.selector,\n                plpRegistryAddress,\n                takerToken,\n                makerToken,\n                tmpTakerAmounts\n            );\n        }\n        (bool success, bytes memory resultData) = address(this).staticcall(callData);\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable indent\n        makerTokenAmount = abi.decode(resultData, (uint256[]))[0];\n    }\n\n    function _sampleApproximateBuysFromSource(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts,\n        FakeBuyOptions memory opts,\n        bytes4 selector,\n        address plpRegistryAddress\n    )\n        private\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        if (makerTokenAmounts.length == 0) {\n            return takerTokenAmounts;\n        }\n        uint256 sellAmount;\n        uint256 buyAmount;\n        uint256 slippageFromTarget;\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        sellAmount = _sampleSellForApproximateBuy(\n            makerToken,\n            takerToken,\n            makerTokenAmounts[0],\n            selector,\n            plpRegistryAddress\n        );\n\n        if (sellAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        buyAmount = _sampleSellForApproximateBuy(\n            takerToken,\n            makerToken,\n            sellAmount,\n            selector,\n            plpRegistryAddress\n        );\n        if (buyAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            for (uint256 iter = 0; iter < opts.maxIterations; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmount = LibMath.getPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmount,\n                    sellAmount\n                );\n                sellAmount = LibMath.getPartialAmountCeil(\n                    (10000 + opts.targetSlippageBps),\n                    10000,\n                    sellAmount\n                );\n                uint256 _buyAmount = _sampleSellForApproximateBuy(\n                    takerToken,\n                    makerToken,\n                    sellAmount,\n                    selector,\n                    plpRegistryAddress\n                );\n                if (_buyAmount == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmount = _buyAmount;\n                // If we've reached our goal, exit early\n                if (buyAmount >= makerTokenAmounts[i]) {\n                    uint256 slippageFromTarget = (buyAmount - makerTokenAmounts[i]) * 10000 /\n                                                makerTokenAmounts[i];\n                    if (slippageFromTarget <= opts.targetSlippageBps) {\n                        break;\n                    }\n                }\n            }\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = LibMath.getPartialAmountCeil(\n                makerTokenAmounts[i],\n                buyAmount,\n                sellAmount\n            );\n        }\n    }\n\n    function _sampleSellFromKyberNetwork(\n        address takerToken,\n        address makerToken,\n        uint256 takerTokenAmount\n    )\n        private\n        view\n        returns (uint256 makerTokenAmount, address reserve)\n    {\n        address _takerToken = takerToken == _getWethAddress() ? KYBER_ETH_ADDRESS : takerToken;\n        address _makerToken = makerToken == _getWethAddress() ? KYBER_ETH_ADDRESS : makerToken;\n        uint256 takerTokenDecimals = _getTokenDecimals(takerToken);\n        uint256 makerTokenDecimals = _getTokenDecimals(makerToken);\n        (bool didSucceed, bytes memory resultData) = _getKyberNetworkProxyAddress().staticcall.gas(DEFAULT_CALL_GAS)(\n            abi.encodeWithSelector(\n                IKyberNetworkProxy(0).kyberNetworkContract.selector\n            ));\n        if (!didSucceed) {\n            return (0, address(0));\n        }\n        address kyberNetworkContract = abi.decode(resultData, (address));\n        (didSucceed, resultData) =\n            kyberNetworkContract.staticcall.gas(KYBER_CALL_GAS)(\n                abi.encodeWithSelector(\n                    IKyberNetwork(0).searchBestRate.selector,\n                    _takerToken,\n                    _makerToken,\n                    takerTokenAmount,\n                    false // usePermissionless\n                ));\n        uint256 rate = 0;\n        address reserve;\n        if (didSucceed) {\n            (reserve, rate) = abi.decode(resultData, (address, uint256));\n        } else {\n            return (0, address(0));\n        }\n        makerTokenAmount =\n            rate *\n            takerTokenAmount *\n            10 ** makerTokenDecimals /\n            10 ** takerTokenDecimals /\n            10 ** 18;\n\n        return (makerTokenAmount, reserve);\n    }\n}\n",
		"@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchangeFactory.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./IUniswapExchange.sol\";\n\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address);\n}\n",
		"@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchange.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IUniswapExchange {\n\n    /// @dev Buys at least `minTokensBought` tokens with ETH and transfer them\n    ///      to `recipient`.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @return tokensBought Amount of tokens bought.\n    function ethToTokenTransferInput(\n        uint256 minTokensBought,\n        uint256 deadline,\n        address recipient\n    )\n        external\n        payable\n        returns (uint256 tokensBought);\n\n    /// @dev Buys at least `minEthBought` ETH with tokens.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minEthBought The minimum amount of ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @return ethBought Amount of tokens bought.\n    function tokenToEthSwapInput(\n        uint256 tokensSold,\n        uint256 minEthBought,\n        uint256 deadline\n    )\n        external\n        returns (uint256 ethBought);\n\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token\n    ///      and transfer them to `recipient`.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @param toTokenAddress The token being bought.\n    /// @return tokensBought Amount of tokens bought.\n    function tokenToTokenTransferInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        address recipient,\n        address toTokenAddress\n    )\n        external\n        returns (uint256 tokensBought);\n}\n",
		"@0x/contracts-erc20/contracts/src/LibERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"../src/interfaces/IERC20Token.sol\";\n\n\nlibrary LibERC20Token {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20Token(token).approve()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function approve(\n        address token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        address token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (IERC20Token(token).allowance(address(this), spender) < amount) {\n            approve(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20Token(token).transfer()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transfer(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).transferFrom()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function decimals(address token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = token.staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length == 32) {\n            tokenDecimals = uint8(LibBytes.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance The allowance for a token, owner, and spender.\n    function allowance(address token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            allowance_ = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function balanceOf(address token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            balance = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed) {\n            if (resultData.length == 0) {\n                return;\n            }\n            if (resultData.length == 32) {\n                uint256 result = LibBytes.readUint256(resultData, 0);\n                if (result == 1) {\n                    return;\n                }\n            }\n        }\n        LibRichErrors.rrevert(resultData);\n    }\n}\n",
		"@0x/contracts-utils/contracts/src/LibRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
		"@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./LibBytesRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
		"@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibBytesRichErrors {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
		"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n}\n",
		"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\nlibrary LibOrder {\n\n    using LibOrder for Order;\n\n    // Hash for the EIP712 Order Schema:\n    // keccak256(abi.encodePacked(\n    //     \"Order(\",\n    //     \"address makerAddress,\",\n    //     \"address takerAddress,\",\n    //     \"address feeRecipientAddress,\",\n    //     \"address senderAddress,\",\n    //     \"uint256 makerAssetAmount,\",\n    //     \"uint256 takerAssetAmount,\",\n    //     \"uint256 makerFee,\",\n    //     \"uint256 takerFee,\",\n    //     \"uint256 expirationTimeSeconds,\",\n    //     \"uint256 salt,\",\n    //     \"bytes makerAssetData,\",\n    //     \"bytes takerAssetData,\",\n    //     \"bytes makerFeeAssetData,\",\n    //     \"bytes takerFeeAssetData\",\n    //     \")\"\n    // ))\n    bytes32 constant internal _EIP712_ORDER_SCHEMA_HASH =\n        0xf80322eb8376aafb64eadf8f0d7623f22130fd9491a221e902b713cb984a7534;\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's status is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    /// @dev Canonical order structure.\n    struct Order {\n        address makerAddress;           // Address that created the order.\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 makerFee;               // Fee paid to feeRecipient by maker when order is filled.\n        uint256 takerFee;               // Fee paid to feeRecipient by taker when order is filled.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes makerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring makerFeeAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring takerFeeAsset. The leading bytes4 references the id of the asset proxy.\n    }\n    // solhint-enable max-line-length\n\n    /// @dev Order information returned by `getOrderInfo()`.\n    struct OrderInfo {\n        OrderStatus orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 typed data hash of the order (see LibOrder.getTypedDataHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates the EIP712 typed data hash of an order with a given domain separator.\n    /// @param order The order structure.\n    /// @return EIP712 typed data hash of the order.\n    function getTypedDataHash(Order memory order, bytes32 eip712ExchangeDomainHash)\n        internal\n        pure\n        returns (bytes32 orderHash)\n    {\n        orderHash = LibEIP712.hashEIP712Message(\n            eip712ExchangeDomainHash,\n            order.getStructHash()\n        );\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order struct.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order struct.\n    function getStructHash(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_ORDER_SCHEMA_HASH;\n        bytes memory makerAssetData = order.makerAssetData;\n        bytes memory takerAssetData = order.takerAssetData;\n        bytes memory makerFeeAssetData = order.makerFeeAssetData;\n        bytes memory takerFeeAssetData = order.takerFeeAssetData;\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     uint256(order.makerAddress),\n        //     uint256(order.takerAddress),\n        //     uint256(order.feeRecipientAddress),\n        //     uint256(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData),\n        //     keccak256(order.makerFeeAssetData),\n        //     keccak256(order.takerFeeAssetData)\n        // ));\n\n        assembly {\n            // Assert order offset (this is an internal error that should never be triggered)\n            if lt(order, 32) {\n                invalid()\n            }\n\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n            let pos4 := add(order, 384)\n            let pos5 := add(order, 416)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n            let temp4 := mload(pos4)\n            let temp5 := mload(pos5)\n\n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, keccak256(add(makerAssetData, 32), mload(makerAssetData)))        // store hash of makerAssetData\n            mstore(pos3, keccak256(add(takerAssetData, 32), mload(takerAssetData)))        // store hash of takerAssetData\n            mstore(pos4, keccak256(add(makerFeeAssetData, 32), mload(makerFeeAssetData)))  // store hash of makerFeeAssetData\n            mstore(pos5, keccak256(add(takerFeeAssetData, 32), mload(takerFeeAssetData)))  // store hash of takerFeeAssetData\n            result := keccak256(pos1, 480)\n\n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n            mstore(pos4, temp4)\n            mstore(pos5, temp5)\n        }\n        return result;\n    }\n}\n",
		"@0x/contracts-utils/contracts/src/LibEIP712.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibEIP712 {\n\n    // Hash of the EIP712 Domain Separator Schema\n    // keccak256(abi.encodePacked(\n    //     \"EIP712Domain(\",\n    //     \"string name,\",\n    //     \"string version,\",\n    //     \"uint256 chainId,\",\n    //     \"address verifyingContract\",\n    //     \")\"\n    // ))\n    bytes32 constant internal _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\n\n    /// @dev Calculates a EIP712 domain separator.\n    /// @param name The EIP712 domain name.\n    /// @param version The EIP712 domain version.\n    /// @param verifyingContract The EIP712 verifying contract.\n    /// @return EIP712 domain separator.\n    function hashEIP712Domain(\n        string memory name,\n        string memory version,\n        uint256 chainId,\n        address verifyingContract\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH;\n\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n        //     keccak256(bytes(name)),\n        //     keccak256(bytes(version)),\n        //     chainId,\n        //     uint256(verifyingContract)\n        // ))\n\n        assembly {\n            // Calculate hashes of dynamic data\n            let nameHash := keccak256(add(name, 32), mload(name))\n            let versionHash := keccak256(add(version, 32), mload(version))\n\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            // Store params in memory\n            mstore(memPtr, schemaHash)\n            mstore(add(memPtr, 32), nameHash)\n            mstore(add(memPtr, 64), versionHash)\n            mstore(add(memPtr, 96), chainId)\n            mstore(add(memPtr, 128), verifyingContract)\n\n            // Compute hash\n            result := keccak256(memPtr, 160)\n        }\n        return result;\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct with a given domain hash.\n    /// @param eip712DomainHash Hash of the domain domain separator data, computed\n    ///                         with getDomainHash().\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to the given EIP712 Domain.\n    function hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct\n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n",
		"@0x/contracts-exchange-libs/contracts/src/LibMath.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"./LibMathRichErrors.sol\";\n\n\nlibrary LibMath {\n\n    using LibSafeMath for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
		"@0x/contracts-utils/contracts/src/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\nimport \"./LibRichErrors.sol\";\nimport \"./LibSafeMathRichErrors.sol\";\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
		"@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMathRichErrors {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
		"@0x/contracts-exchange-libs/contracts/src/LibMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibMathRichErrors {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
		"@0x/contracts-utils/contracts/src/DeploymentConstants.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract DeploymentConstants {\n    /// @dev Mainnet address of the WETH contract.\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    // /// @dev Kovan address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    /// @dev Mainnet address of the KyberNetworkProxy contract.\n    address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\n    // /// @dev Kovan address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\n    /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\n    // /// @dev Kovan address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xD3E51Ef092B2845f10401a0159B2B96e8B6c3D30;\n    /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Kovan address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    address constant private ETH2DAI_ADDRESS = 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\n    // /// @dev Kovan address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = 0xe325acB9765b02b8b418199bf9650972299235F4;\n    /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x8ED95d1746bf1E4dAb58d8ED4724f1Ef95B20Db0;\n    // /// @dev Kovan address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xFb2DD2A1366dE37f7241C83d47DA58fd503E2C64;\n    ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    address constant private DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    // ///@dev Kovan address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\n    /// @dev Mainnet address of the `Chai` contract\n    address constant private CHAI_ADDRESS = 0x06AF07097C9Eeb7fD685c692751D5C66dB49c215;\n    /// @dev Mainnet address of the 0x DevUtils contract.\n    address constant private DEV_UTILS_ADDRESS = 0x74134CF88b21383713E096a5ecF59e297dc7f547;\n    // /// @dev Kovan address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0x9402639A828BdF4E9e4103ac3B69E1a6E522eB59;\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev Mainnet address of the dYdX contract.\n    address constant private DYDX_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n    /// @dev Mainnet address of the GST2 contract\n    address constant private GST_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\n    /// @dev Mainnet address of the GST Collector\n    address constant private GST_COLLECTOR_ADDRESS = 0x000000D3b08566BE75A6DB803C03C85C0c1c5B96;\n    // /// @dev Kovan address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n\n    /// @dev Overridable way to get the `KyberNetworkProxy` address.\n    /// @return kyberAddress The `IKyberNetworkProxy` address.\n    function _getKyberNetworkProxyAddress()\n        internal\n        view\n        returns (address kyberAddress)\n    {\n        return KYBER_NETWORK_PROXY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the WETH address.\n    /// @return wethAddress The WETH address.\n    function _getWethAddress()\n        internal\n        view\n        returns (address wethAddress)\n    {\n        return WETH_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapExchangeFactory` address.\n    /// @return uniswapAddress The `UniswapExchangeFactory` address.\n    function _getUniswapExchangeFactoryAddress()\n        internal\n        view\n        returns (address uniswapAddress)\n    {\n        return UNISWAP_EXCHANGE_FACTORY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapV2Router01` address.\n    /// @return uniswapRouterAddress The `UniswapV2Router01` address.\n    function _getUniswapV2Router01Address()\n        internal\n        view\n        returns (address uniswapRouterAddress)\n    {\n        return UNISWAP_V2_ROUTER_01_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the Eth2Dai `MatchingMarket` contract.\n    /// @return eth2daiAddress The Eth2Dai `MatchingMarket` contract.\n    function _getEth2DaiAddress()\n        internal\n        view\n        returns (address eth2daiAddress)\n    {\n        return ETH2DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `ERC20BridgeProxy` contract.\n    /// @return erc20BridgeProxyAddress The `ERC20BridgeProxy` contract.\n    function _getERC20BridgeProxyAddress()\n        internal\n        view\n        returns (address erc20BridgeProxyAddress)\n    {\n        return ERC20_BRIDGE_PROXY_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Dai` contract.\n    /// @return daiAddress The `Dai` contract.\n    function _getDaiAddress()\n        internal\n        view\n        returns (address daiAddress)\n    {\n        return DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Chai` contract.\n    /// @return chaiAddress The `Chai` contract.\n    function _getChaiAddress()\n        internal\n        view\n        returns (address chaiAddress)\n    {\n        return CHAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the 0x `DevUtils` contract address.\n    /// @return devUtils The 0x `DevUtils` contract address.\n    function _getDevUtilsAddress()\n        internal\n        view\n        returns (address devUtils)\n    {\n        return DEV_UTILS_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the DyDx contract.\n    /// @return exchange The DyDx exchange contract.\n    function _getDydxAddress()\n        internal\n        view\n        returns (address dydxAddress)\n    {\n        return DYDX_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST2 contract address.\n    /// @return gst The GST contract.\n    function _getGstAddress()\n        internal\n        view\n        returns (address gst)\n    {\n        return GST_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST Collector address.\n    /// @return collector The GST collector address.\n    function _getGstCollectorAddress()\n        internal\n        view\n        returns (address collector)\n    {\n        return GST_COLLECTOR_ADDRESS;\n    }\n}\n",
		"./IDevUtils.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\n\n\ninterface IDevUtils {\n\n    /// @dev Fetches all order-relevant information needed to validate if the supplied order is fillable.\n    /// @param order The order structure.\n    /// @param signature Signature provided by maker that proves the order's authenticity.\n    /// `0x01` can always be provided if the signature does not need to be validated.\n    /// @return The orderInfo (hash, status, and `takerAssetAmount` already filled for the given order),\n    /// fillableTakerAssetAmount (amount of the order's `takerAssetAmount` that is fillable given all on-chain state),\n    /// and isValidSignature (validity of the provided signature).\n    /// NOTE: If the `takerAssetData` encodes data for multiple assets, `fillableTakerAssetAmount` will represent a \"scaled\"\n    /// amount, meaning it must be multiplied by all the individual asset amounts within the `takerAssetData` to get the final\n    /// amount of each asset that can be filled.\n    function getOrderRelevantState(LibOrder.Order calldata order, bytes calldata signature)\n        external\n        view\n        returns (\n            LibOrder.OrderInfo memory orderInfo,\n            uint256 fillableTakerAssetAmount,\n            bool isValidSignature\n        );\n}\n",
		"./IERC20BridgeSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\n\n\ninterface IERC20BridgeSampler {\n\n    struct FakeBuyOptions {\n        uint256 targetSlippageBps;\n        uint256 maxIterations;\n    }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        view\n        returns (bytes[] memory callResults);\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getOrderFillableTakerAssetAmounts(\n        LibOrder.Order[] calldata orders,\n        bytes[] calldata orderSignatures\n    )\n        external\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts);\n\n    /// @dev Queries the fillable maker asset amounts of native orders.\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getOrderFillableMakerAssetAmounts(\n        LibOrder.Order[] calldata orders,\n        bytes[] calldata orderSignatures\n    )\n        external\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts);\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberNetwork(\n        address takerToken,\n        address makerToken,\n        uint256[] calldata takerTokenAmounts\n    )\n        external\n        view\n        returns (uint256[] memory makerTokenAmounts);\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @param opts `FakeBuyOptions` specifying target slippage and max iterations.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberNetwork(\n        address takerToken,\n        address makerToken,\n        uint256[] calldata makerTokenAmounts,\n        FakeBuyOptions calldata opts\n    )\n        external\n        view\n        returns (uint256[] memory takerTokenAmounts);\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2Dai(\n        address takerToken,\n        address makerToken,\n        uint256[] calldata takerTokenAmounts\n    )\n        external\n        view\n        returns (uint256[] memory makerTokenAmounts);\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address takerToken,\n        address makerToken,\n        uint256[] calldata takerTokenAmounts\n    )\n        external\n        view\n        returns (uint256[] memory makerTokenAmounts);\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address takerToken,\n        address makerToken,\n        uint256[] calldata makerTokenAmounts\n    )\n        external\n        view\n        returns (uint256[] memory takerTokenAmounts);\n\n    /// @dev Sample buy quotes from Eth2Dai/Oasis.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromEth2Dai(\n        address takerToken,\n        address makerToken,\n        uint256[] calldata makerTokenAmounts\n    )\n        external\n        view\n        returns (uint256[] memory takerTokenAmounts);\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveAddress Address of the Curve contract.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        address curveAddress,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] calldata takerTokenAmounts\n    )\n        external\n        view\n        returns (uint256[] memory makerTokenAmounts);\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveAddress Address of the Curve contract.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        address curveAddress,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] calldata makerTokenAmounts\n    )\n        external\n        view\n        returns (uint256[] memory takerTokenAmounts);\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param registryAddress Address of the liquidity provider registry contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProviderRegistry(\n        address registryAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] calldata takerTokenAmounts\n    )\n        external\n        view\n        returns (uint256[] memory makerTokenAmounts);\n\n    /// @dev Sample sell quotes from MultiBridge.\n    /// @param multibridge Address of the MultiBridge contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMultiBridge(\n        address multibridge,\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256[] calldata takerTokenAmounts\n    )\n        external\n        view\n        returns (uint256[] memory makerTokenAmounts);\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param registryAddress Address of the liquidity provider registry contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @param opts `FakeBuyOptions` specifying target slippage and max iterations.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProviderRegistry(\n        address registryAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] calldata makerTokenAmounts,\n        FakeBuyOptions calldata opts\n\n    )\n        external\n        view\n        returns (uint256[] memory takerTokenAmounts);\n\n    /// @dev Returns the address of a liquidity provider for the given market\n    ///      (takerToken, makerToken), from a registry of liquidity providers.\n    ///      Returns address(0) if no such provider exists in the registry.\n    /// @param takerToken Taker asset managed by liquidity provider.\n    /// @param makerToken Maker asset managed by liquidity provider.\n    /// @return providerAddress Address of the liquidity provider.\n    function getLiquidityProviderFromRegistry(\n        address registryAddress,\n        address takerToken,\n        address makerToken\n    )\n        external\n        view\n        returns (address providerAddress);\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param path Token route.\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address[] calldata path,\n        uint256[] calldata takerTokenAmounts\n    )\n        external\n        view\n        returns (uint256[] memory makerTokenAmounts);\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param path Token route.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address[] calldata path,\n        uint256[] calldata makerTokenAmounts\n    )\n        external\n        view\n        returns (uint256[] memory takerTokenAmounts);\n}\n",
		"./IEth2Dai.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IEth2Dai {\n\n    function getBuyAmount(\n        address buyToken,\n        address payToken,\n        uint256 payAmount\n    )\n        external\n        view\n        returns (uint256 buyAmount);\n\n    function getPayAmount(\n        address payToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 payAmount);\n}\n",
		"./IKyberNetwork.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IKyberNetwork {\n\n    function searchBestRate(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount,\n        bool usePermissionless\n    )\n        external\n        view\n        returns (address reserve, uint256 expectedRate);\n}\n",
		"./IKyberNetworkProxy.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IKyberNetworkProxy {\n\n    function kyberNetworkContract() external view returns (address);\n\n    function getExpectedRate(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount\n    )\n        external\n        view\n        returns (uint256 expectedRate, uint256 slippageRate);\n}\n",
		"./IUniswapExchangeQuotes.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IUniswapExchangeQuotes {\n\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought);\n\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold);\n\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought);\n\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold);\n}\n",
		"./ICurve.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on early versions of Curve (USDC/DAI)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    /// @param deadline The time in seconds when this operation should expire.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount,\n        uint256 deadline\n    )\n        external;\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(\n        int128 i,\n        int128 j,\n        uint256 buyAmount\n    )\n        external\n        returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(\n        int128 i\n    )\n        external\n        returns (address tokenAddress);\n}\n",
		"./ILiquidityProvider.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface ILiquidityProvider {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n\n    /// @dev Quotes the amount of `takerToken` that would need to be sold in\n    ///      order to obtain `buyAmount` of `makerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param buyAmount Amount of `makerToken` to buy.\n    /// @return takerTokenAmount Amount of `takerToken` that would need to be sold.\n    function getBuyQuote(\n        address takerToken,\n        address makerToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 takerTokenAmount);\n}\n",
		"./ILiquidityProviderRegistry.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface ILiquidityProviderRegistry {\n\n    /// @dev Returns the address of a liquidity provider for the given market\n    ///      (takerToken, makerToken), reverting if the pool does not exist.\n    /// @param takerToken Taker asset managed by liquidity provider.\n    /// @param makerToken Maker asset managed by liquidity provider.\n    /// @return Address of the liquidity provider.\n    function getLiquidityProviderForMarket(\n        address takerToken,\n        address makerToken\n    )\n        external\n        view\n        returns (address providerAddress);\n}\n",
		"./IUniswapV2Router01.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n",
		"./IMultiBridge.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IMultiBridge {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n}\n"
	},
	"compiler": {
		"name": "solc",
		"version": "0.5.17+commit.d19bba13",
		"settings": {
			"remappings": [
				"@0x/contracts-asset-proxy=/Users/xianny/src/0x-monorepo/contracts/erc20-bridge-sampler/node_modules/@0x/contracts-asset-proxy",
				"@0x/contracts-erc20=/Users/xianny/src/0x-monorepo/contracts/erc20-bridge-sampler/node_modules/@0x/contracts-erc20",
				"@0x/contracts-utils=/Users/xianny/src/0x-monorepo/contracts/erc20-bridge-sampler/node_modules/@0x/contracts-utils",
				"@0x/contracts-exchange-libs=/Users/xianny/src/0x-monorepo/contracts/erc20-bridge-sampler/node_modules/@0x/contracts-exchange-libs",
				"@0x/contracts-exchange=/Users/xianny/src/0x-monorepo/contracts/erc20-bridge-sampler/node_modules/@0x/contracts-exchange"
			],
			"optimizer": {
				"enabled": true,
				"runs": 1000000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "istanbul"
		}
	},
	"chains": {}
}