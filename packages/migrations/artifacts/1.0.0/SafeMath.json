{
    "schemaVersion": "2.0.0",
    "contractName": "SafeMath",
    "compilerOutput": {
        "abi": [],
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "6080604052348015600f57600080fd5b50603580601d6000396000f3006080604052600080fd00a165627a7a72305820ff68e0bbf7f1ef50b2b7924d684501ddb14e85508604daa072107458b8fe439a0029",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x35 DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 SELFDESTRUCT PUSH9 0xE0BBF7F1EF50B2B792 0x4d PUSH9 0x4501DDB14E85508604 0xda LOG0 PUSH19 0x107458B8FE439A002900000000000000000000 ",
                "sourceMap": "26:1238:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26:1238:0;;;;;;;"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "6080604052600080fd00a165627a7a72305820ff68e0bbf7f1ef50b2b7924d684501ddb14e85508604daa072107458b8fe439a0029",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 SELFDESTRUCT PUSH9 0xE0BBF7F1EF50B2B792 0x4d PUSH9 0x4501DDB14E85508604 0xda LOG0 PUSH19 0x107458B8FE439A002900000000000000000000 ",
                "sourceMap": "26:1238:0:-;;;;;"
            }
        }
    },
    "sources": {
        "current/utils/SafeMath/SafeMath.sol": {
            "id": 0
        }
    },
    "sourceCodes": {
        "current/utils/SafeMath/SafeMath.sol": "pragma solidity ^0.4.18;\n\ncontract SafeMath {\n    function safeMul(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint c = a / b;\n        return c;\n    }\n\n    function safeSub(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n"
    },
    "sourceTreeHashHex": "0xb1d52f567a893c86f452bd80fbb6907d992046a31b35830bc779116d23fd5549",
    "compiler": {
        "name": "solc",
        "version": "0.4.23",
        "settings": {
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            }
        }
    },
    "networks": {}
}