{
	"schemaVersion": "2.0.0",
	"contractName": "TestAssetProxyDispatcher",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "uint8"
					}
				],
				"name": "assetProxies",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "assetProxyId",
						"type": "uint8"
					},
					{
						"name": "newAssetProxy",
						"type": "address"
					},
					{
						"name": "oldAssetProxy",
						"type": "address"
					}
				],
				"name": "registerAssetProxy",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "assetProxyId",
						"type": "uint8"
					}
				],
				"name": "getAssetProxy",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "assetData",
						"type": "bytes"
					},
					{
						"name": "assetProxyId",
						"type": "uint8"
					},
					{
						"name": "from",
						"type": "address"
					},
					{
						"name": "to",
						"type": "address"
					},
					{
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "publicDispatchTransferFrom",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "id",
						"type": "uint8"
					},
					{
						"indexed": false,
						"name": "newAssetProxy",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "oldAssetProxy",
						"type": "address"
					}
				],
				"name": "AssetProxySet",
				"type": "event"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405260008054600160a060020a03191633179055610b32806100256000396000f3006080604052600436106100775763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166338077164811461007c5780635c78d0c7146100b25780638da5cb5b146100d457806392c1421e146100f6578063a5fba6a414610116578063f2fde38b14610136575b600080fd5b34801561008857600080fd5b5061009c610097366004610856565b610156565b6040516100a9919061099f565b60405180910390f35b3480156100be57600080fd5b506100d26100cd366004610892565b61017e565b005b3480156100e057600080fd5b506100e9610446565b6040516100a9919061098b565b34801561010257600080fd5b506100e9610111366004610856565b610462565b34801561012257600080fd5b506100d26101313660046107ca565b61048d565b34801561014257600080fd5b506100d26101513660046107a4565b6104a1565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b600080548190819073ffffffffffffffffffffffffffffffffffffffff1633146101dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d4906109be565b60405180910390fd5b60ff8616600090815260016020908152604091829020548251808401909352601483527f41535345545f50524f58595f4d49534d415443480000000000000000000000009183019190915273ffffffffffffffffffffffffffffffffffffffff90811694508516841461027d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d491906109ad565b5084915073ffffffffffffffffffffffffffffffffffffffff8216156103b2578173ffffffffffffffffffffffffffffffffffffffff1663ae25532e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561030157600080fd5b505af1158015610315573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103399190810190610874565b60408051808201909152601781527f41535345545f50524f58595f49445f4d49534d41544348000000000000000000602082015290915060ff808316908816146103b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d491906109ad565b505b60ff86166000908152600160205260409081902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516179055517f27ef5f484e50f2daf7c2d82c60fe4ce409009541176eb64095beac369db1d26090610436908890889088906109ce565b60405180910390a1505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60ff1660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b61049a8585858585610552565b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d4906109be565b73ffffffffffffffffffffffffffffffffffffffff81161561054f57600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790555b50565b60008060008084111561070f5760ff8716600090815260016020908152604091829020548251808401909352601a83527f41535345545f50524f58595f444f45535f4e4f545f45584953540000000000009183019190915273ffffffffffffffffffffffffffffffffffffffff1693508315156105fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d491906109ad565b5060405188517fa85e59e4000000000000000000000000000000000000000000000000000000008083526080600484015273ffffffffffffffffffffffffffffffffffffffff898116602485015288166044840152606483018790529350603f01660fffffffffffe01680820160849081019083015b8181101561068a578b51815260209b8c019b01610672565b6000848584038660008b5af1945050505050806040805190810160405280600f81526020017f5452414e534645525f4641494c4544000000000000000000000000000000000081525090151561070d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d491906109ad565b505b5050505050505050565b60006107258235610a67565b9392505050565b6000601f8201831361073d57600080fd5b813561075061074b82610a1d565b6109f6565b9150808252602083016020830185838301111561076c57600080fd5b610777838284610a94565b50505092915050565b60006107258235610a86565b60006107258235610a80565b60006107258251610a80565b6000602082840312156107b657600080fd5b60006107c28484610719565b949350505050565b600080600080600060a086880312156107e257600080fd5b853567ffffffffffffffff8111156107f957600080fd5b6108058882890161072c565b95505060206108168882890161078c565b945050604061082788828901610719565b935050606061083888828901610719565b925050608061084988828901610780565b9150509295509295909350565b60006020828403121561086857600080fd5b60006107c2848461078c565b60006020828403121561088657600080fd5b60006107c28484610798565b6000806000606084860312156108a757600080fd5b60006108b3868661078c565b93505060206108c486828701610719565b92505060406108d586828701610719565b9150509250925092565b6108e881610a67565b82525050565b6108e881610a89565b600061090282610a63565b808452610916816020860160208601610aa0565b61091f81610ad0565b9093016020019392505050565b603381527f4f6e6c7920636f6e7472616374206f776e657220697320616c6c6f776564207460208201527f6f2063616c6c2074686973206d6574686f642e00000000000000000000000000604082015260600190565b6108e881610a80565b6020810161099982846108df565b92915050565b6020810161099982846108ee565b6020808252810161072581846108f7565b602080825281016109998161092c565b606081016109dc8286610982565b6109e960208301856108df565b6107c260408301846108df565b60405181810167ffffffffffffffff81118282101715610a1557600080fd5b604052919050565b600067ffffffffffffffff821115610a3457600080fd5b506020601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b5190565b73ffffffffffffffffffffffffffffffffffffffff1690565b60ff1690565b90565b600061099982610a67565b82818337506000910152565b60005b83811015610abb578181015183820152602001610aa3565b83811115610aca576000848401525b50505050565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016905600a265627a7a723058209522a116cc83a0228ea0562d36ea0be254e6281b3b3c15942339ee14d4e222da6c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0xB32 DUP1 PUSH2 0x25 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x77 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x38077164 DUP2 EQ PUSH2 0x7C JUMPI DUP1 PUSH4 0x5C78D0C7 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x92C1421E EQ PUSH2 0xF6 JUMPI DUP1 PUSH4 0xA5FBA6A4 EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x136 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9C PUSH2 0x97 CALLDATASIZE PUSH1 0x4 PUSH2 0x856 JUMP JUMPDEST PUSH2 0x156 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x99F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD2 PUSH2 0xCD CALLDATASIZE PUSH1 0x4 PUSH2 0x892 JUMP JUMPDEST PUSH2 0x17E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x446 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x98B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x102 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x111 CALLDATASIZE PUSH1 0x4 PUSH2 0x856 JUMP JUMPDEST PUSH2 0x462 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD2 PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x7CA JUMP JUMPDEST PUSH2 0x48D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD2 PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0x7A4 JUMP JUMPDEST PUSH2 0x4A1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x1DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP1 PUSH2 0x9BE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x14 DUP4 MSTORE PUSH32 0x41535345545F50524F58595F4D49534D41544348000000000000000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP5 POP DUP6 AND DUP5 EQ PUSH2 0x27D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP2 SWAP1 PUSH2 0x9AD JUMP JUMPDEST POP DUP5 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ISZERO PUSH2 0x3B2 JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAE25532E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x315 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x339 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x874 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH32 0x41535345545F50524F58595F49445F4D49534D41544348000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0xFF DUP1 DUP4 AND SWAP1 DUP9 AND EQ PUSH2 0x3B0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP2 SWAP1 PUSH2 0x9AD JUMP JUMPDEST POP JUMPDEST PUSH1 0xFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND OR SWAP1 SSTORE MLOAD PUSH32 0x27EF5F484E50F2DAF7C2D82C60FE4CE409009541176EB64095BEAC369DB1D260 SWAP1 PUSH2 0x436 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x9CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x49A DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x552 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x4F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP1 PUSH2 0x9BE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x54F JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 GT ISZERO PUSH2 0x70F JUMPI PUSH1 0xFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x1A DUP4 MSTORE PUSH32 0x41535345545F50524F58595F444F45535F4E4F545F4558495354000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP4 POP DUP4 ISZERO ISZERO PUSH2 0x5FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP2 SWAP1 PUSH2 0x9AD JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP9 MLOAD PUSH32 0xA85E59E400000000000000000000000000000000000000000000000000000000 DUP1 DUP4 MSTORE PUSH1 0x80 PUSH1 0x4 DUP5 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND PUSH1 0x24 DUP6 ADD MSTORE DUP9 AND PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 ADD DUP8 SWAP1 MSTORE SWAP4 POP PUSH1 0x3F ADD PUSH7 0xFFFFFFFFFFFE0 AND DUP1 DUP3 ADD PUSH1 0x84 SWAP1 DUP2 ADD SWAP1 DUP4 ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x68A JUMPI DUP12 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP12 DUP13 ADD SWAP12 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP6 DUP5 SUB DUP7 PUSH1 0x0 DUP12 GAS CALL SWAP5 POP POP POP POP POP DUP1 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5452414E534645525F4641494C45440000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x70D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP2 SWAP1 PUSH2 0x9AD JUMP JUMPDEST POP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x725 DUP3 CALLDATALOAD PUSH2 0xA67 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x73D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x750 PUSH2 0x74B DUP3 PUSH2 0xA1D JUMP JUMPDEST PUSH2 0x9F6 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x76C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x777 DUP4 DUP3 DUP5 PUSH2 0xA94 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x725 DUP3 CALLDATALOAD PUSH2 0xA86 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x725 DUP3 CALLDATALOAD PUSH2 0xA80 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x725 DUP3 MLOAD PUSH2 0xA80 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7C2 DUP5 DUP5 PUSH2 0x719 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x7E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x805 DUP9 DUP3 DUP10 ADD PUSH2 0x72C JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x816 DUP9 DUP3 DUP10 ADD PUSH2 0x78C JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x827 DUP9 DUP3 DUP10 ADD PUSH2 0x719 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x838 DUP9 DUP3 DUP10 ADD PUSH2 0x719 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x849 DUP9 DUP3 DUP10 ADD PUSH2 0x780 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x868 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7C2 DUP5 DUP5 PUSH2 0x78C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x886 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7C2 DUP5 DUP5 PUSH2 0x798 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x8B3 DUP7 DUP7 PUSH2 0x78C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x8C4 DUP7 DUP3 DUP8 ADD PUSH2 0x719 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x8D5 DUP7 DUP3 DUP8 ADD PUSH2 0x719 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x8E8 DUP2 PUSH2 0xA67 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x8E8 DUP2 PUSH2 0xA89 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 DUP3 PUSH2 0xA63 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x916 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xAA0 JUMP JUMPDEST PUSH2 0x91F DUP2 PUSH2 0xAD0 JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x33 DUP2 MSTORE PUSH32 0x4F6E6C7920636F6E7472616374206F776E657220697320616C6C6F7765642074 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6F2063616C6C2074686973206D6574686F642E00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH2 0x8E8 DUP2 PUSH2 0xA80 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x999 DUP3 DUP5 PUSH2 0x8DF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x999 DUP3 DUP5 PUSH2 0x8EE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x725 DUP2 DUP5 PUSH2 0x8F7 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x999 DUP2 PUSH2 0x92C JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x9DC DUP3 DUP7 PUSH2 0x982 JUMP JUMPDEST PUSH2 0x9E9 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x8DF JUMP JUMPDEST PUSH2 0x7C2 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x8DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xA15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xA34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x999 DUP3 PUSH2 0xA67 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xABB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xAA3 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xACA JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP1 JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 SWAP6 0x22 LOG1 AND 0xcc DUP4 LOG0 0x22 DUP15 LOG0 JUMP 0x2d CALLDATASIZE 0xea SIGNEXTEND 0xe2 SLOAD 0xe6 0x28 SHL EXTCODESIZE EXTCODECOPY ISZERO SWAP5 0x23 CODECOPY 0xee EQ 0xd4 0xe2 0x22 0xda PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
				"sourceMap": "705:333:6:-;;;363:5:10;:18;;-1:-1:-1;;;;;;363:18:10;371:10;363:18;;;705:333:6;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052600436106100775763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166338077164811461007c5780635c78d0c7146100b25780638da5cb5b146100d457806392c1421e146100f6578063a5fba6a414610116578063f2fde38b14610136575b600080fd5b34801561008857600080fd5b5061009c610097366004610856565b610156565b6040516100a9919061099f565b60405180910390f35b3480156100be57600080fd5b506100d26100cd366004610892565b61017e565b005b3480156100e057600080fd5b506100e9610446565b6040516100a9919061098b565b34801561010257600080fd5b506100e9610111366004610856565b610462565b34801561012257600080fd5b506100d26101313660046107ca565b61048d565b34801561014257600080fd5b506100d26101513660046107a4565b6104a1565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b600080548190819073ffffffffffffffffffffffffffffffffffffffff1633146101dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d4906109be565b60405180910390fd5b60ff8616600090815260016020908152604091829020548251808401909352601483527f41535345545f50524f58595f4d49534d415443480000000000000000000000009183019190915273ffffffffffffffffffffffffffffffffffffffff90811694508516841461027d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d491906109ad565b5084915073ffffffffffffffffffffffffffffffffffffffff8216156103b2578173ffffffffffffffffffffffffffffffffffffffff1663ae25532e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561030157600080fd5b505af1158015610315573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103399190810190610874565b60408051808201909152601781527f41535345545f50524f58595f49445f4d49534d41544348000000000000000000602082015290915060ff808316908816146103b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d491906109ad565b505b60ff86166000908152600160205260409081902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516179055517f27ef5f484e50f2daf7c2d82c60fe4ce409009541176eb64095beac369db1d26090610436908890889088906109ce565b60405180910390a1505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60ff1660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b61049a8585858585610552565b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d4906109be565b73ffffffffffffffffffffffffffffffffffffffff81161561054f57600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790555b50565b60008060008084111561070f5760ff8716600090815260016020908152604091829020548251808401909352601a83527f41535345545f50524f58595f444f45535f4e4f545f45584953540000000000009183019190915273ffffffffffffffffffffffffffffffffffffffff1693508315156105fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d491906109ad565b5060405188517fa85e59e4000000000000000000000000000000000000000000000000000000008083526080600484015273ffffffffffffffffffffffffffffffffffffffff898116602485015288166044840152606483018790529350603f01660fffffffffffe01680820160849081019083015b8181101561068a578b51815260209b8c019b01610672565b6000848584038660008b5af1945050505050806040805190810160405280600f81526020017f5452414e534645525f4641494c4544000000000000000000000000000000000081525090151561070d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d491906109ad565b505b5050505050505050565b60006107258235610a67565b9392505050565b6000601f8201831361073d57600080fd5b813561075061074b82610a1d565b6109f6565b9150808252602083016020830185838301111561076c57600080fd5b610777838284610a94565b50505092915050565b60006107258235610a86565b60006107258235610a80565b60006107258251610a80565b6000602082840312156107b657600080fd5b60006107c28484610719565b949350505050565b600080600080600060a086880312156107e257600080fd5b853567ffffffffffffffff8111156107f957600080fd5b6108058882890161072c565b95505060206108168882890161078c565b945050604061082788828901610719565b935050606061083888828901610719565b925050608061084988828901610780565b9150509295509295909350565b60006020828403121561086857600080fd5b60006107c2848461078c565b60006020828403121561088657600080fd5b60006107c28484610798565b6000806000606084860312156108a757600080fd5b60006108b3868661078c565b93505060206108c486828701610719565b92505060406108d586828701610719565b9150509250925092565b6108e881610a67565b82525050565b6108e881610a89565b600061090282610a63565b808452610916816020860160208601610aa0565b61091f81610ad0565b9093016020019392505050565b603381527f4f6e6c7920636f6e7472616374206f776e657220697320616c6c6f776564207460208201527f6f2063616c6c2074686973206d6574686f642e00000000000000000000000000604082015260600190565b6108e881610a80565b6020810161099982846108df565b92915050565b6020810161099982846108ee565b6020808252810161072581846108f7565b602080825281016109998161092c565b606081016109dc8286610982565b6109e960208301856108df565b6107c260408301846108df565b60405181810167ffffffffffffffff81118282101715610a1557600080fd5b604052919050565b600067ffffffffffffffff821115610a3457600080fd5b506020601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b5190565b73ffffffffffffffffffffffffffffffffffffffff1690565b60ff1690565b90565b600061099982610a67565b82818337506000910152565b60005b83811015610abb578181015183820152602001610aa3565b83811115610aca576000848401525b50505050565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016905600a265627a7a723058209522a116cc83a0228ea0562d36ea0be254e6281b3b3c15942339ee14d4e222da6c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x77 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x38077164 DUP2 EQ PUSH2 0x7C JUMPI DUP1 PUSH4 0x5C78D0C7 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x92C1421E EQ PUSH2 0xF6 JUMPI DUP1 PUSH4 0xA5FBA6A4 EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x136 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9C PUSH2 0x97 CALLDATASIZE PUSH1 0x4 PUSH2 0x856 JUMP JUMPDEST PUSH2 0x156 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x99F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD2 PUSH2 0xCD CALLDATASIZE PUSH1 0x4 PUSH2 0x892 JUMP JUMPDEST PUSH2 0x17E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x446 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x98B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x102 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x111 CALLDATASIZE PUSH1 0x4 PUSH2 0x856 JUMP JUMPDEST PUSH2 0x462 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD2 PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x7CA JUMP JUMPDEST PUSH2 0x48D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD2 PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0x7A4 JUMP JUMPDEST PUSH2 0x4A1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x1DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP1 PUSH2 0x9BE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x14 DUP4 MSTORE PUSH32 0x41535345545F50524F58595F4D49534D41544348000000000000000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP5 POP DUP6 AND DUP5 EQ PUSH2 0x27D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP2 SWAP1 PUSH2 0x9AD JUMP JUMPDEST POP DUP5 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ISZERO PUSH2 0x3B2 JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAE25532E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x315 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x339 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x874 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH32 0x41535345545F50524F58595F49445F4D49534D41544348000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0xFF DUP1 DUP4 AND SWAP1 DUP9 AND EQ PUSH2 0x3B0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP2 SWAP1 PUSH2 0x9AD JUMP JUMPDEST POP JUMPDEST PUSH1 0xFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND OR SWAP1 SSTORE MLOAD PUSH32 0x27EF5F484E50F2DAF7C2D82C60FE4CE409009541176EB64095BEAC369DB1D260 SWAP1 PUSH2 0x436 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x9CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x49A DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x552 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x4F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP1 PUSH2 0x9BE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x54F JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 GT ISZERO PUSH2 0x70F JUMPI PUSH1 0xFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x1A DUP4 MSTORE PUSH32 0x41535345545F50524F58595F444F45535F4E4F545F4558495354000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP4 POP DUP4 ISZERO ISZERO PUSH2 0x5FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP2 SWAP1 PUSH2 0x9AD JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP9 MLOAD PUSH32 0xA85E59E400000000000000000000000000000000000000000000000000000000 DUP1 DUP4 MSTORE PUSH1 0x80 PUSH1 0x4 DUP5 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND PUSH1 0x24 DUP6 ADD MSTORE DUP9 AND PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 ADD DUP8 SWAP1 MSTORE SWAP4 POP PUSH1 0x3F ADD PUSH7 0xFFFFFFFFFFFE0 AND DUP1 DUP3 ADD PUSH1 0x84 SWAP1 DUP2 ADD SWAP1 DUP4 ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x68A JUMPI DUP12 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP12 DUP13 ADD SWAP12 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP6 DUP5 SUB DUP7 PUSH1 0x0 DUP12 GAS CALL SWAP5 POP POP POP POP POP DUP1 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5452414E534645525F4641494C45440000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x70D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D4 SWAP2 SWAP1 PUSH2 0x9AD JUMP JUMPDEST POP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x725 DUP3 CALLDATALOAD PUSH2 0xA67 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x73D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x750 PUSH2 0x74B DUP3 PUSH2 0xA1D JUMP JUMPDEST PUSH2 0x9F6 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x76C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x777 DUP4 DUP3 DUP5 PUSH2 0xA94 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x725 DUP3 CALLDATALOAD PUSH2 0xA86 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x725 DUP3 CALLDATALOAD PUSH2 0xA80 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x725 DUP3 MLOAD PUSH2 0xA80 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7C2 DUP5 DUP5 PUSH2 0x719 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x7E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x805 DUP9 DUP3 DUP10 ADD PUSH2 0x72C JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x816 DUP9 DUP3 DUP10 ADD PUSH2 0x78C JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x827 DUP9 DUP3 DUP10 ADD PUSH2 0x719 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x838 DUP9 DUP3 DUP10 ADD PUSH2 0x719 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x849 DUP9 DUP3 DUP10 ADD PUSH2 0x780 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x868 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7C2 DUP5 DUP5 PUSH2 0x78C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x886 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7C2 DUP5 DUP5 PUSH2 0x798 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x8B3 DUP7 DUP7 PUSH2 0x78C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x8C4 DUP7 DUP3 DUP8 ADD PUSH2 0x719 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x8D5 DUP7 DUP3 DUP8 ADD PUSH2 0x719 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x8E8 DUP2 PUSH2 0xA67 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x8E8 DUP2 PUSH2 0xA89 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 DUP3 PUSH2 0xA63 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x916 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xAA0 JUMP JUMPDEST PUSH2 0x91F DUP2 PUSH2 0xAD0 JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x33 DUP2 MSTORE PUSH32 0x4F6E6C7920636F6E7472616374206F776E657220697320616C6C6F7765642074 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6F2063616C6C2074686973206D6574686F642E00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH2 0x8E8 DUP2 PUSH2 0xA80 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x999 DUP3 DUP5 PUSH2 0x8DF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x999 DUP3 DUP5 PUSH2 0x8EE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x725 DUP2 DUP5 PUSH2 0x8F7 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x999 DUP2 PUSH2 0x92C JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x9DC DUP3 DUP7 PUSH2 0x982 JUMP JUMPDEST PUSH2 0x9E9 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x8DF JUMP JUMPDEST PUSH2 0x7C2 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x8DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xA15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xA34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x999 DUP3 PUSH2 0xA67 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xABB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xAA3 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xACA JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP1 JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 SWAP6 0x22 LOG1 AND 0xcc DUP4 LOG0 0x22 DUP15 LOG0 JUMP 0x2d CALLDATASIZE 0xea SIGNEXTEND 0xe2 SLOAD 0xe6 0x28 SHL EXTCODESIZE EXTCODECOPY ISZERO SWAP5 0x23 CODECOPY 0xee EQ 0xd4 0xe2 0x22 0xda PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
				"sourceMap": "705:333:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1017:50:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1017:50:2;;;;;;;;;;;;;;;;;;;;;;;;;1481:1054;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1481:1054:2;;;;;;;;;;;292:20:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;292:20:10;;;;;;;;;;;;2725:153:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2725:153:2;;;;;;;;;774:262:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;774:262:6;;;;;;;;;566:167:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;566:167:10;;;;;;;;;1017:50:2;;;;;;;;;;;;;;;:::o;1481:1054::-;1732:25;460:5:10;;1732:25:2;;;;460:5:10;;446:10;:19;425:117;;;;;;;;;;;;;;;;;;;;;;1760:26:2;;;;;;;:12;:26;;;;;;;;;;1865:20;;;;;;;;;;;;;;;;;;;1760:26;;;;;-1:-1:-1;1817:34:2;;;;1796:99;;;;;;;;;;;;;;;-1:-1:-1;1943:13:2;;-1:-1:-1;2086:27:2;;;;2082:230;;2153:10;:21;;;:23;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2153:23:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2153:23:2;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2153:23:2;;;;;;;;;2264;;;;;;;;;;;;;;;;;2129:47;;-1:-1:-1;2215:31:2;;;;;;;;2190:111;;;;;;;;;;;;;;;;2082:230;2371:26;;;;;;;:12;:26;;;;;;;:39;;;;;;;;;;2425:103;;;;;2371:26;;2478:13;;2505;;2425:103;;;;;;;;;;1481:1054;;;;;;:::o;292:20:10:-;;;;;;:::o;2725:153:2:-;2845:26;;2815:7;2845:26;;;:12;:26;;;;;;;;;2725:153::o;774:262:6:-;966:63;987:9;998:12;1012:4;1018:2;1022:6;966:20;:63::i;:::-;774:262;;;;;:::o;566:167:10:-;460:5;;;;446:10;:19;425:117;;;;;;;;;;;;;;662:22;;;;658:69;;700:5;:16;;;;;;;;;;658:69;566:167;:::o;3270:4495:2:-;3584:22;4998:27;5087:12;3534:1;3525:6;:10;3521:4238;;;3609:26;;;;;;;:12;:26;;;;;;;;;;3761;;;;;;;;;;;;;;;;;;;3609;;;-1:-1:-1;3719:24:2;;;3694:107;;;;;;;;;;;;;;;-1:-1:-1;5321:2:2;5315:9;5614:16;;5028:45;5944:37;;;6398:3;6394:1;6381:15;;6374:28;5028:36;6444:53;;;6439:2;6426:16;;6419:79;6540:51;;6535:2;6522:16;;6515:77;6629:3;6616:17;;6609:33;;;5028:45;-1:-1:-1;5632:2:2;5610:25;5637:15;5606:47;5768:38;;;5785:3;5768:38;;;;6772:17;;6806:206;6826:5;6816:8;6813:19;6806:206;;;6875:16;;6858:34;;6939:2;6976:18;;;;6925:17;6806:206;;;7574:1;7503:7;7449;7442:5;7438:19;7365:7;7299:1;7224:10;7161:3;7135:506;7124:517;;5122:2533;;;;7694:7;7719:15;;;;;;;;;;;;;;;;;;7669:79;;;;;;;;;;;;;;;;;;;3521:4238;3270:4495;;;;;;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;;63:55;57:66;-1:-1;;;57:66;131:440;;225:4;213:17;;209:27;-1:-1;199:2;;250:1;247;240:12;199:2;287:6;274:20;309:64;324:48;365:6;324:48;;;309:64;;;300:73;;393:6;386:5;379:21;429:4;421:6;417:17;462:4;455:5;451:16;497:3;488:6;483:3;479:16;476:25;473:2;;;514:1;511;504:12;473:2;524:41;558:6;553:3;548;524:41;;;192:379;;;;;;;;579:118;;646:46;684:6;671:20;646:46;;704:114;;769:44;805:6;792:20;769:44;;825:118;;901:37;930:6;924:13;901:37;;950:241;;1054:2;1042:9;1033:7;1029:23;1025:32;1022:2;;;1070:1;1067;1060:12;1022:2;1105:1;1122:53;1167:7;1147:9;1122:53;;;1112:63;1016:175;-1:-1;;;;1016:175;1198:843;;;;;;1377:3;1365:9;1356:7;1352:23;1348:33;1345:2;;;1394:1;1391;1384:12;1345:2;1429:31;;1480:18;1469:30;;1466:2;;;1512:1;1509;1502:12;1466:2;1532:62;1586:7;1577:6;1566:9;1562:22;1532:62;;;1522:72;;1408:192;1631:2;1649:51;1692:7;1683:6;1672:9;1668:22;1649:51;;;1639:61;;1610:96;1737:2;1755:53;1800:7;1791:6;1780:9;1776:22;1755:53;;;1745:63;;1716:98;1845:2;1863:53;1908:7;1899:6;1888:9;1884:22;1863:53;;;1853:63;;1824:98;1953:3;1972:53;2017:7;2008:6;1997:9;1993:22;1972:53;;;1962:63;;1932:99;1339:702;;;;;;;;;2048:237;;2150:2;2138:9;2129:7;2125:23;2121:32;2118:2;;;2166:1;2163;2156:12;2118:2;2201:1;2218:51;2261:7;2241:9;2218:51;;2292:259;;2405:2;2393:9;2384:7;2380:23;2376:32;2373:2;;;2421:1;2418;2411:12;2373:2;2456:1;2473:62;2527:7;2507:9;2473:62;;2558:487;;;;2694:2;2682:9;2673:7;2669:23;2665:32;2662:2;;;2710:1;2707;2700:12;2662:2;2745:1;2762:51;2805:7;2785:9;2762:51;;;2752:61;;2724:95;2850:2;2868:53;2913:7;2904:6;2893:9;2889:22;2868:53;;;2858:63;;2829:98;2958:2;2976:53;3021:7;3012:6;3001:9;2997:22;2976:53;;;2966:63;;2937:98;2656:389;;;;;;3052:110;3125:31;3150:5;3125:31;;;3120:3;3113:44;3107:55;;;3169:154;3261:56;3311:5;3261:56;;3330:292;;3428:35;3457:5;3428:35;;;3480:6;3475:3;3468:19;3492:63;3548:6;3541:4;3536:3;3532:14;3525:4;3518:5;3514:16;3492:63;;;3587:29;3609:6;3587:29;;;3567:50;;;3580:4;3567:50;;3408:214;-1:-1;;;3408:214;3630:397;3785:2;3773:15;;3822:66;3817:2;3808:12;;3801:88;3923:66;3918:2;3909:12;;3902:88;4018:2;4009:12;;3766:261;4035:104;4104:29;4127:5;4104:29;;4146:193;4254:2;4239:18;;4268:61;4243:9;4302:6;4268:61;;;4225:114;;;;;4346:231;4473:2;4458:18;;4487:80;4462:9;4540:6;4487:80;;4584:273;4708:2;4722:47;;;4693:18;;4783:64;4693:18;4833:6;4783:64;;4864:387;5045:2;5059:47;;;5030:18;;5120:121;5030:18;5120:121;;5258:387;5418:2;5403:18;;5432:57;5407:9;5462:6;5432:57;;;5500:62;5558:2;5547:9;5543:18;5534:6;5500:62;;;5573;5631:2;5620:9;5616:18;5607:6;5573:62;;5652:256;5714:2;5708:9;5740:17;;;5815:18;5800:34;;5836:22;;;5797:62;5794:2;;;5872:1;5869;5862:12;5794:2;5888;5881:22;5692:216;;-1:-1;5692:216;5915:258;;6058:18;6050:6;6047:30;6044:2;;;6090:1;6087;6080:12;6044:2;-1:-1;6163:4;6134;6111:17;;;;6130:9;6107:33;6153:15;;5981:192;6180:88;6251:12;;6235:33;6275:128;6355:42;6344:54;;6327:76;6410:88;6488:4;6477:16;;6460:38;6640:79;6709:5;6692:27;6821:134;;6919:31;6944:5;6919:31;;6963:145;7044:6;7039:3;7034;7021:30;-1:-1;7100:1;7082:16;;7075:27;7014:94;7117:268;7182:1;7189:101;7203:6;7200:1;7197:13;7189:101;;;7270:11;;;7264:18;7251:11;;;7244:39;7225:2;7218:10;7189:101;;;7305:6;7302:1;7299:13;7296:2;;;7370:1;7361:6;7356:3;7352:16;7345:27;7296:2;7166:219;;;;;7393:97;7481:2;7461:14;7477:7;7457:28;;7441:49"
			}
		}
	},
	"sources": {
		"current/protocol/AssetProxy/interfaces/IAssetProxy.sol": {
			"id": 0
		},
		"current/protocol/AssetProxy/interfaces/IAuthorizable.sol": {
			"id": 1
		},
		"current/protocol/Exchange/MixinAssetProxyDispatcher.sol": {
			"id": 2
		},
		"current/protocol/Exchange/interfaces/IAssetProxyDispatcher.sol": {
			"id": 3
		},
		"current/protocol/Exchange/libs/LibExchangeErrors.sol": {
			"id": 4
		},
		"current/protocol/Exchange/mixins/MAssetProxyDispatcher.sol": {
			"id": 5
		},
		"current/test/TestAssetProxyDispatcher/TestAssetProxyDispatcher.sol": {
			"id": 6
		},
		"current/utils/LibBytes/LibBytes.sol": {
			"id": 7
		},
		"current/utils/LibMem/LibMem.sol": {
			"id": 8
		},
		"current/utils/Ownable/IOwnable.sol": {
			"id": 9
		},
		"current/utils/Ownable/Ownable.sol": {
			"id": 10
		}
	},
	"sourceCodes": {
		"current/protocol/AssetProxy/interfaces/IAssetProxy.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./IAuthorizable.sol\";\n\ncontract IAssetProxy is\n    IAuthorizable\n{\n\n    /// @dev Transfers assets. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    function transferFrom(\n        bytes assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        external;\n    \n    /// @dev Makes multiple transfers of assets. Either succeeds or throws.\n    /// @param assetData Array of byte arrays encoded for the respective asset proxy.\n    /// @param from Array of addresses to transfer assets from.\n    /// @param to Array of addresses to transfer assets to.\n    /// @param amounts Array of amounts of assets to transfer.\n    function batchTransferFrom(\n        bytes[] memory assetData,\n        address[] memory from,\n        address[] memory to,\n        uint256[] memory amounts\n    )\n        public;\n\n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        view\n        returns (uint8);\n}\n\n",
		"current/protocol/AssetProxy/interfaces/IAuthorizable.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../../utils/Ownable/IOwnable.sol\";\n\ncontract IAuthorizable is\n    IOwnable\n{\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[]);\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n}\n",
		"current/protocol/Exchange/MixinAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../../utils/Ownable/Ownable.sol\";\nimport \"../../utils/LibBytes/LibBytes.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"./mixins/MAssetProxyDispatcher.sol\";\nimport \"../AssetProxy/interfaces/IAssetProxy.sol\";\n\ncontract MixinAssetProxyDispatcher is\n    Ownable,\n    LibBytes,\n    LibExchangeErrors,\n    MAssetProxyDispatcher\n{\n    // Mapping from Asset Proxy Id's to their respective Asset Proxy\n    mapping (uint8 => IAssetProxy) public assetProxies;\n\n    /// @dev Registers an asset proxy to an asset proxy id.\n    ///      An id can only be assigned to a single proxy at a given time.\n    /// @param assetProxyId Id to register`newAssetProxy` under.\n    /// @param newAssetProxy Address of new asset proxy to register, or 0x0 to unset assetProxyId.\n    /// @param oldAssetProxy Existing asset proxy to overwrite, or 0x0 if assetProxyId is currently unused.\n    function registerAssetProxy(\n        uint8 assetProxyId,\n        address newAssetProxy,\n        address oldAssetProxy\n    )\n        external\n        onlyOwner\n    {\n        // Ensure the existing asset proxy is not unintentionally overwritten\n        address currentAssetProxy = assetProxies[assetProxyId];\n        require(\n            oldAssetProxy == currentAssetProxy,\n            ASSET_PROXY_MISMATCH\n        );\n\n        IAssetProxy assetProxy = IAssetProxy(newAssetProxy);\n\n        // Ensure that the id of newAssetProxy matches the passed in assetProxyId, unless it is being reset to 0.\n        if (newAssetProxy != address(0)) {\n            uint8 newAssetProxyId = assetProxy.getProxyId();\n            require(\n                newAssetProxyId == assetProxyId,\n                ASSET_PROXY_ID_MISMATCH\n            );\n        }\n\n        // Add asset proxy and log registration.\n        assetProxies[assetProxyId] = assetProxy;\n        emit AssetProxySet(\n            assetProxyId,\n            newAssetProxy,\n            oldAssetProxy\n        );\n    }\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(uint8 assetProxyId)\n        external\n        view\n        returns (address)\n    {\n        return assetProxies[assetProxyId];\n    }\n\n    /// @dev Forwards arguments to assetProxy and calls `transferFrom`. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param assetProxyId Id of assetProxy to dispach to.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param amount Amount of token to transfer.\n    function dispatchTransferFrom(\n        bytes memory assetData,\n        uint8 assetProxyId,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        // Do nothing if no amount should be transferred.\n        if (amount > 0) {\n            // Lookup assetProxy\n            IAssetProxy assetProxy = assetProxies[assetProxyId];\n            // Ensure that assetProxy exists\n            require(\n                assetProxy != address(0),\n                ASSET_PROXY_DOES_NOT_EXIST\n            );\n\n            // We construct calldata for the `assetProxy.transferFrom` ABI.\n            // The layout of this calldata is in the table below.\n            // \n            // | Area     | Offset | Length  | Contents                                    |\n            // | -------- |--------|---------|-------------------------------------------- |\n            // | Header   | 0      | 4       | function selector                           |\n            // | Params   |        | 4 * 32  | function parameters:                        |\n            // |          | 4      |         |   1. offset to assetData (*)                |\n            // |          | 36     |         |   2. from                                   |\n            // |          | 68     |         |   3. to                                     |\n            // |          | 100    |         |   4. amount                                 |\n            // | Data     |        |         | assetData:                                  |\n            // |          | 132    | 32      | assetData Length                            |\n            // |          | 164    | **      | assetData Contents                          |\n\n            bytes4 transferFromSelector = IAssetProxy(assetProxy).transferFrom.selector;\n            bool success;\n            assembly {\n                /////// Setup State ///////\n                // `cdStart` is the start of the calldata for `assetProxy.transferFrom` (equal to free memory ptr).\n                let cdStart := mload(64)\n                // `dataAreaLength` is the total number of words needed to store `assetData`\n                //  As-per the ABI spec, this value is padded up to the nearest multiple of 32,\n                //  and includes 32-bytes for length.\n                let dataAreaLength := and(add(mload(assetData), 63), 0xFFFFFFFFFFFE0)\n                // `cdEnd` is the end of the calldata for `assetProxy.transferFrom`.\n                let cdEnd := add(cdStart, add(132, dataAreaLength))\n\n                /////// Setup Header Area ///////\n                // This area holds the 4-byte `transferFromSelector`.\n                mstore(cdStart, transferFromSelector)\n                \n                /////// Setup Params Area ///////\n                // Each parameter is padded to 32-bytes. The entire Params Area is 128 bytes.\n                // Notes:\n                //   1. The offset to `assetData` is the length of the Params Area (128 bytes).\n                //   2. A 20-byte mask is applied to addresses to zero-out the unused bytes.\n                mstore(add(cdStart, 4), 128)\n                mstore(add(cdStart, 36), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\n                mstore(add(cdStart, 68), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\n                mstore(add(cdStart, 100), amount)\n\n                /////// Setup Data Area ///////\n                // This area holds `assetData`.\n                let dataArea := add(cdStart, 132)\n                for {} lt(dataArea, cdEnd) {} {\n                    mstore(dataArea, mload(assetData))\n                    dataArea := add(dataArea, 32)\n                    assetData := add(assetData, 32)\n                }\n\n                /////// Call `assetProxy.transferFrom` using the constructed calldata ///////\n                success := call(\n                    gas,                    // forward all gas\n                    assetProxy,             // call address of asset proxy\n                    0,                      // don't send any ETH\n                    cdStart,                // pointer to start of input\n                    sub(cdEnd, cdStart),    // length of input  \n                    cdStart,                // write output over input\n                    0                       // output size is 0 bytes\n                )\n            }\n\n            require(\n                success,\n                TRANSFER_FAILED\n            );\n        }\n    }\n}\n",
		"current/protocol/Exchange/interfaces/IAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract IAssetProxyDispatcher {\n\n    /// @dev Registers an asset proxy to an asset proxy id.\n    ///      An id can only be assigned to a single proxy at a given time.\n    /// @param assetProxyId Id to register`newAssetProxy` under.\n    /// @param newAssetProxy Address of new asset proxy to register, or 0x0 to unset assetProxyId.\n    /// @param oldAssetProxy Existing asset proxy to overwrite, or 0x0 if assetProxyId is currently unused.\n    function registerAssetProxy(\n        uint8 assetProxyId,\n        address newAssetProxy,\n        address oldAssetProxy\n    )\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(uint8 assetProxyId)\n        external\n        view\n        returns (address);\n}\n",
		"current/protocol/Exchange/libs/LibExchangeErrors.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibExchangeErrors {\n    /// Order validation errors ///\n    string constant ORDER_UNFILLABLE = \"ORDER_UNFILLABLE\";                              // Order cannot be filled.\n    string constant INVALID_MAKER = \"INVALID_MAKER\";                                    // Invalid makerAddress.\n    string constant INVALID_TAKER = \"INVALID_TAKER\";                                    // Invalid takerAddress.\n    string constant INVALID_SENDER = \"INVALID_SENDER\";                                  // Invalid `msg.sender`.\n    string constant INVALID_ORDER_SIGNATURE = \"INVALID_ORDER_SIGNATURE\";                // Signature validation failed. \n    \n    /// fillOrder validation errors ///\n    string constant INVALID_TAKER_AMOUNT = \"INVALID_TAKER_AMOUNT\";                      // takerAssetFillAmount cannot equal 0.\n    string constant ROUNDING_ERROR = \"ROUNDING_ERROR\";                                  // Rounding error greater than 0.1% of takerAssetFillAmount. \n    \n    /// Signature validation errors ///\n    string constant INVALID_SIGNATURE = \"INVALID_SIGNATURE\";                            // Signature validation failed. \n    string constant SIGNATURE_ILLEGAL = \"SIGNATURE_ILLEGAL\";                            // Signature type is illegal.\n    string constant SIGNATURE_UNSUPPORTED = \"SIGNATURE_UNSUPPORTED\";                    // Signature type unsupported.\n    \n    /// cancelOrdersUptTo errors ///\n    string constant INVALID_NEW_ORDER_EPOCH = \"INVALID_NEW_ORDER_EPOCH\";                // Specified salt must be greater than or equal to existing orderEpoch.\n\n    /// fillOrKillOrder errors ///\n    string constant COMPLETE_FILL_FAILED = \"COMPLETE_FILL_FAILED\";                      // Desired takerAssetFillAmount could not be completely filled. \n\n    /// matchOrders errors ///\n    string constant NEGATIVE_SPREAD_REQUIRED = \"NEGATIVE_SPREAD_REQUIRED\";              // Matched orders must have a negative spread.\n\n    /// Transaction errors ///\n    string constant REENTRANCY_ILLEGAL = \"REENTRANCY_ILLEGAL\";                          // Recursive reentrancy is not allowed. \n    string constant INVALID_TX_HASH = \"INVALID_TX_HASH\";                                // Transaction has already been executed. \n    string constant INVALID_TX_SIGNATURE = \"INVALID_TX_SIGNATURE\";                      // Signature validation failed. \n    string constant FAILED_EXECUTION = \"FAILED_EXECUTION\";                              // Transaction execution failed. \n    \n    /// registerAssetProxy errors ///\n    string constant ASSET_PROXY_MISMATCH = \"ASSET_PROXY_MISMATCH\";                      // oldAssetProxy proxy does not match currentAssetProxy. \n    string constant ASSET_PROXY_ID_MISMATCH = \"ASSET_PROXY_ID_MISMATCH\";                // newAssetProxyId does not match given assetProxyId.\n\n    /// dispatchTransferFrom errors ///\n    string constant ASSET_PROXY_DOES_NOT_EXIST = \"ASSET_PROXY_DOES_NOT_EXIST\";          // No assetProxy registered at given id.\n    string constant TRANSFER_FAILED = \"TRANSFER_FAILED\";                                // Failed to transfer assets.\n\n    /// Length validation errors ///\n    string constant LENGTH_GREATER_THAN_0_REQUIRED = \"LENGTH_GREATER_THAN_0_REQUIRED\";  // Byte array must have a length greater than 0.\n    string constant LENGTH_0_REQUIRED = \"LENGTH_0_REQUIRED\";                            // Byte array must have a length of 0.\n    string constant LENGTH_65_REQUIRED = \"LENGTH_65_REQUIRED\";                          // Byte array must have a length of 65.\n}\n",
		"current/protocol/Exchange/mixins/MAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IAssetProxyDispatcher.sol\";\n\ncontract MAssetProxyDispatcher is\n    IAssetProxyDispatcher\n{\n\n    // Logs registration of new asset proxy\n    event AssetProxySet(\n        uint8 id,               // Id of new registered AssetProxy.\n        address newAssetProxy,  // Address of new registered AssetProxy.\n        address oldAssetProxy   // Address of AssetProxy that was overwritten at given id (or null address).\n    );\n\n    /// @dev Forwards arguments to assetProxy and calls `transferFrom`. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param assetProxyId Id of assetProxy to dispach to.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param amount Amount of token to transfer.\n    function dispatchTransferFrom(\n        bytes memory assetData,\n        uint8 assetProxyId,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal;\n}\n",
		"current/test/TestAssetProxyDispatcher/TestAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../protocol/Exchange/MixinAssetProxyDispatcher.sol\";\n\ncontract TestAssetProxyDispatcher is MixinAssetProxyDispatcher {\n    function publicDispatchTransferFrom(\n        bytes memory assetData,\n        uint8 assetProxyId,\n        address from,\n        address to,\n        uint256 amount)\n        public\n    {\n        dispatchTransferFrom(assetData, assetProxyId, from, to, amount);\n    }\n}\n",
		"current/utils/LibBytes/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../LibMem/LibMem.sol\";\n\ncontract LibBytes is\n    LibMem\n{\n\n    // Revert reasons\n    string constant GREATER_THAN_ZERO_LENGTH_REQUIRED = \"GREATER_THAN_ZERO_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\";\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            GREATER_THAN_ZERO_LENGTH_REQUIRED\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(mload(add(b, index)), 0xffffffffffffffffffffffff0000000000000000000000000000000000000000)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        return uint256(readBytes32(b, index));\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads the first 4 bytes from a byte array of arbitrary length.\n    /// @param b Byte array to read first 4 bytes from.\n    /// @return First 4 bytes of data.\n    function readFirst4(bytes memory b)\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= 4,\n            GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\n        );\n        assembly {\n            result := mload(add(b, 32))\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytes(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\n        );\n\n        // Allocate memory and copy value to result\n        result = new bytes(nestedBytesLength);\n        memCopy(\n            getMemAddress(result) + 32, // +32 skips array length\n            getMemAddress(b) + index + 32,\n            nestedBytesLength\n        );\n\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytes(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 /* 32 bytes to store length */ + input.length,\n            GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            getMemAddress(b) + 32 + index,  // +32 to skip length of <b>\n            getMemAddress(input),           // includes length of <input>\n            input.length + 32               // +32 bytes to store <input> length\n        );\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function areBytesEqual(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        assembly {\n            // Get the number of words occupied by <lhs>\n            let lenFullWords := div(add(mload(lhs), 0x1F), 0x20)\n\n            // Add 1 to the number of words, to account for the length field\n            lenFullWords := add(lenFullWords, 0x1)\n\n            // Test equality word-by-word.\n            // Terminates early if there is a mismatch.\n            for {let i := 0} lt(i, lenFullWords) {i := add(i, 1)} {\n                let lhsWord := mload(add(lhs, mul(i, 0x20)))\n                let rhsWord := mload(add(rhs, mul(i, 0x20)))\n                equal := eq(lhsWord, rhsWord)\n                if eq(equal, 0) {\n                    // Break\n                    i := lenFullWords\n                }\n            }\n       }\n\n       return equal;\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function deepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        internal\n        pure\n    {\n        uint256 sourceLen = source.length;\n        // Dest length must be >= source length, or some bytes would not be copied.\n        require(\n            dest.length >= sourceLen,\n            GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\n        );\n        memCopy(\n            getMemAddress(dest) + 32,    // +32 to skip length of <dest>\n            getMemAddress(source) + 32,  // +32 to skip length of <source>\n            sourceLen\n        );\n    }\n}\n",
		"current/utils/LibMem/LibMem.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibMem\n{\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array.\n    function getMemAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n                    \n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n                    \n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n}\n",
		"current/utils/Ownable/IOwnable.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\n\ncontract IOwnable {\n    function transferOwnership(address newOwner)\n        public;\n}\n",
		"current/utils/Ownable/Ownable.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\n\nimport \"./IOwnable.sol\";\n\ncontract Ownable is IOwnable {\n    address public owner;\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"Only contract owner is allowed to call this method.\"\n        );\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n"
	},
	"sourceTreeHashHex": "0xa360364086a37dec29ec93c95207e2a73440903d5664d16e6dfb23e35a2acf6c",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.4.24+commit.e67f0147.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"networks": {}
}