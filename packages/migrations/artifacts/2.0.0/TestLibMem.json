{
	"schemaVersion": "2.0.0",
	"contractName": "TestLibMem",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [],
				"name": "test3",
				"outputs": [],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "test5",
				"outputs": [],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "test2",
				"outputs": [],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "test7",
				"outputs": [],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "test1",
				"outputs": [],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "test6",
				"outputs": [],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "test4",
				"outputs": [],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50610b3b806100206000396000f3006080604052600436106100695763ffffffff60e060020a6000350416630a8e8e01811461006e5780631ad7be821461008557806366e41cb71461009a57806366e84d62146100af5780636b59084d146100c45780636f3babc4146100d95780638f0d282d146100ee575b600080fd5b34801561007a57600080fd5b50610083610103565b005b34801561009157600080fd5b50610083610243565b3480156100a657600080fd5b50610083610369565b3480156100bb57600080fd5b50610083610486565b3480156100d057600080fd5b506100836105c4565b3480156100e557600080fd5b5061008361065b565b3480156100fa57600080fd5b506100836108e6565b60408051600b8082528183019092526060906000908290846020820161016080388339019050509250600091505b8382101561017757600f820660010160f860020a02838381518110151561015457fe5b906020010190600160f860020a031916908160001a905350816001019150610131565b836040519080825280601f01601f1916602001820160405280156101a5578160200160208202803883390190505b5090506101c96101b482610a0a565b6020016101c085610a0a565b60200186610a0d565b6101d38382610aa8565b151561023d576040805160e560020a62461bcd02815260206004820152603060248201527f54657374202333206661696c65642e20417272617920636f6e74656e747320616044820152600080516020610af0833981519152606482015290519081900360840190fd5b50505050565b604080516048808252608082019092526060906000908290846020820161090080388339019050509250600091505b838210156102b857600f820660010160f860020a02838381518110151561029557fe5b906020010190600160f860020a031916908160001a905350816001019150610272565b836040519080825280601f01601f1916602001820160405280156102e6578160200160208202803883390190505b5090506102f56101b482610a0a565b6102ff8382610aa8565b151561023d576040805160e560020a62461bcd02815260206004820152603060248201527f54657374202335206661696c65642e20417272617920636f6e74656e747320616044820152600080516020610af0833981519152606482015290519081900360840190fd5b604080516001808252818301909252606090819083602080830190803883395050815191935060f860020a9184915060009081106103a357fe5b906020010190600160f860020a031916908160001a905350826040519080825280601f01601f1916602001820160405280156103e9578160200160208202803883390190505b50905061040d6103f882610a0a565b60200161040484610a0a565b60200185610a0d565b6104178282610aa8565b1515610481576040805160e560020a62461bcd02815260206004820152603060248201527f54657374202332206661696c65642e20417272617920636f6e74656e747320616044820152600080516020610af0833981519152606482015290519081900360840190fd5b505050565b604080516048808252608082019092526060906000908290846020820161090080388339019050509250600091505b838210156104fb57600f820660010160f860020a0283838151811015156104d857fe5b906020010190600160f860020a031916908160001a9053508160010191506104b5565b836040519080825280601f01601f191660200182016040528015610529578160200160208202803883390190505b50905061055061053882610a0a565b60200161054485610a0a565b60200160088703610a0d565b61055a8382610aa8565b151561023d576040805160e560020a62461bcd02815260206004820152603060248201527f54657374202337206661696c65642e20417272617920636f6e74656e747320616044820152600080516020610af0833981519152606482015290519081900360840190fd5b60408051600080825260208201818152828401909352916105e76103f882610a0a565b6105f18282610aa8565b1515610481576040805160e560020a62461bcd02815260206004820152603060248201527f54657374202331206661696c65642e20417272617920636f6e74656e747320616044820152600080516020610af0833981519152606482015290519081900360840190fd5b6040805160ac80825260e082019092526048916064916060918291600091839183918391906020820161158080388339019050509550876040519080825280601f01601f1916602001820160405280156106bf578160200160208202803883390190505b509450600093505b8784101561074057600f840660010160f860020a0285858151811015156106ea57fe5b906020010190600160f860020a031916908160001a905350600f840660010160f860020a02868581518110151561071d57fe5b906020010190600160f860020a031916908160001a9053508360010193506106c7565b866040519080825280601f01601f19166020018201604052801561076e578160200160208202803883390190505b509250600091505b868410156107f157600f820660010160f860020a02838381518110151561079957fe5b906020010190600160f860020a031916908160001a905350600f820660010160f860020a0286838a018151811015156107ce57fe5b906020010190600160f860020a031916908160001a905350836001019350610776565b8688016040519080825280601f01601f191660200182016040528015610821578160200160208202803883390190505b50905061084561083082610a0a565b60200161083c87610a0a565b6020018a610a0d565b6108688861085283610a0a565b6020010161085f85610a0a565b60200189610a0d565b6108728682610aa8565b15156108dc576040805160e560020a62461bcd02815260206004820152603060248201527f54657374202336206661696c65642e20417272617920636f6e74656e747320616044820152600080516020610af0833981519152606482015290519081900360840190fd5b5050505050505050565b60408051602080825281830190925260609060009082908480820161040080388339019050509250600091505b8382101561095957600f820660010160f860020a02838381518110151561093657fe5b906020010190600160f860020a031916908160001a905350816001019150610913565b836040519080825280601f01601f191660200182016040528015610987578160200160208202803883390190505b5090506109966101b482610a0a565b6109a08382610aa8565b151561023d576040805160e560020a62461bcd02815260206004820152603060248201527f54657374202334206661696c65642e20417272617920636f6e74656e747320616044820152600080516020610af0833981519152606482015290519081900360840190fd5b90565b801515610a1957610481565b82821415610a2657610481565b6020601f820104602082066000811115610a41576001820391505b6000602083025b80821015610a63578186015182880152602082019150610a48565b6000831115610a9f578260200360080260020a8287015181828204028560080260020a858b0151818282020480841780898f0152505050505050505b50505050505050565b60006020601f8451010460018101905060005b81811015610ae757602081028581015190850151808214945084610add578392505b5050600101610abb565b50509291505056007265206e6f74207468652073616d652e00000000000000000000000000000000a165627a7a7230582067ac05deae38337111211dd675da7f43d78195c49b3a3d67c6e2f86677f5219a0029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB3B DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x69 JUMPI PUSH4 0xFFFFFFFF PUSH1 0xE0 PUSH1 0x2 EXP PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0xA8E8E01 DUP2 EQ PUSH2 0x6E JUMPI DUP1 PUSH4 0x1AD7BE82 EQ PUSH2 0x85 JUMPI DUP1 PUSH4 0x66E41CB7 EQ PUSH2 0x9A JUMPI DUP1 PUSH4 0x66E84D62 EQ PUSH2 0xAF JUMPI DUP1 PUSH4 0x6B59084D EQ PUSH2 0xC4 JUMPI DUP1 PUSH4 0x6F3BABC4 EQ PUSH2 0xD9 JUMPI DUP1 PUSH4 0x8F0D282D EQ PUSH2 0xEE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x83 PUSH2 0x103 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x83 PUSH2 0x243 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x83 PUSH2 0x369 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x83 PUSH2 0x486 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x83 PUSH2 0x5C4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x83 PUSH2 0x65B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x83 PUSH2 0x8E6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xB DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 DUP5 PUSH1 0x20 DUP3 ADD PUSH2 0x160 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP3 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH2 0x177 JUMPI PUSH1 0xF DUP3 MOD PUSH1 0x1 ADD PUSH1 0xF8 PUSH1 0x2 EXP MUL DUP4 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x154 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0xF8 PUSH1 0x2 EXP SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0x1 ADD SWAP2 POP PUSH2 0x131 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x1C9 PUSH2 0x1B4 DUP3 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD PUSH2 0x1C0 DUP6 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD DUP7 PUSH2 0xA0D JUMP JUMPDEST PUSH2 0x1D3 DUP4 DUP3 PUSH2 0xAA8 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x23D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54657374202333206661696C65642E20417272617920636F6E74656E74732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x48 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 DUP5 PUSH1 0x20 DUP3 ADD PUSH2 0x900 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP3 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH2 0x2B8 JUMPI PUSH1 0xF DUP3 MOD PUSH1 0x1 ADD PUSH1 0xF8 PUSH1 0x2 EXP MUL DUP4 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x295 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0xF8 PUSH1 0x2 EXP SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0x1 ADD SWAP2 POP PUSH2 0x272 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2E6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x2F5 PUSH2 0x1B4 DUP3 PUSH2 0xA0A JUMP JUMPDEST PUSH2 0x2FF DUP4 DUP3 PUSH2 0xAA8 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x23D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54657374202335206661696C65642E20417272617920636F6E74656E74732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP4 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CODESIZE DUP4 CODECOPY POP POP DUP2 MLOAD SWAP2 SWAP4 POP PUSH1 0xF8 PUSH1 0x2 EXP SWAP2 DUP5 SWAP2 POP PUSH1 0x0 SWAP1 DUP2 LT PUSH2 0x3A3 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0xF8 PUSH1 0x2 EXP SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP3 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3E9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x40D PUSH2 0x3F8 DUP3 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD PUSH2 0x404 DUP5 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD DUP6 PUSH2 0xA0D JUMP JUMPDEST PUSH2 0x417 DUP3 DUP3 PUSH2 0xAA8 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x481 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54657374202332206661696C65642E20417272617920636F6E74656E74732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x48 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 DUP5 PUSH1 0x20 DUP3 ADD PUSH2 0x900 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP3 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH2 0x4FB JUMPI PUSH1 0xF DUP3 MOD PUSH1 0x1 ADD PUSH1 0xF8 PUSH1 0x2 EXP MUL DUP4 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x4D8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0xF8 PUSH1 0x2 EXP SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0x1 ADD SWAP2 POP PUSH2 0x4B5 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x529 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x550 PUSH2 0x538 DUP3 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD PUSH2 0x544 DUP6 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD PUSH1 0x8 DUP8 SUB PUSH2 0xA0D JUMP JUMPDEST PUSH2 0x55A DUP4 DUP3 PUSH2 0xAA8 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x23D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54657374202337206661696C65642E20417272617920636F6E74656E74732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 DUP2 MSTORE DUP3 DUP5 ADD SWAP1 SWAP4 MSTORE SWAP2 PUSH2 0x5E7 PUSH2 0x3F8 DUP3 PUSH2 0xA0A JUMP JUMPDEST PUSH2 0x5F1 DUP3 DUP3 PUSH2 0xAA8 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x481 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54657374202331206661696C65642E20417272617920636F6E74656E74732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xAC DUP1 DUP3 MSTORE PUSH1 0xE0 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x48 SWAP2 PUSH1 0x64 SWAP2 PUSH1 0x60 SWAP2 DUP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP2 DUP4 SWAP2 DUP4 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD PUSH2 0x1580 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP6 POP DUP8 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6BF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 SWAP4 POP JUMPDEST DUP8 DUP5 LT ISZERO PUSH2 0x740 JUMPI PUSH1 0xF DUP5 MOD PUSH1 0x1 ADD PUSH1 0xF8 PUSH1 0x2 EXP MUL DUP6 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x6EA JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0xF8 PUSH1 0x2 EXP SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF DUP5 MOD PUSH1 0x1 ADD PUSH1 0xF8 PUSH1 0x2 EXP MUL DUP7 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x71D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0xF8 PUSH1 0x2 EXP SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP4 PUSH1 0x1 ADD SWAP4 POP PUSH2 0x6C7 JUMP JUMPDEST DUP7 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x76E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP7 DUP5 LT ISZERO PUSH2 0x7F1 JUMPI PUSH1 0xF DUP3 MOD PUSH1 0x1 ADD PUSH1 0xF8 PUSH1 0x2 EXP MUL DUP4 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x799 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0xF8 PUSH1 0x2 EXP SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF DUP3 MOD PUSH1 0x1 ADD PUSH1 0xF8 PUSH1 0x2 EXP MUL DUP7 DUP4 DUP11 ADD DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x7CE JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0xF8 PUSH1 0x2 EXP SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP4 PUSH1 0x1 ADD SWAP4 POP PUSH2 0x776 JUMP JUMPDEST DUP7 DUP9 ADD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x821 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x845 PUSH2 0x830 DUP3 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD PUSH2 0x83C DUP8 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD DUP11 PUSH2 0xA0D JUMP JUMPDEST PUSH2 0x868 DUP9 PUSH2 0x852 DUP4 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD ADD PUSH2 0x85F DUP6 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD DUP10 PUSH2 0xA0D JUMP JUMPDEST PUSH2 0x872 DUP7 DUP3 PUSH2 0xAA8 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x8DC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54657374202336206661696C65642E20417272617920636F6E74656E74732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 DUP5 DUP1 DUP3 ADD PUSH2 0x400 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP3 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH2 0x959 JUMPI PUSH1 0xF DUP3 MOD PUSH1 0x1 ADD PUSH1 0xF8 PUSH1 0x2 EXP MUL DUP4 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x936 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0xF8 PUSH1 0x2 EXP SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0x1 ADD SWAP2 POP PUSH2 0x913 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x987 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x996 PUSH2 0x1B4 DUP3 PUSH2 0xA0A JUMP JUMPDEST PUSH2 0x9A0 DUP4 DUP3 PUSH2 0xAA8 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x23D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54657374202334206661696C65642E20417272617920636F6E74656E74732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST DUP1 ISZERO ISZERO PUSH2 0xA19 JUMPI PUSH2 0x481 JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0xA26 JUMPI PUSH2 0x481 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x20 DUP3 MOD PUSH1 0x0 DUP2 GT ISZERO PUSH2 0xA41 JUMPI PUSH1 0x1 DUP3 SUB SWAP2 POP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MUL JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0xA63 JUMPI DUP2 DUP7 ADD MLOAD DUP3 DUP9 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0xA48 JUMP JUMPDEST PUSH1 0x0 DUP4 GT ISZERO PUSH2 0xA9F JUMPI DUP3 PUSH1 0x20 SUB PUSH1 0x8 MUL PUSH1 0x2 EXP DUP3 DUP8 ADD MLOAD DUP2 DUP3 DUP3 DIV MUL DUP6 PUSH1 0x8 MUL PUSH1 0x2 EXP DUP6 DUP12 ADD MLOAD DUP2 DUP3 DUP3 MUL DIV DUP1 DUP5 OR DUP1 DUP10 DUP16 ADD MSTORE POP POP POP POP POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP5 MLOAD ADD DIV PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xAE7 JUMPI PUSH1 0x20 DUP2 MUL DUP6 DUP2 ADD MLOAD SWAP1 DUP6 ADD MLOAD DUP1 DUP3 EQ SWAP5 POP DUP5 PUSH2 0xADD JUMPI DUP4 SWAP3 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0xABB JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP STOP PUSH19 0x65206E6F74207468652073616D652E00000000 STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH8 0xAC05DEAE38337111 0x21 SAR 0xd6 PUSH22 0xDA7F43D78195C49B3A3D67C6E2F86677F5219A002900 ",
				"sourceMap": "691:6629:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;691:6629:0;;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052600436106100695763ffffffff60e060020a6000350416630a8e8e01811461006e5780631ad7be821461008557806366e41cb71461009a57806366e84d62146100af5780636b59084d146100c45780636f3babc4146100d95780638f0d282d146100ee575b600080fd5b34801561007a57600080fd5b50610083610103565b005b34801561009157600080fd5b50610083610243565b3480156100a657600080fd5b50610083610369565b3480156100bb57600080fd5b50610083610486565b3480156100d057600080fd5b506100836105c4565b3480156100e557600080fd5b5061008361065b565b3480156100fa57600080fd5b506100836108e6565b60408051600b8082528183019092526060906000908290846020820161016080388339019050509250600091505b8382101561017757600f820660010160f860020a02838381518110151561015457fe5b906020010190600160f860020a031916908160001a905350816001019150610131565b836040519080825280601f01601f1916602001820160405280156101a5578160200160208202803883390190505b5090506101c96101b482610a0a565b6020016101c085610a0a565b60200186610a0d565b6101d38382610aa8565b151561023d576040805160e560020a62461bcd02815260206004820152603060248201527f54657374202333206661696c65642e20417272617920636f6e74656e747320616044820152600080516020610af0833981519152606482015290519081900360840190fd5b50505050565b604080516048808252608082019092526060906000908290846020820161090080388339019050509250600091505b838210156102b857600f820660010160f860020a02838381518110151561029557fe5b906020010190600160f860020a031916908160001a905350816001019150610272565b836040519080825280601f01601f1916602001820160405280156102e6578160200160208202803883390190505b5090506102f56101b482610a0a565b6102ff8382610aa8565b151561023d576040805160e560020a62461bcd02815260206004820152603060248201527f54657374202335206661696c65642e20417272617920636f6e74656e747320616044820152600080516020610af0833981519152606482015290519081900360840190fd5b604080516001808252818301909252606090819083602080830190803883395050815191935060f860020a9184915060009081106103a357fe5b906020010190600160f860020a031916908160001a905350826040519080825280601f01601f1916602001820160405280156103e9578160200160208202803883390190505b50905061040d6103f882610a0a565b60200161040484610a0a565b60200185610a0d565b6104178282610aa8565b1515610481576040805160e560020a62461bcd02815260206004820152603060248201527f54657374202332206661696c65642e20417272617920636f6e74656e747320616044820152600080516020610af0833981519152606482015290519081900360840190fd5b505050565b604080516048808252608082019092526060906000908290846020820161090080388339019050509250600091505b838210156104fb57600f820660010160f860020a0283838151811015156104d857fe5b906020010190600160f860020a031916908160001a9053508160010191506104b5565b836040519080825280601f01601f191660200182016040528015610529578160200160208202803883390190505b50905061055061053882610a0a565b60200161054485610a0a565b60200160088703610a0d565b61055a8382610aa8565b151561023d576040805160e560020a62461bcd02815260206004820152603060248201527f54657374202337206661696c65642e20417272617920636f6e74656e747320616044820152600080516020610af0833981519152606482015290519081900360840190fd5b60408051600080825260208201818152828401909352916105e76103f882610a0a565b6105f18282610aa8565b1515610481576040805160e560020a62461bcd02815260206004820152603060248201527f54657374202331206661696c65642e20417272617920636f6e74656e747320616044820152600080516020610af0833981519152606482015290519081900360840190fd5b6040805160ac80825260e082019092526048916064916060918291600091839183918391906020820161158080388339019050509550876040519080825280601f01601f1916602001820160405280156106bf578160200160208202803883390190505b509450600093505b8784101561074057600f840660010160f860020a0285858151811015156106ea57fe5b906020010190600160f860020a031916908160001a905350600f840660010160f860020a02868581518110151561071d57fe5b906020010190600160f860020a031916908160001a9053508360010193506106c7565b866040519080825280601f01601f19166020018201604052801561076e578160200160208202803883390190505b509250600091505b868410156107f157600f820660010160f860020a02838381518110151561079957fe5b906020010190600160f860020a031916908160001a905350600f820660010160f860020a0286838a018151811015156107ce57fe5b906020010190600160f860020a031916908160001a905350836001019350610776565b8688016040519080825280601f01601f191660200182016040528015610821578160200160208202803883390190505b50905061084561083082610a0a565b60200161083c87610a0a565b6020018a610a0d565b6108688861085283610a0a565b6020010161085f85610a0a565b60200189610a0d565b6108728682610aa8565b15156108dc576040805160e560020a62461bcd02815260206004820152603060248201527f54657374202336206661696c65642e20417272617920636f6e74656e747320616044820152600080516020610af0833981519152606482015290519081900360840190fd5b5050505050505050565b60408051602080825281830190925260609060009082908480820161040080388339019050509250600091505b8382101561095957600f820660010160f860020a02838381518110151561093657fe5b906020010190600160f860020a031916908160001a905350816001019150610913565b836040519080825280601f01601f191660200182016040528015610987578160200160208202803883390190505b5090506109966101b482610a0a565b6109a08382610aa8565b151561023d576040805160e560020a62461bcd02815260206004820152603060248201527f54657374202334206661696c65642e20417272617920636f6e74656e747320616044820152600080516020610af0833981519152606482015290519081900360840190fd5b90565b801515610a1957610481565b82821415610a2657610481565b6020601f820104602082066000811115610a41576001820391505b6000602083025b80821015610a63578186015182880152602082019150610a48565b6000831115610a9f578260200360080260020a8287015181828204028560080260020a858b0151818282020480841780898f0152505050505050505b50505050505050565b60006020601f8451010460018101905060005b81811015610ae757602081028581015190850151808214945084610add578392505b5050600101610abb565b50509291505056007265206e6f74207468652073616d652e00000000000000000000000000000000a165627a7a7230582067ac05deae38337111211dd675da7f43d78195c49b3a3d67c6e2f86677f5219a0029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x69 JUMPI PUSH4 0xFFFFFFFF PUSH1 0xE0 PUSH1 0x2 EXP PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0xA8E8E01 DUP2 EQ PUSH2 0x6E JUMPI DUP1 PUSH4 0x1AD7BE82 EQ PUSH2 0x85 JUMPI DUP1 PUSH4 0x66E41CB7 EQ PUSH2 0x9A JUMPI DUP1 PUSH4 0x66E84D62 EQ PUSH2 0xAF JUMPI DUP1 PUSH4 0x6B59084D EQ PUSH2 0xC4 JUMPI DUP1 PUSH4 0x6F3BABC4 EQ PUSH2 0xD9 JUMPI DUP1 PUSH4 0x8F0D282D EQ PUSH2 0xEE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x83 PUSH2 0x103 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x83 PUSH2 0x243 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x83 PUSH2 0x369 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x83 PUSH2 0x486 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x83 PUSH2 0x5C4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x83 PUSH2 0x65B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x83 PUSH2 0x8E6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xB DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 DUP5 PUSH1 0x20 DUP3 ADD PUSH2 0x160 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP3 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH2 0x177 JUMPI PUSH1 0xF DUP3 MOD PUSH1 0x1 ADD PUSH1 0xF8 PUSH1 0x2 EXP MUL DUP4 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x154 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0xF8 PUSH1 0x2 EXP SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0x1 ADD SWAP2 POP PUSH2 0x131 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x1C9 PUSH2 0x1B4 DUP3 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD PUSH2 0x1C0 DUP6 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD DUP7 PUSH2 0xA0D JUMP JUMPDEST PUSH2 0x1D3 DUP4 DUP3 PUSH2 0xAA8 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x23D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54657374202333206661696C65642E20417272617920636F6E74656E74732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x48 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 DUP5 PUSH1 0x20 DUP3 ADD PUSH2 0x900 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP3 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH2 0x2B8 JUMPI PUSH1 0xF DUP3 MOD PUSH1 0x1 ADD PUSH1 0xF8 PUSH1 0x2 EXP MUL DUP4 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x295 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0xF8 PUSH1 0x2 EXP SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0x1 ADD SWAP2 POP PUSH2 0x272 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2E6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x2F5 PUSH2 0x1B4 DUP3 PUSH2 0xA0A JUMP JUMPDEST PUSH2 0x2FF DUP4 DUP3 PUSH2 0xAA8 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x23D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54657374202335206661696C65642E20417272617920636F6E74656E74732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP4 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CODESIZE DUP4 CODECOPY POP POP DUP2 MLOAD SWAP2 SWAP4 POP PUSH1 0xF8 PUSH1 0x2 EXP SWAP2 DUP5 SWAP2 POP PUSH1 0x0 SWAP1 DUP2 LT PUSH2 0x3A3 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0xF8 PUSH1 0x2 EXP SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP3 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3E9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x40D PUSH2 0x3F8 DUP3 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD PUSH2 0x404 DUP5 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD DUP6 PUSH2 0xA0D JUMP JUMPDEST PUSH2 0x417 DUP3 DUP3 PUSH2 0xAA8 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x481 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54657374202332206661696C65642E20417272617920636F6E74656E74732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x48 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 DUP5 PUSH1 0x20 DUP3 ADD PUSH2 0x900 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP3 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH2 0x4FB JUMPI PUSH1 0xF DUP3 MOD PUSH1 0x1 ADD PUSH1 0xF8 PUSH1 0x2 EXP MUL DUP4 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x4D8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0xF8 PUSH1 0x2 EXP SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0x1 ADD SWAP2 POP PUSH2 0x4B5 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x529 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x550 PUSH2 0x538 DUP3 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD PUSH2 0x544 DUP6 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD PUSH1 0x8 DUP8 SUB PUSH2 0xA0D JUMP JUMPDEST PUSH2 0x55A DUP4 DUP3 PUSH2 0xAA8 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x23D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54657374202337206661696C65642E20417272617920636F6E74656E74732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 DUP2 MSTORE DUP3 DUP5 ADD SWAP1 SWAP4 MSTORE SWAP2 PUSH2 0x5E7 PUSH2 0x3F8 DUP3 PUSH2 0xA0A JUMP JUMPDEST PUSH2 0x5F1 DUP3 DUP3 PUSH2 0xAA8 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x481 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54657374202331206661696C65642E20417272617920636F6E74656E74732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xAC DUP1 DUP3 MSTORE PUSH1 0xE0 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x48 SWAP2 PUSH1 0x64 SWAP2 PUSH1 0x60 SWAP2 DUP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP2 DUP4 SWAP2 DUP4 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD PUSH2 0x1580 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP6 POP DUP8 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6BF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 SWAP4 POP JUMPDEST DUP8 DUP5 LT ISZERO PUSH2 0x740 JUMPI PUSH1 0xF DUP5 MOD PUSH1 0x1 ADD PUSH1 0xF8 PUSH1 0x2 EXP MUL DUP6 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x6EA JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0xF8 PUSH1 0x2 EXP SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF DUP5 MOD PUSH1 0x1 ADD PUSH1 0xF8 PUSH1 0x2 EXP MUL DUP7 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x71D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0xF8 PUSH1 0x2 EXP SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP4 PUSH1 0x1 ADD SWAP4 POP PUSH2 0x6C7 JUMP JUMPDEST DUP7 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x76E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP7 DUP5 LT ISZERO PUSH2 0x7F1 JUMPI PUSH1 0xF DUP3 MOD PUSH1 0x1 ADD PUSH1 0xF8 PUSH1 0x2 EXP MUL DUP4 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x799 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0xF8 PUSH1 0x2 EXP SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF DUP3 MOD PUSH1 0x1 ADD PUSH1 0xF8 PUSH1 0x2 EXP MUL DUP7 DUP4 DUP11 ADD DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x7CE JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0xF8 PUSH1 0x2 EXP SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP4 PUSH1 0x1 ADD SWAP4 POP PUSH2 0x776 JUMP JUMPDEST DUP7 DUP9 ADD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x821 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x845 PUSH2 0x830 DUP3 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD PUSH2 0x83C DUP8 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD DUP11 PUSH2 0xA0D JUMP JUMPDEST PUSH2 0x868 DUP9 PUSH2 0x852 DUP4 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD ADD PUSH2 0x85F DUP6 PUSH2 0xA0A JUMP JUMPDEST PUSH1 0x20 ADD DUP10 PUSH2 0xA0D JUMP JUMPDEST PUSH2 0x872 DUP7 DUP3 PUSH2 0xAA8 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x8DC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54657374202336206661696C65642E20417272617920636F6E74656E74732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 DUP5 DUP1 DUP3 ADD PUSH2 0x400 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP3 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH2 0x959 JUMPI PUSH1 0xF DUP3 MOD PUSH1 0x1 ADD PUSH1 0xF8 PUSH1 0x2 EXP MUL DUP4 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x936 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0xF8 PUSH1 0x2 EXP SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH1 0x1 ADD SWAP2 POP PUSH2 0x913 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x987 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x996 PUSH2 0x1B4 DUP3 PUSH2 0xA0A JUMP JUMPDEST PUSH2 0x9A0 DUP4 DUP3 PUSH2 0xAA8 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x23D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54657374202334206661696C65642E20417272617920636F6E74656E74732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST DUP1 ISZERO ISZERO PUSH2 0xA19 JUMPI PUSH2 0x481 JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0xA26 JUMPI PUSH2 0x481 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x20 DUP3 MOD PUSH1 0x0 DUP2 GT ISZERO PUSH2 0xA41 JUMPI PUSH1 0x1 DUP3 SUB SWAP2 POP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MUL JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0xA63 JUMPI DUP2 DUP7 ADD MLOAD DUP3 DUP9 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0xA48 JUMP JUMPDEST PUSH1 0x0 DUP4 GT ISZERO PUSH2 0xA9F JUMPI DUP3 PUSH1 0x20 SUB PUSH1 0x8 MUL PUSH1 0x2 EXP DUP3 DUP8 ADD MLOAD DUP2 DUP3 DUP3 DIV MUL DUP6 PUSH1 0x8 MUL PUSH1 0x2 EXP DUP6 DUP12 ADD MLOAD DUP2 DUP3 DUP3 MUL DIV DUP1 DUP5 OR DUP1 DUP10 DUP16 ADD MSTORE POP POP POP POP POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP5 MLOAD ADD DIV PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xAE7 JUMPI PUSH1 0x20 DUP2 MUL DUP6 DUP2 ADD MLOAD SWAP1 DUP6 ADD MLOAD DUP1 DUP3 EQ SWAP5 POP DUP5 PUSH2 0xADD JUMPI DUP4 SWAP3 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0xABB JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP STOP PUSH19 0x65206E6F74207468652073616D652E00000000 STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH8 0xAC05DEAE38337111 0x21 SAR 0xd6 PUSH22 0xDA7F43D78195C49B3A3D67C6E2F86677F5219A002900 ",
				"sourceMap": "691:6629:0:-;;;;;;;;;-1:-1:-1;;;691:6629:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2242:842;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2242:842:0;;;;;;3938;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3938:842:0;;;;1477:759;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1477:759:0;;;;6389:929;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6389:929:0;;;;746:725;;8:9:-1;5:2;;;30:1;27;20:12;5:2;746:725:0;;;;4787:1596;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4787:1596:0;;;;3090:842;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3090:842:0;;;;2242;2433:17;;;2362:2;2433:17;;;;;;;;;2406:24;;2345:14;;2406:24;;2362:2;2433:17;;;17:15:-1;;105:10;2433:17:0;88:34:-1;136:17;;-1:-1;2433:17:0;2406:44;;2476:1;2464:13;;2460:107;2483:6;2479:1;:10;2460:107;;;2537:3;2533:1;:7;2544:1;2532:13;-1:-1:-1;;;2527:19:0;2510:11;2522:1;2510:14;;;;;;;;;;;;;;:36;-1:-1:-1;;;;;2510:36:0;;;;;;;;;2491:3;;;;;2460:107;;;2676:6;2666:17;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;2666:17:0;;2641:42;;2693:184;2713:24;2727:9;2713:13;:24::i;:::-;2740:2;2713:29;2787:26;2801:11;2787:13;:26::i;:::-;2816:2;2787:31;2861:6;2693;:184::i;:::-;2966:37;2980:11;2993:9;2966:13;:37::i;:::-;2945:132;;;;;;;-1:-1:-1;;;;;2945:132:0;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2945:132:0;;;;;;;;;;;;;;;2242:842;;;;:::o;3938:::-;4129:17;;;4058:2;4129:17;;;;;;;;;4102:24;;4041:14;;4102:24;;4058:2;4129:17;;;17:15:-1;;105:10;4129:17:0;88:34:-1;136:17;;-1:-1;4129:17:0;4102:44;;4172:1;4160:13;;4156:107;4179:6;4175:1;:10;4156:107;;;4233:3;4229:1;:7;4240:1;4228:13;-1:-1:-1;;;4223:19:0;4206:11;4218:1;4206:14;;;;;;;;;;;;;;:36;-1:-1:-1;;;;;4206:36:0;;;;;;;;;4187:3;;;;;4156:107;;;4372:6;4362:17;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;4362:17:0;;4337:42;;4389:184;4409:24;4423:9;4409:13;:24::i;4389:184::-;4662:37;4676:11;4689:9;4662:13;:37::i;:::-;4641:132;;;;;;;-1:-1:-1;;;;;4641:132:0;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;4641:132:0;;;;;;;;;;;;;;1477:759;1667:17;;;1597:1;1667:17;;;;;;;;;1640:24;;;;1597:1;1667:17;;;;;;105:10:-1;1667:17:0;88:34:-1;-1:-1;;1694:14:0;;1640:44;;-1:-1:-1;;;;1711:7:0;1640:44;;-1:-1:-1;1706:1:0;;1694:14;;;;;;;;;;:24;-1:-1:-1;;;;;1694:24:0;;;;;;;;;1828:6;1818:17;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1818:17:0;;1793:42;;1845:184;1865:24;1879:9;1865:13;:24::i;:::-;1892:2;1865:29;1939:26;1953:11;1939:13;:26::i;:::-;1968:2;1939:31;2013:6;1845;:184::i;:::-;2118:37;2132:11;2145:9;2118:13;:37::i;:::-;2097:132;;;;;;;-1:-1:-1;;;;;2097:132:0;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2097:132:0;;;;;;;;;;;;;;;1477:759;;;:::o;6389:929::-;6580:17;;;6509:2;6580:17;;;;;;;;;6553:24;;6492:14;;6553:24;;6509:2;6580:17;;;17:15:-1;;105:10;6580:17:0;88:34:-1;136:17;;-1:-1;6580:17:0;6553:44;;6623:1;6611:13;;6607:107;6630:6;6626:1;:10;6607:107;;;6684:3;6680:1;:7;6691:1;6679:13;-1:-1:-1;;;6674:19:0;6657:11;6669:1;6657:14;;;;;;;;;;;;;;:36;-1:-1:-1;;;;;6657:36:0;;;;;;;;;6638:3;;;;;6607:107;;;6823:6;6813:17;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;6813:17:0;;6788:42;;6840:237;6860:24;6874:9;6860:13;:24::i;:::-;6887:2;6860:29;6934:26;6948:11;6934:13;:26::i;:::-;6963:2;6934:31;7017:1;7008:6;:10;6840:6;:237::i;:::-;7200:37;7214:11;7227:9;7200:13;:37::i;:::-;7179:132;;;;;;;-1:-1:-1;;;;;7179:132:0;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7179:132:0;;;;;;;;;;;;;;746:725;936:17;;;849:14;936:17;;;;;;1053;;;;;;;;;849:14;1080:184;1100:24;1114:9;1100:13;:24::i;1080:184::-;1353:37;1367:11;1380:9;1353:13;:37::i;:::-;1332:132;;;;;;;-1:-1:-1;;;;;1332:132:0;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1332:132:0;;;;;;;;;;;;;;4787:1596;5035:28;;;5045:17;5035:28;;;;;;;;;4892:2;;4922:3;;5004:28;;;;4874:15;;5004:28;;4874:15;;5004:28;;5035;;;;17:15:-1;;105:10;5035:28:0;88:34:-1;136:17;;-1:-1;5035:28:0;5004:59;;5142:7;5132:18;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;5132:18:0;;5104:46;;5176:1;5164:13;;5160:173;5183:7;5179:1;:11;5160:173;;;5239:3;5235:1;:7;5246:1;5234:13;-1:-1:-1;;;5229:19:0;5211:12;5224:1;5211:15;;;;;;;;;;;;;;:37;-1:-1:-1;;;;;5211:37:0;;;;;;;;-1:-1:-1;5303:3:0;5299:1;:7;5310:1;5298:13;-1:-1:-1;;;5293:19:0;5272:15;5288:1;5272:18;;;;;;;;;;;;;;:40;-1:-1:-1;;;;;5272:40:0;;;;;;;;;5192:3;;;;;5160:173;;;5412:7;5402:18;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;5402:18:0;;5374:46;;5446:1;5434:13;;5430:181;5453:7;5449:1;:11;5430:181;;;5509:3;5505:1;:7;5516:1;5504:13;-1:-1:-1;;;5499:19:0;5481:12;5494:1;5481:15;;;;;;;;;;;;;;:37;-1:-1:-1;;;;;5481:37:0;;;;;;;;-1:-1:-1;5581:3:0;5577:1;:7;5588:1;5576:13;-1:-1:-1;;;5571:19:0;5542:15;5566:1;5558:7;:9;5542:26;;;;;;;;;;;;;;:48;-1:-1:-1;;;;;5542:48:0;;;;;;;;;5462:3;;;;;5430:181;;;5731:7;5721;:17;5711:28;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;5711:28:0;;5686:53;;5749:187;5769:24;5783:9;5769:13;:24::i;:::-;5796:2;5769:29;5844:27;5858:12;5844:13;:27::i;:::-;5874:2;5844:32;5919:7;5749:6;:187::i;:::-;5946:226;5998:7;5966:24;5980:9;5966:13;:24::i;:::-;5993:2;5966:29;:39;6071:27;6085:12;6071:13;:27::i;:::-;6101:2;6071:32;6155:7;5946:6;:226::i;:::-;6261:41;6275:15;6292:9;6261:13;:41::i;:::-;6240:136;;;;;;;-1:-1:-1;;;;;6240:136:0;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;6240:136:0;;;;;;;;;;;;;;;4787:1596;;;;;;;;:::o;3090:842::-;3281:17;;;3210:2;3281:17;;;;;;;;;3254:24;;3193:14;;3254:24;;3210:2;3281:17;;;17:15:-1;;105:10;3281:17:0;88:34:-1;136:17;;-1:-1;3281:17:0;3254:44;;3324:1;3312:13;;3308:107;3331:6;3327:1;:10;3308:107;;;3385:3;3381:1;:7;3392:1;3380:13;-1:-1:-1;;;3375:19:0;3358:11;3370:1;3358:14;;;;;;;;;;;;;;:36;-1:-1:-1;;;;;3358:36:0;;;;;;;;;3339:3;;;;;3308:107;;;3524:6;3514:17;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;3514:17:0;;3489:42;;3541:184;3561:24;3575:9;3561:13;:24::i;3541:184::-;3814:37;3828:11;3841:9;3814:13;:37::i;:::-;3793:132;;;;;;;-1:-1:-1;;;;;3793:132:0;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;3793:132:0;;;;;;;;;;;;;;629:203:2;786:5;629:203::o;961:3173::-;1122:11;;1119:23;;;1135:7;;1119:23;1164:4;1154:6;:14;1151:26;;;1170:7;;1151:26;1369:4;1362;1354:6;1350:17;1346:28;1416:4;1408:6;1404:17;1451:1;1440:9;1437:16;1434:2;;;1506:1;1492:12;1488:20;1472:36;;1434:2;1601:1;1636:4;1632:23;;1668:156;1697:9;1689:6;1686:21;1668:156;;;1801:6;1793;1789:19;1783:26;1773:6;1767:4;1763:17;1756:54;1731:4;1723:6;1719:17;1709:27;;1668:156;;;1891:1;1880:9;1877:16;1874:2;;;2492:9;2486:4;2482:20;2479:1;2475:28;2472:1;2468:36;2557:6;2549;2545:19;2539:26;2641:17;2621;2609:10;2605:34;2601:58;3349:9;3346:1;3342:17;3339:1;3335:25;3409:6;3403:4;3399:17;3393:24;3487:15;3469;3459:8;3455:30;3451:52;3980:9;3967:11;3964:26;4087:16;4078:6;4072:4;4068:17;4061:43;1894:2224;;;;;;;1874:2;1238:2890;;;;;;;:::o;1091:899:1:-;1197:10;1350:4;1343;1337:3;1331:10;1327:21;1323:32;1480:3;1466:12;1462:22;1446:38;;1611:1;1597:356;1620:12;1617:1;1614:19;1597:356;;;1706:4;1699:12;;1690:22;;;1684:29;1751:22;;;1745:29;1800:20;;;;-1:-1:-1;1800:20:1;1837:2;;1909:12;1904:17;;1837:2;-1:-1:-1;;1647:1:1;1640:9;1597:356;;;-1:-1:-1;;1091:899:1;;;;:::o"
			}
		}
	},
	"sources": {
		"current/test/TestLibMem/TestLibMem.sol": {
			"id": 0
		},
		"current/utils/LibBytes/LibBytes.sol": {
			"id": 1
		},
		"current/utils/LibMem/LibMem.sol": {
			"id": 2
		}
	},
	"sourceCodes": {
		"current/test/TestLibMem/TestLibMem.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../../utils/LibMem/LibMem.sol\";\nimport \"../../utils/LibBytes/LibBytes.sol\";\n\ncontract TestLibMem is\n    LibMem,\n    LibBytes\n{\n\n    function test1()\n        public\n        pure\n    {\n        // Length of array & length to copy\n        uint256 length = 0;\n\n        // Create source array\n        bytes memory sourceArray = new bytes(length);\n\n        // Create dest array with same contents as source array\n        bytes memory destArray = new bytes(length);\n        memcpy(\n            getMemAddress(destArray) + 32,   // skip copying array length\n            getMemAddress(sourceArray) + 32, // skip copying array length\n            length\n        );\n\n        // Verify contents of source & dest arrays match\n        require(\n            areBytesEqual(sourceArray, destArray),\n            \"Test #1 failed. Array contents are not the same.\"\n        );\n    }\n\n    function test2()\n        public\n        pure\n    {\n        // Length of array & length to copy\n        uint256 length = 1;\n\n        // Create source array\n        bytes memory sourceArray = new bytes(length);\n        sourceArray[0] = byte(1);\n\n        // Create dest array with same contents as source array\n        bytes memory destArray = new bytes(length);\n        memcpy(\n            getMemAddress(destArray) + 32,   // skip copying array length\n            getMemAddress(sourceArray) + 32, // skip copying array length\n            length\n        );\n\n        // Verify contents of source & dest arrays match\n        require(\n            areBytesEqual(sourceArray, destArray),\n            \"Test #2 failed. Array contents are not the same.\"\n        );\n    }\n\n    function test3()\n        public\n        pure\n    {\n        // Length of array & length to copy\n        uint256 length = 11;\n\n        // Create source array\n        bytes memory sourceArray = new bytes(length);\n        for(uint256 i = 0; i < length; ++i) {\n            sourceArray[i] = byte((i % 0xF) + 1); // [1..f]\n        }\n\n        // Create dest array with same contents as source array\n        bytes memory destArray = new bytes(length);\n        memcpy(\n            getMemAddress(destArray) + 32,   // skip copying array length\n            getMemAddress(sourceArray) + 32, // skip copying array length\n            length\n        );\n\n        // Verify contents of source & dest arrays match\n        require(\n            areBytesEqual(sourceArray, destArray),\n            \"Test #3 failed. Array contents are not the same.\"\n        );\n    }\n\n    function test4()\n        public\n        pure\n    {\n        // Length of array & length to copy\n        uint256 length = 32;\n\n        // Create source array\n        bytes memory sourceArray = new bytes(length);\n        for(uint256 i = 0; i < length; ++i) {\n            sourceArray[i] = byte((i % 0xF) + 1); // [1..f]\n        }\n\n        // Create dest array with same contents as source array\n        bytes memory destArray = new bytes(length);\n        memcpy(\n            getMemAddress(destArray) + 32,   // skip copying array length\n            getMemAddress(sourceArray) + 32, // skip copying array length\n            length\n        );\n\n        // Verify contents of source & dest arrays match\n        require(\n            areBytesEqual(sourceArray, destArray),\n            \"Test #4 failed. Array contents are not the same.\"\n        );\n    }\n\n    function test5()\n        public\n        pure\n    {\n        // Length of array & length to copy\n        uint256 length = 72;\n\n        // Create source array\n        bytes memory sourceArray = new bytes(length);\n        for(uint256 i = 0; i < length; ++i) {\n            sourceArray[i] = byte((i % 0xF) + 1); // [1..f]\n        }\n\n        // Create dest array with same contents as source array\n        bytes memory destArray = new bytes(length);\n        memcpy(\n            getMemAddress(destArray) + 32,   // skip copying array length\n            getMemAddress(sourceArray) + 32, // skip copying array length\n            length\n        );\n\n        // Verify contents of source & dest arrays match\n        require(\n            areBytesEqual(sourceArray, destArray),\n            \"Test #5 failed. Array contents are not the same.\"\n        );\n    }\n\n\n    function test6()\n        public\n        pure\n    {\n        // Length of arrays\n        uint256 length1 = 72;\n        uint256 length2 = 100;\n\n        // The full source array is used for comparisons at the end\n        bytes memory fullSourceArray = new bytes(length1 + length2);\n\n        // First source array\n        bytes memory sourceArray1 = new bytes(length1);\n        for(uint256 i = 0; i < length1; ++i) {\n            sourceArray1[i] = byte((i % 0xF) + 1); // [1..f]\n            fullSourceArray[i] = byte((i % 0xF) + 1); // [1..f]\n        }\n\n        // Second source array\n        bytes memory sourceArray2 = new bytes(length2);\n        for(uint256 j = 0; i < length2; ++i) {\n            sourceArray2[j] = byte((j % 0xF) + 1); // [1..f]\n            fullSourceArray[length1+j] = byte((j % 0xF) + 1); // [1..f]\n        }\n\n        // Create dest array with same contents as source arrays\n        bytes memory destArray = new bytes(length1 + length2);\n        memcpy(\n            getMemAddress(destArray) + 32,    // skip copying array length\n            getMemAddress(sourceArray1) + 32, // skip copying array length\n            length1\n        );\n        memcpy(\n            getMemAddress(destArray) + 32 + length1,   // skip copying array length + sourceArray1 bytes\n            getMemAddress(sourceArray2) + 32,          // skip copying array length\n            length2\n        );\n\n        // Verify contents of source & dest arrays match\n        require(\n            areBytesEqual(fullSourceArray, destArray),\n            \"Test #6 failed. Array contents are not the same.\"\n        );\n    }\n\n    function test7()\n        public\n        pure\n    {\n        // Length of array & length to copy\n        uint256 length = 72;\n\n        // Create source array\n        bytes memory sourceArray = new bytes(length);\n        for(uint256 i = 0; i < length; ++i) {\n            sourceArray[i] = byte((i % 0xF) + 1); // [1..f]\n        }\n\n        // Create dest array with same contents as source array\n        bytes memory destArray = new bytes(length);\n        memcpy(\n            getMemAddress(destArray) + 32,   // skip copying array length\n            getMemAddress(sourceArray) + 32, // skip copying array length\n            length - 8                       // Copy all but last byte.\n        );\n\n        // Verify contents of source & dest arrays match\n        // We expect this to fail\n        require(\n            areBytesEqual(sourceArray, destArray),\n            \"Test #7 failed. Array contents are not the same.\"\n        );\n    }\n}\n",
		"current/utils/LibBytes/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../LibMem/LibMem.sol\";\n\ncontract LibBytes is\n    LibMem\n{\n\n    // Revert reasons\n    string constant GTE_20_LENGTH_REQUIRED = \"Length must be greater than or equal to 20.\";\n    string constant GTE_32_LENGTH_REQUIRED = \"Length must be greater than or equal to 32.\";\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function areBytesEqual(bytes memory lhs, bytes memory rhs)\n        internal\n        pure\n        returns (bool equal)\n    {\n        assembly {\n            // Get the number of words occupied by <lhs>\n            let lenFullWords := div(add(mload(lhs), 0x1F), 0x20)\n\n            // Add 1 to the number of words, to account for the length field\n            lenFullWords := add(lenFullWords, 0x1)\n\n            // Test equality word-by-word.\n            // Terminates early if there is a mismatch.\n            for {let i := 0} lt(i, lenFullWords) {i := add(i, 1)} {\n                let lhsWord := mload(add(lhs, mul(i, 0x20)))\n                let rhsWord := mload(add(rhs, mul(i, 0x20)))\n                equal := eq(lhsWord, rhsWord)\n                if eq(equal, 0) {\n                    // Break\n                    i := lenFullWords\n                }\n            }\n       }\n\n       return equal;\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GTE_20_LENGTH_REQUIRED\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GTE_20_LENGTH_REQUIRED\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(mload(add(b, index)), 0xffffffffffffffffffffffff0000000000000000000000000000000000000000)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            GTE_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            GTE_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        return uint256(readBytes32(b, index));\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readBytes(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        require(\n            b.length >= index + 32,\n            GTE_32_LENGTH_REQUIRED\n        );\n        uint256 nestedBytesLength = readUint256(b, index);\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + 32 + nestedBytesLength,\n            GTE_32_LENGTH_REQUIRED\n        );\n\n        // Allocate memory and copy value to result\n        result = new bytes(nestedBytesLength);\n        memcpy(\n            getMemAddress(result) + 32,    // +32 skips array length\n            getMemAddress(b) + index + 32, // +32 skips array length\n            nestedBytesLength\n        );\n\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeBytes(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Read length of nested bytes\n        require(\n            b.length >= index + 32 /* 32 bytes to store length */ + input.length,\n            GTE_32_LENGTH_REQUIRED\n        );\n\n        // Copy <input> into <b>\n        memcpy(\n            getMemAddress(b) + index,\n            getMemAddress(input),\n            input.length + 32 /* 32 bytes to store length */\n        );\n    }\n}\n",
		"current/utils/LibMem/LibMem.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibMem {\n\n    function getMemAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 address_)\n    {\n        assembly {\n            address_ := input\n        }\n        return address_;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param dest memory adress to copy bytes to\n    function memcpy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        // Base cases\n        if(length == 0) return;\n        if(source == dest) return;\n\n        // Copy bytes from source to dest\n        assembly {\n            // Compute number of complete words to copy + remaining bytes\n            let lenFullWords := div(add(length, 0x1F), 0x20)\n            let remainder := mod(length, 0x20)\n            if gt(remainder, 0) {\n                lenFullWords := sub(lenFullWords, 1)\n            }\n\n            // Copy full words from source to dest\n            let offset := 0\n            let maxOffset := mul(0x20, lenFullWords)\n            for {offset := 0} lt(offset, maxOffset) {offset := add(offset, 0x20)} {\n                mstore(add(dest, offset),  mload(add(source, offset)))\n            }\n\n            // Copy remaining bytes\n            if gt(remainder, 0) {\n                // Read a full word from source, containing X bytes to copy to dest.\n                // We only want to keep the X bytes, zeroing out the remaining bytes.\n                // We accomplish this by a right shift followed by a left shift.\n                // Example:\n                //   Suppose a word of 8 bits has all 1's: [11111111]\n                //   Let X = 7 (we want to copy the first 7 bits)\n                //   Apply a right shift of 1: [01111111]\n                //   Apply a left shift of 1: [11111110]\n                let sourceShiftFactor := exp(2, mul(8, sub(0x20, remainder)))\n                let sourceWord := mload(add(source, offset))\n                let sourceBytes := mul(div(sourceWord, sourceShiftFactor), sourceShiftFactor)\n\n                // Read a full word from dest, containing (32-X) bytes to retain.\n                // We need to zero out the remaining bytes to be overwritten by source,\n                // while retaining the (32-X) bytes we don't want to overwrite.\n                // We accomplish this by a left shift followed by a right shift.\n                // Example:\n                //   Suppose a word of 8 bits has all 1's: [11111111]\n                //   Let X = 7 (we want to free the first 7 bits, and retain the last bit)\n                //   Apply a left shift of 1: [11111110]\n                //   Apply a right shift of 1: [01111111]\n                let destShiftFactor := exp(2, mul(8, remainder))\n                let destWord := mload(add(dest, offset))\n                let destBytes := div(mul(destWord, destShiftFactor), destShiftFactor)\n\n                // Combine the source and dest bytes. There should be no overlap:\n                // The source bytes run from [0..X-1] and the dest bytes from [X..31].\n                // Example:\n                //   Following the example from above, we have [11111110]\n                //   from the source word and [01111111] from the dest word.\n                //   Combine these words using <or> to get [11111111].\n                let combinedDestWord := or(sourceBytes, destBytes)\n\n                // Store the combined word into dest\n                mstore(add(dest, offset), combinedDestWord)\n            }\n        }\n    }\n}\n"
	},
	"sourceTreeHashHex": "0xf45d12e126b33208e2fbeaace11772a55a3af087866a1f088c5eb17d3e9cae4d",
	"compiler": {
		"name": "solc",
		"version": "0.4.24",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 0
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"networks": {}
}