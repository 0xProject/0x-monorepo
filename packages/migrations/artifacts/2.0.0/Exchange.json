{
	"schemaVersion": "2.0.0",
	"contractName": "Exchange",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "filled",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "takerAssetFillAmounts",
						"type": "uint256[]"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "batchFillOrders",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "cancelled",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "hash",
						"type": "bytes32"
					},
					{
						"name": "signer",
						"type": "address"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "preSign",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "uint8"
					}
				],
				"name": "assetProxies",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "leftOrder",
						"type": "tuple"
					},
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "rightOrder",
						"type": "tuple"
					},
					{
						"name": "leftSignature",
						"type": "bytes"
					},
					{
						"name": "rightSignature",
						"type": "bytes"
					}
				],
				"name": "matchOrders",
				"outputs": [
					{
						"components": [
							{
								"components": [
									{
										"name": "makerAssetFilledAmount",
										"type": "uint256"
									},
									{
										"name": "takerAssetFilledAmount",
										"type": "uint256"
									},
									{
										"name": "makerFeePaid",
										"type": "uint256"
									},
									{
										"name": "takerFeePaid",
										"type": "uint256"
									}
								],
								"name": "left",
								"type": "tuple"
							},
							{
								"components": [
									{
										"name": "makerAssetFilledAmount",
										"type": "uint256"
									},
									{
										"name": "takerAssetFilledAmount",
										"type": "uint256"
									},
									{
										"name": "makerFeePaid",
										"type": "uint256"
									},
									{
										"name": "takerFeePaid",
										"type": "uint256"
									}
								],
								"name": "right",
								"type": "tuple"
							},
							{
								"name": "leftMakerAssetSpreadAmount",
								"type": "uint256"
							}
						],
						"name": "matchedFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "order",
						"type": "tuple"
					},
					{
						"name": "takerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "fillOrderNoThrow",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "fillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					}
				],
				"name": "batchCancelOrders",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "takerAssetFillAmounts",
						"type": "uint256[]"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "batchFillOrKillOrders",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "targetOrderEpoch",
						"type": "uint256"
					}
				],
				"name": "cancelOrdersUpTo",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "takerAssetFillAmounts",
						"type": "uint256[]"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "batchFillOrdersNoThrow",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "assetProxyId",
						"type": "uint8"
					},
					{
						"name": "newAssetProxy",
						"type": "address"
					},
					{
						"name": "oldAssetProxy",
						"type": "address"
					}
				],
				"name": "registerAssetProxy",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "transactions",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "order",
						"type": "tuple"
					},
					{
						"name": "takerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "fillOrKillOrder",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "fillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "validator",
						"type": "address"
					},
					{
						"name": "approval",
						"type": "bool"
					}
				],
				"name": "setSignatureValidatorApproval",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "address"
					},
					{
						"name": "",
						"type": "address"
					}
				],
				"name": "allowedValidators",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "takerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "marketSellOrders",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "bytes32"
					},
					{
						"name": "",
						"type": "address"
					}
				],
				"name": "preSigned",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "assetProxyId",
						"type": "uint8"
					}
				],
				"name": "getAssetProxy",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "hash",
						"type": "bytes32"
					},
					{
						"name": "signer",
						"type": "address"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "isValidSignature",
				"outputs": [
					{
						"name": "isValid",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "makerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "marketBuyOrdersNoThrow",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "order",
						"type": "tuple"
					},
					{
						"name": "takerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "fillOrder",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "fillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "salt",
						"type": "uint256"
					},
					{
						"name": "signer",
						"type": "address"
					},
					{
						"name": "data",
						"type": "bytes"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "executeTransaction",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "order",
						"type": "tuple"
					}
				],
				"name": "getOrderInfo",
				"outputs": [
					{
						"components": [
							{
								"name": "orderStatus",
								"type": "uint8"
							},
							{
								"name": "orderHash",
								"type": "bytes32"
							},
							{
								"name": "orderTakerAssetFilledAmount",
								"type": "uint256"
							}
						],
						"name": "orderInfo",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "order",
						"type": "tuple"
					}
				],
				"name": "cancelOrder",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "address"
					},
					{
						"name": "",
						"type": "address"
					}
				],
				"name": "orderEpoch",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "takerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "marketSellOrdersNoThrow",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "makerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "marketBuyOrders",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "currentContextAddress",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "VERSION",
				"outputs": [
					{
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "_zrxAssetData",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "id",
						"type": "uint8"
					},
					{
						"indexed": false,
						"name": "newAssetProxy",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "oldAssetProxy",
						"type": "address"
					}
				],
				"name": "AssetProxySet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "makerAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "takerAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "feeRecipientAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "makerAssetFilledAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "takerAssetFilledAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "makerFeePaid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "takerFeePaid",
						"type": "uint256"
					},
					{
						"indexed": true,
						"name": "orderHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"name": "makerAssetData",
						"type": "bytes"
					},
					{
						"indexed": false,
						"name": "takerAssetData",
						"type": "bytes"
					}
				],
				"name": "Fill",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "makerAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "feeRecipientAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "orderHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"name": "makerAssetData",
						"type": "bytes"
					},
					{
						"indexed": false,
						"name": "takerAssetData",
						"type": "bytes"
					}
				],
				"name": "Cancel",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "makerAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "senderAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "orderEpoch",
						"type": "uint256"
					}
				],
				"name": "CancelUpTo",
				"type": "event"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x60806040523480156200001157600080fd5b50604051620046e7380380620046e783398101806040526200003791908101906200016a565b60008054600160a060020a03191633179055805181906200006090600490602084019062000069565b5050506200022c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000ac57805160ff1916838001178555620000dc565b82800160010185558215620000dc579182015b82811115620000dc578251825591602001919060010190620000bf565b50620000ea929150620000ee565b5090565b6200010b91905b80821115620000ea5760008155600101620000f5565b90565b6000601f820183136200012057600080fd5b8151620001376200013182620001d1565b620001aa565b915080825260208301602083018583830111156200015457600080fd5b62000161838284620001f9565b50505092915050565b6000602082840312156200017d57600080fd5b81516001604060020a038111156200019457600080fd5b620001a2848285016200010e565b949350505050565b6040518181016001604060020a0381118282101715620001c957600080fd5b604052919050565b60006001604060020a03821115620001e857600080fd5b506020601f91909101601f19160190565b60005b8381101562000216578181015183820152602001620001fc565b8381111562000226576000848401525b50505050565b6144ab806200023c6000396000f3006080604052600436106101955763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663288cdc91811461019a578063297bb70b146101d05780632ac12622146101fd5780633683ef8e1461022a578063380771641461024c5780633c28d861146102795780633e228bae146102a65780634ac14782146102c65780634d0ae546146102e65780634f9559b11461030657806350dde190146103265780635c78d0c714610346578063642f2eaf1461036657806364a3bc151461038657806377fcce68146103a65780637b8e3514146103c65780637e1d9808146103e657806382c174d0146104065780638da5cb5b1461042657806392c1421e146104485780639363470214610468578063a3e2038014610488578063b4be83d5146104a8578063bfc8bfce146104c8578063c75e0a81146104e8578063d46b02c314610515578063d9bfa73e14610535578063dd1c7d1814610555578063e5fa431b14610575578063eea086ba14610595578063f2fde38b146105aa578063ffa1ad74146105ca575b600080fd5b3480156101a657600080fd5b506101ba6101b5366004613cca565b6105ec565b6040516101c79190614360565b60405180910390f35b3480156101dc57600080fd5b506101f06101eb366004613bcf565b6105fe565b6040516101c79190614335565b34801561020957600080fd5b5061021d610218366004613cca565b61068e565b6040516101c7919061421b565b34801561023657600080fd5b5061024a610245366004613d07565b6106a3565b005b34801561025857600080fd5b5061026c610267366004613fa1565b610771565b6040516101c79190614306565b34801561028557600080fd5b50610299610294366004613dff565b61078c565b6040516101c79190614343565b3480156102b257600080fd5b506101f06102c1366004613ebf565b610878565b3480156102d257600080fd5b5061024a6102e1366004613b9a565b610a88565b3480156102f257600080fd5b506101f0610301366004613bcf565b610ac0565b34801561031257600080fd5b5061024a610321366004613cca565b610b47565b34801561033257600080fd5b506101f0610341366004613bcf565b610c67565b34801561035257600080fd5b5061024a610361366004613fdd565b610cee565b34801561037257600080fd5b5061021d610381366004613cca565b610f1c565b34801561039257600080fd5b506101f06103a1366004613ebf565b610f31565b3480156103b257600080fd5b5061024a6103c1366004613b6a565b610fae565b3480156103d257600080fd5b5061021d6103e1366004613b30565b610ff3565b3480156103f257600080fd5b506101f0610401366004613c63565b611013565b34801561041257600080fd5b5061021d610421366004613ce8565b6110eb565b34801561043257600080fd5b5061043b61110b565b6040516101c79190614198565b34801561045457600080fd5b5061043b610463366004613fa1565b61111a565b34801561047457600080fd5b5061021d610483366004613d6f565b611138565b34801561049457600080fd5b506101f06104a3366004613c63565b611914565b3480156104b457600080fd5b506101f06104c3366004613ebf565b611a24565b3480156104d457600080fd5b5061024a6104e3366004613f08565b611aa8565b3480156104f457600080fd5b50610508610503366004613dca565b611dda565b6040516101c79190614352565b34801561052157600080fd5b5061024a610530366004613dca565b611ec9565b34801561054157600080fd5b506101ba610550366004613b30565b611ef4565b34801561056157600080fd5b506101f0610570366004613c63565b611f11565b34801561058157600080fd5b506101f0610590366004613c63565b611fd7565b3480156105a157600080fd5b5061043b6120b2565b3480156105b657600080fd5b5061024a6105c5366004613b12565b6120c1565b3480156105d657600080fd5b506105df612129565b6040516101c79190614314565b60016020526000908152604090205481565b610606613738565b6000610610613738565b600091505b85518210156106855761066e868381518110151561062f57fe5b90602001906020020151868481518110151561064757fe5b90602001906020020151868581518110151561065f57fe5b90602001906020020151611a24565b905061067a8382612160565b600190910190610615565b50509392505050565b60026020526000908152604090205460ff1681565b6106de848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843750611138945050505050565b60408051808201909152601181527f494e56414c49445f5349474e4154555245000000000000000000000000000000602082015290151561073e5760405160e560020a62461bcd0281526004016107359190614314565b60405180910390fd5b5050506000918252600560209081526040808420600160a060020a0390931684529190529020805460ff19166001179055565b600960205260009081526040902054600160a060020a031681565b610794613761565b61079c613790565b6107a4613790565b61016080880151610140808901919091528801519087015260006107c788611dda565b92506107d287611dda565b91506107dc6121c2565b90506107e888886121f1565b6107fc888885604001518560400151612271565b80516020015190945061081690899085908490808b612335565b602080850151015161082f90889084908490808a612335565b61084888828560200151866040015188600001516125d5565b61086187828460200151856040015188602001516125d5565b61086d88888387612674565b505050949350505050565b610880613738565b604080517fb4be83d5000000000000000000000000000000000000000000000000000000008082526060600483018181528851606485019081526020808b01516084870152958a015160a48601529189015160c4850152608089015160e485015260a089015161010485015260c089015161012485015260e0890151610144850152610100890151610164850152610120890151610184850152610140890180516101a486019081526101608b01516101c487015261018090525180516101e48601819052939591938493926024870192849261020489019291820191601f82010460005b81811015610983578351855260209485019490930192600101610965565b50505050818103610160808401919091528c0151805180835260209283019291820191601f82010460005b818110156109cc5783518552602094850194909301926001016109ae565b5050508b84525084810360209384019081528a518083529093918201918b81019190601f82010460005b81811015610a145783518552602094850194909301926001016109f6565b5060808a8b86038c305af4808015610a335760018114610a5157610a74565b60008e52600060208f0152600060408f0152600060608f0152610a74565b8b518e5260208c015160208f015260408c015160408f015260608c015160608f01525b505050505050505050505050509392505050565b60005b8151811015610abc57610ab48282815181101515610aa557fe5b90602001906020020151611ec9565b600101610a8b565b5050565b610ac8613738565b6000610ad2613738565b600091505b855182101561068557610b308683815181101515610af157fe5b906020019060200201518684815181101515610b0957fe5b906020019060200201518685815181101515610b2157fe5b90602001906020020151610f31565b9050610b3c8382612160565b600190910190610ad7565b600080600080610b556121c2565b9350600160a060020a0384163314610b6d5733610b70565b60005b600160a060020a038086166000908152600360209081526040808320938516835292815290829020548251808401909352601783527f494e56414c49445f4e45575f4f524445525f45504f434800000000000000000091830191909152919450600187019350909150818311610bfc5760405160e560020a62461bcd0281526004016107359190614314565b50600160a060020a0380851660008181526003602090815260408083209488168084529490915290819020859055517f82af639571738f4ebd4268fb0363d8957ebe1bbb9e78dba5ebd69eed39b154f090610c58908690614360565b60405180910390a35050505050565b610c6f613738565b6000610c79613738565b600091505b855182101561068557610cd78683815181101515610c9857fe5b906020019060200201518684815181101515610cb057fe5b906020019060200201518685815181101515610cc857fe5b90602001906020020151610878565b9050610ce38382612160565b600190910190610c7e565b6000805481908190600160a060020a03163314610d205760405160e560020a62461bcd02815260040161073590614325565b60ff8616600090815260096020908152604091829020548251808401909352601483527f41535345545f50524f58595f4d49534d4154434800000000000000000000000091830191909152600160a060020a03908116945085168414610d9c5760405160e560020a62461bcd0281526004016107359190614314565b50849150600160a060020a03821615610ea05781600160a060020a031663ae25532e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610e0657600080fd5b505af1158015610e1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e3e9190810190613fbf565b60408051808201909152601781527f41535345545f50524f58595f49445f4d49534d41544348000000000000000000602082015290915060ff80831690881614610e9e5760405160e560020a62461bcd0281526004016107359190614314565b505b60ff861660009081526009602052604090819020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038516179055517f27ef5f484e50f2daf7c2d82c60fe4ce409009541176eb64095beac369db1d26090610f0c9088908890889061436e565b60405180910390a1505050505050565b60076020526000908152604090205460ff1681565b610f39613738565b610f44848484611a24565b9050828160200151146040805190810160405280601481526020017f434f4d504c4554455f46494c4c5f4641494c4544000000000000000000000000815250901515610fa65760405160e560020a62461bcd0281526004016107359190614314565b509392505050565b6000610fb86121c2565b600160a060020a03908116600090815260066020908152604080832096909316825294909452909220805460ff191691151591909117905550565b600660209081526000928352604080842090915290825290205460ff1681565b61101b613738565b6060600080611028613738565b87600081518110151561103757fe5b9060200190602002015161016001519350600092505b87518310156110e05783888481518110151561106557fe5b906020019060200201516101600181905250611085878660200151612850565b91506110b1888481518110151561109857fe5b9060200190602002015183888681518110151561065f57fe5b8451600101855290506110c48582612160565b86856020015114156110d5576110e0565b60019092019161104d565b505050509392505050565b600560209081526000928352604080842090915290825290205460ff1681565b600054600160a060020a031681565b60ff16600090815260096020526040902054600160a060020a031690565b6000806000806000806000808851116040805190810160405280601e81526020017f4c454e4754485f475245415445525f5448414e5f305f524551554952454400008152509015156111a05760405160e560020a62461bcd0281526004016107359190614314565b506111aa88612862565b60f860020a900460ff1660088111156111bf57fe5b955060008660088111156111cf57fe5b141561122357604080518082018252601181527f5349474e41545552455f494c4c4547414c0000000000000000000000000000006020820152905160e560020a62461bcd0281526107359190600401614314565b600186600881111561123157fe5b141561129957875160408051808201909152601181527f4c454e4754485f315f52455155495245440000000000000000000000000000006020820152901561128f5760405160e560020a62461bcd0281526004016107359190614314565b5060009650611907565b60028660088111156112a757fe5b14156113af57875160408051808201909152601281527f4c454e4754485f36365f524551554952454400000000000000000000000000006020820152906041146113075760405160e560020a62461bcd0281526004016107359190614314565b5087600081518110151561131757fe5b016020015160f860020a908190048102049450611335886001612917565b9350611342886021612917565b925060018a86868660405160008152602001604052604051611367949392919061427f565b60206040516020810390808403906000865af115801561138b573d6000803e3d6000fd5b5050604051601f190151600160a060020a038b811690821614985092506119079050565b60038660088111156113bd57fe5b141561156957875160408051808201909152601281527f4c454e4754485f36365f5245515549524544000000000000000000000000000060208201529060411461141d5760405160e560020a62461bcd0281526004016107359190614314565b5087600081518110151561142d57fe5b016020015160f860020a90819004810204945061144b886001612917565b9350611458886021612917565b925060016040805190810160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152508b6040516020018083805190602001908083835b602083106114c55780518252601f1990920191602091820191016114a6565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b602083106115255780518252601f199092019160209182019101611506565b51815160209384036101000a60001901801990921691161790526040805192909401829003822060008352910192839052611367945092508991899150889061427f565b600486600881111561157757fe5b14156115e957875160408051808201909152601181527f4c454e4754485f315f5245515549524544000000000000000000000000000000602082015290156115d55760405160e560020a62461bcd0281526004016107359190614314565b50600160a060020a03891633149650611907565b60058660088111156115f757fe5b141561169d576040517f1626ba7e000000000000000000000000000000000000000000000000000000008152600160a060020a038a1690631626ba7e90611644908d908c9060040161425f565b602060405180830381600087803b15801561165e57600080fd5b505af1158015611672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116969190810190613cac565b9650611907565b60068660088111156116ab57fe5b141561173e576116ba886129ab565b600160a060020a03808b1660009081526006602090815260408083209385168352929052205490915060ff1615156116f55760009650611907565b6040517f93634702000000000000000000000000000000000000000000000000000000008152600160a060020a03821690639363470290611644908d908d908d90600401614229565b600786600881111561174c57fe5b141561177f5760008a8152600560209081526040808320600160a060020a038d16845290915290205460ff169650611907565b600886600881111561178d57fe5b141561187857875160408051808201909152601281527f4c454e4754485f36365f524551554952454400000000000000000000000000006020820152906041146117ed5760405160e560020a62461bcd0281526004016107359190614314565b508760008151811015156117fd57fe5b016020015160f860020a90819004810204945061181b886001612917565b9350611828886021612917565b604080518082018252601b8082527f19457468657265756d205369676e6564204d6573736167653a0a4100000000006020808401918252935194975060019492938f9301918291908083836114c5565b600786600881111561188657fe5b14156118b95760008a8152600560209081526040808320600160a060020a038d16845290915290205460ff169650611907565b604080518082018252601581527f5349474e41545552455f554e535550504f5254454400000000000000000000006020820152905160e560020a62461bcd0281526107359190600401614314565b5050505050509392505050565b61191c613738565b6060600080600061192b613738565b88600081518110151561193a57fe5b9060200190602002015161014001519450600093505b8851841015611a185784898581518110151561196857fe5b6020908102909101015161014001528551611984908990612850565b92506119c7898581518110151561199757fe5b9060200190602002015160a001518a868151811015156119b357fe5b906020019060200201516080015185612a4f565b91506119f389858151811015156119da57fe5b90602001906020020151838987815181101515610cc857fe5b90506119ff8682612160565b8551881415611a0d57611a18565b600190930192611950565b50505050509392505050565b611a2c613738565b611a34613790565b6000806000611a4288611dda565b9350611a4c6121c2565b9250611a608860a001518560400151612850565b9150611a6c8783612a6c565b9050611a7c8885858a858b612335565b611a868882612a84565b9450611a9d888486602001518760400151896125d5565b6110e0888487612aee565b60085460408051808201909152601281527f5245454e5452414e43595f494c4c4547414c00000000000000000000000000006020820152600091600160a060020a031615611b0c5760405160e560020a62461bcd0281526004016107359190614314565b5030868887876040516020018086600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140185600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018481526020018383808284378201915050955050505050506040516020818303038152906040526040518082805190602001908083835b60208310611bbd5780518252601f199092019160209182019101611b9e565b51815160209384036101000a60001901801990921691161790526040805192909401829003822060008181526007835285902054838601909552600f83527f494e56414c49445f54585f48415348000000000000000000000000000000000091830191909152955093505060ff16159050611c4e5760405160e560020a62461bcd0281526004016107359190614314565b50600160a060020a0386163314611d1b57611c9a818785858080601f01602080910402602001604051908101604052809392919081815260200183838082843750611138945050505050565b60408051808201909152601481527f494e56414c49445f54585f5349474e41545552450000000000000000000000006020820152901515611cf15760405160e560020a62461bcd0281526004016107359190614314565b506008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388161790555b60008181526007602052604090819020805460ff191660011790555130908690869080838380828437820191505092505050600060405180830381855af460408051808201909152601081527f4641494c45445f455845435554494f4e000000000000000000000000000000006020820152925015159050611db35760405160e560020a62461bcd0281526004016107359190614314565b50506008805473ffffffffffffffffffffffffffffffffffffffff19169055505050505050565b611de2613790565b611deb82612c1a565b602082015260808201511515611e085760015b60ff168152611ec4565b60a08201511515611e1a576002611dfe565b6101008201514210611e2d576004611dfe565b60208082015160009081526002909152604090205460ff1615611e51576006611dfe565b6101208201518251600160a060020a0390811660009081526003602090815260408083206060880151909416835292905220541115611e91576006611dfe565b602080820151600090815260019091526040908190205490820181905260a083015111611ebf576005611dfe565b600381525b919050565b611ed1613790565b611eda82611dda565b9050611ee6828261338e565b610abc8282602001516134dd565b600360209081526000928352604080842090915290825290205481565b611f19613738565b6060600080611f26613738565b876000815181101515611f3557fe5b9060200190602002015161016001519350600092505b87518310156110e057838884815181101515611f6357fe5b906020019060200201516101600181905250611f83878660200151612850565b9150611faf8884815181101515611f9657fe5b90602001906020020151838886815181101515610cc857fe5b9050611fbb8582612160565b8685602001511415611fcc576110e0565b600190920191611f4b565b611fdf613738565b60606000806000611fee613738565b886000815181101515611ffd57fe5b9060200190602002015161014001519450600093505b8851841015611a185784898581518110151561202b57fe5b6020908102909101015161014001528551612047908990612850565b925061205a898581518110151561199757fe5b9150612086898581518110151561206d57fe5b9060200190602002015183898781518110151561065f57fe5b8551600101865290506120998682612160565b85518814156120a757611a18565b600190930192612013565b600854600160a060020a031681565b600054600160a060020a031633146120ee5760405160e560020a62461bcd02815260040161073590614325565b600160a060020a03811615612126576000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b60408051808201909152600b81527f322e302e312d616c706861000000000000000000000000000000000000000000602082015281565b8151815161216e9190613559565b8252602080830151908201516121849190613559565b60208301526040808301519082015161219d9190613559565b6040830152606080830151908201516121b69190613559565b60609092019190915250565b6008546000908190600160a060020a0316156121e957600854600160a060020a03166121eb565b335b92915050565b6122038260a001518260a00151613568565b61221583608001518360800151613568565b60408051808201909152601881527f4e454741544956455f5350524541445f52455155495245440000000000000000602082015291111561226c5760405160e560020a62461bcd0281526004016107359190614314565b505050565b612279613761565b60008060008061228d8960a0015188612850565b935061229d8860a0015187612850565b92506122ad838960800151613568565b6122bb858a60a00151613568565b116122dd578391506122d68860a00151896080015184612a4f565b90506122f6565b8290506122f388608001518960a0015183612a4f565b91505b6123008983612a84565b855261230c8882612a84565b60208087018290528651519101516123249190612850565b604086015250505050949350505050565b845160408051808201909152601081527f4f524445525f554e46494c4c41424c450000000000000000000000000000000060208201529060ff166003146123925760405160e560020a62461bcd0281526004016107359190614314565b5060408051808201909152601481527f494e56414c49445f54414b45525f414d4f554e5400000000000000000000000060208201528315156123ea5760405160e560020a62461bcd0281526004016107359190614314565b506060860151600160a060020a03161561246557606086015160408051808201909152600e81527f494e56414c49445f53454e444552000000000000000000000000000000000000602082015290600160a060020a031633146124635760405160e560020a62461bcd0281526004016107359190614314565b505b6020860151600160a060020a0316156124ec5783600160a060020a03168660200151600160a060020a0316146040805190810160405280600d81526020017f494e56414c49445f54414b4552000000000000000000000000000000000000008152509015156124ea5760405160e560020a62461bcd0281526004016107359190614314565b505b604085015115156125635761250a8560200151876000015183611138565b60408051808201909152601781527f494e56414c49445f4f524445525f5349474e415455524500000000000000000060208201529015156125615760405160e560020a62461bcd0281526004016107359190614314565b505b612576828760a00151886080015161358c565b60408051808201909152600e81527f524f554e44494e475f4552524f52000000000000000000000000000000000000602082015290156125cc5760405160e560020a62461bcd0281526004016107359190614314565b50505050505050565b6125e3828260200151613559565b600084815260016020908152604091829020929092558681015187518451938501518584015160608701516101408c01516101608d015196518b98600160a060020a039788169897909616967fde19f18e1b56e6eada7ed95cca8398b602be32f5864640537ee9a9a3532bb29d96612665968f969195909491939092906141a6565b60405180910390a45050505050565b6000806060612687876101400151612862565b60f860020a9004925061269e866101400151612862565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260f860020a909404955083018282801561272d5780601f106127025761010080835404028352916020019161272d565b820191906000526020600020905b81548152906001019060200180831161271057829003601f168201915b5050505050905061275687610140015184896000015189600001518860200151602001516135dd565b610140860151865188518651602001516127749392869290916135dd565b61278e8761014001518489600001518888604001516135dd565b6127ac81600189600001518a604001518860000151604001516135dd565b6127ca816001886000015189604001518860200151604001516135dd565b8560400151600160a060020a03168760400151600160a060020a0316141561281c57612817816001878a604001516128128960000151606001518a6020015160600151613559565b6135dd565b6125cc565b612836816001878a604001518860000151606001516135dd565b6125cc8160018789604001518860200151606001516135dd565b60008282111561285c57fe5b50900390565b600080825111606060405190810160405280602181526020017f475245415445525f5448414e5f5a45524f5f4c454e4754485f5245515549524581526020017f44000000000000000000000000000000000000000000000000000000000000008152509015156128e85760405160e560020a62461bcd0281526004016107359190614314565b508151829060001981019081106128fb57fe5b01602001518251600019019092525060f860020a908190040290565b60008160200183511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524581526020017f51554952454400000000000000000000000000000000000000000000000000008152509015156129a15760405160e560020a62461bcd0281526004016107359190614314565b5050016020015190565b6000601482511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524581526020017f5155495245440000000000000000000000000000000000000000000000000000815250901515612a335760405160e560020a62461bcd0281526004016107359190614314565b50612a42826014845103613684565b8251601319019092525090565b6000612a64612a5e8584613568565b84613721565b949350505050565b6000818310612a7b5781612a7d565b825b9392505050565b612a8c613738565b6020810182905260a08301516080840151612aa8918491612a4f565b8152602081015160a084015160c0850151612ac4929190612a4f565b6040820152602081015160a084015160e0850151612ae3929190612a4f565b606082015292915050565b6000806060612b01866101400151612862565b60f860020a90049250612b18866101600151612862565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260f860020a9094049550830182828015612ba75780601f10612b7c57610100808354040283529160200191612ba7565b820191906000526020600020905b815481529060010190602001808311612b8a57829003601f168201915b50505050509050612bc88661014001518488600001518888600001516135dd565b612be28661016001518387896000015188602001516135dd565b612bfc8160018860000151896040015188604001516135dd565b612c1281600187896040015188606001516135dd565b505050505050565b600060405160200180807f446f6d61696e536570617261746f72286164647265737320636f6e747261637481526020017f290000000000000000000000000000000000000000000000000000000000000081525060210190506040516020818303038152906040526040518082805190602001908083835b60208310612cb15780518252601f199092019160209182019101612c92565b51815160209384036101000a600019018019909216911617905260408051929094018290038220306c0100000000000000000000000002838301528451601481850301815260349093019485905282519096509194508392508401908083835b60208310612d305780518252601f199092019160209182019101612d11565b51815160209384036101000a6000190180199092169116179052604080519290940182900382207f4f72646572280000000000000000000000000000000000000000000000000000838301527f61646472657373206d616b6572416464726573732c000000000000000000000060268401527f616464726573732074616b6572416464726573732c0000000000000000000000603b8401527f6164647265737320666565526563697069656e74416464726573732c0000000060508401527f616464726573732073656e646572416464726573732c00000000000000000000606c8401527f75696e74323536206d616b65724173736574416d6f756e742c0000000000000060828401527f75696e743235362074616b65724173736574416d6f756e742c00000000000000609b8401527f75696e74323536206d616b65724665652c00000000000000000000000000000060b48401527f75696e743235362074616b65724665652c00000000000000000000000000000060c58401527f75696e743235362065787069726174696f6e54696d655365636f6e64732c000060d68401527f75696e743235362073616c742c0000000000000000000000000000000000000060f48401527f6279746573206d616b65724173736574446174612c00000000000000000000006101018401527f62797465732074616b65724173736574446174612c00000000000000000000006101168401527f290000000000000000000000000000000000000000000000000000000000000061012b840152845180840361010c01815261012c9093019485905282519096509194508392508401908083835b60208310612fb35780518252601f199092019160209182019101612f94565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020846000015185602001518660400151876060015188608001518960a001518a60c001518b60e001518c61010001518d61012001518e61014001516040516020018082805190602001908083835b6020831061304c5780518252601f19909201916020918201910161302d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106130af5780518252601f199092019160209182019101613090565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208f61016001516040516020018082805190602001908083835b602083106131145780518252601f1990920191602091820191016130f5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106131775780518252601f199092019160209182019101613158565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020604051602001808d600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018c600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018b600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018a600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401898152602001888152602001878152602001868152602001858152602001848152602001836000191660001916815260200182600019166000191681526020019c505050505050505050505050506040516020818303038152906040526040518082805190602001908083835b602083106132d35780518252601f1990920191602091820191016132b4565b51815160001960209485036101000a019081169019919091161790526040805194909201849003842084820199909952838201979097526060830195909552506080808201969096528351808203909601865260a001928390525050825190918291908401908083835b6020831061335c5780518252601f19909201916020918201910161333d565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b805160408051808201909152601081527f4f524445525f554e46494c4c41424c4500000000000000000000000000000000602082015260009160ff166003146133ed5760405160e560020a62461bcd0281526004016107359190614314565b506060830151600160a060020a03161561346857606083015160408051808201909152600e81527f494e56414c49445f53454e444552000000000000000000000000000000000000602082015290600160a060020a031633146134665760405160e560020a62461bcd0281526004016107359190614314565b505b6134706121c2565b835160408051808201909152600d81527f494e56414c49445f4d414b4552000000000000000000000000000000000000006020820152919250600160a060020a038084169116146134d75760405160e560020a62461bcd0281526004016107359190614314565b50505050565b60008181526002602052604090819020805460ff1916600117905582810151835161014085015161016086015193518594600160a060020a039485169493909316927fb1ad640e9e79b6fdbc3c415dc2914ab54e753d2971f51eab910f7aa317a3163a9261354d929091906142e1565b60405180910390a45050565b600082820183811015612a7d57fe5b6000828202831580613584575082848281151561358157fe5b04145b1515612a7d57fe5b60008060008480151561359b57fe5b86850991508115156135b05760009250610685565b6135cf6135c083620f4240613568565b6135ca8887613568565b613721565b6103e8109695505050505050565b600080821115612c12575060ff8416600090815260096020526040908190205490517fa85e59e4000000000000000000000000000000000000000000000000000000008152600160a060020a0390911690819063a85e59e49061364a9089908890889088906004016142b4565b600060405180830381600087803b15801561366457600080fd5b505af1158015613678573d6000803e3d6000fd5b50505050505050505050565b60008160140183511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524581526020017f515549524544000000000000000000000000000000000000000000000000000081525090151561370e5760405160e560020a62461bcd0281526004016107359190614314565b50500160140151600160a060020a031690565b600080828481151561372f57fe5b04949350505050565b608060405190810160405280600081526020016000815260200160008152602001600081525090565b61012060405190810160405280613776613738565b8152602001613783613738565b8152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b6000612a7d823561440a565b6000601f820183136137cd57600080fd5b81356137e06137db826143bd565b614396565b81815260209384019390925082018360005b8381101561381e57813586016138088882613962565b84525060209283019291909101906001016137f2565b5050505092915050565b6000601f8201831361383957600080fd5b81356138476137db826143bd565b81815260209384019390925082018360005b8381101561381e578135860161386f88826139b1565b8452506020928301929190910190600101613859565b6000601f8201831361389657600080fd5b81356138a46137db826143bd565b915081818352602084019350602081019050838560208402820111156138c957600080fd5b60005b8381101561381e57816138df888261390d565b84525060209283019291909101906001016138cc565b6000612a7d8235614416565b6000612a7d8251614416565b6000612a7d823561441b565b600080601f8301841361392b57600080fd5b50813567ffffffffffffffff81111561394357600080fd5b60208301915083600182028301111561395b57600080fd5b9250929050565b6000601f8201831361397357600080fd5b81356139816137db826143de565b9150808252602083016020830185838301111561399d57600080fd5b6139a883828461442f565b50505092915050565b600061018082840312156139c457600080fd5b6139cf610180614396565b905060006139dd84846137b0565b82525060206139ee848483016137b0565b6020830152506040613a02848285016137b0565b6040830152506060613a16848285016137b0565b6060830152506080613a2a8482850161390d565b60808301525060a0613a3e8482850161390d565b60a08301525060c0613a528482850161390d565b60c08301525060e0613a668482850161390d565b60e083015250610100613a7b8482850161390d565b61010083015250610120613a918482850161390d565b6101208301525061014082013567ffffffffffffffff811115613ab357600080fd5b613abf84828501613962565b6101408301525061016082013567ffffffffffffffff811115613ae157600080fd5b613aed84828501613962565b6101608301525092915050565b6000612a7d823561441e565b6000612a7d825161441e565b600060208284031215613b2457600080fd5b6000612a6484846137b0565b60008060408385031215613b4357600080fd5b6000613b4f85856137b0565b9250506020613b60858286016137b0565b9150509250929050565b60008060408385031215613b7d57600080fd5b6000613b8985856137b0565b9250506020613b60858286016138f5565b600060208284031215613bac57600080fd5b813567ffffffffffffffff811115613bc357600080fd5b612a6484828501613828565b600080600060608486031215613be457600080fd5b833567ffffffffffffffff811115613bfb57600080fd5b613c0786828701613828565b935050602084013567ffffffffffffffff811115613c2457600080fd5b613c3086828701613885565b925050604084013567ffffffffffffffff811115613c4d57600080fd5b613c59868287016137bc565b9150509250925092565b600080600060608486031215613c7857600080fd5b833567ffffffffffffffff811115613c8f57600080fd5b613c9b86828701613828565b9350506020613c308682870161390d565b600060208284031215613cbe57600080fd5b6000612a648484613901565b600060208284031215613cdc57600080fd5b6000612a64848461390d565b60008060408385031215613cfb57600080fd5b6000613b4f858561390d565b60008060008060608587031215613d1d57600080fd5b6000613d29878761390d565b9450506020613d3a878288016137b0565b935050604085013567ffffffffffffffff811115613d5757600080fd5b613d6387828801613919565b95989497509550505050565b600080600060608486031215613d8457600080fd5b6000613d90868661390d565b9350506020613da1868287016137b0565b925050604084013567ffffffffffffffff811115613dbe57600080fd5b613c5986828701613962565b600060208284031215613ddc57600080fd5b813567ffffffffffffffff811115613df357600080fd5b612a64848285016139b1565b60008060008060808587031215613e1557600080fd5b843567ffffffffffffffff811115613e2c57600080fd5b613e38878288016139b1565b945050602085013567ffffffffffffffff811115613e5557600080fd5b613e61878288016139b1565b935050604085013567ffffffffffffffff811115613e7e57600080fd5b613e8a87828801613962565b925050606085013567ffffffffffffffff811115613ea757600080fd5b613eb387828801613962565b91505092959194509250565b600080600060608486031215613ed457600080fd5b833567ffffffffffffffff811115613eeb57600080fd5b613ef7868287016139b1565b9350506020613da18682870161390d565b60008060008060008060808789031215613f2157600080fd5b6000613f2d898961390d565b9650506020613f3e89828a016137b0565b955050604087013567ffffffffffffffff811115613f5b57600080fd5b613f6789828a01613919565b9450945050606087013567ffffffffffffffff811115613f8657600080fd5b613f9289828a01613919565b92509250509295509295509295565b600060208284031215613fb357600080fd5b6000612a648484613afa565b600060208284031215613fd157600080fd5b6000612a648484613b06565b600080600060608486031215613ff257600080fd5b6000613ffe8686613afa565b935050602061400f868287016137b0565b9250506040613c59868287016137b0565b6140298161440a565b82525050565b61402981614416565b6140298161441b565b600061404c82614406565b80845261406081602086016020860161443b565b61406981614467565b9093016020019392505050565b61402981614424565b603381527f4f6e6c7920636f6e7472616374206f776e657220697320616c6c6f776564207460208201527f6f2063616c6c2074686973206d6574686f642e00000000000000000000000000604082015260600190565b805160808301906140e68482614038565b5060208201516140f96020850182614038565b50604082015161410c6040850182614038565b5060608201516134d76060850182614038565b805161012083019061413184826140d5565b50602082015161414460808501826140d5565b5060408201516134d7610100850182614038565b80516060830190614169848261418f565b50602082015161417c6020850182614038565b5060408201516134d76040850182614038565b6140298161441e565b602081016121eb8284614020565b60e081016141b4828a614020565b6141c16020830189614038565b6141ce6040830188614038565b6141db6060830187614038565b6141e86080830186614038565b81810360a08301526141fa8185614041565b905081810360c083015261420e8184614041565b9998505050505050505050565b602081016121eb828461402f565b606081016142378286614038565b6142446020830185614020565b81810360408301526142568184614041565b95945050505050565b6040810161426d8285614038565b8181036020830152612a648184614041565b6080810161428d8287614038565b61429a602083018661418f565b6142a76040830185614038565b6142566060830184614038565b608080825281016142c58187614041565b90506142d46020830186614020565b6142a76040830185614020565b604080825281016142f28185614041565b90508181036020830152612a648184614041565b602081016121eb8284614076565b60208082528101612a7d8184614041565b602080825281016121eb8161407f565b608081016121eb82846140d5565b61012081016121eb828461411f565b606081016121eb8284614158565b602081016121eb8284614038565b6060810161437c828661418f565b6143896020830185614020565b612a646040830184614020565b60405181810167ffffffffffffffff811182821017156143b557600080fd5b604052919050565b600067ffffffffffffffff8211156143d457600080fd5b5060209081020190565b600067ffffffffffffffff8211156143f557600080fd5b506020601f91909101601f19160190565b5190565b600160a060020a031690565b151590565b90565b60ff1690565b60006121eb8261440a565b82818337506000910152565b60005b8381101561445657818101518382015260200161443e565b838111156134d75750506000910152565b601f01601f1916905600a265627a7a72305820a51ac495b14215f5aff7b83edab394f7c7ac50f879e44e9113c22ec7328070286c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x46E7 CODESIZE SUB DUP1 PUSH3 0x46E7 DUP4 CODECOPY DUP2 ADD DUP1 PUSH1 0x40 MSTORE PUSH3 0x37 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x16A JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND CALLER OR SWAP1 SSTORE DUP1 MLOAD DUP2 SWAP1 PUSH3 0x60 SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x69 JUMP JUMPDEST POP POP POP PUSH3 0x22C JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0xAC JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xDC JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xDC JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xDC JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xBF JUMP JUMPDEST POP PUSH3 0xEA SWAP3 SWAP2 POP PUSH3 0xEE JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 0x10B SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xEA JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xF5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH3 0x120 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x137 PUSH3 0x131 DUP3 PUSH3 0x1D1 JUMP JUMPDEST PUSH3 0x1AA JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH3 0x154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x161 DUP4 DUP3 DUP5 PUSH3 0x1F9 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x17D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH3 0x194 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1A2 DUP5 DUP3 DUP6 ADD PUSH3 0x10E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x1C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP3 GT ISZERO PUSH3 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x216 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x1FC JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x226 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x44AB DUP1 PUSH3 0x23C PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x195 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x288CDC91 DUP2 EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x297BB70B EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0x2AC12622 EQ PUSH2 0x1FD JUMPI DUP1 PUSH4 0x3683EF8E EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x38077164 EQ PUSH2 0x24C JUMPI DUP1 PUSH4 0x3C28D861 EQ PUSH2 0x279 JUMPI DUP1 PUSH4 0x3E228BAE EQ PUSH2 0x2A6 JUMPI DUP1 PUSH4 0x4AC14782 EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0x4D0AE546 EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x4F9559B1 EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0x50DDE190 EQ PUSH2 0x326 JUMPI DUP1 PUSH4 0x5C78D0C7 EQ PUSH2 0x346 JUMPI DUP1 PUSH4 0x642F2EAF EQ PUSH2 0x366 JUMPI DUP1 PUSH4 0x64A3BC15 EQ PUSH2 0x386 JUMPI DUP1 PUSH4 0x77FCCE68 EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0x7B8E3514 EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0x7E1D9808 EQ PUSH2 0x3E6 JUMPI DUP1 PUSH4 0x82C174D0 EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x426 JUMPI DUP1 PUSH4 0x92C1421E EQ PUSH2 0x448 JUMPI DUP1 PUSH4 0x93634702 EQ PUSH2 0x468 JUMPI DUP1 PUSH4 0xA3E20380 EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0xB4BE83D5 EQ PUSH2 0x4A8 JUMPI DUP1 PUSH4 0xBFC8BFCE EQ PUSH2 0x4C8 JUMPI DUP1 PUSH4 0xC75E0A81 EQ PUSH2 0x4E8 JUMPI DUP1 PUSH4 0xD46B02C3 EQ PUSH2 0x515 JUMPI DUP1 PUSH4 0xD9BFA73E EQ PUSH2 0x535 JUMPI DUP1 PUSH4 0xDD1C7D18 EQ PUSH2 0x555 JUMPI DUP1 PUSH4 0xE5FA431B EQ PUSH2 0x575 JUMPI DUP1 PUSH4 0xEEA086BA EQ PUSH2 0x595 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5AA JUMPI DUP1 PUSH4 0xFFA1AD74 EQ PUSH2 0x5CA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BA PUSH2 0x1B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3CCA JUMP JUMPDEST PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4360 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x1EB CALLDATASIZE PUSH1 0x4 PUSH2 0x3BCF JUMP JUMPDEST PUSH2 0x5FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4335 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21D PUSH2 0x218 CALLDATASIZE PUSH1 0x4 PUSH2 0x3CCA JUMP JUMPDEST PUSH2 0x68E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x421B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x236 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x245 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D07 JUMP JUMPDEST PUSH2 0x6A3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26C PUSH2 0x267 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA1 JUMP JUMPDEST PUSH2 0x771 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4306 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x285 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x299 PUSH2 0x294 CALLDATASIZE PUSH1 0x4 PUSH2 0x3DFF JUMP JUMPDEST PUSH2 0x78C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4343 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x2C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3EBF JUMP JUMPDEST PUSH2 0x878 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x2E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B9A JUMP JUMPDEST PUSH2 0xA88 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x301 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BCF JUMP JUMPDEST PUSH2 0xAC0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x321 CALLDATASIZE PUSH1 0x4 PUSH2 0x3CCA JUMP JUMPDEST PUSH2 0xB47 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x341 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BCF JUMP JUMPDEST PUSH2 0xC67 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x352 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x361 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FDD JUMP JUMPDEST PUSH2 0xCEE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21D PUSH2 0x381 CALLDATASIZE PUSH1 0x4 PUSH2 0x3CCA JUMP JUMPDEST PUSH2 0xF1C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x3A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3EBF JUMP JUMPDEST PUSH2 0xF31 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x3C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B6A JUMP JUMPDEST PUSH2 0xFAE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21D PUSH2 0x3E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B30 JUMP JUMPDEST PUSH2 0xFF3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x401 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C63 JUMP JUMPDEST PUSH2 0x1013 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x412 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21D PUSH2 0x421 CALLDATASIZE PUSH1 0x4 PUSH2 0x3CE8 JUMP JUMPDEST PUSH2 0x10EB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x432 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x43B PUSH2 0x110B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4198 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x454 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x43B PUSH2 0x463 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA1 JUMP JUMPDEST PUSH2 0x111A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x474 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21D PUSH2 0x483 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D6F JUMP JUMPDEST PUSH2 0x1138 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x4A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C63 JUMP JUMPDEST PUSH2 0x1914 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x4C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3EBF JUMP JUMPDEST PUSH2 0x1A24 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x4E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F08 JUMP JUMPDEST PUSH2 0x1AA8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x508 PUSH2 0x503 CALLDATASIZE PUSH1 0x4 PUSH2 0x3DCA JUMP JUMPDEST PUSH2 0x1DDA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4352 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x521 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x530 CALLDATASIZE PUSH1 0x4 PUSH2 0x3DCA JUMP JUMPDEST PUSH2 0x1EC9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x541 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BA PUSH2 0x550 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B30 JUMP JUMPDEST PUSH2 0x1EF4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x561 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x570 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C63 JUMP JUMPDEST PUSH2 0x1F11 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x581 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x590 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C63 JUMP JUMPDEST PUSH2 0x1FD7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x43B PUSH2 0x20B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x5C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B12 JUMP JUMPDEST PUSH2 0x20C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5DF PUSH2 0x2129 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x606 PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x610 PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP6 MLOAD DUP3 LT ISZERO PUSH2 0x685 JUMPI PUSH2 0x66E DUP7 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x62F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP7 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x647 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x65F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x1A24 JUMP JUMPDEST SWAP1 POP PUSH2 0x67A DUP4 DUP3 PUSH2 0x2160 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x615 JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x6DE DUP5 DUP5 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0x1138 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x494E56414C49445F5349474E4154555245000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x73E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH2 0x794 PUSH2 0x3761 JUMP JUMPDEST PUSH2 0x79C PUSH2 0x3790 JUMP JUMPDEST PUSH2 0x7A4 PUSH2 0x3790 JUMP JUMPDEST PUSH2 0x160 DUP1 DUP9 ADD MLOAD PUSH2 0x140 DUP1 DUP10 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP9 ADD MLOAD SWAP1 DUP8 ADD MSTORE PUSH1 0x0 PUSH2 0x7C7 DUP9 PUSH2 0x1DDA JUMP JUMPDEST SWAP3 POP PUSH2 0x7D2 DUP8 PUSH2 0x1DDA JUMP JUMPDEST SWAP2 POP PUSH2 0x7DC PUSH2 0x21C2 JUMP JUMPDEST SWAP1 POP PUSH2 0x7E8 DUP9 DUP9 PUSH2 0x21F1 JUMP JUMPDEST PUSH2 0x7FC DUP9 DUP9 DUP6 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x2271 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x816 SWAP1 DUP10 SWAP1 DUP6 SWAP1 DUP5 SWAP1 DUP1 DUP12 PUSH2 0x2335 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP6 ADD MLOAD ADD MLOAD PUSH2 0x82F SWAP1 DUP9 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP1 DUP11 PUSH2 0x2335 JUMP JUMPDEST PUSH2 0x848 DUP9 DUP3 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0x25D5 JUMP JUMPDEST PUSH2 0x861 DUP8 DUP3 DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0x25D5 JUMP JUMPDEST PUSH2 0x86D DUP9 DUP9 DUP4 DUP8 PUSH2 0x2674 JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x880 PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xB4BE83D500000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE PUSH1 0x60 PUSH1 0x4 DUP4 ADD DUP2 DUP2 MSTORE DUP9 MLOAD PUSH1 0x64 DUP6 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 DUP1 DUP12 ADD MLOAD PUSH1 0x84 DUP8 ADD MSTORE SWAP6 DUP11 ADD MLOAD PUSH1 0xA4 DUP7 ADD MSTORE SWAP2 DUP10 ADD MLOAD PUSH1 0xC4 DUP6 ADD MSTORE PUSH1 0x80 DUP10 ADD MLOAD PUSH1 0xE4 DUP6 ADD MSTORE PUSH1 0xA0 DUP10 ADD MLOAD PUSH2 0x104 DUP6 ADD MSTORE PUSH1 0xC0 DUP10 ADD MLOAD PUSH2 0x124 DUP6 ADD MSTORE PUSH1 0xE0 DUP10 ADD MLOAD PUSH2 0x144 DUP6 ADD MSTORE PUSH2 0x100 DUP10 ADD MLOAD PUSH2 0x164 DUP6 ADD MSTORE PUSH2 0x120 DUP10 ADD MLOAD PUSH2 0x184 DUP6 ADD MSTORE PUSH2 0x140 DUP10 ADD DUP1 MLOAD PUSH2 0x1A4 DUP7 ADD SWAP1 DUP2 MSTORE PUSH2 0x160 DUP12 ADD MLOAD PUSH2 0x1C4 DUP8 ADD MSTORE PUSH2 0x180 SWAP1 MSTORE MLOAD DUP1 MLOAD PUSH2 0x1E4 DUP7 ADD DUP2 SWAP1 MSTORE SWAP4 SWAP6 SWAP2 SWAP4 DUP5 SWAP4 SWAP3 PUSH1 0x24 DUP8 ADD SWAP3 DUP5 SWAP3 PUSH2 0x204 DUP10 ADD SWAP3 SWAP2 DUP3 ADD SWAP2 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x983 JUMPI DUP4 MLOAD DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x965 JUMP JUMPDEST POP POP POP POP DUP2 DUP2 SUB PUSH2 0x160 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP13 ADD MLOAD DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 DUP3 ADD SWAP2 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9CC JUMPI DUP4 MLOAD DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x9AE JUMP JUMPDEST POP POP POP DUP12 DUP5 MSTORE POP DUP5 DUP2 SUB PUSH1 0x20 SWAP4 DUP5 ADD SWAP1 DUP2 MSTORE DUP11 MLOAD DUP1 DUP4 MSTORE SWAP1 SWAP4 SWAP2 DUP3 ADD SWAP2 DUP12 DUP2 ADD SWAP2 SWAP1 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA14 JUMPI DUP4 MLOAD DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x9F6 JUMP JUMPDEST POP PUSH1 0x80 DUP11 DUP12 DUP7 SUB DUP13 ADDRESS GAS DELEGATECALL DUP1 DUP1 ISZERO PUSH2 0xA33 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0xA51 JUMPI PUSH2 0xA74 JUMP JUMPDEST PUSH1 0x0 DUP15 MSTORE PUSH1 0x0 PUSH1 0x20 DUP16 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP16 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP16 ADD MSTORE PUSH2 0xA74 JUMP JUMPDEST DUP12 MLOAD DUP15 MSTORE PUSH1 0x20 DUP13 ADD MLOAD PUSH1 0x20 DUP16 ADD MSTORE PUSH1 0x40 DUP13 ADD MLOAD PUSH1 0x40 DUP16 ADD MSTORE PUSH1 0x60 DUP13 ADD MLOAD PUSH1 0x60 DUP16 ADD MSTORE JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xABC JUMPI PUSH2 0xAB4 DUP3 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAA5 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x1EC9 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xA8B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xAC8 PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAD2 PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP6 MLOAD DUP3 LT ISZERO PUSH2 0x685 JUMPI PUSH2 0xB30 DUP7 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAF1 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP7 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB09 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB21 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0xF31 JUMP JUMPDEST SWAP1 POP PUSH2 0xB3C DUP4 DUP3 PUSH2 0x2160 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xAD7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0xB55 PUSH2 0x21C2 JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND CALLER EQ PUSH2 0xB6D JUMPI CALLER PUSH2 0xB70 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 DUP2 MSTORE SWAP1 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x17 DUP4 MSTORE PUSH32 0x494E56414C49445F4E45575F4F524445525F45504F4348000000000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP5 POP PUSH1 0x1 DUP8 ADD SWAP4 POP SWAP1 SWAP2 POP DUP2 DUP4 GT PUSH2 0xBFC JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE MLOAD PUSH32 0x82AF639571738F4EBD4268FB0363D8957EBE1BBB9E78DBA5EBD69EED39B154F0 SWAP1 PUSH2 0xC58 SWAP1 DUP7 SWAP1 PUSH2 0x4360 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC6F PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC79 PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP6 MLOAD DUP3 LT ISZERO PUSH2 0x685 JUMPI PUSH2 0xCD7 DUP7 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC98 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP7 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xCB0 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xCC8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x878 JUMP JUMPDEST SWAP1 POP PUSH2 0xCE3 DUP4 DUP3 PUSH2 0x2160 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xC7E JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0xD20 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP1 PUSH2 0x4325 JUMP JUMPDEST PUSH1 0xFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x14 DUP4 MSTORE PUSH32 0x41535345545F50524F58595F4D49534D41544348000000000000000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP5 POP DUP6 AND DUP5 EQ PUSH2 0xD9C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP DUP5 SWAP2 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND ISZERO PUSH2 0xEA0 JUMPI DUP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH4 0xAE25532E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE1A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xE3E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x3FBF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH32 0x41535345545F50524F58595F49445F4D49534D41544348000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0xFF DUP1 DUP4 AND SWAP1 DUP9 AND EQ PUSH2 0xE9E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP JUMPDEST PUSH1 0xFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND OR SWAP1 SSTORE MLOAD PUSH32 0x27EF5F484E50F2DAF7C2D82C60FE4CE409009541176EB64095BEAC369DB1D260 SWAP1 PUSH2 0xF0C SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x436E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xF39 PUSH2 0x3738 JUMP JUMPDEST PUSH2 0xF44 DUP5 DUP5 DUP5 PUSH2 0x1A24 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH1 0x20 ADD MLOAD EQ PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x14 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x434F4D504C4554455F46494C4C5F4641494C4544000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0xFA6 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFB8 PUSH2 0x21C2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP7 SWAP1 SWAP4 AND DUP3 MSTORE SWAP5 SWAP1 SWAP5 MSTORE SWAP1 SWAP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x101B PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x1028 PUSH2 0x3738 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1037 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD MLOAD SWAP4 POP PUSH1 0x0 SWAP3 POP JUMPDEST DUP8 MLOAD DUP4 LT ISZERO PUSH2 0x10E0 JUMPI DUP4 DUP9 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1065 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1085 DUP8 DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x2850 JUMP JUMPDEST SWAP2 POP PUSH2 0x10B1 DUP9 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1098 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP9 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x65F JUMPI INVALID JUMPDEST DUP5 MLOAD PUSH1 0x1 ADD DUP6 MSTORE SWAP1 POP PUSH2 0x10C4 DUP6 DUP3 PUSH2 0x2160 JUMP JUMPDEST DUP7 DUP6 PUSH1 0x20 ADD MLOAD EQ ISZERO PUSH2 0x10D5 JUMPI PUSH2 0x10E0 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x104D JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP9 MLOAD GT PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4C454E4754485F475245415445525F5448414E5F305F52455155495245440000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x11A0 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH2 0x11AA DUP9 PUSH2 0x2862 JUMP JUMPDEST PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x11BF JUMPI INVALID JUMPDEST SWAP6 POP PUSH1 0x0 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x11CF JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1223 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x5349474E41545552455F494C4C4547414C000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH2 0x735 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x4314 JUMP JUMPDEST PUSH1 0x1 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1231 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1299 JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x4C454E4754485F315F5245515549524544000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO PUSH2 0x128F JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH1 0x0 SWAP7 POP PUSH2 0x1907 JUMP JUMPDEST PUSH1 0x2 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x12A7 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x13AF JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH32 0x4C454E4754485F36365F52455155495245440000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x41 EQ PUSH2 0x1307 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1317 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP5 POP PUSH2 0x1335 DUP9 PUSH1 0x1 PUSH2 0x2917 JUMP JUMPDEST SWAP4 POP PUSH2 0x1342 DUP9 PUSH1 0x21 PUSH2 0x2917 JUMP JUMPDEST SWAP3 POP PUSH1 0x1 DUP11 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1367 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x427F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 PUSH1 0x0 DUP7 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x138B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP12 DUP2 AND SWAP1 DUP3 AND EQ SWAP9 POP SWAP3 POP PUSH2 0x1907 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x13BD JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1569 JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH32 0x4C454E4754485F36365F52455155495245440000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x41 EQ PUSH2 0x141D JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x142D JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP5 POP PUSH2 0x144B DUP9 PUSH1 0x1 PUSH2 0x2917 JUMP JUMPDEST SWAP4 POP PUSH2 0x1458 DUP9 PUSH1 0x21 PUSH2 0x2917 JUMP JUMPDEST SWAP3 POP PUSH1 0x1 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE POP DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x14C5 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x14A6 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE SWAP3 ADD SWAP4 DUP5 MSTORE POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP6 SUB DUP2 MSTORE SWAP4 DUP3 ADD SWAP1 DUP2 SWAP1 MSTORE DUP4 MLOAD SWAP4 SWAP5 POP SWAP3 DUP4 SWAP3 POP SWAP1 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1525 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1506 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 PUSH1 0x0 DUP4 MSTORE SWAP2 ADD SWAP3 DUP4 SWAP1 MSTORE PUSH2 0x1367 SWAP5 POP SWAP3 POP DUP10 SWAP2 DUP10 SWAP2 POP DUP9 SWAP1 PUSH2 0x427F JUMP JUMPDEST PUSH1 0x4 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1577 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x15E9 JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x4C454E4754485F315F5245515549524544000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO PUSH2 0x15D5 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND CALLER EQ SWAP7 POP PUSH2 0x1907 JUMP JUMPDEST PUSH1 0x5 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x15F7 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x169D JUMPI PUSH1 0x40 MLOAD PUSH32 0x1626BA7E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP11 AND SWAP1 PUSH4 0x1626BA7E SWAP1 PUSH2 0x1644 SWAP1 DUP14 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x425F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x165E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1672 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1696 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x3CAC JUMP JUMPDEST SWAP7 POP PUSH2 0x1907 JUMP JUMPDEST PUSH1 0x6 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x16AB JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x173E JUMPI PUSH2 0x16BA DUP9 PUSH2 0x29AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x16F5 JUMPI PUSH1 0x0 SWAP7 POP PUSH2 0x1907 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x9363470200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH4 0x93634702 SWAP1 PUSH2 0x1644 SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x4229 JUMP JUMPDEST PUSH1 0x7 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x174C JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x177F JUMPI PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP14 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP7 POP PUSH2 0x1907 JUMP JUMPDEST PUSH1 0x8 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x178D JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1878 JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH32 0x4C454E4754485F36365F52455155495245440000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x41 EQ PUSH2 0x17ED JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x17FD JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP5 POP PUSH2 0x181B DUP9 PUSH1 0x1 PUSH2 0x2917 JUMP JUMPDEST SWAP4 POP PUSH2 0x1828 DUP9 PUSH1 0x21 PUSH2 0x2917 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1B DUP1 DUP3 MSTORE PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A410000000000 PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE SWAP4 MLOAD SWAP5 SWAP8 POP PUSH1 0x1 SWAP5 SWAP3 SWAP4 DUP16 SWAP4 ADD SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 PUSH2 0x14C5 JUMP JUMPDEST PUSH1 0x7 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1886 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x18B9 JUMPI PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP14 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP7 POP PUSH2 0x1907 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH32 0x5349474E41545552455F554E535550504F525445440000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH2 0x735 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x4314 JUMP JUMPDEST POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x191C PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x192B PUSH2 0x3738 JUMP JUMPDEST DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x193A JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD SWAP5 POP PUSH1 0x0 SWAP4 POP JUMPDEST DUP9 MLOAD DUP5 LT ISZERO PUSH2 0x1A18 JUMPI DUP5 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1968 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x140 ADD MSTORE DUP6 MLOAD PUSH2 0x1984 SWAP1 DUP10 SWAP1 PUSH2 0x2850 JUMP JUMPDEST SWAP3 POP PUSH2 0x19C7 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1997 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP11 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x19B3 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0x2A4F JUMP JUMPDEST SWAP2 POP PUSH2 0x19F3 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x19DA JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP10 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xCC8 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x19FF DUP7 DUP3 PUSH2 0x2160 JUMP JUMPDEST DUP6 MLOAD DUP9 EQ ISZERO PUSH2 0x1A0D JUMPI PUSH2 0x1A18 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x1950 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1A2C PUSH2 0x3738 JUMP JUMPDEST PUSH2 0x1A34 PUSH2 0x3790 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1A42 DUP9 PUSH2 0x1DDA JUMP JUMPDEST SWAP4 POP PUSH2 0x1A4C PUSH2 0x21C2 JUMP JUMPDEST SWAP3 POP PUSH2 0x1A60 DUP9 PUSH1 0xA0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x2850 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A6C DUP8 DUP4 PUSH2 0x2A6C JUMP JUMPDEST SWAP1 POP PUSH2 0x1A7C DUP9 DUP6 DUP6 DUP11 DUP6 DUP12 PUSH2 0x2335 JUMP JUMPDEST PUSH2 0x1A86 DUP9 DUP3 PUSH2 0x2A84 JUMP JUMPDEST SWAP5 POP PUSH2 0x1A9D DUP9 DUP5 DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP10 PUSH2 0x25D5 JUMP JUMPDEST PUSH2 0x10E0 DUP9 DUP5 DUP8 PUSH2 0x2AEE JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH32 0x5245454E5452414E43595F494C4C4547414C0000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x1B0C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP ADDRESS DUP7 DUP9 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP7 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP6 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1BBD JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1B9E JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 DUP4 MSTORE DUP6 SWAP1 KECCAK256 SLOAD DUP4 DUP7 ADD SWAP1 SWAP6 MSTORE PUSH1 0xF DUP4 MSTORE PUSH32 0x494E56414C49445F54585F484153480000000000000000000000000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP6 POP SWAP4 POP POP PUSH1 0xFF AND ISZERO SWAP1 POP PUSH2 0x1C4E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND CALLER EQ PUSH2 0x1D1B JUMPI PUSH2 0x1C9A DUP2 DUP8 DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0x1138 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH32 0x494E56414C49445F54585F5349474E4154555245000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x1CF1 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH1 0x8 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD ADDRESS SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH32 0x4641494C45445F455845435554494F4E00000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP3 POP ISZERO ISZERO SWAP1 POP PUSH2 0x1DB3 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP POP PUSH1 0x8 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1DE2 PUSH2 0x3790 JUMP JUMPDEST PUSH2 0x1DEB DUP3 PUSH2 0x2C1A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD ISZERO ISZERO PUSH2 0x1E08 JUMPI PUSH1 0x1 JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH2 0x1EC4 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MLOAD ISZERO ISZERO PUSH2 0x1E1A JUMPI PUSH1 0x2 PUSH2 0x1DFE JUMP JUMPDEST PUSH2 0x100 DUP3 ADD MLOAD TIMESTAMP LT PUSH2 0x1E2D JUMPI PUSH1 0x4 PUSH2 0x1DFE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1E51 JUMPI PUSH1 0x6 PUSH2 0x1DFE JUMP JUMPDEST PUSH2 0x120 DUP3 ADD MLOAD DUP3 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x60 DUP9 ADD MLOAD SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD GT ISZERO PUSH2 0x1E91 JUMPI PUSH1 0x6 PUSH2 0x1DFE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD MLOAD GT PUSH2 0x1EBF JUMPI PUSH1 0x5 PUSH2 0x1DFE JUMP JUMPDEST PUSH1 0x3 DUP2 MSTORE JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1ED1 PUSH2 0x3790 JUMP JUMPDEST PUSH2 0x1EDA DUP3 PUSH2 0x1DDA JUMP JUMPDEST SWAP1 POP PUSH2 0x1EE6 DUP3 DUP3 PUSH2 0x338E JUMP JUMPDEST PUSH2 0xABC DUP3 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x34DD JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1F19 PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x1F26 PUSH2 0x3738 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1F35 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD MLOAD SWAP4 POP PUSH1 0x0 SWAP3 POP JUMPDEST DUP8 MLOAD DUP4 LT ISZERO PUSH2 0x10E0 JUMPI DUP4 DUP9 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1F63 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1F83 DUP8 DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x2850 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FAF DUP9 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1F96 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP9 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xCC8 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x1FBB DUP6 DUP3 PUSH2 0x2160 JUMP JUMPDEST DUP7 DUP6 PUSH1 0x20 ADD MLOAD EQ ISZERO PUSH2 0x1FCC JUMPI PUSH2 0x10E0 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x1F4B JUMP JUMPDEST PUSH2 0x1FDF PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1FEE PUSH2 0x3738 JUMP JUMPDEST DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1FFD JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD SWAP5 POP PUSH1 0x0 SWAP4 POP JUMPDEST DUP9 MLOAD DUP5 LT ISZERO PUSH2 0x1A18 JUMPI DUP5 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x202B JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x140 ADD MSTORE DUP6 MLOAD PUSH2 0x2047 SWAP1 DUP10 SWAP1 PUSH2 0x2850 JUMP JUMPDEST SWAP3 POP PUSH2 0x205A DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1997 JUMPI INVALID JUMPDEST SWAP2 POP PUSH2 0x2086 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x206D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP10 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x65F JUMPI INVALID JUMPDEST DUP6 MLOAD PUSH1 0x1 ADD DUP7 MSTORE SWAP1 POP PUSH2 0x2099 DUP7 DUP3 PUSH2 0x2160 JUMP JUMPDEST DUP6 MLOAD DUP9 EQ ISZERO PUSH2 0x20A7 JUMPI PUSH2 0x1A18 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x2013 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x20EE JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP1 PUSH2 0x4325 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO PUSH2 0x2126 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xB DUP2 MSTORE PUSH32 0x322E302E312D616C706861000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD PUSH2 0x216E SWAP2 SWAP1 PUSH2 0x3559 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x2184 SWAP2 SWAP1 PUSH2 0x3559 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x219D SWAP2 SWAP1 PUSH2 0x3559 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x21B6 SWAP2 SWAP1 PUSH2 0x3559 JUMP JUMPDEST PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x21E9 JUMPI PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x21EB JUMP JUMPDEST CALLER JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2203 DUP3 PUSH1 0xA0 ADD MLOAD DUP3 PUSH1 0xA0 ADD MLOAD PUSH2 0x3568 JUMP JUMPDEST PUSH2 0x2215 DUP4 PUSH1 0x80 ADD MLOAD DUP4 PUSH1 0x80 ADD MLOAD PUSH2 0x3568 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH32 0x4E454741544956455F5350524541445F52455155495245440000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP2 GT ISZERO PUSH2 0x226C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2279 PUSH2 0x3761 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x228D DUP10 PUSH1 0xA0 ADD MLOAD DUP9 PUSH2 0x2850 JUMP JUMPDEST SWAP4 POP PUSH2 0x229D DUP9 PUSH1 0xA0 ADD MLOAD DUP8 PUSH2 0x2850 JUMP JUMPDEST SWAP3 POP PUSH2 0x22AD DUP4 DUP10 PUSH1 0x80 ADD MLOAD PUSH2 0x3568 JUMP JUMPDEST PUSH2 0x22BB DUP6 DUP11 PUSH1 0xA0 ADD MLOAD PUSH2 0x3568 JUMP JUMPDEST GT PUSH2 0x22DD JUMPI DUP4 SWAP2 POP PUSH2 0x22D6 DUP9 PUSH1 0xA0 ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD DUP5 PUSH2 0x2A4F JUMP JUMPDEST SWAP1 POP PUSH2 0x22F6 JUMP JUMPDEST DUP3 SWAP1 POP PUSH2 0x22F3 DUP9 PUSH1 0x80 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD DUP4 PUSH2 0x2A4F JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x2300 DUP10 DUP4 PUSH2 0x2A84 JUMP JUMPDEST DUP6 MSTORE PUSH2 0x230C DUP9 DUP3 PUSH2 0x2A84 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP8 ADD DUP3 SWAP1 MSTORE DUP7 MLOAD MLOAD SWAP2 ADD MLOAD PUSH2 0x2324 SWAP2 SWAP1 PUSH2 0x2850 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MSTORE POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP5 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH32 0x4F524445525F554E46494C4C41424C4500000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x2392 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH32 0x494E56414C49445F54414B45525F414D4F554E54000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP4 ISZERO ISZERO PUSH2 0x23EA JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x2465 JUMPI PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xE DUP2 MSTORE PUSH32 0x494E56414C49445F53454E444552000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x2463 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x24EC JUMPI DUP4 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP7 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x494E56414C49445F54414B455200000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x24EA JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD ISZERO ISZERO PUSH2 0x2563 JUMPI PUSH2 0x250A DUP6 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x0 ADD MLOAD DUP4 PUSH2 0x1138 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH32 0x494E56414C49445F4F524445525F5349474E4154555245000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x2561 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP JUMPDEST PUSH2 0x2576 DUP3 DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0x80 ADD MLOAD PUSH2 0x358C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xE DUP2 MSTORE PUSH32 0x524F554E44494E475F4552524F52000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO PUSH2 0x25CC JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x25E3 DUP3 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x3559 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE DUP7 DUP2 ADD MLOAD DUP8 MLOAD DUP5 MLOAD SWAP4 DUP6 ADD MLOAD DUP6 DUP5 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH2 0x140 DUP13 ADD MLOAD PUSH2 0x160 DUP14 ADD MLOAD SWAP7 MLOAD DUP12 SWAP9 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP8 DUP9 AND SWAP9 SWAP8 SWAP1 SWAP7 AND SWAP7 PUSH32 0xDE19F18E1B56E6EADA7ED95CCA8398B602BE32F5864640537EE9A9A3532BB29D SWAP7 PUSH2 0x2665 SWAP7 DUP16 SWAP7 SWAP2 SWAP6 SWAP1 SWAP5 SWAP2 SWAP4 SWAP1 SWAP3 SWAP1 PUSH2 0x41A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x2687 DUP8 PUSH2 0x140 ADD MLOAD PUSH2 0x2862 JUMP JUMPDEST PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DIV SWAP3 POP PUSH2 0x269E DUP7 PUSH2 0x140 ADD MLOAD PUSH2 0x2862 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 SWAP5 DIV SWAP6 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x272D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2702 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x272D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2710 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x2756 DUP8 PUSH2 0x140 ADD MLOAD DUP5 DUP10 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST PUSH2 0x140 DUP7 ADD MLOAD DUP7 MLOAD DUP9 MLOAD DUP7 MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x2774 SWAP4 SWAP3 DUP7 SWAP3 SWAP1 SWAP2 PUSH2 0x35DD JUMP JUMPDEST PUSH2 0x278E DUP8 PUSH2 0x140 ADD MLOAD DUP5 DUP10 PUSH1 0x0 ADD MLOAD DUP9 DUP9 PUSH1 0x40 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST PUSH2 0x27AC DUP2 PUSH1 0x1 DUP10 PUSH1 0x0 ADD MLOAD DUP11 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST PUSH2 0x27CA DUP2 PUSH1 0x1 DUP9 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP8 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ ISZERO PUSH2 0x281C JUMPI PUSH2 0x2817 DUP2 PUSH1 0x1 DUP8 DUP11 PUSH1 0x40 ADD MLOAD PUSH2 0x2812 DUP10 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD DUP11 PUSH1 0x20 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x3559 JUMP JUMPDEST PUSH2 0x35DD JUMP JUMPDEST PUSH2 0x25CC JUMP JUMPDEST PUSH2 0x2836 DUP2 PUSH1 0x1 DUP8 DUP11 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST PUSH2 0x25CC DUP2 PUSH1 0x1 DUP8 DUP10 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x285C JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD GT PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F5448414E5F5A45524F5F4C454E4754485F52455155495245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4400000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x28E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP DUP2 MLOAD DUP3 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x28FB JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD DUP3 MLOAD PUSH1 0x0 NOT ADD SWAP1 SWAP3 MSTORE POP PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x29A1 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x14 DUP3 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x2A33 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH2 0x2A42 DUP3 PUSH1 0x14 DUP5 MLOAD SUB PUSH2 0x3684 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x13 NOT ADD SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A64 PUSH2 0x2A5E DUP6 DUP5 PUSH2 0x3568 JUMP JUMPDEST DUP5 PUSH2 0x3721 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x2A7B JUMPI DUP2 PUSH2 0x2A7D JUMP JUMPDEST DUP3 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2A8C PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x80 DUP5 ADD MLOAD PUSH2 0x2AA8 SWAP2 DUP5 SWAP2 PUSH2 0x2A4F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0x2AC4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A4F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xE0 DUP6 ADD MLOAD PUSH2 0x2AE3 SWAP3 SWAP2 SWAP1 PUSH2 0x2A4F JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x2B01 DUP7 PUSH2 0x140 ADD MLOAD PUSH2 0x2862 JUMP JUMPDEST PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DIV SWAP3 POP PUSH2 0x2B18 DUP7 PUSH2 0x160 ADD MLOAD PUSH2 0x2862 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 SWAP5 DIV SWAP6 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x2BA7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2B7C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2BA7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2B8A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x2BC8 DUP7 PUSH2 0x140 ADD MLOAD DUP5 DUP9 PUSH1 0x0 ADD MLOAD DUP9 DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST PUSH2 0x2BE2 DUP7 PUSH2 0x160 ADD MLOAD DUP4 DUP8 DUP10 PUSH1 0x0 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST PUSH2 0x2BFC DUP2 PUSH1 0x1 DUP9 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x40 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST PUSH2 0x2C12 DUP2 PUSH1 0x1 DUP8 DUP10 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x446F6D61696E536570617261746F72286164647265737320636F6E7472616374 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x21 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2CB1 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2C92 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 ADDRESS PUSH13 0x1000000000000000000000000 MUL DUP4 DUP4 ADD MSTORE DUP5 MLOAD PUSH1 0x14 DUP2 DUP6 SUB ADD DUP2 MSTORE PUSH1 0x34 SWAP1 SWAP4 ADD SWAP5 DUP6 SWAP1 MSTORE DUP3 MLOAD SWAP1 SWAP7 POP SWAP2 SWAP5 POP DUP4 SWAP3 POP DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2D30 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2D11 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 PUSH32 0x4F72646572280000000000000000000000000000000000000000000000000000 DUP4 DUP4 ADD MSTORE PUSH32 0x61646472657373206D616B6572416464726573732C0000000000000000000000 PUSH1 0x26 DUP5 ADD MSTORE PUSH32 0x616464726573732074616B6572416464726573732C0000000000000000000000 PUSH1 0x3B DUP5 ADD MSTORE PUSH32 0x6164647265737320666565526563697069656E74416464726573732C00000000 PUSH1 0x50 DUP5 ADD MSTORE PUSH32 0x616464726573732073656E646572416464726573732C00000000000000000000 PUSH1 0x6C DUP5 ADD MSTORE PUSH32 0x75696E74323536206D616B65724173736574416D6F756E742C00000000000000 PUSH1 0x82 DUP5 ADD MSTORE PUSH32 0x75696E743235362074616B65724173736574416D6F756E742C00000000000000 PUSH1 0x9B DUP5 ADD MSTORE PUSH32 0x75696E74323536206D616B65724665652C000000000000000000000000000000 PUSH1 0xB4 DUP5 ADD MSTORE PUSH32 0x75696E743235362074616B65724665652C000000000000000000000000000000 PUSH1 0xC5 DUP5 ADD MSTORE PUSH32 0x75696E743235362065787069726174696F6E54696D655365636F6E64732C0000 PUSH1 0xD6 DUP5 ADD MSTORE PUSH32 0x75696E743235362073616C742C00000000000000000000000000000000000000 PUSH1 0xF4 DUP5 ADD MSTORE PUSH32 0x6279746573206D616B65724173736574446174612C0000000000000000000000 PUSH2 0x101 DUP5 ADD MSTORE PUSH32 0x62797465732074616B65724173736574446174612C0000000000000000000000 PUSH2 0x116 DUP5 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH2 0x12B DUP5 ADD MSTORE DUP5 MLOAD DUP1 DUP5 SUB PUSH2 0x10C ADD DUP2 MSTORE PUSH2 0x12C SWAP1 SWAP4 ADD SWAP5 DUP6 SWAP1 MSTORE DUP3 MLOAD SWAP1 SWAP7 POP SWAP2 SWAP5 POP DUP4 SWAP3 POP DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2FB3 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2F94 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP9 PUSH1 0x80 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD DUP11 PUSH1 0xC0 ADD MLOAD DUP12 PUSH1 0xE0 ADD MLOAD DUP13 PUSH2 0x100 ADD MLOAD DUP14 PUSH2 0x120 ADD MLOAD DUP15 PUSH2 0x140 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x304C JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x302D JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x30AF JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x3090 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP16 PUSH2 0x160 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x3114 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x30F5 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x3177 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x3158 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP14 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP13 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP12 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP11 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x32D3 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x32B4 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x0 NOT PUSH1 0x20 SWAP5 DUP6 SUB PUSH2 0x100 EXP ADD SWAP1 DUP2 AND SWAP1 NOT SWAP2 SWAP1 SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP5 SWAP1 SWAP3 ADD DUP5 SWAP1 SUB DUP5 KECCAK256 DUP5 DUP3 ADD SWAP10 SWAP1 SWAP10 MSTORE DUP4 DUP3 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x60 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x80 DUP1 DUP3 ADD SWAP7 SWAP1 SWAP7 MSTORE DUP4 MLOAD DUP1 DUP3 SUB SWAP1 SWAP7 ADD DUP7 MSTORE PUSH1 0xA0 ADD SWAP3 DUP4 SWAP1 MSTORE POP POP DUP3 MLOAD SWAP1 SWAP2 DUP3 SWAP2 SWAP1 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x335C JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x333D JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 SWAP1 SWAP4 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP2 AND SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP3 ADD DUP3 SWAP1 SUB SWAP1 SWAP2 KECCAK256 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH32 0x4F524445525F554E46494C4C41424C4500000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x33ED JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x3468 JUMPI PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xE DUP2 MSTORE PUSH32 0x494E56414C49445F53454E444552000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x3466 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP JUMPDEST PUSH2 0x3470 PUSH2 0x21C2 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xD DUP2 MSTORE PUSH32 0x494E56414C49445F4D414B455200000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 AND SWAP2 AND EQ PUSH2 0x34D7 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH2 0x140 DUP6 ADD MLOAD PUSH2 0x160 DUP7 ADD MLOAD SWAP4 MLOAD DUP6 SWAP5 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP5 DUP6 AND SWAP5 SWAP4 SWAP1 SWAP4 AND SWAP3 PUSH32 0xB1AD640E9E79B6FDBC3C415DC2914AB54E753D2971F51EAB910F7AA317A3163A SWAP3 PUSH2 0x354D SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x42E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x2A7D JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 0x3584 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 0x3581 JUMPI INVALID JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 0x2A7D JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 DUP1 ISZERO ISZERO PUSH2 0x359B JUMPI INVALID JUMPDEST DUP7 DUP6 MULMOD SWAP2 POP DUP2 ISZERO ISZERO PUSH2 0x35B0 JUMPI PUSH1 0x0 SWAP3 POP PUSH2 0x685 JUMP JUMPDEST PUSH2 0x35CF PUSH2 0x35C0 DUP4 PUSH3 0xF4240 PUSH2 0x3568 JUMP JUMPDEST PUSH2 0x35CA DUP9 DUP8 PUSH2 0x3568 JUMP JUMPDEST PUSH2 0x3721 JUMP JUMPDEST PUSH2 0x3E8 LT SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT ISZERO PUSH2 0x2C12 JUMPI POP PUSH1 0xFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH32 0xA85E59E400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 DUP2 SWAP1 PUSH4 0xA85E59E4 SWAP1 PUSH2 0x364A SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x42B4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3664 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3678 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x370E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP POP ADD PUSH1 0x14 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 0x372F JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x120 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x3776 PUSH2 0x3738 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3783 PUSH2 0x3738 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A7D DUP3 CALLDATALOAD PUSH2 0x440A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x37CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x37E0 PUSH2 0x37DB DUP3 PUSH2 0x43BD JUMP JUMPDEST PUSH2 0x4396 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x381E JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x3808 DUP9 DUP3 PUSH2 0x3962 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x37F2 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x3839 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3847 PUSH2 0x37DB DUP3 PUSH2 0x43BD JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x381E JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x386F DUP9 DUP3 PUSH2 0x39B1 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3859 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x3896 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x38A4 PUSH2 0x37DB DUP3 PUSH2 0x43BD JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x38C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x381E JUMPI DUP2 PUSH2 0x38DF DUP9 DUP3 PUSH2 0x390D JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x38CC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A7D DUP3 CALLDATALOAD PUSH2 0x4416 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A7D DUP3 MLOAD PUSH2 0x4416 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A7D DUP3 CALLDATALOAD PUSH2 0x441B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1F DUP4 ADD DUP5 SGT PUSH2 0x392B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3943 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x395B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x3973 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3981 PUSH2 0x37DB DUP3 PUSH2 0x43DE JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x399D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39A8 DUP4 DUP3 DUP5 PUSH2 0x442F JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x39C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39CF PUSH2 0x180 PUSH2 0x4396 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x39DD DUP5 DUP5 PUSH2 0x37B0 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x39EE DUP5 DUP5 DUP4 ADD PUSH2 0x37B0 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x3A02 DUP5 DUP3 DUP6 ADD PUSH2 0x37B0 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x3A16 DUP5 DUP3 DUP6 ADD PUSH2 0x37B0 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x3A2A DUP5 DUP3 DUP6 ADD PUSH2 0x390D JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x3A3E DUP5 DUP3 DUP6 ADD PUSH2 0x390D JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x3A52 DUP5 DUP3 DUP6 ADD PUSH2 0x390D JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0x3A66 DUP5 DUP3 DUP6 ADD PUSH2 0x390D JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP PUSH2 0x100 PUSH2 0x3A7B DUP5 DUP3 DUP6 ADD PUSH2 0x390D JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH2 0x120 PUSH2 0x3A91 DUP5 DUP3 DUP6 ADD PUSH2 0x390D JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MSTORE POP PUSH2 0x140 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3AB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3ABF DUP5 DUP3 DUP6 ADD PUSH2 0x3962 JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MSTORE POP PUSH2 0x160 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3AE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3AED DUP5 DUP3 DUP6 ADD PUSH2 0x3962 JUMP JUMPDEST PUSH2 0x160 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A7D DUP3 CALLDATALOAD PUSH2 0x441E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A7D DUP3 MLOAD PUSH2 0x441E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2A64 DUP5 DUP5 PUSH2 0x37B0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3B4F DUP6 DUP6 PUSH2 0x37B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3B60 DUP6 DUP3 DUP7 ADD PUSH2 0x37B0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3B89 DUP6 DUP6 PUSH2 0x37B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3B60 DUP6 DUP3 DUP7 ADD PUSH2 0x38F5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3BAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3BC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A64 DUP5 DUP3 DUP6 ADD PUSH2 0x3828 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3BE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3BFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C07 DUP7 DUP3 DUP8 ADD PUSH2 0x3828 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C30 DUP7 DUP3 DUP8 ADD PUSH2 0x3885 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C59 DUP7 DUP3 DUP8 ADD PUSH2 0x37BC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3C78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C9B DUP7 DUP3 DUP8 ADD PUSH2 0x3828 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3C30 DUP7 DUP3 DUP8 ADD PUSH2 0x390D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3CBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2A64 DUP5 DUP5 PUSH2 0x3901 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3CDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2A64 DUP5 DUP5 PUSH2 0x390D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3CFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3B4F DUP6 DUP6 PUSH2 0x390D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3D1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3D29 DUP8 DUP8 PUSH2 0x390D JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x3D3A DUP8 DUP3 DUP9 ADD PUSH2 0x37B0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D63 DUP8 DUP3 DUP9 ADD PUSH2 0x3919 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3D84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3D90 DUP7 DUP7 PUSH2 0x390D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3DA1 DUP7 DUP3 DUP8 ADD PUSH2 0x37B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C59 DUP7 DUP3 DUP8 ADD PUSH2 0x3962 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3DDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A64 DUP5 DUP3 DUP6 ADD PUSH2 0x39B1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3E15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3E38 DUP8 DUP3 DUP9 ADD PUSH2 0x39B1 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3E61 DUP8 DUP3 DUP9 ADD PUSH2 0x39B1 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3E8A DUP8 DUP3 DUP9 ADD PUSH2 0x3962 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3EA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3EB3 DUP8 DUP3 DUP9 ADD PUSH2 0x3962 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3ED4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3EEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3EF7 DUP7 DUP3 DUP8 ADD PUSH2 0x39B1 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3DA1 DUP7 DUP3 DUP8 ADD PUSH2 0x390D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3F21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3F2D DUP10 DUP10 PUSH2 0x390D JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x3F3E DUP10 DUP3 DUP11 ADD PUSH2 0x37B0 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3F5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F67 DUP10 DUP3 DUP11 ADD PUSH2 0x3919 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3F86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F92 DUP10 DUP3 DUP11 ADD PUSH2 0x3919 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3FB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2A64 DUP5 DUP5 PUSH2 0x3AFA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3FD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2A64 DUP5 DUP5 PUSH2 0x3B06 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3FF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3FFE DUP7 DUP7 PUSH2 0x3AFA JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x400F DUP7 DUP3 DUP8 ADD PUSH2 0x37B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x3C59 DUP7 DUP3 DUP8 ADD PUSH2 0x37B0 JUMP JUMPDEST PUSH2 0x4029 DUP2 PUSH2 0x440A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x4029 DUP2 PUSH2 0x4416 JUMP JUMPDEST PUSH2 0x4029 DUP2 PUSH2 0x441B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x404C DUP3 PUSH2 0x4406 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x4060 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x443B JUMP JUMPDEST PUSH2 0x4069 DUP2 PUSH2 0x4467 JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x4029 DUP2 PUSH2 0x4424 JUMP JUMPDEST PUSH1 0x33 DUP2 MSTORE PUSH32 0x4F6E6C7920636F6E7472616374206F776E657220697320616C6C6F7765642074 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6F2063616C6C2074686973206D6574686F642E00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0x40E6 DUP5 DUP3 PUSH2 0x4038 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x40F9 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x4038 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x410C PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x4038 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x34D7 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x4038 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x120 DUP4 ADD SWAP1 PUSH2 0x4131 DUP5 DUP3 PUSH2 0x40D5 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x4144 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x40D5 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x34D7 PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x4038 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 DUP4 ADD SWAP1 PUSH2 0x4169 DUP5 DUP3 PUSH2 0x418F JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x417C PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x4038 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x34D7 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x4038 JUMP JUMPDEST PUSH2 0x4029 DUP2 PUSH2 0x441E JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x21EB DUP3 DUP5 PUSH2 0x4020 JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD PUSH2 0x41B4 DUP3 DUP11 PUSH2 0x4020 JUMP JUMPDEST PUSH2 0x41C1 PUSH1 0x20 DUP4 ADD DUP10 PUSH2 0x4038 JUMP JUMPDEST PUSH2 0x41CE PUSH1 0x40 DUP4 ADD DUP9 PUSH2 0x4038 JUMP JUMPDEST PUSH2 0x41DB PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x4038 JUMP JUMPDEST PUSH2 0x41E8 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x4038 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x41FA DUP2 DUP6 PUSH2 0x4041 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x420E DUP2 DUP5 PUSH2 0x4041 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x21EB DUP3 DUP5 PUSH2 0x402F JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x4237 DUP3 DUP7 PUSH2 0x4038 JUMP JUMPDEST PUSH2 0x4244 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x4020 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x4256 DUP2 DUP5 PUSH2 0x4041 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x426D DUP3 DUP6 PUSH2 0x4038 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2A64 DUP2 DUP5 PUSH2 0x4041 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x428D DUP3 DUP8 PUSH2 0x4038 JUMP JUMPDEST PUSH2 0x429A PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x418F JUMP JUMPDEST PUSH2 0x42A7 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x4038 JUMP JUMPDEST PUSH2 0x4256 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x4038 JUMP JUMPDEST PUSH1 0x80 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x42C5 DUP2 DUP8 PUSH2 0x4041 JUMP JUMPDEST SWAP1 POP PUSH2 0x42D4 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x4020 JUMP JUMPDEST PUSH2 0x42A7 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x4020 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x42F2 DUP2 DUP6 PUSH2 0x4041 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2A64 DUP2 DUP5 PUSH2 0x4041 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x21EB DUP3 DUP5 PUSH2 0x4076 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x2A7D DUP2 DUP5 PUSH2 0x4041 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x21EB DUP2 PUSH2 0x407F JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x21EB DUP3 DUP5 PUSH2 0x40D5 JUMP JUMPDEST PUSH2 0x120 DUP2 ADD PUSH2 0x21EB DUP3 DUP5 PUSH2 0x411F JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x21EB DUP3 DUP5 PUSH2 0x4158 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x21EB DUP3 DUP5 PUSH2 0x4038 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x437C DUP3 DUP7 PUSH2 0x418F JUMP JUMPDEST PUSH2 0x4389 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x4020 JUMP JUMPDEST PUSH2 0x2A64 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4020 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x43B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x43D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x43F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21EB DUP3 PUSH2 0x440A JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4456 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x443E JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x34D7 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 0xa5 BYTE 0xc4 SWAP6 0xb1 TIMESTAMP ISZERO 0xf5 0xaf 0xf7 0xb8 RETURNDATACOPY 0xda 0xb3 SWAP5 0xf7 0xc7 0xac POP 0xf8 PUSH26 0xE44E9113C22EC7328070286C6578706572696D656E74616CF500 CALLDATACOPY ",
				"sourceMap": "894:607:2:-;;;1213:286;8:9:-1;5:2;;;30:1;27;20:12;5:2;1213:286:2;;;;;;;;;;;;;;;;;;;;;;;;363:5:30;:18;;-1:-1:-1;;;;;;363:18:30;371:10;363:18;;;1658:30:6;;1348:13:2;;1658:30:6;;:14;;:30;;;;;:::i;:::-;;1588:107;1213:286:2;894:607;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;894:607:2;;;-1:-1:-1;894:607:2;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;6:442:-1:-;;111:4;99:17;;95:27;-1:-1;85:2;;136:1;133;126:12;85:2;166:6;160:13;188:64;203:48;244:6;203:48;;;188:64;;;179:73;;272:6;265:5;258:21;308:4;300:6;296:17;341:4;334:5;330:16;376:3;367:6;362:3;358:16;355:25;352:2;;;393:1;390;383:12;352:2;403:39;435:6;430:3;425;403:39;;;78:370;;;;;;;;456:360;;580:2;568:9;559:7;555:23;551:32;548:2;;;596:1;593;586:12;548:2;631:24;;-1:-1;;;;;664:30;;661:2;;;707:1;704;697:12;661:2;727:73;792:7;783:6;772:9;768:22;727:73;;;717:83;542:274;-1:-1;;;;542:274;823:256;885:2;879:9;911:17;;;-1:-1;;;;;971:34;;1007:22;;;968:62;965:2;;;1043:1;1040;1033:12;965:2;1059;1052:22;863:216;;-1:-1;863:216;1086:258;;-1:-1;;;;;1221:6;1218:30;1215:2;;;1261:1;1258;1251:12;1215:2;-1:-1;1334:4;1305;1282:17;;;;-1:-1;;1278:33;1324:15;;1152:192;1352:268;1417:1;1424:101;1438:6;1435:1;1432:13;1424:101;;;1505:11;;;1499:18;1486:11;;;1479:39;1460:2;1453:10;1424:101;;;1540:6;1537:1;1534:13;1531:2;;;1605:1;1596:6;1591:3;1587:16;1580:27;1531:2;1401:219;;;;;;894:607:2;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052600436106101955763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663288cdc91811461019a578063297bb70b146101d05780632ac12622146101fd5780633683ef8e1461022a578063380771641461024c5780633c28d861146102795780633e228bae146102a65780634ac14782146102c65780634d0ae546146102e65780634f9559b11461030657806350dde190146103265780635c78d0c714610346578063642f2eaf1461036657806364a3bc151461038657806377fcce68146103a65780637b8e3514146103c65780637e1d9808146103e657806382c174d0146104065780638da5cb5b1461042657806392c1421e146104485780639363470214610468578063a3e2038014610488578063b4be83d5146104a8578063bfc8bfce146104c8578063c75e0a81146104e8578063d46b02c314610515578063d9bfa73e14610535578063dd1c7d1814610555578063e5fa431b14610575578063eea086ba14610595578063f2fde38b146105aa578063ffa1ad74146105ca575b600080fd5b3480156101a657600080fd5b506101ba6101b5366004613cca565b6105ec565b6040516101c79190614360565b60405180910390f35b3480156101dc57600080fd5b506101f06101eb366004613bcf565b6105fe565b6040516101c79190614335565b34801561020957600080fd5b5061021d610218366004613cca565b61068e565b6040516101c7919061421b565b34801561023657600080fd5b5061024a610245366004613d07565b6106a3565b005b34801561025857600080fd5b5061026c610267366004613fa1565b610771565b6040516101c79190614306565b34801561028557600080fd5b50610299610294366004613dff565b61078c565b6040516101c79190614343565b3480156102b257600080fd5b506101f06102c1366004613ebf565b610878565b3480156102d257600080fd5b5061024a6102e1366004613b9a565b610a88565b3480156102f257600080fd5b506101f0610301366004613bcf565b610ac0565b34801561031257600080fd5b5061024a610321366004613cca565b610b47565b34801561033257600080fd5b506101f0610341366004613bcf565b610c67565b34801561035257600080fd5b5061024a610361366004613fdd565b610cee565b34801561037257600080fd5b5061021d610381366004613cca565b610f1c565b34801561039257600080fd5b506101f06103a1366004613ebf565b610f31565b3480156103b257600080fd5b5061024a6103c1366004613b6a565b610fae565b3480156103d257600080fd5b5061021d6103e1366004613b30565b610ff3565b3480156103f257600080fd5b506101f0610401366004613c63565b611013565b34801561041257600080fd5b5061021d610421366004613ce8565b6110eb565b34801561043257600080fd5b5061043b61110b565b6040516101c79190614198565b34801561045457600080fd5b5061043b610463366004613fa1565b61111a565b34801561047457600080fd5b5061021d610483366004613d6f565b611138565b34801561049457600080fd5b506101f06104a3366004613c63565b611914565b3480156104b457600080fd5b506101f06104c3366004613ebf565b611a24565b3480156104d457600080fd5b5061024a6104e3366004613f08565b611aa8565b3480156104f457600080fd5b50610508610503366004613dca565b611dda565b6040516101c79190614352565b34801561052157600080fd5b5061024a610530366004613dca565b611ec9565b34801561054157600080fd5b506101ba610550366004613b30565b611ef4565b34801561056157600080fd5b506101f0610570366004613c63565b611f11565b34801561058157600080fd5b506101f0610590366004613c63565b611fd7565b3480156105a157600080fd5b5061043b6120b2565b3480156105b657600080fd5b5061024a6105c5366004613b12565b6120c1565b3480156105d657600080fd5b506105df612129565b6040516101c79190614314565b60016020526000908152604090205481565b610606613738565b6000610610613738565b600091505b85518210156106855761066e868381518110151561062f57fe5b90602001906020020151868481518110151561064757fe5b90602001906020020151868581518110151561065f57fe5b90602001906020020151611a24565b905061067a8382612160565b600190910190610615565b50509392505050565b60026020526000908152604090205460ff1681565b6106de848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843750611138945050505050565b60408051808201909152601181527f494e56414c49445f5349474e4154555245000000000000000000000000000000602082015290151561073e5760405160e560020a62461bcd0281526004016107359190614314565b60405180910390fd5b5050506000918252600560209081526040808420600160a060020a0390931684529190529020805460ff19166001179055565b600960205260009081526040902054600160a060020a031681565b610794613761565b61079c613790565b6107a4613790565b61016080880151610140808901919091528801519087015260006107c788611dda565b92506107d287611dda565b91506107dc6121c2565b90506107e888886121f1565b6107fc888885604001518560400151612271565b80516020015190945061081690899085908490808b612335565b602080850151015161082f90889084908490808a612335565b61084888828560200151866040015188600001516125d5565b61086187828460200151856040015188602001516125d5565b61086d88888387612674565b505050949350505050565b610880613738565b604080517fb4be83d5000000000000000000000000000000000000000000000000000000008082526060600483018181528851606485019081526020808b01516084870152958a015160a48601529189015160c4850152608089015160e485015260a089015161010485015260c089015161012485015260e0890151610144850152610100890151610164850152610120890151610184850152610140890180516101a486019081526101608b01516101c487015261018090525180516101e48601819052939591938493926024870192849261020489019291820191601f82010460005b81811015610983578351855260209485019490930192600101610965565b50505050818103610160808401919091528c0151805180835260209283019291820191601f82010460005b818110156109cc5783518552602094850194909301926001016109ae565b5050508b84525084810360209384019081528a518083529093918201918b81019190601f82010460005b81811015610a145783518552602094850194909301926001016109f6565b5060808a8b86038c305af4808015610a335760018114610a5157610a74565b60008e52600060208f0152600060408f0152600060608f0152610a74565b8b518e5260208c015160208f015260408c015160408f015260608c015160608f01525b505050505050505050505050509392505050565b60005b8151811015610abc57610ab48282815181101515610aa557fe5b90602001906020020151611ec9565b600101610a8b565b5050565b610ac8613738565b6000610ad2613738565b600091505b855182101561068557610b308683815181101515610af157fe5b906020019060200201518684815181101515610b0957fe5b906020019060200201518685815181101515610b2157fe5b90602001906020020151610f31565b9050610b3c8382612160565b600190910190610ad7565b600080600080610b556121c2565b9350600160a060020a0384163314610b6d5733610b70565b60005b600160a060020a038086166000908152600360209081526040808320938516835292815290829020548251808401909352601783527f494e56414c49445f4e45575f4f524445525f45504f434800000000000000000091830191909152919450600187019350909150818311610bfc5760405160e560020a62461bcd0281526004016107359190614314565b50600160a060020a0380851660008181526003602090815260408083209488168084529490915290819020859055517f82af639571738f4ebd4268fb0363d8957ebe1bbb9e78dba5ebd69eed39b154f090610c58908690614360565b60405180910390a35050505050565b610c6f613738565b6000610c79613738565b600091505b855182101561068557610cd78683815181101515610c9857fe5b906020019060200201518684815181101515610cb057fe5b906020019060200201518685815181101515610cc857fe5b90602001906020020151610878565b9050610ce38382612160565b600190910190610c7e565b6000805481908190600160a060020a03163314610d205760405160e560020a62461bcd02815260040161073590614325565b60ff8616600090815260096020908152604091829020548251808401909352601483527f41535345545f50524f58595f4d49534d4154434800000000000000000000000091830191909152600160a060020a03908116945085168414610d9c5760405160e560020a62461bcd0281526004016107359190614314565b50849150600160a060020a03821615610ea05781600160a060020a031663ae25532e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610e0657600080fd5b505af1158015610e1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e3e9190810190613fbf565b60408051808201909152601781527f41535345545f50524f58595f49445f4d49534d41544348000000000000000000602082015290915060ff80831690881614610e9e5760405160e560020a62461bcd0281526004016107359190614314565b505b60ff861660009081526009602052604090819020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038516179055517f27ef5f484e50f2daf7c2d82c60fe4ce409009541176eb64095beac369db1d26090610f0c9088908890889061436e565b60405180910390a1505050505050565b60076020526000908152604090205460ff1681565b610f39613738565b610f44848484611a24565b9050828160200151146040805190810160405280601481526020017f434f4d504c4554455f46494c4c5f4641494c4544000000000000000000000000815250901515610fa65760405160e560020a62461bcd0281526004016107359190614314565b509392505050565b6000610fb86121c2565b600160a060020a03908116600090815260066020908152604080832096909316825294909452909220805460ff191691151591909117905550565b600660209081526000928352604080842090915290825290205460ff1681565b61101b613738565b6060600080611028613738565b87600081518110151561103757fe5b9060200190602002015161016001519350600092505b87518310156110e05783888481518110151561106557fe5b906020019060200201516101600181905250611085878660200151612850565b91506110b1888481518110151561109857fe5b9060200190602002015183888681518110151561065f57fe5b8451600101855290506110c48582612160565b86856020015114156110d5576110e0565b60019092019161104d565b505050509392505050565b600560209081526000928352604080842090915290825290205460ff1681565b600054600160a060020a031681565b60ff16600090815260096020526040902054600160a060020a031690565b6000806000806000806000808851116040805190810160405280601e81526020017f4c454e4754485f475245415445525f5448414e5f305f524551554952454400008152509015156111a05760405160e560020a62461bcd0281526004016107359190614314565b506111aa88612862565b60f860020a900460ff1660088111156111bf57fe5b955060008660088111156111cf57fe5b141561122357604080518082018252601181527f5349474e41545552455f494c4c4547414c0000000000000000000000000000006020820152905160e560020a62461bcd0281526107359190600401614314565b600186600881111561123157fe5b141561129957875160408051808201909152601181527f4c454e4754485f315f52455155495245440000000000000000000000000000006020820152901561128f5760405160e560020a62461bcd0281526004016107359190614314565b5060009650611907565b60028660088111156112a757fe5b14156113af57875160408051808201909152601281527f4c454e4754485f36365f524551554952454400000000000000000000000000006020820152906041146113075760405160e560020a62461bcd0281526004016107359190614314565b5087600081518110151561131757fe5b016020015160f860020a908190048102049450611335886001612917565b9350611342886021612917565b925060018a86868660405160008152602001604052604051611367949392919061427f565b60206040516020810390808403906000865af115801561138b573d6000803e3d6000fd5b5050604051601f190151600160a060020a038b811690821614985092506119079050565b60038660088111156113bd57fe5b141561156957875160408051808201909152601281527f4c454e4754485f36365f5245515549524544000000000000000000000000000060208201529060411461141d5760405160e560020a62461bcd0281526004016107359190614314565b5087600081518110151561142d57fe5b016020015160f860020a90819004810204945061144b886001612917565b9350611458886021612917565b925060016040805190810160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152508b6040516020018083805190602001908083835b602083106114c55780518252601f1990920191602091820191016114a6565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b602083106115255780518252601f199092019160209182019101611506565b51815160209384036101000a60001901801990921691161790526040805192909401829003822060008352910192839052611367945092508991899150889061427f565b600486600881111561157757fe5b14156115e957875160408051808201909152601181527f4c454e4754485f315f5245515549524544000000000000000000000000000000602082015290156115d55760405160e560020a62461bcd0281526004016107359190614314565b50600160a060020a03891633149650611907565b60058660088111156115f757fe5b141561169d576040517f1626ba7e000000000000000000000000000000000000000000000000000000008152600160a060020a038a1690631626ba7e90611644908d908c9060040161425f565b602060405180830381600087803b15801561165e57600080fd5b505af1158015611672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116969190810190613cac565b9650611907565b60068660088111156116ab57fe5b141561173e576116ba886129ab565b600160a060020a03808b1660009081526006602090815260408083209385168352929052205490915060ff1615156116f55760009650611907565b6040517f93634702000000000000000000000000000000000000000000000000000000008152600160a060020a03821690639363470290611644908d908d908d90600401614229565b600786600881111561174c57fe5b141561177f5760008a8152600560209081526040808320600160a060020a038d16845290915290205460ff169650611907565b600886600881111561178d57fe5b141561187857875160408051808201909152601281527f4c454e4754485f36365f524551554952454400000000000000000000000000006020820152906041146117ed5760405160e560020a62461bcd0281526004016107359190614314565b508760008151811015156117fd57fe5b016020015160f860020a90819004810204945061181b886001612917565b9350611828886021612917565b604080518082018252601b8082527f19457468657265756d205369676e6564204d6573736167653a0a4100000000006020808401918252935194975060019492938f9301918291908083836114c5565b600786600881111561188657fe5b14156118b95760008a8152600560209081526040808320600160a060020a038d16845290915290205460ff169650611907565b604080518082018252601581527f5349474e41545552455f554e535550504f5254454400000000000000000000006020820152905160e560020a62461bcd0281526107359190600401614314565b5050505050509392505050565b61191c613738565b6060600080600061192b613738565b88600081518110151561193a57fe5b9060200190602002015161014001519450600093505b8851841015611a185784898581518110151561196857fe5b6020908102909101015161014001528551611984908990612850565b92506119c7898581518110151561199757fe5b9060200190602002015160a001518a868151811015156119b357fe5b906020019060200201516080015185612a4f565b91506119f389858151811015156119da57fe5b90602001906020020151838987815181101515610cc857fe5b90506119ff8682612160565b8551881415611a0d57611a18565b600190930192611950565b50505050509392505050565b611a2c613738565b611a34613790565b6000806000611a4288611dda565b9350611a4c6121c2565b9250611a608860a001518560400151612850565b9150611a6c8783612a6c565b9050611a7c8885858a858b612335565b611a868882612a84565b9450611a9d888486602001518760400151896125d5565b6110e0888487612aee565b60085460408051808201909152601281527f5245454e5452414e43595f494c4c4547414c00000000000000000000000000006020820152600091600160a060020a031615611b0c5760405160e560020a62461bcd0281526004016107359190614314565b5030868887876040516020018086600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140185600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018481526020018383808284378201915050955050505050506040516020818303038152906040526040518082805190602001908083835b60208310611bbd5780518252601f199092019160209182019101611b9e565b51815160209384036101000a60001901801990921691161790526040805192909401829003822060008181526007835285902054838601909552600f83527f494e56414c49445f54585f48415348000000000000000000000000000000000091830191909152955093505060ff16159050611c4e5760405160e560020a62461bcd0281526004016107359190614314565b50600160a060020a0386163314611d1b57611c9a818785858080601f01602080910402602001604051908101604052809392919081815260200183838082843750611138945050505050565b60408051808201909152601481527f494e56414c49445f54585f5349474e41545552450000000000000000000000006020820152901515611cf15760405160e560020a62461bcd0281526004016107359190614314565b506008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388161790555b60008181526007602052604090819020805460ff191660011790555130908690869080838380828437820191505092505050600060405180830381855af460408051808201909152601081527f4641494c45445f455845435554494f4e000000000000000000000000000000006020820152925015159050611db35760405160e560020a62461bcd0281526004016107359190614314565b50506008805473ffffffffffffffffffffffffffffffffffffffff19169055505050505050565b611de2613790565b611deb82612c1a565b602082015260808201511515611e085760015b60ff168152611ec4565b60a08201511515611e1a576002611dfe565b6101008201514210611e2d576004611dfe565b60208082015160009081526002909152604090205460ff1615611e51576006611dfe565b6101208201518251600160a060020a0390811660009081526003602090815260408083206060880151909416835292905220541115611e91576006611dfe565b602080820151600090815260019091526040908190205490820181905260a083015111611ebf576005611dfe565b600381525b919050565b611ed1613790565b611eda82611dda565b9050611ee6828261338e565b610abc8282602001516134dd565b600360209081526000928352604080842090915290825290205481565b611f19613738565b6060600080611f26613738565b876000815181101515611f3557fe5b9060200190602002015161016001519350600092505b87518310156110e057838884815181101515611f6357fe5b906020019060200201516101600181905250611f83878660200151612850565b9150611faf8884815181101515611f9657fe5b90602001906020020151838886815181101515610cc857fe5b9050611fbb8582612160565b8685602001511415611fcc576110e0565b600190920191611f4b565b611fdf613738565b60606000806000611fee613738565b886000815181101515611ffd57fe5b9060200190602002015161014001519450600093505b8851841015611a185784898581518110151561202b57fe5b6020908102909101015161014001528551612047908990612850565b925061205a898581518110151561199757fe5b9150612086898581518110151561206d57fe5b9060200190602002015183898781518110151561065f57fe5b8551600101865290506120998682612160565b85518814156120a757611a18565b600190930192612013565b600854600160a060020a031681565b600054600160a060020a031633146120ee5760405160e560020a62461bcd02815260040161073590614325565b600160a060020a03811615612126576000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b60408051808201909152600b81527f322e302e312d616c706861000000000000000000000000000000000000000000602082015281565b8151815161216e9190613559565b8252602080830151908201516121849190613559565b60208301526040808301519082015161219d9190613559565b6040830152606080830151908201516121b69190613559565b60609092019190915250565b6008546000908190600160a060020a0316156121e957600854600160a060020a03166121eb565b335b92915050565b6122038260a001518260a00151613568565b61221583608001518360800151613568565b60408051808201909152601881527f4e454741544956455f5350524541445f52455155495245440000000000000000602082015291111561226c5760405160e560020a62461bcd0281526004016107359190614314565b505050565b612279613761565b60008060008061228d8960a0015188612850565b935061229d8860a0015187612850565b92506122ad838960800151613568565b6122bb858a60a00151613568565b116122dd578391506122d68860a00151896080015184612a4f565b90506122f6565b8290506122f388608001518960a0015183612a4f565b91505b6123008983612a84565b855261230c8882612a84565b60208087018290528651519101516123249190612850565b604086015250505050949350505050565b845160408051808201909152601081527f4f524445525f554e46494c4c41424c450000000000000000000000000000000060208201529060ff166003146123925760405160e560020a62461bcd0281526004016107359190614314565b5060408051808201909152601481527f494e56414c49445f54414b45525f414d4f554e5400000000000000000000000060208201528315156123ea5760405160e560020a62461bcd0281526004016107359190614314565b506060860151600160a060020a03161561246557606086015160408051808201909152600e81527f494e56414c49445f53454e444552000000000000000000000000000000000000602082015290600160a060020a031633146124635760405160e560020a62461bcd0281526004016107359190614314565b505b6020860151600160a060020a0316156124ec5783600160a060020a03168660200151600160a060020a0316146040805190810160405280600d81526020017f494e56414c49445f54414b4552000000000000000000000000000000000000008152509015156124ea5760405160e560020a62461bcd0281526004016107359190614314565b505b604085015115156125635761250a8560200151876000015183611138565b60408051808201909152601781527f494e56414c49445f4f524445525f5349474e415455524500000000000000000060208201529015156125615760405160e560020a62461bcd0281526004016107359190614314565b505b612576828760a00151886080015161358c565b60408051808201909152600e81527f524f554e44494e475f4552524f52000000000000000000000000000000000000602082015290156125cc5760405160e560020a62461bcd0281526004016107359190614314565b50505050505050565b6125e3828260200151613559565b600084815260016020908152604091829020929092558681015187518451938501518584015160608701516101408c01516101608d015196518b98600160a060020a039788169897909616967fde19f18e1b56e6eada7ed95cca8398b602be32f5864640537ee9a9a3532bb29d96612665968f969195909491939092906141a6565b60405180910390a45050505050565b6000806060612687876101400151612862565b60f860020a9004925061269e866101400151612862565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260f860020a909404955083018282801561272d5780601f106127025761010080835404028352916020019161272d565b820191906000526020600020905b81548152906001019060200180831161271057829003601f168201915b5050505050905061275687610140015184896000015189600001518860200151602001516135dd565b610140860151865188518651602001516127749392869290916135dd565b61278e8761014001518489600001518888604001516135dd565b6127ac81600189600001518a604001518860000151604001516135dd565b6127ca816001886000015189604001518860200151604001516135dd565b8560400151600160a060020a03168760400151600160a060020a0316141561281c57612817816001878a604001516128128960000151606001518a6020015160600151613559565b6135dd565b6125cc565b612836816001878a604001518860000151606001516135dd565b6125cc8160018789604001518860200151606001516135dd565b60008282111561285c57fe5b50900390565b600080825111606060405190810160405280602181526020017f475245415445525f5448414e5f5a45524f5f4c454e4754485f5245515549524581526020017f44000000000000000000000000000000000000000000000000000000000000008152509015156128e85760405160e560020a62461bcd0281526004016107359190614314565b508151829060001981019081106128fb57fe5b01602001518251600019019092525060f860020a908190040290565b60008160200183511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524581526020017f51554952454400000000000000000000000000000000000000000000000000008152509015156129a15760405160e560020a62461bcd0281526004016107359190614314565b5050016020015190565b6000601482511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524581526020017f5155495245440000000000000000000000000000000000000000000000000000815250901515612a335760405160e560020a62461bcd0281526004016107359190614314565b50612a42826014845103613684565b8251601319019092525090565b6000612a64612a5e8584613568565b84613721565b949350505050565b6000818310612a7b5781612a7d565b825b9392505050565b612a8c613738565b6020810182905260a08301516080840151612aa8918491612a4f565b8152602081015160a084015160c0850151612ac4929190612a4f565b6040820152602081015160a084015160e0850151612ae3929190612a4f565b606082015292915050565b6000806060612b01866101400151612862565b60f860020a90049250612b18866101600151612862565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260f860020a9094049550830182828015612ba75780601f10612b7c57610100808354040283529160200191612ba7565b820191906000526020600020905b815481529060010190602001808311612b8a57829003601f168201915b50505050509050612bc88661014001518488600001518888600001516135dd565b612be28661016001518387896000015188602001516135dd565b612bfc8160018860000151896040015188604001516135dd565b612c1281600187896040015188606001516135dd565b505050505050565b600060405160200180807f446f6d61696e536570617261746f72286164647265737320636f6e747261637481526020017f290000000000000000000000000000000000000000000000000000000000000081525060210190506040516020818303038152906040526040518082805190602001908083835b60208310612cb15780518252601f199092019160209182019101612c92565b51815160209384036101000a600019018019909216911617905260408051929094018290038220306c0100000000000000000000000002838301528451601481850301815260349093019485905282519096509194508392508401908083835b60208310612d305780518252601f199092019160209182019101612d11565b51815160209384036101000a6000190180199092169116179052604080519290940182900382207f4f72646572280000000000000000000000000000000000000000000000000000838301527f61646472657373206d616b6572416464726573732c000000000000000000000060268401527f616464726573732074616b6572416464726573732c0000000000000000000000603b8401527f6164647265737320666565526563697069656e74416464726573732c0000000060508401527f616464726573732073656e646572416464726573732c00000000000000000000606c8401527f75696e74323536206d616b65724173736574416d6f756e742c0000000000000060828401527f75696e743235362074616b65724173736574416d6f756e742c00000000000000609b8401527f75696e74323536206d616b65724665652c00000000000000000000000000000060b48401527f75696e743235362074616b65724665652c00000000000000000000000000000060c58401527f75696e743235362065787069726174696f6e54696d655365636f6e64732c000060d68401527f75696e743235362073616c742c0000000000000000000000000000000000000060f48401527f6279746573206d616b65724173736574446174612c00000000000000000000006101018401527f62797465732074616b65724173736574446174612c00000000000000000000006101168401527f290000000000000000000000000000000000000000000000000000000000000061012b840152845180840361010c01815261012c9093019485905282519096509194508392508401908083835b60208310612fb35780518252601f199092019160209182019101612f94565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020846000015185602001518660400151876060015188608001518960a001518a60c001518b60e001518c61010001518d61012001518e61014001516040516020018082805190602001908083835b6020831061304c5780518252601f19909201916020918201910161302d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106130af5780518252601f199092019160209182019101613090565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208f61016001516040516020018082805190602001908083835b602083106131145780518252601f1990920191602091820191016130f5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106131775780518252601f199092019160209182019101613158565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020604051602001808d600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018c600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018b600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018a600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401898152602001888152602001878152602001868152602001858152602001848152602001836000191660001916815260200182600019166000191681526020019c505050505050505050505050506040516020818303038152906040526040518082805190602001908083835b602083106132d35780518252601f1990920191602091820191016132b4565b51815160001960209485036101000a019081169019919091161790526040805194909201849003842084820199909952838201979097526060830195909552506080808201969096528351808203909601865260a001928390525050825190918291908401908083835b6020831061335c5780518252601f19909201916020918201910161333d565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b805160408051808201909152601081527f4f524445525f554e46494c4c41424c4500000000000000000000000000000000602082015260009160ff166003146133ed5760405160e560020a62461bcd0281526004016107359190614314565b506060830151600160a060020a03161561346857606083015160408051808201909152600e81527f494e56414c49445f53454e444552000000000000000000000000000000000000602082015290600160a060020a031633146134665760405160e560020a62461bcd0281526004016107359190614314565b505b6134706121c2565b835160408051808201909152600d81527f494e56414c49445f4d414b4552000000000000000000000000000000000000006020820152919250600160a060020a038084169116146134d75760405160e560020a62461bcd0281526004016107359190614314565b50505050565b60008181526002602052604090819020805460ff1916600117905582810151835161014085015161016086015193518594600160a060020a039485169493909316927fb1ad640e9e79b6fdbc3c415dc2914ab54e753d2971f51eab910f7aa317a3163a9261354d929091906142e1565b60405180910390a45050565b600082820183811015612a7d57fe5b6000828202831580613584575082848281151561358157fe5b04145b1515612a7d57fe5b60008060008480151561359b57fe5b86850991508115156135b05760009250610685565b6135cf6135c083620f4240613568565b6135ca8887613568565b613721565b6103e8109695505050505050565b600080821115612c12575060ff8416600090815260096020526040908190205490517fa85e59e4000000000000000000000000000000000000000000000000000000008152600160a060020a0390911690819063a85e59e49061364a9089908890889088906004016142b4565b600060405180830381600087803b15801561366457600080fd5b505af1158015613678573d6000803e3d6000fd5b50505050505050505050565b60008160140183511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524581526020017f515549524544000000000000000000000000000000000000000000000000000081525090151561370e5760405160e560020a62461bcd0281526004016107359190614314565b50500160140151600160a060020a031690565b600080828481151561372f57fe5b04949350505050565b608060405190810160405280600081526020016000815260200160008152602001600081525090565b61012060405190810160405280613776613738565b8152602001613783613738565b8152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b6000612a7d823561440a565b6000601f820183136137cd57600080fd5b81356137e06137db826143bd565b614396565b81815260209384019390925082018360005b8381101561381e57813586016138088882613962565b84525060209283019291909101906001016137f2565b5050505092915050565b6000601f8201831361383957600080fd5b81356138476137db826143bd565b81815260209384019390925082018360005b8381101561381e578135860161386f88826139b1565b8452506020928301929190910190600101613859565b6000601f8201831361389657600080fd5b81356138a46137db826143bd565b915081818352602084019350602081019050838560208402820111156138c957600080fd5b60005b8381101561381e57816138df888261390d565b84525060209283019291909101906001016138cc565b6000612a7d8235614416565b6000612a7d8251614416565b6000612a7d823561441b565b600080601f8301841361392b57600080fd5b50813567ffffffffffffffff81111561394357600080fd5b60208301915083600182028301111561395b57600080fd5b9250929050565b6000601f8201831361397357600080fd5b81356139816137db826143de565b9150808252602083016020830185838301111561399d57600080fd5b6139a883828461442f565b50505092915050565b600061018082840312156139c457600080fd5b6139cf610180614396565b905060006139dd84846137b0565b82525060206139ee848483016137b0565b6020830152506040613a02848285016137b0565b6040830152506060613a16848285016137b0565b6060830152506080613a2a8482850161390d565b60808301525060a0613a3e8482850161390d565b60a08301525060c0613a528482850161390d565b60c08301525060e0613a668482850161390d565b60e083015250610100613a7b8482850161390d565b61010083015250610120613a918482850161390d565b6101208301525061014082013567ffffffffffffffff811115613ab357600080fd5b613abf84828501613962565b6101408301525061016082013567ffffffffffffffff811115613ae157600080fd5b613aed84828501613962565b6101608301525092915050565b6000612a7d823561441e565b6000612a7d825161441e565b600060208284031215613b2457600080fd5b6000612a6484846137b0565b60008060408385031215613b4357600080fd5b6000613b4f85856137b0565b9250506020613b60858286016137b0565b9150509250929050565b60008060408385031215613b7d57600080fd5b6000613b8985856137b0565b9250506020613b60858286016138f5565b600060208284031215613bac57600080fd5b813567ffffffffffffffff811115613bc357600080fd5b612a6484828501613828565b600080600060608486031215613be457600080fd5b833567ffffffffffffffff811115613bfb57600080fd5b613c0786828701613828565b935050602084013567ffffffffffffffff811115613c2457600080fd5b613c3086828701613885565b925050604084013567ffffffffffffffff811115613c4d57600080fd5b613c59868287016137bc565b9150509250925092565b600080600060608486031215613c7857600080fd5b833567ffffffffffffffff811115613c8f57600080fd5b613c9b86828701613828565b9350506020613c308682870161390d565b600060208284031215613cbe57600080fd5b6000612a648484613901565b600060208284031215613cdc57600080fd5b6000612a64848461390d565b60008060408385031215613cfb57600080fd5b6000613b4f858561390d565b60008060008060608587031215613d1d57600080fd5b6000613d29878761390d565b9450506020613d3a878288016137b0565b935050604085013567ffffffffffffffff811115613d5757600080fd5b613d6387828801613919565b95989497509550505050565b600080600060608486031215613d8457600080fd5b6000613d90868661390d565b9350506020613da1868287016137b0565b925050604084013567ffffffffffffffff811115613dbe57600080fd5b613c5986828701613962565b600060208284031215613ddc57600080fd5b813567ffffffffffffffff811115613df357600080fd5b612a64848285016139b1565b60008060008060808587031215613e1557600080fd5b843567ffffffffffffffff811115613e2c57600080fd5b613e38878288016139b1565b945050602085013567ffffffffffffffff811115613e5557600080fd5b613e61878288016139b1565b935050604085013567ffffffffffffffff811115613e7e57600080fd5b613e8a87828801613962565b925050606085013567ffffffffffffffff811115613ea757600080fd5b613eb387828801613962565b91505092959194509250565b600080600060608486031215613ed457600080fd5b833567ffffffffffffffff811115613eeb57600080fd5b613ef7868287016139b1565b9350506020613da18682870161390d565b60008060008060008060808789031215613f2157600080fd5b6000613f2d898961390d565b9650506020613f3e89828a016137b0565b955050604087013567ffffffffffffffff811115613f5b57600080fd5b613f6789828a01613919565b9450945050606087013567ffffffffffffffff811115613f8657600080fd5b613f9289828a01613919565b92509250509295509295509295565b600060208284031215613fb357600080fd5b6000612a648484613afa565b600060208284031215613fd157600080fd5b6000612a648484613b06565b600080600060608486031215613ff257600080fd5b6000613ffe8686613afa565b935050602061400f868287016137b0565b9250506040613c59868287016137b0565b6140298161440a565b82525050565b61402981614416565b6140298161441b565b600061404c82614406565b80845261406081602086016020860161443b565b61406981614467565b9093016020019392505050565b61402981614424565b603381527f4f6e6c7920636f6e7472616374206f776e657220697320616c6c6f776564207460208201527f6f2063616c6c2074686973206d6574686f642e00000000000000000000000000604082015260600190565b805160808301906140e68482614038565b5060208201516140f96020850182614038565b50604082015161410c6040850182614038565b5060608201516134d76060850182614038565b805161012083019061413184826140d5565b50602082015161414460808501826140d5565b5060408201516134d7610100850182614038565b80516060830190614169848261418f565b50602082015161417c6020850182614038565b5060408201516134d76040850182614038565b6140298161441e565b602081016121eb8284614020565b60e081016141b4828a614020565b6141c16020830189614038565b6141ce6040830188614038565b6141db6060830187614038565b6141e86080830186614038565b81810360a08301526141fa8185614041565b905081810360c083015261420e8184614041565b9998505050505050505050565b602081016121eb828461402f565b606081016142378286614038565b6142446020830185614020565b81810360408301526142568184614041565b95945050505050565b6040810161426d8285614038565b8181036020830152612a648184614041565b6080810161428d8287614038565b61429a602083018661418f565b6142a76040830185614038565b6142566060830184614038565b608080825281016142c58187614041565b90506142d46020830186614020565b6142a76040830185614020565b604080825281016142f28185614041565b90508181036020830152612a648184614041565b602081016121eb8284614076565b60208082528101612a7d8184614041565b602080825281016121eb8161407f565b608081016121eb82846140d5565b61012081016121eb828461411f565b606081016121eb8284614158565b602081016121eb8284614038565b6060810161437c828661418f565b6143896020830185614020565b612a646040830184614020565b60405181810167ffffffffffffffff811182821017156143b557600080fd5b604052919050565b600067ffffffffffffffff8211156143d457600080fd5b5060209081020190565b600067ffffffffffffffff8211156143f557600080fd5b506020601f91909101601f19160190565b5190565b600160a060020a031690565b151590565b90565b60ff1690565b60006121eb8261440a565b82818337506000910152565b60005b8381101561445657818101518382015260200161443e565b838111156134d75750506000910152565b601f01601f1916905600a265627a7a72305820a51ac495b14215f5aff7b83edab394f7c7ac50f879e44e9113c22ec7328070286c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x195 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x288CDC91 DUP2 EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x297BB70B EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0x2AC12622 EQ PUSH2 0x1FD JUMPI DUP1 PUSH4 0x3683EF8E EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x38077164 EQ PUSH2 0x24C JUMPI DUP1 PUSH4 0x3C28D861 EQ PUSH2 0x279 JUMPI DUP1 PUSH4 0x3E228BAE EQ PUSH2 0x2A6 JUMPI DUP1 PUSH4 0x4AC14782 EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0x4D0AE546 EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x4F9559B1 EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0x50DDE190 EQ PUSH2 0x326 JUMPI DUP1 PUSH4 0x5C78D0C7 EQ PUSH2 0x346 JUMPI DUP1 PUSH4 0x642F2EAF EQ PUSH2 0x366 JUMPI DUP1 PUSH4 0x64A3BC15 EQ PUSH2 0x386 JUMPI DUP1 PUSH4 0x77FCCE68 EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0x7B8E3514 EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0x7E1D9808 EQ PUSH2 0x3E6 JUMPI DUP1 PUSH4 0x82C174D0 EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x426 JUMPI DUP1 PUSH4 0x92C1421E EQ PUSH2 0x448 JUMPI DUP1 PUSH4 0x93634702 EQ PUSH2 0x468 JUMPI DUP1 PUSH4 0xA3E20380 EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0xB4BE83D5 EQ PUSH2 0x4A8 JUMPI DUP1 PUSH4 0xBFC8BFCE EQ PUSH2 0x4C8 JUMPI DUP1 PUSH4 0xC75E0A81 EQ PUSH2 0x4E8 JUMPI DUP1 PUSH4 0xD46B02C3 EQ PUSH2 0x515 JUMPI DUP1 PUSH4 0xD9BFA73E EQ PUSH2 0x535 JUMPI DUP1 PUSH4 0xDD1C7D18 EQ PUSH2 0x555 JUMPI DUP1 PUSH4 0xE5FA431B EQ PUSH2 0x575 JUMPI DUP1 PUSH4 0xEEA086BA EQ PUSH2 0x595 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5AA JUMPI DUP1 PUSH4 0xFFA1AD74 EQ PUSH2 0x5CA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BA PUSH2 0x1B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3CCA JUMP JUMPDEST PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4360 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x1EB CALLDATASIZE PUSH1 0x4 PUSH2 0x3BCF JUMP JUMPDEST PUSH2 0x5FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4335 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21D PUSH2 0x218 CALLDATASIZE PUSH1 0x4 PUSH2 0x3CCA JUMP JUMPDEST PUSH2 0x68E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x421B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x236 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x245 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D07 JUMP JUMPDEST PUSH2 0x6A3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26C PUSH2 0x267 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA1 JUMP JUMPDEST PUSH2 0x771 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4306 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x285 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x299 PUSH2 0x294 CALLDATASIZE PUSH1 0x4 PUSH2 0x3DFF JUMP JUMPDEST PUSH2 0x78C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4343 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x2C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3EBF JUMP JUMPDEST PUSH2 0x878 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x2E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B9A JUMP JUMPDEST PUSH2 0xA88 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x301 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BCF JUMP JUMPDEST PUSH2 0xAC0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x321 CALLDATASIZE PUSH1 0x4 PUSH2 0x3CCA JUMP JUMPDEST PUSH2 0xB47 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x341 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BCF JUMP JUMPDEST PUSH2 0xC67 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x352 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x361 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FDD JUMP JUMPDEST PUSH2 0xCEE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21D PUSH2 0x381 CALLDATASIZE PUSH1 0x4 PUSH2 0x3CCA JUMP JUMPDEST PUSH2 0xF1C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x3A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3EBF JUMP JUMPDEST PUSH2 0xF31 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x3C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B6A JUMP JUMPDEST PUSH2 0xFAE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21D PUSH2 0x3E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B30 JUMP JUMPDEST PUSH2 0xFF3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x401 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C63 JUMP JUMPDEST PUSH2 0x1013 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x412 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21D PUSH2 0x421 CALLDATASIZE PUSH1 0x4 PUSH2 0x3CE8 JUMP JUMPDEST PUSH2 0x10EB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x432 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x43B PUSH2 0x110B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4198 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x454 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x43B PUSH2 0x463 CALLDATASIZE PUSH1 0x4 PUSH2 0x3FA1 JUMP JUMPDEST PUSH2 0x111A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x474 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21D PUSH2 0x483 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D6F JUMP JUMPDEST PUSH2 0x1138 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x4A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C63 JUMP JUMPDEST PUSH2 0x1914 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x4C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3EBF JUMP JUMPDEST PUSH2 0x1A24 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x4E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F08 JUMP JUMPDEST PUSH2 0x1AA8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x508 PUSH2 0x503 CALLDATASIZE PUSH1 0x4 PUSH2 0x3DCA JUMP JUMPDEST PUSH2 0x1DDA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4352 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x521 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x530 CALLDATASIZE PUSH1 0x4 PUSH2 0x3DCA JUMP JUMPDEST PUSH2 0x1EC9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x541 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BA PUSH2 0x550 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B30 JUMP JUMPDEST PUSH2 0x1EF4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x561 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x570 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C63 JUMP JUMPDEST PUSH2 0x1F11 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x581 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x590 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C63 JUMP JUMPDEST PUSH2 0x1FD7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x43B PUSH2 0x20B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x5C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B12 JUMP JUMPDEST PUSH2 0x20C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5DF PUSH2 0x2129 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x606 PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x610 PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP6 MLOAD DUP3 LT ISZERO PUSH2 0x685 JUMPI PUSH2 0x66E DUP7 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x62F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP7 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x647 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x65F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x1A24 JUMP JUMPDEST SWAP1 POP PUSH2 0x67A DUP4 DUP3 PUSH2 0x2160 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x615 JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x6DE DUP5 DUP5 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0x1138 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x494E56414C49445F5349474E4154555245000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x73E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH2 0x794 PUSH2 0x3761 JUMP JUMPDEST PUSH2 0x79C PUSH2 0x3790 JUMP JUMPDEST PUSH2 0x7A4 PUSH2 0x3790 JUMP JUMPDEST PUSH2 0x160 DUP1 DUP9 ADD MLOAD PUSH2 0x140 DUP1 DUP10 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP9 ADD MLOAD SWAP1 DUP8 ADD MSTORE PUSH1 0x0 PUSH2 0x7C7 DUP9 PUSH2 0x1DDA JUMP JUMPDEST SWAP3 POP PUSH2 0x7D2 DUP8 PUSH2 0x1DDA JUMP JUMPDEST SWAP2 POP PUSH2 0x7DC PUSH2 0x21C2 JUMP JUMPDEST SWAP1 POP PUSH2 0x7E8 DUP9 DUP9 PUSH2 0x21F1 JUMP JUMPDEST PUSH2 0x7FC DUP9 DUP9 DUP6 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x2271 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x816 SWAP1 DUP10 SWAP1 DUP6 SWAP1 DUP5 SWAP1 DUP1 DUP12 PUSH2 0x2335 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP6 ADD MLOAD ADD MLOAD PUSH2 0x82F SWAP1 DUP9 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP1 DUP11 PUSH2 0x2335 JUMP JUMPDEST PUSH2 0x848 DUP9 DUP3 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0x25D5 JUMP JUMPDEST PUSH2 0x861 DUP8 DUP3 DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0x25D5 JUMP JUMPDEST PUSH2 0x86D DUP9 DUP9 DUP4 DUP8 PUSH2 0x2674 JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x880 PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xB4BE83D500000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE PUSH1 0x60 PUSH1 0x4 DUP4 ADD DUP2 DUP2 MSTORE DUP9 MLOAD PUSH1 0x64 DUP6 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 DUP1 DUP12 ADD MLOAD PUSH1 0x84 DUP8 ADD MSTORE SWAP6 DUP11 ADD MLOAD PUSH1 0xA4 DUP7 ADD MSTORE SWAP2 DUP10 ADD MLOAD PUSH1 0xC4 DUP6 ADD MSTORE PUSH1 0x80 DUP10 ADD MLOAD PUSH1 0xE4 DUP6 ADD MSTORE PUSH1 0xA0 DUP10 ADD MLOAD PUSH2 0x104 DUP6 ADD MSTORE PUSH1 0xC0 DUP10 ADD MLOAD PUSH2 0x124 DUP6 ADD MSTORE PUSH1 0xE0 DUP10 ADD MLOAD PUSH2 0x144 DUP6 ADD MSTORE PUSH2 0x100 DUP10 ADD MLOAD PUSH2 0x164 DUP6 ADD MSTORE PUSH2 0x120 DUP10 ADD MLOAD PUSH2 0x184 DUP6 ADD MSTORE PUSH2 0x140 DUP10 ADD DUP1 MLOAD PUSH2 0x1A4 DUP7 ADD SWAP1 DUP2 MSTORE PUSH2 0x160 DUP12 ADD MLOAD PUSH2 0x1C4 DUP8 ADD MSTORE PUSH2 0x180 SWAP1 MSTORE MLOAD DUP1 MLOAD PUSH2 0x1E4 DUP7 ADD DUP2 SWAP1 MSTORE SWAP4 SWAP6 SWAP2 SWAP4 DUP5 SWAP4 SWAP3 PUSH1 0x24 DUP8 ADD SWAP3 DUP5 SWAP3 PUSH2 0x204 DUP10 ADD SWAP3 SWAP2 DUP3 ADD SWAP2 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x983 JUMPI DUP4 MLOAD DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x965 JUMP JUMPDEST POP POP POP POP DUP2 DUP2 SUB PUSH2 0x160 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP13 ADD MLOAD DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 DUP3 ADD SWAP2 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9CC JUMPI DUP4 MLOAD DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x9AE JUMP JUMPDEST POP POP POP DUP12 DUP5 MSTORE POP DUP5 DUP2 SUB PUSH1 0x20 SWAP4 DUP5 ADD SWAP1 DUP2 MSTORE DUP11 MLOAD DUP1 DUP4 MSTORE SWAP1 SWAP4 SWAP2 DUP3 ADD SWAP2 DUP12 DUP2 ADD SWAP2 SWAP1 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA14 JUMPI DUP4 MLOAD DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x9F6 JUMP JUMPDEST POP PUSH1 0x80 DUP11 DUP12 DUP7 SUB DUP13 ADDRESS GAS DELEGATECALL DUP1 DUP1 ISZERO PUSH2 0xA33 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0xA51 JUMPI PUSH2 0xA74 JUMP JUMPDEST PUSH1 0x0 DUP15 MSTORE PUSH1 0x0 PUSH1 0x20 DUP16 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP16 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP16 ADD MSTORE PUSH2 0xA74 JUMP JUMPDEST DUP12 MLOAD DUP15 MSTORE PUSH1 0x20 DUP13 ADD MLOAD PUSH1 0x20 DUP16 ADD MSTORE PUSH1 0x40 DUP13 ADD MLOAD PUSH1 0x40 DUP16 ADD MSTORE PUSH1 0x60 DUP13 ADD MLOAD PUSH1 0x60 DUP16 ADD MSTORE JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xABC JUMPI PUSH2 0xAB4 DUP3 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAA5 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x1EC9 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xA8B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xAC8 PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAD2 PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP6 MLOAD DUP3 LT ISZERO PUSH2 0x685 JUMPI PUSH2 0xB30 DUP7 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAF1 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP7 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB09 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB21 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0xF31 JUMP JUMPDEST SWAP1 POP PUSH2 0xB3C DUP4 DUP3 PUSH2 0x2160 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xAD7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0xB55 PUSH2 0x21C2 JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND CALLER EQ PUSH2 0xB6D JUMPI CALLER PUSH2 0xB70 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 DUP2 MSTORE SWAP1 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x17 DUP4 MSTORE PUSH32 0x494E56414C49445F4E45575F4F524445525F45504F4348000000000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP5 POP PUSH1 0x1 DUP8 ADD SWAP4 POP SWAP1 SWAP2 POP DUP2 DUP4 GT PUSH2 0xBFC JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE MLOAD PUSH32 0x82AF639571738F4EBD4268FB0363D8957EBE1BBB9E78DBA5EBD69EED39B154F0 SWAP1 PUSH2 0xC58 SWAP1 DUP7 SWAP1 PUSH2 0x4360 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC6F PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC79 PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP6 MLOAD DUP3 LT ISZERO PUSH2 0x685 JUMPI PUSH2 0xCD7 DUP7 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC98 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP7 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xCB0 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xCC8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x878 JUMP JUMPDEST SWAP1 POP PUSH2 0xCE3 DUP4 DUP3 PUSH2 0x2160 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xC7E JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0xD20 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP1 PUSH2 0x4325 JUMP JUMPDEST PUSH1 0xFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x14 DUP4 MSTORE PUSH32 0x41535345545F50524F58595F4D49534D41544348000000000000000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP5 POP DUP6 AND DUP5 EQ PUSH2 0xD9C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP DUP5 SWAP2 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND ISZERO PUSH2 0xEA0 JUMPI DUP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH4 0xAE25532E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE1A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xE3E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x3FBF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH32 0x41535345545F50524F58595F49445F4D49534D41544348000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0xFF DUP1 DUP4 AND SWAP1 DUP9 AND EQ PUSH2 0xE9E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP JUMPDEST PUSH1 0xFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND OR SWAP1 SSTORE MLOAD PUSH32 0x27EF5F484E50F2DAF7C2D82C60FE4CE409009541176EB64095BEAC369DB1D260 SWAP1 PUSH2 0xF0C SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x436E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xF39 PUSH2 0x3738 JUMP JUMPDEST PUSH2 0xF44 DUP5 DUP5 DUP5 PUSH2 0x1A24 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH1 0x20 ADD MLOAD EQ PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x14 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x434F4D504C4554455F46494C4C5F4641494C4544000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0xFA6 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFB8 PUSH2 0x21C2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP7 SWAP1 SWAP4 AND DUP3 MSTORE SWAP5 SWAP1 SWAP5 MSTORE SWAP1 SWAP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x101B PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x1028 PUSH2 0x3738 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1037 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD MLOAD SWAP4 POP PUSH1 0x0 SWAP3 POP JUMPDEST DUP8 MLOAD DUP4 LT ISZERO PUSH2 0x10E0 JUMPI DUP4 DUP9 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1065 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1085 DUP8 DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x2850 JUMP JUMPDEST SWAP2 POP PUSH2 0x10B1 DUP9 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1098 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP9 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x65F JUMPI INVALID JUMPDEST DUP5 MLOAD PUSH1 0x1 ADD DUP6 MSTORE SWAP1 POP PUSH2 0x10C4 DUP6 DUP3 PUSH2 0x2160 JUMP JUMPDEST DUP7 DUP6 PUSH1 0x20 ADD MLOAD EQ ISZERO PUSH2 0x10D5 JUMPI PUSH2 0x10E0 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x104D JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP9 MLOAD GT PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4C454E4754485F475245415445525F5448414E5F305F52455155495245440000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x11A0 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH2 0x11AA DUP9 PUSH2 0x2862 JUMP JUMPDEST PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x11BF JUMPI INVALID JUMPDEST SWAP6 POP PUSH1 0x0 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x11CF JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1223 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x5349474E41545552455F494C4C4547414C000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH2 0x735 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x4314 JUMP JUMPDEST PUSH1 0x1 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1231 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1299 JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x4C454E4754485F315F5245515549524544000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO PUSH2 0x128F JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH1 0x0 SWAP7 POP PUSH2 0x1907 JUMP JUMPDEST PUSH1 0x2 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x12A7 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x13AF JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH32 0x4C454E4754485F36365F52455155495245440000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x41 EQ PUSH2 0x1307 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1317 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP5 POP PUSH2 0x1335 DUP9 PUSH1 0x1 PUSH2 0x2917 JUMP JUMPDEST SWAP4 POP PUSH2 0x1342 DUP9 PUSH1 0x21 PUSH2 0x2917 JUMP JUMPDEST SWAP3 POP PUSH1 0x1 DUP11 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1367 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x427F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 PUSH1 0x0 DUP7 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x138B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP12 DUP2 AND SWAP1 DUP3 AND EQ SWAP9 POP SWAP3 POP PUSH2 0x1907 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x13BD JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1569 JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH32 0x4C454E4754485F36365F52455155495245440000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x41 EQ PUSH2 0x141D JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x142D JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP5 POP PUSH2 0x144B DUP9 PUSH1 0x1 PUSH2 0x2917 JUMP JUMPDEST SWAP4 POP PUSH2 0x1458 DUP9 PUSH1 0x21 PUSH2 0x2917 JUMP JUMPDEST SWAP3 POP PUSH1 0x1 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE POP DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x14C5 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x14A6 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE SWAP3 ADD SWAP4 DUP5 MSTORE POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP6 SUB DUP2 MSTORE SWAP4 DUP3 ADD SWAP1 DUP2 SWAP1 MSTORE DUP4 MLOAD SWAP4 SWAP5 POP SWAP3 DUP4 SWAP3 POP SWAP1 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1525 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1506 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 PUSH1 0x0 DUP4 MSTORE SWAP2 ADD SWAP3 DUP4 SWAP1 MSTORE PUSH2 0x1367 SWAP5 POP SWAP3 POP DUP10 SWAP2 DUP10 SWAP2 POP DUP9 SWAP1 PUSH2 0x427F JUMP JUMPDEST PUSH1 0x4 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1577 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x15E9 JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x4C454E4754485F315F5245515549524544000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO PUSH2 0x15D5 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND CALLER EQ SWAP7 POP PUSH2 0x1907 JUMP JUMPDEST PUSH1 0x5 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x15F7 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x169D JUMPI PUSH1 0x40 MLOAD PUSH32 0x1626BA7E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP11 AND SWAP1 PUSH4 0x1626BA7E SWAP1 PUSH2 0x1644 SWAP1 DUP14 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x425F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x165E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1672 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1696 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x3CAC JUMP JUMPDEST SWAP7 POP PUSH2 0x1907 JUMP JUMPDEST PUSH1 0x6 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x16AB JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x173E JUMPI PUSH2 0x16BA DUP9 PUSH2 0x29AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x16F5 JUMPI PUSH1 0x0 SWAP7 POP PUSH2 0x1907 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x9363470200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH4 0x93634702 SWAP1 PUSH2 0x1644 SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x4229 JUMP JUMPDEST PUSH1 0x7 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x174C JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x177F JUMPI PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP14 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP7 POP PUSH2 0x1907 JUMP JUMPDEST PUSH1 0x8 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x178D JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1878 JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH32 0x4C454E4754485F36365F52455155495245440000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x41 EQ PUSH2 0x17ED JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x17FD JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP5 POP PUSH2 0x181B DUP9 PUSH1 0x1 PUSH2 0x2917 JUMP JUMPDEST SWAP4 POP PUSH2 0x1828 DUP9 PUSH1 0x21 PUSH2 0x2917 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1B DUP1 DUP3 MSTORE PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A410000000000 PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE SWAP4 MLOAD SWAP5 SWAP8 POP PUSH1 0x1 SWAP5 SWAP3 SWAP4 DUP16 SWAP4 ADD SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 PUSH2 0x14C5 JUMP JUMPDEST PUSH1 0x7 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1886 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x18B9 JUMPI PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP14 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP7 POP PUSH2 0x1907 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH32 0x5349474E41545552455F554E535550504F525445440000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH2 0x735 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x4314 JUMP JUMPDEST POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x191C PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x192B PUSH2 0x3738 JUMP JUMPDEST DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x193A JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD SWAP5 POP PUSH1 0x0 SWAP4 POP JUMPDEST DUP9 MLOAD DUP5 LT ISZERO PUSH2 0x1A18 JUMPI DUP5 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1968 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x140 ADD MSTORE DUP6 MLOAD PUSH2 0x1984 SWAP1 DUP10 SWAP1 PUSH2 0x2850 JUMP JUMPDEST SWAP3 POP PUSH2 0x19C7 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1997 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP11 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x19B3 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0x2A4F JUMP JUMPDEST SWAP2 POP PUSH2 0x19F3 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x19DA JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP10 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xCC8 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x19FF DUP7 DUP3 PUSH2 0x2160 JUMP JUMPDEST DUP6 MLOAD DUP9 EQ ISZERO PUSH2 0x1A0D JUMPI PUSH2 0x1A18 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x1950 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1A2C PUSH2 0x3738 JUMP JUMPDEST PUSH2 0x1A34 PUSH2 0x3790 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1A42 DUP9 PUSH2 0x1DDA JUMP JUMPDEST SWAP4 POP PUSH2 0x1A4C PUSH2 0x21C2 JUMP JUMPDEST SWAP3 POP PUSH2 0x1A60 DUP9 PUSH1 0xA0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x2850 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A6C DUP8 DUP4 PUSH2 0x2A6C JUMP JUMPDEST SWAP1 POP PUSH2 0x1A7C DUP9 DUP6 DUP6 DUP11 DUP6 DUP12 PUSH2 0x2335 JUMP JUMPDEST PUSH2 0x1A86 DUP9 DUP3 PUSH2 0x2A84 JUMP JUMPDEST SWAP5 POP PUSH2 0x1A9D DUP9 DUP5 DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP10 PUSH2 0x25D5 JUMP JUMPDEST PUSH2 0x10E0 DUP9 DUP5 DUP8 PUSH2 0x2AEE JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH32 0x5245454E5452414E43595F494C4C4547414C0000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x1B0C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP ADDRESS DUP7 DUP9 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP7 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP6 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1BBD JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1B9E JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 DUP4 MSTORE DUP6 SWAP1 KECCAK256 SLOAD DUP4 DUP7 ADD SWAP1 SWAP6 MSTORE PUSH1 0xF DUP4 MSTORE PUSH32 0x494E56414C49445F54585F484153480000000000000000000000000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP6 POP SWAP4 POP POP PUSH1 0xFF AND ISZERO SWAP1 POP PUSH2 0x1C4E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND CALLER EQ PUSH2 0x1D1B JUMPI PUSH2 0x1C9A DUP2 DUP8 DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0x1138 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH32 0x494E56414C49445F54585F5349474E4154555245000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x1CF1 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH1 0x8 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD ADDRESS SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH32 0x4641494C45445F455845435554494F4E00000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP3 POP ISZERO ISZERO SWAP1 POP PUSH2 0x1DB3 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP POP PUSH1 0x8 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1DE2 PUSH2 0x3790 JUMP JUMPDEST PUSH2 0x1DEB DUP3 PUSH2 0x2C1A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD ISZERO ISZERO PUSH2 0x1E08 JUMPI PUSH1 0x1 JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH2 0x1EC4 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MLOAD ISZERO ISZERO PUSH2 0x1E1A JUMPI PUSH1 0x2 PUSH2 0x1DFE JUMP JUMPDEST PUSH2 0x100 DUP3 ADD MLOAD TIMESTAMP LT PUSH2 0x1E2D JUMPI PUSH1 0x4 PUSH2 0x1DFE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1E51 JUMPI PUSH1 0x6 PUSH2 0x1DFE JUMP JUMPDEST PUSH2 0x120 DUP3 ADD MLOAD DUP3 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x60 DUP9 ADD MLOAD SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD GT ISZERO PUSH2 0x1E91 JUMPI PUSH1 0x6 PUSH2 0x1DFE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD MLOAD GT PUSH2 0x1EBF JUMPI PUSH1 0x5 PUSH2 0x1DFE JUMP JUMPDEST PUSH1 0x3 DUP2 MSTORE JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1ED1 PUSH2 0x3790 JUMP JUMPDEST PUSH2 0x1EDA DUP3 PUSH2 0x1DDA JUMP JUMPDEST SWAP1 POP PUSH2 0x1EE6 DUP3 DUP3 PUSH2 0x338E JUMP JUMPDEST PUSH2 0xABC DUP3 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x34DD JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1F19 PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x1F26 PUSH2 0x3738 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1F35 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD MLOAD SWAP4 POP PUSH1 0x0 SWAP3 POP JUMPDEST DUP8 MLOAD DUP4 LT ISZERO PUSH2 0x10E0 JUMPI DUP4 DUP9 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1F63 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1F83 DUP8 DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x2850 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FAF DUP9 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1F96 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP9 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xCC8 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x1FBB DUP6 DUP3 PUSH2 0x2160 JUMP JUMPDEST DUP7 DUP6 PUSH1 0x20 ADD MLOAD EQ ISZERO PUSH2 0x1FCC JUMPI PUSH2 0x10E0 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x1F4B JUMP JUMPDEST PUSH2 0x1FDF PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1FEE PUSH2 0x3738 JUMP JUMPDEST DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1FFD JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD SWAP5 POP PUSH1 0x0 SWAP4 POP JUMPDEST DUP9 MLOAD DUP5 LT ISZERO PUSH2 0x1A18 JUMPI DUP5 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x202B JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x140 ADD MSTORE DUP6 MLOAD PUSH2 0x2047 SWAP1 DUP10 SWAP1 PUSH2 0x2850 JUMP JUMPDEST SWAP3 POP PUSH2 0x205A DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1997 JUMPI INVALID JUMPDEST SWAP2 POP PUSH2 0x2086 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x206D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP10 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x65F JUMPI INVALID JUMPDEST DUP6 MLOAD PUSH1 0x1 ADD DUP7 MSTORE SWAP1 POP PUSH2 0x2099 DUP7 DUP3 PUSH2 0x2160 JUMP JUMPDEST DUP6 MLOAD DUP9 EQ ISZERO PUSH2 0x20A7 JUMPI PUSH2 0x1A18 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x2013 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x20EE JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP1 PUSH2 0x4325 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO PUSH2 0x2126 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xB DUP2 MSTORE PUSH32 0x322E302E312D616C706861000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD PUSH2 0x216E SWAP2 SWAP1 PUSH2 0x3559 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x2184 SWAP2 SWAP1 PUSH2 0x3559 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x219D SWAP2 SWAP1 PUSH2 0x3559 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x21B6 SWAP2 SWAP1 PUSH2 0x3559 JUMP JUMPDEST PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x21E9 JUMPI PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x21EB JUMP JUMPDEST CALLER JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2203 DUP3 PUSH1 0xA0 ADD MLOAD DUP3 PUSH1 0xA0 ADD MLOAD PUSH2 0x3568 JUMP JUMPDEST PUSH2 0x2215 DUP4 PUSH1 0x80 ADD MLOAD DUP4 PUSH1 0x80 ADD MLOAD PUSH2 0x3568 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH32 0x4E454741544956455F5350524541445F52455155495245440000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP2 GT ISZERO PUSH2 0x226C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2279 PUSH2 0x3761 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x228D DUP10 PUSH1 0xA0 ADD MLOAD DUP9 PUSH2 0x2850 JUMP JUMPDEST SWAP4 POP PUSH2 0x229D DUP9 PUSH1 0xA0 ADD MLOAD DUP8 PUSH2 0x2850 JUMP JUMPDEST SWAP3 POP PUSH2 0x22AD DUP4 DUP10 PUSH1 0x80 ADD MLOAD PUSH2 0x3568 JUMP JUMPDEST PUSH2 0x22BB DUP6 DUP11 PUSH1 0xA0 ADD MLOAD PUSH2 0x3568 JUMP JUMPDEST GT PUSH2 0x22DD JUMPI DUP4 SWAP2 POP PUSH2 0x22D6 DUP9 PUSH1 0xA0 ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD DUP5 PUSH2 0x2A4F JUMP JUMPDEST SWAP1 POP PUSH2 0x22F6 JUMP JUMPDEST DUP3 SWAP1 POP PUSH2 0x22F3 DUP9 PUSH1 0x80 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD DUP4 PUSH2 0x2A4F JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x2300 DUP10 DUP4 PUSH2 0x2A84 JUMP JUMPDEST DUP6 MSTORE PUSH2 0x230C DUP9 DUP3 PUSH2 0x2A84 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP8 ADD DUP3 SWAP1 MSTORE DUP7 MLOAD MLOAD SWAP2 ADD MLOAD PUSH2 0x2324 SWAP2 SWAP1 PUSH2 0x2850 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MSTORE POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP5 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH32 0x4F524445525F554E46494C4C41424C4500000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x2392 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH32 0x494E56414C49445F54414B45525F414D4F554E54000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP4 ISZERO ISZERO PUSH2 0x23EA JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x2465 JUMPI PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xE DUP2 MSTORE PUSH32 0x494E56414C49445F53454E444552000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x2463 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x24EC JUMPI DUP4 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP7 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x494E56414C49445F54414B455200000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x24EA JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD ISZERO ISZERO PUSH2 0x2563 JUMPI PUSH2 0x250A DUP6 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x0 ADD MLOAD DUP4 PUSH2 0x1138 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH32 0x494E56414C49445F4F524445525F5349474E4154555245000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x2561 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP JUMPDEST PUSH2 0x2576 DUP3 DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0x80 ADD MLOAD PUSH2 0x358C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xE DUP2 MSTORE PUSH32 0x524F554E44494E475F4552524F52000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO PUSH2 0x25CC JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x25E3 DUP3 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x3559 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE DUP7 DUP2 ADD MLOAD DUP8 MLOAD DUP5 MLOAD SWAP4 DUP6 ADD MLOAD DUP6 DUP5 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH2 0x140 DUP13 ADD MLOAD PUSH2 0x160 DUP14 ADD MLOAD SWAP7 MLOAD DUP12 SWAP9 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP8 DUP9 AND SWAP9 SWAP8 SWAP1 SWAP7 AND SWAP7 PUSH32 0xDE19F18E1B56E6EADA7ED95CCA8398B602BE32F5864640537EE9A9A3532BB29D SWAP7 PUSH2 0x2665 SWAP7 DUP16 SWAP7 SWAP2 SWAP6 SWAP1 SWAP5 SWAP2 SWAP4 SWAP1 SWAP3 SWAP1 PUSH2 0x41A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x2687 DUP8 PUSH2 0x140 ADD MLOAD PUSH2 0x2862 JUMP JUMPDEST PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DIV SWAP3 POP PUSH2 0x269E DUP7 PUSH2 0x140 ADD MLOAD PUSH2 0x2862 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 SWAP5 DIV SWAP6 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x272D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2702 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x272D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2710 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x2756 DUP8 PUSH2 0x140 ADD MLOAD DUP5 DUP10 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST PUSH2 0x140 DUP7 ADD MLOAD DUP7 MLOAD DUP9 MLOAD DUP7 MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x2774 SWAP4 SWAP3 DUP7 SWAP3 SWAP1 SWAP2 PUSH2 0x35DD JUMP JUMPDEST PUSH2 0x278E DUP8 PUSH2 0x140 ADD MLOAD DUP5 DUP10 PUSH1 0x0 ADD MLOAD DUP9 DUP9 PUSH1 0x40 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST PUSH2 0x27AC DUP2 PUSH1 0x1 DUP10 PUSH1 0x0 ADD MLOAD DUP11 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST PUSH2 0x27CA DUP2 PUSH1 0x1 DUP9 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP8 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ ISZERO PUSH2 0x281C JUMPI PUSH2 0x2817 DUP2 PUSH1 0x1 DUP8 DUP11 PUSH1 0x40 ADD MLOAD PUSH2 0x2812 DUP10 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD DUP11 PUSH1 0x20 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x3559 JUMP JUMPDEST PUSH2 0x35DD JUMP JUMPDEST PUSH2 0x25CC JUMP JUMPDEST PUSH2 0x2836 DUP2 PUSH1 0x1 DUP8 DUP11 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST PUSH2 0x25CC DUP2 PUSH1 0x1 DUP8 DUP10 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x285C JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD GT PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F5448414E5F5A45524F5F4C454E4754485F52455155495245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4400000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x28E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP DUP2 MLOAD DUP3 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x28FB JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD DUP3 MLOAD PUSH1 0x0 NOT ADD SWAP1 SWAP3 MSTORE POP PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x29A1 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x14 DUP3 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x2A33 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH2 0x2A42 DUP3 PUSH1 0x14 DUP5 MLOAD SUB PUSH2 0x3684 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x13 NOT ADD SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A64 PUSH2 0x2A5E DUP6 DUP5 PUSH2 0x3568 JUMP JUMPDEST DUP5 PUSH2 0x3721 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x2A7B JUMPI DUP2 PUSH2 0x2A7D JUMP JUMPDEST DUP3 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2A8C PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x80 DUP5 ADD MLOAD PUSH2 0x2AA8 SWAP2 DUP5 SWAP2 PUSH2 0x2A4F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0x2AC4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A4F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xE0 DUP6 ADD MLOAD PUSH2 0x2AE3 SWAP3 SWAP2 SWAP1 PUSH2 0x2A4F JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x2B01 DUP7 PUSH2 0x140 ADD MLOAD PUSH2 0x2862 JUMP JUMPDEST PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DIV SWAP3 POP PUSH2 0x2B18 DUP7 PUSH2 0x160 ADD MLOAD PUSH2 0x2862 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 SWAP5 DIV SWAP6 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x2BA7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2B7C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2BA7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2B8A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x2BC8 DUP7 PUSH2 0x140 ADD MLOAD DUP5 DUP9 PUSH1 0x0 ADD MLOAD DUP9 DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST PUSH2 0x2BE2 DUP7 PUSH2 0x160 ADD MLOAD DUP4 DUP8 DUP10 PUSH1 0x0 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST PUSH2 0x2BFC DUP2 PUSH1 0x1 DUP9 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x40 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST PUSH2 0x2C12 DUP2 PUSH1 0x1 DUP8 DUP10 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD PUSH2 0x35DD JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x446F6D61696E536570617261746F72286164647265737320636F6E7472616374 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x21 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2CB1 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2C92 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 ADDRESS PUSH13 0x1000000000000000000000000 MUL DUP4 DUP4 ADD MSTORE DUP5 MLOAD PUSH1 0x14 DUP2 DUP6 SUB ADD DUP2 MSTORE PUSH1 0x34 SWAP1 SWAP4 ADD SWAP5 DUP6 SWAP1 MSTORE DUP3 MLOAD SWAP1 SWAP7 POP SWAP2 SWAP5 POP DUP4 SWAP3 POP DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2D30 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2D11 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 PUSH32 0x4F72646572280000000000000000000000000000000000000000000000000000 DUP4 DUP4 ADD MSTORE PUSH32 0x61646472657373206D616B6572416464726573732C0000000000000000000000 PUSH1 0x26 DUP5 ADD MSTORE PUSH32 0x616464726573732074616B6572416464726573732C0000000000000000000000 PUSH1 0x3B DUP5 ADD MSTORE PUSH32 0x6164647265737320666565526563697069656E74416464726573732C00000000 PUSH1 0x50 DUP5 ADD MSTORE PUSH32 0x616464726573732073656E646572416464726573732C00000000000000000000 PUSH1 0x6C DUP5 ADD MSTORE PUSH32 0x75696E74323536206D616B65724173736574416D6F756E742C00000000000000 PUSH1 0x82 DUP5 ADD MSTORE PUSH32 0x75696E743235362074616B65724173736574416D6F756E742C00000000000000 PUSH1 0x9B DUP5 ADD MSTORE PUSH32 0x75696E74323536206D616B65724665652C000000000000000000000000000000 PUSH1 0xB4 DUP5 ADD MSTORE PUSH32 0x75696E743235362074616B65724665652C000000000000000000000000000000 PUSH1 0xC5 DUP5 ADD MSTORE PUSH32 0x75696E743235362065787069726174696F6E54696D655365636F6E64732C0000 PUSH1 0xD6 DUP5 ADD MSTORE PUSH32 0x75696E743235362073616C742C00000000000000000000000000000000000000 PUSH1 0xF4 DUP5 ADD MSTORE PUSH32 0x6279746573206D616B65724173736574446174612C0000000000000000000000 PUSH2 0x101 DUP5 ADD MSTORE PUSH32 0x62797465732074616B65724173736574446174612C0000000000000000000000 PUSH2 0x116 DUP5 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH2 0x12B DUP5 ADD MSTORE DUP5 MLOAD DUP1 DUP5 SUB PUSH2 0x10C ADD DUP2 MSTORE PUSH2 0x12C SWAP1 SWAP4 ADD SWAP5 DUP6 SWAP1 MSTORE DUP3 MLOAD SWAP1 SWAP7 POP SWAP2 SWAP5 POP DUP4 SWAP3 POP DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2FB3 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2F94 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP9 PUSH1 0x80 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD DUP11 PUSH1 0xC0 ADD MLOAD DUP12 PUSH1 0xE0 ADD MLOAD DUP13 PUSH2 0x100 ADD MLOAD DUP14 PUSH2 0x120 ADD MLOAD DUP15 PUSH2 0x140 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x304C JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x302D JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x30AF JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x3090 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP16 PUSH2 0x160 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x3114 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x30F5 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x3177 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x3158 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP14 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP13 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP12 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP11 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x32D3 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x32B4 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x0 NOT PUSH1 0x20 SWAP5 DUP6 SUB PUSH2 0x100 EXP ADD SWAP1 DUP2 AND SWAP1 NOT SWAP2 SWAP1 SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP5 SWAP1 SWAP3 ADD DUP5 SWAP1 SUB DUP5 KECCAK256 DUP5 DUP3 ADD SWAP10 SWAP1 SWAP10 MSTORE DUP4 DUP3 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x60 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x80 DUP1 DUP3 ADD SWAP7 SWAP1 SWAP7 MSTORE DUP4 MLOAD DUP1 DUP3 SUB SWAP1 SWAP7 ADD DUP7 MSTORE PUSH1 0xA0 ADD SWAP3 DUP4 SWAP1 MSTORE POP POP DUP3 MLOAD SWAP1 SWAP2 DUP3 SWAP2 SWAP1 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x335C JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x333D JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 SWAP1 SWAP4 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP2 AND SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP3 ADD DUP3 SWAP1 SUB SWAP1 SWAP2 KECCAK256 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH32 0x4F524445525F554E46494C4C41424C4500000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x33ED JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x3468 JUMPI PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xE DUP2 MSTORE PUSH32 0x494E56414C49445F53454E444552000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x3466 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP JUMPDEST PUSH2 0x3470 PUSH2 0x21C2 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xD DUP2 MSTORE PUSH32 0x494E56414C49445F4D414B455200000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 AND SWAP2 AND EQ PUSH2 0x34D7 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH2 0x140 DUP6 ADD MLOAD PUSH2 0x160 DUP7 ADD MLOAD SWAP4 MLOAD DUP6 SWAP5 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP5 DUP6 AND SWAP5 SWAP4 SWAP1 SWAP4 AND SWAP3 PUSH32 0xB1AD640E9E79B6FDBC3C415DC2914AB54E753D2971F51EAB910F7AA317A3163A SWAP3 PUSH2 0x354D SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x42E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x2A7D JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 0x3584 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 0x3581 JUMPI INVALID JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 0x2A7D JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 DUP1 ISZERO ISZERO PUSH2 0x359B JUMPI INVALID JUMPDEST DUP7 DUP6 MULMOD SWAP2 POP DUP2 ISZERO ISZERO PUSH2 0x35B0 JUMPI PUSH1 0x0 SWAP3 POP PUSH2 0x685 JUMP JUMPDEST PUSH2 0x35CF PUSH2 0x35C0 DUP4 PUSH3 0xF4240 PUSH2 0x3568 JUMP JUMPDEST PUSH2 0x35CA DUP9 DUP8 PUSH2 0x3568 JUMP JUMPDEST PUSH2 0x3721 JUMP JUMPDEST PUSH2 0x3E8 LT SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT ISZERO PUSH2 0x2C12 JUMPI POP PUSH1 0xFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH32 0xA85E59E400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 DUP2 SWAP1 PUSH4 0xA85E59E4 SWAP1 PUSH2 0x364A SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x42B4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3664 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3678 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x370E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x735 SWAP2 SWAP1 PUSH2 0x4314 JUMP JUMPDEST POP POP ADD PUSH1 0x14 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 0x372F JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x120 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x3776 PUSH2 0x3738 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3783 PUSH2 0x3738 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A7D DUP3 CALLDATALOAD PUSH2 0x440A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x37CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x37E0 PUSH2 0x37DB DUP3 PUSH2 0x43BD JUMP JUMPDEST PUSH2 0x4396 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x381E JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x3808 DUP9 DUP3 PUSH2 0x3962 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x37F2 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x3839 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3847 PUSH2 0x37DB DUP3 PUSH2 0x43BD JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x381E JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x386F DUP9 DUP3 PUSH2 0x39B1 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3859 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x3896 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x38A4 PUSH2 0x37DB DUP3 PUSH2 0x43BD JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x38C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x381E JUMPI DUP2 PUSH2 0x38DF DUP9 DUP3 PUSH2 0x390D JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x38CC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A7D DUP3 CALLDATALOAD PUSH2 0x4416 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A7D DUP3 MLOAD PUSH2 0x4416 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A7D DUP3 CALLDATALOAD PUSH2 0x441B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1F DUP4 ADD DUP5 SGT PUSH2 0x392B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3943 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x395B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x3973 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3981 PUSH2 0x37DB DUP3 PUSH2 0x43DE JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x399D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39A8 DUP4 DUP3 DUP5 PUSH2 0x442F JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x39C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39CF PUSH2 0x180 PUSH2 0x4396 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x39DD DUP5 DUP5 PUSH2 0x37B0 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x39EE DUP5 DUP5 DUP4 ADD PUSH2 0x37B0 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x3A02 DUP5 DUP3 DUP6 ADD PUSH2 0x37B0 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x3A16 DUP5 DUP3 DUP6 ADD PUSH2 0x37B0 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x3A2A DUP5 DUP3 DUP6 ADD PUSH2 0x390D JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x3A3E DUP5 DUP3 DUP6 ADD PUSH2 0x390D JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x3A52 DUP5 DUP3 DUP6 ADD PUSH2 0x390D JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0x3A66 DUP5 DUP3 DUP6 ADD PUSH2 0x390D JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP PUSH2 0x100 PUSH2 0x3A7B DUP5 DUP3 DUP6 ADD PUSH2 0x390D JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH2 0x120 PUSH2 0x3A91 DUP5 DUP3 DUP6 ADD PUSH2 0x390D JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MSTORE POP PUSH2 0x140 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3AB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3ABF DUP5 DUP3 DUP6 ADD PUSH2 0x3962 JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MSTORE POP PUSH2 0x160 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3AE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3AED DUP5 DUP3 DUP6 ADD PUSH2 0x3962 JUMP JUMPDEST PUSH2 0x160 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A7D DUP3 CALLDATALOAD PUSH2 0x441E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A7D DUP3 MLOAD PUSH2 0x441E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2A64 DUP5 DUP5 PUSH2 0x37B0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3B4F DUP6 DUP6 PUSH2 0x37B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3B60 DUP6 DUP3 DUP7 ADD PUSH2 0x37B0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3B89 DUP6 DUP6 PUSH2 0x37B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3B60 DUP6 DUP3 DUP7 ADD PUSH2 0x38F5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3BAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3BC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A64 DUP5 DUP3 DUP6 ADD PUSH2 0x3828 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3BE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3BFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C07 DUP7 DUP3 DUP8 ADD PUSH2 0x3828 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C30 DUP7 DUP3 DUP8 ADD PUSH2 0x3885 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C59 DUP7 DUP3 DUP8 ADD PUSH2 0x37BC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3C78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C9B DUP7 DUP3 DUP8 ADD PUSH2 0x3828 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3C30 DUP7 DUP3 DUP8 ADD PUSH2 0x390D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3CBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2A64 DUP5 DUP5 PUSH2 0x3901 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3CDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2A64 DUP5 DUP5 PUSH2 0x390D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3CFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3B4F DUP6 DUP6 PUSH2 0x390D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3D1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3D29 DUP8 DUP8 PUSH2 0x390D JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x3D3A DUP8 DUP3 DUP9 ADD PUSH2 0x37B0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D63 DUP8 DUP3 DUP9 ADD PUSH2 0x3919 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3D84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3D90 DUP7 DUP7 PUSH2 0x390D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3DA1 DUP7 DUP3 DUP8 ADD PUSH2 0x37B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C59 DUP7 DUP3 DUP8 ADD PUSH2 0x3962 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3DDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A64 DUP5 DUP3 DUP6 ADD PUSH2 0x39B1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3E15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3E38 DUP8 DUP3 DUP9 ADD PUSH2 0x39B1 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3E61 DUP8 DUP3 DUP9 ADD PUSH2 0x39B1 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3E8A DUP8 DUP3 DUP9 ADD PUSH2 0x3962 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3EA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3EB3 DUP8 DUP3 DUP9 ADD PUSH2 0x3962 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3ED4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3EEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3EF7 DUP7 DUP3 DUP8 ADD PUSH2 0x39B1 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3DA1 DUP7 DUP3 DUP8 ADD PUSH2 0x390D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3F21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3F2D DUP10 DUP10 PUSH2 0x390D JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x3F3E DUP10 DUP3 DUP11 ADD PUSH2 0x37B0 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3F5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F67 DUP10 DUP3 DUP11 ADD PUSH2 0x3919 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3F86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F92 DUP10 DUP3 DUP11 ADD PUSH2 0x3919 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3FB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2A64 DUP5 DUP5 PUSH2 0x3AFA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3FD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2A64 DUP5 DUP5 PUSH2 0x3B06 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3FF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3FFE DUP7 DUP7 PUSH2 0x3AFA JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x400F DUP7 DUP3 DUP8 ADD PUSH2 0x37B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x3C59 DUP7 DUP3 DUP8 ADD PUSH2 0x37B0 JUMP JUMPDEST PUSH2 0x4029 DUP2 PUSH2 0x440A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x4029 DUP2 PUSH2 0x4416 JUMP JUMPDEST PUSH2 0x4029 DUP2 PUSH2 0x441B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x404C DUP3 PUSH2 0x4406 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x4060 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x443B JUMP JUMPDEST PUSH2 0x4069 DUP2 PUSH2 0x4467 JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x4029 DUP2 PUSH2 0x4424 JUMP JUMPDEST PUSH1 0x33 DUP2 MSTORE PUSH32 0x4F6E6C7920636F6E7472616374206F776E657220697320616C6C6F7765642074 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6F2063616C6C2074686973206D6574686F642E00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0x40E6 DUP5 DUP3 PUSH2 0x4038 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x40F9 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x4038 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x410C PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x4038 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x34D7 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x4038 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x120 DUP4 ADD SWAP1 PUSH2 0x4131 DUP5 DUP3 PUSH2 0x40D5 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x4144 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x40D5 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x34D7 PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x4038 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 DUP4 ADD SWAP1 PUSH2 0x4169 DUP5 DUP3 PUSH2 0x418F JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x417C PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x4038 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x34D7 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x4038 JUMP JUMPDEST PUSH2 0x4029 DUP2 PUSH2 0x441E JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x21EB DUP3 DUP5 PUSH2 0x4020 JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD PUSH2 0x41B4 DUP3 DUP11 PUSH2 0x4020 JUMP JUMPDEST PUSH2 0x41C1 PUSH1 0x20 DUP4 ADD DUP10 PUSH2 0x4038 JUMP JUMPDEST PUSH2 0x41CE PUSH1 0x40 DUP4 ADD DUP9 PUSH2 0x4038 JUMP JUMPDEST PUSH2 0x41DB PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x4038 JUMP JUMPDEST PUSH2 0x41E8 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x4038 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x41FA DUP2 DUP6 PUSH2 0x4041 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x420E DUP2 DUP5 PUSH2 0x4041 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x21EB DUP3 DUP5 PUSH2 0x402F JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x4237 DUP3 DUP7 PUSH2 0x4038 JUMP JUMPDEST PUSH2 0x4244 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x4020 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x4256 DUP2 DUP5 PUSH2 0x4041 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x426D DUP3 DUP6 PUSH2 0x4038 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2A64 DUP2 DUP5 PUSH2 0x4041 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x428D DUP3 DUP8 PUSH2 0x4038 JUMP JUMPDEST PUSH2 0x429A PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x418F JUMP JUMPDEST PUSH2 0x42A7 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x4038 JUMP JUMPDEST PUSH2 0x4256 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x4038 JUMP JUMPDEST PUSH1 0x80 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x42C5 DUP2 DUP8 PUSH2 0x4041 JUMP JUMPDEST SWAP1 POP PUSH2 0x42D4 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x4020 JUMP JUMPDEST PUSH2 0x42A7 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x4020 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x42F2 DUP2 DUP6 PUSH2 0x4041 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2A64 DUP2 DUP5 PUSH2 0x4041 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x21EB DUP3 DUP5 PUSH2 0x4076 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x2A7D DUP2 DUP5 PUSH2 0x4041 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x21EB DUP2 PUSH2 0x407F JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x21EB DUP3 DUP5 PUSH2 0x40D5 JUMP JUMPDEST PUSH2 0x120 DUP2 ADD PUSH2 0x21EB DUP3 DUP5 PUSH2 0x411F JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x21EB DUP3 DUP5 PUSH2 0x4158 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x21EB DUP3 DUP5 PUSH2 0x4038 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x437C DUP3 DUP7 PUSH2 0x418F JUMP JUMPDEST PUSH2 0x4389 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x4020 JUMP JUMPDEST PUSH2 0x2A64 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4020 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x43B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x43D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x43F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21EB DUP3 PUSH2 0x440A JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4456 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x443E JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x34D7 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 0xa5 BYTE 0xc4 SWAP6 0xb1 TIMESTAMP ISZERO 0xf5 0xaf 0xf7 0xb8 RETURNDATACOPY 0xda 0xb3 SWAP5 0xf7 0xc7 0xac POP 0xf8 PUSH26 0xE44E9113C22EC7328070286C6578706572696D656E74616CF500 CALLDATACOPY ",
				"sourceMap": "894:607:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1188:42:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1188:42:4;;;;;;;;;;;;;;;;;;;;;;;;;13431:572:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;13431:572:9;;;;;;;;;;;;;;;;;1278:42:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1278:42:4;;;;;;;;;;;;;;;;;1723:275:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1723:275:7;;;;;;;;;;;1017:50:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1017:50:3;;;;;;;;;;;;;;;;;1886:2557:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1886:2557:5;;;;;;;;;;;;;;;;;2141:10811:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2141:10811:9;;;;;;;;;25419:185;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;25419:185:9;;;;;;;;;14483:584;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;14483:584:9;;;;;;;;;1975:1010:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1975:1010:4;;;;;;;;;15626:586:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;15626:586:9;;;;;;;;;1481:1017:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1481:1017:3;;;;;;;;;945:45:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;945:45:8;;;;;;;;;1222:493:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1222:493:9;;;;;;;;;2228:233:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2228:233:7;;;;;;;;;1324:71;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1324:71:7;;;;;;;;;16600:1843:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;16600:1843:9;;;;;;;;;1204:63:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1204:63:7;;;;;;;;;292:20:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;292:20:30;;;;;;;;;;;;2688:203:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2688:203:3;;;;;;;;;2826:6493:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2826:6493:7;;;;;;;;;23436:1848:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;23436:1848:9;;;;;;;;;3302:1327:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3302:1327:4;;;;;;;;;1397:1380:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1397:1380:8;;;;;;;;;5456:2199:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5456:2199:4;;;;;;;;;;;;;;;;;4860:322;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4860:322:4;;;;;;;;;1541:67;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1541:67:4;;;;;;;;;18900:1442:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;18900:1442:9;;;;;;;;;20730:2245;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;20730:2245:9;;;;;;;;;1042:36:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1042:36:8;;;;566:167:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;566:167:30;;;;;;;;;1097:46:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1097:46:2;;;;;;;;;;;;1188:42:4;;;;;;;;;;;;;:::o;13431:572:9:-;13617:35;;:::i;:::-;13673:9;13726:36;;:::i;:::-;13685:1;13673:13;;13668:296;13692:6;:13;13688:1;:17;13668:296;;;13765:123;13792:6;13799:1;13792:9;;;;;;;;;;;;;;;;;;13819:21;13841:1;13819:24;;;;;;;;;;;;;;;;;;13861:10;13872:1;13861:13;;;;;;;;;;;;;;;;;;13765:9;:123::i;:::-;13726:162;;13902:51;13917:16;13935:17;13902:14;:51::i;:::-;13707:3;;;;;13668:296;;;13431:572;;;;;;;:::o;1278:42:4:-;;;;;;;;;;;;;;;:::o;1723:275:7:-;1869:41;1886:4;1892:6;1900:9;;1869:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1869:16:7;;-1:-1:-1;;;;;1869:41:7:i;:::-;1924:17;;;;;;;;;;;;;;;;;;1848:103;;;;;;-1:-1:-1;;;;;1848:103:7;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1961:15:7;;;;:9;:15;;;;;;;;-1:-1:-1;;;;;1961:23:7;;;;;;;;;;:30;;-1:-1:-1;;1961:30:7;1987:4;1961:30;;;1723:275::o;1017:50:3:-;;;;;;;;;;;;-1:-1:-1;;;;;1017:50:3;;:::o;1886:2557:5:-;2101:59;;:::i;:::-;2566:39;;:::i;:::-;2641:40;;:::i;:::-;2430:24;;;;;2402:25;;;;:52;;;;2492:24;;;2464:25;;;:52;2750:20;2608:23;2430:9;2608:12;:23::i;:::-;2566:65;;2684:24;2697:10;2684:12;:24::i;:::-;2641:67;;2773:26;:24;:26::i;:::-;2750:49;;2862:39;2879:9;2890:10;2862:16;:39::i;:::-;2978:195;3019:9;3042:10;3066:13;:41;;;3121:14;:42;;;2978:27;:195::i;:::-;3323:23;;:46;;;2957:216;;-1:-1:-1;3218:248:5;;3247:9;;3270:13;;3297:12;;3323:46;3443:13;3218:15;:248::i;:::-;3583:24;;;;;:47;;3476:253;;3505:10;;3529:14;;3557:12;;3583:47;3705:14;3476:15;:253::i;:::-;3773:205;3804:9;3827:12;3853:13;:23;;;3890:13;:41;;;3945:18;:23;;;3773:17;:205::i;:::-;3988:209;4019:10;4043:12;4069:14;:24;;;4107:14;:42;;;4163:18;:24;;;3988:17;:209::i;:::-;4266:134;4299:9;4322:10;4346:12;4372:18;4266:19;:134::i;:::-;1886:2557;;;;;;;;;:::o;2141:10811:9:-;2312:30;;:::i;:::-;6207:4;6201:11;;5428:23;6225:42;;;6633:4;6322:3;6301:25;;7320:59;;;7646:19;;6612:26;;;7626:40;;;7434:4;7759:23;;;7753:30;7729:22;;;7722:62;7855:23;;;7849:30;7825:22;;;7818:62;7958:23;;;7952:30;7928:22;;;7921:62;8073:4;8055:23;;8049:30;8025:22;;;8018:62;8173:4;8155:23;;8149:30;8125:22;;;8118:62;8273:4;8255:23;;8249:30;8225:22;;;8218:62;8371:4;8353:23;;8347:30;8323:22;;;8316:62;8470:5;8452:24;;8446:31;8421:23;;;8414:64;8575:5;8557:24;;8551:31;8526:23;;;8519:64;8663:5;8645:24;;8639:31;;8614:23;;;8607:64;;;8771:5;8753:24;;8747:31;8722:23;;;8715:64;8855:5;8982:74;;9144:24;9216:19;;8838:23;;;9420:34;;;5428:23;;6301:25;;;;6612:26;7412:27;;;;6612:26;;9482:22;;;;9264:23;;;;9340:4;9321:24;;9317:35;5401:24;9574:237;9597:13;9594:1;9591:20;9574:237;;;9667:19;;9647:40;;9736:4;9719:22;;;;9774:23;;;;9625:1;9618:9;9574:237;;;-1:-1:-1;;;;9921:31:9;;;9905:13;9886:33;;;9879:74;;;;10047:17;;10041:24;10113:19;;10317:34;;;9913:4;10379:22;;;;10161:23;;;;10237:4;10218:24;;10214:35;10486:1;10472:237;10495:13;10492:1;10489:20;10472:237;;;10565:19;;10545:40;;10634:4;10617:22;;;;10672:23;;;;10523:1;10516:9;10472:237;;;-1:-1:-1;;;10778:46:9;;;-1:-1:-1;11009:33:9;;;10879:4;10857:27;;;10984:59;;;11157:19;;11348:34;;;10857:27;;11410:22;;;;11205:23;;;;11157:19;11281:4;11262:24;;11258:35;-1:-1:-1;11489:237:9;11512:13;11509:1;11506:20;11489:237;;;11582:19;;11562:40;;11651:4;11634:22;;;;11689:23;;;;11540:1;11533:9;11489:237;;;11493:12;12257:3;12178:15;12124;12111:11;12107:33;12026:15;11941:7;11821:3;11791:543;12354:7;12374:205;;;;12597:1;12592:316;;;;12347:561;;12374:205;12419:1;12406:11;12399:22;12467:1;12462:2;12449:11;12445:20;12438:31;12515:1;12510:2;12497:11;12493:20;12486:31;12563:1;12558:2;12545:11;12541:20;12534:31;12374:205;;12592:316;12643:15;12637:22;12624:11;12617:43;12733:2;12716:15;12712:24;12706:31;12701:2;12688:11;12684:20;12677:61;12811:2;12794:15;12790:24;12784:31;12779:2;12766:11;12762:20;12755:61;12889:2;12872:15;12868:24;12862:31;12857:2;12844:11;12840:20;12833:61;12347:561;-1:-1:-1;;;;;;;;;;;;2141:10811:9;;;;;;:::o;25419:185::-;25512:9;25507:91;25531:6;:13;25527:1;:17;25507:91;;;25565:22;25577:6;25584:1;25577:9;;;;;;;;;;;;;;;;;;25565:11;:22::i;:::-;25546:3;;25507:91;;;25419:185;;:::o;14483:584::-;14675:35;;:::i;:::-;14731:9;14784:36;;:::i;:::-;14743:1;14731:13;;14726:302;14750:6;:13;14746:1;:17;14726:302;;;14823:129;14856:6;14863:1;14856:9;;;;;;;;;;;;;;;;;;14883:21;14905:1;14883:24;;;;;;;;;;;;;;;;;;14925:10;14936:1;14925:13;;;;;;;;;;;;;;;;;;14823:15;:129::i;:::-;14784:168;;14966:51;14981:16;14999:17;14966:14;:51::i;:::-;14765:3;;;;;14726:302;;1975:1010:4;2058:20;2365:21;2529;2585;2081:26;:24;:26::i;:::-;2058:49;-1:-1:-1;;;;;;2389:26:4;;2405:10;2389:26;:52;;2431:10;2389:52;;;2426:1;2389:52;-1:-1:-1;;;;;2609:24:4;;;;;;;:10;:24;;;;;;;;:39;;;;;;;;;;;;;2781:23;;;;;;;;;;;;;;;;;;;2365:76;;-1:-1:-1;2572:1:4;2553:20;;;-1:-1:-1;2609:39:4;;-1:-1:-1;2737:29:4;;;2716:98;;;;-1:-1:-1;;;;;2716:98:4;;;;;;;;;;-1:-1:-1;;;;;;2854:24:4;;;;;;;:10;:24;;;;;;;;:39;;;;;;;;;;;;;;:55;;;2924:54;;;;;2896:13;;2924:54;;;;;;;;;;1975:1010;;;;;:::o;15626:586:9:-;15819:35;;:::i;:::-;15875:9;15928:36;;:::i;:::-;15887:1;15875:13;;15870:303;15894:6;:13;15890:1;:17;15870:303;;;15967:130;16001:6;16008:1;16001:9;;;;;;;;;;;;;;;;;;16028:21;16050:1;16028:24;;;;;;;;;;;;;;;;;;16070:10;16081:1;16070:13;;;;;;;;;;;;;;;;;;15967:16;:130::i;:::-;15928:169;;16111:51;16126:16;16144:17;16111:14;:51::i;:::-;15909:3;;;;;15870:303;;1481:1017:3;1732:25;460:5:30;;1732:25:3;;;;-1:-1:-1;;;;;460:5:30;446:10;:19;425:117;;;;-1:-1:-1;;;;;425:117:30;;;;;;;;;1768:26:3;;;;;;;:12;:26;;;;;;;;;;1874:20;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1768:26:3;;;;-1:-1:-1;1826:34:3;;;;1805:99;;;;-1:-1:-1;;;;;1805:99:3;;;;;;;;;;-1:-1:-1;1952:13:3;;-1:-1:-1;;;;;;2095:27:3;;;2091:230;;2162:10;-1:-1:-1;;;;;2162:21:3;;:23;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2162:23:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2162:23:3;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2162:23:3;;;;;;;;;2273;;;;;;;;;;;;;;;;;2138:47;;-1:-1:-1;2224:31:3;;;;;;;;2199:111;;;;-1:-1:-1;;;;;2199:111:3;;;;;;;;;;;2091:230;2380:26;;;;;;;:12;:26;;;;;;;:39;;-1:-1:-1;;2380:39:3;-1:-1:-1;;;;;2380:39:3;;;;;2434:57;;;;;2380:26;;2462:13;;2477;;2434:57;;;;;;;;;;1481:1017;;;;;;:::o;945:45:8:-;;;;;;;;;;;;;;;:::o;1222:493:9:-;1392:30;;:::i;:::-;1452:95;1475:5;1494:20;1528:9;1452;:95::i;:::-;1438:109;;1616:20;1578:11;:34;;;:58;1650:20;;;;;;;;;;;;;;;;;;1557:123;;;;;;;-1:-1:-1;;;;;1557:123:9;;;;;;;;;;-1:-1:-1;1222:493:9;;;;;:::o;2228:233:7:-;2354:14;2371:26;:24;:26::i;:::-;-1:-1:-1;;;;;2407:25:7;;;;;;;:17;:25;;;;;;;;:36;;;;;;;;;;;;;:47;;-1:-1:-1;;2407:47:7;;;;;;;;;;-1:-1:-1;2228:233:7:o;1324:71::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;16600:1843:9:-;16777:35;;:::i;:::-;16828:27;16902:9;17288:37;17479:36;;:::i;:::-;16858:6;16865:1;16858:9;;;;;;;;;;;;;;;;;;:24;;;16828:54;;16914:1;16902:13;;16897:1507;16921:6;:13;16917:1;:17;16897:1507;;;17191:14;17164:6;17171:1;17164:9;;;;;;;;;;;;;;;;;;:24;;:41;;;;17328:70;17336:20;17358:16;:39;;;17328:7;:70::i;:::-;17288:110;;17518:128;17545:6;17552:1;17545:9;;;;;;;;;;;;;;;;;;17572:29;17619:10;17630:1;17619:13;;;;;;;;;17518:128;17971:21;;18041:1;18032:11;18009:35;;17479:167;-1:-1:-1;18142:51:9;18157:16;17479:167;18142:14;:51::i;:::-;18334:20;18291:16;:39;;;:63;18287:107;;;18374:5;;18287:107;16936:3;;;;;16897:1507;;;16600:1843;;;;;;;;;:::o;1204:63:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;292:20:30:-;;;-1:-1:-1;;;;;292:20:30;;:::o;2688:203:3:-;2830:26;;2778:7;2830:26;;;:12;:26;;;;;;-1:-1:-1;;;;;2830:26:3;;2688:203::o;2826:6493:7:-;2981:12;3282:27;3416:7;3433:9;3452;3471:17;7093;3162:1;3143:9;:16;:20;3177:30;;;;;;;;;;;;;;;;;;3122:95;;;;;;;-1:-1:-1;;;;;3122:95:7;;;;;;;;;;;3332:22;3344:9;3332:11;:22::i;:::-;-1:-1:-1;;;3326:29:7;;3312:44;;;;;;;;;;3282:74;-1:-1:-1;3838:21:7;3821:13;:38;;;;;;;;;3817:5154;;;3882:17;;;;;;;;;;;;;;;;3875:25;;-1:-1:-1;;;;;3875:25:7;;;;3882:17;3875:25;;;;3817:5154;4182:21;4165:13;:38;;;;;;;;;4161:4810;;;4244:16;;4283:17;;;;;;;;;;;;;;;;;;4244:21;4219:95;;;;-1:-1:-1;;;;;4219:95:7;;;;;;;;;;-1:-1:-1;4338:5:7;;-1:-1:-1;4357:14:7;;4161:4810;4444:20;4427:13;:37;;;;;;;;;4423:4548;;;4505:16;;4545:18;;;;;;;;;;;;;;;;;;4525:2;4505:22;4480:97;;;;-1:-1:-1;;;;;4480:97:7;;;;;;;;;;;4601:9;4611:1;4601:12;;;;;;;;;;;;;;-1:-1:-1;;;4601:12:7;;;;;;4595:19;;-1:-1:-1;4632:25:7;4644:9;4655:1;4632:11;:25::i;:::-;4628:29;;4675:26;4687:9;4698:2;4675:11;:26::i;:::-;4671:30;;4727:24;4737:4;4743:1;4746;4749;4727:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;4727:24:7;;-1:-1:-1;;4727:24:7;;-1:-1:-1;;;;;4775:19:7;;;;;;;;-1:-1:-1;4727:24:7;-1:-1:-1;4808:14:7;;-1:-1:-1;4808:14:7;4423:4548;4899:21;4882:13;:38;;;;;;;;;4878:4093;;;4961:16;;5001:18;;;;;;;;;;;;;;;;;;4981:2;4961:22;4936:97;;;;-1:-1:-1;;;;;4936:97:7;;;;;;;;;;;5057:9;5067:1;5057:12;;;;;;;;;;;;;;-1:-1:-1;;;5057:12:7;;;;;;5051:19;;-1:-1:-1;5088:25:7;5100:9;5111:1;5088:11;:25::i;:::-;5084:29;;5131:26;5143:9;5154:2;5131:11;:26::i;:::-;5127:30;;5183:153;5237:20;;;;;;;;;;;;;;;;;;5259:4;5220:44;;;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;5220:44:7;;;;;-1:-1:-1;5220:44:7;;;26:21:-1;;;6:49;;5220:44:7;;;;;;;5210:55;;5220:44;;-1:-1:-1;5220:44:7;;;-1:-1:-1;5210:55:7;;;;;5220:44;5210:55;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;5210:55:7;;;;;;;;;;;;-1:-1:-1;5183:153:7;;;;;;;;;;-1:-1:-1;5210:55:7;-1:-1:-1;5283:1:7;;5302;;-1:-1:-1;5321:1:7;;5183:153;;4878:4093;5997:20;5980:13;:37;;;;;;;;;5976:2995;;;6058:16;;6097:17;;;;;;;;;;;;;;;;;;6058:21;6033:95;;;;-1:-1:-1;;;;;6033:95:7;;;;;;;;;;-1:-1:-1;;;;;;6152:20:7;;6162:10;6152:20;;-1:-1:-1;6186:14:7;;5976:2995;6370:20;6353:13;:37;;;;;;;;;6349:2622;;;6416:49;;;;;-1:-1:-1;;;;;6416:32:7;;;;;:49;;6449:4;;6455:9;;6416:49;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6416:49:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6416:49:7;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;6416:49:7;;;;;;;;;6406:59;-1:-1:-1;6479:14:7;;6349:2622;6992:23;6975:13;:40;;;;;;;;;6971:2000;;;7113:25;7128:9;7113:14;:25::i;:::-;-1:-1:-1;;;;;7210:25:7;;;;;;;:17;:25;;;;;;;;:36;;;;;;;;;;7093:45;;-1:-1:-1;7210:36:7;;7209:37;7205:88;;;7273:5;7266:12;;;;7205:88;7316:125;;;;;-1:-1:-1;;;;;7316:38:7;;;;;:125;;7372:4;;7394:6;;7418:9;;7316:125;;;;6971:2000;7577:23;7560:13;:40;;;;;;;;;7556:1415;;;7626:15;;;;:9;:15;;;;;;;;-1:-1:-1;;;;;7626:23:7;;;;;;;;;;;;;-1:-1:-1;7663:14:7;;7556:1415;8243:20;8226:13;:37;;;;;;;;;8222:749;;;8304:16;;8344:18;;;;;;;;;;;;;;;;;;8324:2;8304:22;8279:97;;;;-1:-1:-1;;;;;8279:97:7;;;;;;;;;;;8400:9;8410:1;8400:12;;;;;;;;;;;;;;-1:-1:-1;;;8400:12:7;;;;;;8394:19;;-1:-1:-1;8431:25:7;8443:9;8454:1;8431:11;:25::i;:::-;8427:29;;8474:26;8486:9;8497:2;8474:11;:26::i;:::-;8580:23;;;;;;;;;;;;;;;;;;;;8563:47;;8470:30;;-1:-1:-1;8526:156:7;;8580:23;;8605:4;;8563:47;;;;8580:23;;8563:47;8580:23;36:153:-1;;8222:749:7;8860:23;8843:13;:40;;;;;;;;;8839:132;;;8909:15;;;;:9;:15;;;;;;;;-1:-1:-1;;;;;8909:23:7;;;;;;;;;;;;;-1:-1:-1;8946:14:7;;8839:132;9290:21;;;;;;;;;;;;;;;;9283:29;;-1:-1:-1;;;;;9283:29:7;;;;9290:21;9283:29;;;;2826:6493;;;;;;;;;;;;:::o;23436:1848:9:-;23619:35;;:::i;:::-;23670:27;23740:9;24130:37;24436;24722:36;;:::i;:::-;23700:6;23707:1;23700:9;;;;;;;;;;;;;;;;;;:24;;;23670:54;;23752:1;23740:13;;23735:1510;23759:6;:13;23755:1;:17;23735:1510;;;24034:14;24007:6;24014:1;24007:9;;;;;;;;;;;;;;;;;;;:24;;:41;24200:39;;24170:70;;24178:20;;24170:7;:70::i;:::-;24130:110;;24476:165;24510:6;24517:1;24510:9;;;;;;;;;;;;;;;;;;:26;;;24554:6;24561:1;24554:9;;;;;;;;;;;;;;;;;;:26;;;24598:29;24476:16;:165::i;:::-;24436:205;;24761:135;24795:6;24802:1;24795:9;;;;;;;;;;;;;;;;;;24822:29;24869:10;24880:1;24869:13;;;;;;;;;24761:135;24722:174;;24981:51;24996:16;25014:17;24981:14;:51::i;:::-;25132:39;;:63;;25128:107;;;25215:5;;25128:107;23774:3;;;;;23735:1510;;;23436:1848;;;;;;;;;;:::o;3302:1327:4:-;3457:30;;:::i;:::-;3531:26;;:::i;:::-;3621:20;3725:33;3841:30;3560:19;3573:5;3560:12;:19::i;:::-;3531:48;;3644:26;:24;:26::i;:::-;3621:49;;3761:70;3769:5;:22;;;3793:9;:37;;;3761:7;:70::i;:::-;3725:106;;3874:55;3881:20;3903:25;3874:6;:55::i;:::-;3841:88;;3968:186;3997:5;4016:9;4039:12;4065:20;4099:22;4135:9;3968:15;:186::i;:::-;4224:51;4245:5;4252:22;4224:20;:51::i;:::-;4210:65;;4328:181;4359:5;4378:12;4404:9;:19;;;4437:9;:37;;;4488:11;4328:17;:181::i;:::-;4548:45;4560:5;4567:12;4581:11;4548;:45::i;1397:1380:8:-;1604:21;;1653:18;;;;;;;;;;;;;;;;;1730:23;;-1:-1:-1;;;;;1604:21:8;:35;1583:98;;;;-1:-1:-1;;;;;1583:98:8;;;;;;;;;;;1804:4;1823:6;1843:4;1861;;1766:109;;;;;;-1:-1:-1;;;;;1766:109:8;-1:-1:-1;;;;;1766:109:8;;;;;;;;-1:-1:-1;;;;;1766:109:8;-1:-1:-1;;;;;1766:109:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1766:109:8;;;1756:120;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1756:120:8;;;;;;;;;;;;-1:-1:-1;1963:29:8;;;:12;:29;;;;;;2006:15;;;;;;;;;;;;;;;;;1756:120;-1:-1:-1;1756:120:8;-1:-1:-1;;1963:29:8;;1962:30;;-1:-1:-1;1941:90:8;;;;-1:-1:-1;;;;;1941:90:8;;;;;;;;;;-1:-1:-1;;;;;;2117:20:8;;2127:10;2117:20;2113:309;;2212:52;2229:15;2246:6;2254:9;;2212:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2212:16:8;;-1:-1:-1;;;;;2212:52:8:i;:::-;2282:20;;;;;;;;;;;;;;;;;;2187:129;;;;;;-1:-1:-1;;;;;2187:129:8;;;;;;;;;;-1:-1:-1;2381:21:8;:30;;-1:-1:-1;;2381:30:8;-1:-1:-1;;;;;2381:30:8;;;;;2113:309;2463:29;;;;:12;:29;;;;;;;:36;;-1:-1:-1;;2463:36:8;2495:4;2463:36;;;2530:32;2538:4;;2557;;;;2530:32;2557:4;;;;2530:32;;;;;;;;;;;;;;;;;;;;;2576:16;;;;;;;;;;;;;;;;;;-1:-1:-1;2509:93:8;;;-1:-1:-1;2509:93:8;;;;-1:-1:-1;;;;;2509:93:8;;;;;;;;;;-1:-1:-1;;2736:21:8;:34;;-1:-1:-1;;2736:34:8;;;-1:-1:-1;;;;;;1397:1380:8:o;5456:2199:4:-;5543:26;;:::i;:::-;5641:19;5654:5;5641:12;:19::i;:::-;5619;;;:41;5962:22;;;;:27;5958:157;;;6035:38;6029:45;6005:69;;;;6088:16;;5958:157;6428:22;;;;:27;6424:157;;;6501:38;6495:45;;6424:157;6651:27;;;;6632:15;:46;6628:157;;6724:19;6718:26;;6628:157;6854:19;;;;;6844:30;;;;:9;:30;;;;;;;;;6840:143;;;6920:21;6914:28;;6840:143;7050:10;;;;7007:18;;-1:-1:-1;;;;;6996:30:4;;;;;;;:10;:30;;;;;;;;7027:19;;;;6996:51;;;;;;;;;;:64;6992:177;;;7106:21;7100:28;;6992:177;7289:19;;;;;7282:27;;;;:6;:27;;;;;;;;;7242:37;;;:67;;;7364:22;;;;-1:-1:-1;7319:179:4;;7432:24;7426:31;;7319:179;7601:20;7571:51;;5456:2199;;;;:::o;4860:322::-;4968:26;;:::i;:::-;4997:19;5010:5;4997:12;:19::i;:::-;4968:48;;5055:35;5073:5;5080:9;5055:17;:35::i;:::-;5127:48;5148:5;5155:9;:19;;;5127:20;:48::i;1541:67::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;18900:1442:9:-;19084:35;;:::i;:::-;19135:27;19205:9;19591:37;19782:36;;:::i;:::-;19165:6;19172:1;19165:9;;;;;;;;;;;;;;;;;;:24;;;19135:54;;19217:1;19205:13;;19200:1103;19224:6;:13;19220:1;:17;19200:1103;;;19494:14;19467:6;19474:1;19467:9;;;;;;;;;;;;;;;;;;:24;;:41;;;;19631:70;19639:20;19661:16;:39;;;19631:7;:70::i;:::-;19591:110;;19821:135;19855:6;19862:1;19855:9;;;;;;;;;;;;;;;;;;19882:29;19929:10;19940:1;19929:13;;;;;;;;;19821:135;19782:174;;20041:51;20056:16;20074:17;20041:14;:51::i;:::-;20233:20;20190:16;:39;;;:63;20186:107;;;20273:5;;20186:107;19239:3;;;;;19200:1103;;20730:2245;20906:35;;:::i;:::-;20957:27;21027:9;21417:37;21723;22009:36;;:::i;:::-;20987:6;20994:1;20987:9;;;;;;;;;;;;;;;;;;:24;;;20957:54;;21039:1;21027:13;;21022:1914;21046:6;:13;21042:1;:17;21022:1914;;;21321:14;21294:6;21301:1;21294:9;;;;;;;;;;;;;;;;;;;:24;;:41;21487:39;;21457:70;;21465:20;;21457:7;:70::i;:::-;21417:110;;21763:165;21797:6;21804:1;21797:9;;;;;;;;;21763:165;21723:205;;22048:128;22075:6;22082:1;22075:9;;;;;;;;;;;;;;;;;;22102:29;22149:10;22160:1;22149:13;;;;;;;;;22048:128;22501:21;;22571:1;22562:11;22539:35;;22009:167;-1:-1:-1;22672:51:9;22687:16;22009:167;22672:14;:51::i;:::-;22823:39;;:63;;22819:107;;;22906:5;;22819:107;21061:3;;;;;21022:1914;;1042:36:8;;;-1:-1:-1;;;;;1042:36:8;;:::o;566:167:30:-;460:5;;-1:-1:-1;;;;;460:5:30;446:10;:19;425:117;;;;-1:-1:-1;;;;;425:117:30;;;;;;;;;-1:-1:-1;;;;;662:22:30;;;658:69;;700:5;:16;;-1:-1:-1;;700:16:30;-1:-1:-1;;;;;700:16:30;;;;;658:69;566:167;:::o;1097:46:2:-;;;;;;;;;;;;;;;;;;;:::o;1307:648:18:-;1500:39;;1541:40;;1492:90;;1500:39;1492:7;:90::i;:::-;1450:132;;1642:39;;;;;1683:40;;;;1634:90;;1642:39;1634:7;:90::i;:::-;1592:39;;;:132;1774:29;;;;;1805:30;;;;1766:70;;1774:29;1766:7;:70::i;:::-;1734:29;;;:102;1886:29;;;;;1917:30;;;;1878:70;;1886:29;1878:7;:70::i;:::-;1846:29;;;;:102;;;;-1:-1:-1;1307:648:18:o;3221:241:8:-;3352:21;;3304:7;;;;-1:-1:-1;;;;;3352:21:8;:35;:72;;3403:21;;-1:-1:-1;;;;;3403:21:8;3352:72;;;3390:10;3352:72;3327:97;3221:241;-1:-1:-1;;3221:241:8:o;4613:1073:5:-;5567:64;5575:9;:26;;;5603:10;:27;;;5567:7;:64::i;:::-;5487;5495:9;:26;;;5523:10;:27;;;5487:7;:64::i;:::-;5645:24;;;;;;;;;;;;;;;;;;-1:-1:-1;5487:144:5;5466:213;;;;-1:-1:-1;;;;;5466:213:5;;;;;;;;;;;4613:1073;;:::o;6422:3469::-;6694:59;;:::i;:::-;7650:37;7768:38;7889:34;7933:35;7690:68;7698:9;:26;;;7726:31;7690:7;:68::i;:::-;7650:108;;7809:70;7817:10;:27;;;7846:32;7809:7;:70::i;:::-;7768:111;;8078:68;8086:30;8118:10;:27;;;8078:7;:68::i;:::-;7995:67;8003:29;8034:10;:27;;;7995:7;:67::i;:::-;:151;7978:1238;;8268:29;8239:58;;8507:164;8541:10;:27;;;8586:10;:27;;;8631:26;8507:16;:164::i;:::-;8477:194;;7978:1238;;;8802:30;8772:60;;9040:165;9074:10;:27;;;9119:10;:27;;;9164;9040:16;:165::i;:::-;9011:194;;7978:1238;9301:93;9335:9;9358:26;9301:20;:93::i;:::-;9275:119;;9482:95;9516:10;9540:27;9482:20;:95::i;:::-;9455:24;;;;:122;;;9700:23;;:46;9760:47;;;9679:138;;9700:46;9679:7;:138::i;:::-;9631:45;;;:186;6422:3469;;;;;;;;;;:::o;9918:1637:4:-;10284:21;;10350:16;;;;;;;;;;;;;;;;;;10284:52;;10315:20;10284:52;10263:113;;;;-1:-1:-1;;;;;10263:113:4;;;;;;;;;;-1:-1:-1;10491:20:4;;;;;;;;;;;;;;;;;10452:25;;;10431:90;;;;-1:-1:-1;;;;;10431:90:4;;;;;;;;;;-1:-1:-1;10593:19:4;;;;-1:-1:-1;;;;;10593:33:4;;10589:168;;10667:19;;;;10718:14;;;;;;;;;;;;;-1:-1:-1;10718:14:4;;;;-1:-1:-1;;;;;10667:33:4;10690:10;10667:33;10642:104;;;;-1:-1:-1;;;;;10642:104:4;;;;;;;;;;;10589:168;10827:18;;;;-1:-1:-1;;;;;10827:32:4;;10823:167;;10922:12;-1:-1:-1;;;;;10900:34:4;:5;:18;;;-1:-1:-1;;;;;10900:34:4;;10952:13;;;;;;;;;;;;;;;;;;10875:104;;;;;;;-1:-1:-1;;;;;10875:104:4;;;;;;;;;;;10823:167;11072:37;;;;:42;11068:221;;;11155:68;11172:9;:19;;;11193:5;:18;;;11213:9;11155:16;:68::i;:::-;11241:23;;;;;;;;;;;;;;;;;;11130:148;;;;;;-1:-1:-1;;;;;11130:148:4;;;;;;;;;;;11068:221;11361:149;11394:22;11434:5;:22;;;11474:5;:22;;;11361:15;:149::i;:::-;11524:14;;;;;;;;;;;;;;;;;;11360:150;11339:209;;;;-1:-1:-1;;;;;11339:209:4;;;;;;;;;;;9918:1637;;;;;;:::o;7975:768::-;8253:72;8261:27;8290:11;:34;;;8253:7;:72::i;:::-;8233:17;;;;:6;:17;;;;;;;;;:92;;;;8438:25;;;;8380:18;;8477:34;;8525;;;;8573:24;;;;8611;;;;8672:20;;;;8706;;;;8362:374;;8233:17;;-1:-1:-1;;;;;8362:374:4;;;;;;;;;;;;;8412:12;;8477:34;;8525;;8573:24;;8611;;8706:20;8362:374;;;;;;;;;;7975:768;;;;;:::o;3650:2652:6:-;3898:27;3982:28;4068:25;3934:37;3946:9;:24;;;3934:11;:37::i;:::-;-1:-1:-1;;;3928:44:6;;3898:74;;4019:38;4031:10;:25;;;4019:11;:38::i;:::-;4096:14;4068:42;;;;;;;;-1:-1:-1;;4068:42:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4013:45:6;;;;-1:-1:-1;4068:42:6;;4096:14;4068:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4154:237;4188:9;:24;;;4226:21;4261:9;:22;;;4297:10;:23;;;4334:18;:24;;;:47;;;4154:20;:237::i;:::-;4435:25;;;;4510:23;;4547:22;;4583:23;;:46;;;4401:238;;4435:25;4474:22;;4510:23;;4401:20;:238::i;:::-;4649:224;4683:9;:24;;;4721:21;4756:9;:22;;;4792:12;4818:18;:45;;;4649:20;:224::i;:::-;4906:211;4940:12;1334:1;4992:9;:22;;;5028:9;:29;;;5071:18;:23;;;:36;;;4906:20;:211::i;:::-;5127:214;5161:12;1334:1;5213:10;:23;;;5250:10;:30;;;5294:18;:24;;;:37;;;5127:20;:214::i;:::-;5411:10;:30;;;-1:-1:-1;;;;;5378:63:6;:9;:29;;;-1:-1:-1;;;;;5378:63:6;;5374:922;;;5457:331;5495:12;1334:1;5555:12;5585:9;:29;;;5632:142;5661:18;:23;;;:36;;;5719:18;:24;;;:37;;;5632:7;:142::i;:::-;5457:20;:331::i;:::-;5374:922;;;5819:225;5857:12;1334:1;5917:12;5947:9;:29;;;5994:18;:23;;;:36;;;5819:20;:225::i;:::-;6058:227;6096:12;1334:1;6156:12;6186:10;:30;;;6234:18;:24;;;:37;;;6058:20;:227::i;418:146:31:-;498:7;528:6;;;;521:14;;;;-1:-1:-1;552:5:31;;;418:146::o;1520:446:27:-;1604:13;1665:1;1654;:8;:12;1680:33;;;;;;;;;;;;;;;;;;;;;;;1633:90;;;;;;;-1:-1:-1;;;;;1633:90:27;;;;;;;;;;-1:-1:-1;1773:8:27;;1771:1;;-1:-1:-1;;1773:12:27;;;1771:15;;;;;;;;;;1885:8;;-1:-1:-1;;1881:16:27;1910:17;;;-1:-1:-1;;;;1771:15:27;;;;;;1520:446::o;5639:488::-;5760:14;5823:5;5831:2;5823:10;5811:1;:8;:22;;5847:38;;;;;;;;;;;;;;;;;;;;;;;5790:105;;;;;;;-1:-1:-1;;;;;5790:105:27;;;;;;;;;;-1:-1:-1;;6074:13:27;5976:2;6074:13;6068:20;;5639:488::o;2161:480::-;2248:14;2311:2;2299:1;:8;:14;;2327:38;;;;;;;;;;;;;;;;;;;;;;;2278:97;;;;;;;-1:-1:-1;;;;;2278:97:27;;;;;;;;;;;2427:29;2439:1;2453:2;2442:1;:8;:13;2427:11;:29::i;:::-;2559:8;;-1:-1:-1;;2555:17:27;2585;;;-1:-1:-1;2418:38:27;2161:480::o;1064:326:19:-;1218:21;1271:82;1292:26;1300:9;1311:6;1292:7;:26::i;:::-;1332:11;1271:7;:82::i;:::-;1255:98;1064:326;-1:-1:-1;;;;1064:326:19:o;1161:135:31:-;1246:7;1280:1;1276;:5;:13;;1288:1;1276:13;;;1284:1;1276:13;1269:20;1161:135;-1:-1:-1;;;1161:135:31:o;12833:994:4:-;12984:30;;:::i;:::-;13189:34;;;:59;;;13373:22;;;;13409;;;;13295:146;;13226:22;;13295:16;:146::i;:::-;13258:183;;13508:34;;;;13556:22;;;;13592:14;;;;13478:138;;13508:34;13556:22;13478:16;:138::i;:::-;13451:24;;;:165;13683:34;;;;13731:22;;;;13767:14;;;;13653:138;;13683:34;13731:22;13653:16;:138::i;:::-;13626:24;;;:165;12833:994;;;;:::o;2005:1199:6:-;2185:23;2261;2337:25;2217:33;2229:5;:20;;;2217:11;:33::i;:::-;-1:-1:-1;;;2211:40:6;;2185:66;;2293:33;2305:5;:20;;;2293:11;:33::i;:::-;2365:14;2337:42;;;;;;;;-1:-1:-1;;2337:42:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2287:40:6;;;;-1:-1:-1;2337:42:6;;2365:14;2337:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2389:201;2423:5;:20;;;2457:17;2488:5;:18;;;2520:12;2546:11;:34;;;2389:20;:201::i;:::-;2600;2634:5;:20;;;2668:17;2699:12;2725:5;:18;;;2757:11;:34;;;2600:20;:201::i;:::-;2811:191;2845:12;1334:1;2897:5;:18;;;2929:5;:25;;;2968:11;:24;;;2811:20;:191::i;:::-;3012:185;3046:12;1334:1;3098:12;3124:5;:25;;;3163:11;:24;;;3012:20;:185::i;:::-;2005:1199;;;;;;:::o;2793:997:20:-;2882:17;689:67;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;689:67:20;;;679:78;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;679:78:20;;;;;;;;;;;;3150:4;3125:31;;;;;;;;;26:21:-1;;;22:32;6:49;;3125:31:20;;;;;;;;3115:42;;679:78;;-1:-1:-1;3125:31:20;;-1:-1:-1;3125:31:20;;-1:-1:-1;3115:42:20;;;;3125:31;3115:42;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;3115:42:20;;;;;;;;;;;;811:458;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;811:458:20;;;;;;;;801:469;;3115:42;;-1:-1:-1;811:458:20;;-1:-1:-1;811:458:20;;-1:-1:-1;801:469:20;;;;811:458;801:469;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;801:469:20;;;;;;;;;;;;;;;;3246:5;:18;;;3282:5;:18;;;3318:5;:25;;;3361:5;:19;;;3398:5;:22;;;3438:5;:22;;;3478:5;:14;;;3510:5;:14;;;3542:5;:27;;;3587:5;:10;;;3642:5;:20;;;3625:38;;;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3625:38:20;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3625:38:20;;;3615:49;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3615:49:20;;;;;;;;;;;;;;;;3709:5;:20;;;3692:38;;;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3692:38:20;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3692:38:20;;;3682:49;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3682:49:20;;;;;;;;;;;;;;;;3212:533;;;;;;-1:-1:-1;;;;;3212:533:20;-1:-1:-1;;;;;3212:533:20;;;;;;;;-1:-1:-1;;;;;3212:533:20;-1:-1:-1;;;;;3212:533:20;;;;;;;;-1:-1:-1;;;;;3212:533:20;-1:-1:-1;;;;;3212:533:20;;;;;;;;-1:-1:-1;;;;;3212:533:20;-1:-1:-1;;;;;3212:533:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3212:533:20;;;3202:544;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;-1:-1;;263:2;259:12;;;254:3;250:22;246:30;340:21;;;311:9;;295:26;;;;377:20;365:33;;3202:544:20;;;;;;;;;;;;3043:713;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3043:713:20;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;3043:713:20;;;;;;-1:-1:-1;;3033:724:20;;3043:713;;;;3033:724;;;;;3043:713;3033:724;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;3033:724:20;;;;;;;;;;;2793:997;-1:-1:-1;;;;;2793:997:20:o;11752:810:4:-;12016:21;;12082:16;;;;;;;;;;;;;;;;;12404:20;;12016:52;;12047:20;12016:52;11995:113;;;;-1:-1:-1;;;;;11995:113:4;;;;;;;;;;-1:-1:-1;12182:19:4;;;;-1:-1:-1;;;;;12182:33:4;;12178:168;;12256:19;;;;12307:14;;;;;;;;;;;;;-1:-1:-1;12307:14:4;;;;-1:-1:-1;;;;;12256:33:4;12279:10;12256:33;12231:104;;;;-1:-1:-1;;;;;12231:104:4;;;;;;;;;;;12178:168;12427:26;:24;:26::i;:::-;12484:18;;12532:13;;;;;;;;;;;;;;;;;12404:49;;-1:-1:-1;;;;;;12484:34:4;;;;;;12463:92;;;;-1:-1:-1;;;;;12463:92:4;;;;;;;;;;;11752:810;;;:::o;9045:398::-;9193:20;;;;:9;:20;;;;;;;:27;;-1:-1:-1;;9193:27:4;9216:4;9193:27;;;9310:25;;;;9278:18;;9372:20;;;;9406;;;;9258:178;;9203:9;;-1:-1:-1;;;;;9258:178:4;;;;;;;;;;;;;9372:20;;9406;9258:178;;;;;;;;;;9045:398;;:::o;570:166:31:-;650:7;682:5;;;704:6;;;;697:14;;;84:180;164:7;196:5;;;218:6;;;:20;;;237:1;232;228;:5;;;;;;;;:10;218:20;211:28;;;;;1629:555:19;1782:12;1810:17;1967:33;1856:11;1830:38;;;;;;;1845:9;1837:6;1830:38;1810:58;-1:-1:-1;1882:14:19;;1878:79;;;1919:5;1912:12;;;;1878:79;2003:98;2024:27;2032:9;2043:7;2024;:27::i;:::-;2065:26;2073:9;2084:6;2065:7;:26::i;:::-;2003:7;:98::i;:::-;2149:4;-1:-1:-1;2121:32:19;1629:555;-1:-1:-1;;;;;;1629:555:19:o;3283:506:3:-;3597:22;3547:1;3538:6;:10;3534:249;;;-1:-1:-1;3622:26:3;;;;;;;:12;:26;;;;;;;;3720:52;;;;;-1:-1:-1;;;;;3622:26:3;;;;;;3720:23;;:52;;3744:9;;3755:4;;3761:2;;3765:6;;3720:52;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3720:52:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3720:52:3;;;;3283:506;;;;;;:::o;2855:884:27:-;2976:14;3039:5;3047:2;3039:10;3027:1;:8;:22;;3091:38;;;;;;;;;;;;;;;;;;;;;;;3006:133;;;;;;;-1:-1:-1;;;;;3006:133:27;;;;;;;;;;-1:-1:-1;;3641:13:27;3386:2;3641:13;3635:20;-1:-1:-1;;;;;3631:69:27;;2855:884::o;270:142:31:-;350:7;373:6;386:1;382;:5;;;;;;;;;270:142;-1:-1:-1;;;;270:142:31:o;894:607:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;894:607:2;;;;;;;;;;;;;;;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;146:693;;261:4;249:17;;245:27;-1:-1;235:2;;286:1;283;276:12;235:2;323:6;310:20;345:85;360:69;422:6;360:69;;;345:85;;;458:21;;;502:4;490:17;;;;336:94;;-1:-1;515:14;;490:17;610:1;595:238;620:6;617:1;614:13;595:238;;;703:3;690:17;682:6;678:30;727:42;765:3;753:10;727:42;;;715:55;;-1:-1;793:4;784:14;;;;812;;;;;642:1;635:9;595:238;;;599:14;228:611;;;;;;;;879:735;;1008:4;996:17;;992:27;-1:-1;982:2;;1033:1;1030;1023:12;982:2;1070:6;1057:20;1092:99;1107:83;1183:6;1107:83;;1092:99;1219:21;;;1263:4;1251:17;;;;1083:108;;-1:-1;1276:14;;1251:17;1371:1;1356:252;1381:6;1378:1;1375:13;1356:252;;;1464:3;1451:17;1443:6;1439:30;1488:56;1540:3;1528:10;1488:56;;;1476:69;;-1:-1;1568:4;1559:14;;;;1587;;;;;1403:1;1396:9;1356:252;;1640:707;;1750:4;1738:17;;1734:27;-1:-1;1724:2;;1775:1;1772;1765:12;1724:2;1812:6;1799:20;1834:80;1849:64;1906:6;1849:64;;1834:80;1825:89;;1931:5;1956:6;1949:5;1942:21;1986:4;1978:6;1974:17;1964:27;;2008:4;2003:3;1999:14;1992:21;;2061:6;2108:3;2100:4;2092:6;2088:17;2083:3;2079:27;2076:36;2073:2;;;2125:1;2122;2115:12;2073:2;2150:1;2135:206;2160:6;2157:1;2154:13;2135:206;;;2218:3;2240:37;2273:3;2261:10;2240:37;;;2228:50;;-1:-1;2301:4;2292:14;;;;2320;;;;;2182:1;2175:9;2135:206;;2355:112;;2419:43;2454:6;2441:20;2419:43;;2474:116;;2549:36;2577:6;2571:13;2549:36;;2597:118;;2664:46;2702:6;2689:20;2664:46;;2736:335;;;2843:4;2831:17;;2827:27;-1:-1;2817:2;;2868:1;2865;2858:12;2817:2;-1:-1;2888:20;;2928:18;2917:30;;2914:2;;;2960:1;2957;2950:12;2914:2;2994:4;2986:6;2982:17;2970:29;;3044:3;3037;3029:6;3025:16;3015:8;3011:31;3008:40;3005:2;;;3061:1;3058;3051:12;3005:2;2810:261;;;;;;3080:432;;3170:4;3158:17;;3154:27;-1:-1;3144:2;;3195:1;3192;3185:12;3144:2;3232:6;3219:20;3254:60;3269:44;3306:6;3269:44;;3254:60;3245:69;;3334:6;3327:5;3320:21;3370:4;3362:6;3358:17;3403:4;3396:5;3392:16;3438:3;3429:6;3424:3;3420:16;3417:25;3414:2;;;3455:1;3452;3445:12;3414:2;3465:41;3499:6;3494:3;3489;3465:41;;;3137:375;;;;;;;;3997:2205;;4105:5;4093:9;4088:3;4084:19;4080:31;4077:2;;;4124:1;4121;4114:12;4077:2;4142:21;4157:5;4142:21;;;4133:30;-1:-1;4221:1;4252:49;4297:3;4277:9;4252:49;;;4228:74;;-1:-1;4371:2;4404:49;4449:3;4425:22;;;4404:49;;;4397:4;4390:5;4386:16;4379:75;4323:142;4530:2;4563:49;4608:3;4599:6;4588:9;4584:22;4563:49;;;4556:4;4549:5;4545:16;4538:75;4475:149;4683:2;4716:49;4761:3;4752:6;4741:9;4737:22;4716:49;;;4709:4;4702:5;4698:16;4691:75;4634:143;4839:3;4873:49;4918:3;4909:6;4898:9;4894:22;4873:49;;;4866:4;4859:5;4855:16;4848:75;4787:147;4996:3;5030:49;5075:3;5066:6;5055:9;5051:22;5030:49;;;5023:4;5016:5;5012:16;5005:75;4944:147;5145:3;5179:49;5224:3;5215:6;5204:9;5200:22;5179:49;;;5172:4;5165:5;5161:16;5154:75;5101:139;5294:3;5328:49;5373:3;5364:6;5353:9;5349:22;5328:49;;;5321:4;5314:5;5310:16;5303:75;5250:139;5456:3;5491:49;5536:3;5527:6;5516:9;5512:22;5491:49;;;5483:5;5476;5472:17;5465:76;5399:153;5602:3;5637:49;5682:3;5673:6;5662:9;5658:22;5637:49;;;5629:5;5622;5618:17;5611:76;5562:136;5786:3;5775:9;5771:19;5758:33;5811:18;5803:6;5800:30;5797:2;;;5843:1;5840;5833:12;5797:2;5879:54;5929:3;5920:6;5909:9;5905:22;5879:54;;;5871:5;5864;5860:17;5853:81;5708:237;6033:3;6022:9;6018:19;6005:33;6058:18;6050:6;6047:30;6044:2;;;6090:1;6087;6080:12;6044:2;6126:54;6176:3;6167:6;6156:9;6152:22;6126:54;;;6118:5;6111;6107:17;6100:81;5955:237;4071:2131;;;;;8578:114;;8643:44;8679:6;8666:20;8643:44;;8699:118;;8775:37;8804:6;8798:13;8775:37;;8824:241;;8928:2;8916:9;8907:7;8903:23;8899:32;8896:2;;;8944:1;8941;8934:12;8896:2;8979:1;8996:53;9041:7;9021:9;8996:53;;9072:366;;;9193:2;9181:9;9172:7;9168:23;9164:32;9161:2;;;9209:1;9206;9199:12;9161:2;9244:1;9261:53;9306:7;9286:9;9261:53;;;9251:63;;9223:97;9351:2;9369:53;9414:7;9405:6;9394:9;9390:22;9369:53;;;9359:63;;9330:98;9155:283;;;;;;9445:360;;;9563:2;9551:9;9542:7;9538:23;9534:32;9531:2;;;9579:1;9576;9569:12;9531:2;9614:1;9631:53;9676:7;9656:9;9631:53;;;9621:63;;9593:97;9721:2;9739:50;9781:7;9772:6;9761:9;9757:22;9739:50;;9812:415;;9960:2;9948:9;9939:7;9935:23;9931:32;9928:2;;;9976:1;9973;9966:12;9928:2;10011:31;;10062:18;10051:30;;10048:2;;;10094:1;10091;10084:12;10048:2;10114:97;10203:7;10194:6;10183:9;10179:22;10114:97;;10234:947;;;;10471:2;10459:9;10450:7;10446:23;10442:32;10439:2;;;10487:1;10484;10477:12;10439:2;10522:31;;10573:18;10562:30;;10559:2;;;10605:1;10602;10595:12;10559:2;10625:97;10714:7;10705:6;10694:9;10690:22;10625:97;;;10615:107;;10501:227;10787:2;10776:9;10772:18;10759:32;10811:18;10803:6;10800:30;10797:2;;;10843:1;10840;10833:12;10797:2;10863:78;10933:7;10924:6;10913:9;10909:22;10863:78;;;10853:88;;10738:209;11006:2;10995:9;10991:18;10978:32;11030:18;11022:6;11019:30;11016:2;;;11062:1;11059;11052:12;11016:2;11082:83;11157:7;11148:6;11137:9;11133:22;11082:83;;;11072:93;;10957:214;10433:748;;;;;;11188:811;;;;11400:2;11388:9;11379:7;11375:23;11371:32;11368:2;;;11416:1;11413;11406:12;11368:2;11451:31;;11502:18;11491:30;;11488:2;;;11534:1;11531;11524:12;11488:2;11554:97;11643:7;11634:6;11623:9;11619:22;11554:97;;;11544:107;;11430:227;11688:2;11706:53;11751:7;11742:6;11731:9;11727:22;11706:53;;12006:257;;12118:2;12106:9;12097:7;12093:23;12089:32;12086:2;;;12134:1;12131;12124:12;12086:2;12169:1;12186:61;12239:7;12219:9;12186:61;;12270:241;;12374:2;12362:9;12353:7;12349:23;12345:32;12342:2;;;12390:1;12387;12380:12;12342:2;12425:1;12442:53;12487:7;12467:9;12442:53;;12518:366;;;12639:2;12627:9;12618:7;12614:23;12610:32;12607:2;;;12655:1;12652;12645:12;12607:2;12690:1;12707:53;12752:7;12732:9;12707:53;;12891:615;;;;;13048:2;13036:9;13027:7;13023:23;13019:32;13016:2;;;13064:1;13061;13054:12;13016:2;13099:1;13116:53;13161:7;13141:9;13116:53;;;13106:63;;13078:97;13206:2;13224:53;13269:7;13260:6;13249:9;13245:22;13224:53;;;13214:63;;13185:98;13342:2;13331:9;13327:18;13314:32;13366:18;13358:6;13355:30;13352:2;;;13398:1;13395;13388:12;13352:2;13426:64;13482:7;13473:6;13462:9;13458:22;13426:64;;;13010:496;;;;-1:-1;13408:82;-1:-1;;;;13010:496;13513:595;;;;13660:2;13648:9;13639:7;13635:23;13631:32;13628:2;;;13676:1;13673;13666:12;13628:2;13711:1;13728:53;13773:7;13753:9;13728:53;;;13718:63;;13690:97;13818:2;13836:53;13881:7;13872:6;13861:9;13857:22;13836:53;;;13826:63;;13797:98;13954:2;13943:9;13939:18;13926:32;13978:18;13970:6;13967:30;13964:2;;;14010:1;14007;14000:12;13964:2;14030:62;14084:7;14075:6;14064:9;14060:22;14030:62;;14115:373;;14242:2;14230:9;14221:7;14217:23;14213:32;14210:2;;;14258:1;14255;14248:12;14210:2;14293:31;;14344:18;14333:30;;14330:2;;;14376:1;14373;14366:12;14330:2;14396:76;14464:7;14455:6;14444:9;14440:22;14396:76;;14495:1089;;;;;14714:3;14702:9;14693:7;14689:23;14685:33;14682:2;;;14731:1;14728;14721:12;14682:2;14766:31;;14817:18;14806:30;;14803:2;;;14849:1;14846;14839:12;14803:2;14869:76;14937:7;14928:6;14917:9;14913:22;14869:76;;;14859:86;;14745:206;15010:2;14999:9;14995:18;14982:32;15034:18;15026:6;15023:30;15020:2;;;15066:1;15063;15056:12;15020:2;15086:76;15154:7;15145:6;15134:9;15130:22;15086:76;;;15076:86;;14961:207;15227:2;15216:9;15212:18;15199:32;15251:18;15243:6;15240:30;15237:2;;;15283:1;15280;15273:12;15237:2;15303:62;15357:7;15348:6;15337:9;15333:22;15303:62;;;15293:72;;15178:193;15430:2;15419:9;15415:18;15402:32;15454:18;15446:6;15443:30;15440:2;;;15486:1;15483;15476:12;15440:2;15506:62;15560:7;15551:6;15540:9;15536:22;15506:62;;;15496:72;;15381:193;14676:908;;;;;;;;15591:727;;;;15761:2;15749:9;15740:7;15736:23;15732:32;15729:2;;;15777:1;15774;15767:12;15729:2;15812:31;;15863:18;15852:30;;15849:2;;;15895:1;15892;15885:12;15849:2;15915:76;15983:7;15974:6;15963:9;15959:22;15915:76;;;15905:86;;15791:206;16028:2;16046:53;16091:7;16082:6;16071:9;16067:22;16046:53;;16573:865;;;;;;;16766:3;16754:9;16745:7;16741:23;16737:33;16734:2;;;16783:1;16780;16773:12;16734:2;16818:1;16835:53;16880:7;16860:9;16835:53;;;16825:63;;16797:97;16925:2;16943:53;16988:7;16979:6;16968:9;16964:22;16943:53;;;16933:63;;16904:98;17061:2;17050:9;17046:18;17033:32;17085:18;17077:6;17074:30;17071:2;;;17117:1;17114;17107:12;17071:2;17145:64;17201:7;17192:6;17181:9;17177:22;17145:64;;;17127:82;;;;17012:203;17274:2;17263:9;17259:18;17246:32;17298:18;17290:6;17287:30;17284:2;;;17330:1;17327;17320:12;17284:2;17358:64;17414:7;17405:6;17394:9;17390:22;17358:64;;;17340:82;;;;17225:203;16728:710;;;;;;;;;17445:237;;17547:2;17535:9;17526:7;17522:23;17518:32;17515:2;;;17563:1;17560;17553:12;17515:2;17598:1;17615:51;17658:7;17638:9;17615:51;;17689:259;;17802:2;17790:9;17781:7;17777:23;17773:32;17770:2;;;17818:1;17815;17808:12;17770:2;17853:1;17870:62;17924:7;17904:9;17870:62;;17955:487;;;;18091:2;18079:9;18070:7;18066:23;18062:32;18059:2;;;18107:1;18104;18097:12;18059:2;18142:1;18159:51;18202:7;18182:9;18159:51;;;18149:61;;18121:95;18247:2;18265:53;18310:7;18301:6;18290:9;18286:22;18265:53;;;18255:63;;18226:98;18355:2;18373:53;18418:7;18409:6;18398:9;18394:22;18373:53;;18449:110;18522:31;18547:5;18522:31;;;18517:3;18510:44;18504:55;;;18566:101;18633:28;18655:5;18633:28;;18674:110;18747:31;18772:5;18747:31;;18791:297;;18891:38;18923:5;18891:38;;;18946:6;18941:3;18934:19;18958:63;19014:6;19007:4;19002:3;18998:14;18991:4;18984:5;18980:16;18958:63;;;19053:29;19075:6;19053:29;;;19033:50;;;19046:4;19033:50;;18871:217;-1:-1;;;18871:217;19391:156;19484:57;19535:5;19484:57;;19854:397;20009:2;19997:15;;20046:66;20041:2;20032:12;;20025:88;20147:66;20142:2;20133:12;;20126:88;20242:2;20233:12;;19990:261;20336:888;20564:22;;20477:4;20468:14;;;20598:61;20472:3;20564:22;20598:61;;;20497:174;20765:4;20758:5;20754:16;20748:23;20783:62;20839:4;20834:3;20830:14;20817:11;20783:62;;;20681:176;20941:4;20934:5;20930:16;20924:23;20959:62;21015:4;21010:3;21006:14;20993:11;20959:62;;;20867:166;21117:4;21110:5;21106:16;21100:23;21135:62;21191:4;21186:3;21182:14;21169:11;21135:62;;22290:815;22515:22;;22445:5;22436:15;;;22549:115;22440:3;22515:22;22549:115;;;22466:210;22753:4;22746:5;22742:16;22736:23;22771:116;22881:4;22876:3;22872:14;22859:11;22771:116;;;22686:213;22997:4;22990:5;22986:16;22980:23;23015:63;23071:5;23066:3;23062:15;23049:11;23015:63;;23173:695;23386:22;;23310:4;23301:14;;;23420:57;23305:3;23386:22;23420:57;;;23330:159;23570:4;23563:5;23559:16;23553:23;23588:62;23644:4;23639:3;23635:14;23622:11;23588:62;;;23499:163;23761:4;23754:5;23750:16;23744:23;23779:62;23835:4;23830:3;23826:14;23813:11;23779:62;;23992:104;24061:29;24084:5;24061:29;;24103:193;24211:2;24196:18;;24225:61;24200:9;24259:6;24225:61;;24303:955;24607:3;24592:19;;24622:61;24596:9;24656:6;24622:61;;;24694:62;24752:2;24741:9;24737:18;24728:6;24694:62;;;24767;24825:2;24814:9;24810:18;24801:6;24767:62;;;24840;24898:2;24887:9;24883:18;24874:6;24840:62;;;24913:63;24971:3;24960:9;24956:19;24947:6;24913:63;;;25025:9;25019:4;25015:20;25009:3;24998:9;24994:19;24987:49;25050:62;25107:4;25098:6;25050:62;;;25042:70;;25161:9;25155:4;25151:20;25145:3;25134:9;25130:19;25123:49;25186:62;25243:4;25234:6;25186:62;;;25178:70;24578:680;-1:-1;;;;;;;;;24578:680;25265:181;25367:2;25352:18;;25381:55;25356:9;25409:6;25381:55;;25453:479;25635:2;25620:18;;25649:61;25624:9;25683:6;25649:61;;;25721:62;25779:2;25768:9;25764:18;25755:6;25721:62;;;25831:9;25825:4;25821:20;25816:2;25805:9;25801:18;25794:48;25856:66;25917:4;25908:6;25856:66;;;25848:74;25606:326;-1:-1;;;;;25606:326;25939:378;26093:2;26078:18;;26107:61;26082:9;26141:6;26107:61;;;26216:9;26210:4;26206:20;26201:2;26190:9;26186:18;26179:48;26241:66;26302:4;26293:6;26241:66;;26324:489;26512:3;26497:19;;26527:61;26501:9;26561:6;26527:61;;;26599:58;26653:2;26642:9;26638:18;26629:6;26599:58;;;26668:62;26726:2;26715:9;26711:18;26702:6;26668:62;;;26741;26799:2;26788:9;26784:18;26775:6;26741:62;;26820:581;27030:3;27045:47;;;27015:19;;27106:66;27015:19;27158:6;27106:66;;;27098:74;;27183:62;27241:2;27230:9;27226:18;27217:6;27183:62;;;27256;27314:2;27303:9;27299:18;27290:6;27256:62;;27408:446;27572:2;27586:47;;;27557:18;;27647:62;27557:18;27695:6;27647:62;;;27639:70;;27757:9;27751:4;27747:20;27742:2;27731:9;27727:18;27720:48;27782:62;27839:4;27830:6;27782:62;;27861:233;27989:2;27974:18;;28003:81;27978:9;28057:6;28003:81;;28101:273;28225:2;28239:47;;;28210:18;;28300:64;28210:18;28350:6;28300:64;;28381:387;28562:2;28576:47;;;28547:18;;28637:121;28547:18;28637:121;;28775:310;28941:3;28926:19;;28956:119;28930:9;29048:6;28956:119;;29092:338;29272:3;29257:19;;29287:133;29261:9;29393:6;29287:133;;29437:301;29599:2;29584:18;;29613:115;29588:9;29701:6;29613:115;;29745:193;29853:2;29838:18;;29867:61;29842:9;29901:6;29867:61;;29945:387;30105:2;30090:18;;30119:57;30094:9;30149:6;30119:57;;;30187:62;30245:2;30234:9;30230:18;30221:6;30187:62;;;30260;30318:2;30307:9;30303:18;30294:6;30260:62;;30339:256;30401:2;30395:9;30427:17;;;30502:18;30487:34;;30523:22;;;30484:62;30481:2;;;30559:1;30556;30549:12;30481:2;30575;30568:22;30379:216;;-1:-1;30379:216;30602:263;;30766:18;30758:6;30755:30;30752:2;;;30798:1;30795;30788:12;30752:2;-1:-1;30827:4;30815:17;;;30845:15;;30689:176;31421:254;;31560:18;31552:6;31549:30;31546:2;;;31592:1;31589;31582:12;31546:2;-1:-1;31665:4;31636;31613:17;;;;-1:-1;;31609:33;31655:15;;31483:192;31947:87;32017:12;;32001:33;32234:128;-1:-1;;;;;32303:54;;32286:76;32369:92;32442:13;32435:21;;32418:43;32468:79;32537:5;32520:27;32640:88;32718:4;32707:16;;32690:38;33236:135;;33335:31;33360:5;33335:31;;33379:145;33460:6;33455:3;33450;33437:30;-1:-1;33516:1;33498:16;;33491:27;33430:94;33533:268;33598:1;33605:101;33619:6;33616:1;33613:13;33605:101;;;33686:11;;;33680:18;33667:11;;;33660:39;33641:2;33634:10;33605:101;;;33721:6;33718:1;33715:13;33712:2;;;-1:-1;;33786:1;33768:16;;33761:27;33582:219;33809:97;33897:2;33877:14;-1:-1;;33873:28;;33857:49"
			}
		}
	},
	"sources": {
		"current/protocol/AssetProxy/interfaces/IAssetProxy.sol": {
			"id": 0
		},
		"current/protocol/AssetProxy/interfaces/IAuthorizable.sol": {
			"id": 1
		},
		"current/protocol/Exchange/Exchange.sol": {
			"id": 2
		},
		"current/protocol/Exchange/MixinAssetProxyDispatcher.sol": {
			"id": 3
		},
		"current/protocol/Exchange/MixinExchangeCore.sol": {
			"id": 4
		},
		"current/protocol/Exchange/MixinMatchOrders.sol": {
			"id": 5
		},
		"current/protocol/Exchange/MixinSettlement.sol": {
			"id": 6
		},
		"current/protocol/Exchange/MixinSignatureValidator.sol": {
			"id": 7
		},
		"current/protocol/Exchange/MixinTransactions.sol": {
			"id": 8
		},
		"current/protocol/Exchange/MixinWrapperFunctions.sol": {
			"id": 9
		},
		"current/protocol/Exchange/interfaces/IAssetProxyDispatcher.sol": {
			"id": 10
		},
		"current/protocol/Exchange/interfaces/IExchangeCore.sol": {
			"id": 11
		},
		"current/protocol/Exchange/interfaces/IMatchOrders.sol": {
			"id": 12
		},
		"current/protocol/Exchange/interfaces/ISignatureValidator.sol": {
			"id": 13
		},
		"current/protocol/Exchange/interfaces/ITransactions.sol": {
			"id": 14
		},
		"current/protocol/Exchange/interfaces/IValidator.sol": {
			"id": 15
		},
		"current/protocol/Exchange/interfaces/IWallet.sol": {
			"id": 16
		},
		"current/protocol/Exchange/libs/LibExchangeErrors.sol": {
			"id": 17
		},
		"current/protocol/Exchange/libs/LibFillResults.sol": {
			"id": 18
		},
		"current/protocol/Exchange/libs/LibMath.sol": {
			"id": 19
		},
		"current/protocol/Exchange/libs/LibOrder.sol": {
			"id": 20
		},
		"current/protocol/Exchange/mixins/MAssetProxyDispatcher.sol": {
			"id": 21
		},
		"current/protocol/Exchange/mixins/MExchangeCore.sol": {
			"id": 22
		},
		"current/protocol/Exchange/mixins/MMatchOrders.sol": {
			"id": 23
		},
		"current/protocol/Exchange/mixins/MSettlement.sol": {
			"id": 24
		},
		"current/protocol/Exchange/mixins/MSignatureValidator.sol": {
			"id": 25
		},
		"current/protocol/Exchange/mixins/MTransactions.sol": {
			"id": 26
		},
		"current/utils/LibBytes/LibBytes.sol": {
			"id": 27
		},
		"current/utils/LibMem/LibMem.sol": {
			"id": 28
		},
		"current/utils/Ownable/IOwnable.sol": {
			"id": 29
		},
		"current/utils/Ownable/Ownable.sol": {
			"id": 30
		},
		"current/utils/SafeMath/SafeMath.sol": {
			"id": 31
		}
	},
	"sourceCodes": {
		"current/protocol/AssetProxy/interfaces/IAssetProxy.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./IAuthorizable.sol\";\n\ncontract IAssetProxy is\n    IAuthorizable\n{\n\n    /// @dev Transfers assets. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    function transferFrom(\n        bytes assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        external;\n    \n    /// @dev Makes multiple transfers of assets. Either succeeds or throws.\n    /// @param assetData Array of byte arrays encoded for the respective asset proxy.\n    /// @param from Array of addresses to transfer assets from.\n    /// @param to Array of addresses to transfer assets to.\n    /// @param amounts Array of amounts of assets to transfer.\n    function batchTransferFrom(\n        bytes[] memory assetData,\n        address[] memory from,\n        address[] memory to,\n        uint256[] memory amounts\n    )\n        public;\n\n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        view\n        returns (uint8);\n}\n\n",
		"current/protocol/AssetProxy/interfaces/IAuthorizable.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../../utils/Ownable/IOwnable.sol\";\n\ncontract IAuthorizable is\n    IOwnable\n{\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[]);\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n}\n",
		"current/protocol/Exchange/Exchange.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./MixinExchangeCore.sol\";\nimport \"./MixinSignatureValidator.sol\";\nimport \"./MixinSettlement.sol\";\nimport \"./MixinWrapperFunctions.sol\";\nimport \"./MixinAssetProxyDispatcher.sol\";\nimport \"./MixinTransactions.sol\";\nimport \"./MixinMatchOrders.sol\";\n\ncontract Exchange is\n    MixinExchangeCore,\n    MixinMatchOrders,\n    MixinSettlement,\n    MixinSignatureValidator,\n    MixinTransactions,\n    MixinAssetProxyDispatcher,\n    MixinWrapperFunctions\n{\n\n    string constant public VERSION = \"2.0.1-alpha\";\n\n    // Mixins are instantiated in the order they are inherited\n    constructor (bytes memory _zrxAssetData)\n        public\n        MixinExchangeCore()\n        MixinMatchOrders()\n        MixinSettlement(_zrxAssetData)\n        MixinSignatureValidator()\n        MixinTransactions()\n        MixinAssetProxyDispatcher()\n        MixinWrapperFunctions()\n    {}\n}\n",
		"current/protocol/Exchange/MixinAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../../utils/Ownable/Ownable.sol\";\nimport \"../../utils/LibBytes/LibBytes.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"./mixins/MAssetProxyDispatcher.sol\";\nimport \"../AssetProxy/interfaces/IAssetProxy.sol\";\n\ncontract MixinAssetProxyDispatcher is\n    Ownable,\n    LibBytes,\n    LibExchangeErrors,\n    MAssetProxyDispatcher\n{\n    // Mapping from Asset Proxy Id's to their respective Asset Proxy\n    mapping (uint8 => IAssetProxy) public assetProxies;\n\n    /// @dev Registers an asset proxy to an asset proxy id.\n    ///      An id can only be assigned to a single proxy at a given time.\n    /// @param assetProxyId Id to register`newAssetProxy` under.\n    /// @param newAssetProxy Address of new asset proxy to register, or 0x0 to unset assetProxyId.\n    /// @param oldAssetProxy Existing asset proxy to overwrite, or 0x0 if assetProxyId is currently unused.\n    function registerAssetProxy(\n        uint8 assetProxyId,\n        address newAssetProxy,\n        address oldAssetProxy\n    )\n        external\n        onlyOwner\n    {\n        // Ensure the existing asset proxy is not unintentionally overwritten\n        address currentAssetProxy = address(assetProxies[assetProxyId]);\n        require(\n            oldAssetProxy == currentAssetProxy,\n            ASSET_PROXY_MISMATCH\n        );\n\n        IAssetProxy assetProxy = IAssetProxy(newAssetProxy);\n\n        // Ensure that the id of newAssetProxy matches the passed in assetProxyId, unless it is being reset to 0.\n        if (newAssetProxy != address(0)) {\n            uint8 newAssetProxyId = assetProxy.getProxyId();\n            require(\n                newAssetProxyId == assetProxyId,\n                ASSET_PROXY_ID_MISMATCH\n            );\n        }\n\n        // Add asset proxy and log registration.\n        assetProxies[assetProxyId] = assetProxy;\n        emit AssetProxySet(assetProxyId, newAssetProxy, oldAssetProxy);\n    }\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(uint8 assetProxyId)\n        external\n        view\n        returns (address)\n    {\n        address assetProxy = address(assetProxies[assetProxyId]);\n        return assetProxy;\n    }\n\n    /// @dev Forwards arguments to assetProxy and calls `transferFrom`. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param assetProxyId Id of assetProxy to dispach to.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param amount Amount of token to transfer.\n    function dispatchTransferFrom(\n        bytes memory assetData,\n        uint8 assetProxyId,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        // Do nothing if no amount should be transferred.\n        if (amount > 0) {\n            // Lookup assetProxy\n            IAssetProxy assetProxy = assetProxies[assetProxyId];\n            // transferFrom will either succeed or throw.\n            assetProxy.transferFrom(assetData, from, to, amount);\n        }\n    }\n}\n",
		"current/protocol/Exchange/MixinExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./libs/LibFillResults.sol\";\nimport \"./libs/LibOrder.sol\";\nimport \"./libs/LibMath.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"./mixins/MExchangeCore.sol\";\nimport \"./mixins/MSettlement.sol\";\nimport \"./mixins/MSignatureValidator.sol\";\nimport \"./mixins/MTransactions.sol\";\n\ncontract MixinExchangeCore is\n    LibMath,\n    LibOrder,\n    LibFillResults,\n    LibExchangeErrors,\n    MExchangeCore,\n    MSettlement,\n    MSignatureValidator,\n    MTransactions\n{\n    // Mapping of orderHash => amount of takerAsset already bought by maker\n    mapping (bytes32 => uint256) public filled;\n\n    // Mapping of orderHash => cancelled\n    mapping (bytes32 => bool) public cancelled;\n\n    // Mapping of makerAddress => senderAddress => lowest salt an order can have in order to be fillable\n    // Orders with specified senderAddress and with a salt less than their epoch to are considered cancelled\n    mapping (address => mapping (address => uint256)) public orderEpoch;\n\n    ////// Core exchange functions //////\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external\n    {\n        address makerAddress = getCurrentContextAddress();\n        // If this function is called via `executeTransaction`, we only update the orderEpoch for the makerAddress/msg.sender combination.\n        // This allows external filter contracts to add rules to how orders are cancelled via this function.\n        address senderAddress = makerAddress == msg.sender ? address(0) : msg.sender;\n\n        // orderEpoch is initialized to 0, so to cancelUpTo we need salt + 1\n        uint256 newOrderEpoch = targetOrderEpoch + 1;  \n        uint256 oldOrderEpoch = orderEpoch[makerAddress][senderAddress];\n\n        // Ensure orderEpoch is monotonically increasing\n        require(\n            newOrderEpoch > oldOrderEpoch, \n            INVALID_NEW_ORDER_EPOCH\n        );\n\n        // Update orderEpoch\n        orderEpoch[makerAddress][senderAddress] = newOrderEpoch;\n        emit CancelUpTo(makerAddress, senderAddress, newOrderEpoch);\n    }\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (FillResults memory fillResults)\n    {\n        // Fetch order info\n        OrderInfo memory orderInfo = getOrderInfo(order);\n\n        // Fetch taker address\n        address takerAddress = getCurrentContextAddress();\n\n        // Get amount of takerAsset to fill\n        uint256 remainingTakerAssetAmount = safeSub(order.takerAssetAmount, orderInfo.orderTakerAssetFilledAmount);\n        uint256 takerAssetFilledAmount = min256(takerAssetFillAmount, remainingTakerAssetAmount);\n\n        // Validate context\n        assertValidFill(\n            order,\n            orderInfo,\n            takerAddress,\n            takerAssetFillAmount,\n            takerAssetFilledAmount,\n            signature\n        );\n\n        // Compute proportional fill amounts\n        fillResults = calculateFillResults(order, takerAssetFilledAmount);\n\n        // Update exchange internal state\n        updateFilledState(\n            order,\n            takerAddress,\n            orderInfo.orderHash,\n            orderInfo.orderTakerAssetFilledAmount,\n            fillResults\n        );\n    \n        // Settle order\n        settleOrder(order, takerAddress, fillResults);\n\n        return fillResults;\n    }\n\n    /// @dev After calling, the order can not be filled anymore.\n    ///      Throws if order is invalid or sender does not have permission to cancel.\n    /// @param order Order to cancel. Order must be OrderStatus.FILLABLE.\n    function cancelOrder(Order memory order)\n        public\n    {\n        // Fetch current order status\n        OrderInfo memory orderInfo = getOrderInfo(order);\n\n        // Validate context\n        assertValidCancel(order, orderInfo);\n\n        // Perform cancel\n        updateCancelledState(order, orderInfo.orderHash);\n    }\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///         See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(Order memory order)\n        public\n        view\n        returns (OrderInfo memory orderInfo)\n    {\n        // Compute the order hash\n        orderInfo.orderHash = getOrderHash(order);\n\n        // If order.makerAssetAmount is zero, we also reject the order.\n        // While the Exchange contract handles them correctly, they create\n        // edge cases in the supporting infrastructure because they have\n        // an 'infinite' price when computed by a simple division.\n        if (order.makerAssetAmount == 0) {\n            orderInfo.orderStatus = uint8(OrderStatus.INVALID_MAKER_ASSET_AMOUNT);\n            return orderInfo;\n        }\n\n        // If order.takerAssetAmount is zero, then the order will always\n        // be considered filled because 0 == takerAssetAmount == orderTakerAssetFilledAmount\n        // Instead of distinguishing between unfilled and filled zero taker\n        // amount orders, we choose not to support them.\n        if (order.takerAssetAmount == 0) {\n            orderInfo.orderStatus = uint8(OrderStatus.INVALID_TAKER_ASSET_AMOUNT);\n            return orderInfo;\n        }\n\n        // Validate order expiration\n        if (block.timestamp >= order.expirationTimeSeconds) {\n            orderInfo.orderStatus = uint8(OrderStatus.EXPIRED);\n            return orderInfo;\n        }\n\n        // Check if order has been cancelled\n        if (cancelled[orderInfo.orderHash]) {\n            orderInfo.orderStatus = uint8(OrderStatus.CANCELLED);\n            return orderInfo;\n        }\n        if (orderEpoch[order.makerAddress][order.senderAddress] > order.salt) {\n            orderInfo.orderStatus = uint8(OrderStatus.CANCELLED);\n            return orderInfo;\n        }\n\n        // Fetch filled amount and validate order availability\n        orderInfo.orderTakerAssetFilledAmount = filled[orderInfo.orderHash];\n        if (orderInfo.orderTakerAssetFilledAmount >= order.takerAssetAmount) {\n            orderInfo.orderStatus = uint8(OrderStatus.FULLY_FILLED);\n            return orderInfo;\n        }\n\n        // All other statuses are ruled out: order is Fillable\n        orderInfo.orderStatus = uint8(OrderStatus.FILLABLE);\n        return orderInfo;\n    }\n\n    /// @dev Updates state with results of a fill order.\n    /// @param order that was filled.\n    /// @param takerAddress Address of taker who filled the order.\n    /// @param orderTakerAssetFilledAmount Amount of order already filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function updateFilledState(\n        Order memory order,\n        address takerAddress,\n        bytes32 orderHash,\n        uint256 orderTakerAssetFilledAmount,\n        FillResults memory fillResults\n    )\n        internal\n    {\n        // Update state\n        filled[orderHash] = safeAdd(orderTakerAssetFilledAmount, fillResults.takerAssetFilledAmount);\n\n        // Log order\n        emit Fill(\n            order.makerAddress,\n            takerAddress,\n            order.feeRecipientAddress,\n            fillResults.makerAssetFilledAmount,\n            fillResults.takerAssetFilledAmount,\n            fillResults.makerFeePaid,\n            fillResults.takerFeePaid,\n            orderHash,\n            order.makerAssetData,\n            order.takerAssetData\n        );\n    }\n\n    /// @dev Updates state with results of cancelling an order.\n    ///      State is only updated if the order is currently fillable.\n    ///      Otherwise, updating state would have no effect.\n    /// @param order that was cancelled.\n    /// @param orderHash Hash of order that was cancelled.\n    function updateCancelledState(\n        Order memory order,\n        bytes32 orderHash\n    )\n        internal\n    {\n        // Perform cancel\n        cancelled[orderHash] = true;\n\n        // Log cancel\n        emit Cancel(\n            order.makerAddress,\n            order.feeRecipientAddress,\n            orderHash,\n            order.makerAssetData,\n            order.takerAssetData\n        );\n    }\n\n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    /// @param takerAddress Address of order taker.\n    /// @param takerAssetFillAmount Desired amount of order to fill by taker.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param signature Proof that the orders was created by its maker.\n    function assertValidFill(\n        Order memory order,\n        OrderInfo memory orderInfo,\n        address takerAddress,\n        uint256 takerAssetFillAmount,\n        uint256 takerAssetFilledAmount,\n        bytes memory signature\n    )\n        internal\n        view\n    {\n        // An order can only be filled if its status is FILLABLE.\n        require(\n            orderInfo.orderStatus == uint8(OrderStatus.FILLABLE),\n            ORDER_UNFILLABLE\n        );\n\n        // Revert if fill amount is invalid\n        require(\n            takerAssetFillAmount != 0,\n            INVALID_TAKER_AMOUNT\n        );\n\n        // Validate sender is allowed to fill this order\n        if (order.senderAddress != address(0)) {\n            require(\n                order.senderAddress == msg.sender,\n                INVALID_SENDER\n            );\n        }\n\n        // Validate taker is allowed to fill this order\n        if (order.takerAddress != address(0)) {\n            require(\n                order.takerAddress == takerAddress,\n                INVALID_TAKER\n            );\n        }\n\n        // Validate Maker signature (check only if first time seen)\n        if (orderInfo.orderTakerAssetFilledAmount == 0) {\n            require(\n                isValidSignature(orderInfo.orderHash, order.makerAddress, signature),\n                INVALID_ORDER_SIGNATURE\n            );\n        }\n\n        // Validate fill order rounding\n        require(\n            !isRoundingError(\n                takerAssetFilledAmount,\n                order.takerAssetAmount,\n                order.makerAssetAmount\n            ),\n            ROUNDING_ERROR\n        );\n    }\n\n    /// @dev Validates context for cancelOrder. Succeeds or throws.\n    /// @param order to be cancelled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    function assertValidCancel(\n        Order memory order,\n        OrderInfo memory orderInfo\n    )\n        internal\n        view\n    {\n        // Ensure order is valid\n        // An order can only be cancelled if its status is FILLABLE.\n        require(\n            orderInfo.orderStatus == uint8(OrderStatus.FILLABLE),\n            ORDER_UNFILLABLE\n        );\n\n        // Validate sender is allowed to cancel this order\n        if (order.senderAddress != address(0)) {\n            require(\n                order.senderAddress == msg.sender,\n                INVALID_SENDER\n            );\n        }\n\n        // Validate transaction signed by maker\n        address makerAddress = getCurrentContextAddress();\n        require(\n            order.makerAddress == makerAddress,\n            INVALID_MAKER\n        );\n    }\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        Order memory order,\n        uint256 takerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (FillResults memory fillResults)\n    {\n        // Compute proportional transfer amounts\n        // TODO: All three are multiplied by the same fraction. This can\n        // potentially be optimized.\n        fillResults.takerAssetFilledAmount = takerAssetFilledAmount;\n        fillResults.makerAssetFilledAmount = getPartialAmount(\n            fillResults.takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerAssetAmount\n        );\n        fillResults.makerFeePaid = getPartialAmount(\n            fillResults.takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerFee\n        );\n        fillResults.takerFeePaid = getPartialAmount(\n            fillResults.takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.takerFee\n        );\n\n        return fillResults;\n    }\n}\n",
		"current/protocol/Exchange/MixinMatchOrders.sol": "/*\n  Copyright 2018 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./libs/LibMath.sol\";\nimport \"./libs/LibOrder.sol\";\nimport \"./libs/LibFillResults.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"./mixins/MExchangeCore.sol\";\nimport \"./mixins/MMatchOrders.sol\";\nimport \"./mixins/MSettlement.sol\";\nimport \"./mixins/MTransactions.sol\";\n\ncontract MixinMatchOrders is\n    LibMath,\n    LibExchangeErrors,\n    MExchangeCore,\n    MMatchOrders,\n    MSettlement,\n    MTransactions\n{\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    /// TODO: Make this function external once supported by Solidity (See Solidity Issues #3199, #1603)\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        // We assume that rightOrder.takerAssetData == leftOrder.makerAssetData and rightOrder.makerAssetData == leftOrder.takerAssetData.\n        // If this assumption isn't true, the match will fail at signature validation.\n        rightOrder.makerAssetData = leftOrder.takerAssetData;\n        rightOrder.takerAssetData = leftOrder.makerAssetData;\n\n        // Get left & right order info\n        LibOrder.OrderInfo memory leftOrderInfo = getOrderInfo(leftOrder);\n        LibOrder.OrderInfo memory rightOrderInfo = getOrderInfo(rightOrder);\n\n        // Fetch taker address\n        address takerAddress = getCurrentContextAddress();\n\n        // Either our context is valid or we revert\n        assertValidMatch(leftOrder, rightOrder);\n\n        // Compute proportional fill amounts\n        matchedFillResults = calculateMatchedFillResults(\n            leftOrder,\n            rightOrder,\n            leftOrderInfo.orderTakerAssetFilledAmount,\n            rightOrderInfo.orderTakerAssetFilledAmount\n        );\n\n        // Validate fill contexts\n        assertValidFill(\n            leftOrder,\n            leftOrderInfo,\n            takerAddress,\n            matchedFillResults.left.takerAssetFilledAmount,\n            matchedFillResults.left.takerAssetFilledAmount,\n            leftSignature\n        );\n        assertValidFill(\n            rightOrder,\n            rightOrderInfo,\n            takerAddress,\n            matchedFillResults.right.takerAssetFilledAmount,\n            matchedFillResults.right.takerAssetFilledAmount,\n            rightSignature\n        );\n\n        // Update exchange state\n        updateFilledState(\n            leftOrder,\n            takerAddress,\n            leftOrderInfo.orderHash,\n            leftOrderInfo.orderTakerAssetFilledAmount,\n            matchedFillResults.left\n        );\n        updateFilledState(\n            rightOrder,\n            takerAddress,\n            rightOrderInfo.orderHash,\n            rightOrderInfo.orderTakerAssetFilledAmount,\n            matchedFillResults.right\n        );\n    \n        // Settle matched orders. Succeeds or throws.\n        settleMatchedOrders(\n            leftOrder,\n            rightOrder,\n            takerAddress,\n            matchedFillResults\n        );\n\n        return matchedFillResults;\n    }\n\n    /// @dev Validates context for matchOrders. Succeeds or throws.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    function assertValidMatch(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder\n    )\n        internal\n        pure\n    {\n        // Make sure there is a profitable spread.\n        // There is a profitable spread iff the cost per unit bought (OrderA.MakerAmount/OrderA.TakerAmount) for each order is greater\n        // than the profit per unit sold of the matched order (OrderB.TakerAmount/OrderB.MakerAmount).\n        // This is satisfied by the equations below:\n        // <leftOrder.makerAssetAmount> / <leftOrder.takerAssetAmount> >= <rightOrder.takerAssetAmount> / <rightOrder.makerAssetAmount>\n        // AND\n        // <rightOrder.makerAssetAmount> / <rightOrder.takerAssetAmount> >= <leftOrder.takerAssetAmount> / <leftOrder.makerAssetAmount>\n        // These equations can be combined to get the following:\n        require(\n            safeMul(leftOrder.makerAssetAmount, rightOrder.makerAssetAmount) >=\n            safeMul(leftOrder.takerAssetAmount, rightOrder.takerAssetAmount),\n            NEGATIVE_SPREAD_REQUIRED\n        );\n    }\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        // We settle orders at the exchange rate of the right order.\n        // The amount saved by the left maker goes to the taker.\n        // Either the left or right order will be fully filled; possibly both.\n        // The left order is fully filled iff the right order can sell more than left can buy.\n        // That is: the amount required to fill the left order is less than or equal to\n        //          the amount we can spend from the right order:\n        //          <leftTakerAssetAmountRemaining> <= <rightTakerAssetAmountRemaining> * <rightMakerToTakerRatio>\n        //          <leftTakerAssetAmountRemaining> <= <rightTakerAssetAmountRemaining> * <rightOrder.makerAssetAmount> / <rightOrder.takerAssetAmount>\n        //          <leftTakerAssetAmountRemaining> * <rightOrder.takerAssetAmount> <= <rightTakerAssetAmountRemaining> * <rightOrder.makerAssetAmount>\n        uint256 leftTakerAssetAmountRemaining = safeSub(leftOrder.takerAssetAmount, leftOrderTakerAssetFilledAmount);\n        uint256 rightTakerAssetAmountRemaining = safeSub(rightOrder.takerAssetAmount, rightOrderTakerAssetFilledAmount);\n        uint256 leftTakerAssetFilledAmount;\n        uint256 rightTakerAssetFilledAmount;\n        if (\n            safeMul(leftTakerAssetAmountRemaining, rightOrder.takerAssetAmount) <=\n            safeMul(rightTakerAssetAmountRemaining, rightOrder.makerAssetAmount)\n        ) {\n            // Left order will be fully filled: maximally fill left\n            leftTakerAssetFilledAmount = leftTakerAssetAmountRemaining;\n\n            // The right order receives an amount proportional to how much was spent.\n            // TODO: Can we ensure rounding error is in the correct direction?\n            rightTakerAssetFilledAmount = getPartialAmount(\n                rightOrder.takerAssetAmount,\n                rightOrder.makerAssetAmount,\n                leftTakerAssetFilledAmount\n            );\n        } else {\n            // Right order will be fully filled: maximally fill right\n            rightTakerAssetFilledAmount = rightTakerAssetAmountRemaining;\n\n            // The left order receives an amount proportional to how much was spent.\n            // TODO: Can we ensure rounding error is in the correct direction?\n            leftTakerAssetFilledAmount = getPartialAmount(\n                rightOrder.makerAssetAmount,\n                rightOrder.takerAssetAmount,\n                rightTakerAssetFilledAmount\n            );\n        }\n\n        // Calculate fill results for left order\n        matchedFillResults.left = calculateFillResults(\n            leftOrder,\n            leftTakerAssetFilledAmount\n        );\n\n        // Calculate fill results for right order\n        matchedFillResults.right = calculateFillResults(\n            rightOrder,\n            rightTakerAssetFilledAmount\n        );\n\n        // Calculate amount given to taker\n        matchedFillResults.leftMakerAssetSpreadAmount = safeSub(\n            matchedFillResults.left.makerAssetFilledAmount,\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n\n        // Return fill results\n        return matchedFillResults;\n    }\n}\n",
		"current/protocol/Exchange/MixinSettlement.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/LibBytes/LibBytes.sol\";\nimport \"./libs/LibMath.sol\";\nimport \"./libs/LibFillResults.sol\";\nimport \"./libs/LibOrder.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"./mixins/MMatchOrders.sol\";\nimport \"./mixins/MSettlement.sol\";\nimport \"./mixins/MAssetProxyDispatcher.sol\";\n\ncontract MixinSettlement is\n    LibBytes,\n    LibMath,\n    LibExchangeErrors,\n    MMatchOrders,\n    MSettlement,\n    MAssetProxyDispatcher\n{\n    // ZRX address encoded as a byte array.\n    // This will be constant throughout the life of the Exchange contract,\n    // since ZRX will always be transferred via the ERC20 AssetProxy.\n    bytes internal ZRX_ASSET_DATA;\n    uint8 constant ZRX_PROXY_ID = 1;\n\n    /// TODO: _zrxAssetData should be a constant in production.\n    /// @dev Constructor sets the metadata that will be used for paying ZRX fees.\n    /// @param _zrxAssetData Byte array containing ERC20 proxy id concatenated with address of ZRX.\n    constructor (bytes memory _zrxAssetData)\n        public\n    {\n        ZRX_ASSET_DATA = _zrxAssetData;\n    }\n\n    /// @dev Settles an order by transferring assets between counterparties.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAddress Address selling takerAsset and buying makerAsset.\n    /// @param fillResults Amounts to be filled and fees paid by maker and taker.\n    function settleOrder(\n        LibOrder.Order memory order,\n        address takerAddress,\n        LibFillResults.FillResults memory fillResults\n    )\n        internal\n    {\n        uint8 makerAssetProxyId = uint8(popLastByte(order.makerAssetData));\n        uint8 takerAssetProxyId = uint8(popLastByte(order.takerAssetData));\n        bytes memory zrxAssetData = ZRX_ASSET_DATA;\n        dispatchTransferFrom(\n            order.makerAssetData,\n            makerAssetProxyId,\n            order.makerAddress,\n            takerAddress,\n            fillResults.makerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            order.takerAssetData,\n            takerAssetProxyId,\n            takerAddress,\n            order.makerAddress,\n            fillResults.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            zrxAssetData,\n            ZRX_PROXY_ID,\n            order.makerAddress,\n            order.feeRecipientAddress,\n            fillResults.makerFeePaid\n        );\n        dispatchTransferFrom(\n            zrxAssetData,\n            ZRX_PROXY_ID,\n            takerAddress,\n            order.feeRecipientAddress,\n            fillResults.takerFeePaid\n        );\n    }\n\n    /// @dev Settles matched order by transferring appropriate funds between order makers, taker, and fee recipient.\n    /// @param leftOrder First matched order.\n    /// @param rightOrder Second matched order.\n    /// @param takerAddress Address that matched the orders. The taker receives the spread between orders as profit.\n    /// @param matchedFillResults Struct holding amounts to transfer between makers, taker, and fee recipients.\n    function settleMatchedOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        address takerAddress,\n        LibFillResults.MatchedFillResults memory matchedFillResults\n    )\n        internal\n    {\n        uint8 leftMakerAssetProxyId = uint8(popLastByte(leftOrder.makerAssetData));\n        uint8 rightMakerAssetProxyId = uint8(popLastByte(rightOrder.makerAssetData));\n        bytes memory zrxAssetData = ZRX_ASSET_DATA;\n        // Order makers and taker\n        dispatchTransferFrom(\n            leftOrder.makerAssetData,\n            leftMakerAssetProxyId,\n            leftOrder.makerAddress,\n            rightOrder.makerAddress,\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            rightOrder.makerAssetData,\n            rightMakerAssetProxyId,\n            rightOrder.makerAddress,\n            leftOrder.makerAddress,\n            matchedFillResults.left.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            leftOrder.makerAssetData,\n            leftMakerAssetProxyId,\n            leftOrder.makerAddress,\n            takerAddress,\n            matchedFillResults.leftMakerAssetSpreadAmount\n        );\n\n        // Maker fees\n        dispatchTransferFrom(\n            zrxAssetData,\n            ZRX_PROXY_ID,\n            leftOrder.makerAddress,\n            leftOrder.feeRecipientAddress,\n            matchedFillResults.left.makerFeePaid\n        );\n        dispatchTransferFrom(\n            zrxAssetData,\n            ZRX_PROXY_ID,\n            rightOrder.makerAddress,\n            rightOrder.feeRecipientAddress,\n            matchedFillResults.right.makerFeePaid\n        );\n\n        // Taker fees\n        if (leftOrder.feeRecipientAddress == rightOrder.feeRecipientAddress) {\n            dispatchTransferFrom(\n                zrxAssetData,\n                ZRX_PROXY_ID,\n                takerAddress,\n                leftOrder.feeRecipientAddress,\n                safeAdd(\n                    matchedFillResults.left.takerFeePaid,\n                    matchedFillResults.right.takerFeePaid\n                )\n            );\n        } else {\n            dispatchTransferFrom(\n                zrxAssetData,\n                ZRX_PROXY_ID,\n                takerAddress,\n                leftOrder.feeRecipientAddress,\n                matchedFillResults.left.takerFeePaid\n            );\n            dispatchTransferFrom(\n                zrxAssetData,\n                ZRX_PROXY_ID,\n                takerAddress,\n                rightOrder.feeRecipientAddress,\n                matchedFillResults.right.takerFeePaid\n            );\n        }\n    }\n}\n",
		"current/protocol/Exchange/MixinSignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../../utils/LibBytes/LibBytes.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"./mixins/MSignatureValidator.sol\";\nimport \"./mixins/MTransactions.sol\";\nimport \"./interfaces/IWallet.sol\";\nimport \"./interfaces/IValidator.sol\";\n\ncontract MixinSignatureValidator is\n    LibBytes,\n    LibExchangeErrors,\n    MSignatureValidator,\n    MTransactions\n{\n    // Personal message headers\n    string constant ETH_PERSONAL_MESSAGE = \"\\x19Ethereum Signed Message:\\n32\";\n    string constant TREZOR_PERSONAL_MESSAGE = \"\\x19Ethereum Signed Message:\\n\\x41\";\n\n    // Mapping of hash => signer => signed\n    mapping (bytes32 => mapping (address => bool)) public preSigned;\n\n    // Mapping of signer => validator => approved\n    mapping (address => mapping (address => bool)) public allowedValidators;\n\n    /// @dev Approves a hash on-chain using any valid signature type.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param signer Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    function preSign(\n        bytes32 hash,\n        address signer,\n        bytes signature\n    )\n        external\n    {\n        require(\n            isValidSignature(hash, signer, signature),\n            INVALID_SIGNATURE\n        );\n        preSigned[hash][signer] = true;\n    }\n\n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validator Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validator,\n        bool approval\n    )\n        external\n    {\n        address signer = getCurrentContextAddress();\n        allowedValidators[signer][validator] = approval;\n    }\n\n    /// @dev Verifies that a hash has been signed by the given signer.\n    /// @param hash Any 32 byte hash.\n    /// @param signer Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return True if the address recovered from the provided signature matches the input signer address.\n    function isValidSignature(\n        bytes32 hash,\n        address signer,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid)\n    {\n        // TODO: Domain separation: make hash depend on role. (Taker sig should not be valid as maker sig, etc.)\n        require(\n            signature.length > 0,\n            LENGTH_GREATER_THAN_0_REQUIRED\n        );\n\n        // Pop last byte off of signature byte array.\n        SignatureType signatureType = SignatureType(uint8(popLastByte(signature)));\n\n        // Variables are not scoped in Solidity.\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        address recovered;\n\n        // Always illegal signature.\n        // This is always an implicit option since a signer can create a\n        // signature array with invalid type or length. We may as well make\n        // it an explicit option. This aids testing and analysis. It is\n        // also the initialization value for the enum type.\n        if (signatureType == SignatureType.Illegal) {\n            revert(SIGNATURE_ILLEGAL);\n\n        // Always invalid signature.\n        // Like Illegal, this is always implicitly available and therefore\n        // offered explicitly. It can be implicitly created by providing\n        // a correctly formatted but incorrect signature.\n        } else if (signatureType == SignatureType.Invalid) {\n            require(\n                signature.length == 0,\n                LENGTH_0_REQUIRED\n            );\n            isValid = false;\n            return isValid;\n\n        // Signature using EIP712\n        } else if (signatureType == SignatureType.EIP712) {\n            require(\n                signature.length == 65,\n                LENGTH_65_REQUIRED\n            );\n            v = uint8(signature[0]);\n            r = readBytes32(signature, 1);\n            s = readBytes32(signature, 33);\n            recovered = ecrecover(hash, v, r, s);\n            isValid = signer == recovered;\n            return isValid;\n\n        // Signed using web3.eth_sign\n        } else if (signatureType == SignatureType.EthSign) {\n            require(\n                signature.length == 65,\n                LENGTH_65_REQUIRED\n            );\n            v = uint8(signature[0]);\n            r = readBytes32(signature, 1);\n            s = readBytes32(signature, 33);\n            recovered = ecrecover(\n                keccak256(abi.encodePacked(ETH_PERSONAL_MESSAGE, hash)),\n                v,\n                r,\n                s\n            );\n            isValid = signer == recovered;\n            return isValid;\n\n        // Implicitly signed by caller.\n        // The signer has initiated the call. In the case of non-contract\n        // accounts it means the transaction itself was signed.\n        // Example: let's say for a particular operation three signatures\n        // A, B and C are required. To submit the transaction, A and B can\n        // give a signature to C, who can then submit the transaction using\n        // `Caller` for his own signature. Or A and C can sign and B can\n        // submit using `Caller`. Having `Caller` allows this flexibility.\n        } else if (signatureType == SignatureType.Caller) {\n            require(\n                signature.length == 0,\n                LENGTH_0_REQUIRED\n            );\n            isValid = signer == msg.sender;\n            return isValid;\n\n        // Signature verified by wallet contract.\n        // If used with an order, the maker of the order is the wallet contract.\n        } else if (signatureType == SignatureType.Wallet) {\n            isValid = IWallet(signer).isValidSignature(hash, signature);\n            return isValid;\n\n        // Signature verified by validator contract.\n        // If used with an order, the maker of the order can still be an EOA.\n        // A signature using this type should be encoded as:\n        // | Offset   | Length | Contents                        |\n        // | 0x00     | x      | Signature to validate           |\n        // | 0x00 + x | 20     | Address of validator contract   |\n        // | 0x14 + x | 1      | Signature type is always \"\\x06\" |\n        } else if (signatureType == SignatureType.Validator) {\n            // Pop last 20 bytes off of signature byte array.\n            address validator = popLast20Bytes(signature);\n            // Ensure signer has approved validator.\n            if (!allowedValidators[signer][validator]) {\n                return false;\n            }\n            isValid = IValidator(validator).isValidSignature(\n                hash,\n                signer,\n                signature\n            );\n            return isValid;\n\n        // Signer signed hash previously using the preSign function.\n        } else if (signatureType == SignatureType.PreSigned) {\n            isValid = preSigned[hash][signer];\n            return isValid;\n\n        // Signature from Trezor hardware wallet.\n        // It differs from web3.eth_sign in the encoding of message length\n        // (Bitcoin varint encoding vs ascii-decimal, the latter is not\n        // self-terminating which leads to ambiguities).\n        // See also:\n        // https://en.bitcoin.it/wiki/Protocol_documentation#Variable_length_integer\n        // https://github.com/trezor/trezor-mcu/blob/master/firmware/ethereum.c#L602\n        // https://github.com/trezor/trezor-mcu/blob/master/firmware/crypto.c#L36\n        } else if (signatureType == SignatureType.Trezor) {\n            require(\n                signature.length == 65,\n                LENGTH_65_REQUIRED\n            );\n            v = uint8(signature[0]);\n            r = readBytes32(signature, 1);\n            s = readBytes32(signature, 33);\n            recovered = ecrecover(\n                keccak256(abi.encodePacked(TREZOR_PERSONAL_MESSAGE, hash)),\n                v,\n                r,\n                s\n            );\n            isValid = signer == recovered;\n            return isValid;\n\n        // Signer signed hash previously using the preSign function\n        } else if (signatureType == SignatureType.PreSigned) {\n            isValid = preSigned[hash][signer];\n            return isValid;\n        }\n\n        // Anything else is illegal (We do not return false because\n        // the signature may actually be valid, just not in a format\n        // that we currently support. In this case returning false\n        // may lead the caller to incorrectly believe that the\n        // signature was invalid.)\n        revert(SIGNATURE_UNSUPPORTED);\n    }\n}\n",
		"current/protocol/Exchange/MixinTransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\n\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"./mixins/MSignatureValidator.sol\";\nimport \"./mixins/MTransactions.sol\";\n\ncontract MixinTransactions is\n    LibExchangeErrors,\n    MSignatureValidator,\n    MTransactions\n{\n\n    // Mapping of transaction hash => executed\n    // This prevents transactions from being executed more than once.\n    mapping (bytes32 => bool) public transactions;\n\n    // Address of current transaction signer\n    address public currentContextAddress;\n\n    /// @dev Executes an exchange method call in the context of signer.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signer Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @param signature Proof of signer transaction by signer.\n    function executeTransaction(\n        uint256 salt,\n        address signer,\n        bytes data,\n        bytes signature\n    )\n        external\n    {\n        // Prevent reentrancy\n        require(\n            currentContextAddress == address(0),\n            REENTRANCY_ILLEGAL\n        );\n\n        // Calculate transaction hash\n        bytes32 transactionHash = keccak256(abi.encodePacked(\n            address(this),\n            signer,\n            salt,\n            data\n        ));\n\n        // Validate transaction has not been executed\n        require(\n            !transactions[transactionHash],\n            INVALID_TX_HASH\n        );\n\n        // Transaction always valid if signer is sender of transaction\n        if (signer != msg.sender) {\n            // Validate signature\n            require(\n                isValidSignature(transactionHash, signer, signature),\n                INVALID_TX_SIGNATURE\n            );\n\n            // Set the current transaction signer\n            currentContextAddress = signer;\n        }\n\n        // Execute transaction\n        transactions[transactionHash] = true;\n        require(\n            address(this).delegatecall(data),\n            FAILED_EXECUTION\n        );\n\n        // Reset current transaction signer\n        // TODO: Check if gas is paid when currentContextAddress is already 0.\n        currentContextAddress = address(0);\n    }\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function getCurrentContextAddress()\n        internal\n        view\n        returns (address)\n    {\n        address contextAddress = currentContextAddress == address(0) ? msg.sender : currentContextAddress;\n        return contextAddress;\n    }\n}\n",
		"current/protocol/Exchange/MixinWrapperFunctions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./libs/LibMath.sol\";\nimport \"./libs/LibOrder.sol\";\nimport \"./libs/LibFillResults.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"./mixins/MExchangeCore.sol\";\n\ncontract MixinWrapperFunctions is\n    LibMath,\n    LibFillResults,\n    LibExchangeErrors,\n    MExchangeCore\n{\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (FillResults memory fillResults)\n    {\n        fillResults = fillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        require(\n            fillResults.takerAssetFilledAmount == takerAssetFillAmount,\n            COMPLETE_FILL_FAILED\n        );\n        return fillResults;\n    }\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (FillResults memory fillResults)\n    {\n        // We need to call MExchangeCore.fillOrder using a delegatecall in\n        // assembly so that we can intercept a call that throws. For this, we\n        // need the input encoded in memory in the Ethereum ABIv2 format [1].\n\n        // | Area     | Offset | Length  | Contents                                    |\n        // | -------- |--------|---------|-------------------------------------------- |\n        // | Header   | 0x00   | 4       | function selector                           |\n        // | Params   |        | 3 * 32  | function parameters:                        |\n        // |          | 0x00   |         |   1. offset to order (*)                    |\n        // |          | 0x20   |         |   2. takerAssetFillAmount                   |\n        // |          | 0x40   |         |   3. offset to signature (*)                |\n        // | Data     |        | 12 * 32 | order:                                      |\n        // |          | 0x000  |         |   1.  senderAddress                         |\n        // |          | 0x020  |         |   2.  makerAddress                          |\n        // |          | 0x040  |         |   3.  takerAddress                          |\n        // |          | 0x060  |         |   4.  feeRecipientAddress                   |\n        // |          | 0x080  |         |   5.  makerAssetAmount                      |\n        // |          | 0x0A0  |         |   6.  takerAssetAmount                      |\n        // |          | 0x0C0  |         |   7.  makerFeeAmount                        |\n        // |          | 0x0E0  |         |   8.  takerFeeAmount                        |\n        // |          | 0x100  |         |   9.  expirationTimeSeconds                 |\n        // |          | 0x120  |         |   10. salt                                  |\n        // |          | 0x140  |         |   11. Offset to makerAssetData (*)          |\n        // |          | 0x160  |         |   12. Offset to takerAssetData (*)          |\n        // |          | 0x180  | 32      | makerAssetData Length                       |\n        // |          | 0x1A0  | **      | makerAssetData Contents                     |\n        // |          | 0x1C0  | 32      | takerAssetData Length                       |\n        // |          | 0x1E0  | **      | takerAssetData Contents                     |\n        // |          | 0x200  | 32      | signature Length                            |\n        // |          | 0x220  | **      | signature Contents                          |\n\n        // * Offsets are calculated from the beginning of the current area: Header, Params, Data:\n        //     An offset stored in the Params area is calculated from the beginning of the Params section.\n        //     An offset stored in the Data area is calculated from the beginning of the Data section.\n\n        // ** The length of dynamic array contents are stored in the field immediately preceeding the contents.\n\n        // [1]: https://solidity.readthedocs.io/en/develop/abi-spec.html\n\n        bytes4 fillOrderSelector = this.fillOrder.selector;\n\n        assembly {\n\n            // Areas below may use the following variables:\n            //   1. <area>Start   -- Start of this area in memory\n            //   2. <area>End     -- End of this area in memory. This value may\n            //                       be precomputed (before writing contents),\n            //                       or it may be computed as contents are written.\n            //   3. <area>Offset  -- Current offset into area. If an area's End\n            //                       is precomputed, this variable tracks the\n            //                       offsets of contents as they are written.\n\n            /////// Setup Header Area ///////\n            // Load free memory pointer\n            let headerAreaStart := mload(0x40)\n            mstore(headerAreaStart, fillOrderSelector)\n            let headerAreaEnd := add(headerAreaStart, 0x4)\n\n            /////// Setup Params Area ///////\n            // This area is preallocated and written to later.\n            // This is because we need to fill in offsets that have not yet been calculated.\n            let paramsAreaStart := headerAreaEnd\n            let paramsAreaEnd := add(paramsAreaStart, 0x60)\n            let paramsAreaOffset := paramsAreaStart\n\n            /////// Setup Data Area ///////\n            let dataAreaStart := paramsAreaEnd\n            let dataAreaEnd := dataAreaStart\n\n            // Offset from the source data we're reading from\n            let sourceOffset := order\n            // arrayLenBytes and arrayLenWords track the length of a dynamically-allocated bytes array.\n            let arrayLenBytes := 0\n            let arrayLenWords := 0\n\n            /////// Write order Struct ///////\n            // Write memory location of Order, relative to the start of the\n            // parameter list, then increment the paramsAreaOffset respectively.\n            mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n            paramsAreaOffset := add(paramsAreaOffset, 0x20)\n\n            // Write values for each field in the order\n            // It would be nice to use a loop, but we save on gas by writing\n            // the stores sequentially.\n            mstore(dataAreaEnd, mload(sourceOffset))                            // makerAddress\n            mstore(add(dataAreaEnd, 0x20), mload(add(sourceOffset, 0x20)))      // takerAddress\n            mstore(add(dataAreaEnd, 0x40), mload(add(sourceOffset, 0x40)))      // feeRecipientAddress\n            mstore(add(dataAreaEnd, 0x60), mload(add(sourceOffset, 0x60)))      // senderAddress\n            mstore(add(dataAreaEnd, 0x80), mload(add(sourceOffset, 0x80)))      // makerAssetAmount\n            mstore(add(dataAreaEnd, 0xA0), mload(add(sourceOffset, 0xA0)))      // takerAssetAmount\n            mstore(add(dataAreaEnd, 0xC0), mload(add(sourceOffset, 0xC0)))      // makerFeeAmount\n            mstore(add(dataAreaEnd, 0xE0), mload(add(sourceOffset, 0xE0)))      // takerFeeAmount\n            mstore(add(dataAreaEnd, 0x100), mload(add(sourceOffset, 0x100)))    // expirationTimeSeconds\n            mstore(add(dataAreaEnd, 0x120), mload(add(sourceOffset, 0x120)))    // salt\n            mstore(add(dataAreaEnd, 0x140), mload(add(sourceOffset, 0x140)))    // Offset to makerAssetData\n            mstore(add(dataAreaEnd, 0x160), mload(add(sourceOffset, 0x160)))    // Offset to takerAssetData\n            dataAreaEnd := add(dataAreaEnd, 0x180)\n            sourceOffset := add(sourceOffset, 0x180)\n\n            // Write offset to <order.makerAssetData>\n            mstore(add(dataAreaStart, mul(10, 0x20)), sub(dataAreaEnd, dataAreaStart))\n\n            // Calculate length of <order.makerAssetData>\n            sourceOffset := mload(add(order, 0x140)) // makerAssetData\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of <order.makerAssetData>\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of <order.makerAssetData>\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            // Write offset to <order.takerAssetData>\n            mstore(add(dataAreaStart, mul(11, 0x20)), sub(dataAreaEnd, dataAreaStart))\n\n            // Calculate length of <order.takerAssetData>\n            sourceOffset := mload(add(order, 0x160)) // takerAssetData\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of <order.takerAssetData>\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of  <order.takerAssetData>\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            /////// Write takerAssetFillAmount ///////\n            mstore(paramsAreaOffset, takerAssetFillAmount)\n            paramsAreaOffset := add(paramsAreaOffset, 0x20)\n\n            /////// Write signature ///////\n            // Write offset to paramsArea\n            mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n\n            // Calculate length of signature\n            sourceOffset := signature\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of signature\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of signature\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            // Execute delegatecall\n            let success := delegatecall(\n                gas,                                // forward all gas, TODO: look into gas consumption of assert/throw\n                address,                            // call address of this contract\n                headerAreaStart,                    // pointer to start of input\n                sub(dataAreaEnd, headerAreaStart),  // length of input\n                headerAreaStart,                    // write output over input\n                128                                 // output size is 128 bytes\n            )\n            switch success\n            case 0 {\n                mstore(fillResults, 0)\n                mstore(add(fillResults, 32), 0)\n                mstore(add(fillResults, 64), 0)\n                mstore(add(fillResults, 96), 0)\n            }\n            case 1 {\n                mstore(fillResults, mload(headerAreaStart))\n                mstore(add(fillResults, 32), mload(add(headerAreaStart, 32)))\n                mstore(add(fillResults, 64), mload(add(headerAreaStart, 64)))\n                mstore(add(fillResults, 96), mload(add(headerAreaStart, 96)))\n            }\n        }\n        return fillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    ///         NOTE: makerAssetFilledAmount and takerAssetFilledAmount may include amounts filled of different assets.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            FillResults memory singleFillResults = fillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n            addFillResults(totalFillResults, singleFillResults);\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrKill.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    ///         NOTE: makerAssetFilledAmount and takerAssetFilledAmount may include amounts filled of different assets.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            FillResults memory singleFillResults = fillOrKillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n            addFillResults(totalFillResults, singleFillResults);\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    ///         NOTE: makerAssetFilledAmount and takerAssetFilledAmount may include amounts filled of different assets.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            FillResults memory singleFillResults = fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n            addFillResults(totalFillResults, singleFillResults);\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrders(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory takerAssetData = orders[0].takerAssetData;\n    \n        for (uint256 i = 0; i < orders.length; i++) {\n\n            // We assume that asset being sold by taker is the same for each order.\n            // Rather than passing this in as calldata, we use the takerAssetData from the first order in all later orders.\n            orders[i].takerAssetData = takerAssetData;\n\n            // Calculate the remaining amount of takerAsset to sell\n            uint256 remainingTakerAssetFillAmount = safeSub(takerAssetFillAmount, totalFillResults.takerAssetFilledAmount);\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrder(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // HACK: the proxyId is \"popped\" from the byte array before a fill is settled\n            // by subtracting from the length of the array. Since the popped byte is \n            // still in memory, we can \"unpop\" it by incrementing the length of the byte array.\n            assembly {\n                let len := mload(takerAssetData)\n                mstore(takerAssetData, add(len, 1))\n            }\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of takerAsset has been sold\n            if (totalFillResults.takerAssetFilledAmount == takerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory takerAssetData = orders[0].takerAssetData;\n\n        for (uint256 i = 0; i < orders.length; i++) {\n\n            // We assume that asset being sold by taker is the same for each order.\n            // Rather than passing this in as calldata, we use the takerAssetData from the first order in all later orders.\n            orders[i].takerAssetData = takerAssetData;\n\n            // Calculate the remaining amount of takerAsset to sell\n            uint256 remainingTakerAssetFillAmount = safeSub(takerAssetFillAmount, totalFillResults.takerAssetFilledAmount);\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderNoThrow(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of takerAsset has been sold\n            if (totalFillResults.takerAssetFilledAmount == takerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrders(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory makerAssetData = orders[0].makerAssetData;\n\n        for (uint256 i = 0; i < orders.length; i++) {\n\n            // We assume that asset being bought by taker is the same for each order.\n            // Rather than passing this in as calldata, we copy the makerAssetData from the first order onto all later orders.\n            orders[i].makerAssetData = makerAssetData;\n\n            // Calculate the remaining amount of makerAsset to buy\n            uint256 remainingMakerAssetFillAmount = safeSub(makerAssetFillAmount, totalFillResults.makerAssetFilledAmount);\n\n            // Convert the remaining amount of makerAsset to buy into remaining amount\n            // of takerAsset to sell, assuming entire amount can be sold in the current order\n            uint256 remainingTakerAssetFillAmount = getPartialAmount(\n                orders[i].takerAssetAmount,\n                orders[i].makerAssetAmount,\n                remainingMakerAssetFillAmount\n            );\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrder(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // HACK: the proxyId is \"popped\" from the byte array before a fill is settled\n            // by subtracting from the length of the array. Since the popped byte is \n            // still in memory, we can \"unpop\" it by incrementing the length of the byte array.\n            assembly {\n                let len := mload(makerAssetData)\n                mstore(makerAssetData, add(len, 1))\n            }\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of makerAsset has been bought\n            if (totalFillResults.makerAssetFilledAmount == makerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory makerAssetData = orders[0].makerAssetData;\n\n        for (uint256 i = 0; i < orders.length; i++) {\n\n            // We assume that asset being bought by taker is the same for each order.\n            // Rather than passing this in as calldata, we copy the makerAssetData from the first order onto all later orders.\n            orders[i].makerAssetData = makerAssetData;\n\n            // Calculate the remaining amount of makerAsset to buy\n            uint256 remainingMakerAssetFillAmount = safeSub(makerAssetFillAmount, totalFillResults.makerAssetFilledAmount);\n\n            // Convert the remaining amount of makerAsset to buy into remaining amount\n            // of takerAsset to sell, assuming entire amount can be sold in the current order\n            uint256 remainingTakerAssetFillAmount = getPartialAmount(\n                orders[i].takerAssetAmount,\n                orders[i].makerAssetAmount,\n                remainingMakerAssetFillAmount\n            );\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderNoThrow(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of makerAsset has been bought\n            if (totalFillResults.makerAssetFilledAmount == makerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously cancels multiple orders in a single transaction.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            cancelOrder(orders[i]);\n        }\n    }\n}\n",
		"current/protocol/Exchange/interfaces/IAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract IAssetProxyDispatcher {\n\n    /// @dev Registers an asset proxy to an asset proxy id.\n    ///      An id can only be assigned to a single proxy at a given time.\n    /// @param assetProxyId Id to register`newAssetProxy` under.\n    /// @param newAssetProxy Address of new asset proxy to register, or 0x0 to unset assetProxyId.\n    /// @param oldAssetProxy Existing asset proxy to overwrite, or 0x0 if assetProxyId is currently unused.\n    function registerAssetProxy(\n        uint8 assetProxyId,\n        address newAssetProxy,\n        address oldAssetProxy\n    )\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(uint8 assetProxyId)\n        external\n        view\n        returns (address);\n}\n",
		"current/protocol/Exchange/interfaces/IExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\n\ncontract IExchangeCore {\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrder(LibOrder.Order memory order)\n        public;\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n}\n",
		"current/protocol/Exchange/interfaces/IMatchOrders.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\n\ncontract IMatchOrders {\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    /// TODO: Make this function external once supported by Solidity (See Solidity Issues #3199, #1603)\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n",
		"current/protocol/Exchange/interfaces/ISignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract ISignatureValidator {\n\n    /// @dev Approves a hash on-chain using any valid signature type.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param signer Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    function preSign(\n        bytes32 hash,\n        address signer,\n        bytes signature\n    )\n        external;\n    \n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validator Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validator,\n        bool approval\n    )\n        external;\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signer Address of signer.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        address signer,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n}\n",
		"current/protocol/Exchange/interfaces/ITransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\n\ncontract ITransactions {\n\n    /// @dev Executes an exchange method call in the context of signer.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signer Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @param signature Proof of signer transaction by signer.\n    function executeTransaction(\n        uint256 salt,\n        address signer,\n        bytes data,\n        bytes signature\n    )\n        external;\n}\n",
		"current/protocol/Exchange/interfaces/IValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.23;\n\ncontract IValidator {\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signer Address that should have signed the given hash.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        address signer,\n        bytes signature\n    )\n        external\n        view\n        returns (bool isValid);\n}\n",
		"current/protocol/Exchange/interfaces/IWallet.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract IWallet {\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        bytes signature\n    )\n        external\n        view\n        returns (bool isValid);\n}\n",
		"current/protocol/Exchange/libs/LibExchangeErrors.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibExchangeErrors {\n    /// Order validation errors ///\n    string constant ORDER_UNFILLABLE = \"ORDER_UNFILLABLE\";                  // Order cannot be filled.\n    string constant INVALID_MAKER = \"INVALID_MAKER\";                        // Invalid makerAddress.\n    string constant INVALID_TAKER = \"INVALID_TAKER\";                        // Invalid takerAddress.\n    string constant INVALID_SENDER = \"INVALID_SENDER\";                      // Invalid `msg.sender`.\n    string constant INVALID_ORDER_SIGNATURE = \"INVALID_ORDER_SIGNATURE\";    // Signature validation failed. \n    \n    /// fillOrder validation errors ///\n    string constant INVALID_TAKER_AMOUNT = \"INVALID_TAKER_AMOUNT\";          // takerAssetFillAmount cannot equal 0.\n    string constant ROUNDING_ERROR = \"ROUNDING_ERROR\";                      // Rounding error greater than 0.1% of takerAssetFillAmount. \n    \n    /// Signature validation errors ///\n    string constant INVALID_SIGNATURE = \"INVALID_SIGNATURE\";                // Signature validation failed. \n    string constant SIGNATURE_ILLEGAL = \"SIGNATURE_ILLEGAL\";                // Signature type is illegal.\n    string constant SIGNATURE_UNSUPPORTED = \"SIGNATURE_UNSUPPORTED\";        // Signature type unsupported.\n    \n    /// cancelOrdersUptTo errors ///\n    string constant INVALID_NEW_ORDER_EPOCH = \"INVALID_NEW_ORDER_EPOCH\";    // Specified salt must be greater than or equal to existing orderEpoch.\n\n    /// fillOrKillOrder errors ///\n    string constant COMPLETE_FILL_FAILED = \"COMPLETE_FILL_FAILED\";          // Desired takerAssetFillAmount could not be completely filled. \n\n    /// matchOrders errors ///\n    string constant NEGATIVE_SPREAD_REQUIRED = \"NEGATIVE_SPREAD_REQUIRED\";  // Matched orders must have a negative spread.\n\n    /// Transaction errors ///\n    string constant REENTRANCY_ILLEGAL = \"REENTRANCY_ILLEGAL\";              // Recursive reentrancy is not allowed. \n    string constant INVALID_TX_HASH = \"INVALID_TX_HASH\";                    // Transaction has already been executed. \n    string constant INVALID_TX_SIGNATURE = \"INVALID_TX_SIGNATURE\";          // Signature validation failed. \n    string constant FAILED_EXECUTION = \"FAILED_EXECUTION\";                  // Transaction execution failed. \n    \n    /// registerAssetProxy errors ///\n    string constant ASSET_PROXY_MISMATCH = \"ASSET_PROXY_MISMATCH\";          // oldAssetProxy proxy does not match currentAssetProxy. \n    string constant ASSET_PROXY_ID_MISMATCH = \"ASSET_PROXY_ID_MISMATCH\";    // newAssetProxyId does not match given assetProxyId.\n\n    /// Length validation errors ///\n    string constant LENGTH_GREATER_THAN_0_REQUIRED = \"LENGTH_GREATER_THAN_0_REQUIRED\";  // Byte array must have a length greater than 0.\n    string constant LENGTH_0_REQUIRED = \"LENGTH_1_REQUIRED\";                // Byte array must have a length of 1.\n    string constant LENGTH_65_REQUIRED = \"LENGTH_66_REQUIRED\";              // Byte array must have a length of 66.\n}\n",
		"current/protocol/Exchange/libs/LibFillResults.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../../../utils/SafeMath/SafeMath.sol\";\n\ncontract LibFillResults is\n    SafeMath\n{\n\n    struct FillResults {\n        uint256 makerAssetFilledAmount;\n        uint256 takerAssetFilledAmount;\n        uint256 makerFeePaid;\n        uint256 takerFeePaid;\n    }\n\n    struct MatchedFillResults {\n        FillResults left;\n        FillResults right;\n        uint256 leftMakerAssetSpreadAmount;\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    ///      Modifies the first FillResults instance specified.\n    /// @param totalFillResults Fill results instance that will be added onto.\n    /// @param singleFillResults Fill results instance that will be added to totalFillResults.\n    function addFillResults(FillResults memory totalFillResults, FillResults memory singleFillResults)\n        internal\n        pure\n    {\n        totalFillResults.makerAssetFilledAmount = safeAdd(totalFillResults.makerAssetFilledAmount, singleFillResults.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = safeAdd(totalFillResults.takerAssetFilledAmount, singleFillResults.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = safeAdd(totalFillResults.makerFeePaid, singleFillResults.makerFeePaid);\n        totalFillResults.takerFeePaid = safeAdd(totalFillResults.takerFeePaid, singleFillResults.takerFeePaid);\n    }\n}\n",
		"current/protocol/Exchange/libs/LibMath.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../../../utils/SafeMath/SafeMath.sol\";\n\ncontract LibMath is\n    SafeMath\n{\n    string constant ROUNDING_ERROR_ON_PARTIAL_AMOUNT = \"A rounding error occurred when calculating partial transfer amounts.\";\n\n    /// @dev Calculates partial value given a numerator and denominator.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target.\n    function getPartialAmount(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target)\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = safeDiv(\n            safeMul(numerator, target),\n            denominator\n        );\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error > 0.1%.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target)\n        internal\n        pure\n        returns (bool isError)\n    {\n        uint256 remainder = mulmod(target, numerator, denominator);\n        if (remainder == 0) {\n            return false; // No rounding error.\n        }\n\n        uint256 errPercentageTimes1000000 = safeDiv(\n            safeMul(remainder, 1000000),\n            safeMul(numerator, target)\n        );\n        isError = errPercentageTimes1000000 > 1000;\n        return isError;\n    }\n}\n",
		"current/protocol/Exchange/libs/LibOrder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibOrder {\n\n    bytes32 constant DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"DomainSeparator(address contract)\"\n    ));\n\n    bytes32 constant ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"Order(\",\n        \"address makerAddress,\",\n        \"address takerAddress,\",\n        \"address feeRecipientAddress,\",\n        \"address senderAddress,\",\n        \"uint256 makerAssetAmount,\",\n        \"uint256 takerAssetAmount,\",\n        \"uint256 makerFee,\",\n        \"uint256 takerFee,\",\n        \"uint256 expirationTimeSeconds,\",\n        \"uint256 salt,\",\n        \"bytes makerAssetData,\",\n        \"bytes takerAssetData,\",\n        \")\"\n    ));\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's state is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    struct Order {\n        address makerAddress;\n        address takerAddress;\n        address feeRecipientAddress;\n        address senderAddress;\n        uint256 makerAssetAmount;\n        uint256 takerAssetAmount;\n        uint256 makerFee;\n        uint256 takerFee;\n        uint256 expirationTimeSeconds;\n        uint256 salt;\n        bytes makerAssetData;\n        bytes takerAssetData;\n    }\n\n    struct OrderInfo {\n        // See LibStatus for a complete description of order statuses\n        uint8 orderStatus;\n        // Keccak-256 EIP712 hash of the order\n        bytes32 orderHash;\n        // Amount of order that has been filled\n        uint256 orderTakerAssetFilledAmount;\n    }\n\n    /// @dev Calculates Keccak-256 hash of the order.\n    /// @param order The order structure.\n    /// @return Keccak-256 EIP712 hash of the order.\n    function getOrderHash(Order memory order)\n        internal\n        view\n        returns (bytes32 orderHash)\n    {\n        // TODO: EIP712 is not finalized yet\n        // Source: https://github.com/ethereum/EIPs/pull/712\n        orderHash = keccak256(abi.encodePacked(\n            DOMAIN_SEPARATOR_SCHEMA_HASH,\n            keccak256(abi.encodePacked(address(this))),\n            ORDER_SCHEMA_HASH,\n            keccak256(abi.encodePacked(\n                order.makerAddress,\n                order.takerAddress,\n                order.feeRecipientAddress,\n                order.senderAddress,\n                order.makerAssetAmount,\n                order.takerAssetAmount,\n                order.makerFee,\n                order.takerFee,\n                order.expirationTimeSeconds,\n                order.salt,\n                keccak256(abi.encodePacked(order.makerAssetData)),\n                keccak256(abi.encodePacked(order.takerAssetData))\n            ))\n        ));\n        return orderHash;\n    }\n}\n",
		"current/protocol/Exchange/mixins/MAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IAssetProxyDispatcher.sol\";\n\ncontract MAssetProxyDispatcher is\n    IAssetProxyDispatcher\n{\n\n    // Logs registration of new asset proxy\n    event AssetProxySet(\n        uint8 id,\n        address newAssetProxy,\n        address oldAssetProxy\n    );\n\n    /// @dev Forwards arguments to assetProxy and calls `transferFrom`. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param assetProxyId Id of assetProxy to dispach to.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param amount Amount of token to transfer.\n    function dispatchTransferFrom(\n        bytes memory assetData,\n        uint8 assetProxyId,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal;\n}\n",
		"current/protocol/Exchange/mixins/MExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\nimport \"../interfaces/IExchangeCore.sol\";\n\ncontract MExchangeCore is\n    IExchangeCore\n{\n    // Fill event is emitted whenever an order is filled.\n    event Fill(\n        address indexed makerAddress,\n        address takerAddress,\n        address indexed feeRecipientAddress,\n        uint256 makerAssetFilledAmount,\n        uint256 takerAssetFilledAmount,\n        uint256 makerFeePaid,\n        uint256 takerFeePaid,\n        bytes32 indexed orderHash,\n        bytes makerAssetData,\n        bytes takerAssetData\n    );\n\n    // Cancel event is emitted whenever an individual order is cancelled.\n    event Cancel(\n        address indexed makerAddress,\n        address indexed feeRecipientAddress,\n        bytes32 indexed orderHash,\n        bytes makerAssetData,\n        bytes takerAssetData\n    );\n\n    // CancelUpTo event is emitted whenever `cancelOrdersUpTo` is executed succesfully.\n    event CancelUpTo(\n        address indexed makerAddress,\n        address indexed senderAddress,\n        uint256 orderEpoch\n    );\n\n    /// @dev Updates state with results of a fill order.\n    /// @param order that was filled.\n    /// @param takerAddress Address of taker who filled the order.\n    /// @param orderTakerAssetFilledAmount Amount of order already filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function updateFilledState(\n        LibOrder.Order memory order,\n        address takerAddress,\n        bytes32 orderHash,\n        uint256 orderTakerAssetFilledAmount,\n        LibFillResults.FillResults memory fillResults\n    )\n        internal;\n\n    /// @dev Updates state with results of cancelling an order.\n    ///      State is only updated if the order is currently fillable.\n    ///      Otherwise, updating state would have no effect.\n    /// @param order that was cancelled.\n    /// @param orderHash Hash of order that was cancelled.\n    function updateCancelledState(\n        LibOrder.Order memory order,\n        bytes32 orderHash\n    )\n        internal;\n\n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderInfo Status, orderHash, and amount already filled of order.\n    /// @param takerAddress Address of order taker.\n    /// @param takerAssetFillAmount Desired amount of order to fill by taker.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param signature Proof that the orders was created by its maker.\n    function assertValidFill(\n        LibOrder.Order memory order,\n        LibOrder.OrderInfo memory orderInfo,\n        address takerAddress,\n        uint256 takerAssetFillAmount,\n        uint256 takerAssetFilledAmount,\n        bytes memory signature\n    )\n        internal\n        view;\n\n\n    /// @dev Validates context for cancelOrder. Succeeds or throws.\n    /// @param order to be cancelled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    function assertValidCancel(\n        LibOrder.Order memory order,\n        LibOrder.OrderInfo memory orderInfo\n    )\n        internal\n        view;\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        LibOrder.Order memory order,\n        uint256 takerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (LibFillResults.FillResults memory fillResults);\n}\n",
		"current/protocol/Exchange/mixins/MMatchOrders.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\nimport \"../interfaces/IMatchOrders.sol\";\n\ncontract MMatchOrders is\n    IMatchOrders\n{\n\n    /// @dev Validates context for matchOrders. Succeeds or throws.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    function assertValidMatch(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder\n    )\n        internal\n        pure;\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n",
		"current/protocol/Exchange/mixins/MSettlement.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\n\ncontract MSettlement {\n\n    /// @dev Settles an order by transferring assets between counterparties.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAddress Address selling takerAsset and buying makerAsset.\n    /// @param fillResults Amounts to be filled and fees paid by maker and taker.\n    function settleOrder(\n        LibOrder.Order memory order,\n        address takerAddress,\n        LibFillResults.FillResults memory fillResults\n    )\n        internal;\n\n    /// @dev Settles matched order by transferring appropriate funds between order makers, taker, and fee recipient.\n    /// @param leftOrder First matched order.\n    /// @param rightOrder Second matched order.\n    /// @param takerAddress Address that matched the orders. The taker receives the spread between orders as profit.\n    /// @param matchedFillResults Struct holding amounts to transfer between makers, taker, and fee recipients.\n    function settleMatchedOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        address takerAddress,\n        LibFillResults.MatchedFillResults memory matchedFillResults\n    )\n        internal;\n}\n",
		"current/protocol/Exchange/mixins/MSignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../interfaces/ISignatureValidator.sol\";\n\ncontract MSignatureValidator is\n    ISignatureValidator\n{\n    // Allowed signature types.\n    enum SignatureType {\n        Illegal,    // 0x00, default value\n        Invalid,    // 0x01\n        EIP712,     // 0x02\n        EthSign,    // 0x03\n        Caller,     // 0x04\n        Wallet,     // 0x05\n        Validator,  // 0x06\n        PreSigned,  // 0x07\n        Trezor      // 0x08\n    }\n}\n",
		"current/protocol/Exchange/mixins/MTransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\n\nimport \"../interfaces/ITransactions.sol\";\n\ncontract MTransactions is\n    ITransactions\n{\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function getCurrentContextAddress()\n        internal\n        view\n        returns (address);\n}\n",
		"current/utils/LibBytes/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../LibMem/LibMem.sol\";\n\ncontract LibBytes is\n    LibMem\n{\n\n    // Revert reasons\n    string constant GREATER_THAN_ZERO_LENGTH_REQUIRED = \"GREATER_THAN_ZERO_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\";\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            GREATER_THAN_ZERO_LENGTH_REQUIRED\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(mload(add(b, index)), 0xffffffffffffffffffffffff0000000000000000000000000000000000000000)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        return uint256(readBytes32(b, index));\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads the first 4 bytes from a byte array of arbitrary length.\n    /// @param b Byte array to read first 4 bytes from.\n    /// @return First 4 bytes of data.\n    function readFirst4(bytes memory b)\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= 4,\n            GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\n        );\n        assembly {\n            result := mload(add(b, 32))\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytes(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\n        );\n\n        // Allocate memory and copy value to result\n        result = new bytes(nestedBytesLength);\n        memCopy(\n            getMemAddress(result) + 32, // +32 skips array length\n            getMemAddress(b) + index + 32,\n            nestedBytesLength\n        );\n\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytes(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 /* 32 bytes to store length */ + input.length,\n            GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            getMemAddress(b) + 32 + index,  // +32 to skip length of <b>\n            getMemAddress(input),           // includes length of <input>\n            input.length + 32               // +32 bytes to store <input> length\n        );\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function areBytesEqual(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        assembly {\n            // Get the number of words occupied by <lhs>\n            let lenFullWords := div(add(mload(lhs), 0x1F), 0x20)\n\n            // Add 1 to the number of words, to account for the length field\n            lenFullWords := add(lenFullWords, 0x1)\n\n            // Test equality word-by-word.\n            // Terminates early if there is a mismatch.\n            for {let i := 0} lt(i, lenFullWords) {i := add(i, 1)} {\n                let lhsWord := mload(add(lhs, mul(i, 0x20)))\n                let rhsWord := mload(add(rhs, mul(i, 0x20)))\n                equal := eq(lhsWord, rhsWord)\n                if eq(equal, 0) {\n                    // Break\n                    i := lenFullWords\n                }\n            }\n       }\n\n       return equal;\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function deepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        internal\n        pure\n    {\n        uint256 sourceLen = source.length;\n        // Dest length must be >= source length, or some bytes would not be copied.\n        require(\n            dest.length >= sourceLen,\n            GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\n        );\n        memCopy(\n            getMemAddress(dest) + 32,    // +32 to skip length of <dest>\n            getMemAddress(source) + 32,  // +32 to skip length of <source>\n            sourceLen\n        );\n    }\n}\n",
		"current/utils/LibMem/LibMem.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibMem\n{\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array.\n    function getMemAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n                    \n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n                    \n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n}\n",
		"current/utils/Ownable/IOwnable.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\n\ncontract IOwnable {\n    function transferOwnership(address newOwner)\n        public;\n}\n",
		"current/utils/Ownable/Ownable.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\n\nimport \"./IOwnable.sol\";\n\ncontract Ownable is IOwnable {\n    address public owner;\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"Only contract owner is allowed to call this method.\"\n        );\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n",
		"current/utils/SafeMath/SafeMath.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\ncontract SafeMath {\n    function safeMul(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint c = a / b;\n        return c;\n    }\n\n    function safeSub(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n"
	},
	"sourceTreeHashHex": "0x91ff08ef5e4c24a8d45e073fe5b203508759e57eb7d0170a22a87ab0cdd340bd",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.4.24+commit.e67f0147.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"networks": {}
}