{
	"schemaVersion": "2.0.0",
	"contractName": "Exchange",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "filled",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "takerAssetFillAmounts",
						"type": "uint256[]"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "batchFillOrders",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "cancelled",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "hash",
						"type": "bytes32"
					},
					{
						"name": "signer",
						"type": "address"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "preSign",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "uint8"
					}
				],
				"name": "assetProxies",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "leftOrder",
						"type": "tuple"
					},
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "rightOrder",
						"type": "tuple"
					},
					{
						"name": "leftSignature",
						"type": "bytes"
					},
					{
						"name": "rightSignature",
						"type": "bytes"
					}
				],
				"name": "matchOrders",
				"outputs": [
					{
						"components": [
							{
								"components": [
									{
										"name": "makerAssetFilledAmount",
										"type": "uint256"
									},
									{
										"name": "takerAssetFilledAmount",
										"type": "uint256"
									},
									{
										"name": "makerFeePaid",
										"type": "uint256"
									},
									{
										"name": "takerFeePaid",
										"type": "uint256"
									}
								],
								"name": "left",
								"type": "tuple"
							},
							{
								"components": [
									{
										"name": "makerAssetFilledAmount",
										"type": "uint256"
									},
									{
										"name": "takerAssetFilledAmount",
										"type": "uint256"
									},
									{
										"name": "makerFeePaid",
										"type": "uint256"
									},
									{
										"name": "takerFeePaid",
										"type": "uint256"
									}
								],
								"name": "right",
								"type": "tuple"
							},
							{
								"name": "leftMakerAssetSpreadAmount",
								"type": "uint256"
							}
						],
						"name": "matchedFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "order",
						"type": "tuple"
					},
					{
						"name": "takerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "fillOrderNoThrow",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "fillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					}
				],
				"name": "batchCancelOrders",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "takerAssetFillAmounts",
						"type": "uint256[]"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "batchFillOrKillOrders",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "salt",
						"type": "uint256"
					}
				],
				"name": "cancelOrdersUpTo",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "takerAssetFillAmounts",
						"type": "uint256[]"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "batchFillOrdersNoThrow",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "assetProxyId",
						"type": "uint8"
					},
					{
						"name": "newAssetProxy",
						"type": "address"
					},
					{
						"name": "oldAssetProxy",
						"type": "address"
					}
				],
				"name": "registerAssetProxy",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "transactions",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "order",
						"type": "tuple"
					},
					{
						"name": "takerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "fillOrKillOrder",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "fillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"name": "makerEpoch",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "validator",
						"type": "address"
					},
					{
						"name": "approval",
						"type": "bool"
					}
				],
				"name": "setSignatureValidatorApproval",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "address"
					},
					{
						"name": "",
						"type": "address"
					}
				],
				"name": "allowedValidators",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "takerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "marketSellOrders",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "bytes32"
					},
					{
						"name": "",
						"type": "address"
					}
				],
				"name": "preSigned",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "assetProxyId",
						"type": "uint8"
					}
				],
				"name": "getAssetProxy",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "hash",
						"type": "bytes32"
					},
					{
						"name": "signer",
						"type": "address"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "isValidSignature",
				"outputs": [
					{
						"name": "isValid",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "makerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "marketBuyOrdersNoThrow",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "order",
						"type": "tuple"
					},
					{
						"name": "takerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "fillOrder",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "fillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "salt",
						"type": "uint256"
					},
					{
						"name": "signer",
						"type": "address"
					},
					{
						"name": "data",
						"type": "bytes"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "executeTransaction",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "order",
						"type": "tuple"
					}
				],
				"name": "getOrderInfo",
				"outputs": [
					{
						"components": [
							{
								"name": "orderStatus",
								"type": "uint8"
							},
							{
								"name": "orderHash",
								"type": "bytes32"
							},
							{
								"name": "orderTakerAssetFilledAmount",
								"type": "uint256"
							}
						],
						"name": "orderInfo",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "order",
						"type": "tuple"
					}
				],
				"name": "cancelOrder",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "takerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "marketSellOrdersNoThrow",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "makerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "marketBuyOrders",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "currentContextAddress",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "VERSION",
				"outputs": [
					{
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "_zrxAssetData",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "id",
						"type": "uint8"
					},
					{
						"indexed": false,
						"name": "newAssetProxy",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "oldAssetProxy",
						"type": "address"
					}
				],
				"name": "AssetProxySet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "makerAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "takerAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "feeRecipientAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "makerAssetFilledAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "takerAssetFilledAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "makerFeePaid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "takerFeePaid",
						"type": "uint256"
					},
					{
						"indexed": true,
						"name": "orderHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"name": "makerAssetData",
						"type": "bytes"
					},
					{
						"indexed": false,
						"name": "takerAssetData",
						"type": "bytes"
					}
				],
				"name": "Fill",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "makerAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "feeRecipientAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "orderHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"name": "makerAssetData",
						"type": "bytes"
					},
					{
						"indexed": false,
						"name": "takerAssetData",
						"type": "bytes"
					}
				],
				"name": "Cancel",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "makerAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "makerEpoch",
						"type": "uint256"
					}
				],
				"name": "CancelUpTo",
				"type": "event"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x60806040523480156200001157600080fd5b50604051620046263803806200462683398101806040526200003791908101906200016a565b60008054600160a060020a03191633179055805181906200006090600490602084019062000069565b5050506200022c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000ac57805160ff1916838001178555620000dc565b82800160010185558215620000dc579182015b82811115620000dc578251825591602001919060010190620000bf565b50620000ea929150620000ee565b5090565b6200010b91905b80821115620000ea5760008155600101620000f5565b90565b6000601f820183136200012057600080fd5b8151620001376200013182620001d1565b620001aa565b915080825260208301602083018583830111156200015457600080fd5b62000161838284620001f9565b50505092915050565b6000602082840312156200017d57600080fd5b81516001604060020a038111156200019457600080fd5b620001a2848285016200010e565b949350505050565b6040518181016001604060020a0381118282101715620001c957600080fd5b604052919050565b60006001604060020a03821115620001e857600080fd5b506020601f91909101601f19160190565b60005b8381101562000216578181015183820152602001620001fc565b8381111562000226576000848401525b50505050565b6143ea806200023c6000396000f3006080604052600436106101955763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663288cdc91811461019a578063297bb70b146101d05780632ac12622146101f25780633683ef8e1461021f578063380771641461023f5780633c28d8611461026c5780633e228bae146102995780634ac14782146102c65780634d0ae546146102e65780634f9559b11461030657806350dde190146103265780635c78d0c714610346578063642f2eaf1461036657806364a3bc15146103865780636f3627f8146103a657806377fcce68146103c65780637b8e3514146103e65780637e1d98081461040657806382c174d0146104265780638da5cb5b1461044657806392c1421e146104685780639363470214610488578063a3e20380146104a8578063b4be83d5146104c8578063bfc8bfce146104e8578063c75e0a8114610508578063d46b02c314610535578063dd1c7d1814610555578063e5fa431b14610575578063eea086ba14610595578063f2fde38b146105aa578063ffa1ad74146105ca575b600080fd5b3480156101a657600080fd5b506101ba6101b5366004613c09565b6105ec565b6040516101c7919061429f565b60405180910390f35b3480156101dc57600080fd5b506101f06101eb366004613b0e565b6105fe565b005b3480156101fe57600080fd5b5061021261020d366004613c09565b610669565b6040516101c7919061415a565b34801561022b57600080fd5b506101f061023a366004613c46565b61067e565b34801561024b57600080fd5b5061025f61025a366004613ee0565b61074c565b6040516101c79190614245565b34801561027857600080fd5b5061028c610287366004613d3e565b610767565b6040516101c79190614282565b3480156102a557600080fd5b506102b96102b4366004613dfe565b610853565b6040516101c79190614274565b3480156102d257600080fd5b506101f06102e1366004613ad9565b610a63565b3480156102f257600080fd5b506101f0610301366004613b0e565b610a9b565b34801561031257600080fd5b506101f0610321366004613c09565b610b00565b34801561033257600080fd5b506101f0610341366004613b0e565b610be7565b34801561035257600080fd5b506101f0610361366004613f1c565b610c4c565b34801561037257600080fd5b50610212610381366004613c09565b610e7a565b34801561039257600080fd5b506102b96103a1366004613dfe565b610e8f565b3480156103b257600080fd5b506101ba6103c1366004613a51565b610f0c565b3480156103d257600080fd5b506101f06103e1366004613aa9565b610f1e565b3480156103f257600080fd5b50610212610401366004613a6f565b610f63565b34801561041257600080fd5b506102b9610421366004613ba2565b610f83565b34801561043257600080fd5b50610212610441366004613c27565b61105b565b34801561045257600080fd5b5061045b61107b565b6040516101c791906140d7565b34801561047457600080fd5b5061045b610483366004613ee0565b61108a565b34801561049457600080fd5b506102126104a3366004613cae565b6110a8565b3480156104b457600080fd5b506102b96104c3366004613ba2565b611884565b3480156104d457600080fd5b506102b96104e3366004613dfe565b611994565b3480156104f457600080fd5b506101f0610503366004613e47565b611a18565b34801561051457600080fd5b50610528610523366004613d09565b611d4a565b6040516101c79190614291565b34801561054157600080fd5b506101f0610550366004613d09565b611e26565b34801561056157600080fd5b506102b9610570366004613ba2565b611e51565b34801561058157600080fd5b506102b9610590366004613ba2565b611f17565b3480156105a157600080fd5b5061045b611ff2565b3480156105b657600080fd5b506101f06105c5366004613a51565b612001565b3480156105d657600080fd5b506105df612069565b6040516101c79190614253565b60016020526000908152604090205481565b60005b83518110156106635761065a848281518110151561061b57fe5b90602001906020020151848381518110151561063357fe5b90602001906020020151848481518110151561064b57fe5b90602001906020020151611994565b50600101610601565b50505050565b60026020526000908152604090205460ff1681565b6106b9848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437506110a8945050505050565b60408051808201909152601181527f494e56414c49445f5349474e415455524500000000000000000000000000000060208201529015156107195760405160e560020a62461bcd0281526004016107109190614253565b60405180910390fd5b5050506000918252600560209081526040808420600160a060020a0390931684529190529020805460ff19166001179055565b600960205260009081526040902054600160a060020a031681565b61076f613677565b6107776136a6565b61077f6136a6565b61016080880151610140808901919091528801519087015260006107a288611d4a565b92506107ad87611d4a565b91506107b76120a0565b90506107c388886120cf565b6107d788888560400151856040015161214f565b8051602001519094506107f190899085908490808b612213565b602080850151015161080a90889084908490808a612213565b61082388828560200151866040015188600001516124b3565b61083c87828460200151856040015188602001516124b3565b61084888888387612552565b505050949350505050565b61085b6136c6565b604080517fb4be83d5000000000000000000000000000000000000000000000000000000008082526060600483018181528851606485019081526020808b01516084870152958a015160a48601529189015160c4850152608089015160e485015260a089015161010485015260c089015161012485015260e0890151610144850152610100890151610164850152610120890151610184850152610140890180516101a486019081526101608b01516101c487015261018090525180516101e48601819052939591938493926024870192849261020489019291820191601f82010460005b8181101561095e578351855260209485019490930192600101610940565b50505050818103610160808401919091528c0151805180835260209283019291820191601f82010460005b818110156109a7578351855260209485019490930192600101610989565b5050508b84525084810360209384019081528a518083529093918201918b81019190601f82010460005b818110156109ef5783518552602094850194909301926001016109d1565b5060808a8b86038c305af4808015610a0e5760018114610a2c57610a4f565b60008e52600060208f0152600060408f0152600060608f0152610a4f565b8b518e5260208c015160208f015260408c015160408f015260608c015160608f01525b505050505050505050505050509392505050565b60005b8151811015610a9757610a8f8282815181101515610a8057fe5b90602001906020020151611e26565b600101610a66565b5050565b60005b835181101561066357610af78482815181101515610ab857fe5b906020019060200201518483815181101515610ad057fe5b906020019060200201518484815181101515610ae857fe5b90602001906020020151610e8f565b50600101610a9e565b6000806000610b0d6120a0565b600160a060020a038116600090815260036020908152604091829020548251808401909352601783527f494e56414c49445f4e45575f4d414b45525f45504f434800000000000000000091830191909152919450600186019350909150818311610b8d5760405160e560020a62461bcd0281526004016107109190614253565b50600160a060020a03831660008181526003602052604090819020849055517f666a5047451d0c744e58819166260f8048fe2786e33b3c1115af94887a451ca790610bd990859061429f565b60405180910390a250505050565b60005b835181101561066357610c438482815181101515610c0457fe5b906020019060200201518483815181101515610c1c57fe5b906020019060200201518484815181101515610c3457fe5b90602001906020020151610853565b50600101610bea565b6000805481908190600160a060020a03163314610c7e5760405160e560020a62461bcd02815260040161071090614264565b60ff8616600090815260096020908152604091829020548251808401909352601483527f41535345545f50524f58595f4d49534d4154434800000000000000000000000091830191909152600160a060020a03908116945085168414610cfa5760405160e560020a62461bcd0281526004016107109190614253565b50849150600160a060020a03821615610dfe5781600160a060020a031663ae25532e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610d6457600080fd5b505af1158015610d78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d9c9190810190613efe565b60408051808201909152601781527f41535345545f50524f58595f49445f4d49534d41544348000000000000000000602082015290915060ff80831690881614610dfc5760405160e560020a62461bcd0281526004016107109190614253565b505b60ff861660009081526009602052604090819020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038516179055517f27ef5f484e50f2daf7c2d82c60fe4ce409009541176eb64095beac369db1d26090610e6a908890889088906142ad565b60405180910390a1505050505050565b60076020526000908152604090205460ff1681565b610e976136c6565b610ea2848484611994565b9050828160200151146040805190810160405280601481526020017f434f4d504c4554455f46494c4c5f4641494c4544000000000000000000000000815250901515610f045760405160e560020a62461bcd0281526004016107109190614253565b509392505050565b60036020526000908152604090205481565b6000610f286120a0565b600160a060020a03908116600090815260066020908152604080832096909316825294909452909220805460ff191691151591909117905550565b600660209081526000928352604080842090915290825290205460ff1681565b610f8b6136c6565b6060600080610f986136c6565b876000815181101515610fa757fe5b9060200190602002015161016001519350600092505b875183101561105057838884815181101515610fd557fe5b906020019060200201516101600181905250610ff587866020015161272e565b9150611021888481518110151561100857fe5b9060200190602002015183888681518110151561064b57fe5b8451600101855290506110348582612740565b868560200151141561104557611050565b600190920191610fbd565b505050509392505050565b600560209081526000928352604080842090915290825290205460ff1681565b600054600160a060020a031681565b60ff16600090815260096020526040902054600160a060020a031690565b6000806000806000806000808851116040805190810160405280601e81526020017f4c454e4754485f475245415445525f5448414e5f305f524551554952454400008152509015156111105760405160e560020a62461bcd0281526004016107109190614253565b5061111a886127a2565b60f860020a900460ff16600881111561112f57fe5b9550600086600881111561113f57fe5b141561119357604080518082018252601181527f5349474e41545552455f494c4c4547414c0000000000000000000000000000006020820152905160e560020a62461bcd0281526107109190600401614253565b60018660088111156111a157fe5b141561120957875160408051808201909152601181527f4c454e4754485f315f5245515549524544000000000000000000000000000000602082015290156111ff5760405160e560020a62461bcd0281526004016107109190614253565b5060009650611877565b600286600881111561121757fe5b141561131f57875160408051808201909152601281527f4c454e4754485f36365f524551554952454400000000000000000000000000006020820152906041146112775760405160e560020a62461bcd0281526004016107109190614253565b5087600081518110151561128757fe5b016020015160f860020a9081900481020494506112a5886001612857565b93506112b2886021612857565b925060018a868686604051600081526020016040526040516112d794939291906141be565b60206040516020810390808403906000865af11580156112fb573d6000803e3d6000fd5b5050604051601f190151600160a060020a038b811690821614985092506118779050565b600386600881111561132d57fe5b14156114d957875160408051808201909152601281527f4c454e4754485f36365f5245515549524544000000000000000000000000000060208201529060411461138d5760405160e560020a62461bcd0281526004016107109190614253565b5087600081518110151561139d57fe5b016020015160f860020a9081900481020494506113bb886001612857565b93506113c8886021612857565b925060016040805190810160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152508b6040516020018083805190602001908083835b602083106114355780518252601f199092019160209182019101611416565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b602083106114955780518252601f199092019160209182019101611476565b51815160209384036101000a600019018019909216911617905260408051929094018290038220600083529101928390526112d794509250899189915088906141be565b60048660088111156114e757fe5b141561155957875160408051808201909152601181527f4c454e4754485f315f5245515549524544000000000000000000000000000000602082015290156115455760405160e560020a62461bcd0281526004016107109190614253565b50600160a060020a03891633149650611877565b600586600881111561156757fe5b141561160d576040517f1626ba7e000000000000000000000000000000000000000000000000000000008152600160a060020a038a1690631626ba7e906115b4908d908c9060040161419e565b602060405180830381600087803b1580156115ce57600080fd5b505af11580156115e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116069190810190613beb565b9650611877565b600686600881111561161b57fe5b14156116ae5761162a886128eb565b600160a060020a03808b1660009081526006602090815260408083209385168352929052205490915060ff1615156116655760009650611877565b6040517f93634702000000000000000000000000000000000000000000000000000000008152600160a060020a038216906393634702906115b4908d908d908d90600401614168565b60078660088111156116bc57fe5b14156116ef5760008a8152600560209081526040808320600160a060020a038d16845290915290205460ff169650611877565b60088660088111156116fd57fe5b14156117e857875160408051808201909152601281527f4c454e4754485f36365f5245515549524544000000000000000000000000000060208201529060411461175d5760405160e560020a62461bcd0281526004016107109190614253565b5087600081518110151561176d57fe5b016020015160f860020a90819004810204945061178b886001612857565b9350611798886021612857565b604080518082018252601b8082527f19457468657265756d205369676e6564204d6573736167653a0a4100000000006020808401918252935194975060019492938f930191829190808383611435565b60078660088111156117f657fe5b14156118295760008a8152600560209081526040808320600160a060020a038d16845290915290205460ff169650611877565b604080518082018252601581527f5349474e41545552455f554e535550504f5254454400000000000000000000006020820152905160e560020a62461bcd0281526107109190600401614253565b5050505050509392505050565b61188c6136c6565b6060600080600061189b6136c6565b8860008151811015156118aa57fe5b9060200190602002015161014001519450600093505b8851841015611988578489858151811015156118d857fe5b60209081029091010151610140015285516118f490899061272e565b9250611937898581518110151561190757fe5b9060200190602002015160a001518a8681518110151561192357fe5b90602001906020020151608001518561298f565b9150611963898581518110151561194a57fe5b90602001906020020151838987815181101515610c3457fe5b905061196f8682612740565b855188141561197d57611988565b6001909301926118c0565b50505050509392505050565b61199c6136c6565b6119a46136a6565b60008060006119b288611d4a565b93506119bc6120a0565b92506119d08860a00151856040015161272e565b91506119dc87836129ac565b90506119ec8885858a858b612213565b6119f688826129c4565b9450611a0d888486602001518760400151896124b3565b611050888487612a2e565b60085460408051808201909152601281527f5245454e5452414e43595f494c4c4547414c00000000000000000000000000006020820152600091600160a060020a031615611a7c5760405160e560020a62461bcd0281526004016107109190614253565b5030868887876040516020018086600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140185600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018481526020018383808284378201915050955050505050506040516020818303038152906040526040518082805190602001908083835b60208310611b2d5780518252601f199092019160209182019101611b0e565b51815160209384036101000a60001901801990921691161790526040805192909401829003822060008181526007835285902054838601909552600f83527f494e56414c49445f54585f48415348000000000000000000000000000000000091830191909152955093505060ff16159050611bbe5760405160e560020a62461bcd0281526004016107109190614253565b50600160a060020a0386163314611c8b57611c0a818785858080601f016020809104026020016040519081016040528093929190818152602001838380828437506110a8945050505050565b60408051808201909152601481527f494e56414c49445f54585f5349474e41545552450000000000000000000000006020820152901515611c615760405160e560020a62461bcd0281526004016107109190614253565b506008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388161790555b60008181526007602052604090819020805460ff191660011790555130908690869080838380828437820191505092505050600060405180830381855af460408051808201909152601081527f4641494c45445f455845435554494f4e000000000000000000000000000000006020820152925015159050611d235760405160e560020a62461bcd0281526004016107109190614253565b50506008805473ffffffffffffffffffffffffffffffffffffffff19169055505050505050565b611d526136a6565b611d5b82612b5a565b602082015260808201511515611d785760015b60ff168152611e21565b60a08201511515611d8a576002611d6e565b6101008201514210611d9d576004611d6e565b60208082015160009081526002909152604090205460ff1615611dc1576006611d6e565b6101208201518251600160a060020a03166000908152600360205260409020541115611dee576006611d6e565b602080820151600090815260019091526040908190205490820181905260a083015111611e1c576005611d6e565b600381525b919050565b611e2e6136a6565b611e3782611d4a565b9050611e4382826132ce565b610a97828260200151613417565b611e596136c6565b6060600080611e666136c6565b876000815181101515611e7557fe5b9060200190602002015161016001519350600092505b875183101561105057838884815181101515611ea357fe5b906020019060200201516101600181905250611ec387866020015161272e565b9150611eef8884815181101515611ed657fe5b90602001906020020151838886815181101515610c3457fe5b9050611efb8582612740565b8685602001511415611f0c57611050565b600190920191611e8b565b611f1f6136c6565b60606000806000611f2e6136c6565b886000815181101515611f3d57fe5b9060200190602002015161014001519450600093505b885184101561198857848985815181101515611f6b57fe5b6020908102909101015161014001528551611f8790899061272e565b9250611f9a898581518110151561190757fe5b9150611fc68985815181101515611fad57fe5b9060200190602002015183898781518110151561064b57fe5b855160010186529050611fd98682612740565b8551881415611fe757611988565b600190930192611f53565b600854600160a060020a031681565b600054600160a060020a0316331461202e5760405160e560020a62461bcd02815260040161071090614264565b600160a060020a03811615612066576000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b60408051808201909152600b81527f322e302e312d616c706861000000000000000000000000000000000000000000602082015281565b6008546000908190600160a060020a0316156120c757600854600160a060020a03166120c9565b335b92915050565b6120e18260a001518260a00151613493565b6120f383608001518360800151613493565b60408051808201909152601881527f4e454741544956455f5350524541445f52455155495245440000000000000000602082015291111561214a5760405160e560020a62461bcd0281526004016107109190614253565b505050565b612157613677565b60008060008061216b8960a001518861272e565b935061217b8860a001518761272e565b925061218b838960800151613493565b612199858a60a00151613493565b116121bb578391506121b48860a0015189608001518461298f565b90506121d4565b8290506121d188608001518960a001518361298f565b91505b6121de89836129c4565b85526121ea88826129c4565b6020808701829052865151910151612202919061272e565b604086015250505050949350505050565b845160408051808201909152601081527f4f524445525f554e46494c4c41424c450000000000000000000000000000000060208201529060ff166003146122705760405160e560020a62461bcd0281526004016107109190614253565b5060408051808201909152601481527f494e56414c49445f54414b45525f414d4f554e5400000000000000000000000060208201528315156122c85760405160e560020a62461bcd0281526004016107109190614253565b506060860151600160a060020a03161561234357606086015160408051808201909152600e81527f494e56414c49445f53454e444552000000000000000000000000000000000000602082015290600160a060020a031633146123415760405160e560020a62461bcd0281526004016107109190614253565b505b6020860151600160a060020a0316156123ca5783600160a060020a03168660200151600160a060020a0316146040805190810160405280600d81526020017f494e56414c49445f54414b4552000000000000000000000000000000000000008152509015156123c85760405160e560020a62461bcd0281526004016107109190614253565b505b60408501511515612441576123e885602001518760000151836110a8565b60408051808201909152601781527f494e56414c49445f4f524445525f5349474e4154555245000000000000000000602082015290151561243f5760405160e560020a62461bcd0281526004016107109190614253565b505b612454828760a0015188608001516134b7565b60408051808201909152600e81527f524f554e44494e475f4552524f52000000000000000000000000000000000000602082015290156124aa5760405160e560020a62461bcd0281526004016107109190614253565b50505050505050565b6124c182826020015161350d565b600084815260016020908152604091829020929092558681015187518451938501518584015160608701516101408c01516101608d015196518b98600160a060020a039788169897909616967fde19f18e1b56e6eada7ed95cca8398b602be32f5864640537ee9a9a3532bb29d96612543968f969195909491939092906140e5565b60405180910390a45050505050565b60008060606125658761014001516127a2565b60f860020a9004925061257c8661014001516127a2565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260f860020a909404955083018282801561260b5780601f106125e05761010080835404028352916020019161260b565b820191906000526020600020905b8154815290600101906020018083116125ee57829003601f168201915b50505050509050612634876101400151848960000151896000015188602001516020015161351c565b6101408601518651885186516020015161265293928692909161351c565b61266c87610140015184896000015188886040015161351c565b61268a81600189600001518a6040015188600001516040015161351c565b6126a88160018860000151896040015188602001516040015161351c565b8560400151600160a060020a03168760400151600160a060020a031614156126fa576126f5816001878a604001516126f08960000151606001518a602001516060015161350d565b61351c565b6124aa565b612714816001878a6040015188600001516060015161351c565b6124aa81600187896040015188602001516060015161351c565b60008282111561273a57fe5b50900390565b8151815161274e919061350d565b825260208083015190820151612764919061350d565b60208301526040808301519082015161277d919061350d565b604083015260608083015190820151612796919061350d565b60609092019190915250565b600080825111606060405190810160405280602181526020017f475245415445525f5448414e5f5a45524f5f4c454e4754485f5245515549524581526020017f44000000000000000000000000000000000000000000000000000000000000008152509015156128285760405160e560020a62461bcd0281526004016107109190614253565b5081518290600019810190811061283b57fe5b01602001518251600019019092525060f860020a908190040290565b60008160200183511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524581526020017f51554952454400000000000000000000000000000000000000000000000000008152509015156128e15760405160e560020a62461bcd0281526004016107109190614253565b5050016020015190565b6000601482511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524581526020017f51554952454400000000000000000000000000000000000000000000000000008152509015156129735760405160e560020a62461bcd0281526004016107109190614253565b506129828260148451036135c3565b8251601319019092525090565b60006129a461299e8584613493565b84613660565b949350505050565b60008183106129bb57816129bd565b825b9392505050565b6129cc6136c6565b6020810182905260a083015160808401516129e891849161298f565b8152602081015160a084015160c0850151612a0492919061298f565b6040820152602081015160a084015160e0850151612a2392919061298f565b606082015292915050565b6000806060612a418661014001516127a2565b60f860020a90049250612a588661016001516127a2565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260f860020a9094049550830182828015612ae75780601f10612abc57610100808354040283529160200191612ae7565b820191906000526020600020905b815481529060010190602001808311612aca57829003601f168201915b50505050509050612b0886610140015184886000015188886000015161351c565b612b2286610160015183878960000151886020015161351c565b612b3c81600188600001518960400151886040015161351c565b612b52816001878960400151886060015161351c565b505050505050565b600060405160200180807f446f6d61696e536570617261746f72286164647265737320636f6e747261637481526020017f290000000000000000000000000000000000000000000000000000000000000081525060210190506040516020818303038152906040526040518082805190602001908083835b60208310612bf15780518252601f199092019160209182019101612bd2565b51815160209384036101000a600019018019909216911617905260408051929094018290038220306c0100000000000000000000000002838301528451601481850301815260349093019485905282519096509194508392508401908083835b60208310612c705780518252601f199092019160209182019101612c51565b51815160209384036101000a6000190180199092169116179052604080519290940182900382207f4f72646572280000000000000000000000000000000000000000000000000000838301527f61646472657373206d616b6572416464726573732c000000000000000000000060268401527f616464726573732074616b6572416464726573732c0000000000000000000000603b8401527f6164647265737320666565526563697069656e74416464726573732c0000000060508401527f616464726573732073656e646572416464726573732c00000000000000000000606c8401527f75696e74323536206d616b65724173736574416d6f756e742c0000000000000060828401527f75696e743235362074616b65724173736574416d6f756e742c00000000000000609b8401527f75696e74323536206d616b65724665652c00000000000000000000000000000060b48401527f75696e743235362074616b65724665652c00000000000000000000000000000060c58401527f75696e743235362065787069726174696f6e54696d655365636f6e64732c000060d68401527f75696e743235362073616c742c0000000000000000000000000000000000000060f48401527f6279746573206d616b65724173736574446174612c00000000000000000000006101018401527f62797465732074616b65724173736574446174612c00000000000000000000006101168401527f290000000000000000000000000000000000000000000000000000000000000061012b840152845180840361010c01815261012c9093019485905282519096509194508392508401908083835b60208310612ef35780518252601f199092019160209182019101612ed4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020846000015185602001518660400151876060015188608001518960a001518a60c001518b60e001518c61010001518d61012001518e61014001516040516020018082805190602001908083835b60208310612f8c5780518252601f199092019160209182019101612f6d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310612fef5780518252601f199092019160209182019101612fd0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208f61016001516040516020018082805190602001908083835b602083106130545780518252601f199092019160209182019101613035565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106130b75780518252601f199092019160209182019101613098565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020604051602001808d600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018c600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018b600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018a600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401898152602001888152602001878152602001868152602001858152602001848152602001836000191660001916815260200182600019166000191681526020019c505050505050505050505050506040516020818303038152906040526040518082805190602001908083835b602083106132135780518252601f1990920191602091820191016131f4565b51815160001960209485036101000a019081169019919091161790526040805194909201849003842084820199909952838201979097526060830195909552506080808201969096528351808203909601865260a001928390525050825190918291908401908083835b6020831061329c5780518252601f19909201916020918201910161327d565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b805160408051808201909152601081527f4f524445525f554e46494c4c41424c4500000000000000000000000000000000602082015260009160ff1660031461332d5760405160e560020a62461bcd0281526004016107109190614253565b506060830151600160a060020a0316156133a857606083015160408051808201909152600e81527f494e56414c49445f53454e444552000000000000000000000000000000000000602082015290600160a060020a031633146133a65760405160e560020a62461bcd0281526004016107109190614253565b505b6133b06120a0565b835160408051808201909152600d81527f494e56414c49445f4d414b4552000000000000000000000000000000000000006020820152919250600160a060020a038084169116146106635760405160e560020a62461bcd0281526004016107109190614253565b60008181526002602052604090819020805460ff1916600117905582810151835161014085015161016086015193518594600160a060020a039485169493909316927fb1ad640e9e79b6fdbc3c415dc2914ab54e753d2971f51eab910f7aa317a3163a9261348792909190614220565b60405180910390a45050565b60008282028315806134af57508284828115156134ac57fe5b04145b15156129bd57fe5b6000806000848015156134c657fe5b86850991508115156134db5760009250613504565b6134fa6134eb83620f4240613493565b6134f58887613493565b613660565b6103e88111935090505b50509392505050565b6000828201838110156129bd57fe5b600080821115612b52575060ff8416600090815260096020526040908190205490517fa85e59e4000000000000000000000000000000000000000000000000000000008152600160a060020a0390911690819063a85e59e4906135899089908890889088906004016141f3565b600060405180830381600087803b1580156135a357600080fd5b505af11580156135b7573d6000803e3d6000fd5b50505050505050505050565b60008160140183511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524581526020017f515549524544000000000000000000000000000000000000000000000000000081525090151561364d5760405160e560020a62461bcd0281526004016107109190614253565b50500160140151600160a060020a031690565b600080828481151561366e57fe5b04949350505050565b6101206040519081016040528061368c6136c6565b81526020016136996136c6565b8152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b608060405190810160405280600081526020016000815260200160008152602001600081525090565b60006129bd8235614349565b6000601f8201831361370c57600080fd5b813561371f61371a826142fc565b6142d5565b81815260209384019390925082018360005b8381101561375d578135860161374788826138a1565b8452506020928301929190910190600101613731565b5050505092915050565b6000601f8201831361377857600080fd5b813561378661371a826142fc565b81815260209384019390925082018360005b8381101561375d57813586016137ae88826138f0565b8452506020928301929190910190600101613798565b6000601f820183136137d557600080fd5b81356137e361371a826142fc565b9150818183526020840193506020810190508385602084028201111561380857600080fd5b60005b8381101561375d578161381e888261384c565b845250602092830192919091019060010161380b565b60006129bd8235614355565b60006129bd8251614355565b60006129bd823561435a565b600080601f8301841361386a57600080fd5b50813567ffffffffffffffff81111561388257600080fd5b60208301915083600182028301111561389a57600080fd5b9250929050565b6000601f820183136138b257600080fd5b81356138c061371a8261431d565b915080825260208301602083018583830111156138dc57600080fd5b6138e783828461436e565b50505092915050565b6000610180828403121561390357600080fd5b61390e6101806142d5565b9050600061391c84846136ef565b825250602061392d848483016136ef565b6020830152506040613941848285016136ef565b6040830152506060613955848285016136ef565b60608301525060806139698482850161384c565b60808301525060a061397d8482850161384c565b60a08301525060c06139918482850161384c565b60c08301525060e06139a58482850161384c565b60e0830152506101006139ba8482850161384c565b610100830152506101206139d08482850161384c565b6101208301525061014082013567ffffffffffffffff8111156139f257600080fd5b6139fe848285016138a1565b6101408301525061016082013567ffffffffffffffff811115613a2057600080fd5b613a2c848285016138a1565b6101608301525092915050565b60006129bd823561435d565b60006129bd825161435d565b600060208284031215613a6357600080fd5b60006129a484846136ef565b60008060408385031215613a8257600080fd5b6000613a8e85856136ef565b9250506020613a9f858286016136ef565b9150509250929050565b60008060408385031215613abc57600080fd5b6000613ac885856136ef565b9250506020613a9f85828601613834565b600060208284031215613aeb57600080fd5b813567ffffffffffffffff811115613b0257600080fd5b6129a484828501613767565b600080600060608486031215613b2357600080fd5b833567ffffffffffffffff811115613b3a57600080fd5b613b4686828701613767565b935050602084013567ffffffffffffffff811115613b6357600080fd5b613b6f868287016137c4565b925050604084013567ffffffffffffffff811115613b8c57600080fd5b613b98868287016136fb565b9150509250925092565b600080600060608486031215613bb757600080fd5b833567ffffffffffffffff811115613bce57600080fd5b613bda86828701613767565b9350506020613b6f8682870161384c565b600060208284031215613bfd57600080fd5b60006129a48484613840565b600060208284031215613c1b57600080fd5b60006129a4848461384c565b60008060408385031215613c3a57600080fd5b6000613a8e858561384c565b60008060008060608587031215613c5c57600080fd5b6000613c68878761384c565b9450506020613c79878288016136ef565b935050604085013567ffffffffffffffff811115613c9657600080fd5b613ca287828801613858565b95989497509550505050565b600080600060608486031215613cc357600080fd5b6000613ccf868661384c565b9350506020613ce0868287016136ef565b925050604084013567ffffffffffffffff811115613cfd57600080fd5b613b98868287016138a1565b600060208284031215613d1b57600080fd5b813567ffffffffffffffff811115613d3257600080fd5b6129a4848285016138f0565b60008060008060808587031215613d5457600080fd5b843567ffffffffffffffff811115613d6b57600080fd5b613d77878288016138f0565b945050602085013567ffffffffffffffff811115613d9457600080fd5b613da0878288016138f0565b935050604085013567ffffffffffffffff811115613dbd57600080fd5b613dc9878288016138a1565b925050606085013567ffffffffffffffff811115613de657600080fd5b613df2878288016138a1565b91505092959194509250565b600080600060608486031215613e1357600080fd5b833567ffffffffffffffff811115613e2a57600080fd5b613e36868287016138f0565b9350506020613ce08682870161384c565b60008060008060008060808789031215613e6057600080fd5b6000613e6c898961384c565b9650506020613e7d89828a016136ef565b955050604087013567ffffffffffffffff811115613e9a57600080fd5b613ea689828a01613858565b9450945050606087013567ffffffffffffffff811115613ec557600080fd5b613ed189828a01613858565b92509250509295509295509295565b600060208284031215613ef257600080fd5b60006129a48484613a39565b600060208284031215613f1057600080fd5b60006129a48484613a45565b600080600060608486031215613f3157600080fd5b6000613f3d8686613a39565b9350506020613f4e868287016136ef565b9250506040613b98868287016136ef565b613f6881614349565b82525050565b613f6881614355565b613f688161435a565b6000613f8b82614345565b808452613f9f81602086016020860161437a565b613fa8816143a6565b9093016020019392505050565b613f6881614363565b603381527f4f6e6c7920636f6e7472616374206f776e657220697320616c6c6f776564207460208201527f6f2063616c6c2074686973206d6574686f642e00000000000000000000000000604082015260600190565b805160808301906140258482613f77565b5060208201516140386020850182613f77565b50604082015161404b6040850182613f77565b5060608201516106636060850182613f77565b80516101208301906140708482614014565b5060208201516140836080850182614014565b506040820151610663610100850182613f77565b805160608301906140a884826140ce565b5060208201516140bb6020850182613f77565b5060408201516106636040850182613f77565b613f688161435d565b602081016120c98284613f5f565b60e081016140f3828a613f5f565b6141006020830189613f77565b61410d6040830188613f77565b61411a6060830187613f77565b6141276080830186613f77565b81810360a08301526141398185613f80565b905081810360c083015261414d8184613f80565b9998505050505050505050565b602081016120c98284613f6e565b606081016141768286613f77565b6141836020830185613f5f565b81810360408301526141958184613f80565b95945050505050565b604081016141ac8285613f77565b81810360208301526129a48184613f80565b608081016141cc8287613f77565b6141d960208301866140ce565b6141e66040830185613f77565b6141956060830184613f77565b608080825281016142048187613f80565b90506142136020830186613f5f565b6141e66040830185613f5f565b604080825281016142318185613f80565b905081810360208301526129a48184613f80565b602081016120c98284613fb5565b602080825281016129bd8184613f80565b602080825281016120c981613fbe565b608081016120c98284614014565b61012081016120c9828461405e565b606081016120c98284614097565b602081016120c98284613f77565b606081016142bb82866140ce565b6142c86020830185613f5f565b6129a46040830184613f5f565b60405181810167ffffffffffffffff811182821017156142f457600080fd5b604052919050565b600067ffffffffffffffff82111561431357600080fd5b5060209081020190565b600067ffffffffffffffff82111561433457600080fd5b506020601f91909101601f19160190565b5190565b600160a060020a031690565b151590565b90565b60ff1690565b60006120c982614349565b82818337506000910152565b60005b8381101561439557818101518382015260200161437d565b838111156106635750506000910152565b601f01601f1916905600a265627a7a723058200cdc1a8df8fcf3068c1c2c9499b0494875a807cfdd1d5f3d94484c3a4496b04e6c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x4626 CODESIZE SUB DUP1 PUSH3 0x4626 DUP4 CODECOPY DUP2 ADD DUP1 PUSH1 0x40 MSTORE PUSH3 0x37 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x16A JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND CALLER OR SWAP1 SSTORE DUP1 MLOAD DUP2 SWAP1 PUSH3 0x60 SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x69 JUMP JUMPDEST POP POP POP PUSH3 0x22C JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0xAC JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xDC JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xDC JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xDC JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xBF JUMP JUMPDEST POP PUSH3 0xEA SWAP3 SWAP2 POP PUSH3 0xEE JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 0x10B SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xEA JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xF5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH3 0x120 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x137 PUSH3 0x131 DUP3 PUSH3 0x1D1 JUMP JUMPDEST PUSH3 0x1AA JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH3 0x154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x161 DUP4 DUP3 DUP5 PUSH3 0x1F9 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x17D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH3 0x194 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1A2 DUP5 DUP3 DUP6 ADD PUSH3 0x10E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x1C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP3 GT ISZERO PUSH3 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x216 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x1FC JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x226 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x43EA DUP1 PUSH3 0x23C PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x195 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x288CDC91 DUP2 EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x297BB70B EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0x2AC12622 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x3683EF8E EQ PUSH2 0x21F JUMPI DUP1 PUSH4 0x38077164 EQ PUSH2 0x23F JUMPI DUP1 PUSH4 0x3C28D861 EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0x3E228BAE EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0x4AC14782 EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0x4D0AE546 EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x4F9559B1 EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0x50DDE190 EQ PUSH2 0x326 JUMPI DUP1 PUSH4 0x5C78D0C7 EQ PUSH2 0x346 JUMPI DUP1 PUSH4 0x642F2EAF EQ PUSH2 0x366 JUMPI DUP1 PUSH4 0x64A3BC15 EQ PUSH2 0x386 JUMPI DUP1 PUSH4 0x6F3627F8 EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0x77FCCE68 EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0x7B8E3514 EQ PUSH2 0x3E6 JUMPI DUP1 PUSH4 0x7E1D9808 EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0x82C174D0 EQ PUSH2 0x426 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x446 JUMPI DUP1 PUSH4 0x92C1421E EQ PUSH2 0x468 JUMPI DUP1 PUSH4 0x93634702 EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0xA3E20380 EQ PUSH2 0x4A8 JUMPI DUP1 PUSH4 0xB4BE83D5 EQ PUSH2 0x4C8 JUMPI DUP1 PUSH4 0xBFC8BFCE EQ PUSH2 0x4E8 JUMPI DUP1 PUSH4 0xC75E0A81 EQ PUSH2 0x508 JUMPI DUP1 PUSH4 0xD46B02C3 EQ PUSH2 0x535 JUMPI DUP1 PUSH4 0xDD1C7D18 EQ PUSH2 0x555 JUMPI DUP1 PUSH4 0xE5FA431B EQ PUSH2 0x575 JUMPI DUP1 PUSH4 0xEEA086BA EQ PUSH2 0x595 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5AA JUMPI DUP1 PUSH4 0xFFA1AD74 EQ PUSH2 0x5CA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BA PUSH2 0x1B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C09 JUMP JUMPDEST PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x429F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x1EB CALLDATASIZE PUSH1 0x4 PUSH2 0x3B0E JUMP JUMPDEST PUSH2 0x5FE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x20D CALLDATASIZE PUSH1 0x4 PUSH2 0x3C09 JUMP JUMPDEST PUSH2 0x669 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x415A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x23A CALLDATASIZE PUSH1 0x4 PUSH2 0x3C46 JUMP JUMPDEST PUSH2 0x67E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25F PUSH2 0x25A CALLDATASIZE PUSH1 0x4 PUSH2 0x3EE0 JUMP JUMPDEST PUSH2 0x74C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4245 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x287 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D3E JUMP JUMPDEST PUSH2 0x767 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4282 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x2B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x3DFE JUMP JUMPDEST PUSH2 0x853 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4274 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x2E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AD9 JUMP JUMPDEST PUSH2 0xA63 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x301 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B0E JUMP JUMPDEST PUSH2 0xA9B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x321 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C09 JUMP JUMPDEST PUSH2 0xB00 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x341 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B0E JUMP JUMPDEST PUSH2 0xBE7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x352 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x361 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F1C JUMP JUMPDEST PUSH2 0xC4C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x381 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C09 JUMP JUMPDEST PUSH2 0xE7A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x3A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3DFE JUMP JUMPDEST PUSH2 0xE8F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BA PUSH2 0x3C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A51 JUMP JUMPDEST PUSH2 0xF0C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x3E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AA9 JUMP JUMPDEST PUSH2 0xF1E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x401 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A6F JUMP JUMPDEST PUSH2 0xF63 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x412 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x421 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BA2 JUMP JUMPDEST PUSH2 0xF83 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x432 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x441 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C27 JUMP JUMPDEST PUSH2 0x105B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45B PUSH2 0x107B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x40D7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x474 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45B PUSH2 0x483 CALLDATASIZE PUSH1 0x4 PUSH2 0x3EE0 JUMP JUMPDEST PUSH2 0x108A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x4A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3CAE JUMP JUMPDEST PUSH2 0x10A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x4C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BA2 JUMP JUMPDEST PUSH2 0x1884 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x4E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3DFE JUMP JUMPDEST PUSH2 0x1994 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x503 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E47 JUMP JUMPDEST PUSH2 0x1A18 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x514 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x528 PUSH2 0x523 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D09 JUMP JUMPDEST PUSH2 0x1D4A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4291 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x541 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x550 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D09 JUMP JUMPDEST PUSH2 0x1E26 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x561 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x570 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BA2 JUMP JUMPDEST PUSH2 0x1E51 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x581 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x590 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BA2 JUMP JUMPDEST PUSH2 0x1F17 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45B PUSH2 0x1FF2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x5C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A51 JUMP JUMPDEST PUSH2 0x2001 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5DF PUSH2 0x2069 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x663 JUMPI PUSH2 0x65A DUP5 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x61B JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x633 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP5 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x64B JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x1994 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x601 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x6B9 DUP5 DUP5 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0x10A8 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x494E56414C49445F5349474E4154555245000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x719 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH2 0x76F PUSH2 0x3677 JUMP JUMPDEST PUSH2 0x777 PUSH2 0x36A6 JUMP JUMPDEST PUSH2 0x77F PUSH2 0x36A6 JUMP JUMPDEST PUSH2 0x160 DUP1 DUP9 ADD MLOAD PUSH2 0x140 DUP1 DUP10 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP9 ADD MLOAD SWAP1 DUP8 ADD MSTORE PUSH1 0x0 PUSH2 0x7A2 DUP9 PUSH2 0x1D4A JUMP JUMPDEST SWAP3 POP PUSH2 0x7AD DUP8 PUSH2 0x1D4A JUMP JUMPDEST SWAP2 POP PUSH2 0x7B7 PUSH2 0x20A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x7C3 DUP9 DUP9 PUSH2 0x20CF JUMP JUMPDEST PUSH2 0x7D7 DUP9 DUP9 DUP6 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x214F JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x7F1 SWAP1 DUP10 SWAP1 DUP6 SWAP1 DUP5 SWAP1 DUP1 DUP12 PUSH2 0x2213 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP6 ADD MLOAD ADD MLOAD PUSH2 0x80A SWAP1 DUP9 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP1 DUP11 PUSH2 0x2213 JUMP JUMPDEST PUSH2 0x823 DUP9 DUP3 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0x24B3 JUMP JUMPDEST PUSH2 0x83C DUP8 DUP3 DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0x24B3 JUMP JUMPDEST PUSH2 0x848 DUP9 DUP9 DUP4 DUP8 PUSH2 0x2552 JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x85B PUSH2 0x36C6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xB4BE83D500000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE PUSH1 0x60 PUSH1 0x4 DUP4 ADD DUP2 DUP2 MSTORE DUP9 MLOAD PUSH1 0x64 DUP6 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 DUP1 DUP12 ADD MLOAD PUSH1 0x84 DUP8 ADD MSTORE SWAP6 DUP11 ADD MLOAD PUSH1 0xA4 DUP7 ADD MSTORE SWAP2 DUP10 ADD MLOAD PUSH1 0xC4 DUP6 ADD MSTORE PUSH1 0x80 DUP10 ADD MLOAD PUSH1 0xE4 DUP6 ADD MSTORE PUSH1 0xA0 DUP10 ADD MLOAD PUSH2 0x104 DUP6 ADD MSTORE PUSH1 0xC0 DUP10 ADD MLOAD PUSH2 0x124 DUP6 ADD MSTORE PUSH1 0xE0 DUP10 ADD MLOAD PUSH2 0x144 DUP6 ADD MSTORE PUSH2 0x100 DUP10 ADD MLOAD PUSH2 0x164 DUP6 ADD MSTORE PUSH2 0x120 DUP10 ADD MLOAD PUSH2 0x184 DUP6 ADD MSTORE PUSH2 0x140 DUP10 ADD DUP1 MLOAD PUSH2 0x1A4 DUP7 ADD SWAP1 DUP2 MSTORE PUSH2 0x160 DUP12 ADD MLOAD PUSH2 0x1C4 DUP8 ADD MSTORE PUSH2 0x180 SWAP1 MSTORE MLOAD DUP1 MLOAD PUSH2 0x1E4 DUP7 ADD DUP2 SWAP1 MSTORE SWAP4 SWAP6 SWAP2 SWAP4 DUP5 SWAP4 SWAP3 PUSH1 0x24 DUP8 ADD SWAP3 DUP5 SWAP3 PUSH2 0x204 DUP10 ADD SWAP3 SWAP2 DUP3 ADD SWAP2 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x95E JUMPI DUP4 MLOAD DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x940 JUMP JUMPDEST POP POP POP POP DUP2 DUP2 SUB PUSH2 0x160 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP13 ADD MLOAD DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 DUP3 ADD SWAP2 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9A7 JUMPI DUP4 MLOAD DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x989 JUMP JUMPDEST POP POP POP DUP12 DUP5 MSTORE POP DUP5 DUP2 SUB PUSH1 0x20 SWAP4 DUP5 ADD SWAP1 DUP2 MSTORE DUP11 MLOAD DUP1 DUP4 MSTORE SWAP1 SWAP4 SWAP2 DUP3 ADD SWAP2 DUP12 DUP2 ADD SWAP2 SWAP1 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9EF JUMPI DUP4 MLOAD DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x9D1 JUMP JUMPDEST POP PUSH1 0x80 DUP11 DUP12 DUP7 SUB DUP13 ADDRESS GAS DELEGATECALL DUP1 DUP1 ISZERO PUSH2 0xA0E JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0xA2C JUMPI PUSH2 0xA4F JUMP JUMPDEST PUSH1 0x0 DUP15 MSTORE PUSH1 0x0 PUSH1 0x20 DUP16 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP16 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP16 ADD MSTORE PUSH2 0xA4F JUMP JUMPDEST DUP12 MLOAD DUP15 MSTORE PUSH1 0x20 DUP13 ADD MLOAD PUSH1 0x20 DUP16 ADD MSTORE PUSH1 0x40 DUP13 ADD MLOAD PUSH1 0x40 DUP16 ADD MSTORE PUSH1 0x60 DUP13 ADD MLOAD PUSH1 0x60 DUP16 ADD MSTORE JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xA97 JUMPI PUSH2 0xA8F DUP3 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA80 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x1E26 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xA66 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x663 JUMPI PUSH2 0xAF7 DUP5 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAB8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAD0 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP5 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAE8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0xE8F JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xA9E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xB0D PUSH2 0x20A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x17 DUP4 MSTORE PUSH32 0x494E56414C49445F4E45575F4D414B45525F45504F4348000000000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP5 POP PUSH1 0x1 DUP7 ADD SWAP4 POP SWAP1 SWAP2 POP DUP2 DUP4 GT PUSH2 0xB8D JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x666A5047451D0C744E58819166260F8048FE2786E33B3C1115AF94887A451CA7 SWAP1 PUSH2 0xBD9 SWAP1 DUP6 SWAP1 PUSH2 0x429F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x663 JUMPI PUSH2 0xC43 DUP5 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC04 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC1C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP5 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC34 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x853 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xBEA JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0xC7E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP1 PUSH2 0x4264 JUMP JUMPDEST PUSH1 0xFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x14 DUP4 MSTORE PUSH32 0x41535345545F50524F58595F4D49534D41544348000000000000000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP5 POP DUP6 AND DUP5 EQ PUSH2 0xCFA JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP DUP5 SWAP2 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND ISZERO PUSH2 0xDFE JUMPI DUP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH4 0xAE25532E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD78 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xD9C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x3EFE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH32 0x41535345545F50524F58595F49445F4D49534D41544348000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0xFF DUP1 DUP4 AND SWAP1 DUP9 AND EQ PUSH2 0xDFC JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP JUMPDEST PUSH1 0xFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND OR SWAP1 SSTORE MLOAD PUSH32 0x27EF5F484E50F2DAF7C2D82C60FE4CE409009541176EB64095BEAC369DB1D260 SWAP1 PUSH2 0xE6A SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x42AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xE97 PUSH2 0x36C6 JUMP JUMPDEST PUSH2 0xEA2 DUP5 DUP5 DUP5 PUSH2 0x1994 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH1 0x20 ADD MLOAD EQ PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x14 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x434F4D504C4554455F46494C4C5F4641494C4544000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0xF04 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF28 PUSH2 0x20A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP7 SWAP1 SWAP4 AND DUP3 MSTORE SWAP5 SWAP1 SWAP5 MSTORE SWAP1 SWAP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xF8B PUSH2 0x36C6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0xF98 PUSH2 0x36C6 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xFA7 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD MLOAD SWAP4 POP PUSH1 0x0 SWAP3 POP JUMPDEST DUP8 MLOAD DUP4 LT ISZERO PUSH2 0x1050 JUMPI DUP4 DUP9 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xFD5 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD DUP2 SWAP1 MSTORE POP PUSH2 0xFF5 DUP8 DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x272E JUMP JUMPDEST SWAP2 POP PUSH2 0x1021 DUP9 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1008 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP9 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x64B JUMPI INVALID JUMPDEST DUP5 MLOAD PUSH1 0x1 ADD DUP6 MSTORE SWAP1 POP PUSH2 0x1034 DUP6 DUP3 PUSH2 0x2740 JUMP JUMPDEST DUP7 DUP6 PUSH1 0x20 ADD MLOAD EQ ISZERO PUSH2 0x1045 JUMPI PUSH2 0x1050 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0xFBD JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP9 MLOAD GT PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4C454E4754485F475245415445525F5448414E5F305F52455155495245440000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x1110 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH2 0x111A DUP9 PUSH2 0x27A2 JUMP JUMPDEST PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x112F JUMPI INVALID JUMPDEST SWAP6 POP PUSH1 0x0 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x113F JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1193 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x5349474E41545552455F494C4C4547414C000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH2 0x710 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x4253 JUMP JUMPDEST PUSH1 0x1 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x11A1 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1209 JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x4C454E4754485F315F5245515549524544000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO PUSH2 0x11FF JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH1 0x0 SWAP7 POP PUSH2 0x1877 JUMP JUMPDEST PUSH1 0x2 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1217 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x131F JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH32 0x4C454E4754485F36365F52455155495245440000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x41 EQ PUSH2 0x1277 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1287 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP5 POP PUSH2 0x12A5 DUP9 PUSH1 0x1 PUSH2 0x2857 JUMP JUMPDEST SWAP4 POP PUSH2 0x12B2 DUP9 PUSH1 0x21 PUSH2 0x2857 JUMP JUMPDEST SWAP3 POP PUSH1 0x1 DUP11 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x12D7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x41BE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 PUSH1 0x0 DUP7 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12FB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP12 DUP2 AND SWAP1 DUP3 AND EQ SWAP9 POP SWAP3 POP PUSH2 0x1877 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x132D JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x14D9 JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH32 0x4C454E4754485F36365F52455155495245440000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x41 EQ PUSH2 0x138D JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x139D JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP5 POP PUSH2 0x13BB DUP9 PUSH1 0x1 PUSH2 0x2857 JUMP JUMPDEST SWAP4 POP PUSH2 0x13C8 DUP9 PUSH1 0x21 PUSH2 0x2857 JUMP JUMPDEST SWAP3 POP PUSH1 0x1 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE POP DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1435 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1416 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE SWAP3 ADD SWAP4 DUP5 MSTORE POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP6 SUB DUP2 MSTORE SWAP4 DUP3 ADD SWAP1 DUP2 SWAP1 MSTORE DUP4 MLOAD SWAP4 SWAP5 POP SWAP3 DUP4 SWAP3 POP SWAP1 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1495 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1476 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 PUSH1 0x0 DUP4 MSTORE SWAP2 ADD SWAP3 DUP4 SWAP1 MSTORE PUSH2 0x12D7 SWAP5 POP SWAP3 POP DUP10 SWAP2 DUP10 SWAP2 POP DUP9 SWAP1 PUSH2 0x41BE JUMP JUMPDEST PUSH1 0x4 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x14E7 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1559 JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x4C454E4754485F315F5245515549524544000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO PUSH2 0x1545 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND CALLER EQ SWAP7 POP PUSH2 0x1877 JUMP JUMPDEST PUSH1 0x5 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1567 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x160D JUMPI PUSH1 0x40 MLOAD PUSH32 0x1626BA7E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP11 AND SWAP1 PUSH4 0x1626BA7E SWAP1 PUSH2 0x15B4 SWAP1 DUP14 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x419E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x15E2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1606 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x3BEB JUMP JUMPDEST SWAP7 POP PUSH2 0x1877 JUMP JUMPDEST PUSH1 0x6 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x161B JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x16AE JUMPI PUSH2 0x162A DUP9 PUSH2 0x28EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x1665 JUMPI PUSH1 0x0 SWAP7 POP PUSH2 0x1877 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x9363470200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH4 0x93634702 SWAP1 PUSH2 0x15B4 SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x4168 JUMP JUMPDEST PUSH1 0x7 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x16BC JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x16EF JUMPI PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP14 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP7 POP PUSH2 0x1877 JUMP JUMPDEST PUSH1 0x8 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x16FD JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x17E8 JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH32 0x4C454E4754485F36365F52455155495245440000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x41 EQ PUSH2 0x175D JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x176D JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP5 POP PUSH2 0x178B DUP9 PUSH1 0x1 PUSH2 0x2857 JUMP JUMPDEST SWAP4 POP PUSH2 0x1798 DUP9 PUSH1 0x21 PUSH2 0x2857 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1B DUP1 DUP3 MSTORE PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A410000000000 PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE SWAP4 MLOAD SWAP5 SWAP8 POP PUSH1 0x1 SWAP5 SWAP3 SWAP4 DUP16 SWAP4 ADD SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 PUSH2 0x1435 JUMP JUMPDEST PUSH1 0x7 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x17F6 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1829 JUMPI PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP14 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP7 POP PUSH2 0x1877 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH32 0x5349474E41545552455F554E535550504F525445440000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH2 0x710 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x4253 JUMP JUMPDEST POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x188C PUSH2 0x36C6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x189B PUSH2 0x36C6 JUMP JUMPDEST DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x18AA JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD SWAP5 POP PUSH1 0x0 SWAP4 POP JUMPDEST DUP9 MLOAD DUP5 LT ISZERO PUSH2 0x1988 JUMPI DUP5 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x18D8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x140 ADD MSTORE DUP6 MLOAD PUSH2 0x18F4 SWAP1 DUP10 SWAP1 PUSH2 0x272E JUMP JUMPDEST SWAP3 POP PUSH2 0x1937 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1907 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP11 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1923 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0x298F JUMP JUMPDEST SWAP2 POP PUSH2 0x1963 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x194A JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP10 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC34 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x196F DUP7 DUP3 PUSH2 0x2740 JUMP JUMPDEST DUP6 MLOAD DUP9 EQ ISZERO PUSH2 0x197D JUMPI PUSH2 0x1988 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x18C0 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x199C PUSH2 0x36C6 JUMP JUMPDEST PUSH2 0x19A4 PUSH2 0x36A6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x19B2 DUP9 PUSH2 0x1D4A JUMP JUMPDEST SWAP4 POP PUSH2 0x19BC PUSH2 0x20A0 JUMP JUMPDEST SWAP3 POP PUSH2 0x19D0 DUP9 PUSH1 0xA0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x272E JUMP JUMPDEST SWAP2 POP PUSH2 0x19DC DUP8 DUP4 PUSH2 0x29AC JUMP JUMPDEST SWAP1 POP PUSH2 0x19EC DUP9 DUP6 DUP6 DUP11 DUP6 DUP12 PUSH2 0x2213 JUMP JUMPDEST PUSH2 0x19F6 DUP9 DUP3 PUSH2 0x29C4 JUMP JUMPDEST SWAP5 POP PUSH2 0x1A0D DUP9 DUP5 DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP10 PUSH2 0x24B3 JUMP JUMPDEST PUSH2 0x1050 DUP9 DUP5 DUP8 PUSH2 0x2A2E JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH32 0x5245454E5452414E43595F494C4C4547414C0000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x1A7C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP ADDRESS DUP7 DUP9 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP7 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP6 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1B2D JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1B0E JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 DUP4 MSTORE DUP6 SWAP1 KECCAK256 SLOAD DUP4 DUP7 ADD SWAP1 SWAP6 MSTORE PUSH1 0xF DUP4 MSTORE PUSH32 0x494E56414C49445F54585F484153480000000000000000000000000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP6 POP SWAP4 POP POP PUSH1 0xFF AND ISZERO SWAP1 POP PUSH2 0x1BBE JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND CALLER EQ PUSH2 0x1C8B JUMPI PUSH2 0x1C0A DUP2 DUP8 DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0x10A8 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH32 0x494E56414C49445F54585F5349474E4154555245000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x1C61 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH1 0x8 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD ADDRESS SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH32 0x4641494C45445F455845435554494F4E00000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP3 POP ISZERO ISZERO SWAP1 POP PUSH2 0x1D23 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP POP PUSH1 0x8 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1D52 PUSH2 0x36A6 JUMP JUMPDEST PUSH2 0x1D5B DUP3 PUSH2 0x2B5A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD ISZERO ISZERO PUSH2 0x1D78 JUMPI PUSH1 0x1 JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH2 0x1E21 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MLOAD ISZERO ISZERO PUSH2 0x1D8A JUMPI PUSH1 0x2 PUSH2 0x1D6E JUMP JUMPDEST PUSH2 0x100 DUP3 ADD MLOAD TIMESTAMP LT PUSH2 0x1D9D JUMPI PUSH1 0x4 PUSH2 0x1D6E JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1DC1 JUMPI PUSH1 0x6 PUSH2 0x1D6E JUMP JUMPDEST PUSH2 0x120 DUP3 ADD MLOAD DUP3 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD GT ISZERO PUSH2 0x1DEE JUMPI PUSH1 0x6 PUSH2 0x1D6E JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD MLOAD GT PUSH2 0x1E1C JUMPI PUSH1 0x5 PUSH2 0x1D6E JUMP JUMPDEST PUSH1 0x3 DUP2 MSTORE JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E2E PUSH2 0x36A6 JUMP JUMPDEST PUSH2 0x1E37 DUP3 PUSH2 0x1D4A JUMP JUMPDEST SWAP1 POP PUSH2 0x1E43 DUP3 DUP3 PUSH2 0x32CE JUMP JUMPDEST PUSH2 0xA97 DUP3 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x3417 JUMP JUMPDEST PUSH2 0x1E59 PUSH2 0x36C6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x1E66 PUSH2 0x36C6 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1E75 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD MLOAD SWAP4 POP PUSH1 0x0 SWAP3 POP JUMPDEST DUP8 MLOAD DUP4 LT ISZERO PUSH2 0x1050 JUMPI DUP4 DUP9 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1EA3 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1EC3 DUP8 DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x272E JUMP JUMPDEST SWAP2 POP PUSH2 0x1EEF DUP9 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1ED6 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP9 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC34 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x1EFB DUP6 DUP3 PUSH2 0x2740 JUMP JUMPDEST DUP7 DUP6 PUSH1 0x20 ADD MLOAD EQ ISZERO PUSH2 0x1F0C JUMPI PUSH2 0x1050 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x1E8B JUMP JUMPDEST PUSH2 0x1F1F PUSH2 0x36C6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1F2E PUSH2 0x36C6 JUMP JUMPDEST DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1F3D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD SWAP5 POP PUSH1 0x0 SWAP4 POP JUMPDEST DUP9 MLOAD DUP5 LT ISZERO PUSH2 0x1988 JUMPI DUP5 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1F6B JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x140 ADD MSTORE DUP6 MLOAD PUSH2 0x1F87 SWAP1 DUP10 SWAP1 PUSH2 0x272E JUMP JUMPDEST SWAP3 POP PUSH2 0x1F9A DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1907 JUMPI INVALID JUMPDEST SWAP2 POP PUSH2 0x1FC6 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1FAD JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP10 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x64B JUMPI INVALID JUMPDEST DUP6 MLOAD PUSH1 0x1 ADD DUP7 MSTORE SWAP1 POP PUSH2 0x1FD9 DUP7 DUP3 PUSH2 0x2740 JUMP JUMPDEST DUP6 MLOAD DUP9 EQ ISZERO PUSH2 0x1FE7 JUMPI PUSH2 0x1988 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x1F53 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x202E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP1 PUSH2 0x4264 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO PUSH2 0x2066 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xB DUP2 MSTORE PUSH32 0x322E302E312D616C706861000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x20C7 JUMPI PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x20C9 JUMP JUMPDEST CALLER JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x20E1 DUP3 PUSH1 0xA0 ADD MLOAD DUP3 PUSH1 0xA0 ADD MLOAD PUSH2 0x3493 JUMP JUMPDEST PUSH2 0x20F3 DUP4 PUSH1 0x80 ADD MLOAD DUP4 PUSH1 0x80 ADD MLOAD PUSH2 0x3493 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH32 0x4E454741544956455F5350524541445F52455155495245440000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP2 GT ISZERO PUSH2 0x214A JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2157 PUSH2 0x3677 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x216B DUP10 PUSH1 0xA0 ADD MLOAD DUP9 PUSH2 0x272E JUMP JUMPDEST SWAP4 POP PUSH2 0x217B DUP9 PUSH1 0xA0 ADD MLOAD DUP8 PUSH2 0x272E JUMP JUMPDEST SWAP3 POP PUSH2 0x218B DUP4 DUP10 PUSH1 0x80 ADD MLOAD PUSH2 0x3493 JUMP JUMPDEST PUSH2 0x2199 DUP6 DUP11 PUSH1 0xA0 ADD MLOAD PUSH2 0x3493 JUMP JUMPDEST GT PUSH2 0x21BB JUMPI DUP4 SWAP2 POP PUSH2 0x21B4 DUP9 PUSH1 0xA0 ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD DUP5 PUSH2 0x298F JUMP JUMPDEST SWAP1 POP PUSH2 0x21D4 JUMP JUMPDEST DUP3 SWAP1 POP PUSH2 0x21D1 DUP9 PUSH1 0x80 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD DUP4 PUSH2 0x298F JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x21DE DUP10 DUP4 PUSH2 0x29C4 JUMP JUMPDEST DUP6 MSTORE PUSH2 0x21EA DUP9 DUP3 PUSH2 0x29C4 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP8 ADD DUP3 SWAP1 MSTORE DUP7 MLOAD MLOAD SWAP2 ADD MLOAD PUSH2 0x2202 SWAP2 SWAP1 PUSH2 0x272E JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MSTORE POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP5 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH32 0x4F524445525F554E46494C4C41424C4500000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x2270 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH32 0x494E56414C49445F54414B45525F414D4F554E54000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP4 ISZERO ISZERO PUSH2 0x22C8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x2343 JUMPI PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xE DUP2 MSTORE PUSH32 0x494E56414C49445F53454E444552000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x2341 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x23CA JUMPI DUP4 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP7 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x494E56414C49445F54414B455200000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x23C8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD ISZERO ISZERO PUSH2 0x2441 JUMPI PUSH2 0x23E8 DUP6 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x0 ADD MLOAD DUP4 PUSH2 0x10A8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH32 0x494E56414C49445F4F524445525F5349474E4154555245000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x243F JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP JUMPDEST PUSH2 0x2454 DUP3 DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0x80 ADD MLOAD PUSH2 0x34B7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xE DUP2 MSTORE PUSH32 0x524F554E44494E475F4552524F52000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO PUSH2 0x24AA JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x24C1 DUP3 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x350D JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE DUP7 DUP2 ADD MLOAD DUP8 MLOAD DUP5 MLOAD SWAP4 DUP6 ADD MLOAD DUP6 DUP5 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH2 0x140 DUP13 ADD MLOAD PUSH2 0x160 DUP14 ADD MLOAD SWAP7 MLOAD DUP12 SWAP9 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP8 DUP9 AND SWAP9 SWAP8 SWAP1 SWAP7 AND SWAP7 PUSH32 0xDE19F18E1B56E6EADA7ED95CCA8398B602BE32F5864640537EE9A9A3532BB29D SWAP7 PUSH2 0x2543 SWAP7 DUP16 SWAP7 SWAP2 SWAP6 SWAP1 SWAP5 SWAP2 SWAP4 SWAP1 SWAP3 SWAP1 PUSH2 0x40E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x2565 DUP8 PUSH2 0x140 ADD MLOAD PUSH2 0x27A2 JUMP JUMPDEST PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DIV SWAP3 POP PUSH2 0x257C DUP7 PUSH2 0x140 ADD MLOAD PUSH2 0x27A2 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 SWAP5 DIV SWAP6 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x260B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x25E0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x260B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x25EE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x2634 DUP8 PUSH2 0x140 ADD MLOAD DUP5 DUP10 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST PUSH2 0x140 DUP7 ADD MLOAD DUP7 MLOAD DUP9 MLOAD DUP7 MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x2652 SWAP4 SWAP3 DUP7 SWAP3 SWAP1 SWAP2 PUSH2 0x351C JUMP JUMPDEST PUSH2 0x266C DUP8 PUSH2 0x140 ADD MLOAD DUP5 DUP10 PUSH1 0x0 ADD MLOAD DUP9 DUP9 PUSH1 0x40 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST PUSH2 0x268A DUP2 PUSH1 0x1 DUP10 PUSH1 0x0 ADD MLOAD DUP11 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST PUSH2 0x26A8 DUP2 PUSH1 0x1 DUP9 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP8 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ ISZERO PUSH2 0x26FA JUMPI PUSH2 0x26F5 DUP2 PUSH1 0x1 DUP8 DUP11 PUSH1 0x40 ADD MLOAD PUSH2 0x26F0 DUP10 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD DUP11 PUSH1 0x20 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x350D JUMP JUMPDEST PUSH2 0x351C JUMP JUMPDEST PUSH2 0x24AA JUMP JUMPDEST PUSH2 0x2714 DUP2 PUSH1 0x1 DUP8 DUP11 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST PUSH2 0x24AA DUP2 PUSH1 0x1 DUP8 DUP10 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x273A JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD PUSH2 0x274E SWAP2 SWAP1 PUSH2 0x350D JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x2764 SWAP2 SWAP1 PUSH2 0x350D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x277D SWAP2 SWAP1 PUSH2 0x350D JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x2796 SWAP2 SWAP1 PUSH2 0x350D JUMP JUMPDEST PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD GT PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F5448414E5F5A45524F5F4C454E4754485F52455155495245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4400000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x2828 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP DUP2 MLOAD DUP3 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x283B JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD DUP3 MLOAD PUSH1 0x0 NOT ADD SWAP1 SWAP3 MSTORE POP PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x28E1 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x14 DUP3 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x2973 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH2 0x2982 DUP3 PUSH1 0x14 DUP5 MLOAD SUB PUSH2 0x35C3 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x13 NOT ADD SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29A4 PUSH2 0x299E DUP6 DUP5 PUSH2 0x3493 JUMP JUMPDEST DUP5 PUSH2 0x3660 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x29BB JUMPI DUP2 PUSH2 0x29BD JUMP JUMPDEST DUP3 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x29CC PUSH2 0x36C6 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x80 DUP5 ADD MLOAD PUSH2 0x29E8 SWAP2 DUP5 SWAP2 PUSH2 0x298F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0x2A04 SWAP3 SWAP2 SWAP1 PUSH2 0x298F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xE0 DUP6 ADD MLOAD PUSH2 0x2A23 SWAP3 SWAP2 SWAP1 PUSH2 0x298F JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x2A41 DUP7 PUSH2 0x140 ADD MLOAD PUSH2 0x27A2 JUMP JUMPDEST PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DIV SWAP3 POP PUSH2 0x2A58 DUP7 PUSH2 0x160 ADD MLOAD PUSH2 0x27A2 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 SWAP5 DIV SWAP6 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x2AE7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2ABC JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2AE7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2ACA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x2B08 DUP7 PUSH2 0x140 ADD MLOAD DUP5 DUP9 PUSH1 0x0 ADD MLOAD DUP9 DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST PUSH2 0x2B22 DUP7 PUSH2 0x160 ADD MLOAD DUP4 DUP8 DUP10 PUSH1 0x0 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST PUSH2 0x2B3C DUP2 PUSH1 0x1 DUP9 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x40 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST PUSH2 0x2B52 DUP2 PUSH1 0x1 DUP8 DUP10 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x446F6D61696E536570617261746F72286164647265737320636F6E7472616374 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x21 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2BF1 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2BD2 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 ADDRESS PUSH13 0x1000000000000000000000000 MUL DUP4 DUP4 ADD MSTORE DUP5 MLOAD PUSH1 0x14 DUP2 DUP6 SUB ADD DUP2 MSTORE PUSH1 0x34 SWAP1 SWAP4 ADD SWAP5 DUP6 SWAP1 MSTORE DUP3 MLOAD SWAP1 SWAP7 POP SWAP2 SWAP5 POP DUP4 SWAP3 POP DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2C70 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2C51 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 PUSH32 0x4F72646572280000000000000000000000000000000000000000000000000000 DUP4 DUP4 ADD MSTORE PUSH32 0x61646472657373206D616B6572416464726573732C0000000000000000000000 PUSH1 0x26 DUP5 ADD MSTORE PUSH32 0x616464726573732074616B6572416464726573732C0000000000000000000000 PUSH1 0x3B DUP5 ADD MSTORE PUSH32 0x6164647265737320666565526563697069656E74416464726573732C00000000 PUSH1 0x50 DUP5 ADD MSTORE PUSH32 0x616464726573732073656E646572416464726573732C00000000000000000000 PUSH1 0x6C DUP5 ADD MSTORE PUSH32 0x75696E74323536206D616B65724173736574416D6F756E742C00000000000000 PUSH1 0x82 DUP5 ADD MSTORE PUSH32 0x75696E743235362074616B65724173736574416D6F756E742C00000000000000 PUSH1 0x9B DUP5 ADD MSTORE PUSH32 0x75696E74323536206D616B65724665652C000000000000000000000000000000 PUSH1 0xB4 DUP5 ADD MSTORE PUSH32 0x75696E743235362074616B65724665652C000000000000000000000000000000 PUSH1 0xC5 DUP5 ADD MSTORE PUSH32 0x75696E743235362065787069726174696F6E54696D655365636F6E64732C0000 PUSH1 0xD6 DUP5 ADD MSTORE PUSH32 0x75696E743235362073616C742C00000000000000000000000000000000000000 PUSH1 0xF4 DUP5 ADD MSTORE PUSH32 0x6279746573206D616B65724173736574446174612C0000000000000000000000 PUSH2 0x101 DUP5 ADD MSTORE PUSH32 0x62797465732074616B65724173736574446174612C0000000000000000000000 PUSH2 0x116 DUP5 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH2 0x12B DUP5 ADD MSTORE DUP5 MLOAD DUP1 DUP5 SUB PUSH2 0x10C ADD DUP2 MSTORE PUSH2 0x12C SWAP1 SWAP4 ADD SWAP5 DUP6 SWAP1 MSTORE DUP3 MLOAD SWAP1 SWAP7 POP SWAP2 SWAP5 POP DUP4 SWAP3 POP DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2EF3 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2ED4 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP9 PUSH1 0x80 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD DUP11 PUSH1 0xC0 ADD MLOAD DUP12 PUSH1 0xE0 ADD MLOAD DUP13 PUSH2 0x100 ADD MLOAD DUP14 PUSH2 0x120 ADD MLOAD DUP15 PUSH2 0x140 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2F8C JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2F6D JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2FEF JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2FD0 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP16 PUSH2 0x160 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x3054 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x3035 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x30B7 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x3098 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP14 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP13 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP12 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP11 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x3213 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x31F4 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x0 NOT PUSH1 0x20 SWAP5 DUP6 SUB PUSH2 0x100 EXP ADD SWAP1 DUP2 AND SWAP1 NOT SWAP2 SWAP1 SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP5 SWAP1 SWAP3 ADD DUP5 SWAP1 SUB DUP5 KECCAK256 DUP5 DUP3 ADD SWAP10 SWAP1 SWAP10 MSTORE DUP4 DUP3 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x60 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x80 DUP1 DUP3 ADD SWAP7 SWAP1 SWAP7 MSTORE DUP4 MLOAD DUP1 DUP3 SUB SWAP1 SWAP7 ADD DUP7 MSTORE PUSH1 0xA0 ADD SWAP3 DUP4 SWAP1 MSTORE POP POP DUP3 MLOAD SWAP1 SWAP2 DUP3 SWAP2 SWAP1 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x329C JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x327D JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 SWAP1 SWAP4 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP2 AND SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP3 ADD DUP3 SWAP1 SUB SWAP1 SWAP2 KECCAK256 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH32 0x4F524445525F554E46494C4C41424C4500000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x332D JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x33A8 JUMPI PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xE DUP2 MSTORE PUSH32 0x494E56414C49445F53454E444552000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x33A6 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP JUMPDEST PUSH2 0x33B0 PUSH2 0x20A0 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xD DUP2 MSTORE PUSH32 0x494E56414C49445F4D414B455200000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 AND SWAP2 AND EQ PUSH2 0x663 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH2 0x140 DUP6 ADD MLOAD PUSH2 0x160 DUP7 ADD MLOAD SWAP4 MLOAD DUP6 SWAP5 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP5 DUP6 AND SWAP5 SWAP4 SWAP1 SWAP4 AND SWAP3 PUSH32 0xB1AD640E9E79B6FDBC3C415DC2914AB54E753D2971F51EAB910F7AA317A3163A SWAP3 PUSH2 0x3487 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x4220 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 0x34AF JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 0x34AC JUMPI INVALID JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 0x29BD JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 DUP1 ISZERO ISZERO PUSH2 0x34C6 JUMPI INVALID JUMPDEST DUP7 DUP6 MULMOD SWAP2 POP DUP2 ISZERO ISZERO PUSH2 0x34DB JUMPI PUSH1 0x0 SWAP3 POP PUSH2 0x3504 JUMP JUMPDEST PUSH2 0x34FA PUSH2 0x34EB DUP4 PUSH3 0xF4240 PUSH2 0x3493 JUMP JUMPDEST PUSH2 0x34F5 DUP9 DUP8 PUSH2 0x3493 JUMP JUMPDEST PUSH2 0x3660 JUMP JUMPDEST PUSH2 0x3E8 DUP2 GT SWAP4 POP SWAP1 POP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x29BD JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 DUP3 GT ISZERO PUSH2 0x2B52 JUMPI POP PUSH1 0xFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH32 0xA85E59E400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 DUP2 SWAP1 PUSH4 0xA85E59E4 SWAP1 PUSH2 0x3589 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x41F3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x35B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x364D JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP POP ADD PUSH1 0x14 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 0x366E JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x120 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x368C PUSH2 0x36C6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3699 PUSH2 0x36C6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29BD DUP3 CALLDATALOAD PUSH2 0x4349 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x370C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x371F PUSH2 0x371A DUP3 PUSH2 0x42FC JUMP JUMPDEST PUSH2 0x42D5 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x375D JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x3747 DUP9 DUP3 PUSH2 0x38A1 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3731 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x3778 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3786 PUSH2 0x371A DUP3 PUSH2 0x42FC JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x375D JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x37AE DUP9 DUP3 PUSH2 0x38F0 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3798 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x37D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x37E3 PUSH2 0x371A DUP3 PUSH2 0x42FC JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x3808 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x375D JUMPI DUP2 PUSH2 0x381E DUP9 DUP3 PUSH2 0x384C JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x380B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29BD DUP3 CALLDATALOAD PUSH2 0x4355 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29BD DUP3 MLOAD PUSH2 0x4355 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29BD DUP3 CALLDATALOAD PUSH2 0x435A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1F DUP4 ADD DUP5 SGT PUSH2 0x386A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3882 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x389A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x38B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x38C0 PUSH2 0x371A DUP3 PUSH2 0x431D JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x38DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38E7 DUP4 DUP3 DUP5 PUSH2 0x436E JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3903 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x390E PUSH2 0x180 PUSH2 0x42D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x391C DUP5 DUP5 PUSH2 0x36EF JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x392D DUP5 DUP5 DUP4 ADD PUSH2 0x36EF JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x3941 DUP5 DUP3 DUP6 ADD PUSH2 0x36EF JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x3955 DUP5 DUP3 DUP6 ADD PUSH2 0x36EF JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x3969 DUP5 DUP3 DUP6 ADD PUSH2 0x384C JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x397D DUP5 DUP3 DUP6 ADD PUSH2 0x384C JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x3991 DUP5 DUP3 DUP6 ADD PUSH2 0x384C JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0x39A5 DUP5 DUP3 DUP6 ADD PUSH2 0x384C JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP PUSH2 0x100 PUSH2 0x39BA DUP5 DUP3 DUP6 ADD PUSH2 0x384C JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH2 0x120 PUSH2 0x39D0 DUP5 DUP3 DUP6 ADD PUSH2 0x384C JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MSTORE POP PUSH2 0x140 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x39F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39FE DUP5 DUP3 DUP6 ADD PUSH2 0x38A1 JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MSTORE POP PUSH2 0x160 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3A20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3A2C DUP5 DUP3 DUP6 ADD PUSH2 0x38A1 JUMP JUMPDEST PUSH2 0x160 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29BD DUP3 CALLDATALOAD PUSH2 0x435D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29BD DUP3 MLOAD PUSH2 0x435D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x29A4 DUP5 DUP5 PUSH2 0x36EF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3A82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3A8E DUP6 DUP6 PUSH2 0x36EF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3A9F DUP6 DUP3 DUP7 ADD PUSH2 0x36EF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3ABC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3AC8 DUP6 DUP6 PUSH2 0x36EF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3A9F DUP6 DUP3 DUP7 ADD PUSH2 0x3834 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3AEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x29A4 DUP5 DUP3 DUP6 ADD PUSH2 0x3767 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3B23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B46 DUP7 DUP3 DUP8 ADD PUSH2 0x3767 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B6F DUP7 DUP3 DUP8 ADD PUSH2 0x37C4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B98 DUP7 DUP3 DUP8 ADD PUSH2 0x36FB JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3BB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3BCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3BDA DUP7 DUP3 DUP8 ADD PUSH2 0x3767 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3B6F DUP7 DUP3 DUP8 ADD PUSH2 0x384C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3BFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x29A4 DUP5 DUP5 PUSH2 0x3840 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3C1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x29A4 DUP5 DUP5 PUSH2 0x384C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3C3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3A8E DUP6 DUP6 PUSH2 0x384C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3C5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3C68 DUP8 DUP8 PUSH2 0x384C JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x3C79 DUP8 DUP3 DUP9 ADD PUSH2 0x36EF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3CA2 DUP8 DUP3 DUP9 ADD PUSH2 0x3858 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3CC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3CCF DUP7 DUP7 PUSH2 0x384C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3CE0 DUP7 DUP3 DUP8 ADD PUSH2 0x36EF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3CFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B98 DUP7 DUP3 DUP8 ADD PUSH2 0x38A1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3D1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x29A4 DUP5 DUP3 DUP6 ADD PUSH2 0x38F0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3D54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D77 DUP8 DUP3 DUP9 ADD PUSH2 0x38F0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3DA0 DUP8 DUP3 DUP9 ADD PUSH2 0x38F0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3DC9 DUP8 DUP3 DUP9 ADD PUSH2 0x38A1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3DF2 DUP8 DUP3 DUP9 ADD PUSH2 0x38A1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3E13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3E36 DUP7 DUP3 DUP8 ADD PUSH2 0x38F0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3CE0 DUP7 DUP3 DUP8 ADD PUSH2 0x384C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3E60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3E6C DUP10 DUP10 PUSH2 0x384C JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x3E7D DUP10 DUP3 DUP11 ADD PUSH2 0x36EF JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3EA6 DUP10 DUP3 DUP11 ADD PUSH2 0x3858 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3EC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3ED1 DUP10 DUP3 DUP11 ADD PUSH2 0x3858 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3EF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x29A4 DUP5 DUP5 PUSH2 0x3A39 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3F10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x29A4 DUP5 DUP5 PUSH2 0x3A45 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3F31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3F3D DUP7 DUP7 PUSH2 0x3A39 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3F4E DUP7 DUP3 DUP8 ADD PUSH2 0x36EF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x3B98 DUP7 DUP3 DUP8 ADD PUSH2 0x36EF JUMP JUMPDEST PUSH2 0x3F68 DUP2 PUSH2 0x4349 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x3F68 DUP2 PUSH2 0x4355 JUMP JUMPDEST PUSH2 0x3F68 DUP2 PUSH2 0x435A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F8B DUP3 PUSH2 0x4345 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x3F9F DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x437A JUMP JUMPDEST PUSH2 0x3FA8 DUP2 PUSH2 0x43A6 JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x3F68 DUP2 PUSH2 0x4363 JUMP JUMPDEST PUSH1 0x33 DUP2 MSTORE PUSH32 0x4F6E6C7920636F6E7472616374206F776E657220697320616C6C6F7765642074 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6F2063616C6C2074686973206D6574686F642E00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0x4025 DUP5 DUP3 PUSH2 0x3F77 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x4038 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x3F77 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x404B PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x3F77 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x663 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x3F77 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x120 DUP4 ADD SWAP1 PUSH2 0x4070 DUP5 DUP3 PUSH2 0x4014 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x4083 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x4014 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x663 PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x3F77 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 DUP4 ADD SWAP1 PUSH2 0x40A8 DUP5 DUP3 PUSH2 0x40CE JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x40BB PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x3F77 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x663 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x3F68 DUP2 PUSH2 0x435D JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x20C9 DUP3 DUP5 PUSH2 0x3F5F JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD PUSH2 0x40F3 DUP3 DUP11 PUSH2 0x3F5F JUMP JUMPDEST PUSH2 0x4100 PUSH1 0x20 DUP4 ADD DUP10 PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x410D PUSH1 0x40 DUP4 ADD DUP9 PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x411A PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x4127 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x3F77 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x4139 DUP2 DUP6 PUSH2 0x3F80 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x414D DUP2 DUP5 PUSH2 0x3F80 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x20C9 DUP3 DUP5 PUSH2 0x3F6E JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x4176 DUP3 DUP7 PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x4183 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x3F5F JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x4195 DUP2 DUP5 PUSH2 0x3F80 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x41AC DUP3 DUP6 PUSH2 0x3F77 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x29A4 DUP2 DUP5 PUSH2 0x3F80 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x41CC DUP3 DUP8 PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x41D9 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x40CE JUMP JUMPDEST PUSH2 0x41E6 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x4195 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x3F77 JUMP JUMPDEST PUSH1 0x80 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x4204 DUP2 DUP8 PUSH2 0x3F80 JUMP JUMPDEST SWAP1 POP PUSH2 0x4213 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x3F5F JUMP JUMPDEST PUSH2 0x41E6 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3F5F JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x4231 DUP2 DUP6 PUSH2 0x3F80 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x29A4 DUP2 DUP5 PUSH2 0x3F80 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x20C9 DUP3 DUP5 PUSH2 0x3FB5 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x29BD DUP2 DUP5 PUSH2 0x3F80 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x20C9 DUP2 PUSH2 0x3FBE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x20C9 DUP3 DUP5 PUSH2 0x4014 JUMP JUMPDEST PUSH2 0x120 DUP2 ADD PUSH2 0x20C9 DUP3 DUP5 PUSH2 0x405E JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x20C9 DUP3 DUP5 PUSH2 0x4097 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x20C9 DUP3 DUP5 PUSH2 0x3F77 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x42BB DUP3 DUP7 PUSH2 0x40CE JUMP JUMPDEST PUSH2 0x42C8 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x3F5F JUMP JUMPDEST PUSH2 0x29A4 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3F5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x42F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4313 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20C9 DUP3 PUSH2 0x4349 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4395 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x437D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x663 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 0xc 0xdc BYTE DUP14 0xf8 0xfc RETURN MOD DUP13 SHR 0x2c SWAP5 SWAP10 0xb0 0x49 0x48 PUSH22 0xA807CFDD1D5F3D94484C3A4496B04E6C657870657269 PUSH14 0x656E74616CF50037000000000000 ",
				"sourceMap": "894:607:2:-;;;1213:286;8:9:-1;5:2;;;30:1;27;20:12;5:2;1213:286:2;;;;;;;;;;;;;;;;;;;;;;;;363:5:30;:18;;-1:-1:-1;;;;;;363:18:30;371:10;363:18;;;1658:30:6;;1348:13:2;;1658:30:6;;:14;;:30;;;;;:::i;:::-;;1588:107;1213:286:2;894:607;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;894:607:2;;;-1:-1:-1;894:607:2;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;6:442:-1:-;;111:4;99:17;;95:27;-1:-1;85:2;;136:1;133;126:12;85:2;166:6;160:13;188:64;203:48;244:6;203:48;;;188:64;;;179:73;;272:6;265:5;258:21;308:4;300:6;296:17;341:4;334:5;330:16;376:3;367:6;362:3;358:16;355:25;352:2;;;393:1;390;383:12;352:2;403:39;435:6;430:3;425;403:39;;;78:370;;;;;;;;456:360;;580:2;568:9;559:7;555:23;551:32;548:2;;;596:1;593;586:12;548:2;631:24;;-1:-1;;;;;664:30;;661:2;;;707:1;704;697:12;661:2;727:73;792:7;783:6;772:9;768:22;727:73;;;717:83;542:274;-1:-1;;;;542:274;823:256;885:2;879:9;911:17;;;-1:-1;;;;;971:34;;1007:22;;;968:62;965:2;;;1043:1;1040;1033:12;965:2;1059;1052:22;863:216;;-1:-1;863:216;1086:258;;-1:-1;;;;;1221:6;1218:30;1215:2;;;1261:1;1258;1251:12;1215:2;-1:-1;1334:4;1305;1282:17;;;;-1:-1;;1278:33;1324:15;;1152:192;1352:268;1417:1;1424:101;1438:6;1435:1;1432:13;1424:101;;;1505:11;;;1499:18;1486:11;;;1479:39;1460:2;1453:10;1424:101;;;1540:6;1537:1;1534:13;1531:2;;;1605:1;1596:6;1591:3;1587:16;1580:27;1531:2;1401:219;;;;;;894:607:2;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x195 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x288CDC91 DUP2 EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x297BB70B EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0x2AC12622 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x3683EF8E EQ PUSH2 0x21F JUMPI DUP1 PUSH4 0x38077164 EQ PUSH2 0x23F JUMPI DUP1 PUSH4 0x3C28D861 EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0x3E228BAE EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0x4AC14782 EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0x4D0AE546 EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x4F9559B1 EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0x50DDE190 EQ PUSH2 0x326 JUMPI DUP1 PUSH4 0x5C78D0C7 EQ PUSH2 0x346 JUMPI DUP1 PUSH4 0x642F2EAF EQ PUSH2 0x366 JUMPI DUP1 PUSH4 0x64A3BC15 EQ PUSH2 0x386 JUMPI DUP1 PUSH4 0x6F3627F8 EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0x77FCCE68 EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0x7B8E3514 EQ PUSH2 0x3E6 JUMPI DUP1 PUSH4 0x7E1D9808 EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0x82C174D0 EQ PUSH2 0x426 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x446 JUMPI DUP1 PUSH4 0x92C1421E EQ PUSH2 0x468 JUMPI DUP1 PUSH4 0x93634702 EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0xA3E20380 EQ PUSH2 0x4A8 JUMPI DUP1 PUSH4 0xB4BE83D5 EQ PUSH2 0x4C8 JUMPI DUP1 PUSH4 0xBFC8BFCE EQ PUSH2 0x4E8 JUMPI DUP1 PUSH4 0xC75E0A81 EQ PUSH2 0x508 JUMPI DUP1 PUSH4 0xD46B02C3 EQ PUSH2 0x535 JUMPI DUP1 PUSH4 0xDD1C7D18 EQ PUSH2 0x555 JUMPI DUP1 PUSH4 0xE5FA431B EQ PUSH2 0x575 JUMPI DUP1 PUSH4 0xEEA086BA EQ PUSH2 0x595 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5AA JUMPI DUP1 PUSH4 0xFFA1AD74 EQ PUSH2 0x5CA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BA PUSH2 0x1B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C09 JUMP JUMPDEST PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x429F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x1EB CALLDATASIZE PUSH1 0x4 PUSH2 0x3B0E JUMP JUMPDEST PUSH2 0x5FE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x20D CALLDATASIZE PUSH1 0x4 PUSH2 0x3C09 JUMP JUMPDEST PUSH2 0x669 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x415A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x23A CALLDATASIZE PUSH1 0x4 PUSH2 0x3C46 JUMP JUMPDEST PUSH2 0x67E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25F PUSH2 0x25A CALLDATASIZE PUSH1 0x4 PUSH2 0x3EE0 JUMP JUMPDEST PUSH2 0x74C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4245 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH2 0x287 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D3E JUMP JUMPDEST PUSH2 0x767 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4282 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x2B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x3DFE JUMP JUMPDEST PUSH2 0x853 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4274 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x2E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AD9 JUMP JUMPDEST PUSH2 0xA63 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x301 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B0E JUMP JUMPDEST PUSH2 0xA9B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x321 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C09 JUMP JUMPDEST PUSH2 0xB00 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x341 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B0E JUMP JUMPDEST PUSH2 0xBE7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x352 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x361 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F1C JUMP JUMPDEST PUSH2 0xC4C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x381 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C09 JUMP JUMPDEST PUSH2 0xE7A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x3A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3DFE JUMP JUMPDEST PUSH2 0xE8F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BA PUSH2 0x3C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A51 JUMP JUMPDEST PUSH2 0xF0C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x3E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AA9 JUMP JUMPDEST PUSH2 0xF1E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x401 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A6F JUMP JUMPDEST PUSH2 0xF63 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x412 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x421 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BA2 JUMP JUMPDEST PUSH2 0xF83 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x432 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x441 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C27 JUMP JUMPDEST PUSH2 0x105B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45B PUSH2 0x107B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x40D7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x474 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45B PUSH2 0x483 CALLDATASIZE PUSH1 0x4 PUSH2 0x3EE0 JUMP JUMPDEST PUSH2 0x108A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x4A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3CAE JUMP JUMPDEST PUSH2 0x10A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x4C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BA2 JUMP JUMPDEST PUSH2 0x1884 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x4E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3DFE JUMP JUMPDEST PUSH2 0x1994 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x503 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E47 JUMP JUMPDEST PUSH2 0x1A18 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x514 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x528 PUSH2 0x523 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D09 JUMP JUMPDEST PUSH2 0x1D4A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4291 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x541 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x550 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D09 JUMP JUMPDEST PUSH2 0x1E26 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x561 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x570 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BA2 JUMP JUMPDEST PUSH2 0x1E51 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x581 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x590 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BA2 JUMP JUMPDEST PUSH2 0x1F17 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45B PUSH2 0x1FF2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x5C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A51 JUMP JUMPDEST PUSH2 0x2001 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5DF PUSH2 0x2069 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x663 JUMPI PUSH2 0x65A DUP5 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x61B JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x633 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP5 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x64B JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x1994 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x601 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x6B9 DUP5 DUP5 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0x10A8 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x494E56414C49445F5349474E4154555245000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x719 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH2 0x76F PUSH2 0x3677 JUMP JUMPDEST PUSH2 0x777 PUSH2 0x36A6 JUMP JUMPDEST PUSH2 0x77F PUSH2 0x36A6 JUMP JUMPDEST PUSH2 0x160 DUP1 DUP9 ADD MLOAD PUSH2 0x140 DUP1 DUP10 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP9 ADD MLOAD SWAP1 DUP8 ADD MSTORE PUSH1 0x0 PUSH2 0x7A2 DUP9 PUSH2 0x1D4A JUMP JUMPDEST SWAP3 POP PUSH2 0x7AD DUP8 PUSH2 0x1D4A JUMP JUMPDEST SWAP2 POP PUSH2 0x7B7 PUSH2 0x20A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x7C3 DUP9 DUP9 PUSH2 0x20CF JUMP JUMPDEST PUSH2 0x7D7 DUP9 DUP9 DUP6 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x214F JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x7F1 SWAP1 DUP10 SWAP1 DUP6 SWAP1 DUP5 SWAP1 DUP1 DUP12 PUSH2 0x2213 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP6 ADD MLOAD ADD MLOAD PUSH2 0x80A SWAP1 DUP9 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP1 DUP11 PUSH2 0x2213 JUMP JUMPDEST PUSH2 0x823 DUP9 DUP3 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0x24B3 JUMP JUMPDEST PUSH2 0x83C DUP8 DUP3 DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0x24B3 JUMP JUMPDEST PUSH2 0x848 DUP9 DUP9 DUP4 DUP8 PUSH2 0x2552 JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x85B PUSH2 0x36C6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xB4BE83D500000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE PUSH1 0x60 PUSH1 0x4 DUP4 ADD DUP2 DUP2 MSTORE DUP9 MLOAD PUSH1 0x64 DUP6 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 DUP1 DUP12 ADD MLOAD PUSH1 0x84 DUP8 ADD MSTORE SWAP6 DUP11 ADD MLOAD PUSH1 0xA4 DUP7 ADD MSTORE SWAP2 DUP10 ADD MLOAD PUSH1 0xC4 DUP6 ADD MSTORE PUSH1 0x80 DUP10 ADD MLOAD PUSH1 0xE4 DUP6 ADD MSTORE PUSH1 0xA0 DUP10 ADD MLOAD PUSH2 0x104 DUP6 ADD MSTORE PUSH1 0xC0 DUP10 ADD MLOAD PUSH2 0x124 DUP6 ADD MSTORE PUSH1 0xE0 DUP10 ADD MLOAD PUSH2 0x144 DUP6 ADD MSTORE PUSH2 0x100 DUP10 ADD MLOAD PUSH2 0x164 DUP6 ADD MSTORE PUSH2 0x120 DUP10 ADD MLOAD PUSH2 0x184 DUP6 ADD MSTORE PUSH2 0x140 DUP10 ADD DUP1 MLOAD PUSH2 0x1A4 DUP7 ADD SWAP1 DUP2 MSTORE PUSH2 0x160 DUP12 ADD MLOAD PUSH2 0x1C4 DUP8 ADD MSTORE PUSH2 0x180 SWAP1 MSTORE MLOAD DUP1 MLOAD PUSH2 0x1E4 DUP7 ADD DUP2 SWAP1 MSTORE SWAP4 SWAP6 SWAP2 SWAP4 DUP5 SWAP4 SWAP3 PUSH1 0x24 DUP8 ADD SWAP3 DUP5 SWAP3 PUSH2 0x204 DUP10 ADD SWAP3 SWAP2 DUP3 ADD SWAP2 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x95E JUMPI DUP4 MLOAD DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x940 JUMP JUMPDEST POP POP POP POP DUP2 DUP2 SUB PUSH2 0x160 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP13 ADD MLOAD DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 DUP3 ADD SWAP2 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9A7 JUMPI DUP4 MLOAD DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x989 JUMP JUMPDEST POP POP POP DUP12 DUP5 MSTORE POP DUP5 DUP2 SUB PUSH1 0x20 SWAP4 DUP5 ADD SWAP1 DUP2 MSTORE DUP11 MLOAD DUP1 DUP4 MSTORE SWAP1 SWAP4 SWAP2 DUP3 ADD SWAP2 DUP12 DUP2 ADD SWAP2 SWAP1 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9EF JUMPI DUP4 MLOAD DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x9D1 JUMP JUMPDEST POP PUSH1 0x80 DUP11 DUP12 DUP7 SUB DUP13 ADDRESS GAS DELEGATECALL DUP1 DUP1 ISZERO PUSH2 0xA0E JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0xA2C JUMPI PUSH2 0xA4F JUMP JUMPDEST PUSH1 0x0 DUP15 MSTORE PUSH1 0x0 PUSH1 0x20 DUP16 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP16 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP16 ADD MSTORE PUSH2 0xA4F JUMP JUMPDEST DUP12 MLOAD DUP15 MSTORE PUSH1 0x20 DUP13 ADD MLOAD PUSH1 0x20 DUP16 ADD MSTORE PUSH1 0x40 DUP13 ADD MLOAD PUSH1 0x40 DUP16 ADD MSTORE PUSH1 0x60 DUP13 ADD MLOAD PUSH1 0x60 DUP16 ADD MSTORE JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xA97 JUMPI PUSH2 0xA8F DUP3 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA80 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x1E26 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xA66 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x663 JUMPI PUSH2 0xAF7 DUP5 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAB8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAD0 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP5 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAE8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0xE8F JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xA9E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xB0D PUSH2 0x20A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x17 DUP4 MSTORE PUSH32 0x494E56414C49445F4E45575F4D414B45525F45504F4348000000000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP5 POP PUSH1 0x1 DUP7 ADD SWAP4 POP SWAP1 SWAP2 POP DUP2 DUP4 GT PUSH2 0xB8D JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x666A5047451D0C744E58819166260F8048FE2786E33B3C1115AF94887A451CA7 SWAP1 PUSH2 0xBD9 SWAP1 DUP6 SWAP1 PUSH2 0x429F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x663 JUMPI PUSH2 0xC43 DUP5 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC04 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC1C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP5 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC34 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x853 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xBEA JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0xC7E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP1 PUSH2 0x4264 JUMP JUMPDEST PUSH1 0xFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x14 DUP4 MSTORE PUSH32 0x41535345545F50524F58595F4D49534D41544348000000000000000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP5 POP DUP6 AND DUP5 EQ PUSH2 0xCFA JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP DUP5 SWAP2 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND ISZERO PUSH2 0xDFE JUMPI DUP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH4 0xAE25532E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD78 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xD9C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x3EFE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH32 0x41535345545F50524F58595F49445F4D49534D41544348000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0xFF DUP1 DUP4 AND SWAP1 DUP9 AND EQ PUSH2 0xDFC JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP JUMPDEST PUSH1 0xFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND OR SWAP1 SSTORE MLOAD PUSH32 0x27EF5F484E50F2DAF7C2D82C60FE4CE409009541176EB64095BEAC369DB1D260 SWAP1 PUSH2 0xE6A SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x42AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xE97 PUSH2 0x36C6 JUMP JUMPDEST PUSH2 0xEA2 DUP5 DUP5 DUP5 PUSH2 0x1994 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH1 0x20 ADD MLOAD EQ PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x14 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x434F4D504C4554455F46494C4C5F4641494C4544000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0xF04 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF28 PUSH2 0x20A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP7 SWAP1 SWAP4 AND DUP3 MSTORE SWAP5 SWAP1 SWAP5 MSTORE SWAP1 SWAP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xF8B PUSH2 0x36C6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0xF98 PUSH2 0x36C6 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xFA7 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD MLOAD SWAP4 POP PUSH1 0x0 SWAP3 POP JUMPDEST DUP8 MLOAD DUP4 LT ISZERO PUSH2 0x1050 JUMPI DUP4 DUP9 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xFD5 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD DUP2 SWAP1 MSTORE POP PUSH2 0xFF5 DUP8 DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x272E JUMP JUMPDEST SWAP2 POP PUSH2 0x1021 DUP9 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1008 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP9 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x64B JUMPI INVALID JUMPDEST DUP5 MLOAD PUSH1 0x1 ADD DUP6 MSTORE SWAP1 POP PUSH2 0x1034 DUP6 DUP3 PUSH2 0x2740 JUMP JUMPDEST DUP7 DUP6 PUSH1 0x20 ADD MLOAD EQ ISZERO PUSH2 0x1045 JUMPI PUSH2 0x1050 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0xFBD JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP9 MLOAD GT PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4C454E4754485F475245415445525F5448414E5F305F52455155495245440000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x1110 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH2 0x111A DUP9 PUSH2 0x27A2 JUMP JUMPDEST PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x112F JUMPI INVALID JUMPDEST SWAP6 POP PUSH1 0x0 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x113F JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1193 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x5349474E41545552455F494C4C4547414C000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH2 0x710 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x4253 JUMP JUMPDEST PUSH1 0x1 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x11A1 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1209 JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x4C454E4754485F315F5245515549524544000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO PUSH2 0x11FF JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH1 0x0 SWAP7 POP PUSH2 0x1877 JUMP JUMPDEST PUSH1 0x2 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1217 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x131F JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH32 0x4C454E4754485F36365F52455155495245440000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x41 EQ PUSH2 0x1277 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1287 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP5 POP PUSH2 0x12A5 DUP9 PUSH1 0x1 PUSH2 0x2857 JUMP JUMPDEST SWAP4 POP PUSH2 0x12B2 DUP9 PUSH1 0x21 PUSH2 0x2857 JUMP JUMPDEST SWAP3 POP PUSH1 0x1 DUP11 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x12D7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x41BE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 PUSH1 0x0 DUP7 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12FB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP12 DUP2 AND SWAP1 DUP3 AND EQ SWAP9 POP SWAP3 POP PUSH2 0x1877 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x132D JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x14D9 JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH32 0x4C454E4754485F36365F52455155495245440000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x41 EQ PUSH2 0x138D JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x139D JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP5 POP PUSH2 0x13BB DUP9 PUSH1 0x1 PUSH2 0x2857 JUMP JUMPDEST SWAP4 POP PUSH2 0x13C8 DUP9 PUSH1 0x21 PUSH2 0x2857 JUMP JUMPDEST SWAP3 POP PUSH1 0x1 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE POP DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1435 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1416 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE SWAP3 ADD SWAP4 DUP5 MSTORE POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP6 SUB DUP2 MSTORE SWAP4 DUP3 ADD SWAP1 DUP2 SWAP1 MSTORE DUP4 MLOAD SWAP4 SWAP5 POP SWAP3 DUP4 SWAP3 POP SWAP1 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1495 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1476 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 PUSH1 0x0 DUP4 MSTORE SWAP2 ADD SWAP3 DUP4 SWAP1 MSTORE PUSH2 0x12D7 SWAP5 POP SWAP3 POP DUP10 SWAP2 DUP10 SWAP2 POP DUP9 SWAP1 PUSH2 0x41BE JUMP JUMPDEST PUSH1 0x4 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x14E7 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1559 JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH32 0x4C454E4754485F315F5245515549524544000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO PUSH2 0x1545 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND CALLER EQ SWAP7 POP PUSH2 0x1877 JUMP JUMPDEST PUSH1 0x5 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1567 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x160D JUMPI PUSH1 0x40 MLOAD PUSH32 0x1626BA7E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP11 AND SWAP1 PUSH4 0x1626BA7E SWAP1 PUSH2 0x15B4 SWAP1 DUP14 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x419E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x15E2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1606 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x3BEB JUMP JUMPDEST SWAP7 POP PUSH2 0x1877 JUMP JUMPDEST PUSH1 0x6 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x161B JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x16AE JUMPI PUSH2 0x162A DUP9 PUSH2 0x28EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x1665 JUMPI PUSH1 0x0 SWAP7 POP PUSH2 0x1877 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x9363470200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH4 0x93634702 SWAP1 PUSH2 0x15B4 SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x4168 JUMP JUMPDEST PUSH1 0x7 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x16BC JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x16EF JUMPI PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP14 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP7 POP PUSH2 0x1877 JUMP JUMPDEST PUSH1 0x8 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x16FD JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x17E8 JUMPI DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH32 0x4C454E4754485F36365F52455155495245440000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x41 EQ PUSH2 0x175D JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x176D JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP5 POP PUSH2 0x178B DUP9 PUSH1 0x1 PUSH2 0x2857 JUMP JUMPDEST SWAP4 POP PUSH2 0x1798 DUP9 PUSH1 0x21 PUSH2 0x2857 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1B DUP1 DUP3 MSTORE PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A410000000000 PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE SWAP4 MLOAD SWAP5 SWAP8 POP PUSH1 0x1 SWAP5 SWAP3 SWAP4 DUP16 SWAP4 ADD SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 PUSH2 0x1435 JUMP JUMPDEST PUSH1 0x7 DUP7 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x17F6 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1829 JUMPI PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP14 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP7 POP PUSH2 0x1877 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH32 0x5349474E41545552455F554E535550504F525445440000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH2 0x710 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x4253 JUMP JUMPDEST POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x188C PUSH2 0x36C6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x189B PUSH2 0x36C6 JUMP JUMPDEST DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x18AA JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD SWAP5 POP PUSH1 0x0 SWAP4 POP JUMPDEST DUP9 MLOAD DUP5 LT ISZERO PUSH2 0x1988 JUMPI DUP5 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x18D8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x140 ADD MSTORE DUP6 MLOAD PUSH2 0x18F4 SWAP1 DUP10 SWAP1 PUSH2 0x272E JUMP JUMPDEST SWAP3 POP PUSH2 0x1937 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1907 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP11 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1923 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0x298F JUMP JUMPDEST SWAP2 POP PUSH2 0x1963 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x194A JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP10 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC34 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x196F DUP7 DUP3 PUSH2 0x2740 JUMP JUMPDEST DUP6 MLOAD DUP9 EQ ISZERO PUSH2 0x197D JUMPI PUSH2 0x1988 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x18C0 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x199C PUSH2 0x36C6 JUMP JUMPDEST PUSH2 0x19A4 PUSH2 0x36A6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x19B2 DUP9 PUSH2 0x1D4A JUMP JUMPDEST SWAP4 POP PUSH2 0x19BC PUSH2 0x20A0 JUMP JUMPDEST SWAP3 POP PUSH2 0x19D0 DUP9 PUSH1 0xA0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x272E JUMP JUMPDEST SWAP2 POP PUSH2 0x19DC DUP8 DUP4 PUSH2 0x29AC JUMP JUMPDEST SWAP1 POP PUSH2 0x19EC DUP9 DUP6 DUP6 DUP11 DUP6 DUP12 PUSH2 0x2213 JUMP JUMPDEST PUSH2 0x19F6 DUP9 DUP3 PUSH2 0x29C4 JUMP JUMPDEST SWAP5 POP PUSH2 0x1A0D DUP9 DUP5 DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP10 PUSH2 0x24B3 JUMP JUMPDEST PUSH2 0x1050 DUP9 DUP5 DUP8 PUSH2 0x2A2E JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH32 0x5245454E5452414E43595F494C4C4547414C0000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x1A7C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP ADDRESS DUP7 DUP9 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP7 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP6 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1B2D JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1B0E JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 DUP4 MSTORE DUP6 SWAP1 KECCAK256 SLOAD DUP4 DUP7 ADD SWAP1 SWAP6 MSTORE PUSH1 0xF DUP4 MSTORE PUSH32 0x494E56414C49445F54585F484153480000000000000000000000000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP6 POP SWAP4 POP POP PUSH1 0xFF AND ISZERO SWAP1 POP PUSH2 0x1BBE JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND CALLER EQ PUSH2 0x1C8B JUMPI PUSH2 0x1C0A DUP2 DUP8 DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0x10A8 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH32 0x494E56414C49445F54585F5349474E4154555245000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x1C61 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH1 0x8 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD ADDRESS SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH32 0x4641494C45445F455845435554494F4E00000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP3 POP ISZERO ISZERO SWAP1 POP PUSH2 0x1D23 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP POP PUSH1 0x8 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1D52 PUSH2 0x36A6 JUMP JUMPDEST PUSH2 0x1D5B DUP3 PUSH2 0x2B5A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD ISZERO ISZERO PUSH2 0x1D78 JUMPI PUSH1 0x1 JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH2 0x1E21 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MLOAD ISZERO ISZERO PUSH2 0x1D8A JUMPI PUSH1 0x2 PUSH2 0x1D6E JUMP JUMPDEST PUSH2 0x100 DUP3 ADD MLOAD TIMESTAMP LT PUSH2 0x1D9D JUMPI PUSH1 0x4 PUSH2 0x1D6E JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1DC1 JUMPI PUSH1 0x6 PUSH2 0x1D6E JUMP JUMPDEST PUSH2 0x120 DUP3 ADD MLOAD DUP3 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD GT ISZERO PUSH2 0x1DEE JUMPI PUSH1 0x6 PUSH2 0x1D6E JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD MLOAD GT PUSH2 0x1E1C JUMPI PUSH1 0x5 PUSH2 0x1D6E JUMP JUMPDEST PUSH1 0x3 DUP2 MSTORE JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E2E PUSH2 0x36A6 JUMP JUMPDEST PUSH2 0x1E37 DUP3 PUSH2 0x1D4A JUMP JUMPDEST SWAP1 POP PUSH2 0x1E43 DUP3 DUP3 PUSH2 0x32CE JUMP JUMPDEST PUSH2 0xA97 DUP3 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x3417 JUMP JUMPDEST PUSH2 0x1E59 PUSH2 0x36C6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x1E66 PUSH2 0x36C6 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1E75 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD MLOAD SWAP4 POP PUSH1 0x0 SWAP3 POP JUMPDEST DUP8 MLOAD DUP4 LT ISZERO PUSH2 0x1050 JUMPI DUP4 DUP9 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1EA3 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1EC3 DUP8 DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x272E JUMP JUMPDEST SWAP2 POP PUSH2 0x1EEF DUP9 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1ED6 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP9 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC34 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x1EFB DUP6 DUP3 PUSH2 0x2740 JUMP JUMPDEST DUP7 DUP6 PUSH1 0x20 ADD MLOAD EQ ISZERO PUSH2 0x1F0C JUMPI PUSH2 0x1050 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x1E8B JUMP JUMPDEST PUSH2 0x1F1F PUSH2 0x36C6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1F2E PUSH2 0x36C6 JUMP JUMPDEST DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1F3D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD SWAP5 POP PUSH1 0x0 SWAP4 POP JUMPDEST DUP9 MLOAD DUP5 LT ISZERO PUSH2 0x1988 JUMPI DUP5 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1F6B JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x140 ADD MSTORE DUP6 MLOAD PUSH2 0x1F87 SWAP1 DUP10 SWAP1 PUSH2 0x272E JUMP JUMPDEST SWAP3 POP PUSH2 0x1F9A DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1907 JUMPI INVALID JUMPDEST SWAP2 POP PUSH2 0x1FC6 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1FAD JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP10 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x64B JUMPI INVALID JUMPDEST DUP6 MLOAD PUSH1 0x1 ADD DUP7 MSTORE SWAP1 POP PUSH2 0x1FD9 DUP7 DUP3 PUSH2 0x2740 JUMP JUMPDEST DUP6 MLOAD DUP9 EQ ISZERO PUSH2 0x1FE7 JUMPI PUSH2 0x1988 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x1F53 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x202E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP1 PUSH2 0x4264 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO PUSH2 0x2066 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xB DUP2 MSTORE PUSH32 0x322E302E312D616C706861000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x20C7 JUMPI PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x20C9 JUMP JUMPDEST CALLER JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x20E1 DUP3 PUSH1 0xA0 ADD MLOAD DUP3 PUSH1 0xA0 ADD MLOAD PUSH2 0x3493 JUMP JUMPDEST PUSH2 0x20F3 DUP4 PUSH1 0x80 ADD MLOAD DUP4 PUSH1 0x80 ADD MLOAD PUSH2 0x3493 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH32 0x4E454741544956455F5350524541445F52455155495245440000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP2 GT ISZERO PUSH2 0x214A JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2157 PUSH2 0x3677 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x216B DUP10 PUSH1 0xA0 ADD MLOAD DUP9 PUSH2 0x272E JUMP JUMPDEST SWAP4 POP PUSH2 0x217B DUP9 PUSH1 0xA0 ADD MLOAD DUP8 PUSH2 0x272E JUMP JUMPDEST SWAP3 POP PUSH2 0x218B DUP4 DUP10 PUSH1 0x80 ADD MLOAD PUSH2 0x3493 JUMP JUMPDEST PUSH2 0x2199 DUP6 DUP11 PUSH1 0xA0 ADD MLOAD PUSH2 0x3493 JUMP JUMPDEST GT PUSH2 0x21BB JUMPI DUP4 SWAP2 POP PUSH2 0x21B4 DUP9 PUSH1 0xA0 ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD DUP5 PUSH2 0x298F JUMP JUMPDEST SWAP1 POP PUSH2 0x21D4 JUMP JUMPDEST DUP3 SWAP1 POP PUSH2 0x21D1 DUP9 PUSH1 0x80 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD DUP4 PUSH2 0x298F JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x21DE DUP10 DUP4 PUSH2 0x29C4 JUMP JUMPDEST DUP6 MSTORE PUSH2 0x21EA DUP9 DUP3 PUSH2 0x29C4 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP8 ADD DUP3 SWAP1 MSTORE DUP7 MLOAD MLOAD SWAP2 ADD MLOAD PUSH2 0x2202 SWAP2 SWAP1 PUSH2 0x272E JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MSTORE POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP5 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH32 0x4F524445525F554E46494C4C41424C4500000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x2270 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH32 0x494E56414C49445F54414B45525F414D4F554E54000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP4 ISZERO ISZERO PUSH2 0x22C8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x2343 JUMPI PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xE DUP2 MSTORE PUSH32 0x494E56414C49445F53454E444552000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x2341 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x23CA JUMPI DUP4 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP7 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x494E56414C49445F54414B455200000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x23C8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD ISZERO ISZERO PUSH2 0x2441 JUMPI PUSH2 0x23E8 DUP6 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x0 ADD MLOAD DUP4 PUSH2 0x10A8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH32 0x494E56414C49445F4F524445525F5349474E4154555245000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x243F JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP JUMPDEST PUSH2 0x2454 DUP3 DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0x80 ADD MLOAD PUSH2 0x34B7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xE DUP2 MSTORE PUSH32 0x524F554E44494E475F4552524F52000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO PUSH2 0x24AA JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x24C1 DUP3 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x350D JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE DUP7 DUP2 ADD MLOAD DUP8 MLOAD DUP5 MLOAD SWAP4 DUP6 ADD MLOAD DUP6 DUP5 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH2 0x140 DUP13 ADD MLOAD PUSH2 0x160 DUP14 ADD MLOAD SWAP7 MLOAD DUP12 SWAP9 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP8 DUP9 AND SWAP9 SWAP8 SWAP1 SWAP7 AND SWAP7 PUSH32 0xDE19F18E1B56E6EADA7ED95CCA8398B602BE32F5864640537EE9A9A3532BB29D SWAP7 PUSH2 0x2543 SWAP7 DUP16 SWAP7 SWAP2 SWAP6 SWAP1 SWAP5 SWAP2 SWAP4 SWAP1 SWAP3 SWAP1 PUSH2 0x40E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x2565 DUP8 PUSH2 0x140 ADD MLOAD PUSH2 0x27A2 JUMP JUMPDEST PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DIV SWAP3 POP PUSH2 0x257C DUP7 PUSH2 0x140 ADD MLOAD PUSH2 0x27A2 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 SWAP5 DIV SWAP6 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x260B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x25E0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x260B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x25EE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x2634 DUP8 PUSH2 0x140 ADD MLOAD DUP5 DUP10 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST PUSH2 0x140 DUP7 ADD MLOAD DUP7 MLOAD DUP9 MLOAD DUP7 MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x2652 SWAP4 SWAP3 DUP7 SWAP3 SWAP1 SWAP2 PUSH2 0x351C JUMP JUMPDEST PUSH2 0x266C DUP8 PUSH2 0x140 ADD MLOAD DUP5 DUP10 PUSH1 0x0 ADD MLOAD DUP9 DUP9 PUSH1 0x40 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST PUSH2 0x268A DUP2 PUSH1 0x1 DUP10 PUSH1 0x0 ADD MLOAD DUP11 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST PUSH2 0x26A8 DUP2 PUSH1 0x1 DUP9 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP8 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ ISZERO PUSH2 0x26FA JUMPI PUSH2 0x26F5 DUP2 PUSH1 0x1 DUP8 DUP11 PUSH1 0x40 ADD MLOAD PUSH2 0x26F0 DUP10 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD DUP11 PUSH1 0x20 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x350D JUMP JUMPDEST PUSH2 0x351C JUMP JUMPDEST PUSH2 0x24AA JUMP JUMPDEST PUSH2 0x2714 DUP2 PUSH1 0x1 DUP8 DUP11 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST PUSH2 0x24AA DUP2 PUSH1 0x1 DUP8 DUP10 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x273A JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD PUSH2 0x274E SWAP2 SWAP1 PUSH2 0x350D JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x2764 SWAP2 SWAP1 PUSH2 0x350D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x277D SWAP2 SWAP1 PUSH2 0x350D JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x2796 SWAP2 SWAP1 PUSH2 0x350D JUMP JUMPDEST PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD GT PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F5448414E5F5A45524F5F4C454E4754485F52455155495245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4400000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x2828 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP DUP2 MLOAD DUP3 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x283B JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD DUP3 MLOAD PUSH1 0x0 NOT ADD SWAP1 SWAP3 MSTORE POP PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x28E1 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x14 DUP3 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x2973 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH2 0x2982 DUP3 PUSH1 0x14 DUP5 MLOAD SUB PUSH2 0x35C3 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x13 NOT ADD SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29A4 PUSH2 0x299E DUP6 DUP5 PUSH2 0x3493 JUMP JUMPDEST DUP5 PUSH2 0x3660 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x29BB JUMPI DUP2 PUSH2 0x29BD JUMP JUMPDEST DUP3 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x29CC PUSH2 0x36C6 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x80 DUP5 ADD MLOAD PUSH2 0x29E8 SWAP2 DUP5 SWAP2 PUSH2 0x298F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0x2A04 SWAP3 SWAP2 SWAP1 PUSH2 0x298F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xE0 DUP6 ADD MLOAD PUSH2 0x2A23 SWAP3 SWAP2 SWAP1 PUSH2 0x298F JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x2A41 DUP7 PUSH2 0x140 ADD MLOAD PUSH2 0x27A2 JUMP JUMPDEST PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DIV SWAP3 POP PUSH2 0x2A58 DUP7 PUSH2 0x160 ADD MLOAD PUSH2 0x27A2 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 SWAP5 DIV SWAP6 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x2AE7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2ABC JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2AE7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2ACA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x2B08 DUP7 PUSH2 0x140 ADD MLOAD DUP5 DUP9 PUSH1 0x0 ADD MLOAD DUP9 DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST PUSH2 0x2B22 DUP7 PUSH2 0x160 ADD MLOAD DUP4 DUP8 DUP10 PUSH1 0x0 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST PUSH2 0x2B3C DUP2 PUSH1 0x1 DUP9 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x40 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST PUSH2 0x2B52 DUP2 PUSH1 0x1 DUP8 DUP10 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD PUSH2 0x351C JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x446F6D61696E536570617261746F72286164647265737320636F6E7472616374 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x21 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2BF1 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2BD2 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 ADDRESS PUSH13 0x1000000000000000000000000 MUL DUP4 DUP4 ADD MSTORE DUP5 MLOAD PUSH1 0x14 DUP2 DUP6 SUB ADD DUP2 MSTORE PUSH1 0x34 SWAP1 SWAP4 ADD SWAP5 DUP6 SWAP1 MSTORE DUP3 MLOAD SWAP1 SWAP7 POP SWAP2 SWAP5 POP DUP4 SWAP3 POP DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2C70 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2C51 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 PUSH32 0x4F72646572280000000000000000000000000000000000000000000000000000 DUP4 DUP4 ADD MSTORE PUSH32 0x61646472657373206D616B6572416464726573732C0000000000000000000000 PUSH1 0x26 DUP5 ADD MSTORE PUSH32 0x616464726573732074616B6572416464726573732C0000000000000000000000 PUSH1 0x3B DUP5 ADD MSTORE PUSH32 0x6164647265737320666565526563697069656E74416464726573732C00000000 PUSH1 0x50 DUP5 ADD MSTORE PUSH32 0x616464726573732073656E646572416464726573732C00000000000000000000 PUSH1 0x6C DUP5 ADD MSTORE PUSH32 0x75696E74323536206D616B65724173736574416D6F756E742C00000000000000 PUSH1 0x82 DUP5 ADD MSTORE PUSH32 0x75696E743235362074616B65724173736574416D6F756E742C00000000000000 PUSH1 0x9B DUP5 ADD MSTORE PUSH32 0x75696E74323536206D616B65724665652C000000000000000000000000000000 PUSH1 0xB4 DUP5 ADD MSTORE PUSH32 0x75696E743235362074616B65724665652C000000000000000000000000000000 PUSH1 0xC5 DUP5 ADD MSTORE PUSH32 0x75696E743235362065787069726174696F6E54696D655365636F6E64732C0000 PUSH1 0xD6 DUP5 ADD MSTORE PUSH32 0x75696E743235362073616C742C00000000000000000000000000000000000000 PUSH1 0xF4 DUP5 ADD MSTORE PUSH32 0x6279746573206D616B65724173736574446174612C0000000000000000000000 PUSH2 0x101 DUP5 ADD MSTORE PUSH32 0x62797465732074616B65724173736574446174612C0000000000000000000000 PUSH2 0x116 DUP5 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH2 0x12B DUP5 ADD MSTORE DUP5 MLOAD DUP1 DUP5 SUB PUSH2 0x10C ADD DUP2 MSTORE PUSH2 0x12C SWAP1 SWAP4 ADD SWAP5 DUP6 SWAP1 MSTORE DUP3 MLOAD SWAP1 SWAP7 POP SWAP2 SWAP5 POP DUP4 SWAP3 POP DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2EF3 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2ED4 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP9 PUSH1 0x80 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD DUP11 PUSH1 0xC0 ADD MLOAD DUP12 PUSH1 0xE0 ADD MLOAD DUP13 PUSH2 0x100 ADD MLOAD DUP14 PUSH2 0x120 ADD MLOAD DUP15 PUSH2 0x140 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2F8C JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2F6D JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2FEF JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2FD0 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP16 PUSH2 0x160 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x3054 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x3035 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x30B7 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x3098 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP14 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP13 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP12 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP11 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x3213 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x31F4 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x0 NOT PUSH1 0x20 SWAP5 DUP6 SUB PUSH2 0x100 EXP ADD SWAP1 DUP2 AND SWAP1 NOT SWAP2 SWAP1 SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP5 SWAP1 SWAP3 ADD DUP5 SWAP1 SUB DUP5 KECCAK256 DUP5 DUP3 ADD SWAP10 SWAP1 SWAP10 MSTORE DUP4 DUP3 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x60 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x80 DUP1 DUP3 ADD SWAP7 SWAP1 SWAP7 MSTORE DUP4 MLOAD DUP1 DUP3 SUB SWAP1 SWAP7 ADD DUP7 MSTORE PUSH1 0xA0 ADD SWAP3 DUP4 SWAP1 MSTORE POP POP DUP3 MLOAD SWAP1 SWAP2 DUP3 SWAP2 SWAP1 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x329C JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x327D JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 SWAP1 SWAP4 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP2 AND SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP3 ADD DUP3 SWAP1 SUB SWAP1 SWAP2 KECCAK256 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH32 0x4F524445525F554E46494C4C41424C4500000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x332D JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x33A8 JUMPI PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xE DUP2 MSTORE PUSH32 0x494E56414C49445F53454E444552000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x33A6 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP JUMPDEST PUSH2 0x33B0 PUSH2 0x20A0 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xD DUP2 MSTORE PUSH32 0x494E56414C49445F4D414B455200000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 AND SWAP2 AND EQ PUSH2 0x663 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH2 0x140 DUP6 ADD MLOAD PUSH2 0x160 DUP7 ADD MLOAD SWAP4 MLOAD DUP6 SWAP5 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP5 DUP6 AND SWAP5 SWAP4 SWAP1 SWAP4 AND SWAP3 PUSH32 0xB1AD640E9E79B6FDBC3C415DC2914AB54E753D2971F51EAB910F7AA317A3163A SWAP3 PUSH2 0x3487 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x4220 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 0x34AF JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 0x34AC JUMPI INVALID JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 0x29BD JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 DUP1 ISZERO ISZERO PUSH2 0x34C6 JUMPI INVALID JUMPDEST DUP7 DUP6 MULMOD SWAP2 POP DUP2 ISZERO ISZERO PUSH2 0x34DB JUMPI PUSH1 0x0 SWAP3 POP PUSH2 0x3504 JUMP JUMPDEST PUSH2 0x34FA PUSH2 0x34EB DUP4 PUSH3 0xF4240 PUSH2 0x3493 JUMP JUMPDEST PUSH2 0x34F5 DUP9 DUP8 PUSH2 0x3493 JUMP JUMPDEST PUSH2 0x3660 JUMP JUMPDEST PUSH2 0x3E8 DUP2 GT SWAP4 POP SWAP1 POP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x29BD JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 DUP3 GT ISZERO PUSH2 0x2B52 JUMPI POP PUSH1 0xFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH32 0xA85E59E400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 DUP2 SWAP1 PUSH4 0xA85E59E4 SWAP1 PUSH2 0x3589 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x41F3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x35B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x364D JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x4253 JUMP JUMPDEST POP POP ADD PUSH1 0x14 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 0x366E JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x120 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x368C PUSH2 0x36C6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3699 PUSH2 0x36C6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29BD DUP3 CALLDATALOAD PUSH2 0x4349 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x370C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x371F PUSH2 0x371A DUP3 PUSH2 0x42FC JUMP JUMPDEST PUSH2 0x42D5 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x375D JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x3747 DUP9 DUP3 PUSH2 0x38A1 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3731 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x3778 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3786 PUSH2 0x371A DUP3 PUSH2 0x42FC JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x375D JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x37AE DUP9 DUP3 PUSH2 0x38F0 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3798 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x37D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x37E3 PUSH2 0x371A DUP3 PUSH2 0x42FC JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x3808 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x375D JUMPI DUP2 PUSH2 0x381E DUP9 DUP3 PUSH2 0x384C JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x380B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29BD DUP3 CALLDATALOAD PUSH2 0x4355 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29BD DUP3 MLOAD PUSH2 0x4355 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29BD DUP3 CALLDATALOAD PUSH2 0x435A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1F DUP4 ADD DUP5 SGT PUSH2 0x386A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3882 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x389A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x38B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x38C0 PUSH2 0x371A DUP3 PUSH2 0x431D JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x38DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38E7 DUP4 DUP3 DUP5 PUSH2 0x436E JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3903 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x390E PUSH2 0x180 PUSH2 0x42D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x391C DUP5 DUP5 PUSH2 0x36EF JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x392D DUP5 DUP5 DUP4 ADD PUSH2 0x36EF JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x3941 DUP5 DUP3 DUP6 ADD PUSH2 0x36EF JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x3955 DUP5 DUP3 DUP6 ADD PUSH2 0x36EF JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x3969 DUP5 DUP3 DUP6 ADD PUSH2 0x384C JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x397D DUP5 DUP3 DUP6 ADD PUSH2 0x384C JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x3991 DUP5 DUP3 DUP6 ADD PUSH2 0x384C JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0x39A5 DUP5 DUP3 DUP6 ADD PUSH2 0x384C JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP PUSH2 0x100 PUSH2 0x39BA DUP5 DUP3 DUP6 ADD PUSH2 0x384C JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH2 0x120 PUSH2 0x39D0 DUP5 DUP3 DUP6 ADD PUSH2 0x384C JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MSTORE POP PUSH2 0x140 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x39F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39FE DUP5 DUP3 DUP6 ADD PUSH2 0x38A1 JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MSTORE POP PUSH2 0x160 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3A20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3A2C DUP5 DUP3 DUP6 ADD PUSH2 0x38A1 JUMP JUMPDEST PUSH2 0x160 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29BD DUP3 CALLDATALOAD PUSH2 0x435D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29BD DUP3 MLOAD PUSH2 0x435D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x29A4 DUP5 DUP5 PUSH2 0x36EF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3A82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3A8E DUP6 DUP6 PUSH2 0x36EF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3A9F DUP6 DUP3 DUP7 ADD PUSH2 0x36EF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3ABC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3AC8 DUP6 DUP6 PUSH2 0x36EF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3A9F DUP6 DUP3 DUP7 ADD PUSH2 0x3834 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3AEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x29A4 DUP5 DUP3 DUP6 ADD PUSH2 0x3767 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3B23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B46 DUP7 DUP3 DUP8 ADD PUSH2 0x3767 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B6F DUP7 DUP3 DUP8 ADD PUSH2 0x37C4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B98 DUP7 DUP3 DUP8 ADD PUSH2 0x36FB JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3BB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3BCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3BDA DUP7 DUP3 DUP8 ADD PUSH2 0x3767 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3B6F DUP7 DUP3 DUP8 ADD PUSH2 0x384C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3BFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x29A4 DUP5 DUP5 PUSH2 0x3840 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3C1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x29A4 DUP5 DUP5 PUSH2 0x384C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3C3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3A8E DUP6 DUP6 PUSH2 0x384C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3C5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3C68 DUP8 DUP8 PUSH2 0x384C JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x3C79 DUP8 DUP3 DUP9 ADD PUSH2 0x36EF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3CA2 DUP8 DUP3 DUP9 ADD PUSH2 0x3858 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3CC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3CCF DUP7 DUP7 PUSH2 0x384C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3CE0 DUP7 DUP3 DUP8 ADD PUSH2 0x36EF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3CFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B98 DUP7 DUP3 DUP8 ADD PUSH2 0x38A1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3D1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x29A4 DUP5 DUP3 DUP6 ADD PUSH2 0x38F0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3D54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D77 DUP8 DUP3 DUP9 ADD PUSH2 0x38F0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3DA0 DUP8 DUP3 DUP9 ADD PUSH2 0x38F0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3DC9 DUP8 DUP3 DUP9 ADD PUSH2 0x38A1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3DF2 DUP8 DUP3 DUP9 ADD PUSH2 0x38A1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3E13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3E36 DUP7 DUP3 DUP8 ADD PUSH2 0x38F0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3CE0 DUP7 DUP3 DUP8 ADD PUSH2 0x384C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3E60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3E6C DUP10 DUP10 PUSH2 0x384C JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x3E7D DUP10 DUP3 DUP11 ADD PUSH2 0x36EF JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3EA6 DUP10 DUP3 DUP11 ADD PUSH2 0x3858 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3EC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3ED1 DUP10 DUP3 DUP11 ADD PUSH2 0x3858 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3EF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x29A4 DUP5 DUP5 PUSH2 0x3A39 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3F10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x29A4 DUP5 DUP5 PUSH2 0x3A45 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3F31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3F3D DUP7 DUP7 PUSH2 0x3A39 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3F4E DUP7 DUP3 DUP8 ADD PUSH2 0x36EF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x3B98 DUP7 DUP3 DUP8 ADD PUSH2 0x36EF JUMP JUMPDEST PUSH2 0x3F68 DUP2 PUSH2 0x4349 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x3F68 DUP2 PUSH2 0x4355 JUMP JUMPDEST PUSH2 0x3F68 DUP2 PUSH2 0x435A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F8B DUP3 PUSH2 0x4345 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x3F9F DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x437A JUMP JUMPDEST PUSH2 0x3FA8 DUP2 PUSH2 0x43A6 JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x3F68 DUP2 PUSH2 0x4363 JUMP JUMPDEST PUSH1 0x33 DUP2 MSTORE PUSH32 0x4F6E6C7920636F6E7472616374206F776E657220697320616C6C6F7765642074 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6F2063616C6C2074686973206D6574686F642E00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0x4025 DUP5 DUP3 PUSH2 0x3F77 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x4038 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x3F77 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x404B PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x3F77 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x663 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x3F77 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x120 DUP4 ADD SWAP1 PUSH2 0x4070 DUP5 DUP3 PUSH2 0x4014 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x4083 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x4014 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x663 PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x3F77 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 DUP4 ADD SWAP1 PUSH2 0x40A8 DUP5 DUP3 PUSH2 0x40CE JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x40BB PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x3F77 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x663 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x3F68 DUP2 PUSH2 0x435D JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x20C9 DUP3 DUP5 PUSH2 0x3F5F JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD PUSH2 0x40F3 DUP3 DUP11 PUSH2 0x3F5F JUMP JUMPDEST PUSH2 0x4100 PUSH1 0x20 DUP4 ADD DUP10 PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x410D PUSH1 0x40 DUP4 ADD DUP9 PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x411A PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x4127 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x3F77 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x4139 DUP2 DUP6 PUSH2 0x3F80 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x414D DUP2 DUP5 PUSH2 0x3F80 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x20C9 DUP3 DUP5 PUSH2 0x3F6E JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x4176 DUP3 DUP7 PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x4183 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x3F5F JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x4195 DUP2 DUP5 PUSH2 0x3F80 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x41AC DUP3 DUP6 PUSH2 0x3F77 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x29A4 DUP2 DUP5 PUSH2 0x3F80 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x41CC DUP3 DUP8 PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x41D9 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x40CE JUMP JUMPDEST PUSH2 0x41E6 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x4195 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x3F77 JUMP JUMPDEST PUSH1 0x80 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x4204 DUP2 DUP8 PUSH2 0x3F80 JUMP JUMPDEST SWAP1 POP PUSH2 0x4213 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x3F5F JUMP JUMPDEST PUSH2 0x41E6 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3F5F JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x4231 DUP2 DUP6 PUSH2 0x3F80 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x29A4 DUP2 DUP5 PUSH2 0x3F80 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x20C9 DUP3 DUP5 PUSH2 0x3FB5 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x29BD DUP2 DUP5 PUSH2 0x3F80 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x20C9 DUP2 PUSH2 0x3FBE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x20C9 DUP3 DUP5 PUSH2 0x4014 JUMP JUMPDEST PUSH2 0x120 DUP2 ADD PUSH2 0x20C9 DUP3 DUP5 PUSH2 0x405E JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x20C9 DUP3 DUP5 PUSH2 0x4097 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x20C9 DUP3 DUP5 PUSH2 0x3F77 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x42BB DUP3 DUP7 PUSH2 0x40CE JUMP JUMPDEST PUSH2 0x42C8 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x3F5F JUMP JUMPDEST PUSH2 0x29A4 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3F5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x42F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4313 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20C9 DUP3 PUSH2 0x4349 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4395 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x437D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x663 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 0xc 0xdc BYTE DUP14 0xf8 0xfc RETURN MOD DUP13 SHR 0x2c SWAP5 SWAP10 0xb0 0x49 0x48 PUSH22 0xA807CFDD1D5F3D94484C3A4496B04E6C657870657269 PUSH14 0x656E74616CF50037000000000000 ",
				"sourceMap": "894:607:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1188:42:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1188:42:4;;;;;;;;;;;;;;;;;;;;;;;;;13245:381:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;13245:381:9;;;;;;;;;;;1278:42:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1278:42:4;;;;;;;;;;;;;;;;;1723:275:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1723:275:7;;;;;;;;;1017:50:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1017:50:3;;;;;;;;;;;;;;;;;1886:2557:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1886:2557:5;;;;;;;;;;;;;;;;;2141:10811:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2141:10811:9;;;;;;;;;;;;;;;;;24288:185;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;24288:185:9;;;;;;;;;13920:393;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;13920:393:9;;;;;;;;;1796:607:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1796:607:4;;;;;;;;;14686:395:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;14686:395:9;;;;;;;;;1481:1017:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1481:1017:3;;;;;;;;;945:45:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;945:45:8;;;;;;;;;1222:493:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1222:493:9;;;;;;;;;1496:46:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1496:46:4;;;;;;;;;2228:233:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2228:233:7;;;;;;;;;1324:71;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1324:71:7;;;;;;;;;15469:1843:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;15469:1843:9;;;;;;;;;1204:63:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1204:63:7;;;;;;;;;292:20:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;292:20:30;;;;;;;;;;;;2688:203:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2688:203:3;;;;;;;;;2826:6493:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2826:6493:7;;;;;;;;;22305:1848:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;22305:1848:9;;;;;;;;;2720:1327:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2720:1327:4;;;;;;;;;1397:1380:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1397:1380:8;;;;;;;;;4874:2178:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4874:2178:4;;;;;;;;;;;;;;;;;4278:322;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4278:322:4;;;;;;;;;17769:1442:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;17769:1442:9;;;;;;;;;19599:2245;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;19599:2245:9;;;;;;;;;1042:36:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1042:36:8;;;;566:167:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;566:167:30;;;;;;;;;1097:46:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1097:46:2;;;;;;;;;;;;1188:42:4;;;;;;;;;;;;;:::o;13245:381:9:-;13433:9;13428:192;13452:6;:13;13448:1;:17;13428:192;;;13486:123;13513:6;13520:1;13513:9;;;;;;;;;;;;;;;;;;13540:21;13562:1;13540:24;;;;;;;;;;;;;;;;;;13582:10;13593:1;13582:13;;;;;;;;;;;;;;;;;;13486:9;:123::i;:::-;-1:-1:-1;13467:3:9;;13428:192;;;13245:381;;;;:::o;1278:42:4:-;;;;;;;;;;;;;;;:::o;1723:275:7:-;1869:41;1886:4;1892:6;1900:9;;1869:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1869:16:7;;-1:-1:-1;;;;;1869:41:7:i;:::-;1924:17;;;;;;;;;;;;;;;;;;1848:103;;;;;;-1:-1:-1;;;;;1848:103:7;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1961:15:7;;;;:9;:15;;;;;;;;-1:-1:-1;;;;;1961:23:7;;;;;;;;;;:30;;-1:-1:-1;;1961:30:7;1987:4;1961:30;;;1723:275::o;1017:50:3:-;;;;;;;;;;;;-1:-1:-1;;;;;1017:50:3;;:::o;1886:2557:5:-;2101:59;;:::i;:::-;2566:39;;:::i;:::-;2641:40;;:::i;:::-;2430:24;;;;;2402:25;;;;:52;;;;2492:24;;;2464:25;;;:52;2750:20;2608:23;2430:9;2608:12;:23::i;:::-;2566:65;;2684:24;2697:10;2684:12;:24::i;:::-;2641:67;;2773:26;:24;:26::i;:::-;2750:49;;2862:39;2879:9;2890:10;2862:16;:39::i;:::-;2978:195;3019:9;3042:10;3066:13;:41;;;3121:14;:42;;;2978:27;:195::i;:::-;3323:23;;:46;;;2957:216;;-1:-1:-1;3218:248:5;;3247:9;;3270:13;;3297:12;;3323:46;3443:13;3218:15;:248::i;:::-;3583:24;;;;;:47;;3476:253;;3505:10;;3529:14;;3557:12;;3583:47;3705:14;3476:15;:253::i;:::-;3773:205;3804:9;3827:12;3853:13;:23;;;3890:13;:41;;;3945:18;:23;;;3773:17;:205::i;:::-;3988:209;4019:10;4043:12;4069:14;:24;;;4107:14;:42;;;4163:18;:24;;;3988:17;:209::i;:::-;4266:134;4299:9;4322:10;4346:12;4372:18;4266:19;:134::i;:::-;1886:2557;;;;;;;;;:::o;2141:10811:9:-;2312:30;;:::i;:::-;6207:4;6201:11;;5428:23;6225:42;;;6633:4;6322:3;6301:25;;7320:59;;;7646:19;;6612:26;;;7626:40;;;7434:4;7759:23;;;7753:30;7729:22;;;7722:62;7855:23;;;7849:30;7825:22;;;7818:62;7958:23;;;7952:30;7928:22;;;7921:62;8073:4;8055:23;;8049:30;8025:22;;;8018:62;8173:4;8155:23;;8149:30;8125:22;;;8118:62;8273:4;8255:23;;8249:30;8225:22;;;8218:62;8371:4;8353:23;;8347:30;8323:22;;;8316:62;8470:5;8452:24;;8446:31;8421:23;;;8414:64;8575:5;8557:24;;8551:31;8526:23;;;8519:64;8663:5;8645:24;;8639:31;;8614:23;;;8607:64;;;8771:5;8753:24;;8747:31;8722:23;;;8715:64;8855:5;8982:74;;9144:24;9216:19;;8838:23;;;9420:34;;;5428:23;;6301:25;;;;6612:26;7412:27;;;;6612:26;;9482:22;;;;9264:23;;;;9340:4;9321:24;;9317:35;5401:24;9574:237;9597:13;9594:1;9591:20;9574:237;;;9667:19;;9647:40;;9736:4;9719:22;;;;9774:23;;;;9625:1;9618:9;9574:237;;;-1:-1:-1;;;;9921:31:9;;;9905:13;9886:33;;;9879:74;;;;10047:17;;10041:24;10113:19;;10317:34;;;9913:4;10379:22;;;;10161:23;;;;10237:4;10218:24;;10214:35;10486:1;10472:237;10495:13;10492:1;10489:20;10472:237;;;10565:19;;10545:40;;10634:4;10617:22;;;;10672:23;;;;10523:1;10516:9;10472:237;;;-1:-1:-1;;;10778:46:9;;;-1:-1:-1;11009:33:9;;;10879:4;10857:27;;;10984:59;;;11157:19;;11348:34;;;10857:27;;11410:22;;;;11205:23;;;;11157:19;11281:4;11262:24;;11258:35;-1:-1:-1;11489:237:9;11512:13;11509:1;11506:20;11489:237;;;11582:19;;11562:40;;11651:4;11634:22;;;;11689:23;;;;11540:1;11533:9;11489:237;;;11493:12;12257:3;12178:15;12124;12111:11;12107:33;12026:15;11941:7;11821:3;11791:543;12354:7;12374:205;;;;12597:1;12592:316;;;;12347:561;;12374:205;12419:1;12406:11;12399:22;12467:1;12462:2;12449:11;12445:20;12438:31;12515:1;12510:2;12497:11;12493:20;12486:31;12563:1;12558:2;12545:11;12541:20;12534:31;12374:205;;12592:316;12643:15;12637:22;12624:11;12617:43;12733:2;12716:15;12712:24;12706:31;12701:2;12688:11;12684:20;12677:61;12811:2;12794:15;12790:24;12784:31;12779:2;12766:11;12762:20;12755:61;12889:2;12872:15;12868:24;12862:31;12857:2;12844:11;12840:20;12833:61;12347:561;-1:-1:-1;;;;;;;;;;;;2141:10811:9;;;;;;:::o;24288:185::-;24381:9;24376:91;24400:6;:13;24396:1;:17;24376:91;;;24434:22;24446:6;24453:1;24446:9;;;;;;;;;;;;;;;;;;24434:11;:22::i;:::-;24415:3;;24376:91;;;24288:185;;:::o;13920:393::-;14114:9;14109:198;14133:6;:13;14129:1;:17;14109:198;;;14167:129;14200:6;14207:1;14200:9;;;;;;;;;;;;;;;;;;14227:21;14249:1;14227:24;;;;;;;;;;;;;;;;;;14269:10;14280:1;14269:13;;;;;;;;;;;;;;;;;;14167:15;:129::i;:::-;-1:-1:-1;14148:3:9;;14109:198;;1796:607:4;1867:20;2004:21;2048;1890:26;:24;:26::i;:::-;-1:-1:-1;;;;;2072:24:4;;;;;;:10;:24;;;;;;;;;;2229:23;;;;;;;;;;;;;;;;;;;1867:49;;-1:-1:-1;2035:1:4;2028:8;;;-1:-1:-1;2072:24:4;;-1:-1:-1;2185:29:4;;;2164:98;;;;-1:-1:-1;;;;;2164:98:4;;;;;;;;;;-1:-1:-1;;;;;;2302:24:4;;;;;;:10;:24;;;;;;;:40;;;2357:39;;;;;2329:13;;2357:39;;;;;;;;;;1796:607;;;;:::o;14686:395:9:-;14881:9;14876:199;14900:6;:13;14896:1;:17;14876:199;;;14934:130;14968:6;14975:1;14968:9;;;;;;;;;;;;;;;;;;14995:21;15017:1;14995:24;;;;;;;;;;;;;;;;;;15037:10;15048:1;15037:13;;;;;;;;;;;;;;;;;;14934:16;:130::i;:::-;-1:-1:-1;14915:3:9;;14876:199;;1481:1017:3;1732:25;460:5:30;;1732:25:3;;;;-1:-1:-1;;;;;460:5:30;446:10;:19;425:117;;;;-1:-1:-1;;;;;425:117:30;;;;;;;;;1768:26:3;;;;;;;:12;:26;;;;;;;;;;1874:20;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1768:26:3;;;;-1:-1:-1;1826:34:3;;;;1805:99;;;;-1:-1:-1;;;;;1805:99:3;;;;;;;;;;-1:-1:-1;1952:13:3;;-1:-1:-1;;;;;;2095:27:3;;;2091:230;;2162:10;-1:-1:-1;;;;;2162:21:3;;:23;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2162:23:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2162:23:3;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2162:23:3;;;;;;;;;2273;;;;;;;;;;;;;;;;;2138:47;;-1:-1:-1;2224:31:3;;;;;;;;2199:111;;;;-1:-1:-1;;;;;2199:111:3;;;;;;;;;;;2091:230;2380:26;;;;;;;:12;:26;;;;;;;:39;;-1:-1:-1;;2380:39:3;-1:-1:-1;;;;;2380:39:3;;;;;2434:57;;;;;2380:26;;2462:13;;2477;;2434:57;;;;;;;;;;1481:1017;;;;;;:::o;945:45:8:-;;;;;;;;;;;;;;;:::o;1222:493:9:-;1392:30;;:::i;:::-;1452:95;1475:5;1494:20;1528:9;1452;:95::i;:::-;1438:109;;1616:20;1578:11;:34;;;:58;1650:20;;;;;;;;;;;;;;;;;;1557:123;;;;;;;-1:-1:-1;;;;;1557:123:9;;;;;;;;;;-1:-1:-1;1222:493:9;;;;;:::o;1496:46:4:-;;;;;;;;;;;;;:::o;2228:233:7:-;2354:14;2371:26;:24;:26::i;:::-;-1:-1:-1;;;;;2407:25:7;;;;;;;:17;:25;;;;;;;;:36;;;;;;;;;;;;;:47;;-1:-1:-1;;2407:47:7;;;;;;;;;;-1:-1:-1;2228:233:7:o;1324:71::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;15469:1843:9:-;15646:35;;:::i;:::-;15697:27;15771:9;16157:37;16348:36;;:::i;:::-;15727:6;15734:1;15727:9;;;;;;;;;;;;;;;;;;:24;;;15697:54;;15783:1;15771:13;;15766:1507;15790:6;:13;15786:1;:17;15766:1507;;;16060:14;16033:6;16040:1;16033:9;;;;;;;;;;;;;;;;;;:24;;:41;;;;16197:70;16205:20;16227:16;:39;;;16197:7;:70::i;:::-;16157:110;;16387:128;16414:6;16421:1;16414:9;;;;;;;;;;;;;;;;;;16441:29;16488:10;16499:1;16488:13;;;;;;;;;16387:128;16840:21;;16910:1;16901:11;16878:35;;16348:167;-1:-1:-1;17011:51:9;17026:16;16348:167;17011:14;:51::i;:::-;17203:20;17160:16;:39;;;:63;17156:107;;;17243:5;;17156:107;15805:3;;;;;15766:1507;;;15469:1843;;;;;;;;;:::o;1204:63:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;292:20:30:-;;;-1:-1:-1;;;;;292:20:30;;:::o;2688:203:3:-;2830:26;;2778:7;2830:26;;;:12;:26;;;;;;-1:-1:-1;;;;;2830:26:3;;2688:203::o;2826:6493:7:-;2981:12;3282:27;3416:7;3433:9;3452;3471:17;7093;3162:1;3143:9;:16;:20;3177:30;;;;;;;;;;;;;;;;;;3122:95;;;;;;;-1:-1:-1;;;;;3122:95:7;;;;;;;;;;;3332:22;3344:9;3332:11;:22::i;:::-;-1:-1:-1;;;3326:29:7;;3312:44;;;;;;;;;;3282:74;-1:-1:-1;3838:21:7;3821:13;:38;;;;;;;;;3817:5154;;;3882:17;;;;;;;;;;;;;;;;3875:25;;-1:-1:-1;;;;;3875:25:7;;;;3882:17;3875:25;;;;3817:5154;4182:21;4165:13;:38;;;;;;;;;4161:4810;;;4244:16;;4283:17;;;;;;;;;;;;;;;;;;4244:21;4219:95;;;;-1:-1:-1;;;;;4219:95:7;;;;;;;;;;-1:-1:-1;4338:5:7;;-1:-1:-1;4357:14:7;;4161:4810;4444:20;4427:13;:37;;;;;;;;;4423:4548;;;4505:16;;4545:18;;;;;;;;;;;;;;;;;;4525:2;4505:22;4480:97;;;;-1:-1:-1;;;;;4480:97:7;;;;;;;;;;;4601:9;4611:1;4601:12;;;;;;;;;;;;;;-1:-1:-1;;;4601:12:7;;;;;;4595:19;;-1:-1:-1;4632:25:7;4644:9;4655:1;4632:11;:25::i;:::-;4628:29;;4675:26;4687:9;4698:2;4675:11;:26::i;:::-;4671:30;;4727:24;4737:4;4743:1;4746;4749;4727:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;4727:24:7;;-1:-1:-1;;4727:24:7;;-1:-1:-1;;;;;4775:19:7;;;;;;;;-1:-1:-1;4727:24:7;-1:-1:-1;4808:14:7;;-1:-1:-1;4808:14:7;4423:4548;4899:21;4882:13;:38;;;;;;;;;4878:4093;;;4961:16;;5001:18;;;;;;;;;;;;;;;;;;4981:2;4961:22;4936:97;;;;-1:-1:-1;;;;;4936:97:7;;;;;;;;;;;5057:9;5067:1;5057:12;;;;;;;;;;;;;;-1:-1:-1;;;5057:12:7;;;;;;5051:19;;-1:-1:-1;5088:25:7;5100:9;5111:1;5088:11;:25::i;:::-;5084:29;;5131:26;5143:9;5154:2;5131:11;:26::i;:::-;5127:30;;5183:153;5237:20;;;;;;;;;;;;;;;;;;5259:4;5220:44;;;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;5220:44:7;;;;;-1:-1:-1;5220:44:7;;;26:21:-1;;;6:49;;5220:44:7;;;;;;;5210:55;;5220:44;;-1:-1:-1;5220:44:7;;;-1:-1:-1;5210:55:7;;;;;5220:44;5210:55;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;5210:55:7;;;;;;;;;;;;-1:-1:-1;5183:153:7;;;;;;;;;;-1:-1:-1;5210:55:7;-1:-1:-1;5283:1:7;;5302;;-1:-1:-1;5321:1:7;;5183:153;;4878:4093;5997:20;5980:13;:37;;;;;;;;;5976:2995;;;6058:16;;6097:17;;;;;;;;;;;;;;;;;;6058:21;6033:95;;;;-1:-1:-1;;;;;6033:95:7;;;;;;;;;;-1:-1:-1;;;;;;6152:20:7;;6162:10;6152:20;;-1:-1:-1;6186:14:7;;5976:2995;6370:20;6353:13;:37;;;;;;;;;6349:2622;;;6416:49;;;;;-1:-1:-1;;;;;6416:32:7;;;;;:49;;6449:4;;6455:9;;6416:49;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6416:49:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6416:49:7;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;6416:49:7;;;;;;;;;6406:59;-1:-1:-1;6479:14:7;;6349:2622;6992:23;6975:13;:40;;;;;;;;;6971:2000;;;7113:25;7128:9;7113:14;:25::i;:::-;-1:-1:-1;;;;;7210:25:7;;;;;;;:17;:25;;;;;;;;:36;;;;;;;;;;7093:45;;-1:-1:-1;7210:36:7;;7209:37;7205:88;;;7273:5;7266:12;;;;7205:88;7316:125;;;;;-1:-1:-1;;;;;7316:38:7;;;;;:125;;7372:4;;7394:6;;7418:9;;7316:125;;;;6971:2000;7577:23;7560:13;:40;;;;;;;;;7556:1415;;;7626:15;;;;:9;:15;;;;;;;;-1:-1:-1;;;;;7626:23:7;;;;;;;;;;;;;-1:-1:-1;7663:14:7;;7556:1415;8243:20;8226:13;:37;;;;;;;;;8222:749;;;8304:16;;8344:18;;;;;;;;;;;;;;;;;;8324:2;8304:22;8279:97;;;;-1:-1:-1;;;;;8279:97:7;;;;;;;;;;;8400:9;8410:1;8400:12;;;;;;;;;;;;;;-1:-1:-1;;;8400:12:7;;;;;;8394:19;;-1:-1:-1;8431:25:7;8443:9;8454:1;8431:11;:25::i;:::-;8427:29;;8474:26;8486:9;8497:2;8474:11;:26::i;:::-;8580:23;;;;;;;;;;;;;;;;;;;;8563:47;;8470:30;;-1:-1:-1;8526:156:7;;8580:23;;8605:4;;8563:47;;;;8580:23;;8563:47;8580:23;36:153:-1;;8222:749:7;8860:23;8843:13;:40;;;;;;;;;8839:132;;;8909:15;;;;:9;:15;;;;;;;;-1:-1:-1;;;;;8909:23:7;;;;;;;;;;;;;-1:-1:-1;8946:14:7;;8839:132;9290:21;;;;;;;;;;;;;;;;9283:29;;-1:-1:-1;;;;;9283:29:7;;;;9290:21;9283:29;;;;2826:6493;;;;;;;;;;;;:::o;22305:1848:9:-;22488:35;;:::i;:::-;22539:27;22609:9;22999:37;23305;23591:36;;:::i;:::-;22569:6;22576:1;22569:9;;;;;;;;;;;;;;;;;;:24;;;22539:54;;22621:1;22609:13;;22604:1510;22628:6;:13;22624:1;:17;22604:1510;;;22903:14;22876:6;22883:1;22876:9;;;;;;;;;;;;;;;;;;;:24;;:41;23069:39;;23039:70;;23047:20;;23039:7;:70::i;:::-;22999:110;;23345:165;23379:6;23386:1;23379:9;;;;;;;;;;;;;;;;;;:26;;;23423:6;23430:1;23423:9;;;;;;;;;;;;;;;;;;:26;;;23467:29;23345:16;:165::i;:::-;23305:205;;23630:135;23664:6;23671:1;23664:9;;;;;;;;;;;;;;;;;;23691:29;23738:10;23749:1;23738:13;;;;;;;;;23630:135;23591:174;;23850:51;23865:16;23883:17;23850:14;:51::i;:::-;24001:39;;:63;;23997:107;;;24084:5;;23997:107;22643:3;;;;;22604:1510;;;22305:1848;;;;;;;;;;:::o;2720:1327:4:-;2875:30;;:::i;:::-;2949:26;;:::i;:::-;3039:20;3143:33;3259:30;2978:19;2991:5;2978:12;:19::i;:::-;2949:48;;3062:26;:24;:26::i;:::-;3039:49;;3179:70;3187:5;:22;;;3211:9;:37;;;3179:7;:70::i;:::-;3143:106;;3292:55;3299:20;3321:25;3292:6;:55::i;:::-;3259:88;;3386:186;3415:5;3434:9;3457:12;3483:20;3517:22;3553:9;3386:15;:186::i;:::-;3642:51;3663:5;3670:22;3642:20;:51::i;:::-;3628:65;;3746:181;3777:5;3796:12;3822:9;:19;;;3855:9;:37;;;3906:11;3746:17;:181::i;:::-;3966:45;3978:5;3985:12;3999:11;3966;:45::i;1397:1380:8:-;1604:21;;1653:18;;;;;;;;;;;;;;;;;1730:23;;-1:-1:-1;;;;;1604:21:8;:35;1583:98;;;;-1:-1:-1;;;;;1583:98:8;;;;;;;;;;;1804:4;1823:6;1843:4;1861;;1766:109;;;;;;-1:-1:-1;;;;;1766:109:8;-1:-1:-1;;;;;1766:109:8;;;;;;;;-1:-1:-1;;;;;1766:109:8;-1:-1:-1;;;;;1766:109:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1766:109:8;;;1756:120;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1756:120:8;;;;;;;;;;;;-1:-1:-1;1963:29:8;;;:12;:29;;;;;;2006:15;;;;;;;;;;;;;;;;;1756:120;-1:-1:-1;1756:120:8;-1:-1:-1;;1963:29:8;;1962:30;;-1:-1:-1;1941:90:8;;;;-1:-1:-1;;;;;1941:90:8;;;;;;;;;;-1:-1:-1;;;;;;2117:20:8;;2127:10;2117:20;2113:309;;2212:52;2229:15;2246:6;2254:9;;2212:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2212:16:8;;-1:-1:-1;;;;;2212:52:8:i;:::-;2282:20;;;;;;;;;;;;;;;;;;2187:129;;;;;;-1:-1:-1;;;;;2187:129:8;;;;;;;;;;-1:-1:-1;2381:21:8;:30;;-1:-1:-1;;2381:30:8;-1:-1:-1;;;;;2381:30:8;;;;;2113:309;2463:29;;;;:12;:29;;;;;;;:36;;-1:-1:-1;;2463:36:8;2495:4;2463:36;;;2530:32;2538:4;;2557;;;;2530:32;2557:4;;;;2530:32;;;;;;;;;;;;;;;;;;;;;2576:16;;;;;;;;;;;;;;;;;;-1:-1:-1;2509:93:8;;;-1:-1:-1;2509:93:8;;;;-1:-1:-1;;;;;2509:93:8;;;;;;;;;;-1:-1:-1;;2736:21:8;:34;;-1:-1:-1;;2736:34:8;;;-1:-1:-1;;;;;;1397:1380:8:o;4874:2178:4:-;4961:26;;:::i;:::-;5059:19;5072:5;5059:12;:19::i;:::-;5037;;;:41;5380:22;;;;:27;5376:157;;;5453:38;5447:45;5423:69;;;;5506:16;;5376:157;5846:22;;;;:27;5842:157;;;5919:38;5913:45;;5842:157;6069:27;;;;6050:15;:46;6046:157;;6142:19;6136:26;;6046:157;6272:19;;;;;6262:30;;;;:9;:30;;;;;;;;;6258:143;;;6338:21;6332:28;;6258:143;6447:10;;;;6425:18;;-1:-1:-1;;;;;6414:30:4;;;;;:10;:30;;;;;;:43;6410:156;;;6503:21;6497:28;;6410:156;6686:19;;;;;6679:27;;;;:6;:27;;;;;;;;;6639:37;;;:67;;;6761:22;;;;-1:-1:-1;6716:179:4;;6829:24;6823:31;;6716:179;6998:20;6968:51;;4874:2178;;;;:::o;4278:322::-;4386:26;;:::i;:::-;4415:19;4428:5;4415:12;:19::i;:::-;4386:48;;4473:35;4491:5;4498:9;4473:17;:35::i;:::-;4545:48;4566:5;4573:9;:19;;;4545:20;:48::i;17769:1442:9:-;17953:35;;:::i;:::-;18004:27;18074:9;18460:37;18651:36;;:::i;:::-;18034:6;18041:1;18034:9;;;;;;;;;;;;;;;;;;:24;;;18004:54;;18086:1;18074:13;;18069:1103;18093:6;:13;18089:1;:17;18069:1103;;;18363:14;18336:6;18343:1;18336:9;;;;;;;;;;;;;;;;;;:24;;:41;;;;18500:70;18508:20;18530:16;:39;;;18500:7;:70::i;:::-;18460:110;;18690:135;18724:6;18731:1;18724:9;;;;;;;;;;;;;;;;;;18751:29;18798:10;18809:1;18798:13;;;;;;;;;18690:135;18651:174;;18910:51;18925:16;18943:17;18910:14;:51::i;:::-;19102:20;19059:16;:39;;;:63;19055:107;;;19142:5;;19055:107;18108:3;;;;;18069:1103;;19599:2245;19775:35;;:::i;:::-;19826:27;19896:9;20286:37;20592;20878:36;;:::i;:::-;19856:6;19863:1;19856:9;;;;;;;;;;;;;;;;;;:24;;;19826:54;;19908:1;19896:13;;19891:1914;19915:6;:13;19911:1;:17;19891:1914;;;20190:14;20163:6;20170:1;20163:9;;;;;;;;;;;;;;;;;;;:24;;:41;20356:39;;20326:70;;20334:20;;20326:7;:70::i;:::-;20286:110;;20632:165;20666:6;20673:1;20666:9;;;;;;;;;20632:165;20592:205;;20917:128;20944:6;20951:1;20944:9;;;;;;;;;;;;;;;;;;20971:29;21018:10;21029:1;21018:13;;;;;;;;;20917:128;21370:21;;21440:1;21431:11;21408:35;;20878:167;-1:-1:-1;21541:51:9;21556:16;20878:167;21541:14;:51::i;:::-;21692:39;;:63;;21688:107;;;21775:5;;21688:107;19930:3;;;;;19891:1914;;1042:36:8;;;-1:-1:-1;;;;;1042:36:8;;:::o;566:167:30:-;460:5;;-1:-1:-1;;;;;460:5:30;446:10;:19;425:117;;;;-1:-1:-1;;;;;425:117:30;;;;;;;;;-1:-1:-1;;;;;662:22:30;;;658:69;;700:5;:16;;-1:-1:-1;;700:16:30;-1:-1:-1;;;;;700:16:30;;;;;658:69;566:167;:::o;1097:46:2:-;;;;;;;;;;;;;;;;;;;:::o;3221:241:8:-;3352:21;;3304:7;;;;-1:-1:-1;;;;;3352:21:8;:35;:72;;3403:21;;-1:-1:-1;;;;;3403:21:8;3352:72;;;3390:10;3352:72;3327:97;3221:241;-1:-1:-1;;3221:241:8:o;4613:1073:5:-;5567:64;5575:9;:26;;;5603:10;:27;;;5567:7;:64::i;:::-;5487;5495:9;:26;;;5523:10;:27;;;5487:7;:64::i;:::-;5645:24;;;;;;;;;;;;;;;;;;-1:-1:-1;5487:144:5;5466:213;;;;-1:-1:-1;;;;;5466:213:5;;;;;;;;;;;4613:1073;;:::o;6422:3469::-;6694:59;;:::i;:::-;7650:37;7768:38;7889:34;7933:35;7690:68;7698:9;:26;;;7726:31;7690:7;:68::i;:::-;7650:108;;7809:70;7817:10;:27;;;7846:32;7809:7;:70::i;:::-;7768:111;;8078:68;8086:30;8118:10;:27;;;8078:7;:68::i;:::-;7995:67;8003:29;8034:10;:27;;;7995:7;:67::i;:::-;:151;7978:1238;;8268:29;8239:58;;8507:164;8541:10;:27;;;8586:10;:27;;;8631:26;8507:16;:164::i;:::-;8477:194;;7978:1238;;;8802:30;8772:60;;9040:165;9074:10;:27;;;9119:10;:27;;;9164;9040:16;:165::i;:::-;9011:194;;7978:1238;9301:93;9335:9;9358:26;9301:20;:93::i;:::-;9275:119;;9482:95;9516:10;9540:27;9482:20;:95::i;:::-;9455:24;;;;:122;;;9700:23;;:46;9760:47;;;9679:138;;9700:46;9679:7;:138::i;:::-;9631:45;;;:186;6422:3469;;;;;;;;;;:::o;9315:1637:4:-;9681:21;;9747:16;;;;;;;;;;;;;;;;;;9681:52;;9712:20;9681:52;9660:113;;;;-1:-1:-1;;;;;9660:113:4;;;;;;;;;;-1:-1:-1;9888:20:4;;;;;;;;;;;;;;;;;9849:25;;;9828:90;;;;-1:-1:-1;;;;;9828:90:4;;;;;;;;;;-1:-1:-1;9990:19:4;;;;-1:-1:-1;;;;;9990:33:4;;9986:168;;10064:19;;;;10115:14;;;;;;;;;;;;;-1:-1:-1;10115:14:4;;;;-1:-1:-1;;;;;10064:33:4;10087:10;10064:33;10039:104;;;;-1:-1:-1;;;;;10039:104:4;;;;;;;;;;;9986:168;10224:18;;;;-1:-1:-1;;;;;10224:32:4;;10220:167;;10319:12;-1:-1:-1;;;;;10297:34:4;:5;:18;;;-1:-1:-1;;;;;10297:34:4;;10349:13;;;;;;;;;;;;;;;;;;10272:104;;;;;;;-1:-1:-1;;;;;10272:104:4;;;;;;;;;;;10220:167;10469:37;;;;:42;10465:221;;;10552:68;10569:9;:19;;;10590:5;:18;;;10610:9;10552:16;:68::i;:::-;10638:23;;;;;;;;;;;;;;;;;;10527:148;;;;;;-1:-1:-1;;;;;10527:148:4;;;;;;;;;;;10465:221;10758:149;10791:22;10831:5;:22;;;10871:5;:22;;;10758:15;:149::i;:::-;10921:14;;;;;;;;;;;;;;;;;;10757:150;10736:209;;;;-1:-1:-1;;;;;10736:209:4;;;;;;;;;;;9315:1637;;;;;;:::o;7372:768::-;7650:72;7658:27;7687:11;:34;;;7650:7;:72::i;:::-;7630:17;;;;:6;:17;;;;;;;;;:92;;;;7835:25;;;;7777:18;;7874:34;;7922;;;;7970:24;;;;8008;;;;8069:20;;;;8103;;;;7759:374;;7630:17;;-1:-1:-1;;;;;7759:374:4;;;;;;;;;;;;;7809:12;;7874:34;;7922;;7970:24;;8008;;8103:20;7759:374;;;;;;;;;;7372:768;;;;;:::o;3650:2652:6:-;3898:27;3982:28;4068:25;3934:37;3946:9;:24;;;3934:11;:37::i;:::-;-1:-1:-1;;;3928:44:6;;3898:74;;4019:38;4031:10;:25;;;4019:11;:38::i;:::-;4096:14;4068:42;;;;;;;;-1:-1:-1;;4068:42:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4013:45:6;;;;-1:-1:-1;4068:42:6;;4096:14;4068:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4154:237;4188:9;:24;;;4226:21;4261:9;:22;;;4297:10;:23;;;4334:18;:24;;;:47;;;4154:20;:237::i;:::-;4435:25;;;;4510:23;;4547:22;;4583:23;;:46;;;4401:238;;4435:25;4474:22;;4510:23;;4401:20;:238::i;:::-;4649:224;4683:9;:24;;;4721:21;4756:9;:22;;;4792:12;4818:18;:45;;;4649:20;:224::i;:::-;4906:211;4940:12;1334:1;4992:9;:22;;;5028:9;:29;;;5071:18;:23;;;:36;;;4906:20;:211::i;:::-;5127:214;5161:12;1334:1;5213:10;:23;;;5250:10;:30;;;5294:18;:24;;;:37;;;5127:20;:214::i;:::-;5411:10;:30;;;-1:-1:-1;;;;;5378:63:6;:9;:29;;;-1:-1:-1;;;;;5378:63:6;;5374:922;;;5457:331;5495:12;1334:1;5555:12;5585:9;:29;;;5632:142;5661:18;:23;;;:36;;;5719:18;:24;;;:37;;;5632:7;:142::i;:::-;5457:20;:331::i;:::-;5374:922;;;5819:225;5857:12;1334:1;5917:12;5947:9;:29;;;5994:18;:23;;;:36;;;5819:20;:225::i;:::-;6058:227;6096:12;1334:1;6156:12;6186:10;:30;;;6234:18;:24;;;:37;;;6058:20;:227::i;418:146:31:-;498:7;528:6;;;;521:14;;;;-1:-1:-1;552:5:31;;;418:146::o;1307:648:18:-;1500:39;;1541:40;;1492:90;;1500:39;1492:7;:90::i;:::-;1450:132;;1642:39;;;;;1683:40;;;;1634:90;;1642:39;1634:7;:90::i;:::-;1592:39;;;:132;1774:29;;;;;1805:30;;;;1766:70;;1774:29;1766:7;:70::i;:::-;1734:29;;;:102;1886:29;;;;;1917:30;;;;1878:70;;1886:29;1878:7;:70::i;:::-;1846:29;;;;:102;;;;-1:-1:-1;1307:648:18:o;1520:446:27:-;1604:13;1665:1;1654;:8;:12;1680:33;;;;;;;;;;;;;;;;;;;;;;;1633:90;;;;;;;-1:-1:-1;;;;;1633:90:27;;;;;;;;;;-1:-1:-1;1773:8:27;;1771:1;;-1:-1:-1;;1773:12:27;;;1771:15;;;;;;;;;;1885:8;;-1:-1:-1;;1881:16:27;1910:17;;;-1:-1:-1;;;;1771:15:27;;;;;;1520:446::o;5639:488::-;5760:14;5823:5;5831:2;5823:10;5811:1;:8;:22;;5847:38;;;;;;;;;;;;;;;;;;;;;;;5790:105;;;;;;;-1:-1:-1;;;;;5790:105:27;;;;;;;;;;-1:-1:-1;;6074:13:27;5976:2;6074:13;6068:20;;5639:488::o;2161:480::-;2248:14;2311:2;2299:1;:8;:14;;2327:38;;;;;;;;;;;;;;;;;;;;;;;2278:97;;;;;;;-1:-1:-1;;;;;2278:97:27;;;;;;;;;;;2427:29;2439:1;2453:2;2442:1;:8;:13;2427:11;:29::i;:::-;2559:8;;-1:-1:-1;;2555:17:27;2585;;;-1:-1:-1;2418:38:27;2161:480::o;1064:326:19:-;1218:21;1271:82;1292:26;1300:9;1311:6;1292:7;:26::i;:::-;1332:11;1271:7;:82::i;:::-;1255:98;1064:326;-1:-1:-1;;;;1064:326:19:o;1161:135:31:-;1246:7;1280:1;1276;:5;:13;;1288:1;1276:13;;;1284:1;1276:13;1269:20;1161:135;-1:-1:-1;;;1161:135:31:o;12230:994:4:-;12381:30;;:::i;:::-;12586:34;;;:59;;;12770:22;;;;12806;;;;12692:146;;12623:22;;12692:16;:146::i;:::-;12655:183;;12905:34;;;;12953:22;;;;12989:14;;;;12875:138;;12905:34;12953:22;12875:16;:138::i;:::-;12848:24;;;:165;13080:34;;;;13128:22;;;;13164:14;;;;13050:138;;13080:34;13128:22;13050:16;:138::i;:::-;13023:24;;;:165;12230:994;;;;:::o;2005:1199:6:-;2185:23;2261;2337:25;2217:33;2229:5;:20;;;2217:11;:33::i;:::-;-1:-1:-1;;;2211:40:6;;2185:66;;2293:33;2305:5;:20;;;2293:11;:33::i;:::-;2365:14;2337:42;;;;;;;;-1:-1:-1;;2337:42:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2287:40:6;;;;-1:-1:-1;2337:42:6;;2365:14;2337:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2389:201;2423:5;:20;;;2457:17;2488:5;:18;;;2520:12;2546:11;:34;;;2389:20;:201::i;:::-;2600;2634:5;:20;;;2668:17;2699:12;2725:5;:18;;;2757:11;:34;;;2600:20;:201::i;:::-;2811:191;2845:12;1334:1;2897:5;:18;;;2929:5;:25;;;2968:11;:24;;;2811:20;:191::i;:::-;3012:185;3046:12;1334:1;3098:12;3124:5;:25;;;3163:11;:24;;;3012:20;:185::i;:::-;2005:1199;;;;;;:::o;2793:997:20:-;2882:17;689:67;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;689:67:20;;;679:78;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;679:78:20;;;;;;;;;;;;3150:4;3125:31;;;;;;;;;26:21:-1;;;22:32;6:49;;3125:31:20;;;;;;;;3115:42;;679:78;;-1:-1:-1;3125:31:20;;-1:-1:-1;3125:31:20;;-1:-1:-1;3115:42:20;;;;3125:31;3115:42;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;3115:42:20;;;;;;;;;;;;811:458;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;811:458:20;;;;;;;;801:469;;3115:42;;-1:-1:-1;811:458:20;;-1:-1:-1;811:458:20;;-1:-1:-1;801:469:20;;;;811:458;801:469;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;801:469:20;;;;;;;;;;;;;;;;3246:5;:18;;;3282:5;:18;;;3318:5;:25;;;3361:5;:19;;;3398:5;:22;;;3438:5;:22;;;3478:5;:14;;;3510:5;:14;;;3542:5;:27;;;3587:5;:10;;;3642:5;:20;;;3625:38;;;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3625:38:20;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3625:38:20;;;3615:49;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3615:49:20;;;;;;;;;;;;;;;;3709:5;:20;;;3692:38;;;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3692:38:20;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3692:38:20;;;3682:49;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3682:49:20;;;;;;;;;;;;;;;;3212:533;;;;;;-1:-1:-1;;;;;3212:533:20;-1:-1:-1;;;;;3212:533:20;;;;;;;;-1:-1:-1;;;;;3212:533:20;-1:-1:-1;;;;;3212:533:20;;;;;;;;-1:-1:-1;;;;;3212:533:20;-1:-1:-1;;;;;3212:533:20;;;;;;;;-1:-1:-1;;;;;3212:533:20;-1:-1:-1;;;;;3212:533:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3212:533:20;;;3202:544;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;-1:-1;;263:2;259:12;;;254:3;250:22;246:30;340:21;;;311:9;;295:26;;;;377:20;365:33;;3202:544:20;;;;;;;;;;;;3043:713;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3043:713:20;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;3043:713:20;;;;;;-1:-1:-1;;3033:724:20;;3043:713;;;;3033:724;;;;;3043:713;3033:724;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;3033:724:20;;;;;;;;;;;2793:997;-1:-1:-1;;;;;2793:997:20:o;11149:810:4:-;11413:21;;11479:16;;;;;;;;;;;;;;;;;11801:20;;11413:52;;11444:20;11413:52;11392:113;;;;-1:-1:-1;;;;;11392:113:4;;;;;;;;;;-1:-1:-1;11579:19:4;;;;-1:-1:-1;;;;;11579:33:4;;11575:168;;11653:19;;;;11704:14;;;;;;;;;;;;;-1:-1:-1;11704:14:4;;;;-1:-1:-1;;;;;11653:33:4;11676:10;11653:33;11628:104;;;;-1:-1:-1;;;;;11628:104:4;;;;;;;;;;;11575:168;11824:26;:24;:26::i;:::-;11881:18;;11929:13;;;;;;;;;;;;;;;;;11801:49;;-1:-1:-1;;;;;;11881:34:4;;;;;;11860:92;;;;-1:-1:-1;;;;;11860:92:4;;;;;;;;;8442:398;8590:20;;;;:9;:20;;;;;;;:27;;-1:-1:-1;;8590:27:4;8613:4;8590:27;;;8707:25;;;;8675:18;;8769:20;;;;8803;;;;8655:178;;8600:9;;-1:-1:-1;;;;;8655:178:4;;;;;;;;;;;;;8769:20;;8803;8655:178;;;;;;;;;;8442:398;;:::o;84:180:31:-;164:7;196:5;;;218:6;;;:20;;;237:1;232;228;:5;;;;;;;;:10;218:20;211:28;;;;;1629:555:19;1782:12;1810:17;1967:33;1856:11;1830:38;;;;;;;1845:9;1837:6;1830:38;1810:58;-1:-1:-1;1882:14:19;;1878:79;;;1919:5;1912:12;;;;1878:79;2003:98;2024:27;2032:9;2043:7;2024;:27::i;:::-;2065:26;2073:9;2084:6;2065:7;:26::i;:::-;2003:7;:98::i;:::-;2149:4;2121:32;;;-1:-1:-1;1967:134:19;-1:-1:-1;1629:555:19;;;;;;;;:::o;570:166:31:-;650:7;682:5;;;704:6;;;;697:14;;;3283:506:3;3597:22;3547:1;3538:6;:10;3534:249;;;-1:-1:-1;3622:26:3;;;;;;;:12;:26;;;;;;;;3720:52;;;;;-1:-1:-1;;;;;3622:26:3;;;;;;3720:23;;:52;;3744:9;;3755:4;;3761:2;;3765:6;;3720:52;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3720:52:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3720:52:3;;;;3283:506;;;;;;:::o;2855:884:27:-;2976:14;3039:5;3047:2;3039:10;3027:1;:8;:22;;3091:38;;;;;;;;;;;;;;;;;;;;;;;3006:133;;;;;;;-1:-1:-1;;;;;3006:133:27;;;;;;;;;;-1:-1:-1;;3641:13:27;3386:2;3641:13;3635:20;-1:-1:-1;;;;;3631:69:27;;2855:884::o;270:142:31:-;350:7;373:6;386:1;382;:5;;;;;;;;;270:142;-1:-1:-1;;;;270:142:31:o;894:607:2:-;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;894:607:2;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;146:693;;261:4;249:17;;245:27;-1:-1;235:2;;286:1;283;276:12;235:2;323:6;310:20;345:85;360:69;422:6;360:69;;;345:85;;;458:21;;;502:4;490:17;;;;336:94;;-1:-1;515:14;;490:17;610:1;595:238;620:6;617:1;614:13;595:238;;;703:3;690:17;682:6;678:30;727:42;765:3;753:10;727:42;;;715:55;;-1:-1;793:4;784:14;;;;812;;;;;642:1;635:9;595:238;;;599:14;228:611;;;;;;;;879:735;;1008:4;996:17;;992:27;-1:-1;982:2;;1033:1;1030;1023:12;982:2;1070:6;1057:20;1092:99;1107:83;1183:6;1107:83;;1092:99;1219:21;;;1263:4;1251:17;;;;1083:108;;-1:-1;1276:14;;1251:17;1371:1;1356:252;1381:6;1378:1;1375:13;1356:252;;;1464:3;1451:17;1443:6;1439:30;1488:56;1540:3;1528:10;1488:56;;;1476:69;;-1:-1;1568:4;1559:14;;;;1587;;;;;1403:1;1396:9;1356:252;;1640:707;;1750:4;1738:17;;1734:27;-1:-1;1724:2;;1775:1;1772;1765:12;1724:2;1812:6;1799:20;1834:80;1849:64;1906:6;1849:64;;1834:80;1825:89;;1931:5;1956:6;1949:5;1942:21;1986:4;1978:6;1974:17;1964:27;;2008:4;2003:3;1999:14;1992:21;;2061:6;2108:3;2100:4;2092:6;2088:17;2083:3;2079:27;2076:36;2073:2;;;2125:1;2122;2115:12;2073:2;2150:1;2135:206;2160:6;2157:1;2154:13;2135:206;;;2218:3;2240:37;2273:3;2261:10;2240:37;;;2228:50;;-1:-1;2301:4;2292:14;;;;2320;;;;;2182:1;2175:9;2135:206;;2355:112;;2419:43;2454:6;2441:20;2419:43;;2474:116;;2549:36;2577:6;2571:13;2549:36;;2597:118;;2664:46;2702:6;2689:20;2664:46;;2736:335;;;2843:4;2831:17;;2827:27;-1:-1;2817:2;;2868:1;2865;2858:12;2817:2;-1:-1;2888:20;;2928:18;2917:30;;2914:2;;;2960:1;2957;2950:12;2914:2;2994:4;2986:6;2982:17;2970:29;;3044:3;3037;3029:6;3025:16;3015:8;3011:31;3008:40;3005:2;;;3061:1;3058;3051:12;3005:2;2810:261;;;;;;3080:432;;3170:4;3158:17;;3154:27;-1:-1;3144:2;;3195:1;3192;3185:12;3144:2;3232:6;3219:20;3254:60;3269:44;3306:6;3269:44;;3254:60;3245:69;;3334:6;3327:5;3320:21;3370:4;3362:6;3358:17;3403:4;3396:5;3392:16;3438:3;3429:6;3424:3;3420:16;3417:25;3414:2;;;3455:1;3452;3445:12;3414:2;3465:41;3499:6;3494:3;3489;3465:41;;;3137:375;;;;;;;;3997:2205;;4105:5;4093:9;4088:3;4084:19;4080:31;4077:2;;;4124:1;4121;4114:12;4077:2;4142:21;4157:5;4142:21;;;4133:30;-1:-1;4221:1;4252:49;4297:3;4277:9;4252:49;;;4228:74;;-1:-1;4371:2;4404:49;4449:3;4425:22;;;4404:49;;;4397:4;4390:5;4386:16;4379:75;4323:142;4530:2;4563:49;4608:3;4599:6;4588:9;4584:22;4563:49;;;4556:4;4549:5;4545:16;4538:75;4475:149;4683:2;4716:49;4761:3;4752:6;4741:9;4737:22;4716:49;;;4709:4;4702:5;4698:16;4691:75;4634:143;4839:3;4873:49;4918:3;4909:6;4898:9;4894:22;4873:49;;;4866:4;4859:5;4855:16;4848:75;4787:147;4996:3;5030:49;5075:3;5066:6;5055:9;5051:22;5030:49;;;5023:4;5016:5;5012:16;5005:75;4944:147;5145:3;5179:49;5224:3;5215:6;5204:9;5200:22;5179:49;;;5172:4;5165:5;5161:16;5154:75;5101:139;5294:3;5328:49;5373:3;5364:6;5353:9;5349:22;5328:49;;;5321:4;5314:5;5310:16;5303:75;5250:139;5456:3;5491:49;5536:3;5527:6;5516:9;5512:22;5491:49;;;5483:5;5476;5472:17;5465:76;5399:153;5602:3;5637:49;5682:3;5673:6;5662:9;5658:22;5637:49;;;5629:5;5622;5618:17;5611:76;5562:136;5786:3;5775:9;5771:19;5758:33;5811:18;5803:6;5800:30;5797:2;;;5843:1;5840;5833:12;5797:2;5879:54;5929:3;5920:6;5909:9;5905:22;5879:54;;;5871:5;5864;5860:17;5853:81;5708:237;6033:3;6022:9;6018:19;6005:33;6058:18;6050:6;6047:30;6044:2;;;6090:1;6087;6080:12;6044:2;6126:54;6176:3;6167:6;6156:9;6152:22;6126:54;;;6118:5;6111;6107:17;6100:81;5955:237;4071:2131;;;;;8578:114;;8643:44;8679:6;8666:20;8643:44;;8699:118;;8775:37;8804:6;8798:13;8775:37;;8824:241;;8928:2;8916:9;8907:7;8903:23;8899:32;8896:2;;;8944:1;8941;8934:12;8896:2;8979:1;8996:53;9041:7;9021:9;8996:53;;9072:366;;;9193:2;9181:9;9172:7;9168:23;9164:32;9161:2;;;9209:1;9206;9199:12;9161:2;9244:1;9261:53;9306:7;9286:9;9261:53;;;9251:63;;9223:97;9351:2;9369:53;9414:7;9405:6;9394:9;9390:22;9369:53;;;9359:63;;9330:98;9155:283;;;;;;9445:360;;;9563:2;9551:9;9542:7;9538:23;9534:32;9531:2;;;9579:1;9576;9569:12;9531:2;9614:1;9631:53;9676:7;9656:9;9631:53;;;9621:63;;9593:97;9721:2;9739:50;9781:7;9772:6;9761:9;9757:22;9739:50;;9812:415;;9960:2;9948:9;9939:7;9935:23;9931:32;9928:2;;;9976:1;9973;9966:12;9928:2;10011:31;;10062:18;10051:30;;10048:2;;;10094:1;10091;10084:12;10048:2;10114:97;10203:7;10194:6;10183:9;10179:22;10114:97;;10234:947;;;;10471:2;10459:9;10450:7;10446:23;10442:32;10439:2;;;10487:1;10484;10477:12;10439:2;10522:31;;10573:18;10562:30;;10559:2;;;10605:1;10602;10595:12;10559:2;10625:97;10714:7;10705:6;10694:9;10690:22;10625:97;;;10615:107;;10501:227;10787:2;10776:9;10772:18;10759:32;10811:18;10803:6;10800:30;10797:2;;;10843:1;10840;10833:12;10797:2;10863:78;10933:7;10924:6;10913:9;10909:22;10863:78;;;10853:88;;10738:209;11006:2;10995:9;10991:18;10978:32;11030:18;11022:6;11019:30;11016:2;;;11062:1;11059;11052:12;11016:2;11082:83;11157:7;11148:6;11137:9;11133:22;11082:83;;;11072:93;;10957:214;10433:748;;;;;;11188:811;;;;11400:2;11388:9;11379:7;11375:23;11371:32;11368:2;;;11416:1;11413;11406:12;11368:2;11451:31;;11502:18;11491:30;;11488:2;;;11534:1;11531;11524:12;11488:2;11554:97;11643:7;11634:6;11623:9;11619:22;11554:97;;;11544:107;;11430:227;11688:2;11706:53;11751:7;11742:6;11731:9;11727:22;11706:53;;12006:257;;12118:2;12106:9;12097:7;12093:23;12089:32;12086:2;;;12134:1;12131;12124:12;12086:2;12169:1;12186:61;12239:7;12219:9;12186:61;;12270:241;;12374:2;12362:9;12353:7;12349:23;12345:32;12342:2;;;12390:1;12387;12380:12;12342:2;12425:1;12442:53;12487:7;12467:9;12442:53;;12518:366;;;12639:2;12627:9;12618:7;12614:23;12610:32;12607:2;;;12655:1;12652;12645:12;12607:2;12690:1;12707:53;12752:7;12732:9;12707:53;;12891:615;;;;;13048:2;13036:9;13027:7;13023:23;13019:32;13016:2;;;13064:1;13061;13054:12;13016:2;13099:1;13116:53;13161:7;13141:9;13116:53;;;13106:63;;13078:97;13206:2;13224:53;13269:7;13260:6;13249:9;13245:22;13224:53;;;13214:63;;13185:98;13342:2;13331:9;13327:18;13314:32;13366:18;13358:6;13355:30;13352:2;;;13398:1;13395;13388:12;13352:2;13426:64;13482:7;13473:6;13462:9;13458:22;13426:64;;;13010:496;;;;-1:-1;13408:82;-1:-1;;;;13010:496;13513:595;;;;13660:2;13648:9;13639:7;13635:23;13631:32;13628:2;;;13676:1;13673;13666:12;13628:2;13711:1;13728:53;13773:7;13753:9;13728:53;;;13718:63;;13690:97;13818:2;13836:53;13881:7;13872:6;13861:9;13857:22;13836:53;;;13826:63;;13797:98;13954:2;13943:9;13939:18;13926:32;13978:18;13970:6;13967:30;13964:2;;;14010:1;14007;14000:12;13964:2;14030:62;14084:7;14075:6;14064:9;14060:22;14030:62;;14115:373;;14242:2;14230:9;14221:7;14217:23;14213:32;14210:2;;;14258:1;14255;14248:12;14210:2;14293:31;;14344:18;14333:30;;14330:2;;;14376:1;14373;14366:12;14330:2;14396:76;14464:7;14455:6;14444:9;14440:22;14396:76;;14495:1089;;;;;14714:3;14702:9;14693:7;14689:23;14685:33;14682:2;;;14731:1;14728;14721:12;14682:2;14766:31;;14817:18;14806:30;;14803:2;;;14849:1;14846;14839:12;14803:2;14869:76;14937:7;14928:6;14917:9;14913:22;14869:76;;;14859:86;;14745:206;15010:2;14999:9;14995:18;14982:32;15034:18;15026:6;15023:30;15020:2;;;15066:1;15063;15056:12;15020:2;15086:76;15154:7;15145:6;15134:9;15130:22;15086:76;;;15076:86;;14961:207;15227:2;15216:9;15212:18;15199:32;15251:18;15243:6;15240:30;15237:2;;;15283:1;15280;15273:12;15237:2;15303:62;15357:7;15348:6;15337:9;15333:22;15303:62;;;15293:72;;15178:193;15430:2;15419:9;15415:18;15402:32;15454:18;15446:6;15443:30;15440:2;;;15486:1;15483;15476:12;15440:2;15506:62;15560:7;15551:6;15540:9;15536:22;15506:62;;;15496:72;;15381:193;14676:908;;;;;;;;15591:727;;;;15761:2;15749:9;15740:7;15736:23;15732:32;15729:2;;;15777:1;15774;15767:12;15729:2;15812:31;;15863:18;15852:30;;15849:2;;;15895:1;15892;15885:12;15849:2;15915:76;15983:7;15974:6;15963:9;15959:22;15915:76;;;15905:86;;15791:206;16028:2;16046:53;16091:7;16082:6;16071:9;16067:22;16046:53;;16573:865;;;;;;;16766:3;16754:9;16745:7;16741:23;16737:33;16734:2;;;16783:1;16780;16773:12;16734:2;16818:1;16835:53;16880:7;16860:9;16835:53;;;16825:63;;16797:97;16925:2;16943:53;16988:7;16979:6;16968:9;16964:22;16943:53;;;16933:63;;16904:98;17061:2;17050:9;17046:18;17033:32;17085:18;17077:6;17074:30;17071:2;;;17117:1;17114;17107:12;17071:2;17145:64;17201:7;17192:6;17181:9;17177:22;17145:64;;;17127:82;;;;17012:203;17274:2;17263:9;17259:18;17246:32;17298:18;17290:6;17287:30;17284:2;;;17330:1;17327;17320:12;17284:2;17358:64;17414:7;17405:6;17394:9;17390:22;17358:64;;;17340:82;;;;17225:203;16728:710;;;;;;;;;17445:237;;17547:2;17535:9;17526:7;17522:23;17518:32;17515:2;;;17563:1;17560;17553:12;17515:2;17598:1;17615:51;17658:7;17638:9;17615:51;;17689:259;;17802:2;17790:9;17781:7;17777:23;17773:32;17770:2;;;17818:1;17815;17808:12;17770:2;17853:1;17870:62;17924:7;17904:9;17870:62;;17955:487;;;;18091:2;18079:9;18070:7;18066:23;18062:32;18059:2;;;18107:1;18104;18097:12;18059:2;18142:1;18159:51;18202:7;18182:9;18159:51;;;18149:61;;18121:95;18247:2;18265:53;18310:7;18301:6;18290:9;18286:22;18265:53;;;18255:63;;18226:98;18355:2;18373:53;18418:7;18409:6;18398:9;18394:22;18373:53;;18449:110;18522:31;18547:5;18522:31;;;18517:3;18510:44;18504:55;;;18566:101;18633:28;18655:5;18633:28;;18674:110;18747:31;18772:5;18747:31;;18791:297;;18891:38;18923:5;18891:38;;;18946:6;18941:3;18934:19;18958:63;19014:6;19007:4;19002:3;18998:14;18991:4;18984:5;18980:16;18958:63;;;19053:29;19075:6;19053:29;;;19033:50;;;19046:4;19033:50;;18871:217;-1:-1;;;18871:217;19391:156;19484:57;19535:5;19484:57;;19854:397;20009:2;19997:15;;20046:66;20041:2;20032:12;;20025:88;20147:66;20142:2;20133:12;;20126:88;20242:2;20233:12;;19990:261;20336:888;20564:22;;20477:4;20468:14;;;20598:61;20472:3;20564:22;20598:61;;;20497:174;20765:4;20758:5;20754:16;20748:23;20783:62;20839:4;20834:3;20830:14;20817:11;20783:62;;;20681:176;20941:4;20934:5;20930:16;20924:23;20959:62;21015:4;21010:3;21006:14;20993:11;20959:62;;;20867:166;21117:4;21110:5;21106:16;21100:23;21135:62;21191:4;21186:3;21182:14;21169:11;21135:62;;22290:815;22515:22;;22445:5;22436:15;;;22549:115;22440:3;22515:22;22549:115;;;22466:210;22753:4;22746:5;22742:16;22736:23;22771:116;22881:4;22876:3;22872:14;22859:11;22771:116;;;22686:213;22997:4;22990:5;22986:16;22980:23;23015:63;23071:5;23066:3;23062:15;23049:11;23015:63;;23173:695;23386:22;;23310:4;23301:14;;;23420:57;23305:3;23386:22;23420:57;;;23330:159;23570:4;23563:5;23559:16;23553:23;23588:62;23644:4;23639:3;23635:14;23622:11;23588:62;;;23499:163;23761:4;23754:5;23750:16;23744:23;23779:62;23835:4;23830:3;23826:14;23813:11;23779:62;;23992:104;24061:29;24084:5;24061:29;;24103:193;24211:2;24196:18;;24225:61;24200:9;24259:6;24225:61;;24303:955;24607:3;24592:19;;24622:61;24596:9;24656:6;24622:61;;;24694:62;24752:2;24741:9;24737:18;24728:6;24694:62;;;24767;24825:2;24814:9;24810:18;24801:6;24767:62;;;24840;24898:2;24887:9;24883:18;24874:6;24840:62;;;24913:63;24971:3;24960:9;24956:19;24947:6;24913:63;;;25025:9;25019:4;25015:20;25009:3;24998:9;24994:19;24987:49;25050:62;25107:4;25098:6;25050:62;;;25042:70;;25161:9;25155:4;25151:20;25145:3;25134:9;25130:19;25123:49;25186:62;25243:4;25234:6;25186:62;;;25178:70;24578:680;-1:-1;;;;;;;;;24578:680;25265:181;25367:2;25352:18;;25381:55;25356:9;25409:6;25381:55;;25453:479;25635:2;25620:18;;25649:61;25624:9;25683:6;25649:61;;;25721:62;25779:2;25768:9;25764:18;25755:6;25721:62;;;25831:9;25825:4;25821:20;25816:2;25805:9;25801:18;25794:48;25856:66;25917:4;25908:6;25856:66;;;25848:74;25606:326;-1:-1;;;;;25606:326;25939:378;26093:2;26078:18;;26107:61;26082:9;26141:6;26107:61;;;26216:9;26210:4;26206:20;26201:2;26190:9;26186:18;26179:48;26241:66;26302:4;26293:6;26241:66;;26324:489;26512:3;26497:19;;26527:61;26501:9;26561:6;26527:61;;;26599:58;26653:2;26642:9;26638:18;26629:6;26599:58;;;26668:62;26726:2;26715:9;26711:18;26702:6;26668:62;;;26741;26799:2;26788:9;26784:18;26775:6;26741:62;;26820:581;27030:3;27045:47;;;27015:19;;27106:66;27015:19;27158:6;27106:66;;;27098:74;;27183:62;27241:2;27230:9;27226:18;27217:6;27183:62;;;27256;27314:2;27303:9;27299:18;27290:6;27256:62;;27408:446;27572:2;27586:47;;;27557:18;;27647:62;27557:18;27695:6;27647:62;;;27639:70;;27757:9;27751:4;27747:20;27742:2;27731:9;27727:18;27720:48;27782:62;27839:4;27830:6;27782:62;;27861:233;27989:2;27974:18;;28003:81;27978:9;28057:6;28003:81;;28101:273;28225:2;28239:47;;;28210:18;;28300:64;28210:18;28350:6;28300:64;;28381:387;28562:2;28576:47;;;28547:18;;28637:121;28547:18;28637:121;;28775:310;28941:3;28926:19;;28956:119;28930:9;29048:6;28956:119;;29092:338;29272:3;29257:19;;29287:133;29261:9;29393:6;29287:133;;29437:301;29599:2;29584:18;;29613:115;29588:9;29701:6;29613:115;;29745:193;29853:2;29838:18;;29867:61;29842:9;29901:6;29867:61;;29945:387;30105:2;30090:18;;30119:57;30094:9;30149:6;30119:57;;;30187:62;30245:2;30234:9;30230:18;30221:6;30187:62;;;30260;30318:2;30307:9;30303:18;30294:6;30260:62;;30339:256;30401:2;30395:9;30427:17;;;30502:18;30487:34;;30523:22;;;30484:62;30481:2;;;30559:1;30556;30549:12;30481:2;30575;30568:22;30379:216;;-1:-1;30379:216;30602:263;;30766:18;30758:6;30755:30;30752:2;;;30798:1;30795;30788:12;30752:2;-1:-1;30827:4;30815:17;;;30845:15;;30689:176;31421:254;;31560:18;31552:6;31549:30;31546:2;;;31592:1;31589;31582:12;31546:2;-1:-1;31665:4;31636;31613:17;;;;-1:-1;;31609:33;31655:15;;31483:192;31947:87;32017:12;;32001:33;32234:128;-1:-1;;;;;32303:54;;32286:76;32369:92;32442:13;32435:21;;32418:43;32468:79;32537:5;32520:27;32640:88;32718:4;32707:16;;32690:38;33236:135;;33335:31;33360:5;33335:31;;33379:145;33460:6;33455:3;33450;33437:30;-1:-1;33516:1;33498:16;;33491:27;33430:94;33533:268;33598:1;33605:101;33619:6;33616:1;33613:13;33605:101;;;33686:11;;;33680:18;33667:11;;;33660:39;33641:2;33634:10;33605:101;;;33721:6;33718:1;33715:13;33712:2;;;-1:-1;;33786:1;33768:16;;33761:27;33582:219;33809:97;33897:2;33877:14;-1:-1;;33873:28;;33857:49"
			}
		}
	},
	"sources": {
		"current/protocol/AssetProxy/interfaces/IAssetProxy.sol": {
			"id": 0
		},
		"current/protocol/AssetProxy/interfaces/IAuthorizable.sol": {
			"id": 1
		},
		"current/protocol/Exchange/Exchange.sol": {
			"id": 2
		},
		"current/protocol/Exchange/MixinAssetProxyDispatcher.sol": {
			"id": 3
		},
		"current/protocol/Exchange/MixinExchangeCore.sol": {
			"id": 4
		},
		"current/protocol/Exchange/MixinMatchOrders.sol": {
			"id": 5
		},
		"current/protocol/Exchange/MixinSettlement.sol": {
			"id": 6
		},
		"current/protocol/Exchange/MixinSignatureValidator.sol": {
			"id": 7
		},
		"current/protocol/Exchange/MixinTransactions.sol": {
			"id": 8
		},
		"current/protocol/Exchange/MixinWrapperFunctions.sol": {
			"id": 9
		},
		"current/protocol/Exchange/interfaces/IAssetProxyDispatcher.sol": {
			"id": 10
		},
		"current/protocol/Exchange/interfaces/IExchangeCore.sol": {
			"id": 11
		},
		"current/protocol/Exchange/interfaces/IMatchOrders.sol": {
			"id": 12
		},
		"current/protocol/Exchange/interfaces/ISignatureValidator.sol": {
			"id": 13
		},
		"current/protocol/Exchange/interfaces/ITransactions.sol": {
			"id": 14
		},
		"current/protocol/Exchange/interfaces/IValidator.sol": {
			"id": 15
		},
		"current/protocol/Exchange/interfaces/IWallet.sol": {
			"id": 16
		},
		"current/protocol/Exchange/libs/LibExchangeErrors.sol": {
			"id": 17
		},
		"current/protocol/Exchange/libs/LibFillResults.sol": {
			"id": 18
		},
		"current/protocol/Exchange/libs/LibMath.sol": {
			"id": 19
		},
		"current/protocol/Exchange/libs/LibOrder.sol": {
			"id": 20
		},
		"current/protocol/Exchange/mixins/MAssetProxyDispatcher.sol": {
			"id": 21
		},
		"current/protocol/Exchange/mixins/MExchangeCore.sol": {
			"id": 22
		},
		"current/protocol/Exchange/mixins/MMatchOrders.sol": {
			"id": 23
		},
		"current/protocol/Exchange/mixins/MSettlement.sol": {
			"id": 24
		},
		"current/protocol/Exchange/mixins/MSignatureValidator.sol": {
			"id": 25
		},
		"current/protocol/Exchange/mixins/MTransactions.sol": {
			"id": 26
		},
		"current/utils/LibBytes/LibBytes.sol": {
			"id": 27
		},
		"current/utils/LibMem/LibMem.sol": {
			"id": 28
		},
		"current/utils/Ownable/IOwnable.sol": {
			"id": 29
		},
		"current/utils/Ownable/Ownable.sol": {
			"id": 30
		},
		"current/utils/SafeMath/SafeMath.sol": {
			"id": 31
		}
	},
	"sourceCodes": {
		"current/protocol/AssetProxy/interfaces/IAssetProxy.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./IAuthorizable.sol\";\n\ncontract IAssetProxy is\n    IAuthorizable\n{\n\n    /// @dev Transfers assets. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    function transferFrom(\n        bytes assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        external;\n    \n    /// @dev Makes multiple transfers of assets. Either succeeds or throws.\n    /// @param assetData Array of byte arrays encoded for the respective asset proxy.\n    /// @param from Array of addresses to transfer assets from.\n    /// @param to Array of addresses to transfer assets to.\n    /// @param amounts Array of amounts of assets to transfer.\n    function batchTransferFrom(\n        bytes[] memory assetData,\n        address[] memory from,\n        address[] memory to,\n        uint256[] memory amounts\n    )\n        public;\n\n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        view\n        returns (uint8);\n}\n\n",
		"current/protocol/AssetProxy/interfaces/IAuthorizable.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../../utils/Ownable/IOwnable.sol\";\n\ncontract IAuthorizable is\n    IOwnable\n{\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[]);\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n}\n",
		"current/protocol/Exchange/Exchange.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./MixinExchangeCore.sol\";\nimport \"./MixinSignatureValidator.sol\";\nimport \"./MixinSettlement.sol\";\nimport \"./MixinWrapperFunctions.sol\";\nimport \"./MixinAssetProxyDispatcher.sol\";\nimport \"./MixinTransactions.sol\";\nimport \"./MixinMatchOrders.sol\";\n\ncontract Exchange is\n    MixinExchangeCore,\n    MixinMatchOrders,\n    MixinSettlement,\n    MixinSignatureValidator,\n    MixinTransactions,\n    MixinAssetProxyDispatcher,\n    MixinWrapperFunctions\n{\n\n    string constant public VERSION = \"2.0.1-alpha\";\n\n    // Mixins are instantiated in the order they are inherited\n    constructor (bytes memory _zrxAssetData)\n        public\n        MixinExchangeCore()\n        MixinMatchOrders()\n        MixinSettlement(_zrxAssetData)\n        MixinSignatureValidator()\n        MixinTransactions()\n        MixinAssetProxyDispatcher()\n        MixinWrapperFunctions()\n    {}\n}\n",
		"current/protocol/Exchange/MixinAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../../utils/Ownable/Ownable.sol\";\nimport \"../../utils/LibBytes/LibBytes.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"./mixins/MAssetProxyDispatcher.sol\";\nimport \"../AssetProxy/interfaces/IAssetProxy.sol\";\n\ncontract MixinAssetProxyDispatcher is\n    Ownable,\n    LibBytes,\n    LibExchangeErrors,\n    MAssetProxyDispatcher\n{\n    // Mapping from Asset Proxy Id's to their respective Asset Proxy\n    mapping (uint8 => IAssetProxy) public assetProxies;\n\n    /// @dev Registers an asset proxy to an asset proxy id.\n    ///      An id can only be assigned to a single proxy at a given time.\n    /// @param assetProxyId Id to register`newAssetProxy` under.\n    /// @param newAssetProxy Address of new asset proxy to register, or 0x0 to unset assetProxyId.\n    /// @param oldAssetProxy Existing asset proxy to overwrite, or 0x0 if assetProxyId is currently unused.\n    function registerAssetProxy(\n        uint8 assetProxyId,\n        address newAssetProxy,\n        address oldAssetProxy\n    )\n        external\n        onlyOwner\n    {\n        // Ensure the existing asset proxy is not unintentionally overwritten\n        address currentAssetProxy = address(assetProxies[assetProxyId]);\n        require(\n            oldAssetProxy == currentAssetProxy,\n            ASSET_PROXY_MISMATCH\n        );\n\n        IAssetProxy assetProxy = IAssetProxy(newAssetProxy);\n\n        // Ensure that the id of newAssetProxy matches the passed in assetProxyId, unless it is being reset to 0.\n        if (newAssetProxy != address(0)) {\n            uint8 newAssetProxyId = assetProxy.getProxyId();\n            require(\n                newAssetProxyId == assetProxyId,\n                ASSET_PROXY_ID_MISMATCH\n            );\n        }\n\n        // Add asset proxy and log registration.\n        assetProxies[assetProxyId] = assetProxy;\n        emit AssetProxySet(assetProxyId, newAssetProxy, oldAssetProxy);\n    }\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(uint8 assetProxyId)\n        external\n        view\n        returns (address)\n    {\n        address assetProxy = address(assetProxies[assetProxyId]);\n        return assetProxy;\n    }\n\n    /// @dev Forwards arguments to assetProxy and calls `transferFrom`. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param assetProxyId Id of assetProxy to dispach to.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param amount Amount of token to transfer.\n    function dispatchTransferFrom(\n        bytes memory assetData,\n        uint8 assetProxyId,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        // Do nothing if no amount should be transferred.\n        if (amount > 0) {\n            // Lookup assetProxy\n            IAssetProxy assetProxy = assetProxies[assetProxyId];\n            // transferFrom will either succeed or throw.\n            assetProxy.transferFrom(assetData, from, to, amount);\n        }\n    }\n}\n",
		"current/protocol/Exchange/MixinExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./libs/LibFillResults.sol\";\nimport \"./libs/LibOrder.sol\";\nimport \"./libs/LibMath.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"./mixins/MExchangeCore.sol\";\nimport \"./mixins/MSettlement.sol\";\nimport \"./mixins/MSignatureValidator.sol\";\nimport \"./mixins/MTransactions.sol\";\n\ncontract MixinExchangeCore is\n    LibMath,\n    LibOrder,\n    LibFillResults,\n    LibExchangeErrors,\n    MExchangeCore,\n    MSettlement,\n    MSignatureValidator,\n    MTransactions\n{\n    // Mapping of orderHash => amount of takerAsset already bought by maker\n    mapping (bytes32 => uint256) public filled;\n\n    // Mapping of orderHash => cancelled\n    mapping (bytes32 => bool) public cancelled;\n\n    // Mapping of makerAddress => lowest salt an order can have in order to be fillable\n    // Orders with a salt less than their maker's epoch are considered cancelled\n    mapping (address => uint256) public makerEpoch;\n\n    ////// Core exchange functions //////\n\n    /// @dev Cancels all orders created by sender with a salt less than or equal to the specified salt value.\n    /// @param salt Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 salt)\n        external\n    {\n        address makerAddress = getCurrentContextAddress();\n\n        // makerEpoch is initialized to 0, so to cancelUpTo we need salt + 1\n        uint256 newMakerEpoch = salt + 1;  \n        uint256 oldMakerEpoch = makerEpoch[makerAddress];\n\n        // Ensure makerEpoch is monotonically increasing\n        require(\n            newMakerEpoch > oldMakerEpoch, \n            INVALID_NEW_MAKER_EPOCH\n        );\n\n        // Update makerEpoch\n        makerEpoch[makerAddress] = newMakerEpoch;\n        emit CancelUpTo(makerAddress, newMakerEpoch);\n    }\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (FillResults memory fillResults)\n    {\n        // Fetch order info\n        OrderInfo memory orderInfo = getOrderInfo(order);\n\n        // Fetch taker address\n        address takerAddress = getCurrentContextAddress();\n\n        // Get amount of takerAsset to fill\n        uint256 remainingTakerAssetAmount = safeSub(order.takerAssetAmount, orderInfo.orderTakerAssetFilledAmount);\n        uint256 takerAssetFilledAmount = min256(takerAssetFillAmount, remainingTakerAssetAmount);\n\n        // Validate context\n        assertValidFill(\n            order,\n            orderInfo,\n            takerAddress,\n            takerAssetFillAmount,\n            takerAssetFilledAmount,\n            signature\n        );\n\n        // Compute proportional fill amounts\n        fillResults = calculateFillResults(order, takerAssetFilledAmount);\n\n        // Update exchange internal state\n        updateFilledState(\n            order,\n            takerAddress,\n            orderInfo.orderHash,\n            orderInfo.orderTakerAssetFilledAmount,\n            fillResults\n        );\n    \n        // Settle order\n        settleOrder(order, takerAddress, fillResults);\n\n        return fillResults;\n    }\n\n    /// @dev After calling, the order can not be filled anymore.\n    ///      Throws if order is invalid or sender does not have permission to cancel.\n    /// @param order Order to cancel. Order must be OrderStatus.FILLABLE.\n    function cancelOrder(Order memory order)\n        public\n    {\n        // Fetch current order status\n        OrderInfo memory orderInfo = getOrderInfo(order);\n\n        // Validate context\n        assertValidCancel(order, orderInfo);\n\n        // Perform cancel\n        updateCancelledState(order, orderInfo.orderHash);\n    }\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///         See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(Order memory order)\n        public\n        view\n        returns (OrderInfo memory orderInfo)\n    {\n        // Compute the order hash\n        orderInfo.orderHash = getOrderHash(order);\n\n        // If order.makerAssetAmount is zero, we also reject the order.\n        // While the Exchange contract handles them correctly, they create\n        // edge cases in the supporting infrastructure because they have\n        // an 'infinite' price when computed by a simple division.\n        if (order.makerAssetAmount == 0) {\n            orderInfo.orderStatus = uint8(OrderStatus.INVALID_MAKER_ASSET_AMOUNT);\n            return orderInfo;\n        }\n\n        // If order.takerAssetAmount is zero, then the order will always\n        // be considered filled because 0 == takerAssetAmount == orderTakerAssetFilledAmount\n        // Instead of distinguishing between unfilled and filled zero taker\n        // amount orders, we choose not to support them.\n        if (order.takerAssetAmount == 0) {\n            orderInfo.orderStatus = uint8(OrderStatus.INVALID_TAKER_ASSET_AMOUNT);\n            return orderInfo;\n        }\n\n        // Validate order expiration\n        if (block.timestamp >= order.expirationTimeSeconds) {\n            orderInfo.orderStatus = uint8(OrderStatus.EXPIRED);\n            return orderInfo;\n        }\n\n        // Check if order has been cancelled\n        if (cancelled[orderInfo.orderHash]) {\n            orderInfo.orderStatus = uint8(OrderStatus.CANCELLED);\n            return orderInfo;\n        }\n        if (makerEpoch[order.makerAddress] > order.salt) {\n            orderInfo.orderStatus = uint8(OrderStatus.CANCELLED);\n            return orderInfo;\n        }\n\n        // Fetch filled amount and validate order availability\n        orderInfo.orderTakerAssetFilledAmount = filled[orderInfo.orderHash];\n        if (orderInfo.orderTakerAssetFilledAmount >= order.takerAssetAmount) {\n            orderInfo.orderStatus = uint8(OrderStatus.FULLY_FILLED);\n            return orderInfo;\n        }\n\n        // All other statuses are ruled out: order is Fillable\n        orderInfo.orderStatus = uint8(OrderStatus.FILLABLE);\n        return orderInfo;\n    }\n\n    /// @dev Updates state with results of a fill order.\n    /// @param order that was filled.\n    /// @param takerAddress Address of taker who filled the order.\n    /// @param orderTakerAssetFilledAmount Amount of order already filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function updateFilledState(\n        Order memory order,\n        address takerAddress,\n        bytes32 orderHash,\n        uint256 orderTakerAssetFilledAmount,\n        FillResults memory fillResults\n    )\n        internal\n    {\n        // Update state\n        filled[orderHash] = safeAdd(orderTakerAssetFilledAmount, fillResults.takerAssetFilledAmount);\n\n        // Log order\n        emit Fill(\n            order.makerAddress,\n            takerAddress,\n            order.feeRecipientAddress,\n            fillResults.makerAssetFilledAmount,\n            fillResults.takerAssetFilledAmount,\n            fillResults.makerFeePaid,\n            fillResults.takerFeePaid,\n            orderHash,\n            order.makerAssetData,\n            order.takerAssetData\n        );\n    }\n\n    /// @dev Updates state with results of cancelling an order.\n    ///      State is only updated if the order is currently fillable.\n    ///      Otherwise, updating state would have no effect.\n    /// @param order that was cancelled.\n    /// @param orderHash Hash of order that was cancelled.\n    function updateCancelledState(\n        Order memory order,\n        bytes32 orderHash\n    )\n        internal\n    {\n        // Perform cancel\n        cancelled[orderHash] = true;\n\n        // Log cancel\n        emit Cancel(\n            order.makerAddress,\n            order.feeRecipientAddress,\n            orderHash,\n            order.makerAssetData,\n            order.takerAssetData\n        );\n    }\n\n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    /// @param takerAddress Address of order taker.\n    /// @param takerAssetFillAmount Desired amount of order to fill by taker.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param signature Proof that the orders was created by its maker.\n    function assertValidFill(\n        Order memory order,\n        OrderInfo memory orderInfo,\n        address takerAddress,\n        uint256 takerAssetFillAmount,\n        uint256 takerAssetFilledAmount,\n        bytes memory signature\n    )\n        internal\n        view\n    {\n        // An order can only be filled if its status is FILLABLE.\n        require(\n            orderInfo.orderStatus == uint8(OrderStatus.FILLABLE),\n            ORDER_UNFILLABLE\n        );\n\n        // Revert if fill amount is invalid\n        require(\n            takerAssetFillAmount != 0,\n            INVALID_TAKER_AMOUNT\n        );\n\n        // Validate sender is allowed to fill this order\n        if (order.senderAddress != address(0)) {\n            require(\n                order.senderAddress == msg.sender,\n                INVALID_SENDER\n            );\n        }\n\n        // Validate taker is allowed to fill this order\n        if (order.takerAddress != address(0)) {\n            require(\n                order.takerAddress == takerAddress,\n                INVALID_TAKER\n            );\n        }\n\n        // Validate Maker signature (check only if first time seen)\n        if (orderInfo.orderTakerAssetFilledAmount == 0) {\n            require(\n                isValidSignature(orderInfo.orderHash, order.makerAddress, signature),\n                INVALID_ORDER_SIGNATURE\n            );\n        }\n\n        // Validate fill order rounding\n        require(\n            !isRoundingError(\n                takerAssetFilledAmount,\n                order.takerAssetAmount,\n                order.makerAssetAmount\n            ),\n            ROUNDING_ERROR\n        );\n    }\n\n    /// @dev Validates context for cancelOrder. Succeeds or throws.\n    /// @param order to be cancelled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    function assertValidCancel(\n        Order memory order,\n        OrderInfo memory orderInfo\n    )\n        internal\n        view\n    {\n        // Ensure order is valid\n        // An order can only be cancelled if its status is FILLABLE.\n        require(\n            orderInfo.orderStatus == uint8(OrderStatus.FILLABLE),\n            ORDER_UNFILLABLE\n        );\n\n        // Validate sender is allowed to cancel this order\n        if (order.senderAddress != address(0)) {\n            require(\n                order.senderAddress == msg.sender,\n                INVALID_SENDER\n            );\n        }\n\n        // Validate transaction signed by maker\n        address makerAddress = getCurrentContextAddress();\n        require(\n            order.makerAddress == makerAddress,\n            INVALID_MAKER\n        );\n    }\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        Order memory order,\n        uint256 takerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (FillResults memory fillResults)\n    {\n        // Compute proportional transfer amounts\n        // TODO: All three are multiplied by the same fraction. This can\n        // potentially be optimized.\n        fillResults.takerAssetFilledAmount = takerAssetFilledAmount;\n        fillResults.makerAssetFilledAmount = getPartialAmount(\n            fillResults.takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerAssetAmount\n        );\n        fillResults.makerFeePaid = getPartialAmount(\n            fillResults.takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerFee\n        );\n        fillResults.takerFeePaid = getPartialAmount(\n            fillResults.takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.takerFee\n        );\n\n        return fillResults;\n    }\n}\n",
		"current/protocol/Exchange/MixinMatchOrders.sol": "/*\n  Copyright 2018 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./libs/LibMath.sol\";\nimport \"./libs/LibOrder.sol\";\nimport \"./libs/LibFillResults.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"./mixins/MExchangeCore.sol\";\nimport \"./mixins/MMatchOrders.sol\";\nimport \"./mixins/MSettlement.sol\";\nimport \"./mixins/MTransactions.sol\";\n\ncontract MixinMatchOrders is\n    LibMath,\n    LibExchangeErrors,\n    MExchangeCore,\n    MMatchOrders,\n    MSettlement,\n    MTransactions\n{\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    /// TODO: Make this function external once supported by Solidity (See Solidity Issues #3199, #1603)\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        // We assume that rightOrder.takerAssetData == leftOrder.makerAssetData and rightOrder.makerAssetData == leftOrder.takerAssetData.\n        // If this assumption isn't true, the match will fail at signature validation.\n        rightOrder.makerAssetData = leftOrder.takerAssetData;\n        rightOrder.takerAssetData = leftOrder.makerAssetData;\n\n        // Get left & right order info\n        LibOrder.OrderInfo memory leftOrderInfo = getOrderInfo(leftOrder);\n        LibOrder.OrderInfo memory rightOrderInfo = getOrderInfo(rightOrder);\n\n        // Fetch taker address\n        address takerAddress = getCurrentContextAddress();\n\n        // Either our context is valid or we revert\n        assertValidMatch(leftOrder, rightOrder);\n\n        // Compute proportional fill amounts\n        matchedFillResults = calculateMatchedFillResults(\n            leftOrder,\n            rightOrder,\n            leftOrderInfo.orderTakerAssetFilledAmount,\n            rightOrderInfo.orderTakerAssetFilledAmount\n        );\n\n        // Validate fill contexts\n        assertValidFill(\n            leftOrder,\n            leftOrderInfo,\n            takerAddress,\n            matchedFillResults.left.takerAssetFilledAmount,\n            matchedFillResults.left.takerAssetFilledAmount,\n            leftSignature\n        );\n        assertValidFill(\n            rightOrder,\n            rightOrderInfo,\n            takerAddress,\n            matchedFillResults.right.takerAssetFilledAmount,\n            matchedFillResults.right.takerAssetFilledAmount,\n            rightSignature\n        );\n\n        // Update exchange state\n        updateFilledState(\n            leftOrder,\n            takerAddress,\n            leftOrderInfo.orderHash,\n            leftOrderInfo.orderTakerAssetFilledAmount,\n            matchedFillResults.left\n        );\n        updateFilledState(\n            rightOrder,\n            takerAddress,\n            rightOrderInfo.orderHash,\n            rightOrderInfo.orderTakerAssetFilledAmount,\n            matchedFillResults.right\n        );\n    \n        // Settle matched orders. Succeeds or throws.\n        settleMatchedOrders(\n            leftOrder,\n            rightOrder,\n            takerAddress,\n            matchedFillResults\n        );\n\n        return matchedFillResults;\n    }\n\n    /// @dev Validates context for matchOrders. Succeeds or throws.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    function assertValidMatch(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder\n    )\n        internal\n        pure\n    {\n        // Make sure there is a profitable spread.\n        // There is a profitable spread iff the cost per unit bought (OrderA.MakerAmount/OrderA.TakerAmount) for each order is greater\n        // than the profit per unit sold of the matched order (OrderB.TakerAmount/OrderB.MakerAmount).\n        // This is satisfied by the equations below:\n        // <leftOrder.makerAssetAmount> / <leftOrder.takerAssetAmount> >= <rightOrder.takerAssetAmount> / <rightOrder.makerAssetAmount>\n        // AND\n        // <rightOrder.makerAssetAmount> / <rightOrder.takerAssetAmount> >= <leftOrder.takerAssetAmount> / <leftOrder.makerAssetAmount>\n        // These equations can be combined to get the following:\n        require(\n            safeMul(leftOrder.makerAssetAmount, rightOrder.makerAssetAmount) >=\n            safeMul(leftOrder.takerAssetAmount, rightOrder.takerAssetAmount),\n            NEGATIVE_SPREAD_REQUIRED\n        );\n    }\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        // We settle orders at the exchange rate of the right order.\n        // The amount saved by the left maker goes to the taker.\n        // Either the left or right order will be fully filled; possibly both.\n        // The left order is fully filled iff the right order can sell more than left can buy.\n        // That is: the amount required to fill the left order is less than or equal to\n        //          the amount we can spend from the right order:\n        //          <leftTakerAssetAmountRemaining> <= <rightTakerAssetAmountRemaining> * <rightMakerToTakerRatio>\n        //          <leftTakerAssetAmountRemaining> <= <rightTakerAssetAmountRemaining> * <rightOrder.makerAssetAmount> / <rightOrder.takerAssetAmount>\n        //          <leftTakerAssetAmountRemaining> * <rightOrder.takerAssetAmount> <= <rightTakerAssetAmountRemaining> * <rightOrder.makerAssetAmount>\n        uint256 leftTakerAssetAmountRemaining = safeSub(leftOrder.takerAssetAmount, leftOrderTakerAssetFilledAmount);\n        uint256 rightTakerAssetAmountRemaining = safeSub(rightOrder.takerAssetAmount, rightOrderTakerAssetFilledAmount);\n        uint256 leftTakerAssetFilledAmount;\n        uint256 rightTakerAssetFilledAmount;\n        if (\n            safeMul(leftTakerAssetAmountRemaining, rightOrder.takerAssetAmount) <=\n            safeMul(rightTakerAssetAmountRemaining, rightOrder.makerAssetAmount)\n        ) {\n            // Left order will be fully filled: maximally fill left\n            leftTakerAssetFilledAmount = leftTakerAssetAmountRemaining;\n\n            // The right order receives an amount proportional to how much was spent.\n            // TODO: Can we ensure rounding error is in the correct direction?\n            rightTakerAssetFilledAmount = getPartialAmount(\n                rightOrder.takerAssetAmount,\n                rightOrder.makerAssetAmount,\n                leftTakerAssetFilledAmount\n            );\n        } else {\n            // Right order will be fully filled: maximally fill right\n            rightTakerAssetFilledAmount = rightTakerAssetAmountRemaining;\n\n            // The left order receives an amount proportional to how much was spent.\n            // TODO: Can we ensure rounding error is in the correct direction?\n            leftTakerAssetFilledAmount = getPartialAmount(\n                rightOrder.makerAssetAmount,\n                rightOrder.takerAssetAmount,\n                rightTakerAssetFilledAmount\n            );\n        }\n\n        // Calculate fill results for left order\n        matchedFillResults.left = calculateFillResults(\n            leftOrder,\n            leftTakerAssetFilledAmount\n        );\n\n        // Calculate fill results for right order\n        matchedFillResults.right = calculateFillResults(\n            rightOrder,\n            rightTakerAssetFilledAmount\n        );\n\n        // Calculate amount given to taker\n        matchedFillResults.leftMakerAssetSpreadAmount = safeSub(\n            matchedFillResults.left.makerAssetFilledAmount,\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n\n        // Return fill results\n        return matchedFillResults;\n    }\n}\n",
		"current/protocol/Exchange/MixinSettlement.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/LibBytes/LibBytes.sol\";\nimport \"./libs/LibMath.sol\";\nimport \"./libs/LibFillResults.sol\";\nimport \"./libs/LibOrder.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"./mixins/MMatchOrders.sol\";\nimport \"./mixins/MSettlement.sol\";\nimport \"./mixins/MAssetProxyDispatcher.sol\";\n\ncontract MixinSettlement is\n    LibBytes,\n    LibMath,\n    LibExchangeErrors,\n    MMatchOrders,\n    MSettlement,\n    MAssetProxyDispatcher\n{\n    // ZRX address encoded as a byte array.\n    // This will be constant throughout the life of the Exchange contract,\n    // since ZRX will always be transferred via the ERC20 AssetProxy.\n    bytes internal ZRX_ASSET_DATA;\n    uint8 constant ZRX_PROXY_ID = 1;\n\n    /// TODO: _zrxAssetData should be a constant in production.\n    /// @dev Constructor sets the metadata that will be used for paying ZRX fees.\n    /// @param _zrxAssetData Byte array containing ERC20 proxy id concatenated with address of ZRX.\n    constructor (bytes memory _zrxAssetData)\n        public\n    {\n        ZRX_ASSET_DATA = _zrxAssetData;\n    }\n\n    /// @dev Settles an order by transferring assets between counterparties.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAddress Address selling takerAsset and buying makerAsset.\n    /// @param fillResults Amounts to be filled and fees paid by maker and taker.\n    function settleOrder(\n        LibOrder.Order memory order,\n        address takerAddress,\n        LibFillResults.FillResults memory fillResults\n    )\n        internal\n    {\n        uint8 makerAssetProxyId = uint8(popLastByte(order.makerAssetData));\n        uint8 takerAssetProxyId = uint8(popLastByte(order.takerAssetData));\n        bytes memory zrxAssetData = ZRX_ASSET_DATA;\n        dispatchTransferFrom(\n            order.makerAssetData,\n            makerAssetProxyId,\n            order.makerAddress,\n            takerAddress,\n            fillResults.makerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            order.takerAssetData,\n            takerAssetProxyId,\n            takerAddress,\n            order.makerAddress,\n            fillResults.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            zrxAssetData,\n            ZRX_PROXY_ID,\n            order.makerAddress,\n            order.feeRecipientAddress,\n            fillResults.makerFeePaid\n        );\n        dispatchTransferFrom(\n            zrxAssetData,\n            ZRX_PROXY_ID,\n            takerAddress,\n            order.feeRecipientAddress,\n            fillResults.takerFeePaid\n        );\n    }\n\n    /// @dev Settles matched order by transferring appropriate funds between order makers, taker, and fee recipient.\n    /// @param leftOrder First matched order.\n    /// @param rightOrder Second matched order.\n    /// @param takerAddress Address that matched the orders. The taker receives the spread between orders as profit.\n    /// @param matchedFillResults Struct holding amounts to transfer between makers, taker, and fee recipients.\n    function settleMatchedOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        address takerAddress,\n        LibFillResults.MatchedFillResults memory matchedFillResults\n    )\n        internal\n    {\n        uint8 leftMakerAssetProxyId = uint8(popLastByte(leftOrder.makerAssetData));\n        uint8 rightMakerAssetProxyId = uint8(popLastByte(rightOrder.makerAssetData));\n        bytes memory zrxAssetData = ZRX_ASSET_DATA;\n        // Order makers and taker\n        dispatchTransferFrom(\n            leftOrder.makerAssetData,\n            leftMakerAssetProxyId,\n            leftOrder.makerAddress,\n            rightOrder.makerAddress,\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            rightOrder.makerAssetData,\n            rightMakerAssetProxyId,\n            rightOrder.makerAddress,\n            leftOrder.makerAddress,\n            matchedFillResults.left.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            leftOrder.makerAssetData,\n            leftMakerAssetProxyId,\n            leftOrder.makerAddress,\n            takerAddress,\n            matchedFillResults.leftMakerAssetSpreadAmount\n        );\n\n        // Maker fees\n        dispatchTransferFrom(\n            zrxAssetData,\n            ZRX_PROXY_ID,\n            leftOrder.makerAddress,\n            leftOrder.feeRecipientAddress,\n            matchedFillResults.left.makerFeePaid\n        );\n        dispatchTransferFrom(\n            zrxAssetData,\n            ZRX_PROXY_ID,\n            rightOrder.makerAddress,\n            rightOrder.feeRecipientAddress,\n            matchedFillResults.right.makerFeePaid\n        );\n\n        // Taker fees\n        if (leftOrder.feeRecipientAddress == rightOrder.feeRecipientAddress) {\n            dispatchTransferFrom(\n                zrxAssetData,\n                ZRX_PROXY_ID,\n                takerAddress,\n                leftOrder.feeRecipientAddress,\n                safeAdd(\n                    matchedFillResults.left.takerFeePaid,\n                    matchedFillResults.right.takerFeePaid\n                )\n            );\n        } else {\n            dispatchTransferFrom(\n                zrxAssetData,\n                ZRX_PROXY_ID,\n                takerAddress,\n                leftOrder.feeRecipientAddress,\n                matchedFillResults.left.takerFeePaid\n            );\n            dispatchTransferFrom(\n                zrxAssetData,\n                ZRX_PROXY_ID,\n                takerAddress,\n                rightOrder.feeRecipientAddress,\n                matchedFillResults.right.takerFeePaid\n            );\n        }\n    }\n}\n",
		"current/protocol/Exchange/MixinSignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../../utils/LibBytes/LibBytes.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"./mixins/MSignatureValidator.sol\";\nimport \"./mixins/MTransactions.sol\";\nimport \"./interfaces/IWallet.sol\";\nimport \"./interfaces/IValidator.sol\";\n\ncontract MixinSignatureValidator is\n    LibBytes,\n    LibExchangeErrors,\n    MSignatureValidator,\n    MTransactions\n{\n    // Personal message headers\n    string constant ETH_PERSONAL_MESSAGE = \"\\x19Ethereum Signed Message:\\n32\";\n    string constant TREZOR_PERSONAL_MESSAGE = \"\\x19Ethereum Signed Message:\\n\\x41\";\n\n    // Mapping of hash => signer => signed\n    mapping (bytes32 => mapping (address => bool)) public preSigned;\n\n    // Mapping of signer => validator => approved\n    mapping (address => mapping (address => bool)) public allowedValidators;\n\n    /// @dev Approves a hash on-chain using any valid signature type.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param signer Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    function preSign(\n        bytes32 hash,\n        address signer,\n        bytes signature\n    )\n        external\n    {\n        require(\n            isValidSignature(hash, signer, signature),\n            INVALID_SIGNATURE\n        );\n        preSigned[hash][signer] = true;\n    }\n\n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validator Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validator,\n        bool approval\n    )\n        external\n    {\n        address signer = getCurrentContextAddress();\n        allowedValidators[signer][validator] = approval;\n    }\n\n    /// @dev Verifies that a hash has been signed by the given signer.\n    /// @param hash Any 32 byte hash.\n    /// @param signer Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return True if the address recovered from the provided signature matches the input signer address.\n    function isValidSignature(\n        bytes32 hash,\n        address signer,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid)\n    {\n        // TODO: Domain separation: make hash depend on role. (Taker sig should not be valid as maker sig, etc.)\n        require(\n            signature.length > 0,\n            LENGTH_GREATER_THAN_0_REQUIRED\n        );\n\n        // Pop last byte off of signature byte array.\n        SignatureType signatureType = SignatureType(uint8(popLastByte(signature)));\n\n        // Variables are not scoped in Solidity.\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        address recovered;\n\n        // Always illegal signature.\n        // This is always an implicit option since a signer can create a\n        // signature array with invalid type or length. We may as well make\n        // it an explicit option. This aids testing and analysis. It is\n        // also the initialization value for the enum type.\n        if (signatureType == SignatureType.Illegal) {\n            revert(SIGNATURE_ILLEGAL);\n\n        // Always invalid signature.\n        // Like Illegal, this is always implicitly available and therefore\n        // offered explicitly. It can be implicitly created by providing\n        // a correctly formatted but incorrect signature.\n        } else if (signatureType == SignatureType.Invalid) {\n            require(\n                signature.length == 0,\n                LENGTH_0_REQUIRED\n            );\n            isValid = false;\n            return isValid;\n\n        // Signature using EIP712\n        } else if (signatureType == SignatureType.EIP712) {\n            require(\n                signature.length == 65,\n                LENGTH_65_REQUIRED\n            );\n            v = uint8(signature[0]);\n            r = readBytes32(signature, 1);\n            s = readBytes32(signature, 33);\n            recovered = ecrecover(hash, v, r, s);\n            isValid = signer == recovered;\n            return isValid;\n\n        // Signed using web3.eth_sign\n        } else if (signatureType == SignatureType.EthSign) {\n            require(\n                signature.length == 65,\n                LENGTH_65_REQUIRED\n            );\n            v = uint8(signature[0]);\n            r = readBytes32(signature, 1);\n            s = readBytes32(signature, 33);\n            recovered = ecrecover(\n                keccak256(abi.encodePacked(ETH_PERSONAL_MESSAGE, hash)),\n                v,\n                r,\n                s\n            );\n            isValid = signer == recovered;\n            return isValid;\n\n        // Implicitly signed by caller.\n        // The signer has initiated the call. In the case of non-contract\n        // accounts it means the transaction itself was signed.\n        // Example: let's say for a particular operation three signatures\n        // A, B and C are required. To submit the transaction, A and B can\n        // give a signature to C, who can then submit the transaction using\n        // `Caller` for his own signature. Or A and C can sign and B can\n        // submit using `Caller`. Having `Caller` allows this flexibility.\n        } else if (signatureType == SignatureType.Caller) {\n            require(\n                signature.length == 0,\n                LENGTH_0_REQUIRED\n            );\n            isValid = signer == msg.sender;\n            return isValid;\n\n        // Signature verified by wallet contract.\n        // If used with an order, the maker of the order is the wallet contract.\n        } else if (signatureType == SignatureType.Wallet) {\n            isValid = IWallet(signer).isValidSignature(hash, signature);\n            return isValid;\n\n        // Signature verified by validator contract.\n        // If used with an order, the maker of the order can still be an EOA.\n        // A signature using this type should be encoded as:\n        // | Offset   | Length | Contents                        |\n        // | 0x00     | x      | Signature to validate           |\n        // | 0x00 + x | 20     | Address of validator contract   |\n        // | 0x14 + x | 1      | Signature type is always \"\\x06\" |\n        } else if (signatureType == SignatureType.Validator) {\n            // Pop last 20 bytes off of signature byte array.\n            address validator = popLast20Bytes(signature);\n            // Ensure signer has approved validator.\n            if (!allowedValidators[signer][validator]) {\n                return false;\n            }\n            isValid = IValidator(validator).isValidSignature(\n                hash,\n                signer,\n                signature\n            );\n            return isValid;\n\n        // Signer signed hash previously using the preSign function.\n        } else if (signatureType == SignatureType.PreSigned) {\n            isValid = preSigned[hash][signer];\n            return isValid;\n\n        // Signature from Trezor hardware wallet.\n        // It differs from web3.eth_sign in the encoding of message length\n        // (Bitcoin varint encoding vs ascii-decimal, the latter is not\n        // self-terminating which leads to ambiguities).\n        // See also:\n        // https://en.bitcoin.it/wiki/Protocol_documentation#Variable_length_integer\n        // https://github.com/trezor/trezor-mcu/blob/master/firmware/ethereum.c#L602\n        // https://github.com/trezor/trezor-mcu/blob/master/firmware/crypto.c#L36\n        } else if (signatureType == SignatureType.Trezor) {\n            require(\n                signature.length == 65,\n                LENGTH_65_REQUIRED\n            );\n            v = uint8(signature[0]);\n            r = readBytes32(signature, 1);\n            s = readBytes32(signature, 33);\n            recovered = ecrecover(\n                keccak256(abi.encodePacked(TREZOR_PERSONAL_MESSAGE, hash)),\n                v,\n                r,\n                s\n            );\n            isValid = signer == recovered;\n            return isValid;\n\n        // Signer signed hash previously using the preSign function\n        } else if (signatureType == SignatureType.PreSigned) {\n            isValid = preSigned[hash][signer];\n            return isValid;\n        }\n\n        // Anything else is illegal (We do not return false because\n        // the signature may actually be valid, just not in a format\n        // that we currently support. In this case returning false\n        // may lead the caller to incorrectly believe that the\n        // signature was invalid.)\n        revert(SIGNATURE_UNSUPPORTED);\n    }\n}\n",
		"current/protocol/Exchange/MixinTransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\n\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"./mixins/MSignatureValidator.sol\";\nimport \"./mixins/MTransactions.sol\";\n\ncontract MixinTransactions is\n    LibExchangeErrors,\n    MSignatureValidator,\n    MTransactions\n{\n\n    // Mapping of transaction hash => executed\n    // This prevents transactions from being executed more than once.\n    mapping (bytes32 => bool) public transactions;\n\n    // Address of current transaction signer\n    address public currentContextAddress;\n\n    /// @dev Executes an exchange method call in the context of signer.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signer Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @param signature Proof of signer transaction by signer.\n    function executeTransaction(\n        uint256 salt,\n        address signer,\n        bytes data,\n        bytes signature\n    )\n        external\n    {\n        // Prevent reentrancy\n        require(\n            currentContextAddress == address(0),\n            REENTRANCY_ILLEGAL\n        );\n\n        // Calculate transaction hash\n        bytes32 transactionHash = keccak256(abi.encodePacked(\n            address(this),\n            signer,\n            salt,\n            data\n        ));\n\n        // Validate transaction has not been executed\n        require(\n            !transactions[transactionHash],\n            INVALID_TX_HASH\n        );\n\n        // Transaction always valid if signer is sender of transaction\n        if (signer != msg.sender) {\n            // Validate signature\n            require(\n                isValidSignature(transactionHash, signer, signature),\n                INVALID_TX_SIGNATURE\n            );\n\n            // Set the current transaction signer\n            currentContextAddress = signer;\n        }\n\n        // Execute transaction\n        transactions[transactionHash] = true;\n        require(\n            address(this).delegatecall(data),\n            FAILED_EXECUTION\n        );\n\n        // Reset current transaction signer\n        // TODO: Check if gas is paid when currentContextAddress is already 0.\n        currentContextAddress = address(0);\n    }\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function getCurrentContextAddress()\n        internal\n        view\n        returns (address)\n    {\n        address contextAddress = currentContextAddress == address(0) ? msg.sender : currentContextAddress;\n        return contextAddress;\n    }\n}\n",
		"current/protocol/Exchange/MixinWrapperFunctions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./libs/LibMath.sol\";\nimport \"./libs/LibOrder.sol\";\nimport \"./libs/LibFillResults.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"./mixins/MExchangeCore.sol\";\n\ncontract MixinWrapperFunctions is\n    LibMath,\n    LibFillResults,\n    LibExchangeErrors,\n    MExchangeCore\n{\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (FillResults memory fillResults)\n    {\n        fillResults = fillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        require(\n            fillResults.takerAssetFilledAmount == takerAssetFillAmount,\n            COMPLETE_FILL_FAILED\n        );\n        return fillResults;\n    }\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (FillResults memory fillResults)\n    {\n        // We need to call MExchangeCore.fillOrder using a delegatecall in\n        // assembly so that we can intercept a call that throws. For this, we\n        // need the input encoded in memory in the Ethereum ABIv2 format [1].\n\n        // | Area     | Offset | Length  | Contents                                    |\n        // | -------- |--------|---------|-------------------------------------------- |\n        // | Header   | 0x00   | 4       | function selector                           |\n        // | Params   |        | 3 * 32  | function parameters:                        |\n        // |          | 0x00   |         |   1. offset to order (*)                    |\n        // |          | 0x20   |         |   2. takerAssetFillAmount                   |\n        // |          | 0x40   |         |   3. offset to signature (*)                |\n        // | Data     |        | 12 * 32 | order:                                      |\n        // |          | 0x000  |         |   1.  senderAddress                         |\n        // |          | 0x020  |         |   2.  makerAddress                          |\n        // |          | 0x040  |         |   3.  takerAddress                          |\n        // |          | 0x060  |         |   4.  feeRecipientAddress                   |\n        // |          | 0x080  |         |   5.  makerAssetAmount                      |\n        // |          | 0x0A0  |         |   6.  takerAssetAmount                      |\n        // |          | 0x0C0  |         |   7.  makerFeeAmount                        |\n        // |          | 0x0E0  |         |   8.  takerFeeAmount                        |\n        // |          | 0x100  |         |   9.  expirationTimeSeconds                 |\n        // |          | 0x120  |         |   10. salt                                  |\n        // |          | 0x140  |         |   11. Offset to makerAssetData (*)          |\n        // |          | 0x160  |         |   12. Offset to takerAssetData (*)          |\n        // |          | 0x180  | 32      | makerAssetData Length                       |\n        // |          | 0x1A0  | **      | makerAssetData Contents                     |\n        // |          | 0x1C0  | 32      | takerAssetData Length                       |\n        // |          | 0x1E0  | **      | takerAssetData Contents                     |\n        // |          | 0x200  | 32      | signature Length                            |\n        // |          | 0x220  | **      | signature Contents                          |\n\n        // * Offsets are calculated from the beginning of the current area: Header, Params, Data:\n        //     An offset stored in the Params area is calculated from the beginning of the Params section.\n        //     An offset stored in the Data area is calculated from the beginning of the Data section.\n\n        // ** The length of dynamic array contents are stored in the field immediately preceeding the contents.\n\n        // [1]: https://solidity.readthedocs.io/en/develop/abi-spec.html\n\n        bytes4 fillOrderSelector = this.fillOrder.selector;\n\n        assembly {\n\n            // Areas below may use the following variables:\n            //   1. <area>Start   -- Start of this area in memory\n            //   2. <area>End     -- End of this area in memory. This value may\n            //                       be precomputed (before writing contents),\n            //                       or it may be computed as contents are written.\n            //   3. <area>Offset  -- Current offset into area. If an area's End\n            //                       is precomputed, this variable tracks the\n            //                       offsets of contents as they are written.\n\n            /////// Setup Header Area ///////\n            // Load free memory pointer\n            let headerAreaStart := mload(0x40)\n            mstore(headerAreaStart, fillOrderSelector)\n            let headerAreaEnd := add(headerAreaStart, 0x4)\n\n            /////// Setup Params Area ///////\n            // This area is preallocated and written to later.\n            // This is because we need to fill in offsets that have not yet been calculated.\n            let paramsAreaStart := headerAreaEnd\n            let paramsAreaEnd := add(paramsAreaStart, 0x60)\n            let paramsAreaOffset := paramsAreaStart\n\n            /////// Setup Data Area ///////\n            let dataAreaStart := paramsAreaEnd\n            let dataAreaEnd := dataAreaStart\n\n            // Offset from the source data we're reading from\n            let sourceOffset := order\n            // arrayLenBytes and arrayLenWords track the length of a dynamically-allocated bytes array.\n            let arrayLenBytes := 0\n            let arrayLenWords := 0\n\n            /////// Write order Struct ///////\n            // Write memory location of Order, relative to the start of the\n            // parameter list, then increment the paramsAreaOffset respectively.\n            mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n            paramsAreaOffset := add(paramsAreaOffset, 0x20)\n\n            // Write values for each field in the order\n            // It would be nice to use a loop, but we save on gas by writing\n            // the stores sequentially.\n            mstore(dataAreaEnd, mload(sourceOffset))                            // makerAddress\n            mstore(add(dataAreaEnd, 0x20), mload(add(sourceOffset, 0x20)))      // takerAddress\n            mstore(add(dataAreaEnd, 0x40), mload(add(sourceOffset, 0x40)))      // feeRecipientAddress\n            mstore(add(dataAreaEnd, 0x60), mload(add(sourceOffset, 0x60)))      // senderAddress\n            mstore(add(dataAreaEnd, 0x80), mload(add(sourceOffset, 0x80)))      // makerAssetAmount\n            mstore(add(dataAreaEnd, 0xA0), mload(add(sourceOffset, 0xA0)))      // takerAssetAmount\n            mstore(add(dataAreaEnd, 0xC0), mload(add(sourceOffset, 0xC0)))      // makerFeeAmount\n            mstore(add(dataAreaEnd, 0xE0), mload(add(sourceOffset, 0xE0)))      // takerFeeAmount\n            mstore(add(dataAreaEnd, 0x100), mload(add(sourceOffset, 0x100)))    // expirationTimeSeconds\n            mstore(add(dataAreaEnd, 0x120), mload(add(sourceOffset, 0x120)))    // salt\n            mstore(add(dataAreaEnd, 0x140), mload(add(sourceOffset, 0x140)))    // Offset to makerAssetData\n            mstore(add(dataAreaEnd, 0x160), mload(add(sourceOffset, 0x160)))    // Offset to takerAssetData\n            dataAreaEnd := add(dataAreaEnd, 0x180)\n            sourceOffset := add(sourceOffset, 0x180)\n\n            // Write offset to <order.makerAssetData>\n            mstore(add(dataAreaStart, mul(10, 0x20)), sub(dataAreaEnd, dataAreaStart))\n\n            // Calculate length of <order.makerAssetData>\n            sourceOffset := mload(add(order, 0x140)) // makerAssetData\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of <order.makerAssetData>\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of <order.makerAssetData>\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            // Write offset to <order.takerAssetData>\n            mstore(add(dataAreaStart, mul(11, 0x20)), sub(dataAreaEnd, dataAreaStart))\n\n            // Calculate length of <order.takerAssetData>\n            sourceOffset := mload(add(order, 0x160)) // takerAssetData\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of <order.takerAssetData>\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of  <order.takerAssetData>\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            /////// Write takerAssetFillAmount ///////\n            mstore(paramsAreaOffset, takerAssetFillAmount)\n            paramsAreaOffset := add(paramsAreaOffset, 0x20)\n\n            /////// Write signature ///////\n            // Write offset to paramsArea\n            mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n\n            // Calculate length of signature\n            sourceOffset := signature\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of signature\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of signature\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            // Execute delegatecall\n            let success := delegatecall(\n                gas,                                // forward all gas, TODO: look into gas consumption of assert/throw\n                address,                            // call address of this contract\n                headerAreaStart,                    // pointer to start of input\n                sub(dataAreaEnd, headerAreaStart),  // length of input\n                headerAreaStart,                    // write output over input\n                128                                 // output size is 128 bytes\n            )\n            switch success\n            case 0 {\n                mstore(fillResults, 0)\n                mstore(add(fillResults, 32), 0)\n                mstore(add(fillResults, 64), 0)\n                mstore(add(fillResults, 96), 0)\n            }\n            case 1 {\n                mstore(fillResults, mload(headerAreaStart))\n                mstore(add(fillResults, 32), mload(add(headerAreaStart, 32)))\n                mstore(add(fillResults, 64), mload(add(headerAreaStart, 64)))\n                mstore(add(fillResults, 96), mload(add(headerAreaStart, 96)))\n            }\n        }\n        return fillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            fillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrKill.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            fillOrKillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n    }\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrders(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory takerAssetData = orders[0].takerAssetData;\n    \n        for (uint256 i = 0; i < orders.length; i++) {\n\n            // We assume that asset being sold by taker is the same for each order.\n            // Rather than passing this in as calldata, we use the takerAssetData from the first order in all later orders.\n            orders[i].takerAssetData = takerAssetData;\n\n            // Calculate the remaining amount of takerAsset to sell\n            uint256 remainingTakerAssetFillAmount = safeSub(takerAssetFillAmount, totalFillResults.takerAssetFilledAmount);\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrder(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // HACK: the proxyId is \"popped\" from the byte array before a fill is settled\n            // by subtracting from the length of the array. Since the popped byte is \n            // still in memory, we can \"unpop\" it by incrementing the length of the byte array.\n            assembly {\n                let len := mload(takerAssetData)\n                mstore(takerAssetData, add(len, 1))\n            }\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of takerAsset has been sold\n            if (totalFillResults.takerAssetFilledAmount == takerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory takerAssetData = orders[0].takerAssetData;\n\n        for (uint256 i = 0; i < orders.length; i++) {\n\n            // We assume that asset being sold by taker is the same for each order.\n            // Rather than passing this in as calldata, we use the takerAssetData from the first order in all later orders.\n            orders[i].takerAssetData = takerAssetData;\n\n            // Calculate the remaining amount of takerAsset to sell\n            uint256 remainingTakerAssetFillAmount = safeSub(takerAssetFillAmount, totalFillResults.takerAssetFilledAmount);\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderNoThrow(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of takerAsset has been sold\n            if (totalFillResults.takerAssetFilledAmount == takerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrders(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory makerAssetData = orders[0].makerAssetData;\n\n        for (uint256 i = 0; i < orders.length; i++) {\n\n            // We assume that asset being bought by taker is the same for each order.\n            // Rather than passing this in as calldata, we copy the makerAssetData from the first order onto all later orders.\n            orders[i].makerAssetData = makerAssetData;\n\n            // Calculate the remaining amount of makerAsset to buy\n            uint256 remainingMakerAssetFillAmount = safeSub(makerAssetFillAmount, totalFillResults.makerAssetFilledAmount);\n\n            // Convert the remaining amount of makerAsset to buy into remaining amount\n            // of takerAsset to sell, assuming entire amount can be sold in the current order\n            uint256 remainingTakerAssetFillAmount = getPartialAmount(\n                orders[i].takerAssetAmount,\n                orders[i].makerAssetAmount,\n                remainingMakerAssetFillAmount\n            );\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrder(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // HACK: the proxyId is \"popped\" from the byte array before a fill is settled\n            // by subtracting from the length of the array. Since the popped byte is \n            // still in memory, we can \"unpop\" it by incrementing the length of the byte array.\n            assembly {\n                let len := mload(makerAssetData)\n                mstore(makerAssetData, add(len, 1))\n            }\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of makerAsset has been bought\n            if (totalFillResults.makerAssetFilledAmount == makerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory makerAssetData = orders[0].makerAssetData;\n\n        for (uint256 i = 0; i < orders.length; i++) {\n\n            // We assume that asset being bought by taker is the same for each order.\n            // Rather than passing this in as calldata, we copy the makerAssetData from the first order onto all later orders.\n            orders[i].makerAssetData = makerAssetData;\n\n            // Calculate the remaining amount of makerAsset to buy\n            uint256 remainingMakerAssetFillAmount = safeSub(makerAssetFillAmount, totalFillResults.makerAssetFilledAmount);\n\n            // Convert the remaining amount of makerAsset to buy into remaining amount\n            // of takerAsset to sell, assuming entire amount can be sold in the current order\n            uint256 remainingTakerAssetFillAmount = getPartialAmount(\n                orders[i].takerAssetAmount,\n                orders[i].makerAssetAmount,\n                remainingMakerAssetFillAmount\n            );\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderNoThrow(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of makerAsset has been bought\n            if (totalFillResults.makerAssetFilledAmount == makerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously cancels multiple orders in a single transaction.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            cancelOrder(orders[i]);\n        }\n    }\n}\n",
		"current/protocol/Exchange/interfaces/IAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract IAssetProxyDispatcher {\n\n    /// @dev Registers an asset proxy to an asset proxy id.\n    ///      An id can only be assigned to a single proxy at a given time.\n    /// @param assetProxyId Id to register`newAssetProxy` under.\n    /// @param newAssetProxy Address of new asset proxy to register, or 0x0 to unset assetProxyId.\n    /// @param oldAssetProxy Existing asset proxy to overwrite, or 0x0 if assetProxyId is currently unused.\n    function registerAssetProxy(\n        uint8 assetProxyId,\n        address newAssetProxy,\n        address oldAssetProxy\n    )\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(uint8 assetProxyId)\n        external\n        view\n        returns (address);\n}\n",
		"current/protocol/Exchange/interfaces/IExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\n\ncontract IExchangeCore {\n\n    /// @dev Cancels all orders reated by sender with a salt less than or equal to the specified salt value.\n    /// @param salt Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 salt)\n        external;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrder(LibOrder.Order memory order)\n        public;\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n}\n",
		"current/protocol/Exchange/interfaces/IMatchOrders.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\n\ncontract IMatchOrders {\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    /// TODO: Make this function external once supported by Solidity (See Solidity Issues #3199, #1603)\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n",
		"current/protocol/Exchange/interfaces/ISignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract ISignatureValidator {\n\n    /// @dev Approves a hash on-chain using any valid signature type.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param signer Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    function preSign(\n        bytes32 hash,\n        address signer,\n        bytes signature\n    )\n        external;\n    \n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validator Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validator,\n        bool approval\n    )\n        external;\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signer Address of signer.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        address signer,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n}\n",
		"current/protocol/Exchange/interfaces/ITransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\n\ncontract ITransactions {\n\n    /// @dev Executes an exchange method call in the context of signer.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signer Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @param signature Proof of signer transaction by signer.\n    function executeTransaction(\n        uint256 salt,\n        address signer,\n        bytes data,\n        bytes signature\n    )\n        external;\n}\n",
		"current/protocol/Exchange/interfaces/IValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.23;\n\ncontract IValidator {\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signer Address that should have signed the given hash.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        address signer,\n        bytes signature\n    )\n        external\n        view\n        returns (bool isValid);\n}\n",
		"current/protocol/Exchange/interfaces/IWallet.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract IWallet {\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        bytes signature\n    )\n        external\n        view\n        returns (bool isValid);\n}\n",
		"current/protocol/Exchange/libs/LibExchangeErrors.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibExchangeErrors {\n    /// Order validation errors ///\n    string constant ORDER_UNFILLABLE = \"ORDER_UNFILLABLE\";                  // Order cannot be filled.\n    string constant INVALID_MAKER = \"INVALID_MAKER\";                        // Invalid makerAddress.\n    string constant INVALID_TAKER = \"INVALID_TAKER\";                        // Invalid takerAddress.\n    string constant INVALID_SENDER = \"INVALID_SENDER\";                      // Invalid `msg.sender`.\n    string constant INVALID_ORDER_SIGNATURE = \"INVALID_ORDER_SIGNATURE\";    // Signature validation failed. \n    \n    /// fillOrder validation errors ///\n    string constant INVALID_TAKER_AMOUNT = \"INVALID_TAKER_AMOUNT\";          // takerAssetFillAmount cannot equal 0.\n    string constant ROUNDING_ERROR = \"ROUNDING_ERROR\";                      // Rounding error greater than 0.1% of takerAssetFillAmount. \n    \n    /// Signature validation errors ///\n    string constant INVALID_SIGNATURE = \"INVALID_SIGNATURE\";                // Signature validation failed. \n    string constant SIGNATURE_ILLEGAL = \"SIGNATURE_ILLEGAL\";                // Signature type is illegal.\n    string constant SIGNATURE_UNSUPPORTED = \"SIGNATURE_UNSUPPORTED\";        // Signature type unsupported.\n    \n    /// cancelOrdersUptTo errors ///\n    string constant INVALID_NEW_MAKER_EPOCH = \"INVALID_NEW_MAKER_EPOCH\";    // Specified salt must be greater than or equal to existing makerEpoch.\n\n    /// fillOrKillOrder errors ///\n    string constant COMPLETE_FILL_FAILED = \"COMPLETE_FILL_FAILED\";          // Desired takerAssetFillAmount could not be completely filled. \n\n    /// matchOrders errors ///\n    string constant NEGATIVE_SPREAD_REQUIRED = \"NEGATIVE_SPREAD_REQUIRED\";  // Matched orders must have a negative spread.\n\n    /// Transaction errors ///\n    string constant REENTRANCY_ILLEGAL = \"REENTRANCY_ILLEGAL\";              // Recursive reentrancy is not allowed. \n    string constant INVALID_TX_HASH = \"INVALID_TX_HASH\";                    // Transaction has already been executed. \n    string constant INVALID_TX_SIGNATURE = \"INVALID_TX_SIGNATURE\";          // Signature validation failed. \n    string constant FAILED_EXECUTION = \"FAILED_EXECUTION\";                  // Transaction execution failed. \n    \n    /// registerAssetProxy errors ///\n    string constant ASSET_PROXY_MISMATCH = \"ASSET_PROXY_MISMATCH\";          // oldAssetProxy proxy does not match currentAssetProxy. \n    string constant ASSET_PROXY_ID_MISMATCH = \"ASSET_PROXY_ID_MISMATCH\";    // newAssetProxyId does not match given assetProxyId.\n\n    /// Length validation errors ///\n    string constant LENGTH_GREATER_THAN_0_REQUIRED = \"LENGTH_GREATER_THAN_0_REQUIRED\"; // Byte array must have a length greater than 0.\n    string constant LENGTH_0_REQUIRED = \"LENGTH_1_REQUIRED\";                // Byte array must have a length of 1.\n    string constant LENGTH_65_REQUIRED = \"LENGTH_66_REQUIRED\";              // Byte array must have a length of 66.\n}\n",
		"current/protocol/Exchange/libs/LibFillResults.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../../../utils/SafeMath/SafeMath.sol\";\n\ncontract LibFillResults is\n    SafeMath\n{\n\n    struct FillResults {\n        uint256 makerAssetFilledAmount;\n        uint256 takerAssetFilledAmount;\n        uint256 makerFeePaid;\n        uint256 takerFeePaid;\n    }\n\n    struct MatchedFillResults {\n        FillResults left;\n        FillResults right;\n        uint256 leftMakerAssetSpreadAmount;\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    ///      Modifies the first FillResults instance specified.\n    /// @param totalFillResults Fill results instance that will be added onto.\n    /// @param singleFillResults Fill results instance that will be added to totalFillResults.\n    function addFillResults(FillResults memory totalFillResults, FillResults memory singleFillResults)\n        internal\n        pure\n    {\n        totalFillResults.makerAssetFilledAmount = safeAdd(totalFillResults.makerAssetFilledAmount, singleFillResults.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = safeAdd(totalFillResults.takerAssetFilledAmount, singleFillResults.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = safeAdd(totalFillResults.makerFeePaid, singleFillResults.makerFeePaid);\n        totalFillResults.takerFeePaid = safeAdd(totalFillResults.takerFeePaid, singleFillResults.takerFeePaid);\n    }\n}\n",
		"current/protocol/Exchange/libs/LibMath.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../../../utils/SafeMath/SafeMath.sol\";\n\ncontract LibMath is\n    SafeMath\n{\n    string constant ROUNDING_ERROR_ON_PARTIAL_AMOUNT = \"A rounding error occurred when calculating partial transfer amounts.\";\n\n    /// @dev Calculates partial value given a numerator and denominator.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target.\n    function getPartialAmount(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target)\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = safeDiv(\n            safeMul(numerator, target),\n            denominator\n        );\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error > 0.1%.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target)\n        internal\n        pure\n        returns (bool isError)\n    {\n        uint256 remainder = mulmod(target, numerator, denominator);\n        if (remainder == 0) {\n            return false; // No rounding error.\n        }\n\n        uint256 errPercentageTimes1000000 = safeDiv(\n            safeMul(remainder, 1000000),\n            safeMul(numerator, target)\n        );\n        isError = errPercentageTimes1000000 > 1000;\n        return isError;\n    }\n}\n",
		"current/protocol/Exchange/libs/LibOrder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibOrder {\n\n    bytes32 constant DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"DomainSeparator(address contract)\"\n    ));\n\n    bytes32 constant ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"Order(\",\n        \"address makerAddress,\",\n        \"address takerAddress,\",\n        \"address feeRecipientAddress,\",\n        \"address senderAddress,\",\n        \"uint256 makerAssetAmount,\",\n        \"uint256 takerAssetAmount,\",\n        \"uint256 makerFee,\",\n        \"uint256 takerFee,\",\n        \"uint256 expirationTimeSeconds,\",\n        \"uint256 salt,\",\n        \"bytes makerAssetData,\",\n        \"bytes takerAssetData,\",\n        \")\"\n    ));\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's state is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    struct Order {\n        address makerAddress;\n        address takerAddress;\n        address feeRecipientAddress;\n        address senderAddress;\n        uint256 makerAssetAmount;\n        uint256 takerAssetAmount;\n        uint256 makerFee;\n        uint256 takerFee;\n        uint256 expirationTimeSeconds;\n        uint256 salt;\n        bytes makerAssetData;\n        bytes takerAssetData;\n    }\n\n    struct OrderInfo {\n        // See LibStatus for a complete description of order statuses\n        uint8 orderStatus;\n        // Keccak-256 EIP712 hash of the order\n        bytes32 orderHash;\n        // Amount of order that has been filled\n        uint256 orderTakerAssetFilledAmount;\n    }\n\n    /// @dev Calculates Keccak-256 hash of the order.\n    /// @param order The order structure.\n    /// @return Keccak-256 EIP712 hash of the order.\n    function getOrderHash(Order memory order)\n        internal\n        view\n        returns (bytes32 orderHash)\n    {\n        // TODO: EIP712 is not finalized yet\n        // Source: https://github.com/ethereum/EIPs/pull/712\n        orderHash = keccak256(abi.encodePacked(\n            DOMAIN_SEPARATOR_SCHEMA_HASH,\n            keccak256(abi.encodePacked(address(this))),\n            ORDER_SCHEMA_HASH,\n            keccak256(abi.encodePacked(\n                order.makerAddress,\n                order.takerAddress,\n                order.feeRecipientAddress,\n                order.senderAddress,\n                order.makerAssetAmount,\n                order.takerAssetAmount,\n                order.makerFee,\n                order.takerFee,\n                order.expirationTimeSeconds,\n                order.salt,\n                keccak256(abi.encodePacked(order.makerAssetData)),\n                keccak256(abi.encodePacked(order.takerAssetData))\n            ))\n        ));\n        return orderHash;\n    }\n}\n",
		"current/protocol/Exchange/mixins/MAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IAssetProxyDispatcher.sol\";\n\ncontract MAssetProxyDispatcher is\n    IAssetProxyDispatcher\n{\n\n    // Logs registration of new asset proxy\n    event AssetProxySet(\n        uint8 id,\n        address newAssetProxy,\n        address oldAssetProxy\n    );\n\n    /// @dev Forwards arguments to assetProxy and calls `transferFrom`. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param assetProxyId Id of assetProxy to dispach to.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param amount Amount of token to transfer.\n    function dispatchTransferFrom(\n        bytes memory assetData,\n        uint8 assetProxyId,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal;\n}\n",
		"current/protocol/Exchange/mixins/MExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\nimport \"../interfaces/IExchangeCore.sol\";\n\ncontract MExchangeCore is\n    IExchangeCore\n{\n    // Fill event is emitted whenever an order is filled.\n    event Fill(\n        address indexed makerAddress,\n        address takerAddress,\n        address indexed feeRecipientAddress,\n        uint256 makerAssetFilledAmount,\n        uint256 takerAssetFilledAmount,\n        uint256 makerFeePaid,\n        uint256 takerFeePaid,\n        bytes32 indexed orderHash,\n        bytes makerAssetData,\n        bytes takerAssetData\n    );\n\n    // Cancel event is emitted whenever an individual order is cancelled.\n    event Cancel(\n        address indexed makerAddress,\n        address indexed feeRecipientAddress,\n        bytes32 indexed orderHash,\n        bytes makerAssetData,\n        bytes takerAssetData\n    );\n\n    // CancelUpTo event is emitted whenever `cancelOrdersUpTo` is executed succesfully.\n    event CancelUpTo(\n        address indexed makerAddress,\n        uint256 makerEpoch\n    );\n\n    /// @dev Updates state with results of a fill order.\n    /// @param order that was filled.\n    /// @param takerAddress Address of taker who filled the order.\n    /// @param orderTakerAssetFilledAmount Amount of order already filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function updateFilledState(\n        LibOrder.Order memory order,\n        address takerAddress,\n        bytes32 orderHash,\n        uint256 orderTakerAssetFilledAmount,\n        LibFillResults.FillResults memory fillResults\n    )\n        internal;\n\n    /// @dev Updates state with results of cancelling an order.\n    ///      State is only updated if the order is currently fillable.\n    ///      Otherwise, updating state would have no effect.\n    /// @param order that was cancelled.\n    /// @param orderHash Hash of order that was cancelled.\n    function updateCancelledState(\n        LibOrder.Order memory order,\n        bytes32 orderHash\n    )\n        internal;\n\n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderInfo Status, orderHash, and amount already filled of order.\n    /// @param takerAddress Address of order taker.\n    /// @param takerAssetFillAmount Desired amount of order to fill by taker.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param signature Proof that the orders was created by its maker.\n    function assertValidFill(\n        LibOrder.Order memory order,\n        LibOrder.OrderInfo memory orderInfo,\n        address takerAddress,\n        uint256 takerAssetFillAmount,\n        uint256 takerAssetFilledAmount,\n        bytes memory signature\n    )\n        internal\n        view;\n\n\n    /// @dev Validates context for cancelOrder. Succeeds or throws.\n    /// @param order to be cancelled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    function assertValidCancel(\n        LibOrder.Order memory order,\n        LibOrder.OrderInfo memory orderInfo\n    )\n        internal\n        view;\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        LibOrder.Order memory order,\n        uint256 takerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (LibFillResults.FillResults memory fillResults);\n}\n",
		"current/protocol/Exchange/mixins/MMatchOrders.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\nimport \"../interfaces/IMatchOrders.sol\";\n\ncontract MMatchOrders is\n    IMatchOrders\n{\n\n    /// @dev Validates context for matchOrders. Succeeds or throws.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    function assertValidMatch(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder\n    )\n        internal\n        pure;\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n",
		"current/protocol/Exchange/mixins/MSettlement.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\n\ncontract MSettlement {\n\n    /// @dev Settles an order by transferring assets between counterparties.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAddress Address selling takerAsset and buying makerAsset.\n    /// @param fillResults Amounts to be filled and fees paid by maker and taker.\n    function settleOrder(\n        LibOrder.Order memory order,\n        address takerAddress,\n        LibFillResults.FillResults memory fillResults\n    )\n        internal;\n\n    /// @dev Settles matched order by transferring appropriate funds between order makers, taker, and fee recipient.\n    /// @param leftOrder First matched order.\n    /// @param rightOrder Second matched order.\n    /// @param takerAddress Address that matched the orders. The taker receives the spread between orders as profit.\n    /// @param matchedFillResults Struct holding amounts to transfer between makers, taker, and fee recipients.\n    function settleMatchedOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        address takerAddress,\n        LibFillResults.MatchedFillResults memory matchedFillResults\n    )\n        internal;\n}\n",
		"current/protocol/Exchange/mixins/MSignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../interfaces/ISignatureValidator.sol\";\n\ncontract MSignatureValidator is\n    ISignatureValidator\n{\n    // Allowed signature types.\n    enum SignatureType {\n        Illegal,    // 0x00, default value\n        Invalid,    // 0x01\n        EIP712,     // 0x02\n        EthSign,    // 0x03\n        Caller,     // 0x04\n        Wallet,     // 0x05\n        Validator,  // 0x06\n        PreSigned,  // 0x07\n        Trezor      // 0x08\n    }\n}\n",
		"current/protocol/Exchange/mixins/MTransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\n\nimport \"../interfaces/ITransactions.sol\";\n\ncontract MTransactions is\n    ITransactions\n{\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function getCurrentContextAddress()\n        internal\n        view\n        returns (address);\n}\n",
		"current/utils/LibBytes/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../LibMem/LibMem.sol\";\n\ncontract LibBytes is\n    LibMem\n{\n\n    // Revert reasons\n    string constant GREATER_THAN_ZERO_LENGTH_REQUIRED = \"GREATER_THAN_ZERO_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\";\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            GREATER_THAN_ZERO_LENGTH_REQUIRED\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(mload(add(b, index)), 0xffffffffffffffffffffffff0000000000000000000000000000000000000000)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        return uint256(readBytes32(b, index));\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads the first 4 bytes from a byte array of arbitrary length.\n    /// @param b Byte array to read first 4 bytes from.\n    /// @return First 4 bytes of data.\n    function readFirst4(bytes memory b)\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= 4,\n            GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\n        );\n        assembly {\n            result := mload(add(b, 32))\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytes(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\n        );\n\n        // Allocate memory and copy value to result\n        result = new bytes(nestedBytesLength);\n        memCopy(\n            getMemAddress(result) + 32, // +32 skips array length\n            getMemAddress(b) + index + 32,\n            nestedBytesLength\n        );\n\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytes(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 /* 32 bytes to store length */ + input.length,\n            GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            getMemAddress(b) + 32 + index,  // +32 to skip length of <b>\n            getMemAddress(input),           // includes length of <input>\n            input.length + 32               // +32 bytes to store <input> length\n        );\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function areBytesEqual(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        assembly {\n            // Get the number of words occupied by <lhs>\n            let lenFullWords := div(add(mload(lhs), 0x1F), 0x20)\n\n            // Add 1 to the number of words, to account for the length field\n            lenFullWords := add(lenFullWords, 0x1)\n\n            // Test equality word-by-word.\n            // Terminates early if there is a mismatch.\n            for {let i := 0} lt(i, lenFullWords) {i := add(i, 1)} {\n                let lhsWord := mload(add(lhs, mul(i, 0x20)))\n                let rhsWord := mload(add(rhs, mul(i, 0x20)))\n                equal := eq(lhsWord, rhsWord)\n                if eq(equal, 0) {\n                    // Break\n                    i := lenFullWords\n                }\n            }\n       }\n\n       return equal;\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function deepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        internal\n        pure\n    {\n        uint256 sourceLen = source.length;\n        // Dest length must be >= source length, or some bytes would not be copied.\n        require(\n            dest.length >= sourceLen,\n            GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\n        );\n        memCopy(\n            getMemAddress(dest) + 32,    // +32 to skip length of <dest>\n            getMemAddress(source) + 32,  // +32 to skip length of <source>\n            sourceLen\n        );\n    }\n}\n",
		"current/utils/LibMem/LibMem.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibMem\n{\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array.\n    function getMemAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // Record the total number of full words to copy\n                    let nWords := div(length, 32)\n\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    for {let i := 0} lt(i, nWords) {i := add(i, 1)} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // Record the total number of full words to copy\n                    let nWords := div(length, 32)\n\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    for {let i := 0} lt(i, nWords) {i := add(i, 1)} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n}\n",
		"current/utils/Ownable/IOwnable.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\n\ncontract IOwnable {\n    function transferOwnership(address newOwner)\n        public;\n}\n",
		"current/utils/Ownable/Ownable.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\n\nimport \"./IOwnable.sol\";\n\ncontract Ownable is IOwnable {\n    address public owner;\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"Only contract owner is allowed to call this method.\"\n        );\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n",
		"current/utils/SafeMath/SafeMath.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\ncontract SafeMath {\n    function safeMul(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint c = a / b;\n        return c;\n    }\n\n    function safeSub(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n"
	},
	"sourceTreeHashHex": "0xfb8b5627857c1784cf38486f49cbd3cf813bdc44118cf9c3361db79d72e349e1",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.4.24+commit.e67f0147.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"networks": {}
}