{
	"schemaVersion": "2.0.0",
	"contractName": "TestLibBytes",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "lhs",
						"type": "bytes"
					},
					{
						"name": "rhs",
						"type": "bytes"
					}
				],
				"name": "publicAreBytesEqual",
				"outputs": [
					{
						"name": "equal",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					}
				],
				"name": "publicPopAddress",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					},
					{
						"name": "result",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "publicReadBytes",
				"outputs": [
					{
						"name": "result",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					},
					{
						"name": "input",
						"type": "address"
					}
				],
				"name": "publicWriteAddress",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					}
				],
				"name": "publicReadFirst4",
				"outputs": [
					{
						"name": "result",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					}
				],
				"name": "publicPopByte",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					},
					{
						"name": "result",
						"type": "bytes1"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					},
					{
						"name": "input",
						"type": "bytes"
					}
				],
				"name": "publicWriteBytes",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "publicReadAddress",
				"outputs": [
					{
						"name": "result",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					},
					{
						"name": "input",
						"type": "bytes32"
					}
				],
				"name": "publicWriteBytes32",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					},
					{
						"name": "input",
						"type": "uint256"
					}
				],
				"name": "publicWriteUint256",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "publicReadBytes32",
				"outputs": [
					{
						"name": "result",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "publicReadUint256",
				"outputs": [
					{
						"name": "result",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50610f1a806100206000396000f3006080604052600436106100b95763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630945c63b81146100be57806329f00d5c146100f457806335997eaf146101225780633f2a25ec1461014f578063595fe5471461016f5780637356f5f31461019c5780637d0d772f146101ca57806382e2fa24146101ea57806384f8775814610217578063b79650a414610237578063be766f1b14610257578063e3a85ce414610284575b600080fd5b3480156100ca57600080fd5b506100de6100d9366004610aee565b6102a4565b6040516100eb9190610d44565b60405180910390f35b34801561010057600080fd5b5061011461010f366004610ab1565b6102b9565b6040516100eb929190610d7f565b34801561012e57600080fd5b5061014261013d366004610b57565b6102cd565b6040516100eb9190610d6e565b34801561015b57600080fd5b5061014261016a366004610b9e565b6102d9565b34801561017b57600080fd5b5061018f61018a366004610ab1565b6102f0565b6040516100eb9190610d60565b3480156101a857600080fd5b506101bc6101b7366004610ab1565b6102fb565b6040516100eb929190610d9f565b3480156101d657600080fd5b506101426101e5366004610c5c565b610308565b3480156101f657600080fd5b5061020a610205366004610b57565b610315565b6040516100eb9190610d36565b34801561022357600080fd5b50610142610232366004610c02565b610321565b34801561024357600080fd5b50610142610252366004610c02565b61032e565b34801561026357600080fd5b50610277610272366004610b57565b61033b565b6040516100eb9190610d52565b34801561029057600080fd5b5061027761029f366004610b57565b610347565b60006102b08383610353565b90505b92915050565b606060006102c68361039a565b9293915050565b60606102b08383610435565b60606102e684848461052e565b50825b9392505050565b60006102b3826105cb565b606060006102c68361065c565b60606102e684848461072d565b60006102b083836107e2565b60606102e684848461087a565b60606102e68484846108f9565b60006102b08383610904565b60006102b0838361033b565b60006020601f8451010460018101905060005b8181101561039257602081028581015190850151808214945084610388578392505b5050600101610366565b505092915050565b6000601482511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f52458152602001600080516020610ec18339815191528152509015156104195760405160e560020a62461bcd0281526004016104109190610d6e565b60405180910390fd5b506104288260148451036107e2565b8251601319019092525090565b60606000610443848461033b565b905060208301925080830184511015606060405190810160405280603081526020017f475245415445525f4f525f455155414c5f544f5f4e45535445445f425954455381526020017f5f4c454e4754485f5245515549524544000000000000000000000000000000008152509015156104d25760405160e560020a62461bcd0281526004016104109190610d6e565b50806040519080825280601f01601f191660200182016040528015610501578160200160208202803883390190505b50915061052761051083610986565b6020018461051d87610986565b0160200183610989565b5092915050565b8160140183511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f52458152602001600080516020610ec18339815191528152509015156105a45760405160e560020a62461bcd0281526004016104109190610d6e565b509101601401805173ffffffffffffffffffffffffffffffffffffffff1916919091189052565b6000600482511015606060405190810160405280602581526020017f475245415445525f4f525f455155414c5f544f5f345f4c454e4754485f52455181526020017f55495245440000000000000000000000000000000000000000000000000000008152509015156106535760405160e560020a62461bcd0281526004016104109190610d6e565b50506020015190565b600080825111606060405190810160405280602181526020017f475245415445525f5448414e5f5a45524f5f4c454e4754485f5245515549524581526020017f44000000000000000000000000000000000000000000000000000000000000008152509015156106e25760405160e560020a62461bcd0281526004016104109190610d6e565b508151829060001981019081106106f557fe5b0160200151825160001901909252507f0100000000000000000000000000000000000000000000000000000000000000908190040290565b8051826020010183511015606060405190810160405280603081526020017f475245415445525f4f525f455155414c5f544f5f4e45535445445f425954455381526020017f5f4c454e4754485f5245515549524544000000000000000000000000000000008152509015156107b85760405160e560020a62461bcd0281526004016104109190610d6e565b506107dd826107c685610986565b602001016107d383610986565b8351602001610989565b505050565b60008160140183511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f52458152602001600080516020610ec183398151915281525090151561085a5760405160e560020a62461bcd0281526004016104109190610d6e565b5050016014015173ffffffffffffffffffffffffffffffffffffffff1690565b8160200183511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f52458152602001600080516020610ec18339815191528152509015156108f05760405160e560020a62461bcd0281526004016104109190610d6e565b50910160200152565b6107dd83838361087a565b60008160200183511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f52458152602001600080516020610ec183398151915281525090151561097c5760405160e560020a62461bcd0281526004016104109190610d6e565b5050016020015190565b90565b60208110156109b3576001816020036101000a0380198351168185511680821786525050506107dd565b828214156109c0576107dd565b82821115610a065760208104602082039150818301828501815160005b848110156109fb5786518852602097880197909601956001016109dd565b509052506107dd9050565b60208104602082039150818301828501845160005b84811015610a3a5783518352601f199384019390920191600101610a1b565b508652505050505050565b60006102e98235610e12565b60006102e98235610986565b6000601f82018313610a6e57600080fd5b8135610a81610a7c82610de6565b610dbf565b91508082526020830160208301858383011115610a9d57600080fd5b610aa8838284610e7a565b50505092915050565b600060208284031215610ac357600080fd5b813567ffffffffffffffff811115610ada57600080fd5b610ae684828501610a5d565b949350505050565b60008060408385031215610b0157600080fd5b823567ffffffffffffffff811115610b1857600080fd5b610b2485828601610a5d565b925050602083013567ffffffffffffffff811115610b4157600080fd5b610b4d85828601610a5d565b9150509250929050565b60008060408385031215610b6a57600080fd5b823567ffffffffffffffff811115610b8157600080fd5b610b8d85828601610a5d565b9250506020610b4d85828601610a51565b600080600060608486031215610bb357600080fd5b833567ffffffffffffffff811115610bca57600080fd5b610bd686828701610a5d565b9350506020610be786828701610a51565b9250506040610bf886828701610a45565b9150509250925092565b600080600060608486031215610c1757600080fd5b833567ffffffffffffffff811115610c2e57600080fd5b610c3a86828701610a5d565b9350506020610c4b86828701610a51565b9250506040610bf886828701610a51565b600080600060608486031215610c7157600080fd5b833567ffffffffffffffff811115610c8857600080fd5b610c9486828701610a5d565b9350506020610ca586828701610a51565b925050604084013567ffffffffffffffff811115610cc257600080fd5b610bf886828701610a5d565b610cd781610e12565b82525050565b610cd781610e2b565b610cd781610e30565b610cd781610986565b610cd781610e55565b6000610d0c82610e0e565b808452610d20816020860160208601610e86565b610d2981610eb6565b9093016020019392505050565b602081016102b38284610cce565b602081016102b38284610cdd565b602081016102b38284610cef565b602081016102b38284610cf8565b602080825281016102e98184610d01565b60408082528101610d908185610d01565b90506102e96020830184610cce565b60408082528101610db08185610d01565b90506102e96020830184610ce6565b60405181810167ffffffffffffffff81118282101715610dde57600080fd5b604052919050565b600067ffffffffffffffff821115610dfd57600080fd5b506020601f91909101601f19160190565b5190565b73ffffffffffffffffffffffffffffffffffffffff1690565b151590565b7fff000000000000000000000000000000000000000000000000000000000000001690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b82818337506000910152565b60005b83811015610ea1578181015183820152602001610e89565b83811115610eb0576000848401525b50505050565b601f01601f19169056005155495245440000000000000000000000000000000000000000000000000000a265627a7a723058205e0fdb9040b2c6b1949cbd16633e85fd889010f1e1d3f92e2e3937bcaf0d57816c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF1A DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB9 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x945C63B DUP2 EQ PUSH2 0xBE JUMPI DUP1 PUSH4 0x29F00D5C EQ PUSH2 0xF4 JUMPI DUP1 PUSH4 0x35997EAF EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x3F2A25EC EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0x595FE547 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0x7356F5F3 EQ PUSH2 0x19C JUMPI DUP1 PUSH4 0x7D0D772F EQ PUSH2 0x1CA JUMPI DUP1 PUSH4 0x82E2FA24 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x84F87758 EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0xB79650A4 EQ PUSH2 0x237 JUMPI DUP1 PUSH4 0xBE766F1B EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xE3A85CE4 EQ PUSH2 0x284 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDE PUSH2 0xD9 CALLDATASIZE PUSH1 0x4 PUSH2 0xAEE JUMP JUMPDEST PUSH2 0x2A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEB SWAP2 SWAP1 PUSH2 0xD44 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x100 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x114 PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0xAB1 JUMP JUMPDEST PUSH2 0x2B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEB SWAP3 SWAP2 SWAP1 PUSH2 0xD7F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x142 PUSH2 0x13D CALLDATASIZE PUSH1 0x4 PUSH2 0xB57 JUMP JUMPDEST PUSH2 0x2CD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEB SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x142 PUSH2 0x16A CALLDATASIZE PUSH1 0x4 PUSH2 0xB9E JUMP JUMPDEST PUSH2 0x2D9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18F PUSH2 0x18A CALLDATASIZE PUSH1 0x4 PUSH2 0xAB1 JUMP JUMPDEST PUSH2 0x2F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEB SWAP2 SWAP1 PUSH2 0xD60 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BC PUSH2 0x1B7 CALLDATASIZE PUSH1 0x4 PUSH2 0xAB1 JUMP JUMPDEST PUSH2 0x2FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEB SWAP3 SWAP2 SWAP1 PUSH2 0xD9F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x142 PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0xC5C JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20A PUSH2 0x205 CALLDATASIZE PUSH1 0x4 PUSH2 0xB57 JUMP JUMPDEST PUSH2 0x315 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEB SWAP2 SWAP1 PUSH2 0xD36 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x223 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x142 PUSH2 0x232 CALLDATASIZE PUSH1 0x4 PUSH2 0xC02 JUMP JUMPDEST PUSH2 0x321 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x243 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x142 PUSH2 0x252 CALLDATASIZE PUSH1 0x4 PUSH2 0xC02 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0xB57 JUMP JUMPDEST PUSH2 0x33B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEB SWAP2 SWAP1 PUSH2 0xD52 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x290 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x29F CALLDATASIZE PUSH1 0x4 PUSH2 0xB57 JUMP JUMPDEST PUSH2 0x347 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B0 DUP4 DUP4 PUSH2 0x353 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2C6 DUP4 PUSH2 0x39A JUMP JUMPDEST SWAP3 SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2B0 DUP4 DUP4 PUSH2 0x435 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2E6 DUP5 DUP5 DUP5 PUSH2 0x52E JUMP JUMPDEST POP DUP3 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B3 DUP3 PUSH2 0x5CB JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2C6 DUP4 PUSH2 0x65C JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2E6 DUP5 DUP5 DUP5 PUSH2 0x72D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B0 DUP4 DUP4 PUSH2 0x7E2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2E6 DUP5 DUP5 DUP5 PUSH2 0x87A JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2E6 DUP5 DUP5 DUP5 PUSH2 0x8F9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B0 DUP4 DUP4 PUSH2 0x904 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B0 DUP4 DUP4 PUSH2 0x33B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP5 MLOAD ADD DIV PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x392 JUMPI PUSH1 0x20 DUP2 MUL DUP6 DUP2 ADD MLOAD SWAP1 DUP6 ADD MLOAD DUP1 DUP3 EQ SWAP5 POP DUP5 PUSH2 0x388 JUMPI DUP4 SWAP3 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x366 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x14 DUP3 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xEC1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x419 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x428 DUP3 PUSH1 0x14 DUP5 MLOAD SUB PUSH2 0x7E2 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x13 NOT ADD SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x443 DUP5 DUP5 PUSH2 0x33B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP4 ADD SWAP3 POP DUP1 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F4E45535445445F4259544553 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5F4C454E4754485F524551554952454400000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x4D2 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x501 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x527 PUSH2 0x510 DUP4 PUSH2 0x986 JUMP JUMPDEST PUSH1 0x20 ADD DUP5 PUSH2 0x51D DUP8 PUSH2 0x986 JUMP JUMPDEST ADD PUSH1 0x20 ADD DUP4 PUSH2 0x989 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xEC1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x5A4 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST POP SWAP2 ADD PUSH1 0x14 ADD DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP2 SWAP1 SWAP2 XOR SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP3 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F345F4C454E4754485F524551 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5549524544000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x653 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST POP POP PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD GT PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F5448414E5F5A45524F5F4C454E4754485F52455155495245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4400000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x6E2 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST POP DUP2 MLOAD DUP3 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x6F5 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD DUP3 MLOAD PUSH1 0x0 NOT ADD SWAP1 SWAP3 MSTORE POP PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 SWAP1 DIV MUL SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 PUSH1 0x20 ADD ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F4E45535445445F4259544553 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5F4C454E4754485F524551554952454400000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x7B8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST POP PUSH2 0x7DD DUP3 PUSH2 0x7C6 DUP6 PUSH2 0x986 JUMP JUMPDEST PUSH1 0x20 ADD ADD PUSH2 0x7D3 DUP4 PUSH2 0x986 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x20 ADD PUSH2 0x989 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xEC1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x85A JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST POP POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xEC1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x8F0 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST POP SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH2 0x7DD DUP4 DUP4 DUP4 PUSH2 0x87A JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xEC1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x97C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST POP POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9B3 JUMPI PUSH1 0x1 DUP2 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP4 MLOAD AND DUP2 DUP6 MLOAD AND DUP1 DUP3 OR DUP7 MSTORE POP POP POP PUSH2 0x7DD JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0x9C0 JUMPI PUSH2 0x7DD JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0xA06 JUMPI PUSH1 0x20 DUP2 DIV PUSH1 0x20 DUP3 SUB SWAP2 POP DUP2 DUP4 ADD DUP3 DUP6 ADD DUP2 MLOAD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x9FB JUMPI DUP7 MLOAD DUP9 MSTORE PUSH1 0x20 SWAP8 DUP9 ADD SWAP8 SWAP1 SWAP7 ADD SWAP6 PUSH1 0x1 ADD PUSH2 0x9DD JUMP JUMPDEST POP SWAP1 MSTORE POP PUSH2 0x7DD SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 DIV PUSH1 0x20 DUP3 SUB SWAP2 POP DUP2 DUP4 ADD DUP3 DUP6 ADD DUP5 MLOAD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xA3A JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x1F NOT SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xA1B JUMP JUMPDEST POP DUP7 MSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E9 DUP3 CALLDATALOAD PUSH2 0xE12 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E9 DUP3 CALLDATALOAD PUSH2 0x986 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0xA6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA81 PUSH2 0xA7C DUP3 PUSH2 0xDE6 JUMP JUMPDEST PUSH2 0xDBF JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0xA9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAA8 DUP4 DUP3 DUP5 PUSH2 0xE7A JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xADA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAE6 DUP5 DUP3 DUP6 ADD PUSH2 0xA5D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB24 DUP6 DUP3 DUP7 ADD PUSH2 0xA5D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB4D DUP6 DUP3 DUP7 ADD PUSH2 0xA5D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB8D DUP6 DUP3 DUP7 ADD PUSH2 0xA5D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB4D DUP6 DUP3 DUP7 ADD PUSH2 0xA51 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD6 DUP7 DUP3 DUP8 ADD PUSH2 0xA5D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xBE7 DUP7 DUP3 DUP8 ADD PUSH2 0xA51 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xBF8 DUP7 DUP3 DUP8 ADD PUSH2 0xA45 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC3A DUP7 DUP3 DUP8 ADD PUSH2 0xA5D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC4B DUP7 DUP3 DUP8 ADD PUSH2 0xA51 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xBF8 DUP7 DUP3 DUP8 ADD PUSH2 0xA51 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC94 DUP7 DUP3 DUP8 ADD PUSH2 0xA5D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xCA5 DUP7 DUP3 DUP8 ADD PUSH2 0xA51 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBF8 DUP7 DUP3 DUP8 ADD PUSH2 0xA5D JUMP JUMPDEST PUSH2 0xCD7 DUP2 PUSH2 0xE12 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCD7 DUP2 PUSH2 0xE2B JUMP JUMPDEST PUSH2 0xCD7 DUP2 PUSH2 0xE30 JUMP JUMPDEST PUSH2 0xCD7 DUP2 PUSH2 0x986 JUMP JUMPDEST PUSH2 0xCD7 DUP2 PUSH2 0xE55 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD0C DUP3 PUSH2 0xE0E JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0xD20 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xE86 JUMP JUMPDEST PUSH2 0xD29 DUP2 PUSH2 0xEB6 JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x2B3 DUP3 DUP5 PUSH2 0xCCE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x2B3 DUP3 DUP5 PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x2B3 DUP3 DUP5 PUSH2 0xCEF JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x2B3 DUP3 DUP5 PUSH2 0xCF8 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x2E9 DUP2 DUP5 PUSH2 0xD01 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xD90 DUP2 DUP6 PUSH2 0xD01 JUMP JUMPDEST SWAP1 POP PUSH2 0x2E9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCCE JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xDB0 DUP2 DUP6 PUSH2 0xD01 JUMP JUMPDEST SWAP1 POP PUSH2 0x2E9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xDDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xDFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xEA1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xE89 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xEB0 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP STOP MLOAD SSTORE 0x49 MSTORE GASLIMIT DIFFICULTY STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 0x5e 0xf 0xdb SWAP1 BLOCKHASH 0xb2 0xc6 0xb1 SWAP5 SWAP13 0xbd AND PUSH4 0x3E85FD88 SWAP1 LT CALL 0xe1 0xd3 0xf9 0x2e 0x2e CODECOPY CALLDATACOPY 0xbc 0xaf 0xd JUMPI DUP2 PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
				"sourceMap": "685:5177:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;685:5177:0;;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052600436106100b95763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630945c63b81146100be57806329f00d5c146100f457806335997eaf146101225780633f2a25ec1461014f578063595fe5471461016f5780637356f5f31461019c5780637d0d772f146101ca57806382e2fa24146101ea57806384f8775814610217578063b79650a414610237578063be766f1b14610257578063e3a85ce414610284575b600080fd5b3480156100ca57600080fd5b506100de6100d9366004610aee565b6102a4565b6040516100eb9190610d44565b60405180910390f35b34801561010057600080fd5b5061011461010f366004610ab1565b6102b9565b6040516100eb929190610d7f565b34801561012e57600080fd5b5061014261013d366004610b57565b6102cd565b6040516100eb9190610d6e565b34801561015b57600080fd5b5061014261016a366004610b9e565b6102d9565b34801561017b57600080fd5b5061018f61018a366004610ab1565b6102f0565b6040516100eb9190610d60565b3480156101a857600080fd5b506101bc6101b7366004610ab1565b6102fb565b6040516100eb929190610d9f565b3480156101d657600080fd5b506101426101e5366004610c5c565b610308565b3480156101f657600080fd5b5061020a610205366004610b57565b610315565b6040516100eb9190610d36565b34801561022357600080fd5b50610142610232366004610c02565b610321565b34801561024357600080fd5b50610142610252366004610c02565b61032e565b34801561026357600080fd5b50610277610272366004610b57565b61033b565b6040516100eb9190610d52565b34801561029057600080fd5b5061027761029f366004610b57565b610347565b60006102b08383610353565b90505b92915050565b606060006102c68361039a565b9293915050565b60606102b08383610435565b60606102e684848461052e565b50825b9392505050565b60006102b3826105cb565b606060006102c68361065c565b60606102e684848461072d565b60006102b083836107e2565b60606102e684848461087a565b60606102e68484846108f9565b60006102b08383610904565b60006102b0838361033b565b60006020601f8451010460018101905060005b8181101561039257602081028581015190850151808214945084610388578392505b5050600101610366565b505092915050565b6000601482511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f52458152602001600080516020610ec18339815191528152509015156104195760405160e560020a62461bcd0281526004016104109190610d6e565b60405180910390fd5b506104288260148451036107e2565b8251601319019092525090565b60606000610443848461033b565b905060208301925080830184511015606060405190810160405280603081526020017f475245415445525f4f525f455155414c5f544f5f4e45535445445f425954455381526020017f5f4c454e4754485f5245515549524544000000000000000000000000000000008152509015156104d25760405160e560020a62461bcd0281526004016104109190610d6e565b50806040519080825280601f01601f191660200182016040528015610501578160200160208202803883390190505b50915061052761051083610986565b6020018461051d87610986565b0160200183610989565b5092915050565b8160140183511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f52458152602001600080516020610ec18339815191528152509015156105a45760405160e560020a62461bcd0281526004016104109190610d6e565b509101601401805173ffffffffffffffffffffffffffffffffffffffff1916919091189052565b6000600482511015606060405190810160405280602581526020017f475245415445525f4f525f455155414c5f544f5f345f4c454e4754485f52455181526020017f55495245440000000000000000000000000000000000000000000000000000008152509015156106535760405160e560020a62461bcd0281526004016104109190610d6e565b50506020015190565b600080825111606060405190810160405280602181526020017f475245415445525f5448414e5f5a45524f5f4c454e4754485f5245515549524581526020017f44000000000000000000000000000000000000000000000000000000000000008152509015156106e25760405160e560020a62461bcd0281526004016104109190610d6e565b508151829060001981019081106106f557fe5b0160200151825160001901909252507f0100000000000000000000000000000000000000000000000000000000000000908190040290565b8051826020010183511015606060405190810160405280603081526020017f475245415445525f4f525f455155414c5f544f5f4e45535445445f425954455381526020017f5f4c454e4754485f5245515549524544000000000000000000000000000000008152509015156107b85760405160e560020a62461bcd0281526004016104109190610d6e565b506107dd826107c685610986565b602001016107d383610986565b8351602001610989565b505050565b60008160140183511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f52458152602001600080516020610ec183398151915281525090151561085a5760405160e560020a62461bcd0281526004016104109190610d6e565b5050016014015173ffffffffffffffffffffffffffffffffffffffff1690565b8160200183511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f52458152602001600080516020610ec18339815191528152509015156108f05760405160e560020a62461bcd0281526004016104109190610d6e565b50910160200152565b6107dd83838361087a565b60008160200183511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f52458152602001600080516020610ec183398151915281525090151561097c5760405160e560020a62461bcd0281526004016104109190610d6e565b5050016020015190565b90565b60208110156109b3576001816020036101000a0380198351168185511680821786525050506107dd565b828214156109c0576107dd565b82821115610a065760208104602082039150818301828501815160005b848110156109fb5786518852602097880197909601956001016109dd565b509052506107dd9050565b60208104602082039150818301828501845160005b84811015610a3a5783518352601f199384019390920191600101610a1b565b508652505050505050565b60006102e98235610e12565b60006102e98235610986565b6000601f82018313610a6e57600080fd5b8135610a81610a7c82610de6565b610dbf565b91508082526020830160208301858383011115610a9d57600080fd5b610aa8838284610e7a565b50505092915050565b600060208284031215610ac357600080fd5b813567ffffffffffffffff811115610ada57600080fd5b610ae684828501610a5d565b949350505050565b60008060408385031215610b0157600080fd5b823567ffffffffffffffff811115610b1857600080fd5b610b2485828601610a5d565b925050602083013567ffffffffffffffff811115610b4157600080fd5b610b4d85828601610a5d565b9150509250929050565b60008060408385031215610b6a57600080fd5b823567ffffffffffffffff811115610b8157600080fd5b610b8d85828601610a5d565b9250506020610b4d85828601610a51565b600080600060608486031215610bb357600080fd5b833567ffffffffffffffff811115610bca57600080fd5b610bd686828701610a5d565b9350506020610be786828701610a51565b9250506040610bf886828701610a45565b9150509250925092565b600080600060608486031215610c1757600080fd5b833567ffffffffffffffff811115610c2e57600080fd5b610c3a86828701610a5d565b9350506020610c4b86828701610a51565b9250506040610bf886828701610a51565b600080600060608486031215610c7157600080fd5b833567ffffffffffffffff811115610c8857600080fd5b610c9486828701610a5d565b9350506020610ca586828701610a51565b925050604084013567ffffffffffffffff811115610cc257600080fd5b610bf886828701610a5d565b610cd781610e12565b82525050565b610cd781610e2b565b610cd781610e30565b610cd781610986565b610cd781610e55565b6000610d0c82610e0e565b808452610d20816020860160208601610e86565b610d2981610eb6565b9093016020019392505050565b602081016102b38284610cce565b602081016102b38284610cdd565b602081016102b38284610cef565b602081016102b38284610cf8565b602080825281016102e98184610d01565b60408082528101610d908185610d01565b90506102e96020830184610cce565b60408082528101610db08185610d01565b90506102e96020830184610ce6565b60405181810167ffffffffffffffff81118282101715610dde57600080fd5b604052919050565b600067ffffffffffffffff821115610dfd57600080fd5b506020601f91909101601f19160190565b5190565b73ffffffffffffffffffffffffffffffffffffffff1690565b151590565b7fff000000000000000000000000000000000000000000000000000000000000001690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b82818337506000910152565b60005b83811015610ea1578181015183820152602001610e89565b83811115610eb0576000848401525b50505050565b601f01601f19169056005155495245440000000000000000000000000000000000000000000000000000a265627a7a723058205e0fdb9040b2c6b1949cbd16633e85fd889010f1e1d3f92e2e3937bcaf0d57816c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB9 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x945C63B DUP2 EQ PUSH2 0xBE JUMPI DUP1 PUSH4 0x29F00D5C EQ PUSH2 0xF4 JUMPI DUP1 PUSH4 0x35997EAF EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x3F2A25EC EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0x595FE547 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0x7356F5F3 EQ PUSH2 0x19C JUMPI DUP1 PUSH4 0x7D0D772F EQ PUSH2 0x1CA JUMPI DUP1 PUSH4 0x82E2FA24 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x84F87758 EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0xB79650A4 EQ PUSH2 0x237 JUMPI DUP1 PUSH4 0xBE766F1B EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xE3A85CE4 EQ PUSH2 0x284 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDE PUSH2 0xD9 CALLDATASIZE PUSH1 0x4 PUSH2 0xAEE JUMP JUMPDEST PUSH2 0x2A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEB SWAP2 SWAP1 PUSH2 0xD44 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x100 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x114 PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0xAB1 JUMP JUMPDEST PUSH2 0x2B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEB SWAP3 SWAP2 SWAP1 PUSH2 0xD7F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x142 PUSH2 0x13D CALLDATASIZE PUSH1 0x4 PUSH2 0xB57 JUMP JUMPDEST PUSH2 0x2CD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEB SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x142 PUSH2 0x16A CALLDATASIZE PUSH1 0x4 PUSH2 0xB9E JUMP JUMPDEST PUSH2 0x2D9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18F PUSH2 0x18A CALLDATASIZE PUSH1 0x4 PUSH2 0xAB1 JUMP JUMPDEST PUSH2 0x2F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEB SWAP2 SWAP1 PUSH2 0xD60 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BC PUSH2 0x1B7 CALLDATASIZE PUSH1 0x4 PUSH2 0xAB1 JUMP JUMPDEST PUSH2 0x2FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEB SWAP3 SWAP2 SWAP1 PUSH2 0xD9F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x142 PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0xC5C JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20A PUSH2 0x205 CALLDATASIZE PUSH1 0x4 PUSH2 0xB57 JUMP JUMPDEST PUSH2 0x315 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEB SWAP2 SWAP1 PUSH2 0xD36 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x223 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x142 PUSH2 0x232 CALLDATASIZE PUSH1 0x4 PUSH2 0xC02 JUMP JUMPDEST PUSH2 0x321 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x243 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x142 PUSH2 0x252 CALLDATASIZE PUSH1 0x4 PUSH2 0xC02 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0xB57 JUMP JUMPDEST PUSH2 0x33B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEB SWAP2 SWAP1 PUSH2 0xD52 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x290 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x29F CALLDATASIZE PUSH1 0x4 PUSH2 0xB57 JUMP JUMPDEST PUSH2 0x347 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B0 DUP4 DUP4 PUSH2 0x353 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2C6 DUP4 PUSH2 0x39A JUMP JUMPDEST SWAP3 SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2B0 DUP4 DUP4 PUSH2 0x435 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2E6 DUP5 DUP5 DUP5 PUSH2 0x52E JUMP JUMPDEST POP DUP3 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B3 DUP3 PUSH2 0x5CB JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2C6 DUP4 PUSH2 0x65C JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2E6 DUP5 DUP5 DUP5 PUSH2 0x72D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B0 DUP4 DUP4 PUSH2 0x7E2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2E6 DUP5 DUP5 DUP5 PUSH2 0x87A JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2E6 DUP5 DUP5 DUP5 PUSH2 0x8F9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B0 DUP4 DUP4 PUSH2 0x904 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B0 DUP4 DUP4 PUSH2 0x33B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP5 MLOAD ADD DIV PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x392 JUMPI PUSH1 0x20 DUP2 MUL DUP6 DUP2 ADD MLOAD SWAP1 DUP6 ADD MLOAD DUP1 DUP3 EQ SWAP5 POP DUP5 PUSH2 0x388 JUMPI DUP4 SWAP3 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x366 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x14 DUP3 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xEC1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x419 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x428 DUP3 PUSH1 0x14 DUP5 MLOAD SUB PUSH2 0x7E2 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x13 NOT ADD SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x443 DUP5 DUP5 PUSH2 0x33B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP4 ADD SWAP3 POP DUP1 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F4E45535445445F4259544553 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5F4C454E4754485F524551554952454400000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x4D2 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x501 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x527 PUSH2 0x510 DUP4 PUSH2 0x986 JUMP JUMPDEST PUSH1 0x20 ADD DUP5 PUSH2 0x51D DUP8 PUSH2 0x986 JUMP JUMPDEST ADD PUSH1 0x20 ADD DUP4 PUSH2 0x989 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xEC1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x5A4 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST POP SWAP2 ADD PUSH1 0x14 ADD DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP2 SWAP1 SWAP2 XOR SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP3 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F345F4C454E4754485F524551 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5549524544000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x653 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST POP POP PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD GT PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F5448414E5F5A45524F5F4C454E4754485F52455155495245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4400000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x6E2 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST POP DUP2 MLOAD DUP3 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x6F5 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD DUP3 MLOAD PUSH1 0x0 NOT ADD SWAP1 SWAP3 MSTORE POP PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 SWAP1 DIV MUL SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 PUSH1 0x20 ADD ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F4E45535445445F4259544553 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5F4C454E4754485F524551554952454400000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x7B8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST POP PUSH2 0x7DD DUP3 PUSH2 0x7C6 DUP6 PUSH2 0x986 JUMP JUMPDEST PUSH1 0x20 ADD ADD PUSH2 0x7D3 DUP4 PUSH2 0x986 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x20 ADD PUSH2 0x989 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xEC1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x85A JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST POP POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xEC1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x8F0 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST POP SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH2 0x7DD DUP4 DUP4 DUP4 PUSH2 0x87A JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xEC1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x97C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xD6E JUMP JUMPDEST POP POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9B3 JUMPI PUSH1 0x1 DUP2 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP4 MLOAD AND DUP2 DUP6 MLOAD AND DUP1 DUP3 OR DUP7 MSTORE POP POP POP PUSH2 0x7DD JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0x9C0 JUMPI PUSH2 0x7DD JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0xA06 JUMPI PUSH1 0x20 DUP2 DIV PUSH1 0x20 DUP3 SUB SWAP2 POP DUP2 DUP4 ADD DUP3 DUP6 ADD DUP2 MLOAD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x9FB JUMPI DUP7 MLOAD DUP9 MSTORE PUSH1 0x20 SWAP8 DUP9 ADD SWAP8 SWAP1 SWAP7 ADD SWAP6 PUSH1 0x1 ADD PUSH2 0x9DD JUMP JUMPDEST POP SWAP1 MSTORE POP PUSH2 0x7DD SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 DIV PUSH1 0x20 DUP3 SUB SWAP2 POP DUP2 DUP4 ADD DUP3 DUP6 ADD DUP5 MLOAD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xA3A JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x1F NOT SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xA1B JUMP JUMPDEST POP DUP7 MSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E9 DUP3 CALLDATALOAD PUSH2 0xE12 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E9 DUP3 CALLDATALOAD PUSH2 0x986 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0xA6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA81 PUSH2 0xA7C DUP3 PUSH2 0xDE6 JUMP JUMPDEST PUSH2 0xDBF JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0xA9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAA8 DUP4 DUP3 DUP5 PUSH2 0xE7A JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xADA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAE6 DUP5 DUP3 DUP6 ADD PUSH2 0xA5D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB24 DUP6 DUP3 DUP7 ADD PUSH2 0xA5D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB4D DUP6 DUP3 DUP7 ADD PUSH2 0xA5D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB8D DUP6 DUP3 DUP7 ADD PUSH2 0xA5D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB4D DUP6 DUP3 DUP7 ADD PUSH2 0xA51 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD6 DUP7 DUP3 DUP8 ADD PUSH2 0xA5D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xBE7 DUP7 DUP3 DUP8 ADD PUSH2 0xA51 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xBF8 DUP7 DUP3 DUP8 ADD PUSH2 0xA45 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC3A DUP7 DUP3 DUP8 ADD PUSH2 0xA5D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC4B DUP7 DUP3 DUP8 ADD PUSH2 0xA51 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xBF8 DUP7 DUP3 DUP8 ADD PUSH2 0xA51 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC94 DUP7 DUP3 DUP8 ADD PUSH2 0xA5D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xCA5 DUP7 DUP3 DUP8 ADD PUSH2 0xA51 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBF8 DUP7 DUP3 DUP8 ADD PUSH2 0xA5D JUMP JUMPDEST PUSH2 0xCD7 DUP2 PUSH2 0xE12 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCD7 DUP2 PUSH2 0xE2B JUMP JUMPDEST PUSH2 0xCD7 DUP2 PUSH2 0xE30 JUMP JUMPDEST PUSH2 0xCD7 DUP2 PUSH2 0x986 JUMP JUMPDEST PUSH2 0xCD7 DUP2 PUSH2 0xE55 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD0C DUP3 PUSH2 0xE0E JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0xD20 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xE86 JUMP JUMPDEST PUSH2 0xD29 DUP2 PUSH2 0xEB6 JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x2B3 DUP3 DUP5 PUSH2 0xCCE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x2B3 DUP3 DUP5 PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x2B3 DUP3 DUP5 PUSH2 0xCEF JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x2B3 DUP3 DUP5 PUSH2 0xCF8 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x2E9 DUP2 DUP5 PUSH2 0xD01 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xD90 DUP2 DUP6 PUSH2 0xD01 JUMP JUMPDEST SWAP1 POP PUSH2 0x2E9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCCE JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xDB0 DUP2 DUP6 PUSH2 0xD01 JUMP JUMPDEST SWAP1 POP PUSH2 0x2E9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xDDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xDFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xEA1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xE89 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xEB0 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP STOP MLOAD SSTORE 0x49 MSTORE GASLIMIT DIFFICULTY STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 0x5e 0xf 0xdb SWAP1 BLOCKHASH 0xb2 0xc6 0xb1 SWAP5 SWAP13 0xbd AND PUSH4 0x3E85FD88 SWAP1 LT CALL 0xe1 0xd3 0xf9 0x2e 0x2e CODECOPY CALLDATACOPY 0xbc 0xaf 0xd JUMPI DUP2 PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
				"sourceMap": "685:5177:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1681:196;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1681:196:0;;;;;;;;;;;;;;;;;;;;;;;;;1280:188;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1280:188:0;;;;;;;;;;;;;;;;;;5153:216;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5153:216:0;;;;;;;;;;;;;;;;;2543:231;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2543:231:0;;;;;;;;;4787:168;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4787:168:0;;;;;;;;;;;;;;;;;904:181;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;904:181:0;;;;;;;;;;;;;;;;;;5628:232;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5628:232:0;;;;;;;;;2091:215;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2091:215:0;;;;;;;;;;;;;;;;;3461:231;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3461:231:0;;;;;;;;;4379;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4379:231:0;;;;;;;;;3010:215;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3010:215:0;;;;;;;;;;;;;;;;;3928;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3928:215:0;;;;;;;;;1681:196;1791:10;1825:23;1839:3;1844;1825:13;:23::i;:::-;1817:31;-1:-1:-1;1681:196:0;;;;;:::o;1280:188::-;1367:5;1381:14;1420:13;1431:1;1420:10;:13::i;:::-;1451:1;;1280:188;-1:-1:-1;;1280:188:0:o;5153:216::-;5276:19;5320;5330:1;5333:5;5320:9;:19::i;2543:231::-;2692:5;2720:29;2733:1;2736:5;2743;2720:12;:29::i;:::-;-1:-1:-1;2766:1:0;2543:231;;;;;;:::o;4787:168::-;4874:13;4912;4923:1;4912:10;:13::i;904:181::-;988:5;1002:13;1040:10;1048:1;1040:7;:10::i;5628:232::-;5780:5;5808:27;5819:1;5822:5;5829;5808:10;:27::i;2091:215::-;2216:14;2255:21;2267:1;2270:5;2255:11;:21::i;3461:231::-;3610:5;3638:29;3651:1;3654:5;3661;3638:12;:29::i;4379:231::-;4528:5;4556:29;4569:1;4572:5;4579;4556:12;:29::i;3010:215::-;3135:14;3174:21;3186:1;3189:5;3174:11;:21::i;3928:215::-;4053:14;4092:21;4104:1;4107:5;4092:11;:21::i;2723:921:1:-;2851:10;3004:4;2997;2991:3;2985:10;2981:21;2977:32;3134:3;3120:12;3116:22;3100:38;;3265:1;3251:356;3274:12;3271:1;3268:19;3251:356;;;3360:4;3353:12;;3344:22;;;3338:29;3405:22;;;3399:29;3454:20;;;;-1:-1:-1;3454:20:1;3491:2;;3563:12;3558:17;;3491:2;-1:-1:-1;;3301:1:1;3294:9;3251:356;;;-1:-1:-1;;2723:921:1;;;;:::o;2034:476::-;2117:14;2180:2;2168:1;:8;:14;;2196:38;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2196:38:1;;;2147:97;;;;;;;-1:-1:-1;;;;;2147:97:1;;;;;;;;;;;;;;;;;;;2296:29;2308:1;2322:2;2311:1;:8;:13;2296:11;:29::i;:::-;2428:8;;-1:-1:-1;;2424:17:1;2454;;;-1:-1:-1;2287:38:1;2034:476::o;9355:784::-;9474:19;9548:25;9576:21;9588:1;9591:5;9576:11;:21::i;:::-;9548:49;;9616:2;9607:11;;;;9752:17;9744:5;:25;9732:1;:8;:37;;9783:48;;;;;;;;;;;;;;;;;;;;;;;9711:130;;;;;;;-1:-1:-1;;;;;9711:130:1;;;;;;;;;;;9923:17;9913:28;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;9913:28:1;;9904:37;;9951:157;9972:21;9986:6;9972:13;:21::i;:::-;9996:2;9972:26;10057:5;10038:16;10052:1;10038:13;:16::i;:::-;:24;10065:2;10038:29;10081:17;9951:7;:157::i;:::-;9355:784;;;;;:::o;4979:1427::-;5154:5;5162:2;5154:10;5142:1;:8;:22;;5206:38;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;5206:38:1;;;5121:133;;;;;;;-1:-1:-1;;;;;5121:133:1;;;;;;;;;;-1:-1:-1;6190:13:1;;5501:2;6190:13;6184:20;;-1:-1:-1;;6180:93:1;6368:21;;;;6346:44;;5566:834::o;8851:306::-;8934:13;8996:1;8984;:8;:13;;9011:37;;;;;;;;;;;;;;;;;;;;;;;8963:95;;;;;;;-1:-1:-1;;;;;8963:95:1;;;;;;;;;;-1:-1:-1;;9114:2:1;9107:10;9101:17;;8851:306::o;1397:442::-;1477:13;1538:1;1527;:8;:12;1553:33;;;;;;;;;;;;;;;;;;;;;;;1506:90;;;;;;;-1:-1:-1;;;;;1506:90:1;;;;;;;;;;-1:-1:-1;1646:8:1;;1644:1;;-1:-1:-1;;1646:12:1;;;1644:15;;;;;;;;;;1758:8;;-1:-1:-1;;1754:16:1;1783:17;;;-1:-1:-1;1644:15:1;;;;;;;1397:442::o;10355:678::-;10652:5;:12;10608:5;10616:2;10608:10;:56;10596:1;:8;:68;;10678:48;;;;;;;;;;;;;;;;;;;;;;;10575:161;;;;;;;-1:-1:-1;;;;;10575:161:1;;;;;;;;;;;10780:246;10825:5;10801:16;10815:1;10801:13;:16::i;:::-;10820:2;10801:21;:29;10874:20;10888:5;10874:13;:20::i;:::-;10948:5;:12;10963:2;10948:17;10780:7;:246::i;:::-;10355:678;;;:::o;3858:884::-;3979:14;4042:5;4050:2;4042:10;4030:1;:8;:22;;4094:38;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;4094:38:1;;;4009:133;;;;;;;-1:-1:-1;;;;;4009:133:1;;;;;;;;;;-1:-1:-1;;4644:13:1;4389:2;4644:13;4638:20;4660:42;4634:69;;3858:884::o;7366:454::-;7541:5;7549:2;7541:10;7529:1;:8;:22;;7565:38;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7565:38:1;;;7508:105;;;;;;;-1:-1:-1;;;;;7508:105:1;;;;;;;;;;-1:-1:-1;7783:13:1;;7694:2;7783:13;7776:28;7762:52::o;8487:187::-;8629:38;8642:1;8645:5;8660;8629:12;:38::i;6642:488::-;6763:14;6826:5;6834:2;6826:10;6814:1;:8;:22;;6850:38;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;6850:38:1;;;6793:105;;;;;;;-1:-1:-1;;;;;6793:105:1;;;;;;;;;;-1:-1:-1;;7077:13:1;6979:2;7077:13;7071:20;;6642:488::o;787:218:2:-;954:5;787:218::o;1244:3897::-;1394:2;1385:6;:11;1381:3754;;;1683:1;1673:6;1669:2;1665:15;1660:3;1656:25;1652:33;1734:4;1730:9;1721:6;1715:13;1711:29;1783:4;1776;1770:11;1766:22;1824:1;1821;1818:8;1812:4;1805:22;1622:219;;;;;;1945:4;1935:6;:14;1931:59;;;1969:7;;1931:59;2679:4;2670:6;:13;2666:2459;;;2829:2;2821:6;2817:15;3125:2;3117:6;3113:15;3103:25;;3173:6;3165;3161:19;3223:6;3217:4;3213:17;3530:4;3524:11;3625:1;3611:219;3634:6;3631:1;3628:13;3611:219;;;3698:13;;3685:27;;3759:2;3795:13;;;;3747:15;;;;3655:1;3648:9;3611:219;;;-1:-1:-1;3899:18:2;;-1:-1:-1;2712:1223:2;;-1:-1:-1;2712:1223:2;;4099:2;4091:6;4087:15;4300:2;4292:6;4288:15;4278:25;;4348:6;4340;4336:19;4398:6;4392:4;4388:17;4708:6;4702:13;4805:1;4791:213;4814:6;4811:1;4808:13;4791:213;;;4878:11;;4865:25;;-1:-1:-1;;4923:13:2;;;;4969;;;;4835:1;4828:9;4791:213;;;-1:-1:-1;5074:19:2;;-1:-1:-1;;;1244:3897:2;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;130:118;;197:46;235:6;222:20;197:46;;256:440;;350:4;338:17;;334:27;-1:-1;324:2;;375:1;372;365:12;324:2;412:6;399:20;434:64;449:48;490:6;449:48;;;434:64;;;425:73;;518:6;511:5;504:21;554:4;546:6;542:17;587:4;580:5;576:16;622:3;613:6;608:3;604:16;601:25;598:2;;;639:1;636;629:12;598:2;649:41;683:6;678:3;673;649:41;;;317:379;;;;;;;;829:345;;942:2;930:9;921:7;917:23;913:32;910:2;;;958:1;955;948:12;910:2;993:31;;1044:18;1033:30;;1030:2;;;1076:1;1073;1066:12;1030:2;1096:62;1150:7;1141:6;1130:9;1126:22;1096:62;;;1086:72;904:270;-1:-1;;;;904:270;1181:574;;;1320:2;1308:9;1299:7;1295:23;1291:32;1288:2;;;1336:1;1333;1326:12;1288:2;1371:31;;1422:18;1411:30;;1408:2;;;1454:1;1451;1444:12;1408:2;1474:62;1528:7;1519:6;1508:9;1504:22;1474:62;;;1464:72;;1350:192;1601:2;1590:9;1586:18;1573:32;1625:18;1617:6;1614:30;1611:2;;;1657:1;1654;1647:12;1611:2;1677:62;1731:7;1722:6;1711:9;1707:22;1677:62;;;1667:72;;1552:193;1282:473;;;;;;1762:470;;;1892:2;1880:9;1871:7;1867:23;1863:32;1860:2;;;1908:1;1905;1898:12;1860:2;1943:31;;1994:18;1983:30;;1980:2;;;2026:1;2023;2016:12;1980:2;2046:62;2100:7;2091:6;2080:9;2076:22;2046:62;;;2036:72;;1922:192;2145:2;2163:53;2208:7;2199:6;2188:9;2184:22;2163:53;;2239:595;;;;2386:2;2374:9;2365:7;2361:23;2357:32;2354:2;;;2402:1;2399;2392:12;2354:2;2437:31;;2488:18;2477:30;;2474:2;;;2520:1;2517;2510:12;2474:2;2540:62;2594:7;2585:6;2574:9;2570:22;2540:62;;;2530:72;;2416:192;2639:2;2657:53;2702:7;2693:6;2682:9;2678:22;2657:53;;;2647:63;;2618:98;2747:2;2765:53;2810:7;2801:6;2790:9;2786:22;2765:53;;;2755:63;;2726:98;2348:486;;;;;;2841:595;;;;2988:2;2976:9;2967:7;2963:23;2959:32;2956:2;;;3004:1;3001;2994:12;2956:2;3039:31;;3090:18;3079:30;;3076:2;;;3122:1;3119;3112:12;3076:2;3142:62;3196:7;3187:6;3176:9;3172:22;3142:62;;;3132:72;;3018:192;3241:2;3259:53;3304:7;3295:6;3284:9;3280:22;3259:53;;;3249:63;;3220:98;3349:2;3367:53;3412:7;3403:6;3392:9;3388:22;3367:53;;3443:699;;;;3599:2;3587:9;3578:7;3574:23;3570:32;3567:2;;;3615:1;3612;3605:12;3567:2;3650:31;;3701:18;3690:30;;3687:2;;;3733:1;3730;3723:12;3687:2;3753:62;3807:7;3798:6;3787:9;3783:22;3753:62;;;3743:72;;3629:192;3852:2;3870:53;3915:7;3906:6;3895:9;3891:22;3870:53;;;3860:63;;3831:98;3988:2;3977:9;3973:18;3960:32;4012:18;4004:6;4001:30;3998:2;;;4044:1;4041;4034:12;3998:2;4064:62;4118:7;4109:6;4098:9;4094:22;4064:62;;4751:110;4824:31;4849:5;4824:31;;;4819:3;4812:44;4806:55;;;4868:101;4935:28;4957:5;4935:28;;4976:107;5047:30;5071:5;5047:30;;5090:110;5163:31;5188:5;5163:31;;5207:107;5278:30;5302:5;5278:30;;5321:297;;5421:38;5453:5;5421:38;;;5476:6;5471:3;5464:19;5488:63;5544:6;5537:4;5532:3;5528:14;5521:4;5514:5;5510:16;5488:63;;;5583:29;5605:6;5583:29;;;5563:50;;;5576:4;5563:50;;5401:217;-1:-1;;;5401:217;6041:193;6149:2;6134:18;;6163:61;6138:9;6197:6;6163:61;;6241:181;6343:2;6328:18;;6357:55;6332:9;6385:6;6357:55;;6429:193;6537:2;6522:18;;6551:61;6526:9;6585:6;6551:61;;6629:189;6735:2;6720:18;;6749:59;6724:9;6781:6;6749:59;;6825:277;6951:2;6965:47;;;6936:18;;7026:66;6936:18;7078:6;7026:66;;7109:378;7263:2;7277:47;;;7248:18;;7338:66;7248:18;7390:6;7338:66;;;7330:74;;7415:62;7473:2;7462:9;7458:18;7449:6;7415:62;;7494:374;7646:2;7660:47;;;7631:18;;7721:66;7631:18;7773:6;7721:66;;;7713:74;;7798:60;7854:2;7843:9;7839:18;7830:6;7798:60;;8355:256;8417:2;8411:9;8443:17;;;8518:18;8503:34;;8539:22;;;8500:62;8497:2;;;8575:1;8572;8565:12;8497:2;8591;8584:22;8395:216;;-1:-1;8395:216;8618:258;;8761:18;8753:6;8750:30;8747:2;;;8793:1;8790;8783:12;8747:2;-1:-1;8866:4;8837;8814:17;;;;-1:-1;;8810:33;8856:15;;8684:192;8883:91;8957:12;;8941:33;9076:128;9156:42;9145:54;;9128:76;9211:92;9284:13;9277:21;;9260:43;9310:151;9389:66;9378:78;;9361:100;9554:151;9633:66;9622:78;;9605:100;10106:145;10187:6;10182:3;10177;10164:30;-1:-1;10243:1;10225:16;;10218:27;10157:94;10260:268;10325:1;10332:101;10346:6;10343:1;10340:13;10332:101;;;10413:11;;;10407:18;10394:11;;;10387:39;10368:2;10361:10;10332:101;;;10448:6;10445:1;10442:13;10439:2;;;10513:1;10504:6;10499:3;10495:16;10488:27;10439:2;10309:219;;;;;10536:97;10624:2;10604:14;-1:-1;;10600:28;;10584:49"
			}
		}
	},
	"sources": {
		"current/test/TestLibBytes/TestLibBytes.sol": {
			"id": 0
		},
		"current/utils/LibBytes/LibBytes.sol": {
			"id": 1
		},
		"current/utils/LibMem/LibMem.sol": {
			"id": 2
		}
	},
	"sourceCodes": {
		"current/test/TestLibBytes/TestLibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/LibBytes/LibBytes.sol\";\n\ncontract TestLibBytes is\n    LibBytes\n{\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function publicPopByte(bytes memory b)\n        public\n        pure\n        returns (bytes memory, bytes1 result)\n    {\n        result = popByte(b);\n        return (b, result);\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function publicPopAddress(bytes memory b)\n        public\n        pure\n        returns (bytes memory, address result)\n    {\n        result = popAddress(b);\n        return (b, result);\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function publicAreBytesEqual(bytes memory lhs, bytes memory rhs)\n        public\n        pure\n        returns (bool equal)\n    {\n        equal = areBytesEqual(lhs, rhs);\n        return equal;\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function publicReadAddress(\n        bytes memory b,\n        uint256 index\n    )\n        public\n        pure\n        returns (address result)\n    {\n        result = readAddress(b, index);\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function publicWriteAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        public\n        pure\n        returns (bytes memory)\n    {\n        writeAddress(b, index, input);\n        return b;\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function publicReadBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        public\n        pure\n        returns (bytes32 result)\n    {\n        result = readBytes32(b, index);\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function publicWriteBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        public\n        pure\n        returns (bytes memory)\n    {\n        writeBytes32(b, index, input);\n        return b;\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function publicReadUint256(\n        bytes memory b,\n        uint256 index\n    )\n        public\n        pure\n        returns (uint256 result)\n    {\n        result = readUint256(b, index);\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function publicWriteUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        public\n        pure\n        returns (bytes memory)\n    {\n        writeUint256(b, index, input);\n        return b;\n    }\n\n    /// @dev Reads the first 4 bytes from a byte array of arbitrary length.\n    /// @param b Byte array to read first 4 bytes from.\n    /// @return First 4 bytes of data.\n    function publicReadFirst4(bytes memory b)\n        public\n        pure\n        returns (bytes4 result)\n    {\n        result = readFirst4(b);\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function publicReadBytes(\n        bytes memory b,\n        uint256 index\n    )\n        public\n        pure\n        returns (bytes memory result)\n    {\n        result = readBytes(b, index);\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    /// @return b Updated input byte array\n    function publicWriteBytes(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        public\n        pure\n        returns (bytes memory)\n    {\n        writeBytes(b, index, input);\n        return b;\n    }\n}\n",
		"current/utils/LibBytes/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../LibMem/LibMem.sol\";\n\ncontract LibBytes is\n    LibMem\n{\n\n    // Revert reasons\n    string constant GREATER_THAN_ZERO_LENGTH_REQUIRED = \"GREATER_THAN_ZERO_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\";\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            GREATER_THAN_ZERO_LENGTH_REQUIRED\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popAddress(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function areBytesEqual(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        assembly {\n            // Get the number of words occupied by <lhs>\n            let lenFullWords := div(add(mload(lhs), 0x1F), 0x20)\n\n            // Add 1 to the number of words, to account for the length field\n            lenFullWords := add(lenFullWords, 0x1)\n\n            // Test equality word-by-word.\n            // Terminates early if there is a mismatch.\n            for {let i := 0} lt(i, lenFullWords) {i := add(i, 1)} {\n                let lhsWord := mload(add(lhs, mul(i, 0x20)))\n                let rhsWord := mload(add(rhs, mul(i, 0x20)))\n                equal := eq(lhsWord, rhsWord)\n                if eq(equal, 0) {\n                    // Break\n                    i := lenFullWords\n                }\n            }\n       }\n\n       return equal;\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(mload(add(b, index)), 0xffffffffffffffffffffffff0000000000000000000000000000000000000000)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        return uint256(readBytes32(b, index));\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads the first 4 bytes from a byte array of arbitrary length.\n    /// @param b Byte array to read first 4 bytes from.\n    /// @return First 4 bytes of data.\n    function readFirst4(bytes memory b)\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= 4,\n            GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\n        );\n        assembly {\n            result := mload(add(b, 32))\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytes(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\n        );\n\n        // Allocate memory and copy value to result\n        result = new bytes(nestedBytesLength);\n        memCopy(\n            getMemAddress(result) + 32, // +32 skips array length\n            getMemAddress(b) + index + 32,\n            nestedBytesLength\n        );\n\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytes(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 /* 32 bytes to store length */ + input.length,\n            GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            getMemAddress(b) + 32 + index,  // +32 to skip length of <b>\n            getMemAddress(input),           // includes length of <input>\n            input.length + 32               // +32 bytes to store <input> length\n        );\n    }\n}\n",
		"current/utils/LibMem/LibMem.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibMem\n{\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array.\n    function getMemAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // Record the total number of full words to copy\n                    let nWords := div(length, 32)\n\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    for {let i := 0} lt(i, nWords) {i := add(i, 1)} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // Record the total number of full words to copy\n                    let nWords := div(length, 32)\n\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    for {let i := 0} lt(i, nWords) {i := add(i, 1)} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n}\n"
	},
	"sourceTreeHashHex": "0x6e06fbbf9746c25efd57166887cf87cfb59d9d78a92071fdd2700217165ebb99",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.4.24+commit.e67f0147.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"networks": {}
}