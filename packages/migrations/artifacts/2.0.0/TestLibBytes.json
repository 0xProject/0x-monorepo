{
	"schemaVersion": "2.0.0",
	"contractName": "TestLibBytes",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					}
				],
				"name": "publicPopLastByte",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					},
					{
						"name": "result",
						"type": "bytes1"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "lhs",
						"type": "bytes"
					},
					{
						"name": "rhs",
						"type": "bytes"
					}
				],
				"name": "publicAreBytesEqual",
				"outputs": [
					{
						"name": "equal",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "dest",
						"type": "bytes"
					},
					{
						"name": "source",
						"type": "bytes"
					}
				],
				"name": "publicDeepCopyBytes",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "publicReadBytes",
				"outputs": [
					{
						"name": "result",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					},
					{
						"name": "input",
						"type": "address"
					}
				],
				"name": "publicWriteAddress",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					}
				],
				"name": "publicReadFirst4",
				"outputs": [
					{
						"name": "result",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					},
					{
						"name": "input",
						"type": "bytes"
					}
				],
				"name": "publicWriteBytes",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "publicReadAddress",
				"outputs": [
					{
						"name": "result",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					},
					{
						"name": "input",
						"type": "bytes32"
					}
				],
				"name": "publicWriteBytes32",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					}
				],
				"name": "publicPopLast20Bytes",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					},
					{
						"name": "result",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					},
					{
						"name": "input",
						"type": "uint256"
					}
				],
				"name": "publicWriteUint256",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "publicReadBytes32",
				"outputs": [
					{
						"name": "result",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "b",
						"type": "bytes"
					},
					{
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "publicReadUint256",
				"outputs": [
					{
						"name": "result",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFFE DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC4 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x301D5E1 DUP2 EQ PUSH2 0xC9 JUMPI DUP1 PUSH4 0x945C63B EQ PUSH2 0x100 JUMPI DUP1 PUSH4 0x18C535D9 EQ PUSH2 0x12D JUMPI DUP1 PUSH4 0x35997EAF EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x3F2A25EC EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0x595FE547 EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x7D0D772F EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0x82E2FA24 EQ PUSH2 0x1E7 JUMPI DUP1 PUSH4 0x84F87758 EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0xA4B19654 EQ PUSH2 0x234 JUMPI DUP1 PUSH4 0xB79650A4 EQ PUSH2 0x262 JUMPI DUP1 PUSH4 0xBE766F1B EQ PUSH2 0x282 JUMPI DUP1 PUSH4 0xE3A85CE4 EQ PUSH2 0x2AF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0xE4 CALLDATASIZE PUSH1 0x4 PUSH2 0xB95 JUMP JUMPDEST PUSH2 0x2CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF7 SWAP3 SWAP2 SWAP1 PUSH2 0xE83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x120 PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0xBD2 JUMP JUMPDEST PUSH2 0x2E3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF7 SWAP2 SWAP1 PUSH2 0xE28 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x148 CALLDATASIZE PUSH1 0x4 PUSH2 0xBD2 JUMP JUMPDEST PUSH2 0x2F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF7 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0xC3B JUMP JUMPDEST PUSH2 0x30B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0xC82 JUMP JUMPDEST PUSH2 0x317 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BA PUSH2 0x1B5 CALLDATASIZE PUSH1 0x4 PUSH2 0xB95 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF7 SWAP2 SWAP1 PUSH2 0xE44 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0xD40 JUMP JUMPDEST PUSH2 0x339 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x202 CALLDATASIZE PUSH1 0x4 PUSH2 0xC3B JUMP JUMPDEST PUSH2 0x346 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF7 SWAP2 SWAP1 PUSH2 0xE1A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x220 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x22F CALLDATASIZE PUSH1 0x4 PUSH2 0xCE6 JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x254 PUSH2 0x24F CALLDATASIZE PUSH1 0x4 PUSH2 0xB95 JUMP JUMPDEST PUSH2 0x35F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF7 SWAP3 SWAP2 SWAP1 PUSH2 0xE63 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x27D CALLDATASIZE PUSH1 0x4 PUSH2 0xCE6 JUMP JUMPDEST PUSH2 0x36C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x29D CALLDATASIZE PUSH1 0x4 PUSH2 0xC3B JUMP JUMPDEST PUSH2 0x379 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF7 SWAP2 SWAP1 PUSH2 0xE36 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x2CA CALLDATASIZE PUSH1 0x4 PUSH2 0xC3B JUMP JUMPDEST PUSH2 0x385 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2DC DUP4 PUSH2 0x391 JUMP JUMPDEST SWAP3 SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EF DUP4 DUP4 PUSH2 0x46B JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x304 DUP4 DUP4 PUSH2 0x4B2 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2EF DUP4 DUP4 PUSH2 0x55D JUMP JUMPDEST PUSH1 0x60 PUSH2 0x324 DUP5 DUP5 DUP5 PUSH2 0x656 JUMP JUMPDEST POP DUP3 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F2 DUP3 PUSH2 0x6F3 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x324 DUP5 DUP5 DUP5 PUSH2 0x784 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EF DUP4 DUP4 PUSH2 0x834 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x324 DUP5 DUP5 DUP5 PUSH2 0x8CC JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2DC DUP4 PUSH2 0x94B JUMP JUMPDEST PUSH1 0x60 PUSH2 0x324 DUP5 DUP5 DUP5 PUSH2 0x9DD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EF DUP4 DUP4 PUSH2 0x9E8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EF DUP4 DUP4 PUSH2 0x379 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD GT PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F5448414E5F5A45524F5F4C454E4754485F52455155495245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4400000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x420 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP2 MLOAD DUP3 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x433 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD DUP3 MLOAD PUSH1 0x0 NOT ADD SWAP1 SWAP3 MSTORE POP PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 SWAP1 DIV MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP5 MLOAD ADD DIV PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4AA JUMPI PUSH1 0x20 DUP2 MUL DUP6 DUP2 ADD MLOAD SWAP1 DUP6 ADD MLOAD DUP1 DUP3 EQ SWAP5 POP DUP5 PUSH2 0x4A0 JUMPI DUP4 SWAP3 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x47E JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD DUP3 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x30 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F534F555243455F4259544553 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5F4C454E4754485F524551554952454400000000000000000000000000000000 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP3 GT ISZERO PUSH2 0x536 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST POP PUSH2 0x558 PUSH2 0x543 DUP5 PUSH2 0xA6A JUMP JUMPDEST PUSH1 0x20 ADD PUSH2 0x54F DUP5 PUSH2 0xA6A JUMP JUMPDEST PUSH1 0x20 ADD DUP4 PUSH2 0xA6D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x56B DUP5 DUP5 PUSH2 0x379 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP4 ADD SWAP3 POP DUP1 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F4E45535445445F4259544553 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5F4C454E4754485F524551554952454400000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x5FA JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x629 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x64F PUSH2 0x638 DUP4 PUSH2 0xA6A JUMP JUMPDEST PUSH1 0x20 ADD DUP5 PUSH2 0x645 DUP8 PUSH2 0xA6A JUMP JUMPDEST ADD PUSH1 0x20 ADD DUP4 PUSH2 0xA6D JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xFA5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x6CC JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST POP SWAP2 ADD PUSH1 0x14 ADD DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP2 SWAP1 SWAP2 XOR SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP3 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F345F4C454E4754485F524551 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5549524544000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x77B JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST POP POP PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 PUSH1 0x20 ADD ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F4E45535445445F4259544553 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5F4C454E4754485F524551554952454400000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x80F JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST POP PUSH2 0x558 DUP3 PUSH2 0x81D DUP6 PUSH2 0xA6A JUMP JUMPDEST PUSH1 0x20 ADD ADD PUSH2 0x82A DUP4 PUSH2 0xA6A JUMP JUMPDEST DUP4 MLOAD PUSH1 0x20 ADD PUSH2 0xA6D JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xFA5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x8AC JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST POP POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xFA5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x942 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST POP SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x14 DUP3 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xFA5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x9C1 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST POP PUSH2 0x9D0 DUP3 PUSH1 0x14 DUP5 MLOAD SUB PUSH2 0x834 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x13 NOT ADD SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 DUP4 PUSH2 0x8CC JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xFA5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0xA60 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST POP POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA97 JUMPI PUSH1 0x1 DUP2 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP4 MLOAD AND DUP2 DUP6 MLOAD AND DUP1 DUP3 OR DUP7 MSTORE POP POP POP PUSH2 0x558 JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0xAA4 JUMPI PUSH2 0x558 JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0xAEA JUMPI PUSH1 0x20 DUP2 DIV PUSH1 0x20 DUP3 SUB SWAP2 POP DUP2 DUP4 ADD DUP3 DUP6 ADD DUP2 MLOAD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xADF JUMPI DUP7 MLOAD DUP9 MSTORE PUSH1 0x20 SWAP8 DUP9 ADD SWAP8 SWAP1 SWAP7 ADD SWAP6 PUSH1 0x1 ADD PUSH2 0xAC1 JUMP JUMPDEST POP SWAP1 MSTORE POP PUSH2 0x558 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 DIV PUSH1 0x20 DUP3 SUB SWAP2 POP DUP2 DUP4 ADD DUP3 DUP6 ADD DUP5 MLOAD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xB1E JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x1F NOT SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xAFF JUMP JUMPDEST POP DUP7 MSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327 DUP3 CALLDATALOAD PUSH2 0xEF6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327 DUP3 CALLDATALOAD PUSH2 0xA6A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0xB52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xB65 PUSH2 0xB60 DUP3 PUSH2 0xECA JUMP JUMPDEST PUSH2 0xEA3 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0xB81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB8C DUP4 DUP3 DUP5 PUSH2 0xF5E JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBCA DUP5 DUP3 DUP6 ADD PUSH2 0xB41 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC08 DUP6 DUP3 DUP7 ADD PUSH2 0xB41 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC31 DUP6 DUP3 DUP7 ADD PUSH2 0xB41 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC71 DUP6 DUP3 DUP7 ADD PUSH2 0xB41 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC31 DUP6 DUP3 DUP7 ADD PUSH2 0xB35 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCBA DUP7 DUP3 DUP8 ADD PUSH2 0xB41 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xCCB DUP7 DUP3 DUP8 ADD PUSH2 0xB35 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCDC DUP7 DUP3 DUP8 ADD PUSH2 0xB29 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xCFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD1E DUP7 DUP3 DUP8 ADD PUSH2 0xB41 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xD2F DUP7 DUP3 DUP8 ADD PUSH2 0xB35 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCDC DUP7 DUP3 DUP8 ADD PUSH2 0xB35 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xD55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD78 DUP7 DUP3 DUP8 ADD PUSH2 0xB41 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xD89 DUP7 DUP3 DUP8 ADD PUSH2 0xB35 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xDA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCDC DUP7 DUP3 DUP8 ADD PUSH2 0xB41 JUMP JUMPDEST PUSH2 0xDBB DUP2 PUSH2 0xEF6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xDBB DUP2 PUSH2 0xF0F JUMP JUMPDEST PUSH2 0xDBB DUP2 PUSH2 0xF14 JUMP JUMPDEST PUSH2 0xDBB DUP2 PUSH2 0xA6A JUMP JUMPDEST PUSH2 0xDBB DUP2 PUSH2 0xF39 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDF0 DUP3 PUSH2 0xEF2 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0xE04 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xF6A JUMP JUMPDEST PUSH2 0xE0D DUP2 PUSH2 0xF9A JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x2F2 DUP3 DUP5 PUSH2 0xDB2 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x2F2 DUP3 DUP5 PUSH2 0xDC1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x2F2 DUP3 DUP5 PUSH2 0xDD3 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x2F2 DUP3 DUP5 PUSH2 0xDDC JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x327 DUP2 DUP5 PUSH2 0xDE5 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xE74 DUP2 DUP6 PUSH2 0xDE5 JUMP JUMPDEST SWAP1 POP PUSH2 0x327 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xDB2 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xE94 DUP2 DUP6 PUSH2 0xDE5 JUMP JUMPDEST SWAP1 POP PUSH2 0x327 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xDCA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xEC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xEE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF85 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xF6D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xF94 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP STOP MLOAD SSTORE 0x49 MSTORE GASLIMIT DIFFICULTY STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 BLOCKHASH SDIV GAS 0xd9 PUSH19 0x2AD351A587BBBFAB94EE318794712D3F2AF538 0xd7 LOG4 0xd5 PUSH16 0x8D53B9A56C6578706572696D656E7461 PUSH13 0xF5003700000000000000000000 ",
				"sourceMap": "685:5658:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;685:5658:0;;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC4 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x301D5E1 DUP2 EQ PUSH2 0xC9 JUMPI DUP1 PUSH4 0x945C63B EQ PUSH2 0x100 JUMPI DUP1 PUSH4 0x18C535D9 EQ PUSH2 0x12D JUMPI DUP1 PUSH4 0x35997EAF EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x3F2A25EC EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0x595FE547 EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x7D0D772F EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0x82E2FA24 EQ PUSH2 0x1E7 JUMPI DUP1 PUSH4 0x84F87758 EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0xA4B19654 EQ PUSH2 0x234 JUMPI DUP1 PUSH4 0xB79650A4 EQ PUSH2 0x262 JUMPI DUP1 PUSH4 0xBE766F1B EQ PUSH2 0x282 JUMPI DUP1 PUSH4 0xE3A85CE4 EQ PUSH2 0x2AF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0xE4 CALLDATASIZE PUSH1 0x4 PUSH2 0xB95 JUMP JUMPDEST PUSH2 0x2CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF7 SWAP3 SWAP2 SWAP1 PUSH2 0xE83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x120 PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0xBD2 JUMP JUMPDEST PUSH2 0x2E3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF7 SWAP2 SWAP1 PUSH2 0xE28 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x148 CALLDATASIZE PUSH1 0x4 PUSH2 0xBD2 JUMP JUMPDEST PUSH2 0x2F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF7 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0xC3B JUMP JUMPDEST PUSH2 0x30B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0xC82 JUMP JUMPDEST PUSH2 0x317 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BA PUSH2 0x1B5 CALLDATASIZE PUSH1 0x4 PUSH2 0xB95 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF7 SWAP2 SWAP1 PUSH2 0xE44 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0xD40 JUMP JUMPDEST PUSH2 0x339 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x202 CALLDATASIZE PUSH1 0x4 PUSH2 0xC3B JUMP JUMPDEST PUSH2 0x346 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF7 SWAP2 SWAP1 PUSH2 0xE1A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x220 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x22F CALLDATASIZE PUSH1 0x4 PUSH2 0xCE6 JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x254 PUSH2 0x24F CALLDATASIZE PUSH1 0x4 PUSH2 0xB95 JUMP JUMPDEST PUSH2 0x35F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF7 SWAP3 SWAP2 SWAP1 PUSH2 0xE63 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x27D CALLDATASIZE PUSH1 0x4 PUSH2 0xCE6 JUMP JUMPDEST PUSH2 0x36C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x29D CALLDATASIZE PUSH1 0x4 PUSH2 0xC3B JUMP JUMPDEST PUSH2 0x379 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF7 SWAP2 SWAP1 PUSH2 0xE36 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x2CA CALLDATASIZE PUSH1 0x4 PUSH2 0xC3B JUMP JUMPDEST PUSH2 0x385 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2DC DUP4 PUSH2 0x391 JUMP JUMPDEST SWAP3 SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EF DUP4 DUP4 PUSH2 0x46B JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x304 DUP4 DUP4 PUSH2 0x4B2 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2EF DUP4 DUP4 PUSH2 0x55D JUMP JUMPDEST PUSH1 0x60 PUSH2 0x324 DUP5 DUP5 DUP5 PUSH2 0x656 JUMP JUMPDEST POP DUP3 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F2 DUP3 PUSH2 0x6F3 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x324 DUP5 DUP5 DUP5 PUSH2 0x784 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EF DUP4 DUP4 PUSH2 0x834 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x324 DUP5 DUP5 DUP5 PUSH2 0x8CC JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2DC DUP4 PUSH2 0x94B JUMP JUMPDEST PUSH1 0x60 PUSH2 0x324 DUP5 DUP5 DUP5 PUSH2 0x9DD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EF DUP4 DUP4 PUSH2 0x9E8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EF DUP4 DUP4 PUSH2 0x379 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD GT PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F5448414E5F5A45524F5F4C454E4754485F52455155495245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4400000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x420 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP2 MLOAD DUP3 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x433 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD DUP3 MLOAD PUSH1 0x0 NOT ADD SWAP1 SWAP3 MSTORE POP PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 SWAP1 DIV MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP5 MLOAD ADD DIV PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4AA JUMPI PUSH1 0x20 DUP2 MUL DUP6 DUP2 ADD MLOAD SWAP1 DUP6 ADD MLOAD DUP1 DUP3 EQ SWAP5 POP DUP5 PUSH2 0x4A0 JUMPI DUP4 SWAP3 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x47E JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD DUP3 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x30 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F534F555243455F4259544553 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5F4C454E4754485F524551554952454400000000000000000000000000000000 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP3 GT ISZERO PUSH2 0x536 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST POP PUSH2 0x558 PUSH2 0x543 DUP5 PUSH2 0xA6A JUMP JUMPDEST PUSH1 0x20 ADD PUSH2 0x54F DUP5 PUSH2 0xA6A JUMP JUMPDEST PUSH1 0x20 ADD DUP4 PUSH2 0xA6D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x56B DUP5 DUP5 PUSH2 0x379 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP4 ADD SWAP3 POP DUP1 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F4E45535445445F4259544553 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5F4C454E4754485F524551554952454400000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x5FA JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x629 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x64F PUSH2 0x638 DUP4 PUSH2 0xA6A JUMP JUMPDEST PUSH1 0x20 ADD DUP5 PUSH2 0x645 DUP8 PUSH2 0xA6A JUMP JUMPDEST ADD PUSH1 0x20 ADD DUP4 PUSH2 0xA6D JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xFA5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x6CC JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST POP SWAP2 ADD PUSH1 0x14 ADD DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP2 SWAP1 SWAP2 XOR SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP3 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F345F4C454E4754485F524551 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5549524544000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x77B JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST POP POP PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 PUSH1 0x20 ADD ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F4E45535445445F4259544553 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5F4C454E4754485F524551554952454400000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x80F JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST POP PUSH2 0x558 DUP3 PUSH2 0x81D DUP6 PUSH2 0xA6A JUMP JUMPDEST PUSH1 0x20 ADD ADD PUSH2 0x82A DUP4 PUSH2 0xA6A JUMP JUMPDEST DUP4 MLOAD PUSH1 0x20 ADD PUSH2 0xA6D JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xFA5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x8AC JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST POP POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xFA5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x942 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST POP SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x14 DUP3 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xFA5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x9C1 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST POP PUSH2 0x9D0 DUP3 PUSH1 0x14 DUP5 MLOAD SUB PUSH2 0x834 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x13 NOT ADD SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 DUP4 PUSH2 0x8CC JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xFA5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0xA60 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP2 SWAP1 PUSH2 0xE52 JUMP JUMPDEST POP POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA97 JUMPI PUSH1 0x1 DUP2 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP4 MLOAD AND DUP2 DUP6 MLOAD AND DUP1 DUP3 OR DUP7 MSTORE POP POP POP PUSH2 0x558 JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0xAA4 JUMPI PUSH2 0x558 JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0xAEA JUMPI PUSH1 0x20 DUP2 DIV PUSH1 0x20 DUP3 SUB SWAP2 POP DUP2 DUP4 ADD DUP3 DUP6 ADD DUP2 MLOAD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xADF JUMPI DUP7 MLOAD DUP9 MSTORE PUSH1 0x20 SWAP8 DUP9 ADD SWAP8 SWAP1 SWAP7 ADD SWAP6 PUSH1 0x1 ADD PUSH2 0xAC1 JUMP JUMPDEST POP SWAP1 MSTORE POP PUSH2 0x558 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 DIV PUSH1 0x20 DUP3 SUB SWAP2 POP DUP2 DUP4 ADD DUP3 DUP6 ADD DUP5 MLOAD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xB1E JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x1F NOT SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xAFF JUMP JUMPDEST POP DUP7 MSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327 DUP3 CALLDATALOAD PUSH2 0xEF6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327 DUP3 CALLDATALOAD PUSH2 0xA6A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0xB52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xB65 PUSH2 0xB60 DUP3 PUSH2 0xECA JUMP JUMPDEST PUSH2 0xEA3 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0xB81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB8C DUP4 DUP3 DUP5 PUSH2 0xF5E JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBCA DUP5 DUP3 DUP6 ADD PUSH2 0xB41 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC08 DUP6 DUP3 DUP7 ADD PUSH2 0xB41 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC31 DUP6 DUP3 DUP7 ADD PUSH2 0xB41 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC71 DUP6 DUP3 DUP7 ADD PUSH2 0xB41 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC31 DUP6 DUP3 DUP7 ADD PUSH2 0xB35 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCBA DUP7 DUP3 DUP8 ADD PUSH2 0xB41 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xCCB DUP7 DUP3 DUP8 ADD PUSH2 0xB35 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCDC DUP7 DUP3 DUP8 ADD PUSH2 0xB29 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xCFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD1E DUP7 DUP3 DUP8 ADD PUSH2 0xB41 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xD2F DUP7 DUP3 DUP8 ADD PUSH2 0xB35 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCDC DUP7 DUP3 DUP8 ADD PUSH2 0xB35 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xD55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD78 DUP7 DUP3 DUP8 ADD PUSH2 0xB41 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xD89 DUP7 DUP3 DUP8 ADD PUSH2 0xB35 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xDA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCDC DUP7 DUP3 DUP8 ADD PUSH2 0xB41 JUMP JUMPDEST PUSH2 0xDBB DUP2 PUSH2 0xEF6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xDBB DUP2 PUSH2 0xF0F JUMP JUMPDEST PUSH2 0xDBB DUP2 PUSH2 0xF14 JUMP JUMPDEST PUSH2 0xDBB DUP2 PUSH2 0xA6A JUMP JUMPDEST PUSH2 0xDBB DUP2 PUSH2 0xF39 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDF0 DUP3 PUSH2 0xEF2 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0xE04 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xF6A JUMP JUMPDEST PUSH2 0xE0D DUP2 PUSH2 0xF9A JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x2F2 DUP3 DUP5 PUSH2 0xDB2 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x2F2 DUP3 DUP5 PUSH2 0xDC1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x2F2 DUP3 DUP5 PUSH2 0xDD3 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x2F2 DUP3 DUP5 PUSH2 0xDDC JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x327 DUP2 DUP5 PUSH2 0xDE5 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xE74 DUP2 DUP6 PUSH2 0xDE5 JUMP JUMPDEST SWAP1 POP PUSH2 0x327 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xDB2 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xE94 DUP2 DUP6 PUSH2 0xDE5 JUMP JUMPDEST SWAP1 POP PUSH2 0x327 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xDCA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xEC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xEE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF85 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xF6D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xF94 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP STOP MLOAD SSTORE 0x49 MSTORE GASLIMIT DIFFICULTY STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 BLOCKHASH SDIV GAS 0xd9 PUSH19 0x2AD351A587BBBFAB94EE318794712D3F2AF538 0xd7 LOG4 0xd5 PUSH16 0x8D53B9A56C6578706572696D656E7461 PUSH13 0xF5003700000000000000000000 ",
				"sourceMap": "685:5658:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;904:189;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;904:189:0;;;;;;;;;;;;;;;;;;;;;;;;;;1697:196;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1697:196:0;;;;;;;;;;;;;;;;;2139:219;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2139:219:0;;;;;;;;;;;;;;;;;5634:216;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5634:216:0;;;;;;;;;3024:231;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3024:231:0;;;;;;;;;5268:168;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5268:168:0;;;;;;;;;;;;;;;;;6109:232;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;6109:232:0;;;;;;;;;2572:215;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2572:215:0;;;;;;;;;;;;;;;;;3942:231;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3942:231:0;;;;;;;;;1288:196;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1288:196:0;;;;;;;;;;;;;;;;;;4860:231;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4860:231:0;;;;;;;;;3491:215;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3491:215:0;;;;;;;;;;;;;;;;;4409;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4409:215:0;;;;;;;;;904:189;992:5;1006:13;1044:14;1056:1;1044:11;:14::i;:::-;1076:1;;904:189;-1:-1:-1;;904:189:0:o;1697:196::-;1807:10;1841:23;1855:3;1860;1841:13;:23::i;:::-;1833:31;-1:-1:-1;1697:196:0;;;;;:::o;2139:219::-;2275:5;2303:27;2317:4;2323:6;2303:13;:27::i;:::-;-1:-1:-1;2347:4:0;;2139:219;-1:-1:-1;2139:219:0:o;5634:216::-;5757:19;5801;5811:1;5814:5;5801:9;:19::i;3024:231::-;3173:5;3201:29;3214:1;3217:5;3224;3201:12;:29::i;:::-;-1:-1:-1;3247:1:0;3024:231;;;;;;:::o;5268:168::-;5355:13;5393;5404:1;5393:10;:13::i;6109:232::-;6261:5;6289:27;6300:1;6303:5;6310;6289:10;:27::i;2572:215::-;2697:14;2736:21;2748:1;2751:5;2736:11;:21::i;3942:231::-;4091:5;4119:29;4132:1;4135:5;4142;4119:12;:29::i;1288:196::-;1379:5;1393:14;1432:17;1447:1;1432:14;:17::i;4860:231::-;5009:5;5037:29;5050:1;5053:5;5060;5037:12;:29::i;3491:215::-;3616:14;3655:21;3667:1;3670:5;3655:11;:21::i;4409:215::-;4534:14;4573:21;4585:1;4588:5;4573:11;:21::i;1520:446:1:-;1604:13;1665:1;1654;:8;:12;1680:33;;;;;;;;;;;;;;;;;;;;;;;1633:90;;;;;;;-1:-1:-1;;;;;1633:90:1;;;;;;;;;;;;;;;;;;-1:-1:-1;1773:8:1;;1771:1;;-1:-1:-1;;1773:12:1;;;1771:15;;;;;;;;;;1885:8;;-1:-1:-1;;1881:16:1;1910:17;;;-1:-1:-1;1771:15:1;;;;;;;1520:446::o;10243:921::-;10371:10;10524:4;10517;10511:3;10505:10;10501:21;10497:32;10654:3;10640:12;10636:22;10620:38;;10785:1;10771:356;10794:12;10791:1;10788:19;10771:356;;;10880:4;10873:12;;10864:22;;;10858:29;10925:22;;;10919:29;10974:20;;;;-1:-1:-1;10974:20:1;11011:2;;11083:12;11078:17;;11011:2;-1:-1:-1;;10821:1:1;10814:9;10771:356;;;-1:-1:-1;;10243:921:1;;;;:::o;11410:578::-;11559:13;;11687:11;;11725:48;;;;;;;;;;;;;;;;;;;;;;;;;11687:24;-1:-1:-1;11687:24:1;11666:117;;;;-1:-1:-1;;;;;11666:117:1;;;;;;;;;;;11793:188;11814:19;11828:4;11814:13;:19::i;:::-;11836:2;11814:24;11887:21;11901:6;11887:13;:21::i;:::-;11911:2;11887:26;11962:9;11793:7;:188::i;:::-;11410:578;;;:::o;8352:784::-;8471:19;8545:25;8573:21;8585:1;8588:5;8573:11;:21::i;:::-;8545:49;;8613:2;8604:11;;;;8749:17;8741:5;:25;8729:1;:8;:37;;8780:48;;;;;;;;;;;;;;;;;;;;;;;8708:130;;;;;;;-1:-1:-1;;;;;8708:130:1;;;;;;;;;;;8920:17;8910:28;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;8910:28:1;;8901:37;;8948:157;8969:21;8983:6;8969:13;:21::i;:::-;8993:2;8969:26;9054:5;9035:16;9049:1;9035:13;:16::i;:::-;:24;9062:2;9035:29;9078:17;8948:7;:157::i;:::-;8352:784;;;;;:::o;3976:1427::-;4151:5;4159:2;4151:10;4139:1;:8;:22;;4203:38;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;4203:38:1;;;4118:133;;;;;;;-1:-1:-1;;;;;4118:133:1;;;;;;;;;;-1:-1:-1;5187:13:1;;4498:2;5187:13;5181:20;;-1:-1:-1;;5177:93:1;5365:21;;;;5343:44;;4563:834::o;7848:306::-;7931:13;7993:1;7981;:8;:13;;8008:37;;;;;;;;;;;;;;;;;;;;;;;7960:95;;;;;;;-1:-1:-1;;;;;7960:95:1;;;;;;;;;;-1:-1:-1;;8111:2:1;8104:10;8098:17;;7848:306::o;9352:678::-;9649:5;:12;9605:5;9613:2;9605:10;:56;9593:1;:8;:68;;9675:48;;;;;;;;;;;;;;;;;;;;;;;9572:161;;;;;;;-1:-1:-1;;;;;9572:161:1;;;;;;;;;;;9777:246;9822:5;9798:16;9812:1;9798:13;:16::i;:::-;9817:2;9798:21;:29;9871:20;9885:5;9871:13;:20::i;:::-;9945:5;:12;9960:2;9945:17;9777:7;:246::i;2855:884::-;2976:14;3039:5;3047:2;3039:10;3027:1;:8;:22;;3091:38;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;3091:38:1;;;3006:133;;;;;;;-1:-1:-1;;;;;3006:133:1;;;;;;;;;;-1:-1:-1;;3641:13:1;3386:2;3641:13;3635:20;3657:42;3631:69;;2855:884::o;6363:454::-;6538:5;6546:2;6538:10;6526:1;:8;:22;;6562:38;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;6562:38:1;;;6505:105;;;;;;;-1:-1:-1;;;;;6505:105:1;;;;;;;;;;-1:-1:-1;6780:13:1;;6691:2;6780:13;6773:28;6759:52::o;2161:480::-;2248:14;2311:2;2299:1;:8;:14;;2327:38;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2327:38:1;;;2278:97;;;;;;;-1:-1:-1;;;;;2278:97:1;;;;;;;;;;;2427:29;2439:1;2453:2;2442:1;:8;:13;2427:11;:29::i;:::-;2559:8;;-1:-1:-1;;2555:17:1;2585;;;-1:-1:-1;2418:38:1;2161:480::o;7484:187::-;7626:38;7639:1;7642:5;7657;7626:12;:38::i;5639:488::-;5760:14;5823:5;5831:2;5823:10;5811:1;:8;:22;;5847:38;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;5847:38:1;;;5790:105;;;;;;;-1:-1:-1;;;;;5790:105:1;;;;;;;;;;-1:-1:-1;;6074:13:1;5976:2;6074:13;6068:20;;5639:488::o;787:218:2:-;954:5;787:218::o;1244:3897::-;1394:2;1385:6;:11;1381:3754;;;1683:1;1673:6;1669:2;1665:15;1660:3;1656:25;1652:33;1734:4;1730:9;1721:6;1715:13;1711:29;1783:4;1776;1770:11;1766:22;1824:1;1821;1818:8;1812:4;1805:22;1622:219;;;;;;1945:4;1935:6;:14;1931:59;;;1969:7;;1931:59;2679:4;2670:6;:13;2666:2459;;;2829:2;2821:6;2817:15;3125:2;3117:6;3113:15;3103:25;;3173:6;3165;3161:19;3223:6;3217:4;3213:17;3530:4;3524:11;3625:1;3611:219;3634:6;3631:1;3628:13;3611:219;;;3698:13;;3685:27;;3759:2;3795:13;;;;3747:15;;;;3655:1;3648:9;3611:219;;;-1:-1:-1;3899:18:2;;-1:-1:-1;2712:1223:2;;-1:-1:-1;2712:1223:2;;4099:2;4091:6;4087:15;4300:2;4292:6;4288:15;4278:25;;4348:6;4340;4336:19;4398:6;4392:4;4388:17;4708:6;4702:13;4805:1;4791:213;4814:6;4811:1;4808:13;4791:213;;;4878:11;;4865:25;;-1:-1:-1;;4923:13:2;;;;4969;;;;4835:1;4828:9;4791:213;;;-1:-1:-1;5074:19:2;;-1:-1:-1;;;1244:3897:2;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;130:118;;197:46;235:6;222:20;197:46;;256:440;;350:4;338:17;;334:27;-1:-1;324:2;;375:1;372;365:12;324:2;412:6;399:20;434:64;449:48;490:6;449:48;;;434:64;;;425:73;;518:6;511:5;504:21;554:4;546:6;542:17;587:4;580:5;576:16;622:3;613:6;608:3;604:16;601:25;598:2;;;639:1;636;629:12;598:2;649:41;683:6;678:3;673;649:41;;;317:379;;;;;;;;829:345;;942:2;930:9;921:7;917:23;913:32;910:2;;;958:1;955;948:12;910:2;993:31;;1044:18;1033:30;;1030:2;;;1076:1;1073;1066:12;1030:2;1096:62;1150:7;1141:6;1130:9;1126:22;1096:62;;;1086:72;904:270;-1:-1;;;;904:270;1181:574;;;1320:2;1308:9;1299:7;1295:23;1291:32;1288:2;;;1336:1;1333;1326:12;1288:2;1371:31;;1422:18;1411:30;;1408:2;;;1454:1;1451;1444:12;1408:2;1474:62;1528:7;1519:6;1508:9;1504:22;1474:62;;;1464:72;;1350:192;1601:2;1590:9;1586:18;1573:32;1625:18;1617:6;1614:30;1611:2;;;1657:1;1654;1647:12;1611:2;1677:62;1731:7;1722:6;1711:9;1707:22;1677:62;;;1667:72;;1552:193;1282:473;;;;;;1762:470;;;1892:2;1880:9;1871:7;1867:23;1863:32;1860:2;;;1908:1;1905;1898:12;1860:2;1943:31;;1994:18;1983:30;;1980:2;;;2026:1;2023;2016:12;1980:2;2046:62;2100:7;2091:6;2080:9;2076:22;2046:62;;;2036:72;;1922:192;2145:2;2163:53;2208:7;2199:6;2188:9;2184:22;2163:53;;2239:595;;;;2386:2;2374:9;2365:7;2361:23;2357:32;2354:2;;;2402:1;2399;2392:12;2354:2;2437:31;;2488:18;2477:30;;2474:2;;;2520:1;2517;2510:12;2474:2;2540:62;2594:7;2585:6;2574:9;2570:22;2540:62;;;2530:72;;2416:192;2639:2;2657:53;2702:7;2693:6;2682:9;2678:22;2657:53;;;2647:63;;2618:98;2747:2;2765:53;2810:7;2801:6;2790:9;2786:22;2765:53;;;2755:63;;2726:98;2348:486;;;;;;2841:595;;;;2988:2;2976:9;2967:7;2963:23;2959:32;2956:2;;;3004:1;3001;2994:12;2956:2;3039:31;;3090:18;3079:30;;3076:2;;;3122:1;3119;3112:12;3076:2;3142:62;3196:7;3187:6;3176:9;3172:22;3142:62;;;3132:72;;3018:192;3241:2;3259:53;3304:7;3295:6;3284:9;3280:22;3259:53;;;3249:63;;3220:98;3349:2;3367:53;3412:7;3403:6;3392:9;3388:22;3367:53;;3443:699;;;;3599:2;3587:9;3578:7;3574:23;3570:32;3567:2;;;3615:1;3612;3605:12;3567:2;3650:31;;3701:18;3690:30;;3687:2;;;3733:1;3730;3723:12;3687:2;3753:62;3807:7;3798:6;3787:9;3783:22;3753:62;;;3743:72;;3629:192;3852:2;3870:53;3915:7;3906:6;3895:9;3891:22;3870:53;;;3860:63;;3831:98;3988:2;3977:9;3973:18;3960:32;4012:18;4004:6;4001:30;3998:2;;;4044:1;4041;4034:12;3998:2;4064:62;4118:7;4109:6;4098:9;4094:22;4064:62;;4751:110;4824:31;4849:5;4824:31;;;4819:3;4812:44;4806:55;;;4868:101;4935:28;4957:5;4935:28;;4976:107;5047:30;5071:5;5047:30;;5090:110;5163:31;5188:5;5163:31;;5207:107;5278:30;5302:5;5278:30;;5321:297;;5421:38;5453:5;5421:38;;;5476:6;5471:3;5464:19;5488:63;5544:6;5537:4;5532:3;5528:14;5521:4;5514:5;5510:16;5488:63;;;5583:29;5605:6;5583:29;;;5563:50;;;5576:4;5563:50;;5401:217;-1:-1;;;5401:217;6041:193;6149:2;6134:18;;6163:61;6138:9;6197:6;6163:61;;6241:181;6343:2;6328:18;;6357:55;6332:9;6385:6;6357:55;;6429:193;6537:2;6522:18;;6551:61;6526:9;6585:6;6551:61;;6629:189;6735:2;6720:18;;6749:59;6724:9;6781:6;6749:59;;6825:277;6951:2;6965:47;;;6936:18;;7026:66;6936:18;7078:6;7026:66;;7109:378;7263:2;7277:47;;;7248:18;;7338:66;7248:18;7390:6;7338:66;;;7330:74;;7415:62;7473:2;7462:9;7458:18;7449:6;7415:62;;7494:374;7646:2;7660:47;;;7631:18;;7721:66;7631:18;7773:6;7721:66;;;7713:74;;7798:60;7854:2;7843:9;7839:18;7830:6;7798:60;;8355:256;8417:2;8411:9;8443:17;;;8518:18;8503:34;;8539:22;;;8500:62;8497:2;;;8575:1;8572;8565:12;8497:2;8591;8584:22;8395:216;;-1:-1;8395:216;8618:258;;8761:18;8753:6;8750:30;8747:2;;;8793:1;8790;8783:12;8747:2;-1:-1;8866:4;8837;8814:17;;;;-1:-1;;8810:33;8856:15;;8684:192;8883:91;8957:12;;8941:33;9076:128;9156:42;9145:54;;9128:76;9211:92;9284:13;9277:21;;9260:43;9310:151;9389:66;9378:78;;9361:100;9554:151;9633:66;9622:78;;9605:100;10106:145;10187:6;10182:3;10177;10164:30;-1:-1;10243:1;10225:16;;10218:27;10157:94;10260:268;10325:1;10332:101;10346:6;10343:1;10340:13;10332:101;;;10413:11;;;10407:18;10394:11;;;10387:39;10368:2;10361:10;10332:101;;;10448:6;10445:1;10442:13;10439:2;;;10513:1;10504:6;10499:3;10495:16;10488:27;10439:2;10309:219;;;;;10536:97;10624:2;10604:14;-1:-1;;10600:28;;10584:49"
			}
		}
	},
	"sources": {
		"current/test/TestLibBytes/TestLibBytes.sol": {
			"id": 0
		},
		"current/utils/LibBytes/LibBytes.sol": {
			"id": 1
		},
		"current/utils/LibMem/LibMem.sol": {
			"id": 2
		}
	},
	"sourceCodes": {
		"current/test/TestLibBytes/TestLibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/LibBytes/LibBytes.sol\";\n\ncontract TestLibBytes is\n    LibBytes\n{\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function publicPopLastByte(bytes memory b)\n        public\n        pure\n        returns (bytes memory, bytes1 result)\n    {\n        result = popLastByte(b);\n        return (b, result);\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function publicPopLast20Bytes(bytes memory b)\n        public\n        pure\n        returns (bytes memory, address result)\n    {\n        result = popLast20Bytes(b);\n        return (b, result);\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function publicAreBytesEqual(bytes memory lhs, bytes memory rhs)\n        public\n        pure\n        returns (bool equal)\n    {\n        equal = areBytesEqual(lhs, rhs);\n        return equal;\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function publicDeepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        public\n        pure\n        returns (bytes memory)\n    {\n        deepCopyBytes(dest, source);\n        return dest;\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function publicReadAddress(\n        bytes memory b,\n        uint256 index\n    )\n        public\n        pure\n        returns (address result)\n    {\n        result = readAddress(b, index);\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function publicWriteAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        public\n        pure\n        returns (bytes memory)\n    {\n        writeAddress(b, index, input);\n        return b;\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function publicReadBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        public\n        pure\n        returns (bytes32 result)\n    {\n        result = readBytes32(b, index);\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function publicWriteBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        public\n        pure\n        returns (bytes memory)\n    {\n        writeBytes32(b, index, input);\n        return b;\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function publicReadUint256(\n        bytes memory b,\n        uint256 index\n    )\n        public\n        pure\n        returns (uint256 result)\n    {\n        result = readUint256(b, index);\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function publicWriteUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        public\n        pure\n        returns (bytes memory)\n    {\n        writeUint256(b, index, input);\n        return b;\n    }\n\n    /// @dev Reads the first 4 bytes from a byte array of arbitrary length.\n    /// @param b Byte array to read first 4 bytes from.\n    /// @return First 4 bytes of data.\n    function publicReadFirst4(bytes memory b)\n        public\n        pure\n        returns (bytes4 result)\n    {\n        result = readFirst4(b);\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function publicReadBytes(\n        bytes memory b,\n        uint256 index\n    )\n        public\n        pure\n        returns (bytes memory result)\n    {\n        result = readBytes(b, index);\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    /// @return b Updated input byte array\n    function publicWriteBytes(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        public\n        pure\n        returns (bytes memory)\n    {\n        writeBytes(b, index, input);\n        return b;\n    }\n}\n",
		"current/utils/LibBytes/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../LibMem/LibMem.sol\";\n\ncontract LibBytes is\n    LibMem\n{\n\n    // Revert reasons\n    string constant GREATER_THAN_ZERO_LENGTH_REQUIRED = \"GREATER_THAN_ZERO_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\";\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            GREATER_THAN_ZERO_LENGTH_REQUIRED\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(mload(add(b, index)), 0xffffffffffffffffffffffff0000000000000000000000000000000000000000)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        return uint256(readBytes32(b, index));\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads the first 4 bytes from a byte array of arbitrary length.\n    /// @param b Byte array to read first 4 bytes from.\n    /// @return First 4 bytes of data.\n    function readFirst4(bytes memory b)\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= 4,\n            GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\n        );\n        assembly {\n            result := mload(add(b, 32))\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytes(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\n        );\n\n        // Allocate memory and copy value to result\n        result = new bytes(nestedBytesLength);\n        memCopy(\n            getMemAddress(result) + 32, // +32 skips array length\n            getMemAddress(b) + index + 32,\n            nestedBytesLength\n        );\n\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytes(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 /* 32 bytes to store length */ + input.length,\n            GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            getMemAddress(b) + 32 + index,  // +32 to skip length of <b>\n            getMemAddress(input),           // includes length of <input>\n            input.length + 32               // +32 bytes to store <input> length\n        );\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function areBytesEqual(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        assembly {\n            // Get the number of words occupied by <lhs>\n            let lenFullWords := div(add(mload(lhs), 0x1F), 0x20)\n\n            // Add 1 to the number of words, to account for the length field\n            lenFullWords := add(lenFullWords, 0x1)\n\n            // Test equality word-by-word.\n            // Terminates early if there is a mismatch.\n            for {let i := 0} lt(i, lenFullWords) {i := add(i, 1)} {\n                let lhsWord := mload(add(lhs, mul(i, 0x20)))\n                let rhsWord := mload(add(rhs, mul(i, 0x20)))\n                equal := eq(lhsWord, rhsWord)\n                if eq(equal, 0) {\n                    // Break\n                    i := lenFullWords\n                }\n            }\n       }\n\n       return equal;\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function deepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        internal\n        pure\n    {\n        uint256 sourceLen = source.length;\n        // Dest length must be >= source length, or some bytes would not be copied.\n        require(\n            dest.length >= sourceLen,\n            GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\n        );\n        memCopy(\n            getMemAddress(dest) + 32,    // +32 to skip length of <dest>\n            getMemAddress(source) + 32,  // +32 to skip length of <source>\n            sourceLen\n        );\n    }\n}\n",
		"current/utils/LibMem/LibMem.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibMem\n{\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array.\n    function getMemAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // Record the total number of full words to copy\n                    let nWords := div(length, 32)\n\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    for {let i := 0} lt(i, nWords) {i := add(i, 1)} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // Record the total number of full words to copy\n                    let nWords := div(length, 32)\n\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    for {let i := 0} lt(i, nWords) {i := add(i, 1)} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n}\n"
	},
	"sourceTreeHashHex": "0x087c6368ea1fa3049fc13288a12d4a53e3efe4c4a0deb4a497ac0bcdf7ab2dfa",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.4.24+commit.e67f0147.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"networks": {}
}