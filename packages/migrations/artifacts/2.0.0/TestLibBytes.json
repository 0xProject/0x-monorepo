{
    "schemaVersion": "2.0.0",
    "contractName": "TestLibBytes",
    "compilerOutput": {
        "abi": [
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "lhs",
                        "type": "bytes"
                    },
                    {
                        "name": "rhs",
                        "type": "bytes"
                    }
                ],
                "name": "publicAreBytesEqual",
                "outputs": [
                    {
                        "name": "equal",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "b",
                        "type": "bytes"
                    },
                    {
                        "name": "index",
                        "type": "uint256"
                    },
                    {
                        "name": "input",
                        "type": "address"
                    }
                ],
                "name": "publicWriteAddress",
                "outputs": [
                    {
                        "name": "",
                        "type": "bytes"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "b",
                        "type": "bytes"
                    },
                    {
                        "name": "index",
                        "type": "uint256"
                    }
                ],
                "name": "publicReadAddress",
                "outputs": [
                    {
                        "name": "result",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "b",
                        "type": "bytes"
                    },
                    {
                        "name": "index",
                        "type": "uint256"
                    },
                    {
                        "name": "input",
                        "type": "bytes32"
                    }
                ],
                "name": "publicWriteBytes32",
                "outputs": [
                    {
                        "name": "",
                        "type": "bytes"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "b",
                        "type": "bytes"
                    },
                    {
                        "name": "index",
                        "type": "uint256"
                    },
                    {
                        "name": "input",
                        "type": "uint256"
                    }
                ],
                "name": "publicWriteUint256",
                "outputs": [
                    {
                        "name": "",
                        "type": "bytes"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "b",
                        "type": "bytes"
                    },
                    {
                        "name": "index",
                        "type": "uint256"
                    }
                ],
                "name": "publicReadBytes32",
                "outputs": [
                    {
                        "name": "result",
                        "type": "bytes32"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "b",
                        "type": "bytes"
                    },
                    {
                        "name": "index",
                        "type": "uint256"
                    }
                ],
                "name": "publicReadUint256",
                "outputs": [
                    {
                        "name": "result",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            }
        ],
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object":
                    "0x608060405234801561001057600080fd5b506107a5806100206000396000f3006080604052600436106100695763ffffffff60e060020a6000350416630945c63b811461006e5780633f2a25ec146100a457806382e2fa24146100d157806384f87758146100fe578063b79650a41461011e578063be766f1b1461013e578063e3a85ce41461016b575b600080fd5b34801561007a57600080fd5b5061008e6100893660046104a6565b61018b565b60405161009b9190610673565b60405180910390f35b3480156100b057600080fd5b506100c46100bf366004610553565b6101a0565b60405161009b919061068f565b3480156100dd57600080fd5b506100f16100ec36600461050d565b6101b5565b60405161009b9190610665565b34801561010a57600080fd5b506100c46101193660046105b6565b6101c1565b34801561012a57600080fd5b506100c46101393660046105b6565b6101ce565b34801561014a57600080fd5b5061015e61015936600461050d565b6101db565b60405161009b9190610681565b34801561017757600080fd5b5061015e61018636600461050d565b6101e7565b600061019783836101f3565b90505b92915050565b60606101ad84848461023a565b509192915050565b600061019783836102c4565b60606101ad848484610340565b60606101ad8484846103b0565b600061019783836103c0565b600061019783836101db565b60006020601f8451010460018101905060005b8181101561023257602081028581015190850151808214945084610228578392505b5050600101610206565b505092915050565b8160140183511015606060405190810160405280602b815260200160008051602061074c833981519152815260200160a960020a6a38bab0b6103a3790191817028152509015156102aa5760405160e560020a62461bcd0281526004016102a1919061068f565b60405180910390fd5b5091016014018051600160a060020a031916919091189052565b60008160140183511015606060405190810160405280602b815260200160008051602061074c833981519152815260200160a960020a6a38bab0b6103a37901918170281525090151561032d5760405160e560020a62461bcd0281526004016102a1919061068f565b50500160140151600160a060020a031690565b8160200183511015606060405190810160405280602b815260200160008051602061074c833981519152815260200160a960020a6a38bab0b6103a3790199917028152509015156103a75760405160e560020a62461bcd0281526004016102a1919061068f565b50910160200152565b6103bb838383610340565b505050565b60008160200183511015606060405190810160405280602b815260200160008051602061074c833981519152815260200160a960020a6a38bab0b6103a3790199917028152509015156104295760405160e560020a62461bcd0281526004016102a1919061068f565b5050016020015190565b600061043f82356106f1565b9392505050565b600061043f8235610702565b6000601f8201831361046357600080fd5b8135610476610471826106c6565b6106a0565b9150808252602083016020830185838301111561049257600080fd5b61049d838284610705565b50505092915050565b600080604083850312156104b957600080fd5b82356001604060020a038111156104cf57600080fd5b6104db85828601610452565b92505060208301356001604060020a038111156104f757600080fd5b61050385828601610452565b9150509250929050565b6000806040838503121561052057600080fd5b82356001604060020a0381111561053657600080fd5b61054285828601610452565b925050602061050385828601610446565b60008060006060848603121561056857600080fd5b83356001604060020a0381111561057e57600080fd5b61058a86828701610452565b935050602061059b86828701610446565b92505060406105ac86828701610433565b9150509250925092565b6000806000606084860312156105cb57600080fd5b83356001604060020a038111156105e157600080fd5b6105ed86828701610452565b93505060206105fe86828701610446565b92505060406105ac86828701610446565b610618816106f1565b82525050565b610618816106fd565b61061881610702565b600061063b826106ed565b80845261064f816020860160208601610711565b61065881610741565b9093016020019392505050565b6020810161019a828461060f565b6020810161019a828461061e565b6020810161019a8284610627565b6020808252810161043f8184610630565b6040518181016001604060020a03811182821017156106be57600080fd5b604052919050565b60006001604060020a038211156106dc57600080fd5b506020601f91909101601f19160190565b5190565b600160a060020a031690565b151590565b90565b82818337506000910152565b60005b8381101561072c578181015183820152602001610714565b8381111561073b576000848401525b50505050565b601f01601f19169056004c656e677468206d7573742062652067726561746572207468616e206f722065a265627a7a7230582078e7225f5770596fb478e48e5a8d16328a64e8f347c8f75719579360c5e1c20c6c6578706572696d656e74616cf50037",
                "opcodes":
                    "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A5 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x69 JUMPI PUSH4 0xFFFFFFFF PUSH1 0xE0 PUSH1 0x2 EXP PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x945C63B DUP2 EQ PUSH2 0x6E JUMPI DUP1 PUSH4 0x3F2A25EC EQ PUSH2 0xA4 JUMPI DUP1 PUSH4 0x82E2FA24 EQ PUSH2 0xD1 JUMPI DUP1 PUSH4 0x84F87758 EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0xB79650A4 EQ PUSH2 0x11E JUMPI DUP1 PUSH4 0xBE766F1B EQ PUSH2 0x13E JUMPI DUP1 PUSH4 0xE3A85CE4 EQ PUSH2 0x16B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8E PUSH2 0x89 CALLDATASIZE PUSH1 0x4 PUSH2 0x4A6 JUMP JUMPDEST PUSH2 0x18B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x9B SWAP2 SWAP1 PUSH2 0x673 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC4 PUSH2 0xBF CALLDATASIZE PUSH1 0x4 PUSH2 0x553 JUMP JUMPDEST PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x9B SWAP2 SWAP1 PUSH2 0x68F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF1 PUSH2 0xEC CALLDATASIZE PUSH1 0x4 PUSH2 0x50D JUMP JUMPDEST PUSH2 0x1B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x9B SWAP2 SWAP1 PUSH2 0x665 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC4 PUSH2 0x119 CALLDATASIZE PUSH1 0x4 PUSH2 0x5B6 JUMP JUMPDEST PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC4 PUSH2 0x139 CALLDATASIZE PUSH1 0x4 PUSH2 0x5B6 JUMP JUMPDEST PUSH2 0x1CE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15E PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0x50D JUMP JUMPDEST PUSH2 0x1DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x9B SWAP2 SWAP1 PUSH2 0x681 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15E PUSH2 0x186 CALLDATASIZE PUSH1 0x4 PUSH2 0x50D JUMP JUMPDEST PUSH2 0x1E7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197 DUP4 DUP4 PUSH2 0x1F3 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1AD DUP5 DUP5 DUP5 PUSH2 0x23A JUMP JUMPDEST POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197 DUP4 DUP4 PUSH2 0x2C4 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1AD DUP5 DUP5 DUP5 PUSH2 0x340 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1AD DUP5 DUP5 DUP5 PUSH2 0x3B0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197 DUP4 DUP4 PUSH2 0x3C0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197 DUP4 DUP4 PUSH2 0x1DB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP5 MLOAD ADD DIV PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x232 JUMPI PUSH1 0x20 DUP2 MUL DUP6 DUP2 ADD MLOAD SWAP1 DUP6 ADD MLOAD DUP1 DUP3 EQ SWAP5 POP DUP5 PUSH2 0x228 JUMPI DUP4 SWAP3 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x206 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x74C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790191817 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x2AA JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x68F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP2 ADD PUSH1 0x14 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND SWAP2 SWAP1 SWAP2 XOR SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x74C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790191817 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x32D JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x68F JUMP JUMPDEST POP POP ADD PUSH1 0x14 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x74C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790199917 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x3A7 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x68F JUMP JUMPDEST POP SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH2 0x3BB DUP4 DUP4 DUP4 PUSH2 0x340 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x74C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790199917 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x429 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x68F JUMP JUMPDEST POP POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43F DUP3 CALLDATALOAD PUSH2 0x6F1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43F DUP3 CALLDATALOAD PUSH2 0x702 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x463 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x476 PUSH2 0x471 DUP3 PUSH2 0x6C6 JUMP JUMPDEST PUSH2 0x6A0 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x492 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x49D DUP4 DUP3 DUP5 PUSH2 0x705 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x4CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4DB DUP6 DUP3 DUP7 ADD PUSH2 0x452 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x4F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x503 DUP6 DUP3 DUP7 ADD PUSH2 0x452 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x520 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x542 DUP6 DUP3 DUP7 ADD PUSH2 0x452 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x503 DUP6 DUP3 DUP7 ADD PUSH2 0x446 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x57E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x58A DUP7 DUP3 DUP8 ADD PUSH2 0x452 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x59B DUP7 DUP3 DUP8 ADD PUSH2 0x446 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x5AC DUP7 DUP3 DUP8 ADD PUSH2 0x433 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x5E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5ED DUP7 DUP3 DUP8 ADD PUSH2 0x452 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x5FE DUP7 DUP3 DUP8 ADD PUSH2 0x446 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x5AC DUP7 DUP3 DUP8 ADD PUSH2 0x446 JUMP JUMPDEST PUSH2 0x618 DUP2 PUSH2 0x6F1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x618 DUP2 PUSH2 0x6FD JUMP JUMPDEST PUSH2 0x618 DUP2 PUSH2 0x702 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x63B DUP3 PUSH2 0x6ED JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x64F DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x711 JUMP JUMPDEST PUSH2 0x658 DUP2 PUSH2 0x741 JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x19A DUP3 DUP5 PUSH2 0x60F JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x19A DUP3 DUP5 PUSH2 0x61E JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x19A DUP3 DUP5 PUSH2 0x627 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x43F DUP2 DUP5 PUSH2 0x630 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x6BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP3 GT ISZERO PUSH2 0x6DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x72C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x714 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x73B JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP STOP 0x4c PUSH6 0x6E677468206D PUSH22 0x73742062652067726561746572207468616E206F7220 PUSH6 0xA265627A7A72 ADDRESS PC KECCAK256 PUSH25 0xE7225F5770596FB478E48E5A8D16328A64E8F347C8F7571957 SWAP4 PUSH1 0xC5 0xe1 0xc2 0xc PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
                "sourceMap": "685:3153:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;685:3153:0;;;;;;;"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object":
                    "0x6080604052600436106100695763ffffffff60e060020a6000350416630945c63b811461006e5780633f2a25ec146100a457806382e2fa24146100d157806384f87758146100fe578063b79650a41461011e578063be766f1b1461013e578063e3a85ce41461016b575b600080fd5b34801561007a57600080fd5b5061008e6100893660046104a6565b61018b565b60405161009b9190610673565b60405180910390f35b3480156100b057600080fd5b506100c46100bf366004610553565b6101a0565b60405161009b919061068f565b3480156100dd57600080fd5b506100f16100ec36600461050d565b6101b5565b60405161009b9190610665565b34801561010a57600080fd5b506100c46101193660046105b6565b6101c1565b34801561012a57600080fd5b506100c46101393660046105b6565b6101ce565b34801561014a57600080fd5b5061015e61015936600461050d565b6101db565b60405161009b9190610681565b34801561017757600080fd5b5061015e61018636600461050d565b6101e7565b600061019783836101f3565b90505b92915050565b60606101ad84848461023a565b509192915050565b600061019783836102c4565b60606101ad848484610340565b60606101ad8484846103b0565b600061019783836103c0565b600061019783836101db565b60006020601f8451010460018101905060005b8181101561023257602081028581015190850151808214945084610228578392505b5050600101610206565b505092915050565b8160140183511015606060405190810160405280602b815260200160008051602061074c833981519152815260200160a960020a6a38bab0b6103a3790191817028152509015156102aa5760405160e560020a62461bcd0281526004016102a1919061068f565b60405180910390fd5b5091016014018051600160a060020a031916919091189052565b60008160140183511015606060405190810160405280602b815260200160008051602061074c833981519152815260200160a960020a6a38bab0b6103a37901918170281525090151561032d5760405160e560020a62461bcd0281526004016102a1919061068f565b50500160140151600160a060020a031690565b8160200183511015606060405190810160405280602b815260200160008051602061074c833981519152815260200160a960020a6a38bab0b6103a3790199917028152509015156103a75760405160e560020a62461bcd0281526004016102a1919061068f565b50910160200152565b6103bb838383610340565b505050565b60008160200183511015606060405190810160405280602b815260200160008051602061074c833981519152815260200160a960020a6a38bab0b6103a3790199917028152509015156104295760405160e560020a62461bcd0281526004016102a1919061068f565b5050016020015190565b600061043f82356106f1565b9392505050565b600061043f8235610702565b6000601f8201831361046357600080fd5b8135610476610471826106c6565b6106a0565b9150808252602083016020830185838301111561049257600080fd5b61049d838284610705565b50505092915050565b600080604083850312156104b957600080fd5b82356001604060020a038111156104cf57600080fd5b6104db85828601610452565b92505060208301356001604060020a038111156104f757600080fd5b61050385828601610452565b9150509250929050565b6000806040838503121561052057600080fd5b82356001604060020a0381111561053657600080fd5b61054285828601610452565b925050602061050385828601610446565b60008060006060848603121561056857600080fd5b83356001604060020a0381111561057e57600080fd5b61058a86828701610452565b935050602061059b86828701610446565b92505060406105ac86828701610433565b9150509250925092565b6000806000606084860312156105cb57600080fd5b83356001604060020a038111156105e157600080fd5b6105ed86828701610452565b93505060206105fe86828701610446565b92505060406105ac86828701610446565b610618816106f1565b82525050565b610618816106fd565b61061881610702565b600061063b826106ed565b80845261064f816020860160208601610711565b61065881610741565b9093016020019392505050565b6020810161019a828461060f565b6020810161019a828461061e565b6020810161019a8284610627565b6020808252810161043f8184610630565b6040518181016001604060020a03811182821017156106be57600080fd5b604052919050565b60006001604060020a038211156106dc57600080fd5b506020601f91909101601f19160190565b5190565b600160a060020a031690565b151590565b90565b82818337506000910152565b60005b8381101561072c578181015183820152602001610714565b8381111561073b576000848401525b50505050565b601f01601f19169056004c656e677468206d7573742062652067726561746572207468616e206f722065a265627a7a7230582078e7225f5770596fb478e48e5a8d16328a64e8f347c8f75719579360c5e1c20c6c6578706572696d656e74616cf50037",
                "opcodes":
                    "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x69 JUMPI PUSH4 0xFFFFFFFF PUSH1 0xE0 PUSH1 0x2 EXP PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x945C63B DUP2 EQ PUSH2 0x6E JUMPI DUP1 PUSH4 0x3F2A25EC EQ PUSH2 0xA4 JUMPI DUP1 PUSH4 0x82E2FA24 EQ PUSH2 0xD1 JUMPI DUP1 PUSH4 0x84F87758 EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0xB79650A4 EQ PUSH2 0x11E JUMPI DUP1 PUSH4 0xBE766F1B EQ PUSH2 0x13E JUMPI DUP1 PUSH4 0xE3A85CE4 EQ PUSH2 0x16B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8E PUSH2 0x89 CALLDATASIZE PUSH1 0x4 PUSH2 0x4A6 JUMP JUMPDEST PUSH2 0x18B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x9B SWAP2 SWAP1 PUSH2 0x673 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC4 PUSH2 0xBF CALLDATASIZE PUSH1 0x4 PUSH2 0x553 JUMP JUMPDEST PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x9B SWAP2 SWAP1 PUSH2 0x68F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF1 PUSH2 0xEC CALLDATASIZE PUSH1 0x4 PUSH2 0x50D JUMP JUMPDEST PUSH2 0x1B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x9B SWAP2 SWAP1 PUSH2 0x665 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC4 PUSH2 0x119 CALLDATASIZE PUSH1 0x4 PUSH2 0x5B6 JUMP JUMPDEST PUSH2 0x1C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC4 PUSH2 0x139 CALLDATASIZE PUSH1 0x4 PUSH2 0x5B6 JUMP JUMPDEST PUSH2 0x1CE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15E PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0x50D JUMP JUMPDEST PUSH2 0x1DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x9B SWAP2 SWAP1 PUSH2 0x681 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15E PUSH2 0x186 CALLDATASIZE PUSH1 0x4 PUSH2 0x50D JUMP JUMPDEST PUSH2 0x1E7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197 DUP4 DUP4 PUSH2 0x1F3 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1AD DUP5 DUP5 DUP5 PUSH2 0x23A JUMP JUMPDEST POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197 DUP4 DUP4 PUSH2 0x2C4 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1AD DUP5 DUP5 DUP5 PUSH2 0x340 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1AD DUP5 DUP5 DUP5 PUSH2 0x3B0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197 DUP4 DUP4 PUSH2 0x3C0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197 DUP4 DUP4 PUSH2 0x1DB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP5 MLOAD ADD DIV PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x232 JUMPI PUSH1 0x20 DUP2 MUL DUP6 DUP2 ADD MLOAD SWAP1 DUP6 ADD MLOAD DUP1 DUP3 EQ SWAP5 POP DUP5 PUSH2 0x228 JUMPI DUP4 SWAP3 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x206 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x74C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790191817 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x2AA JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x68F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP2 ADD PUSH1 0x14 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND SWAP2 SWAP1 SWAP2 XOR SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x74C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790191817 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x32D JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x68F JUMP JUMPDEST POP POP ADD PUSH1 0x14 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x74C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790199917 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x3A7 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x68F JUMP JUMPDEST POP SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH2 0x3BB DUP4 DUP4 DUP4 PUSH2 0x340 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x74C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790199917 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x429 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x68F JUMP JUMPDEST POP POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43F DUP3 CALLDATALOAD PUSH2 0x6F1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43F DUP3 CALLDATALOAD PUSH2 0x702 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x463 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x476 PUSH2 0x471 DUP3 PUSH2 0x6C6 JUMP JUMPDEST PUSH2 0x6A0 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x492 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x49D DUP4 DUP3 DUP5 PUSH2 0x705 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x4CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4DB DUP6 DUP3 DUP7 ADD PUSH2 0x452 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x4F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x503 DUP6 DUP3 DUP7 ADD PUSH2 0x452 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x520 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x542 DUP6 DUP3 DUP7 ADD PUSH2 0x452 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x503 DUP6 DUP3 DUP7 ADD PUSH2 0x446 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x57E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x58A DUP7 DUP3 DUP8 ADD PUSH2 0x452 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x59B DUP7 DUP3 DUP8 ADD PUSH2 0x446 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x5AC DUP7 DUP3 DUP8 ADD PUSH2 0x433 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x5E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5ED DUP7 DUP3 DUP8 ADD PUSH2 0x452 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x5FE DUP7 DUP3 DUP8 ADD PUSH2 0x446 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x5AC DUP7 DUP3 DUP8 ADD PUSH2 0x446 JUMP JUMPDEST PUSH2 0x618 DUP2 PUSH2 0x6F1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x618 DUP2 PUSH2 0x6FD JUMP JUMPDEST PUSH2 0x618 DUP2 PUSH2 0x702 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x63B DUP3 PUSH2 0x6ED JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x64F DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x711 JUMP JUMPDEST PUSH2 0x658 DUP2 PUSH2 0x741 JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x19A DUP3 DUP5 PUSH2 0x60F JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x19A DUP3 DUP5 PUSH2 0x61E JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x19A DUP3 DUP5 PUSH2 0x627 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x43F DUP2 DUP5 PUSH2 0x630 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x6BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP3 GT ISZERO PUSH2 0x6DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x72C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x714 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x73B JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP STOP 0x4c PUSH6 0x6E677468206D PUSH22 0x73742062652067726561746572207468616E206F7220 PUSH6 0xA265627A7A72 ADDRESS PC KECCAK256 PUSH25 0xE7225F5770596FB478E48E5A8D16328A64E8F347C8F7571957 SWAP4 PUSH1 0xC5 0xe1 0xc2 0xc PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
                "sourceMap":
                    "685:3153:0:-;;;;;;;;;-1:-1:-1;;;685:3153:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;937:196;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;937:196:0;;;;;;;;;;;;;;;;;;;;;;;;;1794:226;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1794:226:0;;;;;;;;;;;;;;;;;1347:210;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1347:210:0;;;;;;;;;;;;;;;;;2702:226;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2702:226:0;;;;;;;;;3610;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3610:226:0;;;;;;;;;2256:210;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2256:210:0;;;;;;;;;;;;;;;;;3164;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3164:210:0;;;;;;;;;937:196;1047:10;1081:23;1095:3;1100;1081:13;:23::i;:::-;1073:31;-1:-1:-1;937:196:0;;;;;:::o;1794:226::-;1938:5;1966:29;1979:1;1982:5;1989;1966:12;:29::i;:::-;-1:-1:-1;2012:1:0;;1794:226;-1:-1:-1;;1794:226:0:o;1347:210::-;1467:14;1506:21;1518:1;1521:5;1506:11;:21::i;2702:226::-;2846:5;2874:29;2887:1;2890:5;2897;2874:12;:29::i;3610:226::-;3754:5;3782:29;3795:1;3798:5;3805;3782:12;:29::i;2256:210::-;2376:14;2415:21;2427:1;2430:5;2415:11;:21::i;3164:210::-;3284:14;3323:21;3335:1;3338:5;3323:11;:21::i;1045:899:1:-;1151:10;1304:4;1297;1291:3;1285:10;1281:21;1277:32;1434:3;1420:12;1416:22;1400:38;;1565:1;1551:356;1574:12;1571:1;1568:19;1551:356;;;1660:4;1653:12;;1644:22;;;1638:29;1705:22;;;1699:29;1754:20;;;;-1:-1:-1;1754:20:1;1791:2;;1863:12;1858:17;;1791:2;-1:-1:-1;;1601:1:1;1594:9;1551:356;;;-1:-1:-1;;1045:899:1;;;;:::o;3259:1407::-;3429:5;3437:2;3429:10;3417:1;:8;:22;;3481;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;3481:22:1;;;;-1:-1:-1;;;;;3481:22:1;;;3396:117;;;;;;;-1:-1:-1;;;;;3396:117:1;;;;;;;;;;;;;;;;;;-1:-1:-1;4450:13:1;;3761:2;4450:13;4444:20;;-1:-1:-1;;;;;;4440:93:1;4628:21;;;;4606:44;;3826:834::o;2158:864::-;2274:14;2337:5;2345:2;2337:10;2325:1;:8;:22;;2389;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2389:22:1;;;;-1:-1:-1;;;;;2389:22:1;;;2304:117;;;;;;;-1:-1:-1;;;;;2304:117:1;;;;;;;;;;-1:-1:-1;;2924:13:1;2669:2;2924:13;2918:20;-1:-1:-1;;;;;2914:69:1;;2158:864::o;5605:433::-;5775:5;5783:2;5775:10;5763:1;:8;:22;;5799;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;5799:22:1;;;;-1:-1:-1;;;;;5799:22:1;;;5742:89;;;;;;;-1:-1:-1;;;;;5742:89:1;;;;;;;;;;-1:-1:-1;6001:13:1;;5912:2;6001:13;5994:28;5980:52::o;6700:182::-;6837:38;6850:1;6853:5;6868;6837:12;:38::i;:::-;6700:182;;;:::o;4902:467::-;5018:14;5081:5;5089:2;5081:10;5069:1;:8;:22;;5105;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;5105:22:1;;;;-1:-1:-1;;;;;5105:22:1;;;5048:89;;;;;;;-1:-1:-1;;;;;5048:89:1;;;;;;;;;;-1:-1:-1;;5316:13:1;5218:2;5316:13;5310:20;;4902:467::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;;63:55;57:66;-1:-1;;;57:66;130:118;;197:46;235:6;222:20;197:46;;256:440;;350:4;338:17;;334:27;-1:-1;324:2;;375:1;372;365:12;324:2;412:6;399:20;434:64;449:48;490:6;449:48;;;434:64;;;425:73;;518:6;511:5;504:21;554:4;546:6;542:17;587:4;580:5;576:16;622:3;613:6;608:3;604:16;601:25;598:2;;;639:1;636;629:12;598:2;649:41;683:6;678:3;673;649:41;;;317:379;;;;;;;;829:574;;;968:2;956:9;947:7;943:23;939:32;936:2;;;984:1;981;974:12;936:2;1019:31;;-1:-1;;;;;1059:30;;1056:2;;;1102:1;1099;1092:12;1056:2;1122:62;1176:7;1167:6;1156:9;1152:22;1122:62;;;1112:72;;998:192;1249:2;1238:9;1234:18;1221:32;-1:-1;;;;;1265:6;1262:30;1259:2;;;1305:1;1302;1295:12;1259:2;1325:62;1379:7;1370:6;1359:9;1355:22;1325:62;;;1315:72;;1200:193;930:473;;;;;;1410:470;;;1540:2;1528:9;1519:7;1515:23;1511:32;1508:2;;;1556:1;1553;1546:12;1508:2;1591:31;;-1:-1;;;;;1631:30;;1628:2;;;1674:1;1671;1664:12;1628:2;1694:62;1748:7;1739:6;1728:9;1724:22;1694:62;;;1684:72;;1570:192;1793:2;1811:53;1856:7;1847:6;1836:9;1832:22;1811:53;;1887:595;;;;2034:2;2022:9;2013:7;2009:23;2005:32;2002:2;;;2050:1;2047;2040:12;2002:2;2085:31;;-1:-1;;;;;2125:30;;2122:2;;;2168:1;2165;2158:12;2122:2;2188:62;2242:7;2233:6;2222:9;2218:22;2188:62;;;2178:72;;2064:192;2287:2;2305:53;2350:7;2341:6;2330:9;2326:22;2305:53;;;2295:63;;2266:98;2395:2;2413:53;2458:7;2449:6;2438:9;2434:22;2413:53;;;2403:63;;2374:98;1996:486;;;;;;2489:595;;;;2636:2;2624:9;2615:7;2611:23;2607:32;2604:2;;;2652:1;2649;2642:12;2604:2;2687:31;;-1:-1;;;;;2727:30;;2724:2;;;2770:1;2767;2760:12;2724:2;2790:62;2844:7;2835:6;2824:9;2820:22;2790:62;;;2780:72;;2666:192;2889:2;2907:53;2952:7;2943:6;2932:9;2928:22;2907:53;;;2897:63;;2868:98;2997:2;3015:53;3060:7;3051:6;3040:9;3036:22;3015:53;;3693:110;3766:31;3791:5;3766:31;;;3761:3;3754:44;3748:55;;;3810:101;3877:28;3899:5;3877:28;;3918:110;3991:31;4016:5;3991:31;;4035:297;;4135:38;4167:5;4135:38;;;4190:6;4185:3;4178:19;4202:63;4258:6;4251:4;4246:3;4242:14;4235:4;4228:5;4224:16;4202:63;;;4297:29;4319:6;4297:29;;;4277:50;;;4290:4;4277:50;;4115:217;-1:-1;;;4115:217;4755:193;4863:2;4848:18;;4877:61;4852:9;4911:6;4877:61;;4955:181;5057:2;5042:18;;5071:55;5046:9;5099:6;5071:55;;5143:193;5251:2;5236:18;;5265:61;5240:9;5299:6;5265:61;;5343:277;5469:2;5483:47;;;5454:18;;5544:66;5454:18;5596:6;5544:66;;6107:256;6169:2;6163:9;6195:17;;;-1:-1;;;;;6255:34;;6291:22;;;6252:62;6249:2;;;6327:1;6324;6317:12;6249:2;6343;6336:22;6147:216;;-1:-1;6147:216;6370:258;;-1:-1;;;;;6505:6;6502:30;6499:2;;;6545:1;6542;6535:12;6499:2;-1:-1;6618:4;6589;6566:17;;;;-1:-1;;6562:33;6608:15;;6436:192;6635:91;6709:12;;6693:33;6828:128;-1:-1;;;;;6897:54;;6880:76;6963:92;7036:13;7029:21;;7012:43;7062:79;7131:5;7114:27;7542:145;7623:6;7618:3;7613;7600:30;-1:-1;7679:1;7661:16;;7654:27;7593:94;7696:268;7761:1;7768:101;7782:6;7779:1;7776:13;7768:101;;;7849:11;;;7843:18;7830:11;;;7823:39;7804:2;7797:10;7768:101;;;7884:6;7881:1;7878:13;7875:2;;;7949:1;7940:6;7935:3;7931:16;7924:27;7875:2;7745:219;;;;;7972:97;8060:2;8040:14;-1:-1;;8036:28;;8020:49"
            }
        }
    },
    "sources": {
        "current/test/TestLibBytes/TestLibBytes.sol": {
            "id": 0
        },
        "current/utils/LibBytes/LibBytes.sol": {
            "id": 1
        }
    },
    "sourceCodes": {
        "current/test/TestLibBytes/TestLibBytes.sol":
            "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/LibBytes/LibBytes.sol\";\n\ncontract TestLibBytes is\n    LibBytes\n{\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function publicAreBytesEqual(bytes memory lhs, bytes memory rhs)\n        public\n        pure\n        returns (bool equal)\n    {\n        equal = areBytesEqual(lhs, rhs);\n        return equal;\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function publicReadAddress(\n        bytes memory b,\n        uint256 index)\n        public\n        pure\n        returns (address result)\n    {\n        result = readAddress(b, index);\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function publicWriteAddress(\n        bytes memory b,\n        uint256 index,\n        address input)\n        public\n        pure\n        returns (bytes memory)\n    {\n        writeAddress(b, index, input);\n        return b;\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function publicReadBytes32(\n        bytes memory b,\n        uint256 index)\n        public\n        pure\n        returns (bytes32 result)\n    {\n        result = readBytes32(b, index);\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function publicWriteBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input)\n        public\n        pure\n        returns (bytes memory)\n    {\n        writeBytes32(b, index, input);\n        return b;\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function publicReadUint256(\n        bytes memory b,\n        uint256 index)\n        public\n        pure\n        returns (uint256 result)\n    {\n        result = readUint256(b, index);\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function publicWriteUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input)\n        public\n        pure\n        returns (bytes memory)\n    {\n        writeUint256(b, index, input);\n        return b;\n    }\n}\n",
        "current/utils/LibBytes/LibBytes.sol":
            "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibBytes {\n\n    // Revert reasons\n    string constant GTE_20_LENGTH_REQUIRED = \"Length must be greater than or equal to 20.\";\n    string constant GTE_32_LENGTH_REQUIRED = \"Length must be greater than or equal to 32.\";\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function areBytesEqual(bytes memory lhs, bytes memory rhs)\n        internal\n        pure\n        returns (bool equal)\n    {\n        assembly {\n            // Get the number of words occupied by <lhs>\n            let lenFullWords := div(add(mload(lhs), 0x1F), 0x20)\n\n            // Add 1 to the number of words, to account for the length field\n            lenFullWords := add(lenFullWords, 0x1)\n\n            // Test equality word-by-word.\n            // Terminates early if there is a mismatch.\n            for {let i := 0} lt(i, lenFullWords) {i := add(i, 1)} {\n                let lhsWord := mload(add(lhs, mul(i, 0x20)))\n                let rhsWord := mload(add(rhs, mul(i, 0x20)))\n                equal := eq(lhsWord, rhsWord)\n                if eq(equal, 0) {\n                    // Break\n                    i := lenFullWords\n                }\n            }\n       }\n\n       return equal;\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GTE_20_LENGTH_REQUIRED\n        ); \n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input)\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GTE_20_LENGTH_REQUIRED\n        ); \n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(mload(add(b, index)), 0xffffffffffffffffffffffff0000000000000000000000000000000000000000)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            GTE_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input)\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            GTE_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        return uint256(readBytes32(b, index));\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input)\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n}\n"
    },
    "sourceTreeHashHex": "0x90287153446ca2b1ed6d19e54ebff0e10d65eceb3d12db9f09fba6f75fbb1854",
    "compiler": {
        "name": "solc",
        "version": "0.4.24",
        "settings": {
            "optimizer": {
                "enabled": true,
                "runs": 0
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            }
        }
    },
    "networks": {}
}
