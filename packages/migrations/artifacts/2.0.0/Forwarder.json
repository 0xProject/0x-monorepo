{
	"schemaVersion": "2.0.0",
	"contractName": "Forwarder",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "address"
					},
					{
						"name": "",
						"type": "address"
					},
					{
						"name": "",
						"type": "uint256"
					},
					{
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC721Received",
				"outputs": [
					{
						"name": "",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					},
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "feeOrders",
						"type": "tuple[]"
					},
					{
						"name": "feeSignatures",
						"type": "bytes[]"
					},
					{
						"name": "feeProportion",
						"type": "uint16"
					},
					{
						"name": "feeRecipient",
						"type": "address"
					}
				],
				"name": "marketSellEthForERC20",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "makerAssetFillAmount",
						"type": "uint256"
					}
				],
				"name": "calculateMarketBuyResults",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "ALLOWABLE_EXCHANGE_PERCENTAGE",
				"outputs": [
					{
						"name": "",
						"type": "uint16"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					},
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "feeOrders",
						"type": "tuple[]"
					},
					{
						"name": "feeSignatures",
						"type": "bytes[]"
					},
					{
						"name": "makerTokenFillAmount",
						"type": "uint256"
					},
					{
						"name": "feeProportion",
						"type": "uint16"
					},
					{
						"name": "feeRecipient",
						"type": "address"
					}
				],
				"name": "marketBuyTokensWithEth",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "PERCENTAGE_DENOMINATOR",
				"outputs": [
					{
						"name": "",
						"type": "uint16"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "MAX_FEE",
				"outputs": [
					{
						"name": "",
						"type": "uint16"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "takerAssetFillAmount",
						"type": "uint256"
					}
				],
				"name": "calculateMarketSellResults",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "zrxFillAmount",
						"type": "uint256"
					}
				],
				"name": "calculateMarketBuyZrxResults",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "address"
					},
					{
						"name": "",
						"type": "uint256"
					},
					{
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC721Received",
				"outputs": [
					{
						"name": "",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "_exchange",
						"type": "address"
					},
					{
						"name": "_etherToken",
						"type": "address"
					},
					{
						"name": "_zrxToken",
						"type": "address"
					},
					{
						"name": "_zrxAssetData",
						"type": "bytes"
					},
					{
						"name": "_wethAssetData",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"payable": true,
				"stateMutability": "payable",
				"type": "fallback"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x60806040523480156200001157600080fd5b50604051620035f9380380620035f9833981018060405262000037919081019062000433565b60008054600160a060020a03808816600160a060020a03199283161783556001805482891690841617905560028054918716919092161790558251869086908690869086906200008f906003906020850190620002e6565b508051620000a5906004906020840190620002e6565b5050600054604080517f4552433230546f6b656e28616464726573732900000000000000000000000000815290519081900360130181207f60704108000000000000000000000000000000000000000000000000000000008252600160a060020a039092169550636070410894506200012593509091506004016200054a565b602060405180830381600087803b1580156200014057600080fd5b505af115801562000155573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200017b91908101906200040a565b9050600160a060020a03811615620002da576001546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a039091169063095ea7b390620001dc908490600019906004016200052b565b602060405180830381600087803b158015620001f757600080fd5b505af11580156200020c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620002329190810190620004e3565b506002546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a039091169063095ea7b39062000282908490600019906004016200052b565b602060405180830381600087803b1580156200029d57600080fd5b505af1158015620002b2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620002d89190810190620004e3565b505b50505050505062000618565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200032957805160ff191683800117855562000359565b8280016001018555821562000359579182015b82811115620003595782518255916020019190600101906200033c565b50620003679291506200036b565b5090565b6200038891905b8082111562000367576000815560010162000372565b90565b6000620003998251620005af565b9392505050565b6000620003998251620005e0565b6000601f82018313620003c057600080fd5b8151620003d7620003d18262000587565b62000560565b91508082526020830160208301858383011115620003f457600080fd5b62000401838284620005e5565b50505092915050565b6000602082840312156200041d57600080fd5b60006200042b84846200038b565b949350505050565b600080600080600060a086880312156200044c57600080fd5b60006200045a88886200038b565b95505060206200046d888289016200038b565b945050604062000480888289016200038b565b93505060608601516001604060020a038111156200049d57600080fd5b620004ab88828901620003ae565b92505060808601516001604060020a03811115620004c857600080fd5b620004d688828901620003ae565b9150509295509295909350565b600060208284031215620004f657600080fd5b60006200042b8484620003a0565b6200050f81620005af565b82525050565b6200050f81620005bb565b6200050f8162000388565b604081016200053b828562000504565b62000399602083018462000520565b602081016200055a828462000515565b92915050565b6040518181016001604060020a03811182821017156200057f57600080fd5b604052919050565b60006001604060020a038211156200059e57600080fd5b506020601f91909101601f19160190565b600160a060020a031690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b151590565b60005b8381101562000602578181015183820152602001620005e8565b8381111562000612576000848401525b50505050565b612fd180620006286000396000f3006080604052600436106100a35763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663150b7a0281146100ff578063169645f2146101355780631c5b1ec41461015557806320472cf714610175578063725cef0614610197578063b3cd4254146101aa578063bc063e1a146101bf578063c5e6e6ac146101d4578063e58e9c16146101f4578063f0b9e5ba14610214575b60015473ffffffffffffffffffffffffffffffffffffffff1633146100fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d34565b60405180910390fd5b005b34801561010b57600080fd5b5061011f61011a3660046123bf565b610234565b60405161012c9190612d26565b60405180910390f35b61014861014336600461249d565b610295565b60405161012c9190612de4565b34801561016157600080fd5b5061014861017036600461267e565b610561565b34801561018157600080fd5b5061018a610627565b60405161012c9190612e35565b6101486101a5366004612583565b61062d565b3480156101b657600080fd5b5061018a6109af565b3480156101cb57600080fd5b5061018a6109b5565b3480156101e057600080fd5b506101486101ef36600461267e565b6109bb565b34801561020057600080fd5b5061014861020f36600461267e565b610a2e565b34801561022057600080fd5b5061011f61022f366004612438565b610b2b565b604080517f6f6e455243373231526563656976656428616464726573732c6164647265737381527f2c75696e743235362c62797465732900000000000000000000000000000000006020820152905190819003602f0190205b949350505050565b61029d612022565b34600080808084116102db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d54565b6102e6848888610b8b565b92506102f28484610c59565b9150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561037a57600080fd5b505af115801561038e573d6000803e3d6000fd5b50505050506103bb8b60008151811015156103a557fe5b9060200190602002015161014001516010610ca0565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281529394508301828280156104615780601f1061043657610100808354040283529160200191610461565b820191906000526020600020905b81548152906001019060200180831161044457829003601f168201915b50505050508b600081518110151561047557fe5b60209081029091010151610160015260025473ffffffffffffffffffffffffffffffffffffffff828116911614156104b9576104b28b8b84610d01565b94506104c9565b6104c68b8b8b8b86610e1b565b94505b6020850151841015610507576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d44565b60208501518214610544576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612da4565b61055381338760000151610fa3565b505050509695505050505050565b610569612022565b6000806000610576612022565b600093505b865184101561061d57610592868660000151610c59565b92506105d587858151811015156105a557fe5b9060200190602002015160a0015188868151811015156105c157fe5b90602001906020020151608001518561117d565b91506105f887858151811015156105e857fe5b9060200190602002015183611192565b905061060485826112db565b84518614156106125761061d565b60019093019261057b565b5050505092915050565b61251c81565b610635612022565b346000808211610671576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d54565b600086116106ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d54565b6106d38a60008151811015156106bd57fe5b906020019060200201516101400151600061133d565b604080517f4552433230546f6b656e28616464726573732900000000000000000000000000815290519081900360130190209091507fffffffff000000000000000000000000000000000000000000000000000000008083169116148061078f5750604080517f455243373231546f6b656e28616464726573732c75696e7432353629000000008152905190819003601c0190207fffffffff000000000000000000000000000000000000000000000000000000008281169116145b15156107c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612dc4565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561084d57600080fd5b505af1158015610861573d6000803e3d6000fd5b5050604080517f4552433230546f6b656e28616464726573732900000000000000000000000000815290519081900360130190207fffffffff000000000000000000000000000000000000000000000000000000008581169116141592506108da915050576108d38a8a8a8a8a6113aa565b9250610947565b604080517f455243373231546f6b656e28616464726573732c75696e7432353629000000008152905190819003601c0190207fffffffff0000000000000000000000000000000000000000000000000000000082811691161415610947576109448a8a8a8a611701565b92505b6020830151821015610985576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d44565b6109a2610996838560200151610c59565b84602001518787611a03565b5050979650505050505050565b61271081565b6103e881565b6109c3612022565b6000806109ce612022565b600092505b8551831015610a25576109ea858560200151610c59565b91506109fd86848151811015156105e857fe5b9050610a0984826112db565b8484602001511415610a1a57610a25565b6001909201916109d3565b50505092915050565b610a36612022565b6000806000610a43612022565b600093505b865184101561061d57610a5f868660000151610c59565b9250610ac68785815181101515610a7257fe5b9060200190602002015160a00151610ac08987815181101515610a9157fe5b90602001906020020151608001518a88815181101515610aad57fe5b9060200190602002015160e00151610c59565b8561117d565b9150610af38785815181101515610ad957fe5b90602001906020020151610aee846001611af0565b611192565b9050610b0781600001518260600151610c59565b8152610b1385826112db565b84518611610b205761061d565b600190930192610a48565b604080517f6f6e455243373231526563656976656428616464726573732c75696e7432353681527f2c62797465732900000000000000000000000000000000000000000000000000602082015290519081900360270190205b9392505050565b6000808361ffff16118015610bb5575073ffffffffffffffffffffffffffffffffffffffff821615155b15610b84576103e861ffff84161115610bfa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d84565b610c0b61ffff84166127108661117d565b60405190915073ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f19350505050158015610c51573d6000803e3d6000fd5b509392505050565b600082821115610c95576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d74565b508082035b92915050565b600081601401835110151515610ce2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612db4565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b610d09612022565b600080546040517f7e1d980800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690637e1d980890610d6490889087908990600401612cf4565b608060405180830381600087803b158015610d7e57600080fd5b505af1158015610d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610db691908101906126cf565b9150610dca82600001518360600151610c59565b9050610dda826000015182611b3a565b1515610e12576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612da4565b81529392505050565b610e23612022565b6000610e2d612022565b610e35612022565b610e3d612022565b859350610e4a8a876109bb565b9250600083606001511115610ede57610e6888888560600151611b57565b9150610e8186610e7c888560200151610c59565b611b3a565b1515610eb9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612da4565b610ec7848360200151610c59565b606080840151908701526020808401519087015293505b6000546040517f7e1d980800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690637e1d980890610f38908d9088908e90600401612cf4565b608060405180830381600087803b158015610f5257600080fd5b505af1158015610f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f8a91908101906126cf565b9050610f9685826112db565b5050505095945050505050565b604080517f7472616e7366657228616464726573732c75696e7432353629000000000000008152905190819003601901812060009173ffffffffffffffffffffffffffffffffffffffff861691906110019086908690602401612ca0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931783525181519192909182919080838360005b838110156110a557818101518382015260200161108d565b50505050905090810190601f1680156110d25780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af192505050801515611121576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d94565b3d1561113e575060003d6020141561113e5760206000803e506000515b801515611177576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d94565b50505050565b600061028d61118c8584611e90565b84611eeb565b61119a612022565b6111a261204b565b600080546040517fc75e0a81000000000000000000000000000000000000000000000000000000008152829173ffffffffffffffffffffffffffffffffffffffff169063c75e0a81906111f9908990600401612df2565b606060405180830381600087803b15801561121357600080fd5b505af1158015611227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061124b91908101906126ed565b805190935060ff1660031461125f57610a25565b6112718660a001518460400151610c59565b915061127d8583611f02565b90508084602001818152505061129c818760a00151886080015161117d565b845260a086015160c08701516112b391839161117d565b604085015260a086015160e08701516112cd91839161117d565b606085015250505092915050565b815181516112e99190611af0565b8252602080830151908201516112ff9190611af0565b6020830152604080830151908201516113189190611af0565b6040830152606080830151908201516113319190611af0565b60609092019190915250565b60008160040183511015151561137f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612dd4565b5050602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b6113b2612022565b60006113bc612022565b6113c4612022565b6113cc612022565b6113de8a60008151811015156103a557fe5b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281529397508301828280156114845780601f1061145957610100808354040283529160200191611484565b820191906000526020600020905b81548152906001019060200180831161146757829003601f168201915b50505050508a600081518110151561149857fe5b60209081029091010151610160015260025473ffffffffffffffffffffffffffffffffffffffff85811691161415611576576114d58a8a88611b57565b8051909350861115611513576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612da4565b61151d85846112db565b61153961153286600001518760600151611af0565b8651611b3a565b1515611571576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612da4565b6116f2565b6115808a87610561565b91506000826060015111156115b55761159e88888460600151611b57565b602080820151908701526060808201519087015290505b6000546040517fe5fa431b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063e5fa431b9061160f908d908a908e90600401612cf4565b608060405180830381600087803b15801561162957600080fd5b505af115801561163d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061166191908101906126cf565b8051909350861461169e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612da4565b6116a885846112db565b6116ba85602001518460200151611b3a565b15156116f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612da4565b610f9684338560000151610fa3565b611709612022565b60008060606000611718612022565b611720612022565b8a5194508460405190808252806020026020018201604052801561174e578160200160208202803883390190505b509350600092505b8483101561188a57611783868c8581518110151561177057fe5b9060200190602002015160e00151611af0565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281529399508301828280156118295780601f106117fe57610100808354040283529160200191611829565b820191906000526020600020905b81548152906001019060200180831161180c57829003601f168201915b50505050508b8481518110151561183c57fe5b6020908102909101015161016001528a518b908490811061185957fe5b9060200190602002015160a00151848481518110151561187557fe5b60209081029091010152600190920191611756565b60008611156118b55761189e898988611b57565b606080820151908901526020808201519089015291505b6000546040517f4d0ae54600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690634d0ae5469061190f908e9088908f90600401612cbb565b608060405180830381600087803b15801561192957600080fd5b505af115801561193d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061196191908101906126cf565b905061196d87826112db565b61197f87602001518260200151611b3a565b15156119b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612da4565b600092505b848310156119f5576119ea8b848151811015156119d557fe5b90602001906020020151610140015133611f18565b6001909201916119bc565b505050505050949350505050565b6000806000861115611ae8576001546040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632e1a7d4d90611a65908990600401612e43565b600060405180830381600087803b158015611a7f57600080fd5b505af1158015611a93573d6000803e3d6000fd5b50505050611aa2858585610b8b565b9150611aae8683610c59565b90506000811115611ae857604051339082156108fc029083906000818181858888f19350505050158015611ae6573d6000803e3d6000fd5b505b505050505050565b600082820183811015611b2f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d74565b8091505b5092915050565b600080611b4c61251c6127108661117d565b909210159392505050565b611b5f612022565b6000806000611b6c612022565b600093505b8751841015611e85576003805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f81018490048402820184019092528181529291830182828015611c1e5780601f10611bf357610100808354040283529160200191611c1e565b820191906000526020600020905b815481529060010190602001808311611c0157829003601f168201915b50505050508885815181101515611c3157fe5b602090810290910181015161014001919091526004805460408051601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600187161502019094169390930492830185900485028101850190915281815292830182828015611ce65780601f10611cbb57610100808354040283529160200191611ce6565b820191906000526020600020905b815481529060010190602001808311611cc957829003601f168201915b50505050508885815181101515611cf957fe5b6020908102909101015161016001528451611d15908790610c59565b9250611d638885815181101515611d2857fe5b9060200190602002015160a00151610ac08a87815181101515611d4757fe5b90602001906020020151608001518b88815181101515610aad57fe5b600054895191935073ffffffffffffffffffffffffffffffffffffffff169063b4be83d5908a9087908110611d9457fe5b90602001906020020151611da9856001611af0565b8a88815181101515611db757fe5b906020019060200201516040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611dfb93929190612e03565b608060405180830381600087803b158015611e1557600080fd5b505af1158015611e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e4d91908101906126cf565b9050611e6181600001518260600151610c59565b8152611e6d85826112db565b84518611611e7a57611e85565b600190930192611b71565b505050509392505050565b600080831515611ea35760009150611b33565b50828202828482811515611eb357fe5b0414611b2f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d74565b6000808284811515611ef957fe5b04949350505050565b6000818310611f115781610b84565b5090919050565b600080611f2c84601063ffffffff610ca016565b9150611f3f84602463ffffffff611fd016565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8316906323b872dd90611f9890309087908690600401612c78565b600060405180830381600087803b158015611fb257600080fd5b505af1158015611fc6573d6000803e3d6000fd5b5050505050505050565b6000610b848383600081602001835110151515612019576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d64565b50016020015190565b608060405190810160405280600081526020016000815260200160008152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b6000610b848235612ee9565b6000601f8201831361208857600080fd5b813561209b61209682612e78565b612e51565b81815260209384019390925082018360005b8381101561061d57813586016120c38882612142565b84525060209283019291909101906001016120ad565b6000601f820183136120ea57600080fd5b81356120f861209682612e78565b81815260209384019390925082018360005b8381101561061d57813586016121208882612252565b845250602092830192919091019060010161210a565b6000610b848251612f2e565b6000601f8201831361215357600080fd5b813561216161209682612e99565b9150808252602083016020830185838301111561217d57600080fd5b610a25838284612f37565b60006080828403121561219a57600080fd5b6121a46080612e51565b905060006121b28484612136565b82525060206121c384848301612136565b60208301525060406121d784828501612136565b60408301525060606121eb84828501612136565b60608301525092915050565b60006060828403121561220957600080fd5b6122136060612e51565b9050600061222184846123b3565b825250602061223284848301612136565b602083015250604061224684828501612136565b60408301525092915050565b6000610180828403121561226557600080fd5b612270610180612e51565b9050600061227e848461206b565b825250602061228f8484830161206b565b60208301525060406122a38482850161206b565b60408301525060606122b78482850161206b565b60608301525060806122cb848285016123a7565b60808301525060a06122df848285016123a7565b60a08301525060c06122f3848285016123a7565b60c08301525060e0612307848285016123a7565b60e08301525061010061231c848285016123a7565b61010083015250610120612332848285016123a7565b6101208301525061014082013567ffffffffffffffff81111561235457600080fd5b61236084828501612142565b6101408301525061016082013567ffffffffffffffff81111561238257600080fd5b61238e84828501612142565b6101608301525092915050565b6000610b848235612f27565b6000610b848235612f2e565b6000610b848251612f31565b600080600080608085870312156123d557600080fd5b60006123e1878761206b565b94505060206123f28782880161206b565b9350506040612403878288016123a7565b925050606085013567ffffffffffffffff81111561242057600080fd5b61242c87828801612142565b91505092959194509250565b60008060006060848603121561244d57600080fd5b6000612459868661206b565b935050602061246a868287016123a7565b925050604084013567ffffffffffffffff81111561248757600080fd5b61249386828701612142565b9150509250925092565b60008060008060008060c087890312156124b657600080fd5b863567ffffffffffffffff8111156124cd57600080fd5b6124d989828a016120d9565b965050602087013567ffffffffffffffff8111156124f657600080fd5b61250289828a01612077565b955050604087013567ffffffffffffffff81111561251f57600080fd5b61252b89828a016120d9565b945050606087013567ffffffffffffffff81111561254857600080fd5b61255489828a01612077565b935050608061256589828a0161239b565b92505060a061257689828a0161206b565b9150509295509295509295565b600080600080600080600060e0888a03121561259e57600080fd5b873567ffffffffffffffff8111156125b557600080fd5b6125c18a828b016120d9565b975050602088013567ffffffffffffffff8111156125de57600080fd5b6125ea8a828b01612077565b965050604088013567ffffffffffffffff81111561260757600080fd5b6126138a828b016120d9565b955050606088013567ffffffffffffffff81111561263057600080fd5b61263c8a828b01612077565b945050608061264d8a828b016123a7565b93505060a061265e8a828b0161239b565b92505060c061266f8a828b0161206b565b91505092959891949750929550565b6000806040838503121561269157600080fd5b823567ffffffffffffffff8111156126a857600080fd5b6126b4858286016120d9565b92505060206126c5858286016123a7565b9150509250929050565b6000608082840312156126e157600080fd5b600061028d8484612188565b6000606082840312156126ff57600080fd5b600061028d84846121f7565b61271481612ee9565b82525050565b600061272582612ee5565b8084526020840193508360208202850161273e85612edf565b60005b8481101561277557838303885261275983835161283c565b925061276482612edf565b602098909801979150600101612741565b50909695505050505050565b600061278c82612ee5565b808452602084019350836020820285016127a585612edf565b60005b848110156127755783830388526127c0838351612b63565b92506127cb82612edf565b6020989098019791506001016127a8565b60006127e782612ee5565b8084526020840193506127f983612edf565b60005b828110156128295761280f868351612c6f565b61281882612edf565b6020969096019591506001016127fc565b5093949350505050565b61271481612f02565b600061284782612ee5565b80845261285b816020860160208601612f43565b61286481612f6f565b9093016020019392505050565b602381527f44454641554c545f46554e4354494f4e5f574554485f434f4e54524143545f4f60208201527f4e4c590000000000000000000000000000000000000000000000000000000000604082015260600190565b601181527f494e56414c49445f4d53475f56414c5545000000000000000000000000000000602082015260400190565b601781527f56414c55455f475245415445525f5448414e5f5a45524f000000000000000000602082015260400190565b602681527f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524560208201527f5155495245440000000000000000000000000000000000000000000000000000604082015260600190565b601081527f55494e543235365f4f564552464c4f5700000000000000000000000000000000602082015260400190565b601881527f4645455f50524f504f5254494f4e5f544f4f5f4c415247450000000000000000602082015260400190565b600f81527f5452414e534645525f4641494c45440000000000000000000000000000000000602082015260400190565b601681527f554e41434345505441424c455f5448524553484f4c4400000000000000000000602082015260400190565b602681527f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524560208201527f5155495245440000000000000000000000000000000000000000000000000000604082015260600190565b601781527f554e535550504f525445445f544f4b454e5f50524f5859000000000000000000602082015260400190565b602581527f475245415445525f4f525f455155414c5f544f5f345f4c454e4754485f52455160208201527f5549524544000000000000000000000000000000000000000000000000000000604082015260600190565b80516080830190612b2a8482612c6f565b506020820151612b3d6020850182612c6f565b506040820151612b506040850182612c6f565b5060608201516111776060850182612c6f565b8051600090610180840190612b78858261270b565b506020830151612b8b602086018261270b565b506040830151612b9e604086018261270b565b506060830151612bb1606086018261270b565b506080830151612bc46080860182612c6f565b5060a0830151612bd760a0860182612c6f565b5060c0830151612bea60c0860182612c6f565b5060e0830151612bfd60e0860182612c6f565b50610100830151612c12610100860182612c6f565b50610120830151612c27610120860182612c6f565b50610140830151848203610140860152612c41828261283c565b915050610160830151848203610160860152612c5d828261283c565b95945050505050565b61271481612f27565b61271481612f2e565b60608101612c86828661270b565b612c93602083018561270b565b61028d6040830184612c6f565b60408101612cae828561270b565b610b846020830184612c6f565b60608082528101612ccc8186612781565b90508181036020830152612ce081856127dc565b90508181036040830152612c5d818461271a565b60608082528101612d058186612781565b9050612d146020830185612c6f565b8181036040830152612c5d818461271a565b60208101610c9a8284612833565b60208082528101610c9a81612871565b60208082528101610c9a816128c7565b60208082528101610c9a816128f7565b60208082528101610c9a81612927565b60208082528101610c9a8161297d565b60208082528101610c9a816129ad565b60208082528101610c9a816129dd565b60208082528101610c9a81612a0d565b60208082528101610c9a81612a3d565b60208082528101610c9a81612a93565b60208082528101610c9a81612ac3565b60808101610c9a8284612b19565b60208082528101610b848184612b63565b60608082528101612e148186612b63565b9050612e236020830185612c6f565b8181036040830152612c5d818461283c565b60208101610c9a8284612c66565b60208101610c9a8284612c6f565b60405181810167ffffffffffffffff81118282101715612e7057600080fd5b604052919050565b600067ffffffffffffffff821115612e8f57600080fd5b5060209081020190565b600067ffffffffffffffff821115612eb057600080fd5b506020601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b60200190565b5190565b73ffffffffffffffffffffffffffffffffffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61ffff1690565b90565b60ff1690565b82818337506000910152565b60005b83811015612f5e578181015183820152602001612f46565b838111156111775750506000910152565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016905600a265627a7a723058208489db9498c397b472d53b1a17ffb22e708fa9c873a4adac874bc0843cb5a01d6c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x35F9 CODESIZE SUB DUP1 PUSH3 0x35F9 DUP4 CODECOPY DUP2 ADD DUP1 PUSH1 0x40 MSTORE PUSH3 0x37 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x433 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP9 AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT SWAP3 DUP4 AND OR DUP4 SSTORE PUSH1 0x1 DUP1 SLOAD DUP3 DUP10 AND SWAP1 DUP5 AND OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP2 DUP8 AND SWAP2 SWAP1 SWAP3 AND OR SWAP1 SSTORE DUP3 MLOAD DUP7 SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH3 0x8F SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x2E6 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0xA5 SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x2E6 JUMP JUMPDEST POP POP PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x4552433230546F6B656E28616464726573732900000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x13 ADD DUP2 KECCAK256 PUSH32 0x6070410800000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND SWAP6 POP PUSH4 0x60704108 SWAP5 POP PUSH3 0x125 SWAP4 POP SWAP1 SWAP2 POP PUSH1 0x4 ADD PUSH3 0x54A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x155 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0x17B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x40A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO PUSH3 0x2DA JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH3 0x1DC SWAP1 DUP5 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH3 0x52B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x20C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0x232 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x4E3 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH3 0x282 SWAP1 DUP5 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH3 0x52B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x29D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x2B2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0x2D8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x4E3 JUMP JUMPDEST POP JUMPDEST POP POP POP POP POP POP PUSH3 0x618 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0x329 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x359 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x359 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x359 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x33C JUMP JUMPDEST POP PUSH3 0x367 SWAP3 SWAP2 POP PUSH3 0x36B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 0x388 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x367 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x372 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x399 DUP3 MLOAD PUSH3 0x5AF JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x399 DUP3 MLOAD PUSH3 0x5E0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH3 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x3D7 PUSH3 0x3D1 DUP3 PUSH3 0x587 JUMP JUMPDEST PUSH3 0x560 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH3 0x3F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x401 DUP4 DUP3 DUP5 PUSH3 0x5E5 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x41D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x42B DUP5 DUP5 PUSH3 0x38B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH3 0x44C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x45A DUP9 DUP9 PUSH3 0x38B JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH3 0x46D DUP9 DUP3 DUP10 ADD PUSH3 0x38B JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH3 0x480 DUP9 DUP3 DUP10 ADD PUSH3 0x38B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH3 0x49D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x4AB DUP9 DUP3 DUP10 ADD PUSH3 0x3AE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH3 0x4C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x4D6 DUP9 DUP3 DUP10 ADD PUSH3 0x3AE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x4F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x42B DUP5 DUP5 PUSH3 0x3A0 JUMP JUMPDEST PUSH3 0x50F DUP2 PUSH3 0x5AF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH3 0x50F DUP2 PUSH3 0x5BB JUMP JUMPDEST PUSH3 0x50F DUP2 PUSH3 0x388 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH3 0x53B DUP3 DUP6 PUSH3 0x504 JUMP JUMPDEST PUSH3 0x399 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x520 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH3 0x55A DUP3 DUP5 PUSH3 0x515 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP3 GT ISZERO PUSH3 0x59E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x602 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x5E8 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x612 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x2FD1 DUP1 PUSH3 0x628 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x150B7A02 DUP2 EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0x169645F2 EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0x1C5B1EC4 EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0x20472CF7 EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0x725CEF06 EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0xB3CD4254 EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0xBC063E1A EQ PUSH2 0x1BF JUMPI DUP1 PUSH4 0xC5E6E6AC EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0xE58E9C16 EQ PUSH2 0x1F4 JUMPI DUP1 PUSH4 0xF0B9E5BA EQ PUSH2 0x214 JUMPI JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D34 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11F PUSH2 0x11A CALLDATASIZE PUSH1 0x4 PUSH2 0x23BF JUMP JUMPDEST PUSH2 0x234 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12C SWAP2 SWAP1 PUSH2 0x2D26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x148 PUSH2 0x143 CALLDATASIZE PUSH1 0x4 PUSH2 0x249D JUMP JUMPDEST PUSH2 0x295 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12C SWAP2 SWAP1 PUSH2 0x2DE4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x148 PUSH2 0x170 CALLDATASIZE PUSH1 0x4 PUSH2 0x267E JUMP JUMPDEST PUSH2 0x561 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x627 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12C SWAP2 SWAP1 PUSH2 0x2E35 JUMP JUMPDEST PUSH2 0x148 PUSH2 0x1A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2583 JUMP JUMPDEST PUSH2 0x62D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x9AF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x9B5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x148 PUSH2 0x1EF CALLDATASIZE PUSH1 0x4 PUSH2 0x267E JUMP JUMPDEST PUSH2 0x9BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x200 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x148 PUSH2 0x20F CALLDATASIZE PUSH1 0x4 PUSH2 0x267E JUMP JUMPDEST PUSH2 0xA2E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x220 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11F PUSH2 0x22F CALLDATASIZE PUSH1 0x4 PUSH2 0x2438 JUMP JUMPDEST PUSH2 0xB2B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x6F6E455243373231526563656976656428616464726573732C61646472657373 DUP2 MSTORE PUSH32 0x2C75696E743235362C6279746573290000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x2F ADD SWAP1 KECCAK256 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x29D PUSH2 0x2022 JUMP JUMPDEST CALLVALUE PUSH1 0x0 DUP1 DUP1 DUP1 DUP5 GT PUSH2 0x2DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D54 JUMP JUMPDEST PUSH2 0x2E6 DUP5 DUP9 DUP9 PUSH2 0xB8B JUMP JUMPDEST SWAP3 POP PUSH2 0x2F2 DUP5 DUP5 PUSH2 0xC59 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x38E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x3BB DUP12 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3A5 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD PUSH1 0x10 PUSH2 0xCA0 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP5 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x461 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x436 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x461 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x444 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP12 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x475 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MSTORE PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x4B9 JUMPI PUSH2 0x4B2 DUP12 DUP12 DUP5 PUSH2 0xD01 JUMP JUMPDEST SWAP5 POP PUSH2 0x4C9 JUMP JUMPDEST PUSH2 0x4C6 DUP12 DUP12 DUP12 DUP12 DUP7 PUSH2 0xE1B JUMP JUMPDEST SWAP5 POP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD DUP5 LT ISZERO PUSH2 0x507 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D44 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD DUP3 EQ PUSH2 0x544 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x553 DUP2 CALLER DUP8 PUSH1 0x0 ADD MLOAD PUSH2 0xFA3 JUMP JUMPDEST POP POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x569 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x576 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP7 MLOAD DUP5 LT ISZERO PUSH2 0x61D JUMPI PUSH2 0x592 DUP7 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST SWAP3 POP PUSH2 0x5D5 DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x5A5 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP9 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x5C1 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0x117D JUMP JUMPDEST SWAP2 POP PUSH2 0x5F8 DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x5E8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 PUSH2 0x1192 JUMP JUMPDEST SWAP1 POP PUSH2 0x604 DUP6 DUP3 PUSH2 0x12DB JUMP JUMPDEST DUP5 MLOAD DUP7 EQ ISZERO PUSH2 0x612 JUMPI PUSH2 0x61D JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x57B JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x251C DUP2 JUMP JUMPDEST PUSH2 0x635 PUSH2 0x2022 JUMP JUMPDEST CALLVALUE PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x671 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D54 JUMP JUMPDEST PUSH1 0x0 DUP7 GT PUSH2 0x6AB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D54 JUMP JUMPDEST PUSH2 0x6D3 DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x6BD JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD PUSH1 0x0 PUSH2 0x133D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x4552433230546F6B656E28616464726573732900000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x13 ADD SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP1 DUP4 AND SWAP2 AND EQ DUP1 PUSH2 0x78F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x455243373231546F6B656E28616464726573732C75696E743235362900000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x1C ADD SWAP1 KECCAK256 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 0x7C7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DC4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x84D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x861 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x4552433230546F6B656E28616464726573732900000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x13 ADD SWAP1 KECCAK256 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP6 DUP2 AND SWAP2 AND EQ ISZERO SWAP3 POP PUSH2 0x8DA SWAP2 POP POP JUMPI PUSH2 0x8D3 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x13AA JUMP JUMPDEST SWAP3 POP PUSH2 0x947 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x455243373231546F6B656E28616464726573732C75696E743235362900000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x1C ADD SWAP1 KECCAK256 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x947 JUMPI PUSH2 0x944 DUP11 DUP11 DUP11 DUP11 PUSH2 0x1701 JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD DUP3 LT ISZERO PUSH2 0x985 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D44 JUMP JUMPDEST PUSH2 0x9A2 PUSH2 0x996 DUP4 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD DUP8 DUP8 PUSH2 0x1A03 JUMP JUMPDEST POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2710 DUP2 JUMP JUMPDEST PUSH2 0x3E8 DUP2 JUMP JUMPDEST PUSH2 0x9C3 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x9CE PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 SWAP3 POP JUMPDEST DUP6 MLOAD DUP4 LT ISZERO PUSH2 0xA25 JUMPI PUSH2 0x9EA DUP6 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST SWAP2 POP PUSH2 0x9FD DUP7 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x5E8 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0xA09 DUP5 DUP3 PUSH2 0x12DB JUMP JUMPDEST DUP5 DUP5 PUSH1 0x20 ADD MLOAD EQ ISZERO PUSH2 0xA1A JUMPI PUSH2 0xA25 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x9D3 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xA36 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xA43 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP7 MLOAD DUP5 LT ISZERO PUSH2 0x61D JUMPI PUSH2 0xA5F DUP7 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST SWAP3 POP PUSH2 0xAC6 DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA72 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH2 0xAC0 DUP10 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA91 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP11 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAAD JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST DUP6 PUSH2 0x117D JUMP JUMPDEST SWAP2 POP PUSH2 0xAF3 DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAD9 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0xAEE DUP5 PUSH1 0x1 PUSH2 0x1AF0 JUMP JUMPDEST PUSH2 0x1192 JUMP JUMPDEST SWAP1 POP PUSH2 0xB07 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST DUP2 MSTORE PUSH2 0xB13 DUP6 DUP3 PUSH2 0x12DB JUMP JUMPDEST DUP5 MLOAD DUP7 GT PUSH2 0xB20 JUMPI PUSH2 0x61D JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0xA48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x6F6E455243373231526563656976656428616464726573732C75696E74323536 DUP2 MSTORE PUSH32 0x2C62797465732900000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x27 ADD SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xFFFF AND GT DUP1 ISZERO PUSH2 0xBB5 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xB84 JUMPI PUSH2 0x3E8 PUSH2 0xFFFF DUP5 AND GT ISZERO PUSH2 0xBFA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D84 JUMP JUMPDEST PUSH2 0xC0B PUSH2 0xFFFF DUP5 AND PUSH2 0x2710 DUP7 PUSH2 0x117D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xC51 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xC95 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D74 JUMP JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0xCE2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DB4 JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0xD09 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7E1D980800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x7E1D9808 SWAP1 PUSH2 0xD64 SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2CF4 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD92 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xDB6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x26CF JUMP JUMPDEST SWAP2 POP PUSH2 0xDCA DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST SWAP1 POP PUSH2 0xDDA DUP3 PUSH1 0x0 ADD MLOAD DUP3 PUSH2 0x1B3A JUMP JUMPDEST ISZERO ISZERO PUSH2 0xE12 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST DUP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xE23 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE2D PUSH2 0x2022 JUMP JUMPDEST PUSH2 0xE35 PUSH2 0x2022 JUMP JUMPDEST PUSH2 0xE3D PUSH2 0x2022 JUMP JUMPDEST DUP6 SWAP4 POP PUSH2 0xE4A DUP11 DUP8 PUSH2 0x9BB JUMP JUMPDEST SWAP3 POP PUSH1 0x0 DUP4 PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0xEDE JUMPI PUSH2 0xE68 DUP9 DUP9 DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x1B57 JUMP JUMPDEST SWAP2 POP PUSH2 0xE81 DUP7 PUSH2 0xE7C DUP9 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST PUSH2 0x1B3A JUMP JUMPDEST ISZERO ISZERO PUSH2 0xEB9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0xEC7 DUP5 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP5 ADD MLOAD SWAP1 DUP8 ADD MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD SWAP1 DUP8 ADD MSTORE SWAP4 POP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7E1D980800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x7E1D9808 SWAP1 PUSH2 0xF38 SWAP1 DUP14 SWAP1 DUP9 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x2CF4 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF66 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xF8A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x26CF JUMP JUMPDEST SWAP1 POP PUSH2 0xF96 DUP6 DUP3 PUSH2 0x12DB JUMP JUMPDEST POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x7472616E7366657228616464726573732C75696E743235362900000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x19 ADD DUP2 KECCAK256 PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP2 SWAP1 PUSH2 0x1001 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x2CA0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR DUP4 MSTORE MLOAD DUP2 MLOAD SWAP2 SWAP3 SWAP1 SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x10A5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x108D JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x10D2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP3 POP POP POP DUP1 ISZERO ISZERO PUSH2 0x1121 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D94 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x113E JUMPI POP PUSH1 0x0 RETURNDATASIZE PUSH1 0x20 EQ ISZERO PUSH2 0x113E JUMPI PUSH1 0x20 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD JUMPDEST DUP1 ISZERO ISZERO PUSH2 0x1177 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D94 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28D PUSH2 0x118C DUP6 DUP5 PUSH2 0x1E90 JUMP JUMPDEST DUP5 PUSH2 0x1EEB JUMP JUMPDEST PUSH2 0x119A PUSH2 0x2022 JUMP JUMPDEST PUSH2 0x11A2 PUSH2 0x204B JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0xC75E0A8100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xC75E0A81 SWAP1 PUSH2 0x11F9 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2DF2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1227 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x124B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x26ED JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP4 POP PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x125F JUMPI PUSH2 0xA25 JUMP JUMPDEST PUSH2 0x1271 DUP7 PUSH1 0xA0 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST SWAP2 POP PUSH2 0x127D DUP6 DUP4 PUSH2 0x1F02 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x129C DUP2 DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0x80 ADD MLOAD PUSH2 0x117D JUMP JUMPDEST DUP5 MSTORE PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 DUP8 ADD MLOAD PUSH2 0x12B3 SWAP2 DUP4 SWAP2 PUSH2 0x117D JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xE0 DUP8 ADD MLOAD PUSH2 0x12CD SWAP2 DUP4 SWAP2 PUSH2 0x117D JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD PUSH2 0x12E9 SWAP2 SWAP1 PUSH2 0x1AF0 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x12FF SWAP2 SWAP1 PUSH2 0x1AF0 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x1318 SWAP2 SWAP1 PUSH2 0x1AF0 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x1331 SWAP2 SWAP1 PUSH2 0x1AF0 JUMP JUMPDEST PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x137F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DD4 JUMP JUMPDEST POP POP PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH2 0x13B2 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13BC PUSH2 0x2022 JUMP JUMPDEST PUSH2 0x13C4 PUSH2 0x2022 JUMP JUMPDEST PUSH2 0x13CC PUSH2 0x2022 JUMP JUMPDEST PUSH2 0x13DE DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3A5 JUMPI INVALID JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP8 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1484 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1459 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1484 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1467 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1498 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MSTORE PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x1576 JUMPI PUSH2 0x14D5 DUP11 DUP11 DUP9 PUSH2 0x1B57 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP4 POP DUP7 GT ISZERO PUSH2 0x1513 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x151D DUP6 DUP5 PUSH2 0x12DB JUMP JUMPDEST PUSH2 0x1539 PUSH2 0x1532 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD PUSH2 0x1AF0 JUMP JUMPDEST DUP7 MLOAD PUSH2 0x1B3A JUMP JUMPDEST ISZERO ISZERO PUSH2 0x1571 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x16F2 JUMP JUMPDEST PUSH2 0x1580 DUP11 DUP8 PUSH2 0x561 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x15B5 JUMPI PUSH2 0x159E DUP9 DUP9 DUP5 PUSH1 0x60 ADD MLOAD PUSH2 0x1B57 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP8 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MLOAD SWAP1 DUP8 ADD MSTORE SWAP1 POP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0xE5FA431B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xE5FA431B SWAP1 PUSH2 0x160F SWAP1 DUP14 SWAP1 DUP11 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x2CF4 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1629 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x163D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1661 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x26CF JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP4 POP DUP7 EQ PUSH2 0x169E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x16A8 DUP6 DUP5 PUSH2 0x12DB JUMP JUMPDEST PUSH2 0x16BA DUP6 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x1B3A JUMP JUMPDEST ISZERO ISZERO PUSH2 0x16F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0xF96 DUP5 CALLER DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0xFA3 JUMP JUMPDEST PUSH2 0x1709 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH1 0x0 PUSH2 0x1718 PUSH2 0x2022 JUMP JUMPDEST PUSH2 0x1720 PUSH2 0x2022 JUMP JUMPDEST DUP11 MLOAD SWAP5 POP DUP5 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x174E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH2 0x188A JUMPI PUSH2 0x1783 DUP7 DUP13 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1770 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH2 0x1AF0 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP10 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1829 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x17FE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1829 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x180C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP12 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x183C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MSTORE DUP11 MLOAD DUP12 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x1859 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP5 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1875 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x1756 JUMP JUMPDEST PUSH1 0x0 DUP7 GT ISZERO PUSH2 0x18B5 JUMPI PUSH2 0x189E DUP10 DUP10 DUP9 PUSH2 0x1B57 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 ADD MLOAD SWAP1 DUP10 ADD MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP10 ADD MSTORE SWAP2 POP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x4D0AE54600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x4D0AE546 SWAP1 PUSH2 0x190F SWAP1 DUP15 SWAP1 DUP9 SWAP1 DUP16 SWAP1 PUSH1 0x4 ADD PUSH2 0x2CBB JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1929 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x193D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1961 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x26CF JUMP JUMPDEST SWAP1 POP PUSH2 0x196D DUP8 DUP3 PUSH2 0x12DB JUMP JUMPDEST PUSH2 0x197F DUP8 PUSH1 0x20 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x1B3A JUMP JUMPDEST ISZERO ISZERO PUSH2 0x19B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST PUSH1 0x0 SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH2 0x19F5 JUMPI PUSH2 0x19EA DUP12 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x19D5 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD CALLER PUSH2 0x1F18 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x19BC JUMP JUMPDEST POP POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP7 GT ISZERO PUSH2 0x1AE8 JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x1A65 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2E43 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A93 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1AA2 DUP6 DUP6 DUP6 PUSH2 0xB8B JUMP JUMPDEST SWAP2 POP PUSH2 0x1AAE DUP7 DUP4 PUSH2 0xC59 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x1AE8 JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1AE6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1B2F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D74 JUMP JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1B4C PUSH2 0x251C PUSH2 0x2710 DUP7 PUSH2 0x117D JUMP JUMPDEST SWAP1 SWAP3 LT ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1B5F PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1B6C PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP8 MLOAD DUP5 LT ISZERO PUSH2 0x1E85 JUMPI PUSH1 0x3 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x2 PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x100 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1C1E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1BF3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1C1E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1C01 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP9 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1C31 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH2 0x140 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP8 AND ISZERO MUL ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV SWAP3 DUP4 ADD DUP6 SWAP1 DIV DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP2 MSTORE DUP2 DUP2 MSTORE SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1CE6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1CBB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1CE6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1CC9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP9 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1CF9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MSTORE DUP5 MLOAD PUSH2 0x1D15 SWAP1 DUP8 SWAP1 PUSH2 0xC59 JUMP JUMPDEST SWAP3 POP PUSH2 0x1D63 DUP9 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1D28 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH2 0xAC0 DUP11 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1D47 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP12 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAAD JUMPI INVALID JUMPDEST PUSH1 0x0 SLOAD DUP10 MLOAD SWAP2 SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xB4BE83D5 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0x1D94 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x1DA9 DUP6 PUSH1 0x1 PUSH2 0x1AF0 JUMP JUMPDEST DUP11 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1DB7 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DFB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2E03 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1E29 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1E4D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x26CF JUMP JUMPDEST SWAP1 POP PUSH2 0x1E61 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1E6D DUP6 DUP3 PUSH2 0x12DB JUMP JUMPDEST DUP5 MLOAD DUP7 GT PUSH2 0x1E7A JUMPI PUSH2 0x1E85 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x1B71 JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 ISZERO ISZERO PUSH2 0x1EA3 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x1B33 JUMP JUMPDEST POP DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 0x1EB3 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1B2F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D74 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 0x1EF9 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1F11 JUMPI DUP2 PUSH2 0xB84 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F2C DUP5 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0xCA0 AND JUMP JUMPDEST SWAP2 POP PUSH2 0x1F3F DUP5 PUSH1 0x24 PUSH4 0xFFFFFFFF PUSH2 0x1FD0 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x1F98 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x2C78 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1FC6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB84 DUP4 DUP4 PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x2019 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D64 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB84 DUP3 CALLDATALOAD PUSH2 0x2EE9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x2088 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x209B PUSH2 0x2096 DUP3 PUSH2 0x2E78 JUMP JUMPDEST PUSH2 0x2E51 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x61D JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x20C3 DUP9 DUP3 PUSH2 0x2142 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x20AD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x20EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x20F8 PUSH2 0x2096 DUP3 PUSH2 0x2E78 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x61D JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x2120 DUP9 DUP3 PUSH2 0x2252 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x210A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB84 DUP3 MLOAD PUSH2 0x2F2E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x2153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2161 PUSH2 0x2096 DUP3 PUSH2 0x2E99 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x217D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA25 DUP4 DUP3 DUP5 PUSH2 0x2F37 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x219A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21A4 PUSH1 0x80 PUSH2 0x2E51 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x21B2 DUP5 DUP5 PUSH2 0x2136 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x21C3 DUP5 DUP5 DUP4 ADD PUSH2 0x2136 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x21D7 DUP5 DUP3 DUP6 ADD PUSH2 0x2136 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x21EB DUP5 DUP3 DUP6 ADD PUSH2 0x2136 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2213 PUSH1 0x60 PUSH2 0x2E51 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2221 DUP5 DUP5 PUSH2 0x23B3 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x2232 DUP5 DUP5 DUP4 ADD PUSH2 0x2136 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x2246 DUP5 DUP3 DUP6 ADD PUSH2 0x2136 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2265 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2270 PUSH2 0x180 PUSH2 0x2E51 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x227E DUP5 DUP5 PUSH2 0x206B JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x228F DUP5 DUP5 DUP4 ADD PUSH2 0x206B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x22A3 DUP5 DUP3 DUP6 ADD PUSH2 0x206B JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x22B7 DUP5 DUP3 DUP6 ADD PUSH2 0x206B JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x22CB DUP5 DUP3 DUP6 ADD PUSH2 0x23A7 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x22DF DUP5 DUP3 DUP6 ADD PUSH2 0x23A7 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x22F3 DUP5 DUP3 DUP6 ADD PUSH2 0x23A7 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0x2307 DUP5 DUP3 DUP6 ADD PUSH2 0x23A7 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP PUSH2 0x100 PUSH2 0x231C DUP5 DUP3 DUP6 ADD PUSH2 0x23A7 JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH2 0x120 PUSH2 0x2332 DUP5 DUP3 DUP6 ADD PUSH2 0x23A7 JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MSTORE POP PUSH2 0x140 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2354 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2360 DUP5 DUP3 DUP6 ADD PUSH2 0x2142 JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MSTORE POP PUSH2 0x160 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x238E DUP5 DUP3 DUP6 ADD PUSH2 0x2142 JUMP JUMPDEST PUSH2 0x160 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB84 DUP3 CALLDATALOAD PUSH2 0x2F27 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB84 DUP3 CALLDATALOAD PUSH2 0x2F2E JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB84 DUP3 MLOAD PUSH2 0x2F31 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x23D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x23E1 DUP8 DUP8 PUSH2 0x206B JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x23F2 DUP8 DUP3 DUP9 ADD PUSH2 0x206B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2403 DUP8 DUP3 DUP9 ADD PUSH2 0x23A7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2420 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x242C DUP8 DUP3 DUP9 ADD PUSH2 0x2142 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x244D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2459 DUP7 DUP7 PUSH2 0x206B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x246A DUP7 DUP3 DUP8 ADD PUSH2 0x23A7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2487 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2493 DUP7 DUP3 DUP8 ADD PUSH2 0x2142 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x24B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24D9 DUP10 DUP3 DUP11 ADD PUSH2 0x20D9 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2502 DUP10 DUP3 DUP11 ADD PUSH2 0x2077 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x251F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x252B DUP10 DUP3 DUP11 ADD PUSH2 0x20D9 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2548 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2554 DUP10 DUP3 DUP11 ADD PUSH2 0x2077 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x2565 DUP10 DUP3 DUP11 ADD PUSH2 0x239B JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x2576 DUP10 DUP3 DUP11 ADD PUSH2 0x206B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x259E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25C1 DUP11 DUP3 DUP12 ADD PUSH2 0x20D9 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25EA DUP11 DUP3 DUP12 ADD PUSH2 0x2077 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2607 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2613 DUP11 DUP3 DUP12 ADD PUSH2 0x20D9 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2630 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x263C DUP11 DUP3 DUP12 ADD PUSH2 0x2077 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x264D DUP11 DUP3 DUP12 ADD PUSH2 0x23A7 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x265E DUP11 DUP3 DUP12 ADD PUSH2 0x239B JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x266F DUP11 DUP3 DUP12 ADD PUSH2 0x206B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2691 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x26B4 DUP6 DUP3 DUP7 ADD PUSH2 0x20D9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x26C5 DUP6 DUP3 DUP7 ADD PUSH2 0x23A7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x28D DUP5 DUP5 PUSH2 0x2188 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x28D DUP5 DUP5 PUSH2 0x21F7 JUMP JUMPDEST PUSH2 0x2714 DUP2 PUSH2 0x2EE9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2725 DUP3 PUSH2 0x2EE5 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x273E DUP6 PUSH2 0x2EDF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2775 JUMPI DUP4 DUP4 SUB DUP9 MSTORE PUSH2 0x2759 DUP4 DUP4 MLOAD PUSH2 0x283C JUMP JUMPDEST SWAP3 POP PUSH2 0x2764 DUP3 PUSH2 0x2EDF JUMP JUMPDEST PUSH1 0x20 SWAP9 SWAP1 SWAP9 ADD SWAP8 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x2741 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x278C DUP3 PUSH2 0x2EE5 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x27A5 DUP6 PUSH2 0x2EDF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2775 JUMPI DUP4 DUP4 SUB DUP9 MSTORE PUSH2 0x27C0 DUP4 DUP4 MLOAD PUSH2 0x2B63 JUMP JUMPDEST SWAP3 POP PUSH2 0x27CB DUP3 PUSH2 0x2EDF JUMP JUMPDEST PUSH1 0x20 SWAP9 SWAP1 SWAP9 ADD SWAP8 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x27A8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27E7 DUP3 PUSH2 0x2EE5 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH2 0x27F9 DUP4 PUSH2 0x2EDF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2829 JUMPI PUSH2 0x280F DUP7 DUP4 MLOAD PUSH2 0x2C6F JUMP JUMPDEST PUSH2 0x2818 DUP3 PUSH2 0x2EDF JUMP JUMPDEST PUSH1 0x20 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x27FC JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2714 DUP2 PUSH2 0x2F02 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2847 DUP3 PUSH2 0x2EE5 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x285B DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2F43 JUMP JUMPDEST PUSH2 0x2864 DUP2 PUSH2 0x2F6F JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x23 DUP2 MSTORE PUSH32 0x44454641554C545F46554E4354494F4E5F574554485F434F4E54524143545F4F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x4E4C590000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x11 DUP2 MSTORE PUSH32 0x494E56414C49445F4D53475F56414C5545000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x17 DUP2 MSTORE PUSH32 0x56414C55455F475245415445525F5448414E5F5A45524F000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x26 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x10 DUP2 MSTORE PUSH32 0x55494E543235365F4F564552464C4F5700000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x18 DUP2 MSTORE PUSH32 0x4645455F50524F504F5254494F4E5F544F4F5F4C415247450000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP2 MSTORE PUSH32 0x5452414E534645525F4641494C45440000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x16 DUP2 MSTORE PUSH32 0x554E41434345505441424C455F5448524553484F4C4400000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x26 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x17 DUP2 MSTORE PUSH32 0x554E535550504F525445445F544F4B454E5F50524F5859000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x25 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F345F4C454E4754485F524551 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5549524544000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0x2B2A DUP5 DUP3 PUSH2 0x2C6F JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2B3D PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2C6F JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2B50 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x2C6F JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1177 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x2C6F JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x180 DUP5 ADD SWAP1 PUSH2 0x2B78 DUP6 DUP3 PUSH2 0x270B JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x2B8B PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x270B JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x2B9E PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x270B JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x2BB1 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x270B JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x2BC4 PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x2C6F JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x2BD7 PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x2C6F JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x2BEA PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0x2C6F JUMP JUMPDEST POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x2BFD PUSH1 0xE0 DUP7 ADD DUP3 PUSH2 0x2C6F JUMP JUMPDEST POP PUSH2 0x100 DUP4 ADD MLOAD PUSH2 0x2C12 PUSH2 0x100 DUP7 ADD DUP3 PUSH2 0x2C6F JUMP JUMPDEST POP PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x2C27 PUSH2 0x120 DUP7 ADD DUP3 PUSH2 0x2C6F JUMP JUMPDEST POP PUSH2 0x140 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x140 DUP7 ADD MSTORE PUSH2 0x2C41 DUP3 DUP3 PUSH2 0x283C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x160 DUP7 ADD MSTORE PUSH2 0x2C5D DUP3 DUP3 PUSH2 0x283C JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2714 DUP2 PUSH2 0x2F27 JUMP JUMPDEST PUSH2 0x2714 DUP2 PUSH2 0x2F2E JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x2C86 DUP3 DUP7 PUSH2 0x270B JUMP JUMPDEST PUSH2 0x2C93 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x270B JUMP JUMPDEST PUSH2 0x28D PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2C6F JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x2CAE DUP3 DUP6 PUSH2 0x270B JUMP JUMPDEST PUSH2 0xB84 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2C6F JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x2CCC DUP2 DUP7 PUSH2 0x2781 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2CE0 DUP2 DUP6 PUSH2 0x27DC JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2C5D DUP2 DUP5 PUSH2 0x271A JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x2D05 DUP2 DUP7 PUSH2 0x2781 JUMP JUMPDEST SWAP1 POP PUSH2 0x2D14 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2C6F JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2C5D DUP2 DUP5 PUSH2 0x271A JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xC9A DUP3 DUP5 PUSH2 0x2833 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x2871 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x28C7 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x28F7 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x2927 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x297D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x29AD JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x29DD JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x2A0D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x2A3D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x2A93 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x2AC3 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xC9A DUP3 DUP5 PUSH2 0x2B19 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xB84 DUP2 DUP5 PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x2E14 DUP2 DUP7 PUSH2 0x2B63 JUMP JUMPDEST SWAP1 POP PUSH2 0x2E23 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2C6F JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2C5D DUP2 DUP5 PUSH2 0x283C JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xC9A DUP3 DUP5 PUSH2 0x2C66 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xC9A DUP3 DUP5 PUSH2 0x2C6F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2E70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2E8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2EB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2F5E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2F46 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1177 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP1 JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 DUP5 DUP10 0xdb SWAP5 SWAP9 0xc3 SWAP8 0xb4 PUSH19 0xD53B1A17FFB22E708FA9C873A4ADAC874BC084 EXTCODECOPY 0xb5 LOG0 SAR PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
				"sourceMap": "834:541:0:-;;;989:384;8:9:-1;5:2;;;30:1;27;20:12;5:2;989:384:0;;;;;;;;;;;;;;;;;;;;;;;;1438:20:4;894:31:1;;-1:-1:-1;;;;;894:31:1;;;-1:-1:-1;;;;;;894:31:1;;;;;;;935:38;;;;;;;;;;;983:9;:34;;;;;;;;;;;;1027:30;;1215:9:0;;1238:11;;1263:9;;1286:13;;1313:14;;1027:30:1;;:14;;:30;;;;;:::i;:::-;-1:-1:-1;1067:32:1;;;;:15;;:32;;;;;:::i;:::-;-1:-1:-1;;1461:8:4;;1204:32;;;;;;;;;;;;;;;;1461:37;;;-1:-1:-1;;;;;1461:8:4;;;;-1:-1:-1;1461:22:4;;-1:-1:-1;1461:37:4;;-1:-1:-1;1204:32:4;;-1:-1:-1;1461:37:4;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1461:37:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1461:37:4;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1461:37:4;;;;;;;;;1438:60;-1:-1:-1;;;;;;1512:26:4;;;1508:155;;1554:11;;:43;;;;;-1:-1:-1;;;;;1554:11:4;;;;:19;;:43;;1574:12;;-1:-1:-1;;1377:10:4;1554:43;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1554:43:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1554:43:4;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1554:43:4;;;;;;;;;-1:-1:-1;1611:9:4;;:41;;;;;-1:-1:-1;;;;;1611:9:4;;;;:17;;:41;;1629:12;;-1:-1:-1;;1377:10:4;1611:41;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1611:41:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1611:41:4;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1611:41:4;;;;;;;;;;1508:155;1394:275;989:384:0;;;;;834:541;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;834:541:0;;;-1:-1:-1;834:541:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;5:122:-1:-;;83:39;114:6;108:13;83:39;;;74:48;68:59;-1:-1;;;68:59;134:116;;209:36;237:6;231:13;209:36;;258:442;;363:4;351:17;;347:27;-1:-1;337:2;;388:1;385;378:12;337:2;418:6;412:13;440:64;455:48;496:6;455:48;;;440:64;;;431:73;;524:6;517:5;510:21;560:4;552:6;548:17;593:4;586:5;582:16;628:3;619:6;614:3;610:16;607:25;604:2;;;645:1;642;635:12;604:2;655:39;687:6;682:3;677;655:39;;;330:370;;;;;;;;708:263;;823:2;811:9;802:7;798:23;794:32;791:2;;;839:1;836;829:12;791:2;874:1;891:64;947:7;927:9;891:64;;;881:74;785:186;-1:-1;;;;785:186;978:1003;;;;;;1179:3;1167:9;1158:7;1154:23;1150:33;1147:2;;;1196:1;1193;1186:12;1147:2;1231:1;1248:64;1304:7;1284:9;1248:64;;;1238:74;;1210:108;1349:2;1367:64;1423:7;1414:6;1403:9;1399:22;1367:64;;;1357:74;;1328:109;1468:2;1486:64;1542:7;1533:6;1522:9;1518:22;1486:64;;;1476:74;;1447:109;1608:2;1597:9;1593:18;1587:25;-1:-1;;;;;1624:6;1621:30;1618:2;;;1664:1;1661;1654:12;1618:2;1684:73;1749:7;1740:6;1729:9;1725:22;1684:73;;;1674:83;;1566:197;1815:3;1804:9;1800:19;1794:26;-1:-1;;;;;1832:6;1829:30;1826:2;;;1872:1;1869;1862:12;1826:2;1892:73;1957:7;1948:6;1937:9;1933:22;1892:73;;;1882:83;;1773:198;1141:840;;;;;;;;;1988:257;;2100:2;2088:9;2079:7;2075:23;2071:32;2068:2;;;2116:1;2113;2106:12;2068:2;2151:1;2168:61;2221:7;2201:9;2168:61;;2252:110;2325:31;2350:5;2325:31;;;2320:3;2313:44;2307:55;;;2369:107;2440:30;2464:5;2440:30;;2483:110;2556:31;2581:5;2556:31;;2600:294;2736:2;2721:18;;2750:61;2725:9;2784:6;2750:61;;;2822:62;2880:2;2869:9;2865:18;2856:6;2822:62;;2901:189;3007:2;2992:18;;3021:59;2996:9;3053:6;3021:59;;;2978:112;;;;;3097:256;3159:2;3153:9;3185:17;;;-1:-1;;;;;3245:34;;3281:22;;;3242:62;3239:2;;;3317:1;3314;3307:12;3239:2;3333;3326:22;3137:216;;-1:-1;3137:216;3360:258;;-1:-1;;;;;3495:6;3492:30;3489:2;;;3535:1;3532;3525:12;3489:2;-1:-1;3608:4;3579;3556:17;;;;-1:-1;;3552:33;3598:15;;3426:192;3625:128;-1:-1;;;;;3694:54;;3677:76;3760:151;3839:66;3828:78;;3811:100;4139:92;4212:13;4205:21;;4188:43;4239:268;4304:1;4311:101;4325:6;4322:1;4319:13;4311:101;;;4392:11;;;4386:18;4373:11;;;4366:39;4347:2;4340:10;4311:101;;;4427:6;4424:1;4421:13;4418:2;;;4492:1;4483:6;4478:3;4474:16;4467:27;4418:2;4288:219;;;;;;834:541:0;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052600436106100a35763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663150b7a0281146100ff578063169645f2146101355780631c5b1ec41461015557806320472cf714610175578063725cef0614610197578063b3cd4254146101aa578063bc063e1a146101bf578063c5e6e6ac146101d4578063e58e9c16146101f4578063f0b9e5ba14610214575b60015473ffffffffffffffffffffffffffffffffffffffff1633146100fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d34565b60405180910390fd5b005b34801561010b57600080fd5b5061011f61011a3660046123bf565b610234565b60405161012c9190612d26565b60405180910390f35b61014861014336600461249d565b610295565b60405161012c9190612de4565b34801561016157600080fd5b5061014861017036600461267e565b610561565b34801561018157600080fd5b5061018a610627565b60405161012c9190612e35565b6101486101a5366004612583565b61062d565b3480156101b657600080fd5b5061018a6109af565b3480156101cb57600080fd5b5061018a6109b5565b3480156101e057600080fd5b506101486101ef36600461267e565b6109bb565b34801561020057600080fd5b5061014861020f36600461267e565b610a2e565b34801561022057600080fd5b5061011f61022f366004612438565b610b2b565b604080517f6f6e455243373231526563656976656428616464726573732c6164647265737381527f2c75696e743235362c62797465732900000000000000000000000000000000006020820152905190819003602f0190205b949350505050565b61029d612022565b34600080808084116102db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d54565b6102e6848888610b8b565b92506102f28484610c59565b9150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561037a57600080fd5b505af115801561038e573d6000803e3d6000fd5b50505050506103bb8b60008151811015156103a557fe5b9060200190602002015161014001516010610ca0565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281529394508301828280156104615780601f1061043657610100808354040283529160200191610461565b820191906000526020600020905b81548152906001019060200180831161044457829003601f168201915b50505050508b600081518110151561047557fe5b60209081029091010151610160015260025473ffffffffffffffffffffffffffffffffffffffff828116911614156104b9576104b28b8b84610d01565b94506104c9565b6104c68b8b8b8b86610e1b565b94505b6020850151841015610507576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d44565b60208501518214610544576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612da4565b61055381338760000151610fa3565b505050509695505050505050565b610569612022565b6000806000610576612022565b600093505b865184101561061d57610592868660000151610c59565b92506105d587858151811015156105a557fe5b9060200190602002015160a0015188868151811015156105c157fe5b90602001906020020151608001518561117d565b91506105f887858151811015156105e857fe5b9060200190602002015183611192565b905061060485826112db565b84518614156106125761061d565b60019093019261057b565b5050505092915050565b61251c81565b610635612022565b346000808211610671576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d54565b600086116106ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d54565b6106d38a60008151811015156106bd57fe5b906020019060200201516101400151600061133d565b604080517f4552433230546f6b656e28616464726573732900000000000000000000000000815290519081900360130190209091507fffffffff000000000000000000000000000000000000000000000000000000008083169116148061078f5750604080517f455243373231546f6b656e28616464726573732c75696e7432353629000000008152905190819003601c0190207fffffffff000000000000000000000000000000000000000000000000000000008281169116145b15156107c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612dc4565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561084d57600080fd5b505af1158015610861573d6000803e3d6000fd5b5050604080517f4552433230546f6b656e28616464726573732900000000000000000000000000815290519081900360130190207fffffffff000000000000000000000000000000000000000000000000000000008581169116141592506108da915050576108d38a8a8a8a8a6113aa565b9250610947565b604080517f455243373231546f6b656e28616464726573732c75696e7432353629000000008152905190819003601c0190207fffffffff0000000000000000000000000000000000000000000000000000000082811691161415610947576109448a8a8a8a611701565b92505b6020830151821015610985576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d44565b6109a2610996838560200151610c59565b84602001518787611a03565b5050979650505050505050565b61271081565b6103e881565b6109c3612022565b6000806109ce612022565b600092505b8551831015610a25576109ea858560200151610c59565b91506109fd86848151811015156105e857fe5b9050610a0984826112db565b8484602001511415610a1a57610a25565b6001909201916109d3565b50505092915050565b610a36612022565b6000806000610a43612022565b600093505b865184101561061d57610a5f868660000151610c59565b9250610ac68785815181101515610a7257fe5b9060200190602002015160a00151610ac08987815181101515610a9157fe5b90602001906020020151608001518a88815181101515610aad57fe5b9060200190602002015160e00151610c59565b8561117d565b9150610af38785815181101515610ad957fe5b90602001906020020151610aee846001611af0565b611192565b9050610b0781600001518260600151610c59565b8152610b1385826112db565b84518611610b205761061d565b600190930192610a48565b604080517f6f6e455243373231526563656976656428616464726573732c75696e7432353681527f2c62797465732900000000000000000000000000000000000000000000000000602082015290519081900360270190205b9392505050565b6000808361ffff16118015610bb5575073ffffffffffffffffffffffffffffffffffffffff821615155b15610b84576103e861ffff84161115610bfa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d84565b610c0b61ffff84166127108661117d565b60405190915073ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f19350505050158015610c51573d6000803e3d6000fd5b509392505050565b600082821115610c95576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d74565b508082035b92915050565b600081601401835110151515610ce2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612db4565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b610d09612022565b600080546040517f7e1d980800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690637e1d980890610d6490889087908990600401612cf4565b608060405180830381600087803b158015610d7e57600080fd5b505af1158015610d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610db691908101906126cf565b9150610dca82600001518360600151610c59565b9050610dda826000015182611b3a565b1515610e12576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612da4565b81529392505050565b610e23612022565b6000610e2d612022565b610e35612022565b610e3d612022565b859350610e4a8a876109bb565b9250600083606001511115610ede57610e6888888560600151611b57565b9150610e8186610e7c888560200151610c59565b611b3a565b1515610eb9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612da4565b610ec7848360200151610c59565b606080840151908701526020808401519087015293505b6000546040517f7e1d980800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690637e1d980890610f38908d9088908e90600401612cf4565b608060405180830381600087803b158015610f5257600080fd5b505af1158015610f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f8a91908101906126cf565b9050610f9685826112db565b5050505095945050505050565b604080517f7472616e7366657228616464726573732c75696e7432353629000000000000008152905190819003601901812060009173ffffffffffffffffffffffffffffffffffffffff861691906110019086908690602401612ca0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931783525181519192909182919080838360005b838110156110a557818101518382015260200161108d565b50505050905090810190601f1680156110d25780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af192505050801515611121576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d94565b3d1561113e575060003d6020141561113e5760206000803e506000515b801515611177576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d94565b50505050565b600061028d61118c8584611e90565b84611eeb565b61119a612022565b6111a261204b565b600080546040517fc75e0a81000000000000000000000000000000000000000000000000000000008152829173ffffffffffffffffffffffffffffffffffffffff169063c75e0a81906111f9908990600401612df2565b606060405180830381600087803b15801561121357600080fd5b505af1158015611227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061124b91908101906126ed565b805190935060ff1660031461125f57610a25565b6112718660a001518460400151610c59565b915061127d8583611f02565b90508084602001818152505061129c818760a00151886080015161117d565b845260a086015160c08701516112b391839161117d565b604085015260a086015160e08701516112cd91839161117d565b606085015250505092915050565b815181516112e99190611af0565b8252602080830151908201516112ff9190611af0565b6020830152604080830151908201516113189190611af0565b6040830152606080830151908201516113319190611af0565b60609092019190915250565b60008160040183511015151561137f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612dd4565b5050602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b6113b2612022565b60006113bc612022565b6113c4612022565b6113cc612022565b6113de8a60008151811015156103a557fe5b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281529397508301828280156114845780601f1061145957610100808354040283529160200191611484565b820191906000526020600020905b81548152906001019060200180831161146757829003601f168201915b50505050508a600081518110151561149857fe5b60209081029091010151610160015260025473ffffffffffffffffffffffffffffffffffffffff85811691161415611576576114d58a8a88611b57565b8051909350861115611513576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612da4565b61151d85846112db565b61153961153286600001518760600151611af0565b8651611b3a565b1515611571576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612da4565b6116f2565b6115808a87610561565b91506000826060015111156115b55761159e88888460600151611b57565b602080820151908701526060808201519087015290505b6000546040517fe5fa431b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063e5fa431b9061160f908d908a908e90600401612cf4565b608060405180830381600087803b15801561162957600080fd5b505af115801561163d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061166191908101906126cf565b8051909350861461169e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612da4565b6116a885846112db565b6116ba85602001518460200151611b3a565b15156116f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612da4565b610f9684338560000151610fa3565b611709612022565b60008060606000611718612022565b611720612022565b8a5194508460405190808252806020026020018201604052801561174e578160200160208202803883390190505b509350600092505b8483101561188a57611783868c8581518110151561177057fe5b9060200190602002015160e00151611af0565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281529399508301828280156118295780601f106117fe57610100808354040283529160200191611829565b820191906000526020600020905b81548152906001019060200180831161180c57829003601f168201915b50505050508b8481518110151561183c57fe5b6020908102909101015161016001528a518b908490811061185957fe5b9060200190602002015160a00151848481518110151561187557fe5b60209081029091010152600190920191611756565b60008611156118b55761189e898988611b57565b606080820151908901526020808201519089015291505b6000546040517f4d0ae54600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690634d0ae5469061190f908e9088908f90600401612cbb565b608060405180830381600087803b15801561192957600080fd5b505af115801561193d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061196191908101906126cf565b905061196d87826112db565b61197f87602001518260200151611b3a565b15156119b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612da4565b600092505b848310156119f5576119ea8b848151811015156119d557fe5b90602001906020020151610140015133611f18565b6001909201916119bc565b505050505050949350505050565b6000806000861115611ae8576001546040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632e1a7d4d90611a65908990600401612e43565b600060405180830381600087803b158015611a7f57600080fd5b505af1158015611a93573d6000803e3d6000fd5b50505050611aa2858585610b8b565b9150611aae8683610c59565b90506000811115611ae857604051339082156108fc029083906000818181858888f19350505050158015611ae6573d6000803e3d6000fd5b505b505050505050565b600082820183811015611b2f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d74565b8091505b5092915050565b600080611b4c61251c6127108661117d565b909210159392505050565b611b5f612022565b6000806000611b6c612022565b600093505b8751841015611e85576003805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f81018490048402820184019092528181529291830182828015611c1e5780601f10611bf357610100808354040283529160200191611c1e565b820191906000526020600020905b815481529060010190602001808311611c0157829003601f168201915b50505050508885815181101515611c3157fe5b602090810290910181015161014001919091526004805460408051601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600187161502019094169390930492830185900485028101850190915281815292830182828015611ce65780601f10611cbb57610100808354040283529160200191611ce6565b820191906000526020600020905b815481529060010190602001808311611cc957829003601f168201915b50505050508885815181101515611cf957fe5b6020908102909101015161016001528451611d15908790610c59565b9250611d638885815181101515611d2857fe5b9060200190602002015160a00151610ac08a87815181101515611d4757fe5b90602001906020020151608001518b88815181101515610aad57fe5b600054895191935073ffffffffffffffffffffffffffffffffffffffff169063b4be83d5908a9087908110611d9457fe5b90602001906020020151611da9856001611af0565b8a88815181101515611db757fe5b906020019060200201516040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611dfb93929190612e03565b608060405180830381600087803b158015611e1557600080fd5b505af1158015611e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e4d91908101906126cf565b9050611e6181600001518260600151610c59565b8152611e6d85826112db565b84518611611e7a57611e85565b600190930192611b71565b505050509392505050565b600080831515611ea35760009150611b33565b50828202828482811515611eb357fe5b0414611b2f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d74565b6000808284811515611ef957fe5b04949350505050565b6000818310611f115781610b84565b5090919050565b600080611f2c84601063ffffffff610ca016565b9150611f3f84602463ffffffff611fd016565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8316906323b872dd90611f9890309087908690600401612c78565b600060405180830381600087803b158015611fb257600080fd5b505af1158015611fc6573d6000803e3d6000fd5b5050505050505050565b6000610b848383600081602001835110151515612019576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f490612d64565b50016020015190565b608060405190810160405280600081526020016000815260200160008152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b6000610b848235612ee9565b6000601f8201831361208857600080fd5b813561209b61209682612e78565b612e51565b81815260209384019390925082018360005b8381101561061d57813586016120c38882612142565b84525060209283019291909101906001016120ad565b6000601f820183136120ea57600080fd5b81356120f861209682612e78565b81815260209384019390925082018360005b8381101561061d57813586016121208882612252565b845250602092830192919091019060010161210a565b6000610b848251612f2e565b6000601f8201831361215357600080fd5b813561216161209682612e99565b9150808252602083016020830185838301111561217d57600080fd5b610a25838284612f37565b60006080828403121561219a57600080fd5b6121a46080612e51565b905060006121b28484612136565b82525060206121c384848301612136565b60208301525060406121d784828501612136565b60408301525060606121eb84828501612136565b60608301525092915050565b60006060828403121561220957600080fd5b6122136060612e51565b9050600061222184846123b3565b825250602061223284848301612136565b602083015250604061224684828501612136565b60408301525092915050565b6000610180828403121561226557600080fd5b612270610180612e51565b9050600061227e848461206b565b825250602061228f8484830161206b565b60208301525060406122a38482850161206b565b60408301525060606122b78482850161206b565b60608301525060806122cb848285016123a7565b60808301525060a06122df848285016123a7565b60a08301525060c06122f3848285016123a7565b60c08301525060e0612307848285016123a7565b60e08301525061010061231c848285016123a7565b61010083015250610120612332848285016123a7565b6101208301525061014082013567ffffffffffffffff81111561235457600080fd5b61236084828501612142565b6101408301525061016082013567ffffffffffffffff81111561238257600080fd5b61238e84828501612142565b6101608301525092915050565b6000610b848235612f27565b6000610b848235612f2e565b6000610b848251612f31565b600080600080608085870312156123d557600080fd5b60006123e1878761206b565b94505060206123f28782880161206b565b9350506040612403878288016123a7565b925050606085013567ffffffffffffffff81111561242057600080fd5b61242c87828801612142565b91505092959194509250565b60008060006060848603121561244d57600080fd5b6000612459868661206b565b935050602061246a868287016123a7565b925050604084013567ffffffffffffffff81111561248757600080fd5b61249386828701612142565b9150509250925092565b60008060008060008060c087890312156124b657600080fd5b863567ffffffffffffffff8111156124cd57600080fd5b6124d989828a016120d9565b965050602087013567ffffffffffffffff8111156124f657600080fd5b61250289828a01612077565b955050604087013567ffffffffffffffff81111561251f57600080fd5b61252b89828a016120d9565b945050606087013567ffffffffffffffff81111561254857600080fd5b61255489828a01612077565b935050608061256589828a0161239b565b92505060a061257689828a0161206b565b9150509295509295509295565b600080600080600080600060e0888a03121561259e57600080fd5b873567ffffffffffffffff8111156125b557600080fd5b6125c18a828b016120d9565b975050602088013567ffffffffffffffff8111156125de57600080fd5b6125ea8a828b01612077565b965050604088013567ffffffffffffffff81111561260757600080fd5b6126138a828b016120d9565b955050606088013567ffffffffffffffff81111561263057600080fd5b61263c8a828b01612077565b945050608061264d8a828b016123a7565b93505060a061265e8a828b0161239b565b92505060c061266f8a828b0161206b565b91505092959891949750929550565b6000806040838503121561269157600080fd5b823567ffffffffffffffff8111156126a857600080fd5b6126b4858286016120d9565b92505060206126c5858286016123a7565b9150509250929050565b6000608082840312156126e157600080fd5b600061028d8484612188565b6000606082840312156126ff57600080fd5b600061028d84846121f7565b61271481612ee9565b82525050565b600061272582612ee5565b8084526020840193508360208202850161273e85612edf565b60005b8481101561277557838303885261275983835161283c565b925061276482612edf565b602098909801979150600101612741565b50909695505050505050565b600061278c82612ee5565b808452602084019350836020820285016127a585612edf565b60005b848110156127755783830388526127c0838351612b63565b92506127cb82612edf565b6020989098019791506001016127a8565b60006127e782612ee5565b8084526020840193506127f983612edf565b60005b828110156128295761280f868351612c6f565b61281882612edf565b6020969096019591506001016127fc565b5093949350505050565b61271481612f02565b600061284782612ee5565b80845261285b816020860160208601612f43565b61286481612f6f565b9093016020019392505050565b602381527f44454641554c545f46554e4354494f4e5f574554485f434f4e54524143545f4f60208201527f4e4c590000000000000000000000000000000000000000000000000000000000604082015260600190565b601181527f494e56414c49445f4d53475f56414c5545000000000000000000000000000000602082015260400190565b601781527f56414c55455f475245415445525f5448414e5f5a45524f000000000000000000602082015260400190565b602681527f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524560208201527f5155495245440000000000000000000000000000000000000000000000000000604082015260600190565b601081527f55494e543235365f4f564552464c4f5700000000000000000000000000000000602082015260400190565b601881527f4645455f50524f504f5254494f4e5f544f4f5f4c415247450000000000000000602082015260400190565b600f81527f5452414e534645525f4641494c45440000000000000000000000000000000000602082015260400190565b601681527f554e41434345505441424c455f5448524553484f4c4400000000000000000000602082015260400190565b602681527f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524560208201527f5155495245440000000000000000000000000000000000000000000000000000604082015260600190565b601781527f554e535550504f525445445f544f4b454e5f50524f5859000000000000000000602082015260400190565b602581527f475245415445525f4f525f455155414c5f544f5f345f4c454e4754485f52455160208201527f5549524544000000000000000000000000000000000000000000000000000000604082015260600190565b80516080830190612b2a8482612c6f565b506020820151612b3d6020850182612c6f565b506040820151612b506040850182612c6f565b5060608201516111776060850182612c6f565b8051600090610180840190612b78858261270b565b506020830151612b8b602086018261270b565b506040830151612b9e604086018261270b565b506060830151612bb1606086018261270b565b506080830151612bc46080860182612c6f565b5060a0830151612bd760a0860182612c6f565b5060c0830151612bea60c0860182612c6f565b5060e0830151612bfd60e0860182612c6f565b50610100830151612c12610100860182612c6f565b50610120830151612c27610120860182612c6f565b50610140830151848203610140860152612c41828261283c565b915050610160830151848203610160860152612c5d828261283c565b95945050505050565b61271481612f27565b61271481612f2e565b60608101612c86828661270b565b612c93602083018561270b565b61028d6040830184612c6f565b60408101612cae828561270b565b610b846020830184612c6f565b60608082528101612ccc8186612781565b90508181036020830152612ce081856127dc565b90508181036040830152612c5d818461271a565b60608082528101612d058186612781565b9050612d146020830185612c6f565b8181036040830152612c5d818461271a565b60208101610c9a8284612833565b60208082528101610c9a81612871565b60208082528101610c9a816128c7565b60208082528101610c9a816128f7565b60208082528101610c9a81612927565b60208082528101610c9a8161297d565b60208082528101610c9a816129ad565b60208082528101610c9a816129dd565b60208082528101610c9a81612a0d565b60208082528101610c9a81612a3d565b60208082528101610c9a81612a93565b60208082528101610c9a81612ac3565b60808101610c9a8284612b19565b60208082528101610b848184612b63565b60608082528101612e148186612b63565b9050612e236020830185612c6f565b8181036040830152612c5d818461283c565b60208101610c9a8284612c66565b60208101610c9a8284612c6f565b60405181810167ffffffffffffffff81118282101715612e7057600080fd5b604052919050565b600067ffffffffffffffff821115612e8f57600080fd5b5060209081020190565b600067ffffffffffffffff821115612eb057600080fd5b506020601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b60200190565b5190565b73ffffffffffffffffffffffffffffffffffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61ffff1690565b90565b60ff1690565b82818337506000910152565b60005b83811015612f5e578181015183820152602001612f46565b838111156111775750506000910152565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016905600a265627a7a723058208489db9498c397b472d53b1a17ffb22e708fa9c873a4adac874bc0843cb5a01d6c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x150B7A02 DUP2 EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0x169645F2 EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0x1C5B1EC4 EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0x20472CF7 EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0x725CEF06 EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0xB3CD4254 EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0xBC063E1A EQ PUSH2 0x1BF JUMPI DUP1 PUSH4 0xC5E6E6AC EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0xE58E9C16 EQ PUSH2 0x1F4 JUMPI DUP1 PUSH4 0xF0B9E5BA EQ PUSH2 0x214 JUMPI JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D34 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11F PUSH2 0x11A CALLDATASIZE PUSH1 0x4 PUSH2 0x23BF JUMP JUMPDEST PUSH2 0x234 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12C SWAP2 SWAP1 PUSH2 0x2D26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x148 PUSH2 0x143 CALLDATASIZE PUSH1 0x4 PUSH2 0x249D JUMP JUMPDEST PUSH2 0x295 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12C SWAP2 SWAP1 PUSH2 0x2DE4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x148 PUSH2 0x170 CALLDATASIZE PUSH1 0x4 PUSH2 0x267E JUMP JUMPDEST PUSH2 0x561 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x627 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12C SWAP2 SWAP1 PUSH2 0x2E35 JUMP JUMPDEST PUSH2 0x148 PUSH2 0x1A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2583 JUMP JUMPDEST PUSH2 0x62D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x9AF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x9B5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x148 PUSH2 0x1EF CALLDATASIZE PUSH1 0x4 PUSH2 0x267E JUMP JUMPDEST PUSH2 0x9BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x200 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x148 PUSH2 0x20F CALLDATASIZE PUSH1 0x4 PUSH2 0x267E JUMP JUMPDEST PUSH2 0xA2E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x220 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11F PUSH2 0x22F CALLDATASIZE PUSH1 0x4 PUSH2 0x2438 JUMP JUMPDEST PUSH2 0xB2B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x6F6E455243373231526563656976656428616464726573732C61646472657373 DUP2 MSTORE PUSH32 0x2C75696E743235362C6279746573290000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x2F ADD SWAP1 KECCAK256 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x29D PUSH2 0x2022 JUMP JUMPDEST CALLVALUE PUSH1 0x0 DUP1 DUP1 DUP1 DUP5 GT PUSH2 0x2DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D54 JUMP JUMPDEST PUSH2 0x2E6 DUP5 DUP9 DUP9 PUSH2 0xB8B JUMP JUMPDEST SWAP3 POP PUSH2 0x2F2 DUP5 DUP5 PUSH2 0xC59 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x38E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x3BB DUP12 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3A5 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD PUSH1 0x10 PUSH2 0xCA0 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP5 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x461 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x436 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x461 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x444 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP12 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x475 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MSTORE PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x4B9 JUMPI PUSH2 0x4B2 DUP12 DUP12 DUP5 PUSH2 0xD01 JUMP JUMPDEST SWAP5 POP PUSH2 0x4C9 JUMP JUMPDEST PUSH2 0x4C6 DUP12 DUP12 DUP12 DUP12 DUP7 PUSH2 0xE1B JUMP JUMPDEST SWAP5 POP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD DUP5 LT ISZERO PUSH2 0x507 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D44 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD DUP3 EQ PUSH2 0x544 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x553 DUP2 CALLER DUP8 PUSH1 0x0 ADD MLOAD PUSH2 0xFA3 JUMP JUMPDEST POP POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x569 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x576 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP7 MLOAD DUP5 LT ISZERO PUSH2 0x61D JUMPI PUSH2 0x592 DUP7 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST SWAP3 POP PUSH2 0x5D5 DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x5A5 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP9 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x5C1 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0x117D JUMP JUMPDEST SWAP2 POP PUSH2 0x5F8 DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x5E8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 PUSH2 0x1192 JUMP JUMPDEST SWAP1 POP PUSH2 0x604 DUP6 DUP3 PUSH2 0x12DB JUMP JUMPDEST DUP5 MLOAD DUP7 EQ ISZERO PUSH2 0x612 JUMPI PUSH2 0x61D JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x57B JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x251C DUP2 JUMP JUMPDEST PUSH2 0x635 PUSH2 0x2022 JUMP JUMPDEST CALLVALUE PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x671 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D54 JUMP JUMPDEST PUSH1 0x0 DUP7 GT PUSH2 0x6AB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D54 JUMP JUMPDEST PUSH2 0x6D3 DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x6BD JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD PUSH1 0x0 PUSH2 0x133D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x4552433230546F6B656E28616464726573732900000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x13 ADD SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP1 DUP4 AND SWAP2 AND EQ DUP1 PUSH2 0x78F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x455243373231546F6B656E28616464726573732C75696E743235362900000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x1C ADD SWAP1 KECCAK256 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 0x7C7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DC4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x84D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x861 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x4552433230546F6B656E28616464726573732900000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x13 ADD SWAP1 KECCAK256 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP6 DUP2 AND SWAP2 AND EQ ISZERO SWAP3 POP PUSH2 0x8DA SWAP2 POP POP JUMPI PUSH2 0x8D3 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x13AA JUMP JUMPDEST SWAP3 POP PUSH2 0x947 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x455243373231546F6B656E28616464726573732C75696E743235362900000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x1C ADD SWAP1 KECCAK256 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x947 JUMPI PUSH2 0x944 DUP11 DUP11 DUP11 DUP11 PUSH2 0x1701 JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD DUP3 LT ISZERO PUSH2 0x985 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D44 JUMP JUMPDEST PUSH2 0x9A2 PUSH2 0x996 DUP4 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD DUP8 DUP8 PUSH2 0x1A03 JUMP JUMPDEST POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2710 DUP2 JUMP JUMPDEST PUSH2 0x3E8 DUP2 JUMP JUMPDEST PUSH2 0x9C3 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x9CE PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 SWAP3 POP JUMPDEST DUP6 MLOAD DUP4 LT ISZERO PUSH2 0xA25 JUMPI PUSH2 0x9EA DUP6 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST SWAP2 POP PUSH2 0x9FD DUP7 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x5E8 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0xA09 DUP5 DUP3 PUSH2 0x12DB JUMP JUMPDEST DUP5 DUP5 PUSH1 0x20 ADD MLOAD EQ ISZERO PUSH2 0xA1A JUMPI PUSH2 0xA25 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x9D3 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xA36 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xA43 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP7 MLOAD DUP5 LT ISZERO PUSH2 0x61D JUMPI PUSH2 0xA5F DUP7 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST SWAP3 POP PUSH2 0xAC6 DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA72 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH2 0xAC0 DUP10 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA91 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP11 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAAD JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST DUP6 PUSH2 0x117D JUMP JUMPDEST SWAP2 POP PUSH2 0xAF3 DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAD9 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0xAEE DUP5 PUSH1 0x1 PUSH2 0x1AF0 JUMP JUMPDEST PUSH2 0x1192 JUMP JUMPDEST SWAP1 POP PUSH2 0xB07 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST DUP2 MSTORE PUSH2 0xB13 DUP6 DUP3 PUSH2 0x12DB JUMP JUMPDEST DUP5 MLOAD DUP7 GT PUSH2 0xB20 JUMPI PUSH2 0x61D JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0xA48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x6F6E455243373231526563656976656428616464726573732C75696E74323536 DUP2 MSTORE PUSH32 0x2C62797465732900000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x27 ADD SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xFFFF AND GT DUP1 ISZERO PUSH2 0xBB5 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xB84 JUMPI PUSH2 0x3E8 PUSH2 0xFFFF DUP5 AND GT ISZERO PUSH2 0xBFA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D84 JUMP JUMPDEST PUSH2 0xC0B PUSH2 0xFFFF DUP5 AND PUSH2 0x2710 DUP7 PUSH2 0x117D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xC51 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xC95 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D74 JUMP JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0xCE2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DB4 JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0xD09 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7E1D980800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x7E1D9808 SWAP1 PUSH2 0xD64 SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2CF4 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD92 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xDB6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x26CF JUMP JUMPDEST SWAP2 POP PUSH2 0xDCA DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST SWAP1 POP PUSH2 0xDDA DUP3 PUSH1 0x0 ADD MLOAD DUP3 PUSH2 0x1B3A JUMP JUMPDEST ISZERO ISZERO PUSH2 0xE12 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST DUP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xE23 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE2D PUSH2 0x2022 JUMP JUMPDEST PUSH2 0xE35 PUSH2 0x2022 JUMP JUMPDEST PUSH2 0xE3D PUSH2 0x2022 JUMP JUMPDEST DUP6 SWAP4 POP PUSH2 0xE4A DUP11 DUP8 PUSH2 0x9BB JUMP JUMPDEST SWAP3 POP PUSH1 0x0 DUP4 PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0xEDE JUMPI PUSH2 0xE68 DUP9 DUP9 DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x1B57 JUMP JUMPDEST SWAP2 POP PUSH2 0xE81 DUP7 PUSH2 0xE7C DUP9 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST PUSH2 0x1B3A JUMP JUMPDEST ISZERO ISZERO PUSH2 0xEB9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0xEC7 DUP5 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP5 ADD MLOAD SWAP1 DUP8 ADD MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD SWAP1 DUP8 ADD MSTORE SWAP4 POP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7E1D980800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x7E1D9808 SWAP1 PUSH2 0xF38 SWAP1 DUP14 SWAP1 DUP9 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x2CF4 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF66 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xF8A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x26CF JUMP JUMPDEST SWAP1 POP PUSH2 0xF96 DUP6 DUP3 PUSH2 0x12DB JUMP JUMPDEST POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x7472616E7366657228616464726573732C75696E743235362900000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x19 ADD DUP2 KECCAK256 PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP2 SWAP1 PUSH2 0x1001 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x2CA0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR DUP4 MSTORE MLOAD DUP2 MLOAD SWAP2 SWAP3 SWAP1 SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x10A5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x108D JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x10D2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP3 POP POP POP DUP1 ISZERO ISZERO PUSH2 0x1121 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D94 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x113E JUMPI POP PUSH1 0x0 RETURNDATASIZE PUSH1 0x20 EQ ISZERO PUSH2 0x113E JUMPI PUSH1 0x20 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD JUMPDEST DUP1 ISZERO ISZERO PUSH2 0x1177 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D94 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28D PUSH2 0x118C DUP6 DUP5 PUSH2 0x1E90 JUMP JUMPDEST DUP5 PUSH2 0x1EEB JUMP JUMPDEST PUSH2 0x119A PUSH2 0x2022 JUMP JUMPDEST PUSH2 0x11A2 PUSH2 0x204B JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0xC75E0A8100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xC75E0A81 SWAP1 PUSH2 0x11F9 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2DF2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1227 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x124B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x26ED JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP4 POP PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x125F JUMPI PUSH2 0xA25 JUMP JUMPDEST PUSH2 0x1271 DUP7 PUSH1 0xA0 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST SWAP2 POP PUSH2 0x127D DUP6 DUP4 PUSH2 0x1F02 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x129C DUP2 DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0x80 ADD MLOAD PUSH2 0x117D JUMP JUMPDEST DUP5 MSTORE PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 DUP8 ADD MLOAD PUSH2 0x12B3 SWAP2 DUP4 SWAP2 PUSH2 0x117D JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xE0 DUP8 ADD MLOAD PUSH2 0x12CD SWAP2 DUP4 SWAP2 PUSH2 0x117D JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD PUSH2 0x12E9 SWAP2 SWAP1 PUSH2 0x1AF0 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x12FF SWAP2 SWAP1 PUSH2 0x1AF0 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x1318 SWAP2 SWAP1 PUSH2 0x1AF0 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x1331 SWAP2 SWAP1 PUSH2 0x1AF0 JUMP JUMPDEST PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x137F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DD4 JUMP JUMPDEST POP POP PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH2 0x13B2 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13BC PUSH2 0x2022 JUMP JUMPDEST PUSH2 0x13C4 PUSH2 0x2022 JUMP JUMPDEST PUSH2 0x13CC PUSH2 0x2022 JUMP JUMPDEST PUSH2 0x13DE DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3A5 JUMPI INVALID JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP8 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1484 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1459 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1484 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1467 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1498 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MSTORE PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x1576 JUMPI PUSH2 0x14D5 DUP11 DUP11 DUP9 PUSH2 0x1B57 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP4 POP DUP7 GT ISZERO PUSH2 0x1513 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x151D DUP6 DUP5 PUSH2 0x12DB JUMP JUMPDEST PUSH2 0x1539 PUSH2 0x1532 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD PUSH2 0x1AF0 JUMP JUMPDEST DUP7 MLOAD PUSH2 0x1B3A JUMP JUMPDEST ISZERO ISZERO PUSH2 0x1571 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x16F2 JUMP JUMPDEST PUSH2 0x1580 DUP11 DUP8 PUSH2 0x561 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x15B5 JUMPI PUSH2 0x159E DUP9 DUP9 DUP5 PUSH1 0x60 ADD MLOAD PUSH2 0x1B57 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP8 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MLOAD SWAP1 DUP8 ADD MSTORE SWAP1 POP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0xE5FA431B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xE5FA431B SWAP1 PUSH2 0x160F SWAP1 DUP14 SWAP1 DUP11 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x2CF4 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1629 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x163D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1661 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x26CF JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP4 POP DUP7 EQ PUSH2 0x169E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x16A8 DUP6 DUP5 PUSH2 0x12DB JUMP JUMPDEST PUSH2 0x16BA DUP6 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x1B3A JUMP JUMPDEST ISZERO ISZERO PUSH2 0x16F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0xF96 DUP5 CALLER DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0xFA3 JUMP JUMPDEST PUSH2 0x1709 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH1 0x0 PUSH2 0x1718 PUSH2 0x2022 JUMP JUMPDEST PUSH2 0x1720 PUSH2 0x2022 JUMP JUMPDEST DUP11 MLOAD SWAP5 POP DUP5 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x174E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH2 0x188A JUMPI PUSH2 0x1783 DUP7 DUP13 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1770 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH2 0x1AF0 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP10 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1829 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x17FE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1829 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x180C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP12 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x183C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MSTORE DUP11 MLOAD DUP12 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x1859 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP5 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1875 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x1756 JUMP JUMPDEST PUSH1 0x0 DUP7 GT ISZERO PUSH2 0x18B5 JUMPI PUSH2 0x189E DUP10 DUP10 DUP9 PUSH2 0x1B57 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 ADD MLOAD SWAP1 DUP10 ADD MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP10 ADD MSTORE SWAP2 POP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x4D0AE54600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x4D0AE546 SWAP1 PUSH2 0x190F SWAP1 DUP15 SWAP1 DUP9 SWAP1 DUP16 SWAP1 PUSH1 0x4 ADD PUSH2 0x2CBB JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1929 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x193D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1961 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x26CF JUMP JUMPDEST SWAP1 POP PUSH2 0x196D DUP8 DUP3 PUSH2 0x12DB JUMP JUMPDEST PUSH2 0x197F DUP8 PUSH1 0x20 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x1B3A JUMP JUMPDEST ISZERO ISZERO PUSH2 0x19B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST PUSH1 0x0 SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH2 0x19F5 JUMPI PUSH2 0x19EA DUP12 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x19D5 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD CALLER PUSH2 0x1F18 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x19BC JUMP JUMPDEST POP POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP7 GT ISZERO PUSH2 0x1AE8 JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x1A65 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2E43 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A93 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1AA2 DUP6 DUP6 DUP6 PUSH2 0xB8B JUMP JUMPDEST SWAP2 POP PUSH2 0x1AAE DUP7 DUP4 PUSH2 0xC59 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x1AE8 JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1AE6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1B2F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D74 JUMP JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1B4C PUSH2 0x251C PUSH2 0x2710 DUP7 PUSH2 0x117D JUMP JUMPDEST SWAP1 SWAP3 LT ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1B5F PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1B6C PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP8 MLOAD DUP5 LT ISZERO PUSH2 0x1E85 JUMPI PUSH1 0x3 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x2 PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x100 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1C1E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1BF3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1C1E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1C01 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP9 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1C31 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH2 0x140 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP8 AND ISZERO MUL ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV SWAP3 DUP4 ADD DUP6 SWAP1 DIV DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP2 MSTORE DUP2 DUP2 MSTORE SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1CE6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1CBB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1CE6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1CC9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP9 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1CF9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MSTORE DUP5 MLOAD PUSH2 0x1D15 SWAP1 DUP8 SWAP1 PUSH2 0xC59 JUMP JUMPDEST SWAP3 POP PUSH2 0x1D63 DUP9 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1D28 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH2 0xAC0 DUP11 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1D47 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP12 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAAD JUMPI INVALID JUMPDEST PUSH1 0x0 SLOAD DUP10 MLOAD SWAP2 SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xB4BE83D5 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0x1D94 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x1DA9 DUP6 PUSH1 0x1 PUSH2 0x1AF0 JUMP JUMPDEST DUP11 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1DB7 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DFB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2E03 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1E29 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1E4D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x26CF JUMP JUMPDEST SWAP1 POP PUSH2 0x1E61 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD PUSH2 0xC59 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1E6D DUP6 DUP3 PUSH2 0x12DB JUMP JUMPDEST DUP5 MLOAD DUP7 GT PUSH2 0x1E7A JUMPI PUSH2 0x1E85 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x1B71 JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 ISZERO ISZERO PUSH2 0x1EA3 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x1B33 JUMP JUMPDEST POP DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 0x1EB3 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1B2F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D74 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 0x1EF9 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1F11 JUMPI DUP2 PUSH2 0xB84 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F2C DUP5 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0xCA0 AND JUMP JUMPDEST SWAP2 POP PUSH2 0x1F3F DUP5 PUSH1 0x24 PUSH4 0xFFFFFFFF PUSH2 0x1FD0 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x1F98 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x2C78 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1FC6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB84 DUP4 DUP4 PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x2019 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4 SWAP1 PUSH2 0x2D64 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB84 DUP3 CALLDATALOAD PUSH2 0x2EE9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x2088 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x209B PUSH2 0x2096 DUP3 PUSH2 0x2E78 JUMP JUMPDEST PUSH2 0x2E51 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x61D JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x20C3 DUP9 DUP3 PUSH2 0x2142 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x20AD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x20EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x20F8 PUSH2 0x2096 DUP3 PUSH2 0x2E78 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x61D JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x2120 DUP9 DUP3 PUSH2 0x2252 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x210A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB84 DUP3 MLOAD PUSH2 0x2F2E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x2153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2161 PUSH2 0x2096 DUP3 PUSH2 0x2E99 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x217D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA25 DUP4 DUP3 DUP5 PUSH2 0x2F37 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x219A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21A4 PUSH1 0x80 PUSH2 0x2E51 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x21B2 DUP5 DUP5 PUSH2 0x2136 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x21C3 DUP5 DUP5 DUP4 ADD PUSH2 0x2136 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x21D7 DUP5 DUP3 DUP6 ADD PUSH2 0x2136 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x21EB DUP5 DUP3 DUP6 ADD PUSH2 0x2136 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2213 PUSH1 0x60 PUSH2 0x2E51 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2221 DUP5 DUP5 PUSH2 0x23B3 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x2232 DUP5 DUP5 DUP4 ADD PUSH2 0x2136 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x2246 DUP5 DUP3 DUP6 ADD PUSH2 0x2136 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2265 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2270 PUSH2 0x180 PUSH2 0x2E51 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x227E DUP5 DUP5 PUSH2 0x206B JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x228F DUP5 DUP5 DUP4 ADD PUSH2 0x206B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x22A3 DUP5 DUP3 DUP6 ADD PUSH2 0x206B JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x22B7 DUP5 DUP3 DUP6 ADD PUSH2 0x206B JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x22CB DUP5 DUP3 DUP6 ADD PUSH2 0x23A7 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x22DF DUP5 DUP3 DUP6 ADD PUSH2 0x23A7 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x22F3 DUP5 DUP3 DUP6 ADD PUSH2 0x23A7 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0x2307 DUP5 DUP3 DUP6 ADD PUSH2 0x23A7 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP PUSH2 0x100 PUSH2 0x231C DUP5 DUP3 DUP6 ADD PUSH2 0x23A7 JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH2 0x120 PUSH2 0x2332 DUP5 DUP3 DUP6 ADD PUSH2 0x23A7 JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MSTORE POP PUSH2 0x140 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2354 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2360 DUP5 DUP3 DUP6 ADD PUSH2 0x2142 JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MSTORE POP PUSH2 0x160 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x238E DUP5 DUP3 DUP6 ADD PUSH2 0x2142 JUMP JUMPDEST PUSH2 0x160 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB84 DUP3 CALLDATALOAD PUSH2 0x2F27 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB84 DUP3 CALLDATALOAD PUSH2 0x2F2E JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB84 DUP3 MLOAD PUSH2 0x2F31 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x23D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x23E1 DUP8 DUP8 PUSH2 0x206B JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x23F2 DUP8 DUP3 DUP9 ADD PUSH2 0x206B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2403 DUP8 DUP3 DUP9 ADD PUSH2 0x23A7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2420 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x242C DUP8 DUP3 DUP9 ADD PUSH2 0x2142 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x244D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2459 DUP7 DUP7 PUSH2 0x206B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x246A DUP7 DUP3 DUP8 ADD PUSH2 0x23A7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2487 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2493 DUP7 DUP3 DUP8 ADD PUSH2 0x2142 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x24B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24D9 DUP10 DUP3 DUP11 ADD PUSH2 0x20D9 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2502 DUP10 DUP3 DUP11 ADD PUSH2 0x2077 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x251F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x252B DUP10 DUP3 DUP11 ADD PUSH2 0x20D9 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2548 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2554 DUP10 DUP3 DUP11 ADD PUSH2 0x2077 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x2565 DUP10 DUP3 DUP11 ADD PUSH2 0x239B JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x2576 DUP10 DUP3 DUP11 ADD PUSH2 0x206B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x259E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25C1 DUP11 DUP3 DUP12 ADD PUSH2 0x20D9 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25EA DUP11 DUP3 DUP12 ADD PUSH2 0x2077 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2607 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2613 DUP11 DUP3 DUP12 ADD PUSH2 0x20D9 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2630 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x263C DUP11 DUP3 DUP12 ADD PUSH2 0x2077 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x264D DUP11 DUP3 DUP12 ADD PUSH2 0x23A7 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x265E DUP11 DUP3 DUP12 ADD PUSH2 0x239B JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x266F DUP11 DUP3 DUP12 ADD PUSH2 0x206B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2691 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x26B4 DUP6 DUP3 DUP7 ADD PUSH2 0x20D9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x26C5 DUP6 DUP3 DUP7 ADD PUSH2 0x23A7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x28D DUP5 DUP5 PUSH2 0x2188 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x28D DUP5 DUP5 PUSH2 0x21F7 JUMP JUMPDEST PUSH2 0x2714 DUP2 PUSH2 0x2EE9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2725 DUP3 PUSH2 0x2EE5 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x273E DUP6 PUSH2 0x2EDF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2775 JUMPI DUP4 DUP4 SUB DUP9 MSTORE PUSH2 0x2759 DUP4 DUP4 MLOAD PUSH2 0x283C JUMP JUMPDEST SWAP3 POP PUSH2 0x2764 DUP3 PUSH2 0x2EDF JUMP JUMPDEST PUSH1 0x20 SWAP9 SWAP1 SWAP9 ADD SWAP8 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x2741 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x278C DUP3 PUSH2 0x2EE5 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x27A5 DUP6 PUSH2 0x2EDF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2775 JUMPI DUP4 DUP4 SUB DUP9 MSTORE PUSH2 0x27C0 DUP4 DUP4 MLOAD PUSH2 0x2B63 JUMP JUMPDEST SWAP3 POP PUSH2 0x27CB DUP3 PUSH2 0x2EDF JUMP JUMPDEST PUSH1 0x20 SWAP9 SWAP1 SWAP9 ADD SWAP8 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x27A8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27E7 DUP3 PUSH2 0x2EE5 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH2 0x27F9 DUP4 PUSH2 0x2EDF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2829 JUMPI PUSH2 0x280F DUP7 DUP4 MLOAD PUSH2 0x2C6F JUMP JUMPDEST PUSH2 0x2818 DUP3 PUSH2 0x2EDF JUMP JUMPDEST PUSH1 0x20 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x27FC JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2714 DUP2 PUSH2 0x2F02 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2847 DUP3 PUSH2 0x2EE5 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x285B DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2F43 JUMP JUMPDEST PUSH2 0x2864 DUP2 PUSH2 0x2F6F JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x23 DUP2 MSTORE PUSH32 0x44454641554C545F46554E4354494F4E5F574554485F434F4E54524143545F4F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x4E4C590000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x11 DUP2 MSTORE PUSH32 0x494E56414C49445F4D53475F56414C5545000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x17 DUP2 MSTORE PUSH32 0x56414C55455F475245415445525F5448414E5F5A45524F000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x26 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x10 DUP2 MSTORE PUSH32 0x55494E543235365F4F564552464C4F5700000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x18 DUP2 MSTORE PUSH32 0x4645455F50524F504F5254494F4E5F544F4F5F4C415247450000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP2 MSTORE PUSH32 0x5452414E534645525F4641494C45440000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x16 DUP2 MSTORE PUSH32 0x554E41434345505441424C455F5448524553484F4C4400000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x26 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x17 DUP2 MSTORE PUSH32 0x554E535550504F525445445F544F4B454E5F50524F5859000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x25 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F345F4C454E4754485F524551 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5549524544000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0x2B2A DUP5 DUP3 PUSH2 0x2C6F JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2B3D PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2C6F JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2B50 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x2C6F JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1177 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x2C6F JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x180 DUP5 ADD SWAP1 PUSH2 0x2B78 DUP6 DUP3 PUSH2 0x270B JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x2B8B PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x270B JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x2B9E PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x270B JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x2BB1 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x270B JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x2BC4 PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x2C6F JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x2BD7 PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x2C6F JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x2BEA PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0x2C6F JUMP JUMPDEST POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x2BFD PUSH1 0xE0 DUP7 ADD DUP3 PUSH2 0x2C6F JUMP JUMPDEST POP PUSH2 0x100 DUP4 ADD MLOAD PUSH2 0x2C12 PUSH2 0x100 DUP7 ADD DUP3 PUSH2 0x2C6F JUMP JUMPDEST POP PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x2C27 PUSH2 0x120 DUP7 ADD DUP3 PUSH2 0x2C6F JUMP JUMPDEST POP PUSH2 0x140 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x140 DUP7 ADD MSTORE PUSH2 0x2C41 DUP3 DUP3 PUSH2 0x283C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x160 DUP7 ADD MSTORE PUSH2 0x2C5D DUP3 DUP3 PUSH2 0x283C JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2714 DUP2 PUSH2 0x2F27 JUMP JUMPDEST PUSH2 0x2714 DUP2 PUSH2 0x2F2E JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x2C86 DUP3 DUP7 PUSH2 0x270B JUMP JUMPDEST PUSH2 0x2C93 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x270B JUMP JUMPDEST PUSH2 0x28D PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2C6F JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x2CAE DUP3 DUP6 PUSH2 0x270B JUMP JUMPDEST PUSH2 0xB84 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2C6F JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x2CCC DUP2 DUP7 PUSH2 0x2781 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2CE0 DUP2 DUP6 PUSH2 0x27DC JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2C5D DUP2 DUP5 PUSH2 0x271A JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x2D05 DUP2 DUP7 PUSH2 0x2781 JUMP JUMPDEST SWAP1 POP PUSH2 0x2D14 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2C6F JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2C5D DUP2 DUP5 PUSH2 0x271A JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xC9A DUP3 DUP5 PUSH2 0x2833 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x2871 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x28C7 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x28F7 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x2927 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x297D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x29AD JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x29DD JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x2A0D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x2A3D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x2A93 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC9A DUP2 PUSH2 0x2AC3 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xC9A DUP3 DUP5 PUSH2 0x2B19 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xB84 DUP2 DUP5 PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x2E14 DUP2 DUP7 PUSH2 0x2B63 JUMP JUMPDEST SWAP1 POP PUSH2 0x2E23 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2C6F JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2C5D DUP2 DUP5 PUSH2 0x283C JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xC9A DUP3 DUP5 PUSH2 0x2C66 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xC9A DUP3 DUP5 PUSH2 0x2C6F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2E70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2E8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2EB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2F5E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2F46 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1177 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP1 JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 DUP5 DUP10 0xdb SWAP5 SWAP9 0xc3 SWAP8 0xb4 PUSH19 0xD53B1A17FFB22E708FA9C873A4ADAC874BC084 EXTCODECOPY 0xb5 LOG0 SAR PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
				"sourceMap": "834:541:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1170:11:3;;;;1148:10;:34;1127:116;;;;;;;;;;;;;;;;;;;;;;834:541:0;1336:209:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1336:209:6;;;;;;;;;;;;;;;;;;;;;;;;;2948:2408:4;;;;;;;;;;;;;;;;;;1419:950:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1419:950:2;;;;;;;;;925:59:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;925:59:3;;;;;;;;;;;;6714:1894:4;;;;;;;;;;786:53:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;786:53:3;;;;875:37;;8:9:-1;5:2;;;30:1;27;20:12;5:2;875:37:3;;;;2778:732:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2778:732:2;;;;;;;;;3919:1414;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3919:1414:2;;;;;;;;;1147:183:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1147:183:6;;;;;;;;;1336:209;1079:60;;;;;;;;;;;;;;;;;;;;;1336:209;;;;;;;:::o;2948:2408:4:-;3250:35;;:::i;:::-;3326:9;3301:22;;;3366:18;;;3345:88;;;;;;;;;;;;;;3529:100;3552:14;3580:13;3607:12;3529:9;:100::i;:::-;3506:123;;3664:37;3672:14;3688:12;3664:7;:37::i;:::-;3639:62;;3768:11;;;;;;;;;;;:19;;;3794:14;3768:43;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3768:43:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3768:43:4;;;;;4005:50;4026:6;4033:1;4026:9;;;;;;;;;;;;;;;;;;:24;;;4052:2;4005:20;:50::i;:::-;4092:15;4065:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3977:78;;-1:-1:-1;4065:42:4;;4092:15;4065:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:6;4072:1;4065:9;;;;;;;;;;;;;;;;;;;:24;;:42;4150:9;;;4121:39;;;4150:9;;4121:39;4117:614;;;4360:125;4405:6;4429:10;4457:14;4360:27;:125::i;:::-;4341:144;;4117:614;;;4535:185;4582:6;4606:10;4634:9;4661:13;4692:14;4535:29;:185::i;:::-;4516:204;;4117:614;4856:39;;;;4838:57;;;4817:121;;;;;;;;;;;;;;5038:39;;;;5020:57;;4999:126;;;;;;;;;;;;;;5180:136;5212:17;5243:10;5267:16;:39;;;5180:18;:136::i;:::-;2948:2408;;;;;;;;;;;;:::o;1419:950:2:-;1583:35;;:::i;:::-;1639:9;1692:37;1816;2035:35;;:::i;:::-;1651:1;1639:13;;1634:696;1658:6;:13;1654:1;:17;1634:696;;;1732:70;1740:20;1762:16;:39;;;1732:7;:70::i;:::-;1692:110;;1856:165;1890:6;1897:1;1890:9;;;;;;;;;;;;;;;;;;:26;;;1934:6;1941:1;1934:9;;;;;;;;;;;;;;;;;;:26;;;1978:29;1856:16;:165::i;:::-;1816:205;;2073:62;2094:6;2101:1;2094:9;;;;;;;;;;;;;;;;;;2105:29;2073:20;:62::i;:::-;2035:100;;2149:50;2164:16;2182;2149:14;:50::i;:::-;2217:39;;:63;;2213:107;;;2300:5;;2213:107;1673:3;;;;;1634:696;;;1419:950;;;;;;;;:::o;925:59:3:-;980:4;925:59;:::o;6714:1894:4:-;7055:35;;:::i;:::-;7131:9;7106:22;7171:18;;;7150:88;;;;;;;;;;;;;;7292:1;7269:24;;7248:94;;;;;;;;;;;;;;7373:48;7393:6;7400:1;7393:9;;;;;;;;;;;;;;;;;;:24;;;7419:1;7373:19;:48::i;:::-;1204:32;;;;;;;;;;;;;;;;7352:69;;-1:-1:-1;7452:28:4;;;;;;;;:61;;-1:-1:-1;1292:41:4;;;;;;;;;;;;;;;;7484:29;;;;;;;7452:61;7431:131;;;;;;;;;;;;;;;;7573:11;;;;;;;;;;;:19;;;7599:14;7573:43;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7573:43:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;1204:32:4;;;;;;;;;;;;;;;;7630:28;;;;;;;7626:505;;-1:-1:-1;7626:505:4;;-1:-1:-1;;7626:505:4;7693:190;7739:6;7763:10;7791:9;7818:13;7849:20;7693:28;:190::i;:::-;7674:209;;7626:505;;;1292:41;;;;;;;;;;;;;;;;7904:29;;;;;;;7900:231;;;7968:152;8014:6;8038:10;8066:9;8093:13;7968:28;:152::i;:::-;7949:171;;7900:231;8256:39;;;;8238:57;;;8217:121;;;;;;;;;;;;;;8348:220;8388:64;8396:14;8412:16;:39;;;8388:7;:64::i;:::-;8466:16;:39;;;8519:13;8546:12;8348:26;:220::i;:::-;6714:1894;;;;;;;;;;;:::o;786:53:3:-;834:5;786:53;:::o;875:37::-;908:4;875:37;:::o;2778:732:2:-;2943:35;;:::i;:::-;2999:9;3052:37;3176:35;;:::i;:::-;3011:1;2999:13;;2994:477;3018:6;:13;3014:1;:17;2994:477;;;3092:70;3100:20;3122:16;:39;;;3092:7;:70::i;:::-;3052:110;;3214:62;3235:6;3242:1;3235:9;;;;;;;;;3214:62;3176:100;;3290:50;3305:16;3323;3290:14;:50::i;:::-;3401:20;3358:16;:39;;;:63;3354:107;;;3441:5;;3354:107;3033:3;;;;;2994:477;;;2778:732;;;;;;;:::o;3919:1414::-;4079:35;;:::i;:::-;4135:9;4188:30;4479:31;4747:35;;:::i;:::-;4147:1;4135:13;;4130:1164;4154:6;:13;4150:1;:17;4130:1164;;;4221:63;4229:13;4244:16;:39;;;4221:7;:63::i;:::-;4188:96;;4513:220;4547:6;4554:1;4547:9;;;;;;;;;;;;;;;;;;:26;;;4591:55;4599:6;4606:1;4599:9;;;;;;;;;;;;;;;;;;:26;;;4627:6;4634:1;4627:9;;;;;;;;;;;;;;;;;;:18;;;4591:7;:55::i;:::-;4697:22;4513:16;:220::i;:::-;4479:254;;4785:68;4806:6;4813:1;4806:9;;;;;;;;;;;;;;;;;;4817:35;4825:23;4850:1;4817:7;:35::i;:::-;4785:20;:68::i;:::-;4747:106;;4910:79;4918:16;:39;;;4959:16;:29;;;4910:7;:79::i;:::-;4868:121;;5003:50;5018:16;4868;5003:14;:50::i;:::-;5188:39;;:56;-1:-1:-1;5184:100:2;;5264:5;;5184:100;4169:3;;;;;4130:1164;;1147:183:6;961:52;;;;;;;;;;;;;;;;;;;;;1147:183;;;;;;:::o;1644:695:3:-;1795:20;1851:1;1835:13;:17;;;:47;;;;-1:-1:-1;1856:26:3;;;;;1835:47;1831:473;;;908:4;1923:24;;;;;1898:107;;;;;;;;;;;;;;2111:133;;;;834:5;2216:14;2111:16;:133::i;:::-;2258:35;;2096:148;;-1:-1:-1;2258:21:3;;;;:35;;;;;2096:148;;2258:35;;;;2096:148;2258:21;:35;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2258:35:3;1644:695;;;;;:::o;501:207:30:-;587:7;631:6;;;;610:69;;;;;;;;;;;;;;-1:-1:-1;696:5:30;;;501:207;;;;;:::o;10259:886:29:-;10380:14;10443:5;10451:2;10443:10;10431:1;:8;:22;;10410:135;;;;;;;;;;;;;;;;-1:-1:-1;11047:13:29;10792:2;11047:13;11041:20;11063:42;11037:69;;10259:886::o;11412:994:4:-;11596:35;;:::i;:::-;12036:23;11753:8;;:107;;;;;:8;;;;;:25;;:107;;11792:6;;11812:14;;11840:10;;11753:107;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11753:107:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11753:107:4;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;11753:107:4;;;;;;;;;11734:126;;12062:79;12070:16;:39;;;12111:16;:29;;;12062:7;:79::i;:::-;12036:105;;12172:79;12194:16;:39;;;12235:15;12172:21;:79::i;:::-;12151:148;;;;;;;;;;;;;;;;12309:57;;;11412:994;-1:-1:-1;;;11412:994:4:o;9156:1906::-;9423:35;;:::i;:::-;9474:31;9532:46;;:::i;:::-;9802:35;;:::i;:::-;10735:41;;:::i;:::-;9508:14;9474:48;;9581:50;9608:6;9616:14;9581:26;:50::i;:::-;9532:99;;9688:1;9645:27;:40;;;:44;9641:998;;;9840:150;9878:9;9905:13;9936:27;:40;;;9840:20;:150::i;:::-;9802:188;;10128:161;10171:14;10207:64;10215:14;10231:16;:39;;;10207:7;:64::i;:::-;10128:21;:161::i;:::-;10103:242;;;;;;;;;;;;;;;;10385:73;10393:23;10418:16;:39;;;10385:7;:73::i;:::-;10504:29;;;;;10472;;;:61;10589:39;;;;;10547;;;:81;10359:99;-1:-1:-1;9641:998:4;10779:8;;:116;;;;;:8;;;;;:25;;:116;;10818:6;;10838:23;;10875:10;;10779:116;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10779:116:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10779:116:4;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;10779:116:4;;;;;;;;;10735:160;;10966:56;10981:16;10999:22;10966:14;:56::i;:::-;9156:1906;;;;;;;;;;;:::o;1551:1224:6:-;866:38;;;;;;;;;;;;;;;;1809:12;;1824:10;;;;866:38;1835:105;;1908:2;;1924:6;;1835:105;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;1835:105:6;;;49:4:-1;25:18;;61:17;;1835:105:6;182:15:-1;1835:105:6;;;;179:29:-1;;;;160:49;;1824:117:6;;;1835:105;;1824:117;;;;25:18:-1;1824:117:6;;25:18:-1;-1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1824:117:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1951:69:6;;;;;;;;;;;;;;;;;2399:14;2396:2;;;-1:-1:-1;2443:1:6;2467:14;2483:2;2464:22;2461:2;;;2605;2602:1;2599;2584:24;-1:-1:-1;2646:1:6;2640:8;2461:2;2720:7;2699:69;;;;;;;;;;;;;;;;1551:1224;;;;:::o;937:326:24:-;1091:21;1144:82;1165:26;1173:9;1184:6;1165:7;:26::i;:::-;1205:11;1144:7;:82::i;5694:1215:2:-;5852:30;;:::i;:::-;5898:35;;:::i;:::-;6093:33;5936:8;;:28;;;;;6093:33;;5936:8;;;:21;;:28;;5958:5;;5936:28;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5936:28:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5936:28:2;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;5936:28:2;;;;;;;;;5978:21;;5898:66;;-1:-1:-1;5978:61:2;;6009:29;5978:61;5974:110;;6055:18;;5974:110;6129:70;6137:5;:22;;;6161:9;:37;;;6129:7;:70::i;:::-;6093:106;;6242:55;6249:20;6271:25;6242:6;:55::i;:::-;6209:88;;6345:22;6308:11;:34;;:59;;;;;6414:134;6444:22;6480:5;:22;;;6516:5;:22;;;6414:16;:134::i;:::-;6377:171;;6651:22;;;;6687:14;;;;6585:126;;6615:22;;6585:16;:126::i;:::-;6558:24;;;:153;6814:22;;;;6850:14;;;;6748:126;;6778:22;;6748:16;:126::i;:::-;6721:24;;;:153;5694:1215;;;;;;;:::o;1772:648:23:-;1965:39;;2006:40;;1957:90;;1965:39;1957:7;:90::i;:::-;1915:132;;2107:39;;;;;2148:40;;;;2099:90;;2107:39;2099:7;:90::i;:::-;2057:39;;;:132;2239:29;;;;;2270:30;;;;2231:70;;2239:29;2231:7;:70::i;:::-;2199:29;;;:102;2351:29;;;;;2382:30;;;;2343:70;;2351:29;2343:7;:70::i;:::-;2311:29;;;;:102;;;;-1:-1:-1;1772:648:23:o;15559:559:29:-;15679:13;15741:5;15749:1;15741:9;15729:1;:8;:21;;15708:105;;;;;;;;;;;;;;;;-1:-1:-1;;15869:2:29;15862:10;15856:17;16012:66;16000:79;;15559:559::o;13015:3595:4:-;13287:50;;:::i;:::-;13448:25;14021:35;;:::i;:::-;14945:45;;:::i;:::-;15230:38;;:::i;:::-;13476:50;13497:6;13504:1;13497:9;;;;;;;;;13476:50;13768:15;13741:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13448:78;;-1:-1:-1;13741:42:4;;13768:15;13741:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:6;13748:1;13741:9;;;;;;;;;;;;;;;;;;;:24;;:42;14099:9;;;14070:39;;;14099:9;;14070:39;14066:2304;;;14144:124;14182:6;14206:10;14234:20;14144;:124::i;:::-;14392:39;;14125:143;;-1:-1:-1;14392:63:4;-1:-1:-1;14392:63:4;14367:144;;;;;;;;;;;;;;14525:50;14540:16;14558;14525:14;:50::i;:::-;14614:244;14657:79;14665:16;:39;;;14706:16;:29;;;14657:7;:79::i;:::-;14771:39;;14614:21;:244::i;:::-;14589:325;;;;;;;;;;;;;;;;14066:2304;;;14993:55;15019:6;15027:20;14993:25;:55::i;:::-;14945:103;;15108:1;15066:26;:39;;;:43;15062:573;;;15271:165;15313:9;15344:13;15379:26;:39;;;15271:20;:165::i;:::-;15496:42;;;;;15454:39;;;:84;15588:32;;;;;15556:29;;;:64;15230:206;-1:-1:-1;15062:573:4;15753:8;;:128;;;;;:8;;;;;:24;;:128;;15795:6;;15819:20;;15857:10;;15753:128;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15753:128:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;15753:128:4;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;15753:128:4;;;;;;;;;15920:39;;15734:147;;-1:-1:-1;15920:63:4;;15895:144;;;;;;;;;;;;;;16053:50;16068:16;16086;16053:14;:50::i;:::-;16142:161;16185:16;:39;;;16246:16;:39;;;16142:21;:161::i;:::-;16117:242;;;;;;;;;;;;;;;;16434:136;16466:17;16497:10;16521:16;:39;;;16434:18;:136::i;17155:2228::-;17389:50;;:::i;:::-;17455:25;17490:20;17536:38;17619:9;18298:38;;:::i;:::-;18662:35;;:::i;:::-;17513:6;:13;17490:36;;17591:12;17577:27;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;17577:27:4;;17536:68;;17631:1;17619:13;;17614:543;17638:12;17634:1;:16;17614:543;;;17724:46;17732:17;17751:6;17758:1;17751:9;;;;;;;;;;;;;;;;;;:18;;;17724:7;:46::i;:::-;17998:15;17971:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17704:66;;-1:-1:-1;17971:42:4;;17998:15;17971:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:6;17978:1;17971:9;;;;;;;;;;;;;;;;;;;:24;;:42;18120:9;;:6;;18127:1;;18120:9;;;;;;;;;;;;;;:26;;;18093:21;18115:1;18093:24;;;;;;;;;;;;;;;;;;:53;17652:3;;;;;17614:543;;;18190:1;18170:17;:21;18166:487;;;18339:127;18377:9;18404:13;18435:17;18339:20;:127::i;:::-;18512:32;;;;;18480:29;;;:64;18600:42;;;;;18558:39;;;:84;18298:168;-1:-1:-1;18166:487:4;18700:8;;:119;;;;;:8;;;;;:30;;:119;;18744:6;;18764:21;;18799:10;;18700:119;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18700:119:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;18700:119:4;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;18700:119:4;;;;;;;;;18662:157;;18829:50;18844:16;18862;18829:14;:50::i;:::-;18910:149;18949:16;:39;;;19006:16;:39;;;18910:21;:149::i;:::-;18889:218;;;;;;;;;;;;;;;;19190:1;19186:5;;19181:163;19197:12;19193:1;:16;19181:163;;;19230:103;19267:6;19274:1;19267:9;;;;;;;;;;;;;;;;;;:24;;;19309:10;19230:19;:103::i;:::-;19211:3;;;;;19181:163;;;17155:2228;;;;;;;;;;;;:::o;2960:777:3:-;3391:20;3544:24;3267:1;3247:17;:21;3243:488;;;3284:11;;:39;;;;;:11;;;;;:20;;:39;;3305:17;;3284:39;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3284:39:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3284:39:3;;;;3414:116;3441:14;3473:13;3504:12;3414:9;:116::i;:::-;3391:139;;3571:40;3579:17;3598:12;3571:7;:40::i;:::-;3544:67;;3648:1;3629:16;:20;3625:96;;;3669:37;;:10;;:37;;;;;3689:16;;3669:37;;;;3689:16;3669:10;:37;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3669:37:3;3625:96;2960:777;;;;;;:::o;714:230:30:-;800:7;835:5;;;871:6;;;;850:69;;;;;;;;;;;;;;936:1;929:8;;714:230;;;;;;:::o;4350:384:3:-;4482:4;;4533:138;980:4;834:5;4642:19;4533:16;:138::i;:::-;4688:39;;;;;4350:384;-1:-1:-1;;;4350:384:3:o;1831:2046:5:-;2006:35;;:::i;:::-;2062:9;2386:29;2675:31;3095:35;;:::i;:::-;2074:1;2062:13;;2057:1781;2081:6;:13;2077:1;:17;2057:1781;;;2235:14;2208:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2235:14;2208:41;;2235:14;2208:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:6;2215:1;2208:9;;;;;;;;;;;;;;;;;;;;:24;;:41;;;;2290:15;2263:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2290:15;2263:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:6;2270:1;2263:9;;;;;;;;;;;;;;;;;;;:24;;:42;2440:39;;2418:62;;2426:12;;2418:7;:62::i;:::-;2386:94;;2709:219;2743:6;2750:1;2743:9;;;;;;;;;;;;;;;;;;:26;;;2787:55;2795:6;2802:1;2795:9;;;;;;;;;;;;;;;;;;:26;;;2823:6;2830:1;2823:9;;;;;;;;;2709:219;3133:8;;3169:9;;2675:253;;-1:-1:-1;3133:8:5;;;:18;;3169:6;;3176:1;;3169:9;;;;;;;;;;;;;;3196:35;3204:23;3229:1;3196:7;:35::i;:::-;3249:10;3260:1;3249:13;;;;;;;;;;;;;;;;;;3133:143;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3133:143:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3133:143:5;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3133:143:5;;;;;;;;;3095:181;;3421:79;3429:16;:39;;;3470:16;:29;;;3421:7;:79::i;:::-;3379:121;;3584:50;3599:16;3379;3584:14;:50::i;:::-;3733:39;;:55;-1:-1:-1;3729:99:5;;3808:5;;3729:99;2096:3;;;;;2057:1781;;;1831:2046;;;;;;;;;:::o;50:288:30:-;136:7;;163:6;;159:45;;;192:1;185:8;;;;159:45;-1:-1:-1;225:5:30;;;229:1;225;:5;261;;;;;;;;:10;240:73;;;;;;;;;;;;;344:151;430:7;453:9;469:1;465;:5;;;;;;;;;344:151;-1:-1:-1;;;;344:151:30:o;1369:135::-;1454:7;1488:1;1484;:5;:13;;1496:1;1484:13;;;-1:-1:-1;1492:1:30;;1477:20;-1:-1:-1;1369:135:30:o;2781:365:6:-;2929:13;;2945:25;:9;2967:2;2945:25;:21;:25;:::i;:::-;2929:41;-1:-1:-1;2998:25:6;:9;3020:2;2998:25;:21;:25;:::i;:::-;3033:106;;;;;2980:43;;-1:-1:-1;3033:32:6;;;;;;:106;;3087:4;;3106:2;;2980:43;;3033:106;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3033:106:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3033:106:6;;;;2781:365;;;;:::o;14699:195:29:-;14820:14;14865:21;14877:1;14880:5;13402:14;13465:5;13473:2;13465:10;13453:1;:8;:22;;13432:107;;;;;;;;;;;;;;;;-1:-1:-1;13718:13:29;13620:2;13718:13;13712:20;;13281:490::o;834:541:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;834:541:0;;;;;;;;;;;;;;;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;146:693;;261:4;249:17;;245:27;-1:-1;235:2;;286:1;283;276:12;235:2;323:6;310:20;345:85;360:69;422:6;360:69;;;345:85;;;458:21;;;502:4;490:17;;;;336:94;;-1:-1;515:14;;490:17;610:1;595:238;620:6;617:1;614:13;595:238;;;703:3;690:17;682:6;678:30;727:42;765:3;753:10;727:42;;;715:55;;-1:-1;793:4;784:14;;;;812;;;;;642:1;635:9;595:238;;879:735;;1008:4;996:17;;992:27;-1:-1;982:2;;1033:1;1030;1023:12;982:2;1070:6;1057:20;1092:99;1107:83;1183:6;1107:83;;1092:99;1219:21;;;1263:4;1251:17;;;;1083:108;;-1:-1;1276:14;;1251:17;1371:1;1356:252;1381:6;1378:1;1375:13;1356:252;;;1464:3;1451:17;1443:6;1439:30;1488:56;1540:3;1528:10;1488:56;;;1476:69;;-1:-1;1568:4;1559:14;;;;1587;;;;;1403:1;1396:9;1356:252;;1622:122;;1700:39;1731:6;1725:13;1700:39;;1752:432;;1842:4;1830:17;;1826:27;-1:-1;1816:2;;1867:1;1864;1857:12;1816:2;1904:6;1891:20;1926:60;1941:44;1978:6;1941:44;;1926:60;1917:69;;2006:6;1999:5;1992:21;2042:4;2034:6;2030:17;2075:4;2068:5;2064:16;2110:3;2101:6;2096:3;2092:16;2089:25;2086:2;;;2127:1;2124;2117:12;2086:2;2137:41;2171:6;2166:3;2161;2137:41;;2681:865;;2810:4;2798:9;2793:3;2789:19;2785:30;2782:2;;;2828:1;2825;2818:12;2782:2;2846:20;2861:4;2846:20;;;2837:29;-1:-1;2934:1;2965:60;3021:3;3001:9;2965:60;;;2941:85;;-1:-1;3105:2;3138:60;3194:3;3170:22;;;3138:60;;;3131:4;3124:5;3120:16;3113:86;3047:163;3268:2;3301:60;3357:3;3348:6;3337:9;3333:22;3301:60;;;3294:4;3287:5;3283:16;3276:86;3220:153;3431:2;3464:60;3520:3;3511:6;3500:9;3496:22;3464:60;;;3457:4;3450:5;3446:16;3439:86;3383:153;2776:770;;;;;3585:689;;3712:4;3700:9;3695:3;3691:19;3687:30;3684:2;;;3730:1;3727;3720:12;3684:2;3748:20;3763:4;3748:20;;;3739:29;-1:-1;3825:1;3856:58;3910:3;3890:9;3856:58;;;3832:83;;-1:-1;3981:2;4014:60;4070:3;4046:22;;;4014:60;;;4007:4;4000:5;3996:16;3989:86;3936:150;4159:2;4192:60;4248:3;4239:6;4228:9;4224:22;4192:60;;;4185:4;4178:5;4174:16;4167:86;4096:168;3678:596;;;;;4309:2205;;4417:5;4405:9;4400:3;4396:19;4392:31;4389:2;;;4436:1;4433;4426:12;4389:2;4454:21;4469:5;4454:21;;;4445:30;-1:-1;4533:1;4564:49;4609:3;4589:9;4564:49;;;4540:74;;-1:-1;4683:2;4716:49;4761:3;4737:22;;;4716:49;;;4709:4;4702:5;4698:16;4691:75;4635:142;4842:2;4875:49;4920:3;4911:6;4900:9;4896:22;4875:49;;;4868:4;4861:5;4857:16;4850:75;4787:149;4995:2;5028:49;5073:3;5064:6;5053:9;5049:22;5028:49;;;5021:4;5014:5;5010:16;5003:75;4946:143;5151:3;5185:49;5230:3;5221:6;5210:9;5206:22;5185:49;;;5178:4;5171:5;5167:16;5160:75;5099:147;5308:3;5342:49;5387:3;5378:6;5367:9;5363:22;5342:49;;;5335:4;5328:5;5324:16;5317:75;5256:147;5457:3;5491:49;5536:3;5527:6;5516:9;5512:22;5491:49;;;5484:4;5477:5;5473:16;5466:75;5413:139;5606:3;5640:49;5685:3;5676:6;5665:9;5661:22;5640:49;;;5633:4;5626:5;5622:16;5615:75;5562:139;5768:3;5803:49;5848:3;5839:6;5828:9;5824:22;5803:49;;;5795:5;5788;5784:17;5777:76;5711:153;5914:3;5949:49;5994:3;5985:6;5974:9;5970:22;5949:49;;;5941:5;5934;5930:17;5923:76;5874:136;6098:3;6087:9;6083:19;6070:33;6123:18;6115:6;6112:30;6109:2;;;6155:1;6152;6145:12;6109:2;6191:54;6241:3;6232:6;6221:9;6217:22;6191:54;;;6183:5;6176;6172:17;6165:81;6020:237;6345:3;6334:9;6330:19;6317:33;6370:18;6362:6;6359:30;6356:2;;;6402:1;6399;6392:12;6356:2;6438:54;6488:3;6479:6;6468:9;6464:22;6438:54;;;6430:5;6423;6419:17;6412:81;6267:237;4383:2131;;;;;6521:116;;6587:45;6624:6;6611:20;6587:45;;6644:118;;6711:46;6749:6;6736:20;6711:46;;6898:118;;6974:37;7003:6;6997:13;6974:37;;7023:721;;;;;7187:3;7175:9;7166:7;7162:23;7158:33;7155:2;;;7204:1;7201;7194:12;7155:2;7239:1;7256:53;7301:7;7281:9;7256:53;;;7246:63;;7218:97;7346:2;7364:53;7409:7;7400:6;7389:9;7385:22;7364:53;;;7354:63;;7325:98;7454:2;7472:53;7517:7;7508:6;7497:9;7493:22;7472:53;;;7462:63;;7433:98;7590:2;7579:9;7575:18;7562:32;7614:18;7606:6;7603:30;7600:2;;;7646:1;7643;7636:12;7600:2;7666:62;7720:7;7711:6;7700:9;7696:22;7666:62;;;7656:72;;7541:193;7149:595;;;;;;;;7751;;;;7898:2;7886:9;7877:7;7873:23;7869:32;7866:2;;;7914:1;7911;7904:12;7866:2;7949:1;7966:53;8011:7;7991:9;7966:53;;;7956:63;;7928:97;8056:2;8074:53;8119:7;8110:6;8099:9;8095:22;8074:53;;;8064:63;;8035:98;8192:2;8181:9;8177:18;8164:32;8216:18;8208:6;8205:30;8202:2;;;8248:1;8245;8238:12;8202:2;8268:62;8322:7;8313:6;8302:9;8298:22;8268:62;;;8258:72;;8143:193;7860:486;;;;;;8353:1507;;;;;;;8689:3;8677:9;8668:7;8664:23;8660:33;8657:2;;;8706:1;8703;8696:12;8657:2;8741:31;;8792:18;8781:30;;8778:2;;;8824:1;8821;8814:12;8778:2;8844:97;8933:7;8924:6;8913:9;8909:22;8844:97;;;8834:107;;8720:227;9006:2;8995:9;8991:18;8978:32;9030:18;9022:6;9019:30;9016:2;;;9062:1;9059;9052:12;9016:2;9082:83;9157:7;9148:6;9137:9;9133:22;9082:83;;;9072:93;;8957:214;9230:2;9219:9;9215:18;9202:32;9254:18;9246:6;9243:30;9240:2;;;9286:1;9283;9276:12;9240:2;9306:97;9395:7;9386:6;9375:9;9371:22;9306:97;;;9296:107;;9181:228;9468:2;9457:9;9453:18;9440:32;9492:18;9484:6;9481:30;9478:2;;;9524:1;9521;9514:12;9478:2;9544:83;9619:7;9610:6;9599:9;9595:22;9544:83;;;9534:93;;9419:214;9664:3;9683:52;9727:7;9718:6;9707:9;9703:22;9683:52;;;9673:62;;9643:98;9772:3;9791:53;9836:7;9827:6;9816:9;9812:22;9791:53;;;9781:63;;9751:99;8651:1209;;;;;;;;;9867:1633;;;;;;;;10220:3;10208:9;10199:7;10195:23;10191:33;10188:2;;;10237:1;10234;10227:12;10188:2;10272:31;;10323:18;10312:30;;10309:2;;;10355:1;10352;10345:12;10309:2;10375:97;10464:7;10455:6;10444:9;10440:22;10375:97;;;10365:107;;10251:227;10537:2;10526:9;10522:18;10509:32;10561:18;10553:6;10550:30;10547:2;;;10593:1;10590;10583:12;10547:2;10613:83;10688:7;10679:6;10668:9;10664:22;10613:83;;;10603:93;;10488:214;10761:2;10750:9;10746:18;10733:32;10785:18;10777:6;10774:30;10771:2;;;10817:1;10814;10807:12;10771:2;10837:97;10926:7;10917:6;10906:9;10902:22;10837:97;;;10827:107;;10712:228;10999:2;10988:9;10984:18;10971:32;11023:18;11015:6;11012:30;11009:2;;;11055:1;11052;11045:12;11009:2;11075:83;11150:7;11141:6;11130:9;11126:22;11075:83;;;11065:93;;10950:214;11195:3;11214:53;11259:7;11250:6;11239:9;11235:22;11214:53;;;11204:63;;11174:99;11304:3;11323:52;11367:7;11358:6;11347:9;11343:22;11323:52;;;11313:62;;11283:98;11412:3;11431:53;11476:7;11467:6;11456:9;11452:22;11431:53;;;11421:63;;11391:99;10182:1318;;;;;;;;;;;11507:540;;;11672:2;11660:9;11651:7;11647:23;11643:32;11640:2;;;11688:1;11685;11678:12;11640:2;11723:31;;11774:18;11763:30;;11760:2;;;11806:1;11803;11796:12;11760:2;11826:97;11915:7;11906:6;11895:9;11891:22;11826:97;;;11816:107;;11702:227;11960:2;11978:53;12023:7;12014:6;12003:9;11999:22;11978:53;;;11968:63;;11939:98;11634:413;;;;;;12054:322;;12198:3;12186:9;12177:7;12173:23;12169:33;12166:2;;;12215:1;12212;12205:12;12166:2;12250:1;12267:93;12352:7;12332:9;12267:93;;12383:317;;12525:2;12513:9;12504:7;12500:23;12496:32;12493:2;;;12541:1;12538;12531:12;12493:2;12576:1;12593:91;12676:7;12656:9;12593:91;;12707:110;12780:31;12805:5;12780:31;;;12775:3;12768:44;12762:55;;;12851:766;;12996:59;13049:5;12996:59;;;13073:6;13068:3;13061:19;13097:4;13092:3;13088:14;13081:21;;13145:3;13187:4;13179:6;13175:17;13170:3;13166:27;13213:61;13268:5;13213:61;;;13295:1;13280:298;13305:6;13302:1;13299:13;13280:298;;;13367:9;13361:4;13357:20;13352:3;13345:33;13393:68;13456:4;13447:6;13441:13;13393:68;;;13385:76;;13478:65;13536:6;13478:65;;;13566:4;13557:14;;;;;13468:75;-1:-1;13327:1;13320:9;13280:298;;;-1:-1;13591:4;;12975:642;-1:-1;;;;;;12975:642;13684:864;;13857:73;13924:5;13857:73;;;13948:6;13943:3;13936:19;13972:4;13967:3;13963:14;13956:21;;14020:3;14062:4;14054:6;14050:17;14045:3;14041:27;14088:75;14157:5;14088:75;;;14184:1;14169:340;14194:6;14191:1;14188:13;14169:340;;;14256:9;14250:4;14246:20;14241:3;14234:33;14282:96;14373:4;14364:6;14358:13;14282:96;;;14274:104;;14395:79;14467:6;14395:79;;;14497:4;14488:14;;;;;14385:89;-1:-1;14216:1;14209:9;14169:340;;14587:590;;14722:54;14770:5;14722:54;;;14794:6;14789:3;14782:19;14818:4;14813:3;14809:14;14802:21;;14863:56;14913:5;14863:56;;;14940:1;14925:230;14950:6;14947:1;14944:13;14925:230;;;14990:53;15039:3;15030:6;15024:13;14990:53;;;15060:60;15113:6;15060:60;;;15143:4;15134:14;;;;;15050:70;-1:-1;14972:1;14965:9;14925:230;;;-1:-1;15168:3;;14701:476;-1:-1;;;;14701:476;15185:107;15256:30;15280:5;15256:30;;15299:289;;15395:34;15423:5;15395:34;;;15446:6;15441:3;15434:19;15458:63;15514:6;15507:4;15502:3;15498:14;15491:4;15484:5;15480:16;15458:63;;;15553:29;15575:6;15553:29;;;15533:50;;;15546:4;15533:50;;15375:213;-1:-1;;;15375:213;15596:397;15751:2;15739:15;;15788:66;15783:2;15774:12;;15767:88;15889:66;15884:2;15875:12;;15868:88;15984:2;15975:12;;15732:261;16002:296;16157:2;16145:15;;16194:66;16189:2;16180:12;;16173:88;16289:2;16280:12;;16138:160;16307:296;16462:2;16450:15;;16499:66;16494:2;16485:12;;16478:88;16594:2;16585:12;;16443:160;16612:397;16767:2;16755:15;;16804:66;16799:2;16790:12;;16783:88;16905:66;16900:2;16891:12;;16884:88;17000:2;16991:12;;16748:261;17018:296;17173:2;17161:15;;17210:66;17205:2;17196:12;;17189:88;17305:2;17296:12;;17154:160;17323:296;17478:2;17466:15;;17515:66;17510:2;17501:12;;17494:88;17610:2;17601:12;;17459:160;17628:296;17783:2;17771:15;;17820:66;17815:2;17806:12;;17799:88;17915:2;17906:12;;17764:160;17933:296;18088:2;18076:15;;18125:66;18120:2;18111:12;;18104:88;18220:2;18211:12;;18069:160;18238:397;18393:2;18381:15;;18430:66;18425:2;18416:12;;18409:88;18531:66;18526:2;18517:12;;18510:88;18626:2;18617:12;;18374:261;18644:296;18799:2;18787:15;;18836:66;18831:2;18822:12;;18815:88;18931:2;18922:12;;18780:160;18949:397;19104:2;19092:15;;19141:66;19136:2;19127:12;;19120:88;19242:66;19237:2;19228:12;;19221:88;19337:2;19328:12;;19085:261;19431:888;19659:22;;19572:4;19563:14;;;19693:61;19567:3;19659:22;19693:61;;;19592:174;19860:4;19853:5;19849:16;19843:23;19878:62;19934:4;19929:3;19925:14;19912:11;19878:62;;;19776:176;20036:4;20029:5;20025:16;20019:23;20054:62;20110:4;20105:3;20101:14;20088:11;20054:62;;;19962:166;20212:4;20205:5;20201:16;20195:23;20230:62;20286:4;20281:3;20277:14;20264:11;20230:62;;20379:2419;20594:22;;20379:2419;;20516:5;20507:15;;;20628:61;20511:3;20594:22;20628:61;;;20537:164;20785:4;20778:5;20774:16;20768:23;20803:62;20859:4;20854:3;20850:14;20837:11;20803:62;;;20711:166;20968:4;20961:5;20957:16;20951:23;20986:62;21042:4;21037:3;21033:14;21020:11;20986:62;;;20887:173;21145:4;21138:5;21134:16;21128:23;21163:62;21219:4;21214:3;21210:14;21197:11;21163:62;;;21070:167;21325:4;21318:5;21314:16;21308:23;21343:62;21399:4;21394:3;21390:14;21377:11;21343:62;;;21247:170;21505:4;21498:5;21494:16;21488:23;21523:62;21579:4;21574:3;21570:14;21557:11;21523:62;;;21427:170;21677:4;21670:5;21666:16;21660:23;21695:62;21751:4;21746:3;21742:14;21729:11;21695:62;;;21607:162;21849:4;21842:5;21838:16;21832:23;21867:62;21923:4;21918:3;21914:14;21901:11;21867:62;;;21779:162;22034:5;22027;22023:17;22017:24;22053:63;22109:5;22104:3;22100:15;22087:11;22053:63;;;21951:177;22204:5;22197;22193:17;22187:24;22223:63;22279:5;22274:3;22270:15;22257:11;22223:63;;;22138:160;22384:5;22377;22373:17;22367:24;22437:3;22431:4;22427:14;22419:5;22414:3;22410:15;22403:39;22457:66;22518:4;22505:11;22457:66;;;22449:74;;22308:227;22621:5;22614;22610:17;22604:24;22674:3;22668:4;22664:14;22656:5;22651:3;22647:15;22640:39;22694:66;22755:4;22742:11;22694:66;;;22686:74;20489:2309;-1:-1;;;;;20489:2309;25280:107;25351:30;25375:5;25351:30;;25394:110;25467:31;25492:5;25467:31;;25511:395;25675:2;25660:18;;25689:61;25664:9;25723:6;25689:61;;;25761:62;25819:2;25808:9;25804:18;25795:6;25761:62;;;25834;25892:2;25881:9;25877:18;25868:6;25834:62;;25913:294;26049:2;26034:18;;26063:61;26038:9;26097:6;26063:61;;;26135:62;26193:2;26182:9;26178:18;26169:6;26135:62;;26214:935;26576:2;26590:47;;;26561:18;;26651:136;26561:18;26773:6;26651:136;;;26643:144;;26835:9;26829:4;26825:20;26820:2;26809:9;26805:18;26798:48;26860:98;26953:4;26944:6;26860:98;;;26852:106;;27006:9;27000:4;26996:20;26991:2;26980:9;26976:18;26969:48;27031:108;27134:4;27125:6;27031:108;;27156:787;27468:2;27482:47;;;27453:18;;27543:136;27453:18;27665:6;27543:136;;;27535:144;;27690:62;27748:2;27737:9;27733:18;27724:6;27690:62;;;27800:9;27794:4;27790:20;27785:2;27774:9;27770:18;27763:48;27825:108;27928:4;27919:6;27825:108;;27950:189;28056:2;28041:18;;28070:59;28045:9;28102:6;28070:59;;28146:387;28327:2;28341:47;;;28312:18;;28402:121;28312:18;28402:121;;28540:387;28721:2;28735:47;;;28706:18;;28796:121;28706:18;28796:121;;28934:387;29115:2;29129:47;;;29100:18;;29190:121;29100:18;29190:121;;29328:387;29509:2;29523:47;;;29494:18;;29584:121;29494:18;29584:121;;29722:387;29903:2;29917:47;;;29888:18;;29978:121;29888:18;29978:121;;30116:387;30297:2;30311:47;;;30282:18;;30372:121;30282:18;30372:121;;30510:387;30691:2;30705:47;;;30676:18;;30766:121;30676:18;30766:121;;30904:387;31085:2;31099:47;;;31070:18;;31160:121;31070:18;31160:121;;31298:387;31479:2;31493:47;;;31464:18;;31554:121;31464:18;31554:121;;31692:387;31873:2;31887:47;;;31858:18;;31948:121;31858:18;31948:121;;32086:387;32267:2;32281:47;;;32252:18;;32342:121;32252:18;32342:121;;32480:310;32646:3;32631:19;;32661:119;32635:9;32753:6;32661:119;;32797:333;32951:2;32965:47;;;32936:18;;33026:94;32936:18;33106:6;33026:94;;33137:603;33357:2;33371:47;;;33342:18;;33432:90;33342:18;33508:6;33432:90;;;33424:98;;33533:62;33591:2;33580:9;33576:18;33567:6;33533:62;;;33643:9;33637:4;33633:20;33628:2;33617:9;33613:18;33606:48;33668:62;33725:4;33716:6;33668:62;;33747:189;33853:2;33838:18;;33867:59;33842:9;33899:6;33867:59;;33943:193;34051:2;34036:18;;34065:61;34040:9;34099:6;34065:61;;34143:256;34205:2;34199:9;34231:17;;;34306:18;34291:34;;34327:22;;;34288:62;34285:2;;;34363:1;34360;34353:12;34285:2;34379;34372:22;34183:216;;-1:-1;34183:216;34406:263;;34570:18;34562:6;34559:30;34556:2;;;34602:1;34599;34592:12;34556:2;-1:-1;34631:4;34619:17;;;34649:15;;34493:176;34960:254;;35099:18;35091:6;35088:30;35085:2;;;35131:1;35128;35121:12;35085:2;-1:-1;35204:4;35175;35152:17;;;;35171:9;35148:33;35194:15;;35022:192;35488:126;35602:4;35590:17;;35571:43;35906:112;36001:12;;35985:33;36783:128;36863:42;36852:54;;36835:76;36918:151;36997:66;36986:78;;36969:100;37076:91;37155:6;37144:18;;37127:40;37174:79;37243:5;37226:27;37665:88;37743:4;37732:16;;37715:38;37761:145;37842:6;37837:3;37832;37819:30;-1:-1;37898:1;37880:16;;37873:27;37812:94;37915:268;37980:1;37987:101;38001:6;37998:1;37995:13;37987:101;;;38068:11;;;38062:18;38049:11;;;38042:39;38023:2;38016:10;37987:101;;;38103:6;38100:1;38097:13;38094:2;;;-1:-1;;38168:1;38150:16;;38143:27;37964:219;38191:97;38279:2;38259:14;38275:7;38255:28;;38239:49"
			}
		}
	},
	"sources": {
		"2.0.0/forwarder/Forwarder.sol": {
			"id": 0
		},
		"2.0.0/forwarder/MixinConstants.sol": {
			"id": 1
		},
		"2.0.0/forwarder/MixinExpectedResults.sol": {
			"id": 2
		},
		"2.0.0/forwarder/MixinFees.sol": {
			"id": 3
		},
		"2.0.0/forwarder/MixinForwarderCore.sol": {
			"id": 4
		},
		"2.0.0/forwarder/MixinMarketBuyZrx.sol": {
			"id": 5
		},
		"2.0.0/forwarder/MixinTransfer.sol": {
			"id": 6
		},
		"2.0.0/forwarder/interfaces/IExpectedResults.sol": {
			"id": 7
		},
		"2.0.0/forwarder/interfaces/IForwarderCore.sol": {
			"id": 8
		},
		"2.0.0/forwarder/mixins/MConstants.sol": {
			"id": 9
		},
		"2.0.0/forwarder/mixins/MExpectedResults.sol": {
			"id": 10
		},
		"2.0.0/forwarder/mixins/MFees.sol": {
			"id": 11
		},
		"2.0.0/forwarder/mixins/MForwarderCore.sol": {
			"id": 12
		},
		"2.0.0/forwarder/mixins/MMarketBuyZrx.sol": {
			"id": 13
		},
		"2.0.0/forwarder/mixins/MTransfer.sol": {
			"id": 14
		},
		"2.0.0/protocol/Exchange/interfaces/IAssetProxyDispatcher.sol": {
			"id": 15
		},
		"2.0.0/protocol/Exchange/interfaces/IExchange.sol": {
			"id": 16
		},
		"2.0.0/protocol/Exchange/interfaces/IExchangeCore.sol": {
			"id": 17
		},
		"2.0.0/protocol/Exchange/interfaces/IMatchOrders.sol": {
			"id": 18
		},
		"2.0.0/protocol/Exchange/interfaces/ISignatureValidator.sol": {
			"id": 19
		},
		"2.0.0/protocol/Exchange/interfaces/ITransactions.sol": {
			"id": 20
		},
		"2.0.0/protocol/Exchange/interfaces/IWrapperFunctions.sol": {
			"id": 21
		},
		"2.0.0/protocol/Exchange/libs/LibEIP712.sol": {
			"id": 22
		},
		"2.0.0/protocol/Exchange/libs/LibFillResults.sol": {
			"id": 23
		},
		"2.0.0/protocol/Exchange/libs/LibMath.sol": {
			"id": 24
		},
		"2.0.0/protocol/Exchange/libs/LibOrder.sol": {
			"id": 25
		},
		"2.0.0/tokens/ERC20Token/IERC20Token.sol": {
			"id": 26
		},
		"2.0.0/tokens/ERC721Token/IERC721Token.sol": {
			"id": 27
		},
		"2.0.0/tokens/EtherToken/IEtherToken.sol": {
			"id": 28
		},
		"2.0.0/utils/LibBytes/LibBytes.sol": {
			"id": 29
		},
		"2.0.0/utils/SafeMath/SafeMath.sol": {
			"id": 30
		}
	},
	"sourceCodes": {
		"2.0.0/forwarder/Forwarder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./MixinFees.sol\";\nimport \"./MixinForwarderCore.sol\";\nimport \"./MixinConstants.sol\";\nimport \"./MixinMarketBuyZrx.sol\";\nimport \"./MixinExpectedResults.sol\";\nimport \"./MixinTransfer.sol\";\n\n\ncontract Forwarder is\n    MixinConstants,\n    MixinExpectedResults,\n    MixinFees,\n    MixinMarketBuyZrx,\n    MixinTransfer,\n    MixinForwarderCore\n{\n\n    constructor (\n        address _exchange,\n        address _etherToken,\n        address _zrxToken,\n        bytes memory _zrxAssetData,\n        bytes memory _wethAssetData\n    )\n        public\n        MixinConstants(\n            _exchange,\n            _etherToken,\n            _zrxToken,\n            _zrxAssetData,\n            _wethAssetData\n        )\n        MixinForwarderCore()\n    {}\n}\n",
		"2.0.0/forwarder/MixinConstants.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\nimport \"./mixins/MConstants.sol\";\n\n\ncontract MixinConstants is\n    MConstants\n{\n\n    constructor (\n        address _exchange,\n        address _etherToken,\n        address _zrxToken,\n        bytes memory _zrxAssetData,\n        bytes memory _wethAssetData\n    )\n        public\n    {\n        EXCHANGE = IExchange(_exchange);\n        ETHER_TOKEN = IEtherToken(_etherToken);\n        ZRX_TOKEN = IERC20Token(_zrxToken);\n        ZRX_ASSET_DATA = _zrxAssetData;\n        WETH_ASSET_DATA = _wethAssetData;\n    }\n}\n",
		"2.0.0/forwarder/MixinExpectedResults.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../utils/LibBytes/LibBytes.sol\";\nimport \"../protocol/Exchange/libs/LibFillResults.sol\";\nimport \"../protocol/Exchange/libs/LibMath.sol\";\nimport \"../protocol/Exchange/libs/LibOrder.sol\";\nimport \"./mixins/MConstants.sol\";\nimport \"./mixins/MExpectedResults.sol\";\n\n\ncontract MixinExpectedResults is\n    LibMath,\n    LibFillResults,\n    MConstants,\n    MExpectedResults\n{\n\n    /// @dev Calculates a total FillResults for buying makerAssetFillAmount over all orders.\n    ///      Including the fees required to be paid. \n    /// @param orders An array of Order struct containing order specifications.\n    /// @param makerAssetFillAmount A number representing the amount of this order to fill.\n    /// @return totalFillResults Amounts filled and fees paid by maker and taker.\n    function calculateMarketBuyResults(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount\n    )\n        public\n        view\n        returns (FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            uint256 remainingMakerAssetFillAmount = safeSub(makerAssetFillAmount, totalFillResults.makerAssetFilledAmount);\n            uint256 remainingTakerAssetFillAmount = getPartialAmount(\n                orders[i].takerAssetAmount,\n                orders[i].makerAssetAmount,\n                remainingMakerAssetFillAmount\n            );\n            FillResults memory singleFillResult = calculateFillResults(orders[i], remainingTakerAssetFillAmount);\n            addFillResults(totalFillResults, singleFillResult);\n            if (totalFillResults.makerAssetFilledAmount == makerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Calculates a FillResults total for selling takerAssetFillAmount over all orders. \n    ///      Including the fees required to be paid. \n    /// @param orders An array of Order struct containing order specifications.\n    /// @param takerAssetFillAmount A number representing the amount of this order to fill.\n    /// @return totalFillResults Amounts filled and fees paid by maker and taker.\n    function calculateMarketSellResults(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount\n    )\n        public\n        view\n        returns (FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            uint256 remainingTakerAssetFillAmount = safeSub(takerAssetFillAmount, totalFillResults.takerAssetFilledAmount);\n            FillResults memory singleFillResult = calculateFillResults(orders[i], remainingTakerAssetFillAmount);\n            addFillResults(totalFillResults, singleFillResult);\n            if (totalFillResults.takerAssetFilledAmount == takerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Calculates fill results for buyFeeTokens. This handles fees on buying ZRX\n    ///      so the end result is the expected amount of ZRX (not less after fees).\n    /// @param orders An array of Order struct containing order specifications.\n    /// @param zrxFillAmount A number representing the amount zrx to buy\n    /// @return totalFillResults Expected fill result amounts from buying fees\n    function calculateMarketBuyZrxResults(\n        LibOrder.Order[] memory orders,\n        uint256 zrxFillAmount\n    )\n        public\n        view\n        returns (FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            uint256 remainingZrxFillAmount = safeSub(zrxFillAmount, totalFillResults.makerAssetFilledAmount);\n            // Convert the remaining amount of makerToken to buy into remaining amount\n            // of takerToken to sell, assuming entire amount can be sold in the current order\n            uint256 remainingWethSellAmount = getPartialAmount(\n                orders[i].takerAssetAmount,\n                safeSub(orders[i].makerAssetAmount, orders[i].takerFee), // our exchange rate after fees \n                remainingZrxFillAmount\n            );\n            FillResults memory singleFillResult = calculateFillResults(orders[i], safeAdd(remainingWethSellAmount, 1));\n\n            singleFillResult.makerAssetFilledAmount = safeSub(singleFillResult.makerAssetFilledAmount, singleFillResult.takerFeePaid);\n            addFillResults(totalFillResults, singleFillResult);\n            // As we compensate for the rounding issue above have slightly more ZRX than the requested zrxFillAmount\n            if (totalFillResults.makerAssetFilledAmount >= zrxFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Simulates the 0x Exchange fillOrder validation and calculations, without performing any state changes.\n    /// @param order An Order struct containing order specifications.\n    /// @param takerAssetFillAmount A number representing the amount of this order to fill.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount\n    )\n        internal\n        view\n        returns (FillResults memory fillResults)\n    {\n        LibOrder.OrderInfo memory orderInfo = EXCHANGE.getOrderInfo(order);\n        if (orderInfo.orderStatus != uint8(LibOrder.OrderStatus.FILLABLE)) {\n            return fillResults;\n        }\n        uint256 remainingTakerAssetAmount = safeSub(order.takerAssetAmount, orderInfo.orderTakerAssetFilledAmount);\n        uint256 takerAssetFilledAmount = min256(takerAssetFillAmount, remainingTakerAssetAmount);\n\n        fillResults.takerAssetFilledAmount = takerAssetFilledAmount;\n        fillResults.makerAssetFilledAmount = getPartialAmount(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerAssetAmount\n        );\n        fillResults.makerFeePaid = getPartialAmount(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerFee\n        );\n        fillResults.takerFeePaid = getPartialAmount(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.takerFee\n        );\n        return fillResults;\n    }\n}\n",
		"2.0.0/forwarder/MixinFees.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\nimport \"../protocol/Exchange/libs/LibMath.sol\";\nimport \"./mixins/MConstants.sol\";\nimport \"./mixins/MFees.sol\";\n\n\ncontract MixinFees is\n    LibMath,\n    MConstants,\n    MFees\n{\n\n    uint16 constant public PERCENTAGE_DENOMINATOR = 10000; // 9800 == 98%, 10000 == 100%\n    uint16 constant public MAX_FEE = 1000; // 10%\n    uint16 constant public ALLOWABLE_EXCHANGE_PERCENTAGE = 9500; // 95%\n\n    /// @dev Default payabale function, this allows us to withdraw WETH\n    function ()\n        public\n        payable\n    {\n        require(\n            msg.sender == address(ETHER_TOKEN),\n            \"DEFAULT_FUNCTION_WETH_CONTRACT_ONLY\"\n        );\n    }\n\n    /// @dev Pays the feeRecipient feeProportion of the total takerEthAmount, denominated in ETH\n    /// @param takerEthAmount The total amount that was transacted in WETH, fees are calculated from this value.\n    /// @param feeProportion The proportion of fees\n    /// @param feeRecipient The recipient of the fees\n    /// @return ethFeeAmount Amount of ETH paid to feeRecipient as fee.\n    function payEthFee(\n        uint256 takerEthAmount,\n        uint16 feeProportion,\n        address feeRecipient\n    )\n        internal\n        returns (uint256 ethFeeAmount)\n    {\n        if (feeProportion > 0 && feeRecipient != address(0)) {\n            require(\n                feeProportion <= MAX_FEE,\n                \"FEE_PROPORTION_TOO_LARGE\"\n            );\n            // 1.5% is 150, allowing for 2 decimal precision, i.e 0.05% is 5\n            ethFeeAmount = getPartialAmount(\n                feeProportion,\n                PERCENTAGE_DENOMINATOR,\n                takerEthAmount\n            );\n            feeRecipient.transfer(ethFeeAmount);\n        }\n        return ethFeeAmount;\n    }\n\n    /// @dev Withdraws the remaining WETH, deduct and pay fees from this amount based on the takerTokenAmount to the feeRecipient.\n    ///      If a user overpaid ETH initially, the fees are calculated from the amount traded and deducted from withdrawAmount.\n    ///      Any remaining ETH is sent back to the user.\n    /// @param ethWithdrawAmount The amount to withdraw from the WETH contract.\n    /// @param wethAmountSold The total amount that was transacted in WETH, fees are calculated from this value.\n    /// @param feeProportion The proportion of fees\n    /// @param feeRecipient The recipient of the fees\n    function withdrawPayAndDeductEthFee(\n        uint256 ethWithdrawAmount,\n        uint256 wethAmountSold,\n        uint16 feeProportion,\n        address feeRecipient\n    )\n        internal\n    {\n        // Return all of the excess WETH if any after deducting fees on the amount\n        if (ethWithdrawAmount > 0) {\n            ETHER_TOKEN.withdraw(ethWithdrawAmount);\n            // Fees proportional to the amount traded\n            uint256 ethFeeAmount = payEthFee(\n                wethAmountSold,\n                feeProportion,\n                feeRecipient\n            );\n            uint256 unspentEthAmount = safeSub(ethWithdrawAmount, ethFeeAmount);\n            if (unspentEthAmount > 0) {\n                msg.sender.transfer(unspentEthAmount);\n            }\n        }\n    }\n\n    /// @dev Checks whether the amount of tokens sold against the amount of tokens requested\n    ///      is within a certain threshold. This ensures the caller gets a fair deal when\n    ///      performing any token fee abstraction. Threshold is 95%. If fee abstraction costs more than\n    ///      5% of the total transaction, we return false.\n    /// @param requestedSellAmount The amount the user requested, or sent in to a payable function\n    /// @param tokenAmountSold The amount of the token that was sold after fee abstraction\n    /// @return bool of whether this is within an acceptable threshold\n    function isAcceptableThreshold(uint256 requestedSellAmount, uint256 tokenAmountSold)\n        internal\n        pure\n        returns (bool)\n    {\n        uint256 acceptableSellAmount = getPartialAmount(\n            ALLOWABLE_EXCHANGE_PERCENTAGE,\n            PERCENTAGE_DENOMINATOR,\n            requestedSellAmount\n        );\n        return tokenAmountSold >= acceptableSellAmount;\n    }\n}\n",
		"2.0.0/forwarder/MixinForwarderCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../utils/LibBytes/LibBytes.sol\";\nimport \"./mixins/MFees.sol\";\nimport \"./mixins/MMarketBuyZrx.sol\";\nimport \"./mixins/MExpectedResults.sol\";\nimport \"./mixins/MTransfer.sol\";\nimport \"./mixins/MConstants.sol\";\nimport \"./mixins/MForwarderCore.sol\";\nimport \"../protocol/Exchange/libs/LibOrder.sol\";\nimport \"../protocol/Exchange/libs/LibFillResults.sol\";\n\n\ncontract MixinForwarderCore is\n    LibFillResults,\n    MConstants,\n    MExpectedResults,\n    MFees,\n    MMarketBuyZrx,\n    MTransfer,\n    MForwarderCore\n{\n    bytes4 constant internal ERC20_DATA_ID = bytes4(keccak256(\"ERC20Token(address)\"));\n    bytes4 constant internal ERC721_DATA_ID = bytes4(keccak256(\"ERC721Token(address,uint256)\"));\n    uint256 constant internal MAX_UINT = 2**256 - 1;\n\n    constructor ()\n        public\n    {\n        address proxyAddress = EXCHANGE.getAssetProxy(ERC20_DATA_ID);\n        if (proxyAddress != address(0)) {\n            ETHER_TOKEN.approve(proxyAddress, MAX_UINT);\n            ZRX_TOKEN.approve(proxyAddress, MAX_UINT);\n        }\n    }\n\n    /// @dev Market sells ETH for ERC20 tokens, performing fee abstraction if required. This does not support ERC721 tokens. This function is payable\n    ///      and will convert all incoming ETH into WETH and perform the trade on behalf of the caller.\n    ///      This function allows for a deduction of a proportion of incoming ETH sent to the feeRecipient.\n    ///      The caller is sent all tokens from the operation.\n    ///      If the purchased token amount does not meet an acceptable threshold then this function reverts.\n    /// @param orders An array of Order struct containing order specifications.\n    /// @param signatures An array of Proof that order has been created by maker.\n    /// @param feeOrders An array of Order struct containing order specifications for fees.\n    /// @param feeSignatures An array of Proof that order has been created by maker for the fee orders.\n    /// @param feeProportion A proportion deducted off the incoming ETH and sent to feeRecipient. The maximum value for this\n    ///        is 1000, aka 10%. Supports up to 2 decimal places. I.e 0.59% is 59.\n    /// @param feeRecipient An address of the fee recipient whom receives feeProportion of ETH.\n    /// @return FillResults amounts filled and fees paid by maker and taker.\n    function marketSellEthForERC20(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        LibOrder.Order[] memory feeOrders,\n        bytes[] memory feeSignatures,\n        uint16  feeProportion,\n        address feeRecipient\n    )\n        public\n        payable\n        returns (FillResults memory totalFillResults)\n    {\n        uint256 takerEthAmount = msg.value;\n        require(\n            takerEthAmount > 0,\n            \"VALUE_GREATER_THAN_ZERO\"\n        );\n        // Deduct the fee from the total amount of ETH sent in\n        uint256 ethFeeAmount = payEthFee(\n            takerEthAmount,\n            feeProportion,\n            feeRecipient\n        );\n        uint256 wethSellAmount = safeSub(takerEthAmount, ethFeeAmount);\n\n        // Deposit the remaining to be used for trading\n        ETHER_TOKEN.deposit.value(wethSellAmount)();\n        // Populate the known assetData, as it is always WETH the caller can provide null bytes to save gas\n        // marketSellOrders fills the remaining\n        address makerTokenAddress = LibBytes.readAddress(orders[0].makerAssetData, 16);\n        orders[0].takerAssetData = WETH_ASSET_DATA;\n        if (makerTokenAddress == address(ZRX_TOKEN)) {\n            // If this is ZRX then we market sell from the orders, rather than a 2 step of buying ZRX fees from feeOrders\n            // then buying ZRX from orders\n            totalFillResults = marketSellEthForZRXInternal(\n                orders,\n                signatures,\n                wethSellAmount\n            );\n        } else {\n            totalFillResults = marketSellEthForERC20Internal(\n                orders,\n                signatures,\n                feeOrders,\n                feeSignatures,\n                wethSellAmount\n            );\n        }\n        // Prevent accidental WETH owned by this contract and it being spent\n        require(\n            takerEthAmount >= totalFillResults.takerAssetFilledAmount,\n            \"INVALID_MSG_VALUE\"\n        );\n        // Ensure no WETH is left in this contract\n        require(\n            wethSellAmount == totalFillResults.takerAssetFilledAmount,\n            \"UNACCEPTABLE_THRESHOLD\"\n        );\n        // Transfer all tokens to msg.sender\n        transferERC20Token(\n            makerTokenAddress,\n            msg.sender,\n            totalFillResults.makerAssetFilledAmount\n        );\n        return totalFillResults;\n    }\n\n    /// @dev Buys the exact amount of assets (ERC20 and ERC721), performing fee abstraction if required.\n    ///      All order assets must be of the same type. Deducts a proportional fee to fee recipient.\n    ///      This function is payable and will convert all incoming ETH into WETH and perform the trade on behalf of the caller.\n    ///      The caller is sent all assets from the fill of orders. This function will revert unless the requested amount of assets are purchased.\n    ///      Any excess ETH sent will be returned to the caller\n    /// @param orders An array of Order struct containing order specifications.\n    /// @param signatures An array of Proof that order has been created by maker.\n    /// @param feeOrders An array of Order struct containing order specifications for fees.\n    /// @param makerTokenFillAmount The amount of maker asset to buy.\n    /// @param feeSignatures An array of Proof that order has been created by maker for the fee orders.\n    /// @param feeProportion A proportion deducted off the ETH spent and sent to feeRecipient. The maximum value for this\n    ///        is 1000, aka 10%. Supports up to 2 decimal places. I.e 0.59% is 59.\n    /// @param feeRecipient An address of the fee recipient whom receives feeProportion of ETH.\n    /// @return FillResults amounts filled and fees paid by maker and taker.\n    function marketBuyTokensWithEth(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        LibOrder.Order[] memory feeOrders,\n        bytes[] memory feeSignatures,\n        uint256 makerTokenFillAmount,\n        uint16  feeProportion,\n        address feeRecipient\n    )\n        public\n        payable\n        returns (FillResults memory totalFillResults)\n    {\n        uint256 takerEthAmount = msg.value;\n        require(\n            takerEthAmount > 0,\n            \"VALUE_GREATER_THAN_ZERO\"\n        );\n        require(\n            makerTokenFillAmount > 0,\n            \"VALUE_GREATER_THAN_ZERO\"\n        );\n        bytes4 assetDataId = LibBytes.readBytes4(orders[0].makerAssetData, 0);\n        require(\n            assetDataId == ERC20_DATA_ID || assetDataId == ERC721_DATA_ID,\n            \"UNSUPPORTED_TOKEN_PROXY\"\n        );\n\n        ETHER_TOKEN.deposit.value(takerEthAmount)();\n        if (assetDataId == ERC20_DATA_ID) {\n            totalFillResults = marketBuyERC20TokensInternal(\n                orders,\n                signatures,\n                feeOrders,\n                feeSignatures,\n                makerTokenFillAmount\n            );\n        } else if (assetDataId == ERC721_DATA_ID) {\n            totalFillResults = batchBuyERC721TokensInternal(\n                orders,\n                signatures,\n                feeOrders,\n                feeSignatures\n            );\n        }\n        // Prevent accidental WETH owned by this contract and it being spent\n        require(\n            takerEthAmount >= totalFillResults.takerAssetFilledAmount,\n            \"INVALID_MSG_VALUE\"\n        );\n        withdrawPayAndDeductEthFee(\n            safeSub(takerEthAmount, totalFillResults.takerAssetFilledAmount),\n            totalFillResults.takerAssetFilledAmount,\n            feeProportion,\n            feeRecipient\n        );\n        return totalFillResults;\n    }\n\n    /// @dev Market sells WETH for ERC20 tokens.\n    /// @param orders An array of Order struct containing order specifications.\n    /// @param signatures An array of Proof that order has been created by maker.\n    /// @param feeOrders An array of Order struct containing order specifications for fees.\n    /// @param feeSignatures An array of Proof that order has been created by maker for the fee orders.\n    /// @param wethSellAmount The amount of WETH to sell.\n    /// @return FillResults amounts filled and fees paid by maker and taker.\n    function marketSellEthForERC20Internal(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        LibOrder.Order[] memory feeOrders,\n        bytes[] memory feeSignatures,\n        uint256 wethSellAmount\n    )\n        internal\n        returns (FillResults memory totalFillResults)\n    {\n        uint256 remainingWethSellAmount = wethSellAmount;\n        FillResults memory calculatedMarketSellResults = calculateMarketSellResults(orders, wethSellAmount);\n        if (calculatedMarketSellResults.takerFeePaid > 0) {\n            // Fees are required for these orders. Buy enough ZRX to cover the future market buy\n            FillResults memory feeTokensResults = marketBuyZrxInternal(\n                feeOrders,\n                feeSignatures,\n                calculatedMarketSellResults.takerFeePaid\n            );\n            // Ensure the token abstraction was fair if fees were proportionally too high, we fail\n            require(\n                isAcceptableThreshold(\n                    wethSellAmount,\n                    safeSub(wethSellAmount, feeTokensResults.takerAssetFilledAmount)\n                ),\n                \"UNACCEPTABLE_THRESHOLD\"\n            );\n            remainingWethSellAmount = safeSub(remainingWethSellAmount, feeTokensResults.takerAssetFilledAmount);\n            totalFillResults.takerFeePaid = feeTokensResults.takerFeePaid;\n            totalFillResults.takerAssetFilledAmount = feeTokensResults.takerAssetFilledAmount;\n        }\n        // Make our market sell to buy the requested tokens with the remaining balance\n        FillResults memory requestedTokensResults = EXCHANGE.marketSellOrders(\n            orders,\n            remainingWethSellAmount,\n            signatures\n        );\n        // Update our return FillResult with the market sell\n        addFillResults(totalFillResults, requestedTokensResults);\n        return totalFillResults;\n    }\n\n    /// @dev Market sells WETH for ZRX tokens.\n    /// @param orders An array of Order struct containing order specifications.\n    /// @param signatures An array of Proof that order has been created by maker.\n    /// @param wethSellAmount The amount of WETH to sell.\n    /// @return FillResults amounts filled and fees paid by maker and taker.\n    function marketSellEthForZRXInternal(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        uint256 wethSellAmount\n    )\n        internal\n        returns (FillResults memory totalFillResults)\n    {\n        // Make our market sell to buy the requested tokens with the remaining balance\n        totalFillResults = EXCHANGE.marketSellOrders(\n            orders,\n            wethSellAmount,\n            signatures\n        );\n        // Exchange does not special case ZRX in the makerAssetFilledAmount, if fees were deducted then using this amount\n        // for future transfers is invalid.\n        uint256 zrxAmountBought = safeSub(totalFillResults.makerAssetFilledAmount, totalFillResults.takerFeePaid);\n        require(\n            isAcceptableThreshold(totalFillResults.makerAssetFilledAmount, zrxAmountBought),\n            \"UNACCEPTABLE_THRESHOLD\"\n        );\n        totalFillResults.makerAssetFilledAmount = zrxAmountBought;\n        return totalFillResults;\n    }\n\n    /// @dev Buys an exact amount of an ERC20 token using WETH.\n    /// @param orders Orders to fill. The maker asset is the ERC20 token to buy. The taker asset is WETH.\n    /// @param signatures Proof that the orders were created by their respective makers.\n    /// @param feeOrders to fill. The maker asset is ZRX and the taker asset is WETH.\n    /// @param feeSignatures Proof that the feeOrders were created by their respective makers.\n    /// @param makerTokenFillAmount Amount of the ERC20 token to buy.\n    /// @return totalFillResults Aggregated fill results of buying the ERC20 and ZRX tokens.\n    function marketBuyERC20TokensInternal(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        LibOrder.Order[] memory feeOrders,\n        bytes[] memory feeSignatures,\n        uint256 makerTokenFillAmount\n    )\n        internal\n        returns (LibFillResults.FillResults memory totalFillResults)\n    {\n        // We read the maker token address to check if it is ZRX and later use it for transfer\n        address makerTokenAddress = LibBytes.readAddress(orders[0].makerAssetData, 16);\n        // We assume that asset being bought by taker is the same for each order.\n        // Rather than passing this in as calldata, we copy the makerAssetData from the first order onto all later orders.\n        orders[0].takerAssetData = WETH_ASSET_DATA;\n        // We can short cut here for effeciency and use buyFeeTokensInternal if maker asset token is ZRX\n        // this buys us exactly that amount taking into account the fees. This saves gas and calculates the rate correctly\n        FillResults memory marketBuyResults;\n        if (makerTokenAddress == address(ZRX_TOKEN)) {\n            marketBuyResults = marketBuyZrxInternal(\n                orders,\n                signatures,\n                makerTokenFillAmount\n            );\n            // When buying ZRX we round up which can result in a small margin excess\n            require(\n                marketBuyResults.makerAssetFilledAmount >= makerTokenFillAmount,\n                \"UNACCEPTABLE_THRESHOLD\"\n            );\n            addFillResults(totalFillResults, marketBuyResults);\n            require(\n                isAcceptableThreshold(\n                    safeAdd(totalFillResults.makerAssetFilledAmount, totalFillResults.takerFeePaid), // Total ZRX\n                    totalFillResults.makerAssetFilledAmount // amount going to msg.sender\n                ),\n                \"UNACCEPTABLE_THRESHOLD\"\n            );\n        } else {\n            FillResults memory calculatedMarketBuyResults = calculateMarketBuyResults(orders, makerTokenFillAmount);\n            if (calculatedMarketBuyResults.takerFeePaid > 0) {\n                // Fees are required for these orders. Buy enough ZRX to cover the future market buy\n                FillResults memory zrxMarketBuyResults = marketBuyZrxInternal(\n                    feeOrders,\n                    feeSignatures,\n                    calculatedMarketBuyResults.takerFeePaid\n                );\n                totalFillResults.takerAssetFilledAmount = zrxMarketBuyResults.takerAssetFilledAmount;\n                totalFillResults.takerFeePaid = zrxMarketBuyResults.takerFeePaid;\n            }\n            // Make our market buy of the requested tokens with the remaining balance\n            marketBuyResults = EXCHANGE.marketBuyOrders(\n                orders,\n                makerTokenFillAmount,\n                signatures\n            );\n            require(\n                marketBuyResults.makerAssetFilledAmount == makerTokenFillAmount,\n                \"UNACCEPTABLE_THRESHOLD\"\n            );\n            addFillResults(totalFillResults, marketBuyResults);\n            require(\n                isAcceptableThreshold(\n                    totalFillResults.takerAssetFilledAmount,\n                    marketBuyResults.takerAssetFilledAmount\n                ),\n                \"UNACCEPTABLE_THRESHOLD\"\n            );\n        }\n        // Transfer all purchased tokens to msg.sender\n        transferERC20Token(\n            makerTokenAddress,\n            msg.sender,\n            marketBuyResults.makerAssetFilledAmount\n        );\n        return totalFillResults;\n    }\n\n    /// @dev Buys an all of the ERC721 tokens in the orders.\n    /// @param orders Orders to fill. The maker asset is the ERC721 token to buy. The taker asset is WETH.\n    /// @param signatures Proof that the orders were created by their respective makers.\n    /// @param feeOrders to fill. The maker asset is ZRX and the taker asset is WETH.\n    /// @param feeSignatures Proof that the feeOrders were created by their respective makers.\n    /// @return totalFillResults Aggregated fill results of buying the ERC721 tokens and ZRX tokens.\n    function batchBuyERC721TokensInternal(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        LibOrder.Order[] memory feeOrders,\n        bytes[] memory feeSignatures\n    )\n        internal\n        returns (LibFillResults.FillResults memory totalFillResults)\n    {\n        uint256 totalZrxFeeAmount;\n        uint256 ordersLength = orders.length;\n        uint256[] memory takerAssetFillAmounts = new uint256[](ordersLength);\n        for (uint256 i = 0; i < ordersLength; i++) {\n            // Total up the fees\n            totalZrxFeeAmount = safeAdd(totalZrxFeeAmount, orders[i].takerFee);\n            // We assume that asset being bought by taker is the same for each order.\n            // Rather than passing this in as calldata, we set the takerAssetData as WETH asset data\n            orders[i].takerAssetData = WETH_ASSET_DATA;\n            // Populate takerAssetFillAmounts for later batchFill\n            takerAssetFillAmounts[i] = orders[i].takerAssetAmount;\n        }\n        if (totalZrxFeeAmount > 0) {\n            // Fees are required for these orders. Buy enough ZRX to cover the future fill\n            FillResults memory zrxMarketBuyResults = marketBuyZrxInternal(\n                feeOrders,\n                feeSignatures,\n                totalZrxFeeAmount\n            );\n            totalFillResults.takerFeePaid = zrxMarketBuyResults.takerFeePaid;\n            totalFillResults.takerAssetFilledAmount = zrxMarketBuyResults.takerAssetFilledAmount;\n        }\n        FillResults memory batchFillResults = EXCHANGE.batchFillOrKillOrders(\n            orders,\n            takerAssetFillAmounts,\n            signatures\n        );\n        addFillResults(totalFillResults, batchFillResults);\n        require(\n            isAcceptableThreshold(\n                totalFillResults.takerAssetFilledAmount,\n                batchFillResults.takerAssetFilledAmount\n            ),\n            \"UNACCEPTABLE_THRESHOLD\"\n        );\n        // Transfer all of the tokens filled from the batchFill\n        for (i = 0; i < ordersLength; i++) {\n            transferERC721Token(\n                orders[i].makerAssetData,\n                msg.sender\n            );\n        }\n        return totalFillResults;\n    }\n}\n",
		"2.0.0/forwarder/MixinMarketBuyZrx.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../protocol/Exchange/libs/LibFillResults.sol\";\nimport \"../protocol/Exchange/libs/LibOrder.sol\";\nimport \"../protocol/Exchange/libs/LibMath.sol\";\nimport \"./mixins/MConstants.sol\";\nimport \"./mixins/MMarketBuyZrx.sol\";\n\n\ncontract MixinMarketBuyZrx is\n    LibMath,\n    LibFillResults,\n    MConstants,\n    MMarketBuyZrx\n{\n\n    /// @dev Buys zrxBuyAmount of ZRX fee tokens, taking into account the fees on buying fee tokens. This will guarantee\n    ///      At least zrxBuyAmount of ZRX fee tokens are purchased (sometimes slightly over due to rounding issues).\n    ///      It is possible that a request to buy 200 ZRX fee tokens will require purchasing 202 ZRX tokens\n    ///      As 2 ZRX is required to purchase the 200 ZRX fee tokens. This guarantees at least 200 ZRX for future purchases.\n    /// @param orders An array of Order struct containing order specifications for fees.\n    /// @param signatures An array of Proof that order has been created by maker for the fee orders.\n    /// @param zrxBuyAmount The number of requested ZRX fee tokens.\n    /// @return totalFillResults Amounts filled and fees paid by maker and taker. makerTokenAmount is the zrx amount deducted of fees\n    function marketBuyZrxInternal(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        uint256 zrxBuyAmount\n    )\n        internal\n        returns (FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            // All of these are ZRX/WETH, we can drop the respective assetData from callData\n            orders[i].makerAssetData = ZRX_ASSET_DATA;\n            orders[i].takerAssetData = WETH_ASSET_DATA;\n            // Calculate the remaining amount of makerToken to buy\n            uint256 remainingZrxBuyAmount = safeSub(zrxBuyAmount, totalFillResults.makerAssetFilledAmount);\n            // Convert the remaining amount of makerToken to buy into remaining amount\n            // of takerToken to sell, assuming entire amount can be sold in the current order\n            uint256 remainingWethSellAmount = getPartialAmount(\n                orders[i].takerAssetAmount,\n                safeSub(orders[i].makerAssetAmount, orders[i].takerFee), // our exchange rate after fees \n                remainingZrxBuyAmount\n            );\n            // Attempt to sell the remaining amount of takerToken\n            // Round up the amount to ensure we don't under buy by a fractional amount\n            FillResults memory singleFillResult = EXCHANGE.fillOrder(\n                orders[i],\n                safeAdd(remainingWethSellAmount, 1),\n                signatures[i]\n            );\n            // We didn't buy the full amount when buying ZRX as some were taken for fees\n            singleFillResult.makerAssetFilledAmount = safeSub(singleFillResult.makerAssetFilledAmount, singleFillResult.takerFeePaid);\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResult);\n            // Stop execution if the entire amount of makerToken has been bought\n            if (totalFillResults.makerAssetFilledAmount >= zrxBuyAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n}\n",
		"2.0.0/forwarder/MixinTransfer.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\nimport \"../utils/LibBytes/LibBytes.sol\";\nimport \"../tokens/ERC721Token/IERC721Token.sol\";\nimport \"./mixins/MTransfer.sol\";\n\n\ncontract MixinTransfer is\n    MTransfer\n{\n\n    using LibBytes for bytes;\n\n    bytes4 constant internal ERC20_TRANSFER_SELECTOR = bytes4(keccak256(\"transfer(address,uint256)\"));\n    bytes4 constant internal ERC721_RECEIVED = bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"));\n    bytes4 constant internal ERC721_RECEIVED_OPERATOR = bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\n\n    function onERC721Received(\n        address,\n        uint256,\n        bytes memory\n    )\n        public\n        pure\n        returns(bytes4)\n    {\n        return ERC721_RECEIVED;\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    )\n        public\n        pure\n        returns(bytes4)\n    {\n        return ERC721_RECEIVED_OPERATOR;\n    }\n\n    function transferERC20Token(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        // Transfer tokens.\n        // We do a raw call so we can check the success separate\n        // from the return data.\n        bool success = token.call(abi.encodeWithSelector(\n            ERC20_TRANSFER_SELECTOR,\n            to,\n            amount\n        ));\n        require(\n            success,\n            \"TRANSFER_FAILED\"\n        );\n        \n        // Check return data.\n        // If there is no return data, we assume the token incorrectly\n        // does not return a bool. In this case we expect it to revert\n        // on failure, which was handled above.\n        // If the token does return data, we require that it is a single\n        // value that evaluates to true.\n        assembly {\n            if returndatasize {\n                success := 0\n                if eq(returndatasize, 32) {\n                    // First 64 bytes of memory are reserved scratch space\n                    returndatacopy(0, 0, 32)\n                    success := mload(0)\n                }\n            }\n        }\n        require(\n            success,\n            \"TRANSFER_FAILED\"\n        );\n    }\n\n    function transferERC721Token(\n        bytes memory assetData,\n        address to\n    )\n        internal\n    {\n        // Decode asset data.\n        address token = assetData.readAddress(16);\n        uint256 tokenId = assetData.readUint256(36);\n        IERC721Token(token).transferFrom(\n            address(this),\n            to,\n            tokenId\n        );\n    }\n}\n",
		"2.0.0/forwarder/interfaces/IExpectedResults.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../protocol/Exchange/libs/LibFillResults.sol\";\nimport \"../../protocol/Exchange/libs/LibOrder.sol\";\n\n\ncontract IExpectedResults {\n\n    /// @dev Calculates a total FillResults for buying makerAssetFillAmount over all orders.\n    ///      Including the fees required to be paid. \n    /// @param orders An array of Order struct containing order specifications.\n    /// @param makerAssetFillAmount A number representing the amount of this order to fill.\n    /// @return totalFillResults Amounts filled and fees paid by maker and taker.\n    function calculateMarketBuyResults(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount\n    )\n        public\n        view\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Calculates a FillResults total for selling takerAssetFillAmount over all orders. \n    ///      Including the fees required to be paid. \n    /// @param orders An array of Order struct containing order specifications.\n    /// @param takerAssetFillAmount A number representing the amount of this order to fill.\n    /// @return totalFillResults Amounts filled and fees paid by maker and taker.\n    function calculateMarketSellResults(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount\n    )\n        public\n        view\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Calculates fill results for buyFeeTokens. This handles fees on buying ZRX\n    ///      so the end result is the expected amount of ZRX (not less after fees).\n    /// @param orders An array of Order struct containing order specifications.\n    /// @param zrxFillAmount A number representing the amount zrx to buy\n    /// @return totalFillResults Expected fill result amounts from buying fees\n    function calculateMarketBuyZrxResults(\n        LibOrder.Order[] memory orders,\n        uint256 zrxFillAmount\n    )\n        public\n        view\n        returns (LibFillResults.FillResults memory totalFillResults);\n}\n",
		"2.0.0/forwarder/interfaces/IForwarderCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../protocol/Exchange/libs/LibOrder.sol\";\nimport \"../../protocol/Exchange/libs/LibFillResults.sol\";\n\n\ncontract IForwarderCore {\n\n    /// @dev Market sells ETH for ERC20 tokens, performing fee abstraction if required. This does not support ERC721 tokens. This function is payable\n    ///      and will convert all incoming ETH into WETH and perform the trade on behalf of the caller.\n    ///      This function allows for a deduction of a proportion of incoming ETH sent to the feeRecipient.\n    ///      The caller is sent all tokens from the operation.\n    ///      If the purchased token amount does not meet an acceptable threshold then this function reverts.\n    /// @param orders An array of Order struct containing order specifications.\n    /// @param signatures An array of Proof that order has been created by maker.\n    /// @param feeOrders An array of Order struct containing order specifications for fees.\n    /// @param feeSignatures An array of Proof that order has been created by maker for the fee orders.\n    /// @param feeProportion A proportion deducted off the incoming ETH and sent to feeRecipient. The maximum value for this\n    ///        is 1000, aka 10%. Supports up to 2 decimal places. I.e 0.59% is 59.\n    /// @param feeRecipient An address of the fee recipient whom receives feeProportion of ETH.\n    /// @return FillResults amounts filled and fees paid by maker and taker.\n    function marketSellEthForERC20(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        LibOrder.Order[] memory feeOrders,\n        bytes[] memory feeSignatures,\n        uint16  feeProportion,\n        address feeRecipient\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Buys the exact amount of assets (ERC20 and ERC721), performing fee abstraction if required.\n    ///      All order assets must be of the same type. Deducts a proportional fee to fee recipient.\n    ///      This function is payable and will convert all incoming ETH into WETH and perform the trade on behalf of the caller.\n    ///      The caller is sent all assets from the fill of orders. This function will revert unless the requested amount of assets are purchased.\n    ///      Any excess ETH sent will be returned to the caller\n    /// @param orders An array of Order struct containing order specifications.\n    /// @param signatures An array of Proof that order has been created by maker.\n    /// @param feeOrders An array of Order struct containing order specifications for fees.\n    /// @param makerTokenFillAmount The amount of maker asset to buy.\n    /// @param feeSignatures An array of Proof that order has been created by maker for the fee orders.\n    /// @param feeProportion A proportion deducted off the ETH spent and sent to feeRecipient. The maximum value for this\n    ///        is 1000, aka 10%. Supports up to 2 decimal places. I.e 0.59% is 59.\n    /// @param feeRecipient An address of the fee recipient whom receives feeProportion of ETH.\n    /// @return FillResults amounts filled and fees paid by maker and taker.\n    function marketBuyTokensWithEth(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        LibOrder.Order[] memory feeOrders,\n        bytes[] memory feeSignatures,\n        uint256 makerTokenFillAmount,\n        uint16  feeProportion,\n        address feeRecipient\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory totalFillResults);\n}\n",
		"2.0.0/forwarder/mixins/MConstants.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\nimport \"../../protocol/Exchange/interfaces/IExchange.sol\";\nimport \"../../tokens/EtherToken/IEtherToken.sol\";\nimport \"../../tokens/ERC20Token/IERC20Token.sol\";\n\n\ncontract MConstants {\n\n    // solhint-disable var-name-mixedcase\n    IExchange internal EXCHANGE;\n    IEtherToken internal ETHER_TOKEN;\n    IERC20Token internal ZRX_TOKEN;\n    bytes internal ZRX_ASSET_DATA;\n    bytes internal WETH_ASSET_DATA;\n    // solhint-enable var-name-mixedcase\n}\n",
		"2.0.0/forwarder/mixins/MExpectedResults.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../protocol/Exchange/libs/LibFillResults.sol\";\nimport \"../../protocol/Exchange/libs/LibOrder.sol\";\nimport \"../interfaces/IExpectedResults.sol\";\n\n\ncontract MExpectedResults is\n    IExpectedResults\n{\n\n    /// @dev Simulates the 0x Exchange fillOrder validation and calculations, without performing any state changes.\n    /// @param order An Order struct containing order specifications.\n    /// @param takerAssetFillAmount A number representing the amount of this order to fill.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount\n    )\n        internal\n        view\n        returns (LibFillResults.FillResults memory fillResults);\n}\n",
		"2.0.0/forwarder/mixins/MFees.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\n\ncontract MFees {\n\n    /// @dev Pays the feeRecipient feeProportion of the total takerEthAmount, denominated in ETH\n    /// @param takerEthAmount The total amount that was transacted in WETH, fees are calculated from this value.\n    /// @param feeProportion The proportion of fees\n    /// @param feeRecipient The recipient of the fees\n    /// @return ethFeeAmount Amount of ETH paid to feeRecipient as fee.\n    function payEthFee(\n        uint256 takerEthAmount,\n        uint16 feeProportion,\n        address feeRecipient\n    )\n        internal\n        returns (uint256 ethFeeAmount);\n\n    /// @dev Withdraws the remaining WETH, deduct and pay fees from this amount based on the takerTokenAmount to the feeRecipient.\n    ///      If a user overpaid ETH initially, the fees are calculated from the amount traded and deducted from withdrawAmount.\n    ///      Any remaining ETH is sent back to the user.\n    /// @param ethWithdrawAmount The amount to withdraw from the WETH contract.\n    /// @param wethAmountSold The total amount that was transacted in WETH, fees are calculated from this value.\n    /// @param feeProportion The proportion of fees\n    /// @param feeRecipient The recipient of the fees\n    function withdrawPayAndDeductEthFee(\n        uint256 ethWithdrawAmount,\n        uint256 wethAmountSold,\n        uint16 feeProportion,\n        address feeRecipient\n    )\n        internal;\n\n    /// @dev Checks whether the amount of tokens sold against the amount of tokens requested\n    ///      is within a certain threshold. This ensures the caller gets a fair deal when\n    ///      performing any token fee abstraction. Threshold is 95%. If fee abstraction costs more than\n    ///      5% of the total transaction, we return false.\n    /// @param requestedSellAmount The amount the user requested, or sent in to a payable function\n    /// @param tokenAmountSold The amount of the token that was sold after fee abstraction\n    /// @return bool of whether this is within an acceptable threshold\n    function isAcceptableThreshold(uint256 requestedSellAmount, uint256 tokenAmountSold)\n        internal\n        pure\n        returns (bool);\n}\n",
		"2.0.0/forwarder/mixins/MForwarderCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../protocol/Exchange/libs/LibOrder.sol\";\nimport \"../../protocol/Exchange/libs/LibFillResults.sol\";\nimport \"../interfaces/IForwarderCore.sol\";\n\n\ncontract MForwarderCore is\n    IForwarderCore\n{\n\n    /// @dev Market sells WETH for ERC20 tokens.\n    /// @param orders An array of Order struct containing order specifications.\n    /// @param signatures An array of Proof that order has been created by maker.\n    /// @param feeOrders An array of Order struct containing order specifications for fees.\n    /// @param feeSignatures An array of Proof that order has been created by maker for the fee orders.\n    /// @param wethSellAmount The amount of WETH to sell.\n    /// @return FillResults amounts filled and fees paid by maker and taker.\n    function marketSellEthForERC20Internal(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        LibOrder.Order[] memory feeOrders,\n        bytes[] memory feeSignatures,\n        uint256 wethSellAmount\n    )\n        internal\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Market sells WETH for ZRX tokens.\n    /// @param orders An array of Order struct containing order specifications.\n    /// @param signatures An array of Proof that order has been created by maker.\n    /// @param wethSellAmount The amount of WETH to sell.\n    /// @return FillResults amounts filled and fees paid by maker and taker.\n    function marketSellEthForZRXInternal(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        uint256 wethSellAmount\n    )\n        internal\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Buys an exact amount of an ERC20 token using WETH.\n    /// @param orders Orders to fill. The maker asset is the ERC20 token to buy. The taker asset is WETH.\n    /// @param signatures Proof that the orders were created by their respective makers.\n    /// @param feeOrders to fill. The maker asset is ZRX and the taker asset is WETH.\n    /// @param feeSignatures Proof that the feeOrders were created by their respective makers.\n    /// @param makerTokenFillAmount Amount of the ERC20 token to buy.\n    /// @return totalFillResults Aggregated fill results of buying the ERC20 and ZRX tokens.\n    function marketBuyERC20TokensInternal(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        LibOrder.Order[] memory feeOrders,\n        bytes[] memory feeSignatures,\n        uint256 makerTokenFillAmount\n    )\n        internal\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Buys an all of the ERC721 tokens in the orders.\n    /// @param orders Orders to fill. The maker asset is the ERC721 token to buy. The taker asset is WETH.\n    /// @param signatures Proof that the orders were created by their respective makers.\n    /// @param feeOrders to fill. The maker asset is ZRX and the taker asset is WETH.\n    /// @param feeSignatures Proof that the feeOrders were created by their respective makers.\n    /// @return totalFillResults Aggregated fill results of buying the ERC721 tokens and ZRX tokens.\n    function batchBuyERC721TokensInternal(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        LibOrder.Order[] memory feeOrders,\n        bytes[] memory feeSignatures\n    )\n        internal\n        returns (LibFillResults.FillResults memory totalFillResults);\n}\n",
		"2.0.0/forwarder/mixins/MMarketBuyZrx.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\nimport \"../../protocol/Exchange/libs/LibFillResults.sol\";\nimport \"../../protocol/Exchange/libs/LibOrder.sol\";\n\n\ncontract MMarketBuyZrx {\n\n    /// @dev Buys zrxBuyAmount of ZRX fee tokens, taking into account the fees on buying fee tokens. This will guarantee\n    ///      At least zrxBuyAmount of ZRX fee tokens are purchased (sometimes slightly over due to rounding issues).\n    ///      It is possible that a request to buy 200 ZRX fee tokens will require purchasing 202 ZRX tokens\n    ///      As 2 ZRX is required to purchase the 200 ZRX fee tokens. This guarantees at least 200 ZRX for future purchases.\n    /// @param orders An array of Order struct containing order specifications for fees.\n    /// @param signatures An array of Proof that order has been created by maker for the fee orders.\n    /// @param zrxBuyAmount The number of requested ZRX fee tokens.\n    /// @return totalFillResults Amounts filled and fees paid by maker and taker. makerTokenAmount is the zrx amount deducted of fees\n    function marketBuyZrxInternal(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        uint256 zrxBuyAmount\n    )\n        internal\n        returns (LibFillResults.FillResults memory totalFillResults);\n}\n",
		"2.0.0/forwarder/mixins/MTransfer.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\n\ncontract MTransfer {\n\n    function onERC721Received(address, uint256, bytes memory)\n        public\n        pure\n        returns(bytes4);\n\n    function onERC721Received(address, address, uint256, bytes memory)\n        public\n        pure\n        returns(bytes4);\n    \n    function transferERC20Token(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal;\n\n    function transferERC721Token(\n        bytes memory assetData,\n        address to\n    )\n        internal;\n}\n",
		"2.0.0/protocol/Exchange/interfaces/IAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\n\ncontract IAssetProxyDispatcher {\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n",
		"2.0.0/protocol/Exchange/interfaces/IExchange.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./IExchangeCore.sol\";\nimport \"./IMatchOrders.sol\";\nimport \"./ISignatureValidator.sol\";\nimport \"./ITransactions.sol\";\nimport \"./IAssetProxyDispatcher.sol\";\nimport \"./IWrapperFunctions.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract IExchange is\n    IExchangeCore,\n    IMatchOrders,\n    ISignatureValidator,\n    ITransactions,\n    IAssetProxyDispatcher,\n    IWrapperFunctions\n{}\n",
		"2.0.0/protocol/Exchange/interfaces/IExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\n\n\ncontract IExchangeCore {\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrder(LibOrder.Order memory order)\n        public;\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n}\n",
		"2.0.0/protocol/Exchange/interfaces/IMatchOrders.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\n\n\ncontract IMatchOrders {\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n",
		"2.0.0/protocol/Exchange/interfaces/ISignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\n\ncontract ISignatureValidator {\n\n    /// @dev Approves a hash on-chain using any valid signature type.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    function preSign(\n        bytes32 hash,\n        address signerAddress,\n        bytes signature\n    )\n        external;\n    \n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external;\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signerAddress Address of signer.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n}\n",
		"2.0.0/protocol/Exchange/interfaces/ITransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity 0.4.24;\n\n\ncontract ITransactions {\n\n    /// @dev Executes an exchange method call in the context of signer.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @param signature Proof of signer transaction by signer.\n    function executeTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes data,\n        bytes signature\n    )\n        external;\n}\n",
		"2.0.0/protocol/Exchange/interfaces/IWrapperFunctions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\n\n\ncontract IWrapperFunctions {\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrKill.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrders(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrders(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously cancels multiple orders in a single transaction.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public;\n\n    /// @dev Fetches information for all passed in orders\n    /// @param orders Array of order specifications.\n    /// @return Array of OrderInfo instances that correspond to each order.\n    function getOrdersInfo(LibOrder.Order[] memory orders)\n        public\n        view\n        returns (LibOrder.OrderInfo[] memory);\n}\n",
		"2.0.0/protocol/Exchange/libs/LibEIP712.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\n\ncontract LibEIP712 {\n    // EIP191 header for EIP712 prefix\n    string constant internal EIP191_HEADER = \"\\x19\\x01\";\n\n    // EIP712 Domain Name value\n    string constant internal EIP712_DOMAIN_NAME = \"0x Protocol\";\n\n    // EIP712 Domain Version value\n    string constant internal EIP712_DOMAIN_VERSION = \"2\";\n\n    // Hash of the EIP712 Domain Separator Schema\n    bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"EIP712Domain(\",\n        \"string name,\",\n        \"string version,\",\n        \"address verifyingContract\",\n        \")\"\n    ));\n\n    // Hash of the EIP712 Domain Separator data\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 public EIP712_DOMAIN_HASH;\n\n    constructor ()\n        public\n    {\n        EIP712_DOMAIN_HASH = keccak256(abi.encode(\n            EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n            keccak256(bytes(EIP712_DOMAIN_NAME)),\n            keccak256(bytes(EIP712_DOMAIN_VERSION)),\n            address(this)\n        ));\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct in this EIP712 Domain.\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to this EIP712 Domain.\n    function hashEIP712Message(bytes32 hashStruct)\n        internal\n        view\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(EIP191_HEADER, EIP712_DOMAIN_HASH, hashStruct));\n    }\n}\n",
		"2.0.0/protocol/Exchange/libs/LibFillResults.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\nimport \"../../../utils/SafeMath/SafeMath.sol\";\n\n\ncontract LibFillResults is\n    SafeMath\n{\n\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of ZRX paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of ZRX paid by taker to feeRecipients(s).\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                    // Amounts filled and fees paid of left order.\n        FillResults right;                   // Amounts filled and fees paid of right order.\n        uint256 leftMakerAssetSpreadAmount;  // Spread between price of left and right order, denominated in the left order's makerAsset, paid to taker.\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    ///      Modifies the first FillResults instance specified.\n    /// @param totalFillResults Fill results instance that will be added onto.\n    /// @param singleFillResults Fill results instance that will be added to totalFillResults.\n    function addFillResults(FillResults memory totalFillResults, FillResults memory singleFillResults)\n        internal\n        pure\n    {\n        totalFillResults.makerAssetFilledAmount = safeAdd(totalFillResults.makerAssetFilledAmount, singleFillResults.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = safeAdd(totalFillResults.takerAssetFilledAmount, singleFillResults.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = safeAdd(totalFillResults.makerFeePaid, singleFillResults.makerFeePaid);\n        totalFillResults.takerFeePaid = safeAdd(totalFillResults.takerFeePaid, singleFillResults.takerFeePaid);\n    }\n}\n",
		"2.0.0/protocol/Exchange/libs/LibMath.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\nimport \"../../../utils/SafeMath/SafeMath.sol\";\n\n\ncontract LibMath is\n    SafeMath\n{\n\n    /// @dev Calculates partial value given a numerator and denominator.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target.\n    function getPartialAmount(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target)\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = safeDiv(\n            safeMul(numerator, target),\n            denominator\n        );\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error > 0.1%.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target)\n        internal\n        pure\n        returns (bool isError)\n    {\n        uint256 remainder = mulmod(target, numerator, denominator);\n        if (remainder == 0) {\n            return false; // No rounding error.\n        }\n\n        uint256 errPercentageTimes1000000 = safeDiv(\n            safeMul(remainder, 1000000),\n            safeMul(numerator, target)\n        );\n        isError = errPercentageTimes1000000 > 1000;\n        return isError;\n    }\n}\n",
		"2.0.0/protocol/Exchange/libs/LibOrder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\nimport \"./LibEIP712.sol\";\n\n\ncontract LibOrder is\n    LibEIP712\n{\n\n    // Hash for the EIP712 Order Schema\n    bytes32 constant internal EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"Order(\",\n        \"address makerAddress,\",\n        \"address takerAddress,\",\n        \"address feeRecipientAddress,\",\n        \"address senderAddress,\",\n        \"uint256 makerAssetAmount,\",\n        \"uint256 takerAssetAmount,\",\n        \"uint256 makerFee,\",\n        \"uint256 takerFee,\",\n        \"uint256 expirationTimeSeconds,\",\n        \"uint256 salt,\",\n        \"bytes makerAssetData,\",\n        \"bytes takerAssetData\",\n        \")\"\n    ));\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's state is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    struct Order {\n        address makerAddress;           // Address that created the order.      \n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.          \n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.      \n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.        \n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.        \n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.          \n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.     \n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\n    }\n    // solhint-enable max-line-length\n\n    struct OrderInfo {\n        uint8 orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 hash of the order (see LibOrder.getOrderHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates Keccak-256 hash of the order.\n    /// @param order The order structure.\n    /// @return Keccak-256 EIP712 hash of the order.\n    function getOrderHash(Order memory order)\n        internal\n        view\n        returns (bytes32 orderHash)\n    {\n        orderHash = hashEIP712Message(hashOrder(order));\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order.\n    function hashOrder(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = EIP712_ORDER_SCHEMA_HASH;\n        bytes32 makerAssetDataHash = keccak256(order.makerAssetData);\n        bytes32 takerAssetDataHash = keccak256(order.takerAssetData);\n\n        // Assembly for more efficiently computing:\n        //    keccak256(abi.encode(\n        //        order.makerAddress,\n        //        order.takerAddress,\n        //        order.feeRecipientAddress,\n        //        order.senderAddress,\n        //        order.makerAssetAmount,\n        //        order.takerAssetAmount,\n        //        order.makerFee,\n        //        order.takerFee,\n        //        order.expirationTimeSeconds,\n        //        order.salt,\n        //        keccak256(order.makerAssetData),\n        //        keccak256(order.takerAssetData)\n        //    ));\n\n        assembly {\n            // Backup\n            // solhint-disable-next-line space-after-comma\n            let temp1 := mload(sub(order,  32))\n            let temp2 := mload(add(order, 320))\n            let temp3 := mload(add(order, 352))\n            \n            // Hash in place\n            // solhint-disable-next-line space-after-comma\n            mstore(sub(order,  32), schemaHash)\n            mstore(add(order, 320), makerAssetDataHash)\n            mstore(add(order, 352), takerAssetDataHash)\n            result := keccak256(sub(order, 32), 416)\n            \n            // Restore\n            // solhint-disable-next-line space-after-comma\n            mstore(sub(order,  32), temp1)\n            mstore(add(order, 320), temp2)\n            mstore(add(order, 352), temp3)\n        }\n        return result;\n    }\n}\n",
		"2.0.0/tokens/ERC20Token/IERC20Token.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\n\ncontract IERC20Token {\n\n    /// @notice send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value)\n        public\n        returns (bool);\n\n    /// @notice send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value)\n        public\n        returns (bool);\n    \n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value)\n        public\n        returns (bool);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner)\n        public view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        public view\n        returns (uint256);\n\n    // solhint-disable-next-line no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n    \n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n}\n",
		"2.0.0/tokens/ERC721Token/IERC721Token.sol": "/*\nThe MIT License (MIT)\n\nCopyright (c) 2016 Smart Contract Solutions, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\npragma solidity 0.4.24;\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n * Modified from https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC721/ERC721Basic.sol\n */\ncontract IERC721Token {\n    string internal name_;\n    string internal symbol_;\n\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _tokenId\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _approved,\n        uint256 _tokenId\n    );\n\n    event ApprovalForAll(\n        address indexed _owner,\n        address indexed _operator,\n        bool _approved\n    );\n\n    function name()\n        public\n        view\n        returns (string);\n\n    function symbol()\n        public\n        view\n        returns (string);\n\n    function balanceOf(address _owner)\n        public\n        view\n        returns (uint256 _balance);\n\n    function ownerOf(uint256 _tokenId)\n        public\n        view\n        returns (address _owner);\n\n    function exists(uint256 _tokenId)\n        public\n        view\n        returns (bool _exists);\n\n    function approve(address _to, uint256 _tokenId)\n        public;\n\n    function getApproved(uint256 _tokenId)\n        public\n        view\n        returns (address _operator);\n\n    function setApprovalForAll(address _operator, bool _approved)\n        public;\n\n    function isApprovedForAll(address _owner, address _operator)\n        public\n        view\n        returns (bool);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n        public;\n\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n        public;\n\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        bytes _data\n    )\n        public;\n}\n",
		"2.0.0/tokens/EtherToken/IEtherToken.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\nimport \"../ERC20Token/IERC20Token.sol\";\n\n\ncontract IEtherToken is\n    IERC20Token\n{\n    function deposit()\n        public\n        payable;\n    \n    function withdraw(uint256 amount)\n        public;\n}\n",
		"2.0.0/utils/LibBytes/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n    \n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n                    \n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n                    \n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to < b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length);\n        return result;\n    }\n    \n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to < b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            \"GREATER_THAN_ZERO_LENGTH_REQUIRED\"\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n            \n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        return uint256(readBytes32(b, index));\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= index + 4,\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n        );\n        assembly {\n            result := mload(add(b, 32))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @dev NOTE: the returned value overlaps with the input value.\n    ///            Both should be treated as immutable.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytesWithLength(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n        \n        // Return a pointer to the byte array as it exists inside `b`\n        assembly {\n            result := add(b, index)\n        }\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytesWithLength(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            b.contentAddress() + index,\n            input.rawAddress(), // includes length of <input>\n            input.length + 32   // +32 bytes to store <input> length\n        );\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function deepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        internal\n        pure\n    {\n        uint256 sourceLen = source.length;\n        // Dest length must be >= source length, or some bytes would not be copied.\n        require(\n            dest.length >= sourceLen,\n            \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\"\n        );\n        memCopy(\n            dest.contentAddress(),\n            source.contentAddress(),\n            sourceLen\n        );\n    }\n}\n",
		"2.0.0/utils/SafeMath/SafeMath.sol": "pragma solidity 0.4.24;\n\n\ncontract SafeMath {\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(\n            c / a == b,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(\n            b <= a,\n            \"UINT256_OVERFLOW\"\n        );\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        require(\n            c >= a,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n"
	},
	"sourceTreeHashHex": "0x030f2105dbf8b22d470b03034aa0d4e97ff0e9db0ab2aec798b8c1271d71f16f",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.4.24+commit.e67f0147.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"networks": {
		"50": {
			"address": "0xb69e673309512a9d726f87304c6984054f87a93b",
			"links": {},
			"constructorArgs": "[\"0x48bacb9266a570d521063ef5dd96e61686dbe788\",\"0x0b1ba0af832d7c05fd64161e0db78e85978e8082\",\"0x871dd7c2b4b25e1aa18728e9d5f2af4c4e431f5c\",\"0xf47261b0000000000000000000000000871dd7c2b4b25e1aa18728e9d5f2af4c4e431f5c\",\"0xf47261b00000000000000000000000000b1ba0af832d7c05fd64161e0db78e85978e8082\"]"
		}
	}
}