{
	"schemaVersion": "2.0.0",
	"contractName": "Forwarder",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "address"
					},
					{
						"name": "",
						"type": "address"
					},
					{
						"name": "",
						"type": "uint256"
					},
					{
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC721Received",
				"outputs": [
					{
						"name": "",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					},
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "feeOrders",
						"type": "tuple[]"
					},
					{
						"name": "feeSignatures",
						"type": "bytes[]"
					},
					{
						"name": "feeProportion",
						"type": "uint16"
					},
					{
						"name": "feeRecipient",
						"type": "address"
					}
				],
				"name": "marketSellEthForERC20",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "makerAssetFillAmount",
						"type": "uint256"
					}
				],
				"name": "calculateMarketBuyResults",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "ALLOWABLE_EXCHANGE_PERCENTAGE",
				"outputs": [
					{
						"name": "",
						"type": "uint16"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "ERC20_DATA_ID",
				"outputs": [
					{
						"name": "",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					},
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "feeOrders",
						"type": "tuple[]"
					},
					{
						"name": "feeSignatures",
						"type": "bytes[]"
					},
					{
						"name": "makerTokenFillAmount",
						"type": "uint256"
					},
					{
						"name": "feeProportion",
						"type": "uint16"
					},
					{
						"name": "feeRecipient",
						"type": "address"
					}
				],
				"name": "marketBuyTokensWithEth",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "PERCENTAGE_DENOMINATOR",
				"outputs": [
					{
						"name": "",
						"type": "uint16"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "MAX_FEE",
				"outputs": [
					{
						"name": "",
						"type": "uint16"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "zrxFillAmount",
						"type": "uint256"
					}
				],
				"name": "calculateMarketBuyZrxResults",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "address"
					},
					{
						"name": "",
						"type": "uint256"
					},
					{
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC721Received",
				"outputs": [
					{
						"name": "",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "erc20AssetProxyId",
						"type": "bytes4"
					}
				],
				"name": "setERC20ProxyApproval",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "ERC721_DATA_ID",
				"outputs": [
					{
						"name": "",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "_exchange",
						"type": "address"
					},
					{
						"name": "_etherToken",
						"type": "address"
					},
					{
						"name": "_zrxToken",
						"type": "address"
					},
					{
						"name": "_erc20AssetProxyId",
						"type": "bytes4"
					},
					{
						"name": "_zrxAssetData",
						"type": "bytes"
					},
					{
						"name": "_wethAssetData",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"payable": true,
				"stateMutability": "payable",
				"type": "fallback"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x60806040526000196006553480156200001757600080fd5b5060405162003c7d38038062003c7d83398101806040526200003d919081019062000494565b6000805433600160a060020a031991821617909155600180548216600160a060020a038981169190911790915560028054831688831617905560038054909216908616179055815186908690869085908590620000a290600490602085019062000339565b508051620000b890600590602084019062000339565b505050505050620000d883620000e4640100000000026401000000009004565b505050505050620006cf565b60008054600160a060020a0316331462000135576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200012c9062000605565b60405180910390fd5b6001546040517f60704108000000000000000000000000000000000000000000000000000000008152600160a060020a039091169063607041089062000180908590600401620005ef565b602060405180830381600087803b1580156200019b57600080fd5b505af1158015620001b0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620001d691908101906200046b565b9050600160a060020a0381161562000335576002546006546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a039092169163095ea7b3916200023791859190600401620005d0565b602060405180830381600087803b1580156200025257600080fd5b505af115801562000267573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200028d919081019062000558565b506003546006546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a039092169163095ea7b391620002dd91859190600401620005d0565b602060405180830381600087803b158015620002f857600080fd5b505af11580156200030d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000333919081019062000558565b505b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200037c57805160ff1916838001178555620003ac565b82800160010185558215620003ac579182015b82811115620003ac5782518255916020019190600101906200038f565b50620003ba929150620003be565b5090565b620003db91905b80821115620003ba5760008155600101620003c5565b90565b6000620003ec825162000666565b9392505050565b6000620003ec825162000697565b6000620003ec825162000672565b6000601f820183136200042157600080fd5b81516200043862000432826200063e565b62000617565b915080825260208301602083018583830111156200045557600080fd5b620004628382846200069c565b50505092915050565b6000602082840312156200047e57600080fd5b60006200048c8484620003de565b949350505050565b60008060008060008060c08789031215620004ae57600080fd5b6000620004bc8989620003de565b9650506020620004cf89828a01620003de565b9550506040620004e289828a01620003de565b9450506060620004f589828a0162000401565b93505060808701516001604060020a038111156200051257600080fd5b6200052089828a016200040f565b92505060a08701516001604060020a038111156200053d57600080fd5b6200054b89828a016200040f565b9150509295509295509295565b6000602082840312156200056b57600080fd5b60006200048c8484620003f3565b620005848162000666565b82525050565b620005848162000672565b601381527f4f4e4c595f434f4e54524143545f4f574e455200000000000000000000000000602082015260400190565b6200058481620003db565b60408101620005e0828562000579565b620003ec6020830184620005c5565b60208101620005ff82846200058a565b92915050565b60208082528101620005ff8162000595565b6040518181016001604060020a03811182821017156200063657600080fd5b604052919050565b60006001604060020a038211156200065557600080fd5b506020601f91909101601f19160190565b600160a060020a031690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b151590565b60005b83811015620006b95781810151838201526020016200069f565b83811115620006c9576000848401525b50505050565b61359e80620006df6000396000f3006080604052600436106100cf5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663150b7a02811461012b578063169645f2146101615780631c5b1ec41461018157806320472cf7146101a15780634a00f7d5146101c3578063725cef06146101d85780638da5cb5b146101eb578063b3cd42541461020d578063bc063e1a14610222578063e58e9c1614610237578063f0b9e5ba14610257578063f2afd85a14610277578063f2fde38b14610297578063fb4f9087146102b7575b60025473ffffffffffffffffffffffffffffffffffffffff163314610129576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610120906132ec565b60405180910390fd5b005b34801561013757600080fd5b5061014b6101463660046128bb565b6102cc565b60405161015891906132de565b60405180910390f35b61017461016f366004612999565b61032c565b60405161015891906133ac565b34801561018d57600080fd5b5061017461019c366004612b7a565b6105f8565b3480156101ad57600080fd5b506101b66106be565b60405161015891906133fd565b3480156101cf57600080fd5b5061014b6106c4565b6101746101e6366004612a7f565b6106f9565b3480156101f757600080fd5b50610200610ac7565b6040516101589190613206565b34801561021957600080fd5b506101b6610ae3565b34801561022e57600080fd5b506101b6610ae9565b34801561024357600080fd5b50610174610252366004612b7a565b610aef565b34801561026357600080fd5b5061014b610272366004612934565b610bec565b34801561028357600080fd5b50610129610292366004612be9565b610c4c565b3480156102a357600080fd5b506101296102b236600461287f565b610ec3565b3480156102c357600080fd5b5061014b610f74565b604080517f6f6e455243373231526563656976656428616464726573732c6164647265737381527f2c75696e743235362c62797465732900000000000000000000000000000000006020820152905190819003602f019020949350505050565b6103346124be565b3460008080808411610372576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061331c565b61037d848888610fcf565b9250610389848461109d565b9150600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561041157600080fd5b505af1158015610425573d6000803e3d6000fd5b50505050506104528b600081518110151561043c57fe5b90602001906020020151610140015160106110b4565b60058054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281529394508301828280156104f85780601f106104cd576101008083540402835291602001916104f8565b820191906000526020600020905b8154815290600101906020018083116104db57829003601f168201915b50505050508b600081518110151561050c57fe5b60209081029091010151610160015260035473ffffffffffffffffffffffffffffffffffffffff82811691161415610550576105498b8b84611115565b9450610560565b61055d8b8b8b8b8661122f565b94505b602085015184101561059e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610120906132fc565b602085015182146105db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061335c565b6105ea813387600001516113b7565b505050509695505050505050565b6106006124be565b600080600061060d6124be565b600093505b86518410156106b45761062986866000015161109d565b925061066c878581518110151561063c57fe5b9060200190602002015160a00151888681518110151561065857fe5b906020019060200201516080015185611591565b915061068f878581518110151561067f57fe5b90602001906020020151836115ae565b905061069b8582611707565b84518614156106a9576106b4565b600190930192610612565b5050505092915050565b61251c81565b604080517f4552433230546f6b656e286164647265737329000000000000000000000000008152905190819003601301902081565b6107016124be565b34600080821161073d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061331c565b60008611610777576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061331c565b61079f8a600081518110151561078957fe5b9060200190602002015161014001516000611769565b604080517f4552433230546f6b656e28616464726573732900000000000000000000000000815290519081900360130190209091507fffffffff00000000000000000000000000000000000000000000000000000000808316911614806108815750604080517f455243373231546f6b656e28616464726573732c75696e743235362c6279746581527f7329000000000000000000000000000000000000000000000000000000000000602082015290519081900360220190207fffffffff000000000000000000000000000000000000000000000000000000008281169116145b15156108b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061338c565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561093f57600080fd5b505af1158015610953573d6000803e3d6000fd5b5050604080517f4552433230546f6b656e28616464726573732900000000000000000000000000815290519081900360130190207fffffffff000000000000000000000000000000000000000000000000000000008581169116141592506109cc915050576109c58a8a8a8a8a6117d6565b9250610a5f565b604080517f455243373231546f6b656e28616464726573732c75696e743235362c6279746581527f7329000000000000000000000000000000000000000000000000000000000000602082015290519081900360220190207fffffffff0000000000000000000000000000000000000000000000000000000082811691161415610a5f57610a5c8a8a8a8a611b2d565b92505b6020830151821015610a9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610120906132fc565b610aba610aae83856020015161109d565b84602001518787611e2f565b5050979650505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b61271081565b6103e881565b610af76124be565b6000806000610b046124be565b600093505b86518410156106b457610b2086866000015161109d565b9250610b878785815181101515610b3357fe5b9060200190602002015160a00151610b818987815181101515610b5257fe5b90602001906020020151608001518a88815181101515610b6e57fe5b9060200190602002015160e0015161109d565b85611591565b9150610bb48785815181101515610b9a57fe5b90602001906020020151610baf846001611f1c565b6115ae565b9050610bc88160000151826060015161109d565b8152610bd48582611707565b84518611610be1576106b4565b600190930192610b09565b604080517f6f6e455243373231526563656976656428616464726573732c75696e7432353681527f2c62797465732900000000000000000000000000000000000000000000000000602082015290519081900360270190205b9392505050565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610c9e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061336c565b6001546040517f6070410800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690636070410890610cf49085906004016132de565b602060405180830381600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d46919081019061289d565b905073ffffffffffffffffffffffffffffffffffffffff811615610ebf576002546006546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092169163095ea7b391610dbe91859190600401613258565b602060405180830381600087803b158015610dd857600080fd5b505af1158015610dec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e109190810190612bcb565b506003546006546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092169163095ea7b391610e6b91859190600401613258565b602060405180830381600087803b158015610e8557600080fd5b505af1158015610e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ebd9190810190612bcb565b505b5050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f14576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061336c565b73ffffffffffffffffffffffffffffffffffffffff811615610f7157600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790555b50565b604080517f455243373231546f6b656e28616464726573732c75696e743235362c6279746581527f73290000000000000000000000000000000000000000000000000000000000006020820152905190819003602201902081565b6000808361ffff16118015610ff9575073ffffffffffffffffffffffffffffffffffffffff821615155b15610c45576103e861ffff8416111561103e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061333c565b61104f61ffff841661271086611591565b60405190915073ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f19350505050158015611095573d6000803e3d6000fd5b509392505050565b6000828211156110a957fe5b508082035b92915050565b6000816014018351101515156110f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061337c565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b61111d6124be565b6001546040517f7e1d980800000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff1690637e1d980890611178908890879089906004016132ac565b608060405180830381600087803b15801561119257600080fd5b505af11580156111a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111ca9190810190612c07565b91506111de8260000151836060015161109d565b90506111ee826000015182611f2b565b1515611226576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061335c565b81529392505050565b6112376124be565b60006112416124be565b6112496124be565b6112516124be565b85935061125e8a87611f48565b92506000836060015111156112f25761127c88888560600151611fb2565b91506112958661129088856020015161109d565b611f2b565b15156112cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061335c565b6112db84836020015161109d565b606080840151908701526020808401519087015293505b6001546040517f7e1d980800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690637e1d98089061134c908d9088908e906004016132ac565b608060405180830381600087803b15801561136657600080fd5b505af115801561137a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061139e9190810190612c07565b90506113aa8582611707565b5050505095945050505050565b604080517f7472616e7366657228616464726573732c75696e7432353629000000000000008152905190819003601901812060009173ffffffffffffffffffffffffffffffffffffffff861691906114159086908690602401613258565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931783525181519192909182919080838360005b838110156114b95781810151838201526020016114a1565b50505050905090810190601f1680156114e65780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af192505050801515611535576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061334c565b3d15611552575060003d602014156115525760206000803e506000515b80151561158b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061334c565b50505050565b60006115a66115a085846122eb565b8461230f565b949350505050565b6115b66124be565b6115be6124e7565b6001546040517fc75e0a81000000000000000000000000000000000000000000000000000000008152600091829173ffffffffffffffffffffffffffffffffffffffff9091169063c75e0a81906116199089906004016133ba565b606060405180830381600087803b15801561163357600080fd5b505af1158015611647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061166b9190810190612c25565b805190935060ff1660031461167f576116fe565b6116918660a00151846040015161109d565b915061169d8583612326565b6020850181905260a087015160808801519192506116bd91839190611591565b8452602084015160a087015160c08801516116d9929190611591565b6040850152602084015160a087015160e08801516116f8929190611591565b60608501525b50505092915050565b815181516117159190611f1c565b82526020808301519082015161172b9190611f1c565b6020830152604080830151908201516117449190611f1c565b60408301526060808301519082015161175d9190611f1c565b60609092019190915250565b6000816004018351101515156117ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061339c565b5050602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b6117de6124be565b60006117e86124be565b6117f06124be565b6117f86124be565b61180a8a600081518110151561043c57fe5b60058054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281529397508301828280156118b05780601f10611885576101008083540402835291602001916118b0565b820191906000526020600020905b81548152906001019060200180831161189357829003601f168201915b50505050508a60008151811015156118c457fe5b60209081029091010151610160015260035473ffffffffffffffffffffffffffffffffffffffff858116911614156119a2576119018a8a88611fb2565b805190935086111561193f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061335c565b6119498584611707565b61196561195e86600001518760600151611f1c565b8651611f2b565b151561199d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061335c565b611b1e565b6119ac8a876105f8565b91506000826060015111156119e1576119ca88888460600151611fb2565b602080820151908701526060808201519087015290505b6001546040517fe5fa431b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063e5fa431b90611a3b908d908a908e906004016132ac565b608060405180830381600087803b158015611a5557600080fd5b505af1158015611a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a8d9190810190612c07565b80519093508614611aca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061335c565b611ad48584611707565b611ae685602001518460200151611f2b565b1515611b1e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061335c565b6113aa843385600001516113b7565b611b356124be565b60008060606000611b446124be565b611b4c6124be565b8a51945084604051908082528060200260200182016040528015611b7a578160200160208202803883390190505b509350600092505b84831015611cb657611baf868c85815181101515611b9c57fe5b9060200190602002015160e00151611f1c565b60058054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152939950830182828015611c555780601f10611c2a57610100808354040283529160200191611c55565b820191906000526020600020905b815481529060010190602001808311611c3857829003601f168201915b50505050508b84815181101515611c6857fe5b6020908102909101015161016001528a518b9084908110611c8557fe5b9060200190602002015160a001518484815181101515611ca157fe5b60209081029091010152600190920191611b82565b6000861115611ce157611cca898988611fb2565b606080820151908901526020808201519089015291505b6001546040517f4d0ae54600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690634d0ae54690611d3b908e9088908f90600401613273565b608060405180830381600087803b158015611d5557600080fd5b505af1158015611d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d8d9190810190612c07565b9050611d998782611707565b611dab87602001518260200151611f2b565b1515611de3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061335c565b600092505b84831015611e2157611e168b84815181101515611e0157fe5b9060200190602002015161014001513361233c565b600190920191611de8565b505050505050949350505050565b6000806000861115611f14576002546040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632e1a7d4d90611e9190899060040161340b565b600060405180830381600087803b158015611eab57600080fd5b505af1158015611ebf573d6000803e3d6000fd5b50505050611ece858585610fcf565b9150611eda868361109d565b90506000811115611f1457604051339082156108fc029083906000818181858888f19350505050158015611f12573d6000803e3d6000fd5b505b505050505050565b600082820183811015610c4557fe5b600080611f3d61251c61271086611591565b909210159392505050565b611f506124be565b600080611f5b6124be565b600092505b85518310156116fe57611f7785856020015161109d565b9150611f8a868481518110151561067f57fe5b9050611f968482611707565b8484602001511415611fa7576116fe565b600190920191611f60565b611fba6124be565b6000806000611fc76124be565b600093505b87518410156122e0576004805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156120795780601f1061204e57610100808354040283529160200191612079565b820191906000526020600020905b81548152906001019060200180831161205c57829003601f168201915b5050505050888581518110151561208c57fe5b602090810290910181015161014001919091526005805460408051601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001871615020190941693909304928301859004850281018501909152818152928301828280156121415780601f1061211657610100808354040283529160200191612141565b820191906000526020600020905b81548152906001019060200180831161212457829003601f168201915b5050505050888581518110151561215457fe5b602090810290910101516101600152845161217090879061109d565b92506121be888581518110151561218357fe5b9060200190602002015160a00151610b818a878151811015156121a257fe5b90602001906020020151608001518b88815181101515610b6e57fe5b600154895191935073ffffffffffffffffffffffffffffffffffffffff169063b4be83d5908a90879081106121ef57fe5b90602001906020020151612204856001611f1c565b8a8881518110151561221257fe5b906020019060200201516040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612256939291906133cb565b608060405180830381600087803b15801561227057600080fd5b505af1158015612284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122a89190810190612c07565b90506122bc8160000151826060015161109d565b81526122c88582611707565b845186116122d5576122e0565b600190930192611fcc565b505050509392505050565b6000828202831580612307575082848281151561230457fe5b04145b1515610c4557fe5b600080828481151561231d57fe5b04949350505050565b60008183106123355781610c45565b5090919050565b600080606061235285601063ffffffff6110b416565b925061236585602463ffffffff61240c16565b915061237885606463ffffffff61241816565b6040517fb88d4fde00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff84169063b88d4fde906123d3903090889087908790600401613214565b600060405180830381600087803b1580156123ed57600080fd5b505af1158015612401573d6000803e3d6000fd5b505050505050505050565b6000610c458383612473565b60606000612426848461240c565b905060208301925080830184511015151561246d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061330c565b50500190565b6000816020018351101515156124b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061332c565b50016020015190565b608060405190810160405280600081526020016000815260200160008152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b6000610c4582356134b1565b6000610c4582516134b1565b6000601f8201831361253057600080fd5b813561254361253e82613440565b613419565b81815260209384019390925082018360005b838110156106b4578135860161256b8882612602565b8452506020928301929190910190600101612555565b6000601f8201831361259257600080fd5b81356125a061253e82613440565b81815260209384019390925082018360005b838110156106b457813586016125c88882612712565b84525060209283019291909101906001016125b2565b6000610c4582516134f9565b6000610c4582516134f6565b6000610c4582356134ca565b6000601f8201831361261357600080fd5b813561262161253e82613461565b9150808252602083016020830185838301111561263d57600080fd5b6116fe838284613504565b60006080828403121561265a57600080fd5b6126646080613419565b9050600061267284846125ea565b8252506020612683848483016125ea565b6020830152506040612697848285016125ea565b60408301525060606126ab848285016125ea565b60608301525092915050565b6000606082840312156126c957600080fd5b6126d36060613419565b905060006126e18484612873565b82525060206126f2848483016125ea565b6020830152506040612706848285016125ea565b60408301525092915050565b6000610180828403121561272557600080fd5b612730610180613419565b9050600061273e8484612507565b825250602061274f84848301612507565b602083015250604061276384828501612507565b604083015250606061277784828501612507565b606083015250608061278b84828501612867565b60808301525060a061279f84828501612867565b60a08301525060c06127b384828501612867565b60c08301525060e06127c784828501612867565b60e0830152506101006127dc84828501612867565b610100830152506101206127f284828501612867565b6101208301525061014082013567ffffffffffffffff81111561281457600080fd5b61282084828501612602565b6101408301525061016082013567ffffffffffffffff81111561284257600080fd5b61284e84828501612602565b6101608301525092915050565b6000610c4582356134ef565b6000610c4582356134f6565b6000610c4582516134fe565b60006020828403121561289157600080fd5b60006115a68484612507565b6000602082840312156128af57600080fd5b60006115a68484612513565b600080600080608085870312156128d157600080fd5b60006128dd8787612507565b94505060206128ee87828801612507565b93505060406128ff87828801612867565b925050606085013567ffffffffffffffff81111561291c57600080fd5b61292887828801612602565b91505092959194509250565b60008060006060848603121561294957600080fd5b60006129558686612507565b935050602061296686828701612867565b925050604084013567ffffffffffffffff81111561298357600080fd5b61298f86828701612602565b9150509250925092565b60008060008060008060c087890312156129b257600080fd5b863567ffffffffffffffff8111156129c957600080fd5b6129d589828a01612581565b965050602087013567ffffffffffffffff8111156129f257600080fd5b6129fe89828a0161251f565b955050604087013567ffffffffffffffff811115612a1b57600080fd5b612a2789828a01612581565b945050606087013567ffffffffffffffff811115612a4457600080fd5b612a5089828a0161251f565b9350506080612a6189828a0161285b565b92505060a0612a7289828a01612507565b9150509295509295509295565b600080600080600080600060e0888a031215612a9a57600080fd5b873567ffffffffffffffff811115612ab157600080fd5b612abd8a828b01612581565b975050602088013567ffffffffffffffff811115612ada57600080fd5b612ae68a828b0161251f565b965050604088013567ffffffffffffffff811115612b0357600080fd5b612b0f8a828b01612581565b955050606088013567ffffffffffffffff811115612b2c57600080fd5b612b388a828b0161251f565b9450506080612b498a828b01612867565b93505060a0612b5a8a828b0161285b565b92505060c0612b6b8a828b01612507565b91505092959891949750929550565b60008060408385031215612b8d57600080fd5b823567ffffffffffffffff811115612ba457600080fd5b612bb085828601612581565b9250506020612bc185828601612867565b9150509250929050565b600060208284031215612bdd57600080fd5b60006115a684846125de565b600060208284031215612bfb57600080fd5b60006115a684846125f6565b600060808284031215612c1957600080fd5b60006115a68484612648565b600060608284031215612c3757600080fd5b60006115a684846126b7565b612c4c816134b1565b82525050565b6000612c5d826134ad565b80845260208401935083602082028501612c76856134a7565b60005b84811015612cad578383038852612c91838351612d74565b9250612c9c826134a7565b602098909801979150600101612c79565b50909695505050505050565b6000612cc4826134ad565b80845260208401935083602082028501612cdd856134a7565b60005b84811015612cad578383038852612cf88383516130f1565b9250612d03826134a7565b602098909801979150600101612ce0565b6000612d1f826134ad565b808452602084019350612d31836134a7565b60005b82811015612d6157612d478683516131fd565b612d50826134a7565b602096909601959150600101612d34565b5093949350505050565b612c4c816134ca565b6000612d7f826134ad565b808452612d93816020860160208601613510565b612d9c8161353c565b9093016020019392505050565b602381527f44454641554c545f46554e4354494f4e5f574554485f434f4e54524143545f4f60208201527f4e4c590000000000000000000000000000000000000000000000000000000000604082015260600190565b601181527f494e56414c49445f4d53475f56414c5545000000000000000000000000000000602082015260400190565b603081527f475245415445525f4f525f455155414c5f544f5f4e45535445445f425954455360208201527f5f4c454e4754485f524551554952454400000000000000000000000000000000604082015260600190565b601781527f56414c55455f475245415445525f5448414e5f5a45524f000000000000000000602082015260400190565b602681527f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524560208201527f5155495245440000000000000000000000000000000000000000000000000000604082015260600190565b601881527f4645455f50524f504f5254494f4e5f544f4f5f4c415247450000000000000000602082015260400190565b600f81527f5452414e534645525f4641494c45440000000000000000000000000000000000602082015260400190565b601681527f554e41434345505441424c455f5448524553484f4c4400000000000000000000602082015260400190565b601381527f4f4e4c595f434f4e54524143545f4f574e455200000000000000000000000000602082015260400190565b602681527f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524560208201527f5155495245440000000000000000000000000000000000000000000000000000604082015260600190565b601781527f554e535550504f525445445f544f4b454e5f50524f5859000000000000000000602082015260400190565b602581527f475245415445525f4f525f455155414c5f544f5f345f4c454e4754485f52455160208201527f5549524544000000000000000000000000000000000000000000000000000000604082015260600190565b805160808301906130b884826131fd565b5060208201516130cb60208501826131fd565b5060408201516130de60408501826131fd565b50606082015161158b60608501826131fd565b80516000906101808401906131068582612c43565b5060208301516131196020860182612c43565b50604083015161312c6040860182612c43565b50606083015161313f6060860182612c43565b50608083015161315260808601826131fd565b5060a083015161316560a08601826131fd565b5060c083015161317860c08601826131fd565b5060e083015161318b60e08601826131fd565b506101008301516131a06101008601826131fd565b506101208301516131b56101208601826131fd565b506101408301518482036101408601526131cf8282612d74565b9150506101608301518482036101608601526131eb8282612d74565b95945050505050565b612c4c816134ef565b612c4c816134f6565b602081016110ae8284612c43565b608081016132228287612c43565b61322f6020830186612c43565b61323c60408301856131fd565b818103606083015261324e8184612d74565b9695505050505050565b604081016132668285612c43565b610c4560208301846131fd565b606080825281016132848186612cb9565b905081810360208301526132988185612d14565b905081810360408301526131eb8184612c52565b606080825281016132bd8186612cb9565b90506132cc60208301856131fd565b81810360408301526131eb8184612c52565b602081016110ae8284612d6b565b602080825281016110ae81612da9565b602080825281016110ae81612dff565b602080825281016110ae81612e2f565b602080825281016110ae81612e85565b602080825281016110ae81612eb5565b602080825281016110ae81612f0b565b602080825281016110ae81612f3b565b602080825281016110ae81612f6b565b602080825281016110ae81612f9b565b602080825281016110ae81612fcb565b602080825281016110ae81613021565b602080825281016110ae81613051565b608081016110ae82846130a7565b60208082528101610c4581846130f1565b606080825281016133dc81866130f1565b90506133eb60208301856131fd565b81810360408301526131eb8184612d74565b602081016110ae82846131f4565b602081016110ae82846131fd565b60405181810167ffffffffffffffff8111828210171561343857600080fd5b604052919050565b600067ffffffffffffffff82111561345757600080fd5b5060209081020190565b600067ffffffffffffffff82111561347857600080fd5b506020601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b60200190565b5190565b73ffffffffffffffffffffffffffffffffffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61ffff1690565b90565b151590565b60ff1690565b82818337506000910152565b60005b8381101561352b578181015183820152602001613513565b8381111561158b5750506000910152565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016905600a265627a7a723058207797c5e4e7170c401c509a807353c0a60ad36b6f14cf1a605ddebbbf0b7ce3c36c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 NOT PUSH1 0x6 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3C7D CODESIZE SUB DUP1 PUSH3 0x3C7D DUP4 CODECOPY DUP2 ADD DUP1 PUSH1 0x40 MSTORE PUSH3 0x3D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x494 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD DUP3 AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD DUP4 AND DUP9 DUP4 AND OR SWAP1 SSTORE PUSH1 0x3 DUP1 SLOAD SWAP1 SWAP3 AND SWAP1 DUP7 AND OR SWAP1 SSTORE DUP2 MLOAD DUP7 SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH3 0xA2 SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x339 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0xB8 SWAP1 PUSH1 0x5 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x339 JUMP JUMPDEST POP POP POP POP POP POP PUSH3 0xD8 DUP4 PUSH3 0xE4 PUSH5 0x100000000 MUL PUSH5 0x100000000 SWAP1 DIV JUMP JUMPDEST POP POP POP POP POP POP PUSH3 0x6CF JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH3 0x135 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x12C SWAP1 PUSH3 0x605 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x6070410800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH3 0x180 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH3 0x5EF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x19B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x1B0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0x1D6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x46B JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO PUSH3 0x335 JUMPI PUSH1 0x2 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x95EA7B3 SWAP2 PUSH3 0x237 SWAP2 DUP6 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH3 0x5D0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x252 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x267 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0x28D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x558 JUMP JUMPDEST POP PUSH1 0x3 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x95EA7B3 SWAP2 PUSH3 0x2DD SWAP2 DUP6 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH3 0x5D0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x2F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x30D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0x333 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x558 JUMP JUMPDEST POP JUMPDEST POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0x37C JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x3AC JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x3AC JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x3AC JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x38F JUMP JUMPDEST POP PUSH3 0x3BA SWAP3 SWAP2 POP PUSH3 0x3BE JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 0x3DB SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x3BA JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x3C5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3EC DUP3 MLOAD PUSH3 0x666 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3EC DUP3 MLOAD PUSH3 0x697 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3EC DUP3 MLOAD PUSH3 0x672 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH3 0x421 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x438 PUSH3 0x432 DUP3 PUSH3 0x63E JUMP JUMPDEST PUSH3 0x617 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH3 0x455 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x462 DUP4 DUP3 DUP5 PUSH3 0x69C JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x47E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x48C DUP5 DUP5 PUSH3 0x3DE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x4AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x4BC DUP10 DUP10 PUSH3 0x3DE JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH3 0x4CF DUP10 DUP3 DUP11 ADD PUSH3 0x3DE JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH3 0x4E2 DUP10 DUP3 DUP11 ADD PUSH3 0x3DE JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH3 0x4F5 DUP10 DUP3 DUP11 ADD PUSH3 0x401 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 DUP8 ADD MLOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH3 0x512 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x520 DUP10 DUP3 DUP11 ADD PUSH3 0x40F JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 DUP8 ADD MLOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH3 0x53D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x54B DUP10 DUP3 DUP11 ADD PUSH3 0x40F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x56B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x48C DUP5 DUP5 PUSH3 0x3F3 JUMP JUMPDEST PUSH3 0x584 DUP2 PUSH3 0x666 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH3 0x584 DUP2 PUSH3 0x672 JUMP JUMPDEST PUSH1 0x13 DUP2 MSTORE PUSH32 0x4F4E4C595F434F4E54524143545F4F574E455200000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH3 0x584 DUP2 PUSH3 0x3DB JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH3 0x5E0 DUP3 DUP6 PUSH3 0x579 JUMP JUMPDEST PUSH3 0x3EC PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x5C5 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH3 0x5FF DUP3 DUP5 PUSH3 0x58A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH3 0x5FF DUP2 PUSH3 0x595 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x636 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP3 GT ISZERO PUSH3 0x655 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x6B9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x69F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x6C9 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x359E DUP1 PUSH3 0x6DF PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x150B7A02 DUP2 EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0x169645F2 EQ PUSH2 0x161 JUMPI DUP1 PUSH4 0x1C5B1EC4 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x20472CF7 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x4A00F7D5 EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x725CEF06 EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0xB3CD4254 EQ PUSH2 0x20D JUMPI DUP1 PUSH4 0xBC063E1A EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0xE58E9C16 EQ PUSH2 0x237 JUMPI DUP1 PUSH4 0xF0B9E5BA EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xF2AFD85A EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0xFB4F9087 EQ PUSH2 0x2B7 JUMPI JUMPDEST PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x129 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x32EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x137 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14B PUSH2 0x146 CALLDATASIZE PUSH1 0x4 PUSH2 0x28BB JUMP JUMPDEST PUSH2 0x2CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x158 SWAP2 SWAP1 PUSH2 0x32DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x174 PUSH2 0x16F CALLDATASIZE PUSH1 0x4 PUSH2 0x2999 JUMP JUMPDEST PUSH2 0x32C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x158 SWAP2 SWAP1 PUSH2 0x33AC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x174 PUSH2 0x19C CALLDATASIZE PUSH1 0x4 PUSH2 0x2B7A JUMP JUMPDEST PUSH2 0x5F8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B6 PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x158 SWAP2 SWAP1 PUSH2 0x33FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14B PUSH2 0x6C4 JUMP JUMPDEST PUSH2 0x174 PUSH2 0x1E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A7F JUMP JUMPDEST PUSH2 0x6F9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x200 PUSH2 0xAC7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x158 SWAP2 SWAP1 PUSH2 0x3206 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B6 PUSH2 0xAE3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B6 PUSH2 0xAE9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x243 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x174 PUSH2 0x252 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B7A JUMP JUMPDEST PUSH2 0xAEF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14B PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0x2934 JUMP JUMPDEST PUSH2 0xBEC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x283 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x129 PUSH2 0x292 CALLDATASIZE PUSH1 0x4 PUSH2 0x2BE9 JUMP JUMPDEST PUSH2 0xC4C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x129 PUSH2 0x2B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x287F JUMP JUMPDEST PUSH2 0xEC3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14B PUSH2 0xF74 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x6F6E455243373231526563656976656428616464726573732C61646472657373 DUP2 MSTORE PUSH32 0x2C75696E743235362C6279746573290000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x2F ADD SWAP1 KECCAK256 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x334 PUSH2 0x24BE JUMP JUMPDEST CALLVALUE PUSH1 0x0 DUP1 DUP1 DUP1 DUP5 GT PUSH2 0x372 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x331C JUMP JUMPDEST PUSH2 0x37D DUP5 DUP9 DUP9 PUSH2 0xFCF JUMP JUMPDEST SWAP3 POP PUSH2 0x389 DUP5 DUP5 PUSH2 0x109D JUMP JUMPDEST SWAP2 POP PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x425 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x452 DUP12 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x43C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD PUSH1 0x10 PUSH2 0x10B4 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP5 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x4F8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4CD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4F8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4DB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP12 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x50C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MSTORE PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x550 JUMPI PUSH2 0x549 DUP12 DUP12 DUP5 PUSH2 0x1115 JUMP JUMPDEST SWAP5 POP PUSH2 0x560 JUMP JUMPDEST PUSH2 0x55D DUP12 DUP12 DUP12 DUP12 DUP7 PUSH2 0x122F JUMP JUMPDEST SWAP5 POP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD DUP5 LT ISZERO PUSH2 0x59E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x32FC JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD DUP3 EQ PUSH2 0x5DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x335C JUMP JUMPDEST PUSH2 0x5EA DUP2 CALLER DUP8 PUSH1 0x0 ADD MLOAD PUSH2 0x13B7 JUMP JUMPDEST POP POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x600 PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x60D PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP7 MLOAD DUP5 LT ISZERO PUSH2 0x6B4 JUMPI PUSH2 0x629 DUP7 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST SWAP3 POP PUSH2 0x66C DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x63C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP9 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x658 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0x1591 JUMP JUMPDEST SWAP2 POP PUSH2 0x68F DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x67F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 PUSH2 0x15AE JUMP JUMPDEST SWAP1 POP PUSH2 0x69B DUP6 DUP3 PUSH2 0x1707 JUMP JUMPDEST DUP5 MLOAD DUP7 EQ ISZERO PUSH2 0x6A9 JUMPI PUSH2 0x6B4 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x612 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x251C DUP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x4552433230546F6B656E28616464726573732900000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x13 ADD SWAP1 KECCAK256 DUP2 JUMP JUMPDEST PUSH2 0x701 PUSH2 0x24BE JUMP JUMPDEST CALLVALUE PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x73D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x331C JUMP JUMPDEST PUSH1 0x0 DUP7 GT PUSH2 0x777 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x331C JUMP JUMPDEST PUSH2 0x79F DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x789 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD PUSH1 0x0 PUSH2 0x1769 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x4552433230546F6B656E28616464726573732900000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x13 ADD SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP1 DUP4 AND SWAP2 AND EQ DUP1 PUSH2 0x881 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x455243373231546F6B656E28616464726573732C75696E743235362C62797465 DUP2 MSTORE PUSH32 0x7329000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x22 ADD SWAP1 KECCAK256 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 0x8B9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x338C JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x93F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x953 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x4552433230546F6B656E28616464726573732900000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x13 ADD SWAP1 KECCAK256 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP6 DUP2 AND SWAP2 AND EQ ISZERO SWAP3 POP PUSH2 0x9CC SWAP2 POP POP JUMPI PUSH2 0x9C5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x17D6 JUMP JUMPDEST SWAP3 POP PUSH2 0xA5F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x455243373231546F6B656E28616464726573732C75696E743235362C62797465 DUP2 MSTORE PUSH32 0x7329000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x22 ADD SWAP1 KECCAK256 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0xA5F JUMPI PUSH2 0xA5C DUP11 DUP11 DUP11 DUP11 PUSH2 0x1B2D JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD DUP3 LT ISZERO PUSH2 0xA9D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x32FC JUMP JUMPDEST PUSH2 0xABA PUSH2 0xAAE DUP4 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD DUP8 DUP8 PUSH2 0x1E2F JUMP JUMPDEST POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x2710 DUP2 JUMP JUMPDEST PUSH2 0x3E8 DUP2 JUMP JUMPDEST PUSH2 0xAF7 PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xB04 PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP7 MLOAD DUP5 LT ISZERO PUSH2 0x6B4 JUMPI PUSH2 0xB20 DUP7 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST SWAP3 POP PUSH2 0xB87 DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB33 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH2 0xB81 DUP10 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB52 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP11 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB6E JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST DUP6 PUSH2 0x1591 JUMP JUMPDEST SWAP2 POP PUSH2 0xBB4 DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB9A JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0xBAF DUP5 PUSH1 0x1 PUSH2 0x1F1C JUMP JUMPDEST PUSH2 0x15AE JUMP JUMPDEST SWAP1 POP PUSH2 0xBC8 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST DUP2 MSTORE PUSH2 0xBD4 DUP6 DUP3 PUSH2 0x1707 JUMP JUMPDEST DUP5 MLOAD DUP7 GT PUSH2 0xBE1 JUMPI PUSH2 0x6B4 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0xB09 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x6F6E455243373231526563656976656428616464726573732C75696E74323536 DUP2 MSTORE PUSH32 0x2C62797465732900000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x27 ADD SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xC9E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x336C JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x6070410800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH2 0xCF4 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x32DE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD22 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xD46 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x289D JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xEBF JUMPI PUSH1 0x2 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 PUSH4 0x95EA7B3 SWAP2 PUSH2 0xDBE SWAP2 DUP6 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x3258 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDEC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xE10 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2BCB JUMP JUMPDEST POP PUSH1 0x3 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 PUSH4 0x95EA7B3 SWAP2 PUSH2 0xE6B SWAP2 DUP6 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x3258 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE99 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xEBD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2BCB JUMP JUMPDEST POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xF14 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x336C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xF71 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x455243373231546F6B656E28616464726573732C75696E743235362C62797465 DUP2 MSTORE PUSH32 0x7329000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x22 ADD SWAP1 KECCAK256 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xFFFF AND GT DUP1 ISZERO PUSH2 0xFF9 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xC45 JUMPI PUSH2 0x3E8 PUSH2 0xFFFF DUP5 AND GT ISZERO PUSH2 0x103E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x333C JUMP JUMPDEST PUSH2 0x104F PUSH2 0xFFFF DUP5 AND PUSH2 0x2710 DUP7 PUSH2 0x1591 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1095 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x10A9 JUMPI INVALID JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x10F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x337C JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x111D PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7E1D980800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x7E1D9808 SWAP1 PUSH2 0x1178 SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x32AC JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x11A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x11CA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2C07 JUMP JUMPDEST SWAP2 POP PUSH2 0x11DE DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST SWAP1 POP PUSH2 0x11EE DUP3 PUSH1 0x0 ADD MLOAD DUP3 PUSH2 0x1F2B JUMP JUMPDEST ISZERO ISZERO PUSH2 0x1226 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x335C JUMP JUMPDEST DUP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1237 PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1241 PUSH2 0x24BE JUMP JUMPDEST PUSH2 0x1249 PUSH2 0x24BE JUMP JUMPDEST PUSH2 0x1251 PUSH2 0x24BE JUMP JUMPDEST DUP6 SWAP4 POP PUSH2 0x125E DUP11 DUP8 PUSH2 0x1F48 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 DUP4 PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x12F2 JUMPI PUSH2 0x127C DUP9 DUP9 DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x1FB2 JUMP JUMPDEST SWAP2 POP PUSH2 0x1295 DUP7 PUSH2 0x1290 DUP9 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST PUSH2 0x1F2B JUMP JUMPDEST ISZERO ISZERO PUSH2 0x12CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x335C JUMP JUMPDEST PUSH2 0x12DB DUP5 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST PUSH1 0x60 DUP1 DUP5 ADD MLOAD SWAP1 DUP8 ADD MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD SWAP1 DUP8 ADD MSTORE SWAP4 POP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7E1D980800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x7E1D9808 SWAP1 PUSH2 0x134C SWAP1 DUP14 SWAP1 DUP9 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x32AC JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1366 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x137A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x139E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2C07 JUMP JUMPDEST SWAP1 POP PUSH2 0x13AA DUP6 DUP3 PUSH2 0x1707 JUMP JUMPDEST POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x7472616E7366657228616464726573732C75696E743235362900000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x19 ADD DUP2 KECCAK256 PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP2 SWAP1 PUSH2 0x1415 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x3258 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR DUP4 MSTORE MLOAD DUP2 MLOAD SWAP2 SWAP3 SWAP1 SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x14B9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x14A1 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x14E6 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP3 POP POP POP DUP1 ISZERO ISZERO PUSH2 0x1535 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x334C JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x1552 JUMPI POP PUSH1 0x0 RETURNDATASIZE PUSH1 0x20 EQ ISZERO PUSH2 0x1552 JUMPI PUSH1 0x20 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD JUMPDEST DUP1 ISZERO ISZERO PUSH2 0x158B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x334C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15A6 PUSH2 0x15A0 DUP6 DUP5 PUSH2 0x22EB JUMP JUMPDEST DUP5 PUSH2 0x230F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x15B6 PUSH2 0x24BE JUMP JUMPDEST PUSH2 0x15BE PUSH2 0x24E7 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0xC75E0A8100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xC75E0A81 SWAP1 PUSH2 0x1619 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x33BA JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1633 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1647 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x166B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2C25 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP4 POP PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x167F JUMPI PUSH2 0x16FE JUMP JUMPDEST PUSH2 0x1691 DUP7 PUSH1 0xA0 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST SWAP2 POP PUSH2 0x169D DUP6 DUP4 PUSH2 0x2326 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP8 ADD MLOAD PUSH1 0x80 DUP9 ADD MLOAD SWAP2 SWAP3 POP PUSH2 0x16BD SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x1591 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0xA0 DUP8 ADD MLOAD PUSH1 0xC0 DUP9 ADD MLOAD PUSH2 0x16D9 SWAP3 SWAP2 SWAP1 PUSH2 0x1591 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0xA0 DUP8 ADD MLOAD PUSH1 0xE0 DUP9 ADD MLOAD PUSH2 0x16F8 SWAP3 SWAP2 SWAP1 PUSH2 0x1591 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD PUSH2 0x1715 SWAP2 SWAP1 PUSH2 0x1F1C JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x172B SWAP2 SWAP1 PUSH2 0x1F1C JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x1744 SWAP2 SWAP1 PUSH2 0x1F1C JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x175D SWAP2 SWAP1 PUSH2 0x1F1C JUMP JUMPDEST PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x17AB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x339C JUMP JUMPDEST POP POP PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH2 0x17DE PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17E8 PUSH2 0x24BE JUMP JUMPDEST PUSH2 0x17F0 PUSH2 0x24BE JUMP JUMPDEST PUSH2 0x17F8 PUSH2 0x24BE JUMP JUMPDEST PUSH2 0x180A DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x43C JUMPI INVALID JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP8 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x18B0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1885 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x18B0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1893 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x18C4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MSTORE PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x19A2 JUMPI PUSH2 0x1901 DUP11 DUP11 DUP9 PUSH2 0x1FB2 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP4 POP DUP7 GT ISZERO PUSH2 0x193F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x335C JUMP JUMPDEST PUSH2 0x1949 DUP6 DUP5 PUSH2 0x1707 JUMP JUMPDEST PUSH2 0x1965 PUSH2 0x195E DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD PUSH2 0x1F1C JUMP JUMPDEST DUP7 MLOAD PUSH2 0x1F2B JUMP JUMPDEST ISZERO ISZERO PUSH2 0x199D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x335C JUMP JUMPDEST PUSH2 0x1B1E JUMP JUMPDEST PUSH2 0x19AC DUP11 DUP8 PUSH2 0x5F8 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x19E1 JUMPI PUSH2 0x19CA DUP9 DUP9 DUP5 PUSH1 0x60 ADD MLOAD PUSH2 0x1FB2 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP8 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MLOAD SWAP1 DUP8 ADD MSTORE SWAP1 POP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0xE5FA431B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xE5FA431B SWAP1 PUSH2 0x1A3B SWAP1 DUP14 SWAP1 DUP11 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x32AC JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1A8D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2C07 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP4 POP DUP7 EQ PUSH2 0x1ACA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x335C JUMP JUMPDEST PUSH2 0x1AD4 DUP6 DUP5 PUSH2 0x1707 JUMP JUMPDEST PUSH2 0x1AE6 DUP6 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x1F2B JUMP JUMPDEST ISZERO ISZERO PUSH2 0x1B1E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x335C JUMP JUMPDEST PUSH2 0x13AA DUP5 CALLER DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x13B7 JUMP JUMPDEST PUSH2 0x1B35 PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH1 0x0 PUSH2 0x1B44 PUSH2 0x24BE JUMP JUMPDEST PUSH2 0x1B4C PUSH2 0x24BE JUMP JUMPDEST DUP11 MLOAD SWAP5 POP DUP5 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1B7A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH2 0x1CB6 JUMPI PUSH2 0x1BAF DUP7 DUP13 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1B9C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH2 0x1F1C JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP10 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1C55 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1C2A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1C55 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1C38 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP12 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1C68 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MSTORE DUP11 MLOAD DUP12 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x1C85 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP5 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1CA1 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x1B82 JUMP JUMPDEST PUSH1 0x0 DUP7 GT ISZERO PUSH2 0x1CE1 JUMPI PUSH2 0x1CCA DUP10 DUP10 DUP9 PUSH2 0x1FB2 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 ADD MLOAD SWAP1 DUP10 ADD MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP10 ADD MSTORE SWAP2 POP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x4D0AE54600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x4D0AE546 SWAP1 PUSH2 0x1D3B SWAP1 DUP15 SWAP1 DUP9 SWAP1 DUP16 SWAP1 PUSH1 0x4 ADD PUSH2 0x3273 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1D69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1D8D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2C07 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D99 DUP8 DUP3 PUSH2 0x1707 JUMP JUMPDEST PUSH2 0x1DAB DUP8 PUSH1 0x20 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x1F2B JUMP JUMPDEST ISZERO ISZERO PUSH2 0x1DE3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x335C JUMP JUMPDEST PUSH1 0x0 SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH2 0x1E21 JUMPI PUSH2 0x1E16 DUP12 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1E01 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD CALLER PUSH2 0x233C JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x1DE8 JUMP JUMPDEST POP POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP7 GT ISZERO PUSH2 0x1F14 JUMPI PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x1E91 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x340B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1EAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1EBF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1ECE DUP6 DUP6 DUP6 PUSH2 0xFCF JUMP JUMPDEST SWAP2 POP PUSH2 0x1EDA DUP7 DUP4 PUSH2 0x109D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x1F14 JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1F12 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xC45 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F3D PUSH2 0x251C PUSH2 0x2710 DUP7 PUSH2 0x1591 JUMP JUMPDEST SWAP1 SWAP3 LT ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1F50 PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F5B PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 SWAP3 POP JUMPDEST DUP6 MLOAD DUP4 LT ISZERO PUSH2 0x16FE JUMPI PUSH2 0x1F77 DUP6 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST SWAP2 POP PUSH2 0x1F8A DUP7 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x67F JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x1F96 DUP5 DUP3 PUSH2 0x1707 JUMP JUMPDEST DUP5 DUP5 PUSH1 0x20 ADD MLOAD EQ ISZERO PUSH2 0x1FA7 JUMPI PUSH2 0x16FE JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x1F60 JUMP JUMPDEST PUSH2 0x1FBA PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1FC7 PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP8 MLOAD DUP5 LT ISZERO PUSH2 0x22E0 JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x2 PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x100 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x2079 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x204E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2079 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x205C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP9 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x208C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH2 0x140 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x5 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP8 AND ISZERO MUL ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV SWAP3 DUP4 ADD DUP6 SWAP1 DIV DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP2 MSTORE DUP2 DUP2 MSTORE SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x2141 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2116 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2141 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2124 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP9 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2154 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MSTORE DUP5 MLOAD PUSH2 0x2170 SWAP1 DUP8 SWAP1 PUSH2 0x109D JUMP JUMPDEST SWAP3 POP PUSH2 0x21BE DUP9 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2183 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH2 0xB81 DUP11 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x21A2 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP12 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB6E JUMPI INVALID JUMPDEST PUSH1 0x1 SLOAD DUP10 MLOAD SWAP2 SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xB4BE83D5 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0x21EF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x2204 DUP6 PUSH1 0x1 PUSH2 0x1F1C JUMP JUMPDEST DUP11 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2212 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2256 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x33CB JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2284 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x22A8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2C07 JUMP JUMPDEST SWAP1 POP PUSH2 0x22BC DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST DUP2 MSTORE PUSH2 0x22C8 DUP6 DUP3 PUSH2 0x1707 JUMP JUMPDEST DUP5 MLOAD DUP7 GT PUSH2 0x22D5 JUMPI PUSH2 0x22E0 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x1FCC JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 0x2307 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 0x2304 JUMPI INVALID JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 0xC45 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 0x231D JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x2335 JUMPI DUP2 PUSH2 0xC45 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x2352 DUP6 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x10B4 AND JUMP JUMPDEST SWAP3 POP PUSH2 0x2365 DUP6 PUSH1 0x24 PUSH4 0xFFFFFFFF PUSH2 0x240C AND JUMP JUMPDEST SWAP2 POP PUSH2 0x2378 DUP6 PUSH1 0x64 PUSH4 0xFFFFFFFF PUSH2 0x2418 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xB88D4FDE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xB88D4FDE SWAP1 PUSH2 0x23D3 SWAP1 ADDRESS SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x3214 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x23ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2401 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC45 DUP4 DUP4 PUSH2 0x2473 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2426 DUP5 DUP5 PUSH2 0x240C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP4 ADD SWAP3 POP DUP1 DUP4 ADD DUP5 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x246D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x330C JUMP JUMPDEST POP POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x24B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x332C JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC45 DUP3 CALLDATALOAD PUSH2 0x34B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC45 DUP3 MLOAD PUSH2 0x34B1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x2530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2543 PUSH2 0x253E DUP3 PUSH2 0x3440 JUMP JUMPDEST PUSH2 0x3419 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6B4 JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x256B DUP9 DUP3 PUSH2 0x2602 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2555 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x2592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x25A0 PUSH2 0x253E DUP3 PUSH2 0x3440 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6B4 JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x25C8 DUP9 DUP3 PUSH2 0x2712 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x25B2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC45 DUP3 MLOAD PUSH2 0x34F9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC45 DUP3 MLOAD PUSH2 0x34F6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC45 DUP3 CALLDATALOAD PUSH2 0x34CA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x2613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2621 PUSH2 0x253E DUP3 PUSH2 0x3461 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x263D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16FE DUP4 DUP3 DUP5 PUSH2 0x3504 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x265A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2664 PUSH1 0x80 PUSH2 0x3419 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2672 DUP5 DUP5 PUSH2 0x25EA JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x2683 DUP5 DUP5 DUP4 ADD PUSH2 0x25EA JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x2697 DUP5 DUP3 DUP6 ADD PUSH2 0x25EA JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x26AB DUP5 DUP3 DUP6 ADD PUSH2 0x25EA JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x26D3 PUSH1 0x60 PUSH2 0x3419 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26E1 DUP5 DUP5 PUSH2 0x2873 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x26F2 DUP5 DUP5 DUP4 ADD PUSH2 0x25EA JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x2706 DUP5 DUP3 DUP6 ADD PUSH2 0x25EA JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2725 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2730 PUSH2 0x180 PUSH2 0x3419 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x273E DUP5 DUP5 PUSH2 0x2507 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x274F DUP5 DUP5 DUP4 ADD PUSH2 0x2507 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x2763 DUP5 DUP3 DUP6 ADD PUSH2 0x2507 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x2777 DUP5 DUP3 DUP6 ADD PUSH2 0x2507 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x278B DUP5 DUP3 DUP6 ADD PUSH2 0x2867 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x279F DUP5 DUP3 DUP6 ADD PUSH2 0x2867 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x27B3 DUP5 DUP3 DUP6 ADD PUSH2 0x2867 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0x27C7 DUP5 DUP3 DUP6 ADD PUSH2 0x2867 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP PUSH2 0x100 PUSH2 0x27DC DUP5 DUP3 DUP6 ADD PUSH2 0x2867 JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH2 0x120 PUSH2 0x27F2 DUP5 DUP3 DUP6 ADD PUSH2 0x2867 JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MSTORE POP PUSH2 0x140 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2814 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2820 DUP5 DUP3 DUP6 ADD PUSH2 0x2602 JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MSTORE POP PUSH2 0x160 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2842 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x284E DUP5 DUP3 DUP6 ADD PUSH2 0x2602 JUMP JUMPDEST PUSH2 0x160 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC45 DUP3 CALLDATALOAD PUSH2 0x34EF JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC45 DUP3 CALLDATALOAD PUSH2 0x34F6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC45 DUP3 MLOAD PUSH2 0x34FE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2891 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x15A6 DUP5 DUP5 PUSH2 0x2507 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x28AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x15A6 DUP5 DUP5 PUSH2 0x2513 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x28D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x28DD DUP8 DUP8 PUSH2 0x2507 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x28EE DUP8 DUP3 DUP9 ADD PUSH2 0x2507 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x28FF DUP8 DUP3 DUP9 ADD PUSH2 0x2867 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x291C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2928 DUP8 DUP3 DUP9 ADD PUSH2 0x2602 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2949 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2955 DUP7 DUP7 PUSH2 0x2507 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2966 DUP7 DUP3 DUP8 ADD PUSH2 0x2867 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2983 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x298F DUP7 DUP3 DUP8 ADD PUSH2 0x2602 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x29B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x29C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x29D5 DUP10 DUP3 DUP11 ADD PUSH2 0x2581 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x29F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x29FE DUP10 DUP3 DUP11 ADD PUSH2 0x251F JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A27 DUP10 DUP3 DUP11 ADD PUSH2 0x2581 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A50 DUP10 DUP3 DUP11 ADD PUSH2 0x251F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x2A61 DUP10 DUP3 DUP11 ADD PUSH2 0x285B JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x2A72 DUP10 DUP3 DUP11 ADD PUSH2 0x2507 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x2A9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2AB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2ABD DUP11 DUP3 DUP12 ADD PUSH2 0x2581 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2ADA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2AE6 DUP11 DUP3 DUP12 ADD PUSH2 0x251F JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2B03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B0F DUP11 DUP3 DUP12 ADD PUSH2 0x2581 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2B2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B38 DUP11 DUP3 DUP12 ADD PUSH2 0x251F JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x2B49 DUP11 DUP3 DUP12 ADD PUSH2 0x2867 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x2B5A DUP11 DUP3 DUP12 ADD PUSH2 0x285B JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x2B6B DUP11 DUP3 DUP12 ADD PUSH2 0x2507 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2B8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2BB0 DUP6 DUP3 DUP7 ADD PUSH2 0x2581 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2BC1 DUP6 DUP3 DUP7 ADD PUSH2 0x2867 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x15A6 DUP5 DUP5 PUSH2 0x25DE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x15A6 DUP5 DUP5 PUSH2 0x25F6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x15A6 DUP5 DUP5 PUSH2 0x2648 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x15A6 DUP5 DUP5 PUSH2 0x26B7 JUMP JUMPDEST PUSH2 0x2C4C DUP2 PUSH2 0x34B1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C5D DUP3 PUSH2 0x34AD JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x2C76 DUP6 PUSH2 0x34A7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2CAD JUMPI DUP4 DUP4 SUB DUP9 MSTORE PUSH2 0x2C91 DUP4 DUP4 MLOAD PUSH2 0x2D74 JUMP JUMPDEST SWAP3 POP PUSH2 0x2C9C DUP3 PUSH2 0x34A7 JUMP JUMPDEST PUSH1 0x20 SWAP9 SWAP1 SWAP9 ADD SWAP8 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x2C79 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CC4 DUP3 PUSH2 0x34AD JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x2CDD DUP6 PUSH2 0x34A7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2CAD JUMPI DUP4 DUP4 SUB DUP9 MSTORE PUSH2 0x2CF8 DUP4 DUP4 MLOAD PUSH2 0x30F1 JUMP JUMPDEST SWAP3 POP PUSH2 0x2D03 DUP3 PUSH2 0x34A7 JUMP JUMPDEST PUSH1 0x20 SWAP9 SWAP1 SWAP9 ADD SWAP8 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x2CE0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D1F DUP3 PUSH2 0x34AD JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH2 0x2D31 DUP4 PUSH2 0x34A7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2D61 JUMPI PUSH2 0x2D47 DUP7 DUP4 MLOAD PUSH2 0x31FD JUMP JUMPDEST PUSH2 0x2D50 DUP3 PUSH2 0x34A7 JUMP JUMPDEST PUSH1 0x20 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x2D34 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2C4C DUP2 PUSH2 0x34CA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D7F DUP3 PUSH2 0x34AD JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x2D93 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x3510 JUMP JUMPDEST PUSH2 0x2D9C DUP2 PUSH2 0x353C JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x23 DUP2 MSTORE PUSH32 0x44454641554C545F46554E4354494F4E5F574554485F434F4E54524143545F4F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x4E4C590000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x11 DUP2 MSTORE PUSH32 0x494E56414C49445F4D53475F56414C5545000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x30 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F4E45535445445F4259544553 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5F4C454E4754485F524551554952454400000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x17 DUP2 MSTORE PUSH32 0x56414C55455F475245415445525F5448414E5F5A45524F000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x26 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x18 DUP2 MSTORE PUSH32 0x4645455F50524F504F5254494F4E5F544F4F5F4C415247450000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP2 MSTORE PUSH32 0x5452414E534645525F4641494C45440000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x16 DUP2 MSTORE PUSH32 0x554E41434345505441424C455F5448524553484F4C4400000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x13 DUP2 MSTORE PUSH32 0x4F4E4C595F434F4E54524143545F4F574E455200000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x26 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x17 DUP2 MSTORE PUSH32 0x554E535550504F525445445F544F4B454E5F50524F5859000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x25 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F345F4C454E4754485F524551 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5549524544000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0x30B8 DUP5 DUP3 PUSH2 0x31FD JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x30CB PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x31FD JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x30DE PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x31FD JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x158B PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x31FD JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x180 DUP5 ADD SWAP1 PUSH2 0x3106 DUP6 DUP3 PUSH2 0x2C43 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x3119 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x2C43 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x312C PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x2C43 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x313F PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x2C43 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x3152 PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x31FD JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x3165 PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x31FD JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x3178 PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0x31FD JUMP JUMPDEST POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x318B PUSH1 0xE0 DUP7 ADD DUP3 PUSH2 0x31FD JUMP JUMPDEST POP PUSH2 0x100 DUP4 ADD MLOAD PUSH2 0x31A0 PUSH2 0x100 DUP7 ADD DUP3 PUSH2 0x31FD JUMP JUMPDEST POP PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x31B5 PUSH2 0x120 DUP7 ADD DUP3 PUSH2 0x31FD JUMP JUMPDEST POP PUSH2 0x140 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x140 DUP7 ADD MSTORE PUSH2 0x31CF DUP3 DUP3 PUSH2 0x2D74 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x160 DUP7 ADD MSTORE PUSH2 0x31EB DUP3 DUP3 PUSH2 0x2D74 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2C4C DUP2 PUSH2 0x34EF JUMP JUMPDEST PUSH2 0x2C4C DUP2 PUSH2 0x34F6 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x10AE DUP3 DUP5 PUSH2 0x2C43 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x3222 DUP3 DUP8 PUSH2 0x2C43 JUMP JUMPDEST PUSH2 0x322F PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2C43 JUMP JUMPDEST PUSH2 0x323C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x31FD JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x324E DUP2 DUP5 PUSH2 0x2D74 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x3266 DUP3 DUP6 PUSH2 0x2C43 JUMP JUMPDEST PUSH2 0xC45 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x31FD JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x3284 DUP2 DUP7 PUSH2 0x2CB9 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x3298 DUP2 DUP6 PUSH2 0x2D14 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x31EB DUP2 DUP5 PUSH2 0x2C52 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x32BD DUP2 DUP7 PUSH2 0x2CB9 JUMP JUMPDEST SWAP1 POP PUSH2 0x32CC PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x31FD JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x31EB DUP2 DUP5 PUSH2 0x2C52 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x10AE DUP3 DUP5 PUSH2 0x2D6B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2DA9 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2DFF JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2E2F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2E85 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2EB5 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2F0B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2F3B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2F6B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2FCB JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x3021 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x3051 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x10AE DUP3 DUP5 PUSH2 0x30A7 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC45 DUP2 DUP5 PUSH2 0x30F1 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x33DC DUP2 DUP7 PUSH2 0x30F1 JUMP JUMPDEST SWAP1 POP PUSH2 0x33EB PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x31FD JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x31EB DUP2 DUP5 PUSH2 0x2D74 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x10AE DUP3 DUP5 PUSH2 0x31F4 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x10AE DUP3 DUP5 PUSH2 0x31FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x352B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3513 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x158B JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP1 JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 PUSH24 0x97C5E4E7170C401C509A807353C0A60AD36B6F14CF1A605D 0xde 0xbb 0xbf SIGNEXTEND PUSH29 0xE3C36C6578706572696D656E74616CF500370000000000000000000000 ",
				"sourceMap": "816:1324:0:-;;;-1:-1:-1;;971:29:0;;1007:464;8:9:-1;5:2;;;30:1;27;20:12;5:2;1007:464:0;;;;;;;;;;;;;;;;;;;;;;;;363:5:41;:18;;371:10;-1:-1:-1;;;;;;363:18:41;;;;;;;-1:-1:-1;1130:30:1;;;;-1:-1:-1;;;;;1130:30:1;;;;;;;;;;1170:11;:37;;;;;;;;;;1217:9;:34;;;;;;;;;;;1261:30;;1130;;1170:37;;1217:34;;1261:30;;1384:14:0;;1261:30:1;;:14;;:30;;;;;:::i;:::-;-1:-1:-1;1301:32:1;;;;:15;;:32;;;;;:::i;:::-;;926:414;;;;;1423:41:0;1445:18;1423:21;;;:41;;;:::i;:::-;1007:464;;;;;;816:1324;;1799:339;1903:20;460:5:41;;-1:-1:-1;;;;;460:5:41;446:10;:19;425:85;;;;;;;;;;;;;;;;;;;;;;1926:8:0;;:41;;;;;-1:-1:-1;;;;;1926:8:0;;;;:22;;:41;;1949:17;;1926:41;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1926:41:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1926:41:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1926:41:0;;;;;;;;;1903:64;-1:-1:-1;;;;;;1981:26:0;;;1977:155;;2023:11;;2057:8;;2023:43;;;;;-1:-1:-1;;;;;2023:11:0;;;;:19;;:43;;2043:12;;2057:8;2023:43;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2023:43:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2023:43:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2023:43:0;;;;;;;;;-1:-1:-1;2080:9:0;;2112:8;;2080:41;;;;;-1:-1:-1;;;;;2080:9:0;;;;:17;;:41;;2098:12;;2112:8;2080:41;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2080:41:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2080:41:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2080:41:0;;;;;;;;;;1977:155;1799:339;;:::o;816:1324::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;816:1324:0;;;-1:-1:-1;816:1324:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;5:122:-1:-;;83:39;114:6;108:13;83:39;;;74:48;68:59;-1:-1;;;68:59;134:116;;209:36;237:6;231:13;209:36;;257:120;;334:38;364:6;358:13;334:38;;385:442;;490:4;478:17;;474:27;-1:-1;464:2;;515:1;512;505:12;464:2;545:6;539:13;567:64;582:48;623:6;582:48;;;567:64;;;558:73;;651:6;644:5;637:21;687:4;679:6;675:17;720:4;713:5;709:16;755:3;746:6;741:3;737:16;734:25;731:2;;;772:1;769;762:12;731:2;782:39;814:6;809:3;804;782:39;;;457:370;;;;;;;;835:263;;950:2;938:9;929:7;925:23;921:32;918:2;;;966:1;963;956:12;918:2;1001:1;1018:64;1074:7;1054:9;1018:64;;;1008:74;912:186;-1:-1;;;;912:186;1105:1138;;;;;;;1322:3;1310:9;1301:7;1297:23;1293:33;1290:2;;;1339:1;1336;1329:12;1290:2;1374:1;1391:64;1447:7;1427:9;1391:64;;;1381:74;;1353:108;1492:2;1510:64;1566:7;1557:6;1546:9;1542:22;1510:64;;;1500:74;;1471:109;1611:2;1629:64;1685:7;1676:6;1665:9;1661:22;1629:64;;;1619:74;;1590:109;1730:2;1748:63;1803:7;1794:6;1783:9;1779:22;1748:63;;;1738:73;;1709:108;1869:3;1858:9;1854:19;1848:26;-1:-1;;;;;1886:6;1883:30;1880:2;;;1926:1;1923;1916:12;1880:2;1946:73;2011:7;2002:6;1991:9;1987:22;1946:73;;;1936:83;;1827:198;2077:3;2066:9;2062:19;2056:26;-1:-1;;;;;2094:6;2091:30;2088:2;;;2134:1;2131;2124:12;2088:2;2154:73;2219:7;2210:6;2199:9;2195:22;2154:73;;;2144:83;;2035:198;1284:959;;;;;;;;;2250:257;;2362:2;2350:9;2341:7;2337:23;2333:32;2330:2;;;2378:1;2375;2368:12;2330:2;2413:1;2430:61;2483:7;2463:9;2430:61;;2514:110;2587:31;2612:5;2587:31;;;2582:3;2575:44;2569:55;;;2631:107;2702:30;2726:5;2702:30;;2746:296;2901:2;2889:15;;2938:66;2933:2;2924:12;;2917:88;3033:2;3024:12;;2882:160;3050:110;3123:31;3148:5;3123:31;;3167:294;3303:2;3288:18;;3317:61;3292:9;3351:6;3317:61;;;3389:62;3447:2;3436:9;3432:18;3423:6;3389:62;;3468:189;3574:2;3559:18;;3588:59;3563:9;3620:6;3588:59;;;3545:112;;;;;3664:387;3845:2;3859:47;;;3830:18;;3920:121;3830:18;3920:121;;4058:256;4120:2;4114:9;4146:17;;;-1:-1;;;;;4206:34;;4242:22;;;4203:62;4200:2;;;4278:1;4275;4268:12;4200:2;4294;4287:22;4098:216;;-1:-1;4098:216;4321:258;;-1:-1;;;;;4456:6;4453:30;4450:2;;;4496:1;4493;4486:12;4450:2;-1:-1;4569:4;4540;4517:17;;;;-1:-1;;4513:33;4559:15;;4387:192;4586:128;-1:-1;;;;;4655:54;;4638:76;4721:151;4800:66;4789:78;;4772:100;5100:92;5173:13;5166:21;;5149:43;5358:268;5423:1;5430:101;5444:6;5441:1;5438:13;5430:101;;;5511:11;;;5505:18;5492:11;;;5485:39;5466:2;5459:10;5430:101;;;5546:6;5543:1;5540:13;5537:2;;;5611:1;5602:6;5597:3;5593:16;5586:27;5537:2;5407:219;;;;;;816:1324:0;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052600436106100cf5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663150b7a02811461012b578063169645f2146101615780631c5b1ec41461018157806320472cf7146101a15780634a00f7d5146101c3578063725cef06146101d85780638da5cb5b146101eb578063b3cd42541461020d578063bc063e1a14610222578063e58e9c1614610237578063f0b9e5ba14610257578063f2afd85a14610277578063f2fde38b14610297578063fb4f9087146102b7575b60025473ffffffffffffffffffffffffffffffffffffffff163314610129576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610120906132ec565b60405180910390fd5b005b34801561013757600080fd5b5061014b6101463660046128bb565b6102cc565b60405161015891906132de565b60405180910390f35b61017461016f366004612999565b61032c565b60405161015891906133ac565b34801561018d57600080fd5b5061017461019c366004612b7a565b6105f8565b3480156101ad57600080fd5b506101b66106be565b60405161015891906133fd565b3480156101cf57600080fd5b5061014b6106c4565b6101746101e6366004612a7f565b6106f9565b3480156101f757600080fd5b50610200610ac7565b6040516101589190613206565b34801561021957600080fd5b506101b6610ae3565b34801561022e57600080fd5b506101b6610ae9565b34801561024357600080fd5b50610174610252366004612b7a565b610aef565b34801561026357600080fd5b5061014b610272366004612934565b610bec565b34801561028357600080fd5b50610129610292366004612be9565b610c4c565b3480156102a357600080fd5b506101296102b236600461287f565b610ec3565b3480156102c357600080fd5b5061014b610f74565b604080517f6f6e455243373231526563656976656428616464726573732c6164647265737381527f2c75696e743235362c62797465732900000000000000000000000000000000006020820152905190819003602f019020949350505050565b6103346124be565b3460008080808411610372576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061331c565b61037d848888610fcf565b9250610389848461109d565b9150600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561041157600080fd5b505af1158015610425573d6000803e3d6000fd5b50505050506104528b600081518110151561043c57fe5b90602001906020020151610140015160106110b4565b60058054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281529394508301828280156104f85780601f106104cd576101008083540402835291602001916104f8565b820191906000526020600020905b8154815290600101906020018083116104db57829003601f168201915b50505050508b600081518110151561050c57fe5b60209081029091010151610160015260035473ffffffffffffffffffffffffffffffffffffffff82811691161415610550576105498b8b84611115565b9450610560565b61055d8b8b8b8b8661122f565b94505b602085015184101561059e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610120906132fc565b602085015182146105db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061335c565b6105ea813387600001516113b7565b505050509695505050505050565b6106006124be565b600080600061060d6124be565b600093505b86518410156106b45761062986866000015161109d565b925061066c878581518110151561063c57fe5b9060200190602002015160a00151888681518110151561065857fe5b906020019060200201516080015185611591565b915061068f878581518110151561067f57fe5b90602001906020020151836115ae565b905061069b8582611707565b84518614156106a9576106b4565b600190930192610612565b5050505092915050565b61251c81565b604080517f4552433230546f6b656e286164647265737329000000000000000000000000008152905190819003601301902081565b6107016124be565b34600080821161073d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061331c565b60008611610777576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061331c565b61079f8a600081518110151561078957fe5b9060200190602002015161014001516000611769565b604080517f4552433230546f6b656e28616464726573732900000000000000000000000000815290519081900360130190209091507fffffffff00000000000000000000000000000000000000000000000000000000808316911614806108815750604080517f455243373231546f6b656e28616464726573732c75696e743235362c6279746581527f7329000000000000000000000000000000000000000000000000000000000000602082015290519081900360220190207fffffffff000000000000000000000000000000000000000000000000000000008281169116145b15156108b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061338c565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561093f57600080fd5b505af1158015610953573d6000803e3d6000fd5b5050604080517f4552433230546f6b656e28616464726573732900000000000000000000000000815290519081900360130190207fffffffff000000000000000000000000000000000000000000000000000000008581169116141592506109cc915050576109c58a8a8a8a8a6117d6565b9250610a5f565b604080517f455243373231546f6b656e28616464726573732c75696e743235362c6279746581527f7329000000000000000000000000000000000000000000000000000000000000602082015290519081900360220190207fffffffff0000000000000000000000000000000000000000000000000000000082811691161415610a5f57610a5c8a8a8a8a611b2d565b92505b6020830151821015610a9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610120906132fc565b610aba610aae83856020015161109d565b84602001518787611e2f565b5050979650505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b61271081565b6103e881565b610af76124be565b6000806000610b046124be565b600093505b86518410156106b457610b2086866000015161109d565b9250610b878785815181101515610b3357fe5b9060200190602002015160a00151610b818987815181101515610b5257fe5b90602001906020020151608001518a88815181101515610b6e57fe5b9060200190602002015160e0015161109d565b85611591565b9150610bb48785815181101515610b9a57fe5b90602001906020020151610baf846001611f1c565b6115ae565b9050610bc88160000151826060015161109d565b8152610bd48582611707565b84518611610be1576106b4565b600190930192610b09565b604080517f6f6e455243373231526563656976656428616464726573732c75696e7432353681527f2c62797465732900000000000000000000000000000000000000000000000000602082015290519081900360270190205b9392505050565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610c9e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061336c565b6001546040517f6070410800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690636070410890610cf49085906004016132de565b602060405180830381600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d46919081019061289d565b905073ffffffffffffffffffffffffffffffffffffffff811615610ebf576002546006546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092169163095ea7b391610dbe91859190600401613258565b602060405180830381600087803b158015610dd857600080fd5b505af1158015610dec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e109190810190612bcb565b506003546006546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092169163095ea7b391610e6b91859190600401613258565b602060405180830381600087803b158015610e8557600080fd5b505af1158015610e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ebd9190810190612bcb565b505b5050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f14576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061336c565b73ffffffffffffffffffffffffffffffffffffffff811615610f7157600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790555b50565b604080517f455243373231546f6b656e28616464726573732c75696e743235362c6279746581527f73290000000000000000000000000000000000000000000000000000000000006020820152905190819003602201902081565b6000808361ffff16118015610ff9575073ffffffffffffffffffffffffffffffffffffffff821615155b15610c45576103e861ffff8416111561103e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061333c565b61104f61ffff841661271086611591565b60405190915073ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f19350505050158015611095573d6000803e3d6000fd5b509392505050565b6000828211156110a957fe5b508082035b92915050565b6000816014018351101515156110f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061337c565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b61111d6124be565b6001546040517f7e1d980800000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff1690637e1d980890611178908890879089906004016132ac565b608060405180830381600087803b15801561119257600080fd5b505af11580156111a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111ca9190810190612c07565b91506111de8260000151836060015161109d565b90506111ee826000015182611f2b565b1515611226576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061335c565b81529392505050565b6112376124be565b60006112416124be565b6112496124be565b6112516124be565b85935061125e8a87611f48565b92506000836060015111156112f25761127c88888560600151611fb2565b91506112958661129088856020015161109d565b611f2b565b15156112cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061335c565b6112db84836020015161109d565b606080840151908701526020808401519087015293505b6001546040517f7e1d980800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690637e1d98089061134c908d9088908e906004016132ac565b608060405180830381600087803b15801561136657600080fd5b505af115801561137a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061139e9190810190612c07565b90506113aa8582611707565b5050505095945050505050565b604080517f7472616e7366657228616464726573732c75696e7432353629000000000000008152905190819003601901812060009173ffffffffffffffffffffffffffffffffffffffff861691906114159086908690602401613258565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931783525181519192909182919080838360005b838110156114b95781810151838201526020016114a1565b50505050905090810190601f1680156114e65780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af192505050801515611535576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061334c565b3d15611552575060003d602014156115525760206000803e506000515b80151561158b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061334c565b50505050565b60006115a66115a085846122eb565b8461230f565b949350505050565b6115b66124be565b6115be6124e7565b6001546040517fc75e0a81000000000000000000000000000000000000000000000000000000008152600091829173ffffffffffffffffffffffffffffffffffffffff9091169063c75e0a81906116199089906004016133ba565b606060405180830381600087803b15801561163357600080fd5b505af1158015611647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061166b9190810190612c25565b805190935060ff1660031461167f576116fe565b6116918660a00151846040015161109d565b915061169d8583612326565b6020850181905260a087015160808801519192506116bd91839190611591565b8452602084015160a087015160c08801516116d9929190611591565b6040850152602084015160a087015160e08801516116f8929190611591565b60608501525b50505092915050565b815181516117159190611f1c565b82526020808301519082015161172b9190611f1c565b6020830152604080830151908201516117449190611f1c565b60408301526060808301519082015161175d9190611f1c565b60609092019190915250565b6000816004018351101515156117ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061339c565b5050602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b6117de6124be565b60006117e86124be565b6117f06124be565b6117f86124be565b61180a8a600081518110151561043c57fe5b60058054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281529397508301828280156118b05780601f10611885576101008083540402835291602001916118b0565b820191906000526020600020905b81548152906001019060200180831161189357829003601f168201915b50505050508a60008151811015156118c457fe5b60209081029091010151610160015260035473ffffffffffffffffffffffffffffffffffffffff858116911614156119a2576119018a8a88611fb2565b805190935086111561193f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061335c565b6119498584611707565b61196561195e86600001518760600151611f1c565b8651611f2b565b151561199d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061335c565b611b1e565b6119ac8a876105f8565b91506000826060015111156119e1576119ca88888460600151611fb2565b602080820151908701526060808201519087015290505b6001546040517fe5fa431b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063e5fa431b90611a3b908d908a908e906004016132ac565b608060405180830381600087803b158015611a5557600080fd5b505af1158015611a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a8d9190810190612c07565b80519093508614611aca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061335c565b611ad48584611707565b611ae685602001518460200151611f2b565b1515611b1e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061335c565b6113aa843385600001516113b7565b611b356124be565b60008060606000611b446124be565b611b4c6124be565b8a51945084604051908082528060200260200182016040528015611b7a578160200160208202803883390190505b509350600092505b84831015611cb657611baf868c85815181101515611b9c57fe5b9060200190602002015160e00151611f1c565b60058054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152939950830182828015611c555780601f10611c2a57610100808354040283529160200191611c55565b820191906000526020600020905b815481529060010190602001808311611c3857829003601f168201915b50505050508b84815181101515611c6857fe5b6020908102909101015161016001528a518b9084908110611c8557fe5b9060200190602002015160a001518484815181101515611ca157fe5b60209081029091010152600190920191611b82565b6000861115611ce157611cca898988611fb2565b606080820151908901526020808201519089015291505b6001546040517f4d0ae54600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690634d0ae54690611d3b908e9088908f90600401613273565b608060405180830381600087803b158015611d5557600080fd5b505af1158015611d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d8d9190810190612c07565b9050611d998782611707565b611dab87602001518260200151611f2b565b1515611de3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061335c565b600092505b84831015611e2157611e168b84815181101515611e0157fe5b9060200190602002015161014001513361233c565b600190920191611de8565b505050505050949350505050565b6000806000861115611f14576002546040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632e1a7d4d90611e9190899060040161340b565b600060405180830381600087803b158015611eab57600080fd5b505af1158015611ebf573d6000803e3d6000fd5b50505050611ece858585610fcf565b9150611eda868361109d565b90506000811115611f1457604051339082156108fc029083906000818181858888f19350505050158015611f12573d6000803e3d6000fd5b505b505050505050565b600082820183811015610c4557fe5b600080611f3d61251c61271086611591565b909210159392505050565b611f506124be565b600080611f5b6124be565b600092505b85518310156116fe57611f7785856020015161109d565b9150611f8a868481518110151561067f57fe5b9050611f968482611707565b8484602001511415611fa7576116fe565b600190920191611f60565b611fba6124be565b6000806000611fc76124be565b600093505b87518410156122e0576004805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156120795780601f1061204e57610100808354040283529160200191612079565b820191906000526020600020905b81548152906001019060200180831161205c57829003601f168201915b5050505050888581518110151561208c57fe5b602090810290910181015161014001919091526005805460408051601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001871615020190941693909304928301859004850281018501909152818152928301828280156121415780601f1061211657610100808354040283529160200191612141565b820191906000526020600020905b81548152906001019060200180831161212457829003601f168201915b5050505050888581518110151561215457fe5b602090810290910101516101600152845161217090879061109d565b92506121be888581518110151561218357fe5b9060200190602002015160a00151610b818a878151811015156121a257fe5b90602001906020020151608001518b88815181101515610b6e57fe5b600154895191935073ffffffffffffffffffffffffffffffffffffffff169063b4be83d5908a90879081106121ef57fe5b90602001906020020151612204856001611f1c565b8a8881518110151561221257fe5b906020019060200201516040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612256939291906133cb565b608060405180830381600087803b15801561227057600080fd5b505af1158015612284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122a89190810190612c07565b90506122bc8160000151826060015161109d565b81526122c88582611707565b845186116122d5576122e0565b600190930192611fcc565b505050509392505050565b6000828202831580612307575082848281151561230457fe5b04145b1515610c4557fe5b600080828481151561231d57fe5b04949350505050565b60008183106123355781610c45565b5090919050565b600080606061235285601063ffffffff6110b416565b925061236585602463ffffffff61240c16565b915061237885606463ffffffff61241816565b6040517fb88d4fde00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff84169063b88d4fde906123d3903090889087908790600401613214565b600060405180830381600087803b1580156123ed57600080fd5b505af1158015612401573d6000803e3d6000fd5b505050505050505050565b6000610c458383612473565b60606000612426848461240c565b905060208301925080830184511015151561246d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061330c565b50500190565b6000816020018351101515156124b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101209061332c565b50016020015190565b608060405190810160405280600081526020016000815260200160008152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b6000610c4582356134b1565b6000610c4582516134b1565b6000601f8201831361253057600080fd5b813561254361253e82613440565b613419565b81815260209384019390925082018360005b838110156106b4578135860161256b8882612602565b8452506020928301929190910190600101612555565b6000601f8201831361259257600080fd5b81356125a061253e82613440565b81815260209384019390925082018360005b838110156106b457813586016125c88882612712565b84525060209283019291909101906001016125b2565b6000610c4582516134f9565b6000610c4582516134f6565b6000610c4582356134ca565b6000601f8201831361261357600080fd5b813561262161253e82613461565b9150808252602083016020830185838301111561263d57600080fd5b6116fe838284613504565b60006080828403121561265a57600080fd5b6126646080613419565b9050600061267284846125ea565b8252506020612683848483016125ea565b6020830152506040612697848285016125ea565b60408301525060606126ab848285016125ea565b60608301525092915050565b6000606082840312156126c957600080fd5b6126d36060613419565b905060006126e18484612873565b82525060206126f2848483016125ea565b6020830152506040612706848285016125ea565b60408301525092915050565b6000610180828403121561272557600080fd5b612730610180613419565b9050600061273e8484612507565b825250602061274f84848301612507565b602083015250604061276384828501612507565b604083015250606061277784828501612507565b606083015250608061278b84828501612867565b60808301525060a061279f84828501612867565b60a08301525060c06127b384828501612867565b60c08301525060e06127c784828501612867565b60e0830152506101006127dc84828501612867565b610100830152506101206127f284828501612867565b6101208301525061014082013567ffffffffffffffff81111561281457600080fd5b61282084828501612602565b6101408301525061016082013567ffffffffffffffff81111561284257600080fd5b61284e84828501612602565b6101608301525092915050565b6000610c4582356134ef565b6000610c4582356134f6565b6000610c4582516134fe565b60006020828403121561289157600080fd5b60006115a68484612507565b6000602082840312156128af57600080fd5b60006115a68484612513565b600080600080608085870312156128d157600080fd5b60006128dd8787612507565b94505060206128ee87828801612507565b93505060406128ff87828801612867565b925050606085013567ffffffffffffffff81111561291c57600080fd5b61292887828801612602565b91505092959194509250565b60008060006060848603121561294957600080fd5b60006129558686612507565b935050602061296686828701612867565b925050604084013567ffffffffffffffff81111561298357600080fd5b61298f86828701612602565b9150509250925092565b60008060008060008060c087890312156129b257600080fd5b863567ffffffffffffffff8111156129c957600080fd5b6129d589828a01612581565b965050602087013567ffffffffffffffff8111156129f257600080fd5b6129fe89828a0161251f565b955050604087013567ffffffffffffffff811115612a1b57600080fd5b612a2789828a01612581565b945050606087013567ffffffffffffffff811115612a4457600080fd5b612a5089828a0161251f565b9350506080612a6189828a0161285b565b92505060a0612a7289828a01612507565b9150509295509295509295565b600080600080600080600060e0888a031215612a9a57600080fd5b873567ffffffffffffffff811115612ab157600080fd5b612abd8a828b01612581565b975050602088013567ffffffffffffffff811115612ada57600080fd5b612ae68a828b0161251f565b965050604088013567ffffffffffffffff811115612b0357600080fd5b612b0f8a828b01612581565b955050606088013567ffffffffffffffff811115612b2c57600080fd5b612b388a828b0161251f565b9450506080612b498a828b01612867565b93505060a0612b5a8a828b0161285b565b92505060c0612b6b8a828b01612507565b91505092959891949750929550565b60008060408385031215612b8d57600080fd5b823567ffffffffffffffff811115612ba457600080fd5b612bb085828601612581565b9250506020612bc185828601612867565b9150509250929050565b600060208284031215612bdd57600080fd5b60006115a684846125de565b600060208284031215612bfb57600080fd5b60006115a684846125f6565b600060808284031215612c1957600080fd5b60006115a68484612648565b600060608284031215612c3757600080fd5b60006115a684846126b7565b612c4c816134b1565b82525050565b6000612c5d826134ad565b80845260208401935083602082028501612c76856134a7565b60005b84811015612cad578383038852612c91838351612d74565b9250612c9c826134a7565b602098909801979150600101612c79565b50909695505050505050565b6000612cc4826134ad565b80845260208401935083602082028501612cdd856134a7565b60005b84811015612cad578383038852612cf88383516130f1565b9250612d03826134a7565b602098909801979150600101612ce0565b6000612d1f826134ad565b808452602084019350612d31836134a7565b60005b82811015612d6157612d478683516131fd565b612d50826134a7565b602096909601959150600101612d34565b5093949350505050565b612c4c816134ca565b6000612d7f826134ad565b808452612d93816020860160208601613510565b612d9c8161353c565b9093016020019392505050565b602381527f44454641554c545f46554e4354494f4e5f574554485f434f4e54524143545f4f60208201527f4e4c590000000000000000000000000000000000000000000000000000000000604082015260600190565b601181527f494e56414c49445f4d53475f56414c5545000000000000000000000000000000602082015260400190565b603081527f475245415445525f4f525f455155414c5f544f5f4e45535445445f425954455360208201527f5f4c454e4754485f524551554952454400000000000000000000000000000000604082015260600190565b601781527f56414c55455f475245415445525f5448414e5f5a45524f000000000000000000602082015260400190565b602681527f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524560208201527f5155495245440000000000000000000000000000000000000000000000000000604082015260600190565b601881527f4645455f50524f504f5254494f4e5f544f4f5f4c415247450000000000000000602082015260400190565b600f81527f5452414e534645525f4641494c45440000000000000000000000000000000000602082015260400190565b601681527f554e41434345505441424c455f5448524553484f4c4400000000000000000000602082015260400190565b601381527f4f4e4c595f434f4e54524143545f4f574e455200000000000000000000000000602082015260400190565b602681527f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524560208201527f5155495245440000000000000000000000000000000000000000000000000000604082015260600190565b601781527f554e535550504f525445445f544f4b454e5f50524f5859000000000000000000602082015260400190565b602581527f475245415445525f4f525f455155414c5f544f5f345f4c454e4754485f52455160208201527f5549524544000000000000000000000000000000000000000000000000000000604082015260600190565b805160808301906130b884826131fd565b5060208201516130cb60208501826131fd565b5060408201516130de60408501826131fd565b50606082015161158b60608501826131fd565b80516000906101808401906131068582612c43565b5060208301516131196020860182612c43565b50604083015161312c6040860182612c43565b50606083015161313f6060860182612c43565b50608083015161315260808601826131fd565b5060a083015161316560a08601826131fd565b5060c083015161317860c08601826131fd565b5060e083015161318b60e08601826131fd565b506101008301516131a06101008601826131fd565b506101208301516131b56101208601826131fd565b506101408301518482036101408601526131cf8282612d74565b9150506101608301518482036101608601526131eb8282612d74565b95945050505050565b612c4c816134ef565b612c4c816134f6565b602081016110ae8284612c43565b608081016132228287612c43565b61322f6020830186612c43565b61323c60408301856131fd565b818103606083015261324e8184612d74565b9695505050505050565b604081016132668285612c43565b610c4560208301846131fd565b606080825281016132848186612cb9565b905081810360208301526132988185612d14565b905081810360408301526131eb8184612c52565b606080825281016132bd8186612cb9565b90506132cc60208301856131fd565b81810360408301526131eb8184612c52565b602081016110ae8284612d6b565b602080825281016110ae81612da9565b602080825281016110ae81612dff565b602080825281016110ae81612e2f565b602080825281016110ae81612e85565b602080825281016110ae81612eb5565b602080825281016110ae81612f0b565b602080825281016110ae81612f3b565b602080825281016110ae81612f6b565b602080825281016110ae81612f9b565b602080825281016110ae81612fcb565b602080825281016110ae81613021565b602080825281016110ae81613051565b608081016110ae82846130a7565b60208082528101610c4581846130f1565b606080825281016133dc81866130f1565b90506133eb60208301856131fd565b81810360408301526131eb8184612d74565b602081016110ae82846131f4565b602081016110ae82846131fd565b60405181810167ffffffffffffffff8111828210171561343857600080fd5b604052919050565b600067ffffffffffffffff82111561345757600080fd5b5060209081020190565b600067ffffffffffffffff82111561347857600080fd5b506020601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b60200190565b5190565b73ffffffffffffffffffffffffffffffffffffffff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b61ffff1690565b90565b151590565b60ff1690565b82818337506000910152565b60005b8381101561352b578181015183820152602001613513565b8381111561158b5750506000910152565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016905600a265627a7a723058207797c5e4e7170c401c509a807353c0a60ad36b6f14cf1a605ddebbbf0b7ce3c36c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x150B7A02 DUP2 EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0x169645F2 EQ PUSH2 0x161 JUMPI DUP1 PUSH4 0x1C5B1EC4 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x20472CF7 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x4A00F7D5 EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x725CEF06 EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0xB3CD4254 EQ PUSH2 0x20D JUMPI DUP1 PUSH4 0xBC063E1A EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0xE58E9C16 EQ PUSH2 0x237 JUMPI DUP1 PUSH4 0xF0B9E5BA EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xF2AFD85A EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0xFB4F9087 EQ PUSH2 0x2B7 JUMPI JUMPDEST PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x129 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x32EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x137 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14B PUSH2 0x146 CALLDATASIZE PUSH1 0x4 PUSH2 0x28BB JUMP JUMPDEST PUSH2 0x2CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x158 SWAP2 SWAP1 PUSH2 0x32DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x174 PUSH2 0x16F CALLDATASIZE PUSH1 0x4 PUSH2 0x2999 JUMP JUMPDEST PUSH2 0x32C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x158 SWAP2 SWAP1 PUSH2 0x33AC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x174 PUSH2 0x19C CALLDATASIZE PUSH1 0x4 PUSH2 0x2B7A JUMP JUMPDEST PUSH2 0x5F8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B6 PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x158 SWAP2 SWAP1 PUSH2 0x33FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14B PUSH2 0x6C4 JUMP JUMPDEST PUSH2 0x174 PUSH2 0x1E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A7F JUMP JUMPDEST PUSH2 0x6F9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x200 PUSH2 0xAC7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x158 SWAP2 SWAP1 PUSH2 0x3206 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B6 PUSH2 0xAE3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B6 PUSH2 0xAE9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x243 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x174 PUSH2 0x252 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B7A JUMP JUMPDEST PUSH2 0xAEF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14B PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0x2934 JUMP JUMPDEST PUSH2 0xBEC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x283 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x129 PUSH2 0x292 CALLDATASIZE PUSH1 0x4 PUSH2 0x2BE9 JUMP JUMPDEST PUSH2 0xC4C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x129 PUSH2 0x2B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x287F JUMP JUMPDEST PUSH2 0xEC3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14B PUSH2 0xF74 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x6F6E455243373231526563656976656428616464726573732C61646472657373 DUP2 MSTORE PUSH32 0x2C75696E743235362C6279746573290000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x2F ADD SWAP1 KECCAK256 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x334 PUSH2 0x24BE JUMP JUMPDEST CALLVALUE PUSH1 0x0 DUP1 DUP1 DUP1 DUP5 GT PUSH2 0x372 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x331C JUMP JUMPDEST PUSH2 0x37D DUP5 DUP9 DUP9 PUSH2 0xFCF JUMP JUMPDEST SWAP3 POP PUSH2 0x389 DUP5 DUP5 PUSH2 0x109D JUMP JUMPDEST SWAP2 POP PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x425 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x452 DUP12 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x43C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD PUSH1 0x10 PUSH2 0x10B4 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP5 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x4F8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4CD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4F8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4DB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP12 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x50C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MSTORE PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x550 JUMPI PUSH2 0x549 DUP12 DUP12 DUP5 PUSH2 0x1115 JUMP JUMPDEST SWAP5 POP PUSH2 0x560 JUMP JUMPDEST PUSH2 0x55D DUP12 DUP12 DUP12 DUP12 DUP7 PUSH2 0x122F JUMP JUMPDEST SWAP5 POP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD DUP5 LT ISZERO PUSH2 0x59E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x32FC JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD DUP3 EQ PUSH2 0x5DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x335C JUMP JUMPDEST PUSH2 0x5EA DUP2 CALLER DUP8 PUSH1 0x0 ADD MLOAD PUSH2 0x13B7 JUMP JUMPDEST POP POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x600 PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x60D PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP7 MLOAD DUP5 LT ISZERO PUSH2 0x6B4 JUMPI PUSH2 0x629 DUP7 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST SWAP3 POP PUSH2 0x66C DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x63C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP9 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x658 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0x1591 JUMP JUMPDEST SWAP2 POP PUSH2 0x68F DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x67F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 PUSH2 0x15AE JUMP JUMPDEST SWAP1 POP PUSH2 0x69B DUP6 DUP3 PUSH2 0x1707 JUMP JUMPDEST DUP5 MLOAD DUP7 EQ ISZERO PUSH2 0x6A9 JUMPI PUSH2 0x6B4 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x612 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x251C DUP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x4552433230546F6B656E28616464726573732900000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x13 ADD SWAP1 KECCAK256 DUP2 JUMP JUMPDEST PUSH2 0x701 PUSH2 0x24BE JUMP JUMPDEST CALLVALUE PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x73D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x331C JUMP JUMPDEST PUSH1 0x0 DUP7 GT PUSH2 0x777 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x331C JUMP JUMPDEST PUSH2 0x79F DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x789 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD PUSH1 0x0 PUSH2 0x1769 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x4552433230546F6B656E28616464726573732900000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x13 ADD SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP1 DUP4 AND SWAP2 AND EQ DUP1 PUSH2 0x881 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x455243373231546F6B656E28616464726573732C75696E743235362C62797465 DUP2 MSTORE PUSH32 0x7329000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x22 ADD SWAP1 KECCAK256 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 0x8B9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x338C JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x93F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x953 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x4552433230546F6B656E28616464726573732900000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x13 ADD SWAP1 KECCAK256 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP6 DUP2 AND SWAP2 AND EQ ISZERO SWAP3 POP PUSH2 0x9CC SWAP2 POP POP JUMPI PUSH2 0x9C5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x17D6 JUMP JUMPDEST SWAP3 POP PUSH2 0xA5F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x455243373231546F6B656E28616464726573732C75696E743235362C62797465 DUP2 MSTORE PUSH32 0x7329000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x22 ADD SWAP1 KECCAK256 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0xA5F JUMPI PUSH2 0xA5C DUP11 DUP11 DUP11 DUP11 PUSH2 0x1B2D JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD DUP3 LT ISZERO PUSH2 0xA9D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x32FC JUMP JUMPDEST PUSH2 0xABA PUSH2 0xAAE DUP4 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD DUP8 DUP8 PUSH2 0x1E2F JUMP JUMPDEST POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x2710 DUP2 JUMP JUMPDEST PUSH2 0x3E8 DUP2 JUMP JUMPDEST PUSH2 0xAF7 PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xB04 PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP7 MLOAD DUP5 LT ISZERO PUSH2 0x6B4 JUMPI PUSH2 0xB20 DUP7 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST SWAP3 POP PUSH2 0xB87 DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB33 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH2 0xB81 DUP10 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB52 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP11 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB6E JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST DUP6 PUSH2 0x1591 JUMP JUMPDEST SWAP2 POP PUSH2 0xBB4 DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB9A JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0xBAF DUP5 PUSH1 0x1 PUSH2 0x1F1C JUMP JUMPDEST PUSH2 0x15AE JUMP JUMPDEST SWAP1 POP PUSH2 0xBC8 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST DUP2 MSTORE PUSH2 0xBD4 DUP6 DUP3 PUSH2 0x1707 JUMP JUMPDEST DUP5 MLOAD DUP7 GT PUSH2 0xBE1 JUMPI PUSH2 0x6B4 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0xB09 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x6F6E455243373231526563656976656428616464726573732C75696E74323536 DUP2 MSTORE PUSH32 0x2C62797465732900000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x27 ADD SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xC9E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x336C JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x6070410800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH2 0xCF4 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x32DE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD22 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xD46 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x289D JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xEBF JUMPI PUSH1 0x2 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 PUSH4 0x95EA7B3 SWAP2 PUSH2 0xDBE SWAP2 DUP6 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x3258 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDEC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xE10 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2BCB JUMP JUMPDEST POP PUSH1 0x3 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 PUSH4 0x95EA7B3 SWAP2 PUSH2 0xE6B SWAP2 DUP6 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x3258 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE99 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xEBD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2BCB JUMP JUMPDEST POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xF14 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x336C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xF71 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x455243373231546F6B656E28616464726573732C75696E743235362C62797465 DUP2 MSTORE PUSH32 0x7329000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x22 ADD SWAP1 KECCAK256 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xFFFF AND GT DUP1 ISZERO PUSH2 0xFF9 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xC45 JUMPI PUSH2 0x3E8 PUSH2 0xFFFF DUP5 AND GT ISZERO PUSH2 0x103E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x333C JUMP JUMPDEST PUSH2 0x104F PUSH2 0xFFFF DUP5 AND PUSH2 0x2710 DUP7 PUSH2 0x1591 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1095 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x10A9 JUMPI INVALID JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x10F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x337C JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x111D PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7E1D980800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x7E1D9808 SWAP1 PUSH2 0x1178 SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x32AC JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x11A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x11CA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2C07 JUMP JUMPDEST SWAP2 POP PUSH2 0x11DE DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST SWAP1 POP PUSH2 0x11EE DUP3 PUSH1 0x0 ADD MLOAD DUP3 PUSH2 0x1F2B JUMP JUMPDEST ISZERO ISZERO PUSH2 0x1226 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x335C JUMP JUMPDEST DUP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1237 PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1241 PUSH2 0x24BE JUMP JUMPDEST PUSH2 0x1249 PUSH2 0x24BE JUMP JUMPDEST PUSH2 0x1251 PUSH2 0x24BE JUMP JUMPDEST DUP6 SWAP4 POP PUSH2 0x125E DUP11 DUP8 PUSH2 0x1F48 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 DUP4 PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x12F2 JUMPI PUSH2 0x127C DUP9 DUP9 DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x1FB2 JUMP JUMPDEST SWAP2 POP PUSH2 0x1295 DUP7 PUSH2 0x1290 DUP9 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST PUSH2 0x1F2B JUMP JUMPDEST ISZERO ISZERO PUSH2 0x12CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x335C JUMP JUMPDEST PUSH2 0x12DB DUP5 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST PUSH1 0x60 DUP1 DUP5 ADD MLOAD SWAP1 DUP8 ADD MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD SWAP1 DUP8 ADD MSTORE SWAP4 POP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7E1D980800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x7E1D9808 SWAP1 PUSH2 0x134C SWAP1 DUP14 SWAP1 DUP9 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x32AC JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1366 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x137A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x139E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2C07 JUMP JUMPDEST SWAP1 POP PUSH2 0x13AA DUP6 DUP3 PUSH2 0x1707 JUMP JUMPDEST POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x7472616E7366657228616464726573732C75696E743235362900000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x19 ADD DUP2 KECCAK256 PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP2 SWAP1 PUSH2 0x1415 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x3258 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR DUP4 MSTORE MLOAD DUP2 MLOAD SWAP2 SWAP3 SWAP1 SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x14B9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x14A1 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x14E6 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP3 POP POP POP DUP1 ISZERO ISZERO PUSH2 0x1535 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x334C JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x1552 JUMPI POP PUSH1 0x0 RETURNDATASIZE PUSH1 0x20 EQ ISZERO PUSH2 0x1552 JUMPI PUSH1 0x20 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD JUMPDEST DUP1 ISZERO ISZERO PUSH2 0x158B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x334C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15A6 PUSH2 0x15A0 DUP6 DUP5 PUSH2 0x22EB JUMP JUMPDEST DUP5 PUSH2 0x230F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x15B6 PUSH2 0x24BE JUMP JUMPDEST PUSH2 0x15BE PUSH2 0x24E7 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0xC75E0A8100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xC75E0A81 SWAP1 PUSH2 0x1619 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x33BA JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1633 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1647 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x166B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2C25 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP4 POP PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x167F JUMPI PUSH2 0x16FE JUMP JUMPDEST PUSH2 0x1691 DUP7 PUSH1 0xA0 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST SWAP2 POP PUSH2 0x169D DUP6 DUP4 PUSH2 0x2326 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP8 ADD MLOAD PUSH1 0x80 DUP9 ADD MLOAD SWAP2 SWAP3 POP PUSH2 0x16BD SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x1591 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0xA0 DUP8 ADD MLOAD PUSH1 0xC0 DUP9 ADD MLOAD PUSH2 0x16D9 SWAP3 SWAP2 SWAP1 PUSH2 0x1591 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0xA0 DUP8 ADD MLOAD PUSH1 0xE0 DUP9 ADD MLOAD PUSH2 0x16F8 SWAP3 SWAP2 SWAP1 PUSH2 0x1591 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD PUSH2 0x1715 SWAP2 SWAP1 PUSH2 0x1F1C JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x172B SWAP2 SWAP1 PUSH2 0x1F1C JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x1744 SWAP2 SWAP1 PUSH2 0x1F1C JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x175D SWAP2 SWAP1 PUSH2 0x1F1C JUMP JUMPDEST PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x17AB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x339C JUMP JUMPDEST POP POP PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH2 0x17DE PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17E8 PUSH2 0x24BE JUMP JUMPDEST PUSH2 0x17F0 PUSH2 0x24BE JUMP JUMPDEST PUSH2 0x17F8 PUSH2 0x24BE JUMP JUMPDEST PUSH2 0x180A DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x43C JUMPI INVALID JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP8 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x18B0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1885 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x18B0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1893 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x18C4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MSTORE PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x19A2 JUMPI PUSH2 0x1901 DUP11 DUP11 DUP9 PUSH2 0x1FB2 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP4 POP DUP7 GT ISZERO PUSH2 0x193F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x335C JUMP JUMPDEST PUSH2 0x1949 DUP6 DUP5 PUSH2 0x1707 JUMP JUMPDEST PUSH2 0x1965 PUSH2 0x195E DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD PUSH2 0x1F1C JUMP JUMPDEST DUP7 MLOAD PUSH2 0x1F2B JUMP JUMPDEST ISZERO ISZERO PUSH2 0x199D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x335C JUMP JUMPDEST PUSH2 0x1B1E JUMP JUMPDEST PUSH2 0x19AC DUP11 DUP8 PUSH2 0x5F8 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x19E1 JUMPI PUSH2 0x19CA DUP9 DUP9 DUP5 PUSH1 0x60 ADD MLOAD PUSH2 0x1FB2 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP8 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MLOAD SWAP1 DUP8 ADD MSTORE SWAP1 POP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0xE5FA431B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xE5FA431B SWAP1 PUSH2 0x1A3B SWAP1 DUP14 SWAP1 DUP11 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x32AC JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1A8D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2C07 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP4 POP DUP7 EQ PUSH2 0x1ACA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x335C JUMP JUMPDEST PUSH2 0x1AD4 DUP6 DUP5 PUSH2 0x1707 JUMP JUMPDEST PUSH2 0x1AE6 DUP6 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x1F2B JUMP JUMPDEST ISZERO ISZERO PUSH2 0x1B1E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x335C JUMP JUMPDEST PUSH2 0x13AA DUP5 CALLER DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x13B7 JUMP JUMPDEST PUSH2 0x1B35 PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH1 0x0 PUSH2 0x1B44 PUSH2 0x24BE JUMP JUMPDEST PUSH2 0x1B4C PUSH2 0x24BE JUMP JUMPDEST DUP11 MLOAD SWAP5 POP DUP5 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1B7A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH2 0x1CB6 JUMPI PUSH2 0x1BAF DUP7 DUP13 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1B9C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH2 0x1F1C JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP10 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1C55 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1C2A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1C55 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1C38 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP12 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1C68 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MSTORE DUP11 MLOAD DUP12 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x1C85 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP5 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1CA1 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x1B82 JUMP JUMPDEST PUSH1 0x0 DUP7 GT ISZERO PUSH2 0x1CE1 JUMPI PUSH2 0x1CCA DUP10 DUP10 DUP9 PUSH2 0x1FB2 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 ADD MLOAD SWAP1 DUP10 ADD MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP10 ADD MSTORE SWAP2 POP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x4D0AE54600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x4D0AE546 SWAP1 PUSH2 0x1D3B SWAP1 DUP15 SWAP1 DUP9 SWAP1 DUP16 SWAP1 PUSH1 0x4 ADD PUSH2 0x3273 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1D69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1D8D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2C07 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D99 DUP8 DUP3 PUSH2 0x1707 JUMP JUMPDEST PUSH2 0x1DAB DUP8 PUSH1 0x20 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x1F2B JUMP JUMPDEST ISZERO ISZERO PUSH2 0x1DE3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x335C JUMP JUMPDEST PUSH1 0x0 SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH2 0x1E21 JUMPI PUSH2 0x1E16 DUP12 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1E01 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD CALLER PUSH2 0x233C JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x1DE8 JUMP JUMPDEST POP POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP7 GT ISZERO PUSH2 0x1F14 JUMPI PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x1E91 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x340B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1EAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1EBF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1ECE DUP6 DUP6 DUP6 PUSH2 0xFCF JUMP JUMPDEST SWAP2 POP PUSH2 0x1EDA DUP7 DUP4 PUSH2 0x109D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x1F14 JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1F12 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xC45 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F3D PUSH2 0x251C PUSH2 0x2710 DUP7 PUSH2 0x1591 JUMP JUMPDEST SWAP1 SWAP3 LT ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1F50 PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F5B PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 SWAP3 POP JUMPDEST DUP6 MLOAD DUP4 LT ISZERO PUSH2 0x16FE JUMPI PUSH2 0x1F77 DUP6 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST SWAP2 POP PUSH2 0x1F8A DUP7 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x67F JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x1F96 DUP5 DUP3 PUSH2 0x1707 JUMP JUMPDEST DUP5 DUP5 PUSH1 0x20 ADD MLOAD EQ ISZERO PUSH2 0x1FA7 JUMPI PUSH2 0x16FE JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x1F60 JUMP JUMPDEST PUSH2 0x1FBA PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1FC7 PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP8 MLOAD DUP5 LT ISZERO PUSH2 0x22E0 JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x2 PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x100 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x2079 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x204E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2079 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x205C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP9 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x208C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH2 0x140 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x5 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP8 AND ISZERO MUL ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV SWAP3 DUP4 ADD DUP6 SWAP1 DIV DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP2 MSTORE DUP2 DUP2 MSTORE SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x2141 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2116 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2141 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2124 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP9 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2154 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MSTORE DUP5 MLOAD PUSH2 0x2170 SWAP1 DUP8 SWAP1 PUSH2 0x109D JUMP JUMPDEST SWAP3 POP PUSH2 0x21BE DUP9 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2183 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH2 0xB81 DUP11 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x21A2 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP12 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB6E JUMPI INVALID JUMPDEST PUSH1 0x1 SLOAD DUP10 MLOAD SWAP2 SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xB4BE83D5 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0x21EF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x2204 DUP6 PUSH1 0x1 PUSH2 0x1F1C JUMP JUMPDEST DUP11 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2212 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2256 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x33CB JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2284 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x22A8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2C07 JUMP JUMPDEST SWAP1 POP PUSH2 0x22BC DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD PUSH2 0x109D JUMP JUMPDEST DUP2 MSTORE PUSH2 0x22C8 DUP6 DUP3 PUSH2 0x1707 JUMP JUMPDEST DUP5 MLOAD DUP7 GT PUSH2 0x22D5 JUMPI PUSH2 0x22E0 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x1FCC JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 0x2307 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 0x2304 JUMPI INVALID JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 0xC45 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 0x231D JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x2335 JUMPI DUP2 PUSH2 0xC45 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x2352 DUP6 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x10B4 AND JUMP JUMPDEST SWAP3 POP PUSH2 0x2365 DUP6 PUSH1 0x24 PUSH4 0xFFFFFFFF PUSH2 0x240C AND JUMP JUMPDEST SWAP2 POP PUSH2 0x2378 DUP6 PUSH1 0x64 PUSH4 0xFFFFFFFF PUSH2 0x2418 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xB88D4FDE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xB88D4FDE SWAP1 PUSH2 0x23D3 SWAP1 ADDRESS SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x3214 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x23ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2401 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC45 DUP4 DUP4 PUSH2 0x2473 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2426 DUP5 DUP5 PUSH2 0x240C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP4 ADD SWAP3 POP DUP1 DUP4 ADD DUP5 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x246D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x330C JUMP JUMPDEST POP POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x24B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP1 PUSH2 0x332C JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC45 DUP3 CALLDATALOAD PUSH2 0x34B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC45 DUP3 MLOAD PUSH2 0x34B1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x2530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2543 PUSH2 0x253E DUP3 PUSH2 0x3440 JUMP JUMPDEST PUSH2 0x3419 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6B4 JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x256B DUP9 DUP3 PUSH2 0x2602 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2555 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x2592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x25A0 PUSH2 0x253E DUP3 PUSH2 0x3440 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6B4 JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x25C8 DUP9 DUP3 PUSH2 0x2712 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x25B2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC45 DUP3 MLOAD PUSH2 0x34F9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC45 DUP3 MLOAD PUSH2 0x34F6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC45 DUP3 CALLDATALOAD PUSH2 0x34CA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x2613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2621 PUSH2 0x253E DUP3 PUSH2 0x3461 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x263D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16FE DUP4 DUP3 DUP5 PUSH2 0x3504 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x265A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2664 PUSH1 0x80 PUSH2 0x3419 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2672 DUP5 DUP5 PUSH2 0x25EA JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x2683 DUP5 DUP5 DUP4 ADD PUSH2 0x25EA JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x2697 DUP5 DUP3 DUP6 ADD PUSH2 0x25EA JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x26AB DUP5 DUP3 DUP6 ADD PUSH2 0x25EA JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x26D3 PUSH1 0x60 PUSH2 0x3419 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26E1 DUP5 DUP5 PUSH2 0x2873 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x26F2 DUP5 DUP5 DUP4 ADD PUSH2 0x25EA JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x2706 DUP5 DUP3 DUP6 ADD PUSH2 0x25EA JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2725 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2730 PUSH2 0x180 PUSH2 0x3419 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x273E DUP5 DUP5 PUSH2 0x2507 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x274F DUP5 DUP5 DUP4 ADD PUSH2 0x2507 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x2763 DUP5 DUP3 DUP6 ADD PUSH2 0x2507 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x2777 DUP5 DUP3 DUP6 ADD PUSH2 0x2507 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x278B DUP5 DUP3 DUP6 ADD PUSH2 0x2867 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x279F DUP5 DUP3 DUP6 ADD PUSH2 0x2867 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x27B3 DUP5 DUP3 DUP6 ADD PUSH2 0x2867 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0x27C7 DUP5 DUP3 DUP6 ADD PUSH2 0x2867 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP PUSH2 0x100 PUSH2 0x27DC DUP5 DUP3 DUP6 ADD PUSH2 0x2867 JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH2 0x120 PUSH2 0x27F2 DUP5 DUP3 DUP6 ADD PUSH2 0x2867 JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MSTORE POP PUSH2 0x140 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2814 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2820 DUP5 DUP3 DUP6 ADD PUSH2 0x2602 JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MSTORE POP PUSH2 0x160 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2842 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x284E DUP5 DUP3 DUP6 ADD PUSH2 0x2602 JUMP JUMPDEST PUSH2 0x160 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC45 DUP3 CALLDATALOAD PUSH2 0x34EF JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC45 DUP3 CALLDATALOAD PUSH2 0x34F6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC45 DUP3 MLOAD PUSH2 0x34FE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2891 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x15A6 DUP5 DUP5 PUSH2 0x2507 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x28AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x15A6 DUP5 DUP5 PUSH2 0x2513 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x28D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x28DD DUP8 DUP8 PUSH2 0x2507 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x28EE DUP8 DUP3 DUP9 ADD PUSH2 0x2507 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x28FF DUP8 DUP3 DUP9 ADD PUSH2 0x2867 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x291C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2928 DUP8 DUP3 DUP9 ADD PUSH2 0x2602 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2949 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2955 DUP7 DUP7 PUSH2 0x2507 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2966 DUP7 DUP3 DUP8 ADD PUSH2 0x2867 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2983 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x298F DUP7 DUP3 DUP8 ADD PUSH2 0x2602 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x29B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x29C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x29D5 DUP10 DUP3 DUP11 ADD PUSH2 0x2581 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x29F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x29FE DUP10 DUP3 DUP11 ADD PUSH2 0x251F JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A27 DUP10 DUP3 DUP11 ADD PUSH2 0x2581 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A50 DUP10 DUP3 DUP11 ADD PUSH2 0x251F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x2A61 DUP10 DUP3 DUP11 ADD PUSH2 0x285B JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x2A72 DUP10 DUP3 DUP11 ADD PUSH2 0x2507 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x2A9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2AB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2ABD DUP11 DUP3 DUP12 ADD PUSH2 0x2581 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2ADA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2AE6 DUP11 DUP3 DUP12 ADD PUSH2 0x251F JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2B03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B0F DUP11 DUP3 DUP12 ADD PUSH2 0x2581 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2B2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B38 DUP11 DUP3 DUP12 ADD PUSH2 0x251F JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x2B49 DUP11 DUP3 DUP12 ADD PUSH2 0x2867 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x2B5A DUP11 DUP3 DUP12 ADD PUSH2 0x285B JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x2B6B DUP11 DUP3 DUP12 ADD PUSH2 0x2507 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2B8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2BB0 DUP6 DUP3 DUP7 ADD PUSH2 0x2581 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2BC1 DUP6 DUP3 DUP7 ADD PUSH2 0x2867 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x15A6 DUP5 DUP5 PUSH2 0x25DE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x15A6 DUP5 DUP5 PUSH2 0x25F6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x15A6 DUP5 DUP5 PUSH2 0x2648 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x15A6 DUP5 DUP5 PUSH2 0x26B7 JUMP JUMPDEST PUSH2 0x2C4C DUP2 PUSH2 0x34B1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C5D DUP3 PUSH2 0x34AD JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x2C76 DUP6 PUSH2 0x34A7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2CAD JUMPI DUP4 DUP4 SUB DUP9 MSTORE PUSH2 0x2C91 DUP4 DUP4 MLOAD PUSH2 0x2D74 JUMP JUMPDEST SWAP3 POP PUSH2 0x2C9C DUP3 PUSH2 0x34A7 JUMP JUMPDEST PUSH1 0x20 SWAP9 SWAP1 SWAP9 ADD SWAP8 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x2C79 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CC4 DUP3 PUSH2 0x34AD JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x2CDD DUP6 PUSH2 0x34A7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2CAD JUMPI DUP4 DUP4 SUB DUP9 MSTORE PUSH2 0x2CF8 DUP4 DUP4 MLOAD PUSH2 0x30F1 JUMP JUMPDEST SWAP3 POP PUSH2 0x2D03 DUP3 PUSH2 0x34A7 JUMP JUMPDEST PUSH1 0x20 SWAP9 SWAP1 SWAP9 ADD SWAP8 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x2CE0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D1F DUP3 PUSH2 0x34AD JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH2 0x2D31 DUP4 PUSH2 0x34A7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2D61 JUMPI PUSH2 0x2D47 DUP7 DUP4 MLOAD PUSH2 0x31FD JUMP JUMPDEST PUSH2 0x2D50 DUP3 PUSH2 0x34A7 JUMP JUMPDEST PUSH1 0x20 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x2D34 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2C4C DUP2 PUSH2 0x34CA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D7F DUP3 PUSH2 0x34AD JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x2D93 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x3510 JUMP JUMPDEST PUSH2 0x2D9C DUP2 PUSH2 0x353C JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x23 DUP2 MSTORE PUSH32 0x44454641554C545F46554E4354494F4E5F574554485F434F4E54524143545F4F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x4E4C590000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x11 DUP2 MSTORE PUSH32 0x494E56414C49445F4D53475F56414C5545000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x30 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F4E45535445445F4259544553 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5F4C454E4754485F524551554952454400000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x17 DUP2 MSTORE PUSH32 0x56414C55455F475245415445525F5448414E5F5A45524F000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x26 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x18 DUP2 MSTORE PUSH32 0x4645455F50524F504F5254494F4E5F544F4F5F4C415247450000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP2 MSTORE PUSH32 0x5452414E534645525F4641494C45440000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x16 DUP2 MSTORE PUSH32 0x554E41434345505441424C455F5448524553484F4C4400000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x13 DUP2 MSTORE PUSH32 0x4F4E4C595F434F4E54524143545F4F574E455200000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x26 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x17 DUP2 MSTORE PUSH32 0x554E535550504F525445445F544F4B454E5F50524F5859000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x25 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F345F4C454E4754485F524551 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5549524544000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0x30B8 DUP5 DUP3 PUSH2 0x31FD JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x30CB PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x31FD JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x30DE PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x31FD JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x158B PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x31FD JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x180 DUP5 ADD SWAP1 PUSH2 0x3106 DUP6 DUP3 PUSH2 0x2C43 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x3119 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x2C43 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x312C PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x2C43 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x313F PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x2C43 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x3152 PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x31FD JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x3165 PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x31FD JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x3178 PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0x31FD JUMP JUMPDEST POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x318B PUSH1 0xE0 DUP7 ADD DUP3 PUSH2 0x31FD JUMP JUMPDEST POP PUSH2 0x100 DUP4 ADD MLOAD PUSH2 0x31A0 PUSH2 0x100 DUP7 ADD DUP3 PUSH2 0x31FD JUMP JUMPDEST POP PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x31B5 PUSH2 0x120 DUP7 ADD DUP3 PUSH2 0x31FD JUMP JUMPDEST POP PUSH2 0x140 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x140 DUP7 ADD MSTORE PUSH2 0x31CF DUP3 DUP3 PUSH2 0x2D74 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x160 DUP7 ADD MSTORE PUSH2 0x31EB DUP3 DUP3 PUSH2 0x2D74 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2C4C DUP2 PUSH2 0x34EF JUMP JUMPDEST PUSH2 0x2C4C DUP2 PUSH2 0x34F6 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x10AE DUP3 DUP5 PUSH2 0x2C43 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x3222 DUP3 DUP8 PUSH2 0x2C43 JUMP JUMPDEST PUSH2 0x322F PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2C43 JUMP JUMPDEST PUSH2 0x323C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x31FD JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x324E DUP2 DUP5 PUSH2 0x2D74 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x3266 DUP3 DUP6 PUSH2 0x2C43 JUMP JUMPDEST PUSH2 0xC45 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x31FD JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x3284 DUP2 DUP7 PUSH2 0x2CB9 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x3298 DUP2 DUP6 PUSH2 0x2D14 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x31EB DUP2 DUP5 PUSH2 0x2C52 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x32BD DUP2 DUP7 PUSH2 0x2CB9 JUMP JUMPDEST SWAP1 POP PUSH2 0x32CC PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x31FD JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x31EB DUP2 DUP5 PUSH2 0x2C52 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x10AE DUP3 DUP5 PUSH2 0x2D6B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2DA9 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2DFF JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2E2F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2E85 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2EB5 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2F0B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2F3B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2F6B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x2FCB JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x3021 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x10AE DUP2 PUSH2 0x3051 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x10AE DUP3 DUP5 PUSH2 0x30A7 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC45 DUP2 DUP5 PUSH2 0x30F1 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x33DC DUP2 DUP7 PUSH2 0x30F1 JUMP JUMPDEST SWAP1 POP PUSH2 0x33EB PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x31FD JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x31EB DUP2 DUP5 PUSH2 0x2D74 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x10AE DUP3 DUP5 PUSH2 0x31F4 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x10AE DUP3 DUP5 PUSH2 0x31FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x352B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3513 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x158B JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP1 JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 PUSH24 0x97C5E4E7170C401C509A807353C0A60AD36B6F14CF1A605D 0xde 0xbb 0xbf SIGNEXTEND PUSH29 0xE3C36C6578706572696D656E74616CF500370000000000000000000000 ",
				"sourceMap": "816:1324:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1649:11;;;;1627:10;:34;1606:116;;;;;;;;;;;;;;;;;;;;;;816:1324;1166:171:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1166:171:3;;;;;;;;;;;;;;;;;;;;;;;;;2306:2403:7;;;;;;;;;;;;;;;;;;4113:950:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4113:950:4;;;;;;;;;991:60:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;991:60:8;;;;;;;;;;;;1077:79:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1077:79:5;;;;2616:1894;;;;;;;;;;292:20:41;;8:9:-1;5:2;;;30:1;27;20:12;5:2;292:20:41;;;;;;;;;;;;850:54:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;850:54:8;;;;940:38;;8:9:-1;5:2;;;30:1;27;20:12;5:2;940:38:8;;;;5472:1414:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5472:1414:4;;;;;;;;;1007:153:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1007:153:3;;;;;;;;;1799:339:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1799:339:0;;;;;;;;;534:167:41;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;534:167:41;;;;;;;;;1162:95:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1162:95:5;;;;1166:171:3;939:60;;;;;;;;;;;;;;;;;;;;;1166:171;;;;;;:::o;2306:2403:7:-;2608:35;;:::i;:::-;2684:9;2659:22;;;2724:18;;;2703:88;;;;;;;;;;;;;;2887:100;2910:14;2938:13;2965:12;2887:9;:100::i;:::-;2864:123;;3022:37;3030:14;3046:12;3022:7;:37::i;:::-;2997:62;;3126:11;;;;;;;;;;;:19;;;3152:14;3126:43;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3126:43:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3126:43:7;;;;;3363:50;3384:6;3391:1;3384:9;;;;;;;;;;;;;;;;;;:24;;;3410:2;3363:20;:50::i;:::-;3450:15;3423:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3335:78;;-1:-1:-1;3423:42:7;;3450:15;3423:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:6;3430:1;3423:9;;;;;;;;;;;;;;;;;;;:24;;:42;3508:9;;;3479:39;;;3508:9;;3479:39;3475:614;;;3718:125;3763:6;3787:10;3815:14;3718:27;:125::i;:::-;3699:144;;3475:614;;;3893:185;3940:6;3964:10;3992:9;4019:13;4050:14;3893:29;:185::i;:::-;3874:204;;3475:614;4214:39;;;;4196:57;;;4175:121;;;;;;;;;;;;;;4396:39;;;;4378:57;;4357:126;;;;;;;;;;;;;;4538:131;4565:17;4596:10;4620:16;:39;;;4538:13;:131::i;:::-;2306:2403;;;;;;;;;;;;:::o;4113:950:4:-;4277:35;;:::i;:::-;4333:9;4386:37;4510;4729:35;;:::i;:::-;4345:1;4333:13;;4328:696;4352:6;:13;4348:1;:17;4328:696;;;4426:70;4434:20;4456:16;:39;;;4426:7;:70::i;:::-;4386:110;;4550:165;4584:6;4591:1;4584:9;;;;;;;;;;;;;;;;;;:26;;;4628:6;4635:1;4628:9;;;;;;;;;;;;;;;;;;:26;;;4672:29;4550:16;:165::i;:::-;4510:205;;4767:62;4788:6;4795:1;4788:9;;;;;;;;;;;;;;;;;;4799:29;4767:20;:62::i;:::-;4729:100;;4843:50;4858:16;4876;4843:14;:50::i;:::-;4911:39;;:63;;4907:107;;;4994:5;;4907:107;4367:3;;;;;4328:696;;;4113:950;;;;;;;;:::o;991:60:8:-;1047:4;991:60;:::o;1077:79:5:-;1123:32;;;;;;;;;;;;;;;;1077:79;:::o;2616:1894::-;2957:35;;:::i;:::-;3033:9;3008:22;3073:18;;;3052:88;;;;;;;;;;;;;;3194:1;3171:24;;3150:94;;;;;;;;;;;;;;3275:48;3295:6;3302:1;3295:9;;;;;;;;;;;;;;;;;;:24;;;3321:1;3275:19;:48::i;:::-;1123:32;;;;;;;;;;;;;;;;3254:69;;-1:-1:-1;3354:28:5;;;;;;;;:61;;-1:-1:-1;1209:47:5;;;;;;;;;;;;;;;;;;;;;3386:29;;;;;;;3354:61;3333:131;;;;;;;;;;;;;;;;3475:11;;;;;;;;;;;:19;;;3501:14;3475:43;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3475:43:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;1123:32:5;;;;;;;;;;;;;;;;3532:28;;;;;;;3528:505;;-1:-1:-1;3528:505:5;;-1:-1:-1;;3528:505:5;3595:190;3641:6;3665:10;3693:9;3720:13;3751:20;3595:28;:190::i;:::-;3576:209;;3528:505;;;1209:47;;;;;;;;;;;;;;;;;;;;;3806:29;;;;;;;3802:231;;;3870:152;3916:6;3940:10;3968:9;3995:13;3870:28;:152::i;:::-;3851:171;;3802:231;4158:39;;;;4140:57;;;4119:121;;;;;;;;;;;;;;4250:220;4290:64;4298:14;4314:16;:39;;;4290:7;:64::i;:::-;4368:16;:39;;;4421:13;4448:12;4250:26;:220::i;:::-;2616:1894;;;;;;;;;;;:::o;292:20:41:-;;;;;;:::o;850:54:8:-;899:5;850:54;:::o;940:38::-;974:4;940:38;:::o;5472:1414:4:-;5632:35;;:::i;:::-;5688:9;5741:30;6032:31;6300:35;;:::i;:::-;5700:1;5688:13;;5683:1164;5707:6;:13;5703:1;:17;5683:1164;;;5774:63;5782:13;5797:16;:39;;;5774:7;:63::i;:::-;5741:96;;6066:220;6100:6;6107:1;6100:9;;;;;;;;;;;;;;;;;;:26;;;6144:55;6152:6;6159:1;6152:9;;;;;;;;;;;;;;;;;;:26;;;6180:6;6187:1;6180:9;;;;;;;;;;;;;;;;;;:18;;;6144:7;:55::i;:::-;6250:22;6066:16;:220::i;:::-;6032:254;;6338:68;6359:6;6366:1;6359:9;;;;;;;;;;;;;;;;;;6370:35;6378:23;6403:1;6370:7;:35::i;:::-;6338:20;:68::i;:::-;6300:106;;6463:79;6471:16;:39;;;6512:16;:29;;;6463:7;:79::i;:::-;6421:121;;6556:50;6571:16;6421;6556:14;:50::i;:::-;6741:39;;:56;-1:-1:-1;6737:100:4;;6817:5;;6737:100;5722:3;;;;;5683:1164;;1007:153:3;830:52;;;;;;;;;;;;;;;;;;;;;1007:153;;;;;;:::o;1799:339:0:-;1903:20;460:5:41;;;;446:10;:19;425:85;;;;;;;;;;;;;;1926:8:0;;:41;;;;;:8;;;;;:22;;:41;;1949:17;;1926:41;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1926:41:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1926:41:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1926:41:0;;;;;;;;;1903:64;-1:-1:-1;1981:26:0;;;;1977:155;;2023:11;;2057:8;;2023:43;;;;;:11;;;;;:19;;:43;;2043:12;;2057:8;2023:43;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2023:43:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2023:43:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2023:43:0;;;;;;;;;-1:-1:-1;2080:9:0;;2112:8;;2080:41;;;;;:9;;;;;:17;;:41;;2098:12;;2112:8;2080:41;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2080:41:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2080:41:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2080:41:0;;;;;;;;;;1977:155;1799:339;;:::o;534:167:41:-;460:5;;;;446:10;:19;425:85;;;;;;;;;;;;;;630:22;;;;626:69;;668:5;:16;;;;;;;;;;626:69;534:167;:::o;1162:95:5:-;1209:47;;;;;;;;;;;;;;;;;;;;;1162:95;:::o;1453:695:8:-;1604:20;1660:1;1644:13;:17;;;:47;;;;-1:-1:-1;1665:26:8;;;;;1644:47;1640:473;;;974:4;1732:24;;;;;1707:107;;;;;;;;;;;;;;1920:133;;;;899:5;2025:14;1920:16;:133::i;:::-;2067:35;;1905:148;;-1:-1:-1;2067:21:8;;;;:35;;;;;1905:148;;2067:35;;;;1905:148;2067:21;:35;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2067:35:8;1453:695;;;;;:::o;418:146:42:-;498:7;528:6;;;;521:14;;;;-1:-1:-1;552:5:42;;;418:146;;;;;:::o;10073:886:39:-;10194:14;10257:5;10265:2;10257:10;10245:1;:8;:22;;10224:135;;;;;;;;;;;;;;;;-1:-1:-1;10861:13:39;10606:2;10861:13;10855:20;10877:42;10851:69;;10073:886::o;7513:994:7:-;7697:35;;:::i;:::-;7854:8;;:107;;;;;8137:23;;7854:8;;;:25;;:107;;7893:6;;7913:14;;7941:10;;7854:107;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7854:107:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7854:107:7;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;7854:107:7;;;;;;;;;7835:126;;8163:79;8171:16;:39;;;8212:16;:29;;;8163:7;:79::i;:::-;8137:105;;8273:79;8295:16;:39;;;8336:15;8273:21;:79::i;:::-;8252:148;;;;;;;;;;;;;;;;8410:57;;;7513:994;-1:-1:-1;;;7513:994:7:o;5257:1906::-;5524:35;;:::i;:::-;5575:31;5633:46;;:::i;:::-;5903:35;;:::i;:::-;6836:41;;:::i;:::-;5609:14;5575:48;;5682:50;5709:6;5717:14;5682:26;:50::i;:::-;5633:99;;5789:1;5746:27;:40;;;:44;5742:998;;;5941:150;5979:9;6006:13;6037:27;:40;;;5941:20;:150::i;:::-;5903:188;;6229:161;6272:14;6308:64;6316:14;6332:16;:39;;;6308:7;:64::i;:::-;6229:21;:161::i;:::-;6204:242;;;;;;;;;;;;;;;;6486:73;6494:23;6519:16;:39;;;6486:7;:73::i;:::-;6605:29;;;;;6573;;;:61;6690:39;;;;;6648;;;:81;6460:99;-1:-1:-1;5742:998:7;6880:8;;:116;;;;;:8;;;;;:25;;:116;;6919:6;;6939:23;;6976:10;;6880:116;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6880:116:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6880:116:7;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;6880:116:7;;;;;;;;;6836:160;;7067:56;7082:16;7100:22;7067:14;:56::i;:::-;5257:1906;;;;;;;;;;;:::o;825:1219:2:-;779:38;;;;;;;;;;;;;;;;1078:12;;1093:10;;;;779:38;1104:105;;1177:2;;1193:6;;1104:105;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;1104:105:2;;;49:4:-1;25:18;;61:17;;1104:105:2;182:15:-1;1104:105:2;;;;179:29:-1;;;;160:49;;1093:117:2;;;1104:105;;1093:117;;;;25:18:-1;1093:117:2;;25:18:-1;-1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1093:117:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1220:69:2;;;;;;;;;;;;;;;;;1668:14;1665:2;;;-1:-1:-1;1712:1:2;1736:14;1752:2;1733:22;1730:2;;;1874;1871:1;1868;1853:24;-1:-1:-1;1915:1:2;1909:8;1730:2;1989:7;1968:69;;;;;;;;;;;;;;;;825:1219;;;;:::o;937:326:29:-;1091:21;1144:82;1165:26;1173:9;1184:6;1165:7;:26::i;:::-;1205:11;1144:7;:82::i;:::-;1128:98;937:326;-1:-1:-1;;;;937:326:29:o;1312:1251:4:-;1470:30;;:::i;:::-;1516:35;;:::i;:::-;1554:8;;:28;;;;;1711:33;;;;1554:8;;;;;:21;;:28;;1576:5;;1554:28;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1554:28:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1554:28:4;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1554:28:4;;;;;;;;;1596:21;;1516:66;;-1:-1:-1;1596:61:4;;1627:29;1596:61;1592:110;;1673:18;;1592:110;1747:70;1755:5;:22;;;1779:9;:37;;;1747:7;:70::i;:::-;1711:106;;1860:55;1867:20;1889:25;1860:6;:55::i;:::-;1926:34;;;:59;;;2110:22;;;;2146;;;;1827:88;;-1:-1:-1;2032:146:4;;1827:88;;2110:22;2032:16;:146::i;:::-;1995:183;;2245:34;;;;2293:22;;;;2329:14;;;;2215:138;;2245:34;2293:22;2215:16;:138::i;:::-;2188:24;;;:165;2420:34;;;;2468:22;;;;2504:14;;;;2390:138;;2420:34;2468:22;2390:16;:138::i;:::-;2363:24;;;:165;1312:1251;;;;;;;;:::o;1772:648:28:-;1965:39;;2006:40;;1957:90;;1965:39;1957:7;:90::i;:::-;1915:132;;2107:39;;;;;2148:40;;;;2099:90;;2107:39;2099:7;:90::i;:::-;2057:39;;;:132;2239:29;;;;;2270:30;;;;2231:70;;2239:29;2231:7;:70::i;:::-;2199:29;;;:102;2351:29;;;;;2382:30;;;;2343:70;;2351:29;2343:7;:70::i;:::-;2311:29;;;;:102;;;;-1:-1:-1;1772:648:28:o;15327:554:39:-;15442:13;15504:5;15512:1;15504:9;15492:1;:8;:21;;15471:105;;;;;;;;;;;;;;;;-1:-1:-1;;15632:2:39;15625:10;15619:17;15775:66;15763:79;;15327:554::o;5119:3574:5:-;5390:35;;:::i;:::-;5536:25;6109:35;;:::i;:::-;7033:45;;:::i;:::-;7318:38;;:::i;:::-;5564:50;5585:6;5592:1;5585:9;;;;;;;;;5564:50;5856:15;5829:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5536:78;;-1:-1:-1;5829:42:5;;5856:15;5829:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:6;5836:1;5829:9;;;;;;;;;;;;;;;;;;;:24;;:42;6187:9;;;6158:39;;;6187:9;;6158:39;6154:2304;;;6232:124;6270:6;6294:10;6322:20;6232;:124::i;:::-;6480:39;;6213:143;;-1:-1:-1;6480:63:5;-1:-1:-1;6480:63:5;6455:144;;;;;;;;;;;;;;6613:50;6628:16;6646;6613:14;:50::i;:::-;6702:244;6745:79;6753:16;:39;;;6794:16;:29;;;6745:7;:79::i;:::-;6859:39;;6702:21;:244::i;:::-;6677:325;;;;;;;;;;;;;;;;6154:2304;;;7081:55;7107:6;7115:20;7081:25;:55::i;:::-;7033:103;;7196:1;7154:26;:39;;;:43;7150:573;;;7359:165;7401:9;7432:13;7467:26;:39;;;7359:20;:165::i;:::-;7584:42;;;;;7542:39;;;:84;7676:32;;;;;7644:29;;;:64;7318:206;-1:-1:-1;7150:573:5;7841:8;;:128;;;;;:8;;;;;:24;;:128;;7883:6;;7907:20;;7945:10;;7841:128;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7841:128:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7841:128:5;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;7841:128:5;;;;;;;;;8008:39;;7822:147;;-1:-1:-1;8008:63:5;;7983:144;;;;;;;;;;;;;;8141:50;8156:16;8174;8141:14;:50::i;:::-;8230:161;8273:16;:39;;;8334:16;:39;;;8230:21;:161::i;:::-;8205:242;;;;;;;;;;;;;;;;8522:131;8549:17;8580:10;8604:16;:39;;;8522:13;:131::i;9238:2212::-;9471:35;;:::i;:::-;9522:25;9557:20;9603:38;9686:9;10365:38;;:::i;:::-;10729:35;;:::i;:::-;9580:6;:13;9557:36;;9658:12;9644:27;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;9644:27:5;;9603:68;;9698:1;9686:13;;9681:543;9705:12;9701:1;:16;9681:543;;;9791:46;9799:17;9818:6;9825:1;9818:9;;;;;;;;;;;;;;;;;;:18;;;9791:7;:46::i;:::-;10065:15;10038:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9771:66;;-1:-1:-1;10038:42:5;;10065:15;10038:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:6;10045:1;10038:9;;;;;;;;;;;;;;;;;;;:24;;:42;10187:9;;:6;;10194:1;;10187:9;;;;;;;;;;;;;;:26;;;10160:21;10182:1;10160:24;;;;;;;;;;;;;;;;;;:53;9719:3;;;;;9681:543;;;10257:1;10237:17;:21;10233:487;;;10406:127;10444:9;10471:13;10502:17;10406:20;:127::i;:::-;10579:32;;;;;10547:29;;;:64;10667:42;;;;;10625:39;;;:84;10365:168;-1:-1:-1;10233:487:5;10767:8;;:119;;;;;:8;;;;;:30;;:119;;10811:6;;10831:21;;10866:10;;10767:119;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10767:119:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10767:119:5;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;10767:119:5;;;;;;;;;10729:157;;10896:50;10911:16;10929;10896:14;:50::i;:::-;10977:149;11016:16;:39;;;11073:16;:39;;;10977:21;:149::i;:::-;10956:218;;;;;;;;;;;;;;;;11257:1;11253:5;;11248:163;11264:12;11260:1;:16;11248:163;;;11297:103;11334:6;11341:1;11334:9;;;;;;;;;;;;;;;;;;:24;;;11376:10;11297:19;:103::i;:::-;11278:3;;;;;11248:163;;;9238:2212;;;;;;;;;;;;:::o;2769:777:8:-;3200:20;3353:24;3076:1;3056:17;:21;3052:488;;;3093:11;;:39;;;;;:11;;;;;:20;;:39;;3114:17;;3093:39;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3093:39:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3093:39:8;;;;3223:116;3250:14;3282:13;3313:12;3223:9;:116::i;:::-;3200:139;;3380:40;3388:17;3407:12;3380:7;:40::i;:::-;3353:67;;3457:1;3438:16;:20;3434:96;;;3478:37;;:10;;:37;;;;;3498:16;;3478:37;;;;3498:16;3478:10;:37;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3478:37:8;3434:96;2769:777;;;;;;:::o;570:166:42:-;650:7;682:5;;;704:6;;;;697:14;;;4159:384:8;4291:4;;4342:138;1047:4;899:5;4451:19;4342:16;:138::i;:::-;4497:39;;;;;4159:384;-1:-1:-1;;;4159:384:8:o;2972:734:4:-;3139:35;;:::i;:::-;3195:9;3248:37;3372:35;;:::i;:::-;3207:1;3195:13;;3190:477;3214:6;:13;3210:1;:17;3190:477;;;3288:70;3296:20;3318:16;:39;;;3288:7;:70::i;:::-;3248:110;;3410:62;3431:6;3438:1;3431:9;;;;;;;;;3410:62;3372:100;;3486:50;3501:16;3519;3486:14;:50::i;:::-;3597:20;3554:16;:39;;;:63;3550:107;;;3637:5;;3550:107;3229:3;;;;;3190:477;;1819:2046:6;1994:35;;:::i;:::-;2050:9;2374:29;2663:31;3083:35;;:::i;:::-;2062:1;2050:13;;2045:1781;2069:6;:13;2065:1;:17;2045:1781;;;2223:14;2196:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2223:14;2196:41;;2223:14;2196:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:6;2203:1;2196:9;;;;;;;;;;;;;;;;;;;;:24;;:41;;;;2278:15;2251:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2278:15;2251:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:6;2258:1;2251:9;;;;;;;;;;;;;;;;;;;:24;;:42;2428:39;;2406:62;;2414:12;;2406:7;:62::i;:::-;2374:94;;2697:219;2731:6;2738:1;2731:9;;;;;;;;;;;;;;;;;;:26;;;2775:55;2783:6;2790:1;2783:9;;;;;;;;;;;;;;;;;;:26;;;2811:6;2818:1;2811:9;;;;;;;;;2697:219;3121:8;;3157:9;;2663:253;;-1:-1:-1;3121:8:6;;;:18;;3157:6;;3164:1;;3157:9;;;;;;;;;;;;;;3184:35;3192:23;3217:1;3184:7;:35::i;:::-;3237:10;3248:1;3237:13;;;;;;;;;;;;;;;;;;3121:143;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3121:143:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3121:143:6;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3121:143:6;;;;;;;;;3083:181;;3409:79;3417:16;:39;;;3458:16;:29;;;3409:7;:79::i;:::-;3367:121;;3572:50;3587:16;3367;3572:14;:50::i;:::-;3721:39;;:55;-1:-1:-1;3717:99:6;;3796:5;;3717:99;2084:3;;;;;2045:1781;;;1819:2046;;;;;;;;;:::o;84:180:42:-;164:7;196:5;;;218:6;;;:20;;;237:1;232;228;:5;;;;;;;;:10;218:20;211:28;;;;;270:142;350:7;373:6;386:1;382;:5;;;;;;;;;270:142;-1:-1:-1;;;;270:142:42:o;1161:135::-;1246:7;1280:1;1276;:5;:13;;1288:1;1276:13;;;-1:-1:-1;1284:1:42;;1269:20;-1:-1:-1;1161:135:42:o;1343:467:3:-;1491:13;;1595:25;1507;:9;1529:2;1507:25;:21;:25;:::i;:::-;1491:41;-1:-1:-1;1560:25:3;:9;1582:2;1560:25;:21;:25;:::i;:::-;1542:43;-1:-1:-1;1623:34:3;:9;1653:3;1623:34;:29;:34;:::i;:::-;1667:136;;;;;1595:62;;-1:-1:-1;1667:36:3;;;;;;:136;;1725:4;;1744:2;;1760:7;;1595:62;;1667:136;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1667:136:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1667:136:3;;;;1343:467;;;;;:::o;14467:195:39:-;14588:14;14633:21;14645:1;14648:5;14633:11;:21::i;16204:672::-;16333:19;16407:25;16435:21;16447:1;16450:5;16435:11;:21::i;:::-;16407:49;;16475:2;16466:11;;;;16611:17;16603:5;:25;16591:1;:8;:37;;16570:132;;;;;;;;;;;;;;;;-1:-1:-1;;16824:13:39;;16204:672::o;13049:490::-;13170:14;13233:5;13241:2;13233:10;13221:1;:8;:22;;13200:107;;;;;;;;;;;;;;;;-1:-1:-1;13486:13:39;13388:2;13486:13;13480:20;;13049:490::o;816:1324:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;816:1324:0;;;;;;;;;;;;;;;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;130:122;;208:39;239:6;233:13;208:39;;275:693;;390:4;378:17;;374:27;-1:-1;364:2;;415:1;412;405:12;364:2;452:6;439:20;474:85;489:69;551:6;489:69;;;474:85;;;587:21;;;631:4;619:17;;;;465:94;;-1:-1;644:14;;619:17;739:1;724:238;749:6;746:1;743:13;724:238;;;832:3;819:17;811:6;807:30;856:42;894:3;882:10;856:42;;;844:55;;-1:-1;922:4;913:14;;;;941;;;;;771:1;764:9;724:238;;1008:735;;1137:4;1125:17;;1121:27;-1:-1;1111:2;;1162:1;1159;1152:12;1111:2;1199:6;1186:20;1221:99;1236:83;1312:6;1236:83;;1221:99;1348:21;;;1392:4;1380:17;;;;1212:108;;-1:-1;1405:14;;1380:17;1500:1;1485:252;1510:6;1507:1;1504:13;1485:252;;;1593:3;1580:17;1572:6;1568:30;1617:56;1669:3;1657:10;1617:56;;;1605:69;;-1:-1;1697:4;1688:14;;;;1716;;;;;1532:1;1525:9;1485:252;;1751:116;;1826:36;1854:6;1848:13;1826:36;;1874:122;;1952:39;1983:6;1977:13;1952:39;;2003:116;;2069:45;2106:6;2093:20;2069:45;;2127:432;;2217:4;2205:17;;2201:27;-1:-1;2191:2;;2242:1;2239;2232:12;2191:2;2279:6;2266:20;2301:60;2316:44;2353:6;2316:44;;2301:60;2292:69;;2381:6;2374:5;2367:21;2417:4;2409:6;2405:17;2450:4;2443:5;2439:16;2485:3;2476:6;2471:3;2467:16;2464:25;2461:2;;;2502:1;2499;2492:12;2461:2;2512:41;2546:6;2541:3;2536;2512:41;;3056:865;;3185:4;3173:9;3168:3;3164:19;3160:30;3157:2;;;3203:1;3200;3193:12;3157:2;3221:20;3236:4;3221:20;;;3212:29;-1:-1;3309:1;3340:60;3396:3;3376:9;3340:60;;;3316:85;;-1:-1;3480:2;3513:60;3569:3;3545:22;;;3513:60;;;3506:4;3499:5;3495:16;3488:86;3422:163;3643:2;3676:60;3732:3;3723:6;3712:9;3708:22;3676:60;;;3669:4;3662:5;3658:16;3651:86;3595:153;3806:2;3839:60;3895:3;3886:6;3875:9;3871:22;3839:60;;;3832:4;3825:5;3821:16;3814:86;3758:153;3151:770;;;;;3960:689;;4087:4;4075:9;4070:3;4066:19;4062:30;4059:2;;;4105:1;4102;4095:12;4059:2;4123:20;4138:4;4123:20;;;4114:29;-1:-1;4200:1;4231:58;4285:3;4265:9;4231:58;;;4207:83;;-1:-1;4356:2;4389:60;4445:3;4421:22;;;4389:60;;;4382:4;4375:5;4371:16;4364:86;4311:150;4534:2;4567:60;4623:3;4614:6;4603:9;4599:22;4567:60;;;4560:4;4553:5;4549:16;4542:86;4471:168;4053:596;;;;;4684:2205;;4792:5;4780:9;4775:3;4771:19;4767:31;4764:2;;;4811:1;4808;4801:12;4764:2;4829:21;4844:5;4829:21;;;4820:30;-1:-1;4908:1;4939:49;4984:3;4964:9;4939:49;;;4915:74;;-1:-1;5058:2;5091:49;5136:3;5112:22;;;5091:49;;;5084:4;5077:5;5073:16;5066:75;5010:142;5217:2;5250:49;5295:3;5286:6;5275:9;5271:22;5250:49;;;5243:4;5236:5;5232:16;5225:75;5162:149;5370:2;5403:49;5448:3;5439:6;5428:9;5424:22;5403:49;;;5396:4;5389:5;5385:16;5378:75;5321:143;5526:3;5560:49;5605:3;5596:6;5585:9;5581:22;5560:49;;;5553:4;5546:5;5542:16;5535:75;5474:147;5683:3;5717:49;5762:3;5753:6;5742:9;5738:22;5717:49;;;5710:4;5703:5;5699:16;5692:75;5631:147;5832:3;5866:49;5911:3;5902:6;5891:9;5887:22;5866:49;;;5859:4;5852:5;5848:16;5841:75;5788:139;5981:3;6015:49;6060:3;6051:6;6040:9;6036:22;6015:49;;;6008:4;6001:5;5997:16;5990:75;5937:139;6143:3;6178:49;6223:3;6214:6;6203:9;6199:22;6178:49;;;6170:5;6163;6159:17;6152:76;6086:153;6289:3;6324:49;6369:3;6360:6;6349:9;6345:22;6324:49;;;6316:5;6309;6305:17;6298:76;6249:136;6473:3;6462:9;6458:19;6445:33;6498:18;6490:6;6487:30;6484:2;;;6530:1;6527;6520:12;6484:2;6566:54;6616:3;6607:6;6596:9;6592:22;6566:54;;;6558:5;6551;6547:17;6540:81;6395:237;6720:3;6709:9;6705:19;6692:33;6745:18;6737:6;6734:30;6731:2;;;6777:1;6774;6767:12;6731:2;6813:54;6863:3;6854:6;6843:9;6839:22;6813:54;;;6805:5;6798;6794:17;6787:81;6642:237;4758:2131;;;;;6896:116;;6962:45;6999:6;6986:20;6962:45;;7019:118;;7086:46;7124:6;7111:20;7086:46;;7273:118;;7349:37;7378:6;7372:13;7349:37;;7398:241;;7502:2;7490:9;7481:7;7477:23;7473:32;7470:2;;;7518:1;7515;7508:12;7470:2;7553:1;7570:53;7615:7;7595:9;7570:53;;7646:263;;7761:2;7749:9;7740:7;7736:23;7732:32;7729:2;;;7777:1;7774;7767:12;7729:2;7812:1;7829:64;7885:7;7865:9;7829:64;;7916:721;;;;;8080:3;8068:9;8059:7;8055:23;8051:33;8048:2;;;8097:1;8094;8087:12;8048:2;8132:1;8149:53;8194:7;8174:9;8149:53;;;8139:63;;8111:97;8239:2;8257:53;8302:7;8293:6;8282:9;8278:22;8257:53;;;8247:63;;8218:98;8347:2;8365:53;8410:7;8401:6;8390:9;8386:22;8365:53;;;8355:63;;8326:98;8483:2;8472:9;8468:18;8455:32;8507:18;8499:6;8496:30;8493:2;;;8539:1;8536;8529:12;8493:2;8559:62;8613:7;8604:6;8593:9;8589:22;8559:62;;;8549:72;;8434:193;8042:595;;;;;;;;8644;;;;8791:2;8779:9;8770:7;8766:23;8762:32;8759:2;;;8807:1;8804;8797:12;8759:2;8842:1;8859:53;8904:7;8884:9;8859:53;;;8849:63;;8821:97;8949:2;8967:53;9012:7;9003:6;8992:9;8988:22;8967:53;;;8957:63;;8928:98;9085:2;9074:9;9070:18;9057:32;9109:18;9101:6;9098:30;9095:2;;;9141:1;9138;9131:12;9095:2;9161:62;9215:7;9206:6;9195:9;9191:22;9161:62;;;9151:72;;9036:193;8753:486;;;;;;9246:1507;;;;;;;9582:3;9570:9;9561:7;9557:23;9553:33;9550:2;;;9599:1;9596;9589:12;9550:2;9634:31;;9685:18;9674:30;;9671:2;;;9717:1;9714;9707:12;9671:2;9737:97;9826:7;9817:6;9806:9;9802:22;9737:97;;;9727:107;;9613:227;9899:2;9888:9;9884:18;9871:32;9923:18;9915:6;9912:30;9909:2;;;9955:1;9952;9945:12;9909:2;9975:83;10050:7;10041:6;10030:9;10026:22;9975:83;;;9965:93;;9850:214;10123:2;10112:9;10108:18;10095:32;10147:18;10139:6;10136:30;10133:2;;;10179:1;10176;10169:12;10133:2;10199:97;10288:7;10279:6;10268:9;10264:22;10199:97;;;10189:107;;10074:228;10361:2;10350:9;10346:18;10333:32;10385:18;10377:6;10374:30;10371:2;;;10417:1;10414;10407:12;10371:2;10437:83;10512:7;10503:6;10492:9;10488:22;10437:83;;;10427:93;;10312:214;10557:3;10576:52;10620:7;10611:6;10600:9;10596:22;10576:52;;;10566:62;;10536:98;10665:3;10684:53;10729:7;10720:6;10709:9;10705:22;10684:53;;;10674:63;;10644:99;9544:1209;;;;;;;;;10760:1633;;;;;;;;11113:3;11101:9;11092:7;11088:23;11084:33;11081:2;;;11130:1;11127;11120:12;11081:2;11165:31;;11216:18;11205:30;;11202:2;;;11248:1;11245;11238:12;11202:2;11268:97;11357:7;11348:6;11337:9;11333:22;11268:97;;;11258:107;;11144:227;11430:2;11419:9;11415:18;11402:32;11454:18;11446:6;11443:30;11440:2;;;11486:1;11483;11476:12;11440:2;11506:83;11581:7;11572:6;11561:9;11557:22;11506:83;;;11496:93;;11381:214;11654:2;11643:9;11639:18;11626:32;11678:18;11670:6;11667:30;11664:2;;;11710:1;11707;11700:12;11664:2;11730:97;11819:7;11810:6;11799:9;11795:22;11730:97;;;11720:107;;11605:228;11892:2;11881:9;11877:18;11864:32;11916:18;11908:6;11905:30;11902:2;;;11948:1;11945;11938:12;11902:2;11968:83;12043:7;12034:6;12023:9;12019:22;11968:83;;;11958:93;;11843:214;12088:3;12107:53;12152:7;12143:6;12132:9;12128:22;12107:53;;;12097:63;;12067:99;12197:3;12216:52;12260:7;12251:6;12240:9;12236:22;12216:52;;;12206:62;;12176:98;12305:3;12324:53;12369:7;12360:6;12349:9;12345:22;12324:53;;;12314:63;;12284:99;11075:1318;;;;;;;;;;;12400:540;;;12565:2;12553:9;12544:7;12540:23;12536:32;12533:2;;;12581:1;12578;12571:12;12533:2;12616:31;;12667:18;12656:30;;12653:2;;;12699:1;12696;12689:12;12653:2;12719:97;12808:7;12799:6;12788:9;12784:22;12719:97;;;12709:107;;12595:227;12853:2;12871:53;12916:7;12907:6;12896:9;12892:22;12871:53;;;12861:63;;12832:98;12527:413;;;;;;12947:257;;13059:2;13047:9;13038:7;13034:23;13030:32;13027:2;;;13075:1;13072;13065:12;13027:2;13110:1;13127:61;13180:7;13160:9;13127:61;;13211:239;;13314:2;13302:9;13293:7;13289:23;13285:32;13282:2;;;13330:1;13327;13320:12;13282:2;13365:1;13382:52;13426:7;13406:9;13382:52;;13457:322;;13601:3;13589:9;13580:7;13576:23;13572:33;13569:2;;;13618:1;13615;13608:12;13569:2;13653:1;13670:93;13755:7;13735:9;13670:93;;13786:317;;13928:2;13916:9;13907:7;13903:23;13899:32;13896:2;;;13944:1;13941;13934:12;13896:2;13979:1;13996:91;14079:7;14059:9;13996:91;;14110:110;14183:31;14208:5;14183:31;;;14178:3;14171:44;14165:55;;;14254:766;;14399:59;14452:5;14399:59;;;14476:6;14471:3;14464:19;14500:4;14495:3;14491:14;14484:21;;14548:3;14590:4;14582:6;14578:17;14573:3;14569:27;14616:61;14671:5;14616:61;;;14698:1;14683:298;14708:6;14705:1;14702:13;14683:298;;;14770:9;14764:4;14760:20;14755:3;14748:33;14796:68;14859:4;14850:6;14844:13;14796:68;;;14788:76;;14881:65;14939:6;14881:65;;;14969:4;14960:14;;;;;14871:75;-1:-1;14730:1;14723:9;14683:298;;;-1:-1;14994:4;;14378:642;-1:-1;;;;;;14378:642;15087:864;;15260:73;15327:5;15260:73;;;15351:6;15346:3;15339:19;15375:4;15370:3;15366:14;15359:21;;15423:3;15465:4;15457:6;15453:17;15448:3;15444:27;15491:75;15560:5;15491:75;;;15587:1;15572:340;15597:6;15594:1;15591:13;15572:340;;;15659:9;15653:4;15649:20;15644:3;15637:33;15685:96;15776:4;15767:6;15761:13;15685:96;;;15677:104;;15798:79;15870:6;15798:79;;;15900:4;15891:14;;;;;15788:89;-1:-1;15619:1;15612:9;15572:340;;15990:590;;16125:54;16173:5;16125:54;;;16197:6;16192:3;16185:19;16221:4;16216:3;16212:14;16205:21;;16266:56;16316:5;16266:56;;;16343:1;16328:230;16353:6;16350:1;16347:13;16328:230;;;16393:53;16442:3;16433:6;16427:13;16393:53;;;16463:60;16516:6;16463:60;;;16546:4;16537:14;;;;;16453:70;-1:-1;16375:1;16368:9;16328:230;;;-1:-1;16571:3;;16104:476;-1:-1;;;;16104:476;16588:107;16659:30;16683:5;16659:30;;16702:297;;16802:38;16834:5;16802:38;;;16857:6;16852:3;16845:19;16869:63;16925:6;16918:4;16913:3;16909:14;16902:4;16895:5;16891:16;16869:63;;;16964:29;16986:6;16964:29;;;16944:50;;;16957:4;16944:50;;16782:217;-1:-1;;;16782:217;17303:397;17458:2;17446:15;;17495:66;17490:2;17481:12;;17474:88;17596:66;17591:2;17582:12;;17575:88;17691:2;17682:12;;17439:261;17709:296;17864:2;17852:15;;17901:66;17896:2;17887:12;;17880:88;17996:2;17987:12;;17845:160;18014:397;18169:2;18157:15;;18206:66;18201:2;18192:12;;18185:88;18307:66;18302:2;18293:12;;18286:88;18402:2;18393:12;;18150:261;18420:296;18575:2;18563:15;;18612:66;18607:2;18598:12;;18591:88;18707:2;18698:12;;18556:160;18725:397;18880:2;18868:15;;18917:66;18912:2;18903:12;;18896:88;19018:66;19013:2;19004:12;;18997:88;19113:2;19104:12;;18861:261;19131:296;19286:2;19274:15;;19323:66;19318:2;19309:12;;19302:88;19418:2;19409:12;;19267:160;19436:296;19591:2;19579:15;;19628:66;19623:2;19614:12;;19607:88;19723:2;19714:12;;19572:160;19741:296;19896:2;19884:15;;19933:66;19928:2;19919:12;;19912:88;20028:2;20019:12;;19877:160;20046:296;20201:2;20189:15;;20238:66;20233:2;20224:12;;20217:88;20333:2;20324:12;;20182:160;20351:397;20506:2;20494:15;;20543:66;20538:2;20529:12;;20522:88;20644:66;20639:2;20630:12;;20623:88;20739:2;20730:12;;20487:261;20757:296;20912:2;20900:15;;20949:66;20944:2;20935:12;;20928:88;21044:2;21035:12;;20893:160;21062:397;21217:2;21205:15;;21254:66;21249:2;21240:12;;21233:88;21355:66;21350:2;21341:12;;21334:88;21450:2;21441:12;;21198:261;21544:888;21772:22;;21685:4;21676:14;;;21806:61;21680:3;21772:22;21806:61;;;21705:174;21973:4;21966:5;21962:16;21956:23;21991:62;22047:4;22042:3;22038:14;22025:11;21991:62;;;21889:176;22149:4;22142:5;22138:16;22132:23;22167:62;22223:4;22218:3;22214:14;22201:11;22167:62;;;22075:166;22325:4;22318:5;22314:16;22308:23;22343:62;22399:4;22394:3;22390:14;22377:11;22343:62;;22492:2419;22707:22;;22492:2419;;22629:5;22620:15;;;22741:61;22624:3;22707:22;22741:61;;;22650:164;22898:4;22891:5;22887:16;22881:23;22916:62;22972:4;22967:3;22963:14;22950:11;22916:62;;;22824:166;23081:4;23074:5;23070:16;23064:23;23099:62;23155:4;23150:3;23146:14;23133:11;23099:62;;;23000:173;23258:4;23251:5;23247:16;23241:23;23276:62;23332:4;23327:3;23323:14;23310:11;23276:62;;;23183:167;23438:4;23431:5;23427:16;23421:23;23456:62;23512:4;23507:3;23503:14;23490:11;23456:62;;;23360:170;23618:4;23611:5;23607:16;23601:23;23636:62;23692:4;23687:3;23683:14;23670:11;23636:62;;;23540:170;23790:4;23783:5;23779:16;23773:23;23808:62;23864:4;23859:3;23855:14;23842:11;23808:62;;;23720:162;23962:4;23955:5;23951:16;23945:23;23980:62;24036:4;24031:3;24027:14;24014:11;23980:62;;;23892:162;24147:5;24140;24136:17;24130:24;24166:63;24222:5;24217:3;24213:15;24200:11;24166:63;;;24064:177;24317:5;24310;24306:17;24300:24;24336:63;24392:5;24387:3;24383:15;24370:11;24336:63;;;24251:160;24497:5;24490;24486:17;24480:24;24550:3;24544:4;24540:14;24532:5;24527:3;24523:15;24516:39;24570:66;24631:4;24618:11;24570:66;;;24562:74;;24421:227;24734:5;24727;24723:17;24717:24;24787:3;24781:4;24777:14;24769:5;24764:3;24760:15;24753:39;24807:66;24868:4;24855:11;24807:66;;;24799:74;22602:2309;-1:-1;;;;;22602:2309;27393:107;27464:30;27488:5;27464:30;;27507:110;27580:31;27605:5;27580:31;;27624:193;27732:2;27717:18;;27746:61;27721:9;27780:6;27746:61;;27824:581;28034:3;28019:19;;28049:61;28023:9;28083:6;28049:61;;;28121:62;28179:2;28168:9;28164:18;28155:6;28121:62;;;28194;28252:2;28241:9;28237:18;28228:6;28194:62;;;28304:9;28298:4;28294:20;28289:2;28278:9;28274:18;28267:48;28329:66;28390:4;28381:6;28329:66;;;28321:74;28005:400;-1:-1;;;;;;28005:400;28412:294;28548:2;28533:18;;28562:61;28537:9;28596:6;28562:61;;;28634:62;28692:2;28681:9;28677:18;28668:6;28634:62;;28713:935;29075:2;29089:47;;;29060:18;;29150:136;29060:18;29272:6;29150:136;;;29142:144;;29334:9;29328:4;29324:20;29319:2;29308:9;29304:18;29297:48;29359:98;29452:4;29443:6;29359:98;;;29351:106;;29505:9;29499:4;29495:20;29490:2;29479:9;29475:18;29468:48;29530:108;29633:4;29624:6;29530:108;;29655:787;29967:2;29981:47;;;29952:18;;30042:136;29952:18;30164:6;30042:136;;;30034:144;;30189:62;30247:2;30236:9;30232:18;30223:6;30189:62;;;30299:9;30293:4;30289:20;30284:2;30273:9;30269:18;30262:48;30324:108;30427:4;30418:6;30324:108;;30449:189;30555:2;30540:18;;30569:59;30544:9;30601:6;30569:59;;30645:387;30826:2;30840:47;;;30811:18;;30901:121;30811:18;30901:121;;31039:387;31220:2;31234:47;;;31205:18;;31295:121;31205:18;31295:121;;31433:387;31614:2;31628:47;;;31599:18;;31689:121;31599:18;31689:121;;31827:387;32008:2;32022:47;;;31993:18;;32083:121;31993:18;32083:121;;32221:387;32402:2;32416:47;;;32387:18;;32477:121;32387:18;32477:121;;32615:387;32796:2;32810:47;;;32781:18;;32871:121;32781:18;32871:121;;33009:387;33190:2;33204:47;;;33175:18;;33265:121;33175:18;33265:121;;33403:387;33584:2;33598:47;;;33569:18;;33659:121;33569:18;33659:121;;33797:387;33978:2;33992:47;;;33963:18;;34053:121;33963:18;34053:121;;34191:387;34372:2;34386:47;;;34357:18;;34447:121;34357:18;34447:121;;34585:387;34766:2;34780:47;;;34751:18;;34841:121;34751:18;34841:121;;34979:387;35160:2;35174:47;;;35145:18;;35235:121;35145:18;35235:121;;35373:310;35539:3;35524:19;;35554:119;35528:9;35646:6;35554:119;;35690:333;35844:2;35858:47;;;35829:18;;35919:94;35829:18;35999:6;35919:94;;36030:603;36250:2;36264:47;;;36235:18;;36325:90;36235:18;36401:6;36325:90;;;36317:98;;36426:62;36484:2;36473:9;36469:18;36460:6;36426:62;;;36536:9;36530:4;36526:20;36521:2;36510:9;36506:18;36499:48;36561:62;36618:4;36609:6;36561:62;;36640:189;36746:2;36731:18;;36760:59;36735:9;36792:6;36760:59;;36836:193;36944:2;36929:18;;36958:61;36933:9;36992:6;36958:61;;37036:256;37098:2;37092:9;37124:17;;;37199:18;37184:34;;37220:22;;;37181:62;37178:2;;;37256:1;37253;37246:12;37178:2;37272;37265:22;37076:216;;-1:-1;37076:216;37299:263;;37463:18;37455:6;37452:30;37449:2;;;37495:1;37492;37485:12;37449:2;-1:-1;37524:4;37512:17;;;37542:15;;37386:176;37853:254;;37992:18;37984:6;37981:30;37978:2;;;38024:1;38021;38014:12;37978:2;-1:-1;38097:4;38068;38045:17;;;;38064:9;38041:33;38087:15;;37915:192;38381:126;38495:4;38483:17;;38464:43;38799:112;38894:12;;38878:33;39774:128;39854:42;39843:54;;39826:76;39909:151;39988:66;39977:78;;39960:100;40067:91;40146:6;40135:18;;40118:40;40165:79;40234:5;40217:27;40386:92;40459:13;40452:21;;40435:43;40913:88;40991:4;40980:16;;40963:38;41009:145;41090:6;41085:3;41080;41067:30;-1:-1;41146:1;41128:16;;41121:27;41060:94;41163:268;41228:1;41235:101;41249:6;41246:1;41243:13;41235:101;;;41316:11;;;41310:18;41297:11;;;41290:39;41271:2;41264:10;41235:101;;;41351:6;41348:1;41345:13;41342:2;;;-1:-1;;41416:1;41398:16;;41391:27;41212:219;41439:97;41527:2;41507:14;41523:7;41503:28;;41487:49"
			}
		}
	},
	"sources": {
		"2.0.0/forwarder/Forwarder.sol": {
			"id": 0
		},
		"2.0.0/forwarder/MixinConstants.sol": {
			"id": 1
		},
		"2.0.0/forwarder/MixinERC20.sol": {
			"id": 2
		},
		"2.0.0/forwarder/MixinERC721.sol": {
			"id": 3
		},
		"2.0.0/forwarder/MixinExpectedResults.sol": {
			"id": 4
		},
		"2.0.0/forwarder/MixinMarketBuyTokens.sol": {
			"id": 5
		},
		"2.0.0/forwarder/MixinMarketBuyZrx.sol": {
			"id": 6
		},
		"2.0.0/forwarder/MixinMarketSellTokens.sol": {
			"id": 7
		},
		"2.0.0/forwarder/MixinWethFees.sol": {
			"id": 8
		},
		"2.0.0/protocol/AssetProxy/interfaces/IAssetProxy.sol": {
			"id": 9
		},
		"2.0.0/protocol/AssetProxy/interfaces/IAuthorizable.sol": {
			"id": 10
		},
		"2.0.0/protocol/Exchange/Exchange.sol": {
			"id": 11
		},
		"2.0.0/protocol/Exchange/MixinAssetProxyDispatcher.sol": {
			"id": 12
		},
		"2.0.0/protocol/Exchange/MixinExchangeCore.sol": {
			"id": 13
		},
		"2.0.0/protocol/Exchange/MixinMatchOrders.sol": {
			"id": 14
		},
		"2.0.0/protocol/Exchange/MixinSignatureValidator.sol": {
			"id": 15
		},
		"2.0.0/protocol/Exchange/MixinTransactions.sol": {
			"id": 16
		},
		"2.0.0/protocol/Exchange/MixinWrapperFunctions.sol": {
			"id": 17
		},
		"2.0.0/protocol/Exchange/interfaces/IAssetProxyDispatcher.sol": {
			"id": 18
		},
		"2.0.0/protocol/Exchange/interfaces/IExchangeCore.sol": {
			"id": 19
		},
		"2.0.0/protocol/Exchange/interfaces/IMatchOrders.sol": {
			"id": 20
		},
		"2.0.0/protocol/Exchange/interfaces/ISignatureValidator.sol": {
			"id": 21
		},
		"2.0.0/protocol/Exchange/interfaces/ITransactions.sol": {
			"id": 22
		},
		"2.0.0/protocol/Exchange/interfaces/IValidator.sol": {
			"id": 23
		},
		"2.0.0/protocol/Exchange/interfaces/IWallet.sol": {
			"id": 24
		},
		"2.0.0/protocol/Exchange/libs/LibConstants.sol": {
			"id": 25
		},
		"2.0.0/protocol/Exchange/libs/LibEIP712.sol": {
			"id": 26
		},
		"2.0.0/protocol/Exchange/libs/LibExchangeErrors.sol": {
			"id": 27
		},
		"2.0.0/protocol/Exchange/libs/LibFillResults.sol": {
			"id": 28
		},
		"2.0.0/protocol/Exchange/libs/LibMath.sol": {
			"id": 29
		},
		"2.0.0/protocol/Exchange/libs/LibOrder.sol": {
			"id": 30
		},
		"2.0.0/protocol/Exchange/mixins/MAssetProxyDispatcher.sol": {
			"id": 31
		},
		"2.0.0/protocol/Exchange/mixins/MExchangeCore.sol": {
			"id": 32
		},
		"2.0.0/protocol/Exchange/mixins/MMatchOrders.sol": {
			"id": 33
		},
		"2.0.0/protocol/Exchange/mixins/MSignatureValidator.sol": {
			"id": 34
		},
		"2.0.0/protocol/Exchange/mixins/MTransactions.sol": {
			"id": 35
		},
		"2.0.0/tokens/ERC20Token/IERC20Token.sol": {
			"id": 36
		},
		"2.0.0/tokens/ERC721Token/IERC721Token.sol": {
			"id": 37
		},
		"2.0.0/tokens/WETH9/WETH9.sol": {
			"id": 38
		},
		"2.0.0/utils/LibBytes/LibBytes.sol": {
			"id": 39
		},
		"2.0.0/utils/Ownable/IOwnable.sol": {
			"id": 40
		},
		"2.0.0/utils/Ownable/Ownable.sol": {
			"id": 41
		},
		"2.0.0/utils/SafeMath/SafeMath.sol": {
			"id": 42
		}
	},
	"sourceCodes": {
		"2.0.0/forwarder/Forwarder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./MixinWethFees.sol\";\nimport \"./MixinMarketSellTokens.sol\";\nimport \"./MixinMarketBuyTokens.sol\";\nimport \"./MixinConstants.sol\";\nimport \"../utils/Ownable/Ownable.sol\";\n\ncontract Forwarder is\n    Ownable,\n    MixinConstants,\n    MixinWethFees,\n    MixinMarketBuyZrx,\n    MixinMarketBuyTokens,\n    MixinMarketSellTokens\n{\n    uint256 MAX_UINT = 2**256 - 1;\n\n    constructor (\n        address _exchange,\n        address _etherToken,\n        address _zrxToken,\n        bytes4 _erc20AssetProxyId,\n        bytes memory _zrxAssetData,\n        bytes memory _wethAssetData\n    )\n        public\n        Ownable()\n        MixinConstants(\n            _exchange,\n            _etherToken,\n            _zrxToken,\n            _zrxAssetData,\n            _wethAssetData\n        )\n    {\n        setERC20ProxyApproval(_erc20AssetProxyId);\n    }\n\n    /// @dev Default payabale function, this allows us to withdraw WETH\n    function ()\n        public\n        payable\n    {\n        require(\n            msg.sender == address(ETHER_TOKEN),\n            \"DEFAULT_FUNCTION_WETH_CONTRACT_ONLY\"\n        );\n    }\n\n    /// @dev Sets the allowances to the proxy for this contract\n    function setERC20ProxyApproval(bytes4 erc20AssetProxyId)\n        public\n        onlyOwner\n    {\n        address proxyAddress = EXCHANGE.getAssetProxy(erc20AssetProxyId);\n        if (proxyAddress != address(0)) {\n            ETHER_TOKEN.approve(proxyAddress, MAX_UINT);\n            ZRX_TOKEN.approve(proxyAddress, MAX_UINT);\n        }\n    }\n}\n",
		"2.0.0/forwarder/MixinConstants.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../protocol/Exchange/Exchange.sol\";\nimport { WETH9 as EtherToken } from \"../tokens/WETH9/WETH9.sol\";\nimport \"../tokens/ERC20Token/IERC20Token.sol\";\n\ncontract MixinConstants {\n\n    Exchange EXCHANGE;\n    EtherToken ETHER_TOKEN;\n    IERC20Token ZRX_TOKEN;\n    bytes ZRX_ASSET_DATA;\n    bytes WETH_ASSET_DATA;\n\n    constructor (\n        address _exchange,\n        address _etherToken,\n        address _zrxToken,\n        bytes memory _zrxAssetData,\n        bytes memory _wethAssetData\n    )\n        public\n    {\n        EXCHANGE = Exchange(_exchange);\n        ETHER_TOKEN = EtherToken(_etherToken);\n        ZRX_TOKEN = IERC20Token(_zrxToken);\n        ZRX_ASSET_DATA = _zrxAssetData;\n        WETH_ASSET_DATA = _wethAssetData;\n    }\n\n}",
		"2.0.0/forwarder/MixinERC20.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\ncontract MixinERC20 {\n\n    string constant ERROR_TRANSFER_FAILED = \"TRANSFER_FAILED\";\n    bytes4 constant ERC20_TRANSFER_SELECTOR = bytes4(keccak256(\"transfer(address,uint256)\"));\n\n    function transferToken(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        // Transfer tokens.\n        // We do a raw call so we can check the success separate\n        // from the return data.\n        bool success = token.call(abi.encodeWithSelector(\n            ERC20_TRANSFER_SELECTOR,\n            to,\n            amount\n        ));\n        require(\n            success,\n            \"TRANSFER_FAILED\"\n        );\n        \n        // Check return data.\n        // If there is no return data, we assume the token incorrectly\n        // does not return a bool. In this case we expect it to revert\n        // on failure, which was handled above.\n        // If the token does return data, we require that it is a single\n        // value that evaluates to true.\n        assembly {\n            if returndatasize {\n                success := 0\n                if eq(returndatasize, 32) {\n                    // First 64 bytes of memory are reserved scratch space\n                    returndatacopy(0, 0, 32)\n                    success := mload(0)\n                }\n            }\n        }\n        require(\n            success,\n            \"TRANSFER_FAILED\"\n        );\n    }\n}\n",
		"2.0.0/forwarder/MixinERC721.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../utils/LibBytes/LibBytes.sol\";\nimport \"../tokens/ERC721Token/IERC721Token.sol\";\n\ncontract MixinERC721 {\n\n    using LibBytes for bytes;\n    bytes4 constant ERC721_RECEIVED = bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"));\n    bytes4 constant ERC721_RECEIVED_OPERATOR = bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\n\n    function onERC721Received(address, uint256, bytes memory)\n        public\n        pure\n        returns(bytes4)\n    {\n        return ERC721_RECEIVED;\n    }\n\n    function onERC721Received(address, address, uint256, bytes memory)\n        public\n        pure\n        returns(bytes4)\n    {\n        return ERC721_RECEIVED_OPERATOR;\n    }\n\n    function transferERC721Token(\n        bytes memory assetData,\n        address to\n    )\n        internal\n    {\n        // Decode asset data.\n        address token = assetData.readAddress(16);\n        uint256 tokenId = assetData.readUint256(36);\n        bytes memory receiverData = assetData.readBytesWithLength(100);\n        IERC721Token(token).safeTransferFrom(\n            address(this),\n            to,\n            tokenId,\n            receiverData\n        );\n    }\n}\n",
		"2.0.0/forwarder/MixinExpectedResults.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../utils/LibBytes/LibBytes.sol\";\nimport \"../protocol/Exchange/libs/LibFillResults.sol\";\nimport \"../protocol/Exchange/libs/LibMath.sol\";\nimport \"../protocol/Exchange/libs/LibOrder.sol\";\nimport \"./MixinConstants.sol\";\n\ncontract MixinExpectedResults is\n    LibMath,\n    LibFillResults,\n    MixinConstants\n{\n\n    /// @dev Simulates the 0x Exchange fillOrder validation and calculations, without performing any state changes.\n    /// @param order An Order struct containing order specifications.\n    /// @param takerAssetFillAmount A number representing the amount of this order to fill.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount\n    )\n        internal\n        view\n        returns (FillResults memory fillResults)\n    {\n        LibOrder.OrderInfo memory orderInfo = EXCHANGE.getOrderInfo(order);\n        if (orderInfo.orderStatus != uint8(LibOrder.OrderStatus.FILLABLE)) {\n            return fillResults;\n        }\n        uint256 remainingTakerAssetAmount = safeSub(order.takerAssetAmount, orderInfo.orderTakerAssetFilledAmount);\n        uint256 takerAssetFilledAmount = min256(takerAssetFillAmount, remainingTakerAssetAmount);\n\n        fillResults.takerAssetFilledAmount = takerAssetFilledAmount;\n        fillResults.makerAssetFilledAmount = getPartialAmount(\n            fillResults.takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerAssetAmount\n        );\n        fillResults.makerFeePaid = getPartialAmount(\n            fillResults.takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerFee\n        );\n        fillResults.takerFeePaid = getPartialAmount(\n            fillResults.takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.takerFee\n        );\n        return fillResults;\n    }\n\n    /// @dev Calculates a FillResults total for selling takerAssetFillAmount over all orders. \n    ///      Including the fees required to be paid. \n    /// @param orders An array of Order struct containing order specifications.\n    /// @param takerAssetFillAmount A number representing the amount of this order to fill.\n    /// @return totalFillResults Amounts filled and fees paid by maker and taker.\n    function calculateMarketSellResults(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount\n    )\n        internal\n        view\n        returns (FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            uint256 remainingTakerAssetFillAmount = safeSub(takerAssetFillAmount, totalFillResults.takerAssetFilledAmount);\n            FillResults memory singleFillResult = calculateFillResults(orders[i], remainingTakerAssetFillAmount);\n            addFillResults(totalFillResults, singleFillResult);\n            if (totalFillResults.takerAssetFilledAmount == takerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Calculates a total FillResults for buying makerAssetFillAmount over all orders.\n    ///      Including the fees required to be paid. \n    /// @param orders An array of Order struct containing order specifications.\n    /// @param makerAssetFillAmount A number representing the amount of this order to fill.\n    /// @return totalFillResults Amounts filled and fees paid by maker and taker.\n    function calculateMarketBuyResults(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount\n    )\n        public\n        view\n        returns (FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            uint256 remainingMakerAssetFillAmount = safeSub(makerAssetFillAmount, totalFillResults.makerAssetFilledAmount);\n            uint256 remainingTakerAssetFillAmount = getPartialAmount(\n                orders[i].takerAssetAmount,\n                orders[i].makerAssetAmount,\n                remainingMakerAssetFillAmount\n            );\n            FillResults memory singleFillResult = calculateFillResults(orders[i], remainingTakerAssetFillAmount);\n            addFillResults(totalFillResults, singleFillResult);\n            if (totalFillResults.makerAssetFilledAmount == makerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Calculates fill results for buyFeeTokens. This handles fees on buying ZRX\n    ///      so the end result is the expected amount of ZRX (not less after fees).\n    /// @param orders An array of Order struct containing order specifications.\n    /// @param zrxFillAmount A number representing the amount zrx to buy\n    /// @return totalFillResults Expected fill result amounts from buying fees\n    function calculateMarketBuyZrxResults(\n        LibOrder.Order[] memory orders,\n        uint256 zrxFillAmount\n    )\n        public\n        view\n        returns (FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            uint256 remainingZrxFillAmount = safeSub(zrxFillAmount, totalFillResults.makerAssetFilledAmount);\n            // Convert the remaining amount of makerToken to buy into remaining amount\n            // of takerToken to sell, assuming entire amount can be sold in the current order\n            uint256 remainingWethSellAmount = getPartialAmount(\n                orders[i].takerAssetAmount,\n                safeSub(orders[i].makerAssetAmount, orders[i].takerFee), // our exchange rate after fees \n                remainingZrxFillAmount\n            );\n            FillResults memory singleFillResult = calculateFillResults(orders[i], safeAdd(remainingWethSellAmount, 1));\n\n            singleFillResult.makerAssetFilledAmount = safeSub(singleFillResult.makerAssetFilledAmount, singleFillResult.takerFeePaid);\n            addFillResults(totalFillResults, singleFillResult);\n            // As we compensate for the rounding issue above have slightly more ZRX than the requested zrxFillAmount\n            if (totalFillResults.makerAssetFilledAmount >= zrxFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n}\n",
		"2.0.0/forwarder/MixinMarketBuyTokens.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../utils/LibBytes/LibBytes.sol\";\nimport \"./MixinWethFees.sol\";\nimport \"./MixinMarketBuyZrx.sol\";\nimport \"./MixinExpectedResults.sol\";\nimport \"./MixinERC20.sol\";\nimport \"./MixinERC721.sol\";\nimport \"./MixinConstants.sol\";\nimport \"../protocol/Exchange/libs/LibOrder.sol\";\n\ncontract MixinMarketBuyTokens is\n    MixinConstants,\n    MixinWethFees,\n    MixinMarketBuyZrx,\n    MixinExpectedResults,\n    MixinERC20,\n    MixinERC721\n{\n    bytes4 public constant ERC20_DATA_ID = bytes4(keccak256(\"ERC20Token(address)\"));\n    bytes4 public constant ERC721_DATA_ID = bytes4(keccak256(\"ERC721Token(address,uint256,bytes)\"));\n\n    /// @dev Buys the exact amount of assets (ERC20 and ERC721), performing fee abstraction if required.\n    ///      All order assets must be of the same type. Deducts a proportional fee to fee recipient.\n    ///      This function is payable and will convert all incoming ETH into WETH and perform the trade on behalf of the caller.\n    ///      The caller is sent all assets from the fill of orders. This function will revert unless the requested amount of assets are purchased.\n    ///      Any excess ETH sent will be returned to the caller\n    /// @param orders An array of Order struct containing order specifications.\n    /// @param signatures An array of Proof that order has been created by maker.\n    /// @param feeOrders An array of Order struct containing order specifications for fees.\n    /// @param makerTokenFillAmount The amount of maker asset to buy.\n    /// @param feeSignatures An array of Proof that order has been created by maker for the fee orders.\n    /// @param feeProportion A proportion deducted off the ETH spent and sent to feeRecipient. The maximum value for this\n    ///        is 1000, aka 10%. Supports up to 2 decimal places. I.e 0.59% is 59.\n    /// @param feeRecipient An address of the fee recipient whom receives feeProportion of ETH.\n    /// @return FillResults amounts filled and fees paid by maker and taker.\n    function marketBuyTokensWithEth(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        LibOrder.Order[] memory feeOrders,\n        bytes[] memory feeSignatures,\n        uint256 makerTokenFillAmount,\n        uint16  feeProportion,\n        address feeRecipient\n    )\n        payable\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        uint256 takerEthAmount = msg.value;\n        require(\n            takerEthAmount > 0,\n            \"VALUE_GREATER_THAN_ZERO\"\n        );\n        require(\n            makerTokenFillAmount > 0,\n            \"VALUE_GREATER_THAN_ZERO\"\n        );\n        bytes4 assetDataId = LibBytes.readBytes4(orders[0].makerAssetData, 0);\n        require(\n            assetDataId == ERC20_DATA_ID || assetDataId == ERC721_DATA_ID,\n            \"UNSUPPORTED_TOKEN_PROXY\"\n        );\n\n        ETHER_TOKEN.deposit.value(takerEthAmount)();\n        if (assetDataId == ERC20_DATA_ID) {\n            totalFillResults = marketBuyERC20TokensInternal(\n                orders,\n                signatures,\n                feeOrders,\n                feeSignatures,\n                makerTokenFillAmount\n            );\n        } else if (assetDataId == ERC721_DATA_ID) {\n            totalFillResults = batchBuyERC721TokensInternal(\n                orders,\n                signatures,\n                feeOrders,\n                feeSignatures\n            );\n        }\n        // Prevent accidental WETH owned by this contract and it being spent\n        require(\n            takerEthAmount >= totalFillResults.takerAssetFilledAmount,\n            \"INVALID_MSG_VALUE\"\n        );\n        withdrawPayAndDeductEthFee(\n            safeSub(takerEthAmount, totalFillResults.takerAssetFilledAmount),\n            totalFillResults.takerAssetFilledAmount,\n            feeProportion,\n            feeRecipient\n        );\n        return totalFillResults;\n    }\n\n    /// @dev Buys an exact amount of an ERC20 token using WETH.\n    /// @param orders Orders to fill. The maker asset is the ERC20 token to buy. The taker asset is WETH.\n    /// @param signatures Proof that the orders were created by their respective makers.\n    /// @param feeOrders to fill. The maker asset is ZRX and the taker asset is WETH.\n    /// @param feeSignatures Proof that the feeOrders were created by their respective makers.\n    /// @param makerTokenFillAmount Amount of the ERC20 token to buy.\n    /// @return totalFillResults Aggregated fill results of buying the ERC20 and ZRX tokens.\n    function marketBuyERC20TokensInternal(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        LibOrder.Order[] memory feeOrders,\n        bytes[] memory feeSignatures,\n        uint256 makerTokenFillAmount\n    )\n        private\n        returns (FillResults memory totalFillResults)\n    {\n        // We read the maker token address to check if it is ZRX and later use it for transfer\n        address makerTokenAddress = LibBytes.readAddress(orders[0].makerAssetData, 16);\n        // We assume that asset being bought by taker is the same for each order.\n        // Rather than passing this in as calldata, we copy the makerAssetData from the first order onto all later orders.\n        orders[0].takerAssetData = WETH_ASSET_DATA;\n        // We can short cut here for effeciency and use buyFeeTokensInternal if maker asset token is ZRX\n        // this buys us exactly that amount taking into account the fees. This saves gas and calculates the rate correctly\n        FillResults memory marketBuyResults;\n        if (makerTokenAddress == address(ZRX_TOKEN)) {\n            marketBuyResults = marketBuyZrxInternal(\n                orders,\n                signatures,\n                makerTokenFillAmount\n            );\n            // When buying ZRX we round up which can result in a small margin excess\n            require(\n                marketBuyResults.makerAssetFilledAmount >= makerTokenFillAmount,\n                \"UNACCEPTABLE_THRESHOLD\"\n            );\n            addFillResults(totalFillResults, marketBuyResults);\n            require(\n                isAcceptableThreshold(\n                    safeAdd(totalFillResults.makerAssetFilledAmount, totalFillResults.takerFeePaid), // Total ZRX\n                    totalFillResults.makerAssetFilledAmount // amount going to msg.sender\n                ),\n                \"UNACCEPTABLE_THRESHOLD\"\n            );\n        } else {\n            FillResults memory calculatedMarketBuyResults = calculateMarketBuyResults(orders, makerTokenFillAmount);\n            if (calculatedMarketBuyResults.takerFeePaid > 0) {\n                // Fees are required for these orders. Buy enough ZRX to cover the future market buy\n                FillResults memory zrxMarketBuyResults = marketBuyZrxInternal(\n                    feeOrders,\n                    feeSignatures,\n                    calculatedMarketBuyResults.takerFeePaid\n                );\n                totalFillResults.takerAssetFilledAmount = zrxMarketBuyResults.takerAssetFilledAmount;\n                totalFillResults.takerFeePaid = zrxMarketBuyResults.takerFeePaid;\n            }\n            // Make our market buy of the requested tokens with the remaining balance\n            marketBuyResults = EXCHANGE.marketBuyOrders(\n                orders,\n                makerTokenFillAmount,\n                signatures\n            );\n            require(\n                marketBuyResults.makerAssetFilledAmount == makerTokenFillAmount,\n                \"UNACCEPTABLE_THRESHOLD\"\n            );\n            addFillResults(totalFillResults, marketBuyResults);\n            require(\n                isAcceptableThreshold(\n                    totalFillResults.takerAssetFilledAmount,\n                    marketBuyResults.takerAssetFilledAmount\n                ),\n                \"UNACCEPTABLE_THRESHOLD\"\n            );\n        }\n        // Transfer all purchased tokens to msg.sender\n        transferToken(\n            makerTokenAddress,\n            msg.sender,\n            marketBuyResults.makerAssetFilledAmount\n        );\n        return totalFillResults;\n    }\n\n    /// @dev Buys an all of the ERC721 tokens in the orders.\n    /// @param orders Orders to fill. The maker asset is the ERC721 token to buy. The taker asset is WETH.\n    /// @param signatures Proof that the orders were created by their respective makers.\n    /// @param feeOrders to fill. The maker asset is ZRX and the taker asset is WETH.\n    /// @param feeSignatures Proof that the feeOrders were created by their respective makers.\n    /// @return totalFillResults Aggregated fill results of buying the ERC721 tokens and ZRX tokens.\n    function batchBuyERC721TokensInternal(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        LibOrder.Order[] memory feeOrders,\n        bytes[] memory feeSignatures\n    )\n        private\n        returns (FillResults memory totalFillResults)\n    {\n        uint256 totalZrxFeeAmount;\n        uint256 ordersLength = orders.length;\n        uint256[] memory takerAssetFillAmounts = new uint256[](ordersLength);\n        for (uint256 i = 0; i < ordersLength; i++) {\n            // Total up the fees\n            totalZrxFeeAmount = safeAdd(totalZrxFeeAmount, orders[i].takerFee);\n            // We assume that asset being bought by taker is the same for each order.\n            // Rather than passing this in as calldata, we set the takerAssetData as WETH asset data\n            orders[i].takerAssetData = WETH_ASSET_DATA;\n            // Populate takerAssetFillAmounts for later batchFill\n            takerAssetFillAmounts[i] = orders[i].takerAssetAmount;\n        }\n        if (totalZrxFeeAmount > 0) {\n            // Fees are required for these orders. Buy enough ZRX to cover the future fill\n            FillResults memory zrxMarketBuyResults = marketBuyZrxInternal(\n                feeOrders,\n                feeSignatures,\n                totalZrxFeeAmount\n            );\n            totalFillResults.takerFeePaid = zrxMarketBuyResults.takerFeePaid;\n            totalFillResults.takerAssetFilledAmount = zrxMarketBuyResults.takerAssetFilledAmount;\n        }\n        FillResults memory batchFillResults = EXCHANGE.batchFillOrKillOrders(\n            orders,\n            takerAssetFillAmounts,\n            signatures\n        );\n        addFillResults(totalFillResults, batchFillResults);\n        require(\n            isAcceptableThreshold(\n                totalFillResults.takerAssetFilledAmount,\n                batchFillResults.takerAssetFilledAmount\n            ),\n            \"UNACCEPTABLE_THRESHOLD\"\n        );\n        // Transfer all of the tokens filled from the batchFill\n        for (i = 0; i < ordersLength; i++) {\n            transferERC721Token(\n                orders[i].makerAssetData,\n                msg.sender\n            );\n        }\n        return totalFillResults;\n    }\n}\n",
		"2.0.0/forwarder/MixinMarketBuyZrx.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../protocol/Exchange/Exchange.sol\";\nimport \"../protocol/Exchange/libs/LibFillResults.sol\";\nimport \"../protocol/Exchange/libs/LibOrder.sol\";\nimport \"../protocol/Exchange/libs/LibMath.sol\";\nimport \"./MixinConstants.sol\";\n\ncontract MixinMarketBuyZrx is\n    LibMath,\n    LibFillResults,\n    MixinConstants\n{\n    /// @dev Buys zrxBuyAmount of ZRX fee tokens, taking into account the fees on buying fee tokens. This will guarantee\n    ///      At least zrxBuyAmount of ZRX fee tokens are purchased (sometimes slightly over due to rounding issues).\n    ///      It is possible that a request to buy 200 ZRX fee tokens will require purchasing 202 ZRX tokens\n    ///      As 2 ZRX is required to purchase the 200 ZRX fee tokens. This guarantees at least 200 ZRX for future purchases.\n    /// @param orders An array of Order struct containing order specifications for fees.\n    /// @param signatures An array of Proof that order has been created by maker for the fee orders.\n    /// @param zrxBuyAmount The number of requested ZRX fee tokens.\n    /// @return totalFillResults Amounts filled and fees paid by maker and taker. makerTokenAmount is the zrx amount deducted of fees\n    function marketBuyZrxInternal(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        uint256 zrxBuyAmount\n    )\n        internal\n        returns (FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            // All of these are ZRX/WETH, we can drop the respective assetData from callData\n            orders[i].makerAssetData = ZRX_ASSET_DATA;\n            orders[i].takerAssetData = WETH_ASSET_DATA;\n            // Calculate the remaining amount of makerToken to buy\n            uint256 remainingZrxBuyAmount = safeSub(zrxBuyAmount, totalFillResults.makerAssetFilledAmount);\n            // Convert the remaining amount of makerToken to buy into remaining amount\n            // of takerToken to sell, assuming entire amount can be sold in the current order\n            uint256 remainingWethSellAmount = getPartialAmount(\n                orders[i].takerAssetAmount,\n                safeSub(orders[i].makerAssetAmount, orders[i].takerFee), // our exchange rate after fees \n                remainingZrxBuyAmount\n            );\n            // Attempt to sell the remaining amount of takerToken\n            // Round up the amount to ensure we don't under buy by a fractional amount\n            FillResults memory singleFillResult = EXCHANGE.fillOrder(\n                orders[i],\n                safeAdd(remainingWethSellAmount, 1),\n                signatures[i]\n            );\n            // We didn't buy the full amount when buying ZRX as some were taken for fees\n            singleFillResult.makerAssetFilledAmount = safeSub(singleFillResult.makerAssetFilledAmount, singleFillResult.takerFeePaid);\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResult);\n            // Stop execution if the entire amount of makerToken has been bought\n            if (totalFillResults.makerAssetFilledAmount >= zrxBuyAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n}\n",
		"2.0.0/forwarder/MixinMarketSellTokens.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../protocol/Exchange/libs/LibOrder.sol\";\nimport \"../utils/LibBytes/LibBytes.sol\";\nimport \"./MixinWethFees.sol\";\nimport \"./MixinExpectedResults.sol\";\nimport \"./MixinERC20.sol\";\nimport \"./MixinConstants.sol\";\nimport \"./MixinMarketBuyZrx.sol\";\n\ncontract MixinMarketSellTokens is\n    MixinConstants,\n    MixinWethFees,\n    MixinMarketBuyZrx,\n    MixinExpectedResults,\n    MixinERC20\n{\n    /// @dev Market sells ETH for ERC20 tokens, performing fee abstraction if required. This does not support ERC721 tokens. This function is payable\n    ///      and will convert all incoming ETH into WETH and perform the trade on behalf of the caller.\n    ///      This function allows for a deduction of a proportion of incoming ETH sent to the feeRecipient.\n    ///      The caller is sent all tokens from the operation.\n    ///      If the purchased token amount does not meet an acceptable threshold then this function reverts.\n    /// @param orders An array of Order struct containing order specifications.\n    /// @param signatures An array of Proof that order has been created by maker.\n    /// @param feeOrders An array of Order struct containing order specifications for fees.\n    /// @param feeSignatures An array of Proof that order has been created by maker for the fee orders.\n    /// @param feeProportion A proportion deducted off the incoming ETH and sent to feeRecipient. The maximum value for this\n    ///        is 1000, aka 10%. Supports up to 2 decimal places. I.e 0.59% is 59.\n    /// @param feeRecipient An address of the fee recipient whom receives feeProportion of ETH.\n    /// @return FillResults amounts filled and fees paid by maker and taker.\n    function marketSellEthForERC20(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        LibOrder.Order[] memory feeOrders,\n        bytes[] memory feeSignatures,\n        uint16  feeProportion,\n        address feeRecipient\n    )\n        payable\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        uint256 takerEthAmount = msg.value;\n        require(\n            takerEthAmount > 0,\n            \"VALUE_GREATER_THAN_ZERO\"\n        );\n        // Deduct the fee from the total amount of ETH sent in\n        uint256 ethFeeAmount = payEthFee(\n            takerEthAmount,\n            feeProportion,\n            feeRecipient\n        );\n        uint256 wethSellAmount = safeSub(takerEthAmount, ethFeeAmount);\n\n        // Deposit the remaining to be used for trading\n        ETHER_TOKEN.deposit.value(wethSellAmount)();\n        // Populate the known assetData, as it is always WETH the caller can provide null bytes to save gas\n        // marketSellOrders fills the remaining\n        address makerTokenAddress = LibBytes.readAddress(orders[0].makerAssetData, 16);\n        orders[0].takerAssetData = WETH_ASSET_DATA;\n        if (makerTokenAddress == address(ZRX_TOKEN)) {\n            // If this is ZRX then we market sell from the orders, rather than a 2 step of buying ZRX fees from feeOrders\n            // then buying ZRX from orders\n            totalFillResults = marketSellEthForZRXInternal(\n                orders,\n                signatures,\n                wethSellAmount\n            );\n        } else {\n            totalFillResults = marketSellEthForERC20Internal(\n                orders,\n                signatures,\n                feeOrders,\n                feeSignatures,\n                wethSellAmount\n            );\n        }\n        // Prevent accidental WETH owned by this contract and it being spent\n        require(\n            takerEthAmount >= totalFillResults.takerAssetFilledAmount,\n            \"INVALID_MSG_VALUE\"\n        );\n        // Ensure no WETH is left in this contract\n        require(\n            wethSellAmount == totalFillResults.takerAssetFilledAmount,\n            \"UNACCEPTABLE_THRESHOLD\"\n        );\n        // Transfer all tokens to msg.sender\n        transferToken(\n            makerTokenAddress,\n            msg.sender,\n            totalFillResults.makerAssetFilledAmount\n        );\n        return totalFillResults;\n    }\n\n    /// @dev Market sells WETH for ERC20 tokens.\n    /// @param orders An array of Order struct containing order specifications.\n    /// @param signatures An array of Proof that order has been created by maker.\n    /// @param feeOrders An array of Order struct containing order specifications for fees.\n    /// @param feeSignatures An array of Proof that order has been created by maker for the fee orders.\n    /// @param wethSellAmount The amount of WETH to sell.\n    /// @return FillResults amounts filled and fees paid by maker and taker.\n    function marketSellEthForERC20Internal(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        LibOrder.Order[] memory feeOrders,\n        bytes[] memory feeSignatures,\n        uint256 wethSellAmount\n    )\n        internal\n        returns (FillResults memory totalFillResults)\n    {\n        uint256 remainingWethSellAmount = wethSellAmount;\n        FillResults memory calculatedMarketSellResults = calculateMarketSellResults(orders, wethSellAmount);\n        if (calculatedMarketSellResults.takerFeePaid > 0) {\n            // Fees are required for these orders. Buy enough ZRX to cover the future market buy\n            FillResults memory feeTokensResults = marketBuyZrxInternal(\n                feeOrders,\n                feeSignatures,\n                calculatedMarketSellResults.takerFeePaid\n            );\n            // Ensure the token abstraction was fair if fees were proportionally too high, we fail\n            require(\n                isAcceptableThreshold(\n                    wethSellAmount,\n                    safeSub(wethSellAmount, feeTokensResults.takerAssetFilledAmount)\n                ),\n                \"UNACCEPTABLE_THRESHOLD\"\n            );\n            remainingWethSellAmount = safeSub(remainingWethSellAmount, feeTokensResults.takerAssetFilledAmount);\n            totalFillResults.takerFeePaid = feeTokensResults.takerFeePaid;\n            totalFillResults.takerAssetFilledAmount = feeTokensResults.takerAssetFilledAmount;\n        }\n        // Make our market sell to buy the requested tokens with the remaining balance\n        FillResults memory requestedTokensResults = EXCHANGE.marketSellOrders(\n            orders,\n            remainingWethSellAmount,\n            signatures\n        );\n        // Update our return FillResult with the market sell\n        addFillResults(totalFillResults, requestedTokensResults);\n        return totalFillResults;\n    }\n\n    /// @dev Market sells WETH for ZRX tokens.\n    /// @param orders An array of Order struct containing order specifications.\n    /// @param signatures An array of Proof that order has been created by maker.\n    /// @param wethSellAmount The amount of WETH to sell.\n    /// @return FillResults amounts filled and fees paid by maker and taker.\n    function marketSellEthForZRXInternal(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        uint256 wethSellAmount\n    )\n        internal\n        returns (FillResults memory totalFillResults)\n    {\n        // Make our market sell to buy the requested tokens with the remaining balance\n        totalFillResults = EXCHANGE.marketSellOrders(\n            orders,\n            wethSellAmount,\n            signatures\n        );\n        // Exchange does not special case ZRX in the makerAssetFilledAmount, if fees were deducted then using this amount\n        // for future transfers is invalid.\n        uint256 zrxAmountBought = safeSub(totalFillResults.makerAssetFilledAmount, totalFillResults.takerFeePaid);\n        require(\n            isAcceptableThreshold(totalFillResults.makerAssetFilledAmount, zrxAmountBought),\n            \"UNACCEPTABLE_THRESHOLD\"\n        );\n        totalFillResults.makerAssetFilledAmount = zrxAmountBought;\n        return totalFillResults;\n    }\n\n}\n",
		"2.0.0/forwarder/MixinWethFees.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport { WETH9 as EtherToken } from \"../tokens/WETH9/WETH9.sol\";\nimport \"../protocol/Exchange/libs/LibMath.sol\";\nimport \"./MixinConstants.sol\";\n\ncontract MixinWethFees is\n    LibMath,\n    MixinConstants\n{\n\n    uint16  constant public PERCENTAGE_DENOMINATOR = 10000; // 9800 == 98%, 10000 == 100%\n    uint16  constant public MAX_FEE = 1000; // 10%\n    uint16  constant public ALLOWABLE_EXCHANGE_PERCENTAGE = 9500; // 95%\n\n    /// @dev Pays the feeRecipient feeProportion of the total takerEthAmount, denominated in ETH\n    /// @param takerEthAmount The total amount that was transacted in WETH, fees are calculated from this value.\n    /// @param feeProportion The proportion of fees\n    /// @param feeRecipient The recipient of the fees\n    /// @return ethFeeAmount Amount of ETH paid to feeRecipient as fee.\n    function payEthFee(\n        uint256 takerEthAmount,\n        uint16 feeProportion,\n        address feeRecipient\n    )\n        internal\n        returns (uint256 ethFeeAmount)\n    {\n        if (feeProportion > 0 && feeRecipient != address(0)) {\n            require(\n                feeProportion <= MAX_FEE,\n                \"FEE_PROPORTION_TOO_LARGE\"\n            );\n            // 1.5% is 150, allowing for 2 decimal precision, i.e 0.05% is 5\n            ethFeeAmount = getPartialAmount(\n                feeProportion,\n                PERCENTAGE_DENOMINATOR,\n                takerEthAmount\n            );\n            feeRecipient.transfer(ethFeeAmount);\n        }\n        return ethFeeAmount;\n    }\n\n    /// @dev Withdraws the remaining WETH, deduct and pay fees from this amount based on the takerTokenAmount to the feeRecipient.\n    ///      If a user overpaid ETH initially, the fees are calculated from the amount traded and deducted from withdrawAmount.\n    ///      Any remaining ETH is sent back to the user.\n    /// @param ethWithdrawAmount The amount to withdraw from the WETH contract.\n    /// @param wethAmountSold The total amount that was transacted in WETH, fees are calculated from this value.\n    /// @param feeProportion The proportion of fees\n    /// @param feeRecipient The recipient of the fees\n    function withdrawPayAndDeductEthFee(\n        uint256 ethWithdrawAmount,\n        uint256 wethAmountSold,\n        uint16 feeProportion,\n        address feeRecipient\n    )\n        internal\n    {\n        // Return all of the excess WETH if any after deducting fees on the amount\n        if (ethWithdrawAmount > 0) {\n            ETHER_TOKEN.withdraw(ethWithdrawAmount);\n            // Fees proportional to the amount traded\n            uint256 ethFeeAmount = payEthFee(\n                wethAmountSold,\n                feeProportion,\n                feeRecipient\n            );\n            uint256 unspentEthAmount = safeSub(ethWithdrawAmount, ethFeeAmount);\n            if (unspentEthAmount > 0) {\n                msg.sender.transfer(unspentEthAmount);\n            }\n        }\n    }\n\n    /// @dev Checks whether the amount of tokens sold against the amount of tokens requested\n    ///      is within a certain threshold. This ensures the caller gets a fair deal when\n    ///      performing any token fee abstraction. Threshold is 95%. If fee abstraction costs more than\n    ///      5% of the total transaction, we return false.\n    /// @param requestedSellAmount The amount the user requested, or sent in to a payable function\n    /// @param tokenAmountSold The amount of the token that was sold after fee abstraction\n    /// @return bool of whether this is within an acceptable threshold\n    function isAcceptableThreshold(uint256 requestedSellAmount, uint256 tokenAmountSold)\n        internal\n        pure\n        returns (bool)\n    {\n        uint256 acceptableSellAmount = getPartialAmount(\n            ALLOWABLE_EXCHANGE_PERCENTAGE,\n            PERCENTAGE_DENOMINATOR,\n            requestedSellAmount\n        );\n        return tokenAmountSold >= acceptableSellAmount;\n    }\n}\n",
		"2.0.0/protocol/AssetProxy/interfaces/IAssetProxy.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./IAuthorizable.sol\";\n\ncontract IAssetProxy is\n    IAuthorizable\n{\n\n    /// @dev Transfers assets. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    function transferFrom(\n        bytes assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        external;\n    \n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        pure\n        returns (bytes4);\n}\n",
		"2.0.0/protocol/AssetProxy/interfaces/IAuthorizable.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../../utils/Ownable/IOwnable.sol\";\n\ncontract IAuthorizable is\n    IOwnable\n{\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[]);\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n}\n",
		"2.0.0/protocol/Exchange/Exchange.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./libs/LibConstants.sol\";\nimport \"./MixinExchangeCore.sol\";\nimport \"./MixinSignatureValidator.sol\";\nimport \"./MixinWrapperFunctions.sol\";\nimport \"./MixinAssetProxyDispatcher.sol\";\nimport \"./MixinTransactions.sol\";\nimport \"./MixinMatchOrders.sol\";\n\ncontract Exchange is\n    MixinExchangeCore,\n    MixinMatchOrders,\n    MixinSignatureValidator,\n    MixinTransactions,\n    MixinAssetProxyDispatcher,\n    MixinWrapperFunctions\n{\n\n    string constant public VERSION = \"2.0.1-alpha\";\n\n    // Mixins are instantiated in the order they are inherited\n    constructor (bytes memory _zrxAssetData)\n        public\n        LibConstants(_zrxAssetData) // @TODO: Remove when we deploy.\n        MixinExchangeCore()\n        MixinMatchOrders()\n        MixinSignatureValidator()\n        MixinTransactions()\n        MixinAssetProxyDispatcher()\n        MixinWrapperFunctions()\n    {}\n}\n",
		"2.0.0/protocol/Exchange/MixinAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../../utils/Ownable/Ownable.sol\";\nimport \"../../utils/LibBytes/LibBytes.sol\";\nimport \"./mixins/MAssetProxyDispatcher.sol\";\nimport \"../AssetProxy/interfaces/IAssetProxy.sol\";\n\ncontract MixinAssetProxyDispatcher is\n    Ownable,\n    MAssetProxyDispatcher\n{\n    using LibBytes for bytes;\n    \n    // Mapping from Asset Proxy Id's to their respective Asset Proxy\n    mapping (bytes4 => IAssetProxy) public assetProxies;\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external\n        onlyOwner\n    {\n        IAssetProxy assetProxyContract = IAssetProxy(assetProxy);\n\n        // Ensure that no asset proxy exists with current id.\n        bytes4 assetProxyId = assetProxyContract.getProxyId();\n        address currentAssetProxy = assetProxies[assetProxyId];\n        require(\n            currentAssetProxy == address(0),\n            \"ASSET_PROXY_ALREADY_EXISTS\"\n        );\n\n        // Add asset proxy and log registration.\n        assetProxies[assetProxyId] = assetProxyContract;\n        emit AssetProxyRegistered(\n            assetProxyId,\n            assetProxy\n        );\n    }\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address)\n    {\n        return assetProxies[assetProxyId];\n    }\n\n    /// @dev Forwards arguments to assetProxy and calls `transferFrom`. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the asset.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param amount Amount of token to transfer.\n    function dispatchTransferFrom(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        // Do nothing if no amount should be transferred.\n        if (amount > 0) {\n            // Ensure assetData length is valid\n            require(\n                assetData.length > 3,\n                \"LENGTH_GREATER_THAN_3_REQUIRED\"\n            );\n            \n            // Lookup assetProxy\n            bytes4 assetProxyId;\n            assembly {\n                assetProxyId := and(mload(\n                    add(assetData, 32)),\n                    0xFFFFFFFF00000000000000000000000000000000000000000000000000000000\n                )\n            }\n            address assetProxy = assetProxies[assetProxyId];\n\n            // Ensure that assetProxy exists\n            require(\n                assetProxy != address(0),\n                \"ASSET_PROXY_DOES_NOT_EXIST\"\n            );\n            \n            // We construct calldata for the `assetProxy.transferFrom` ABI.\n            // The layout of this calldata is in the table below.\n            // \n            // | Area     | Offset | Length  | Contents                                    |\n            // | -------- |--------|---------|-------------------------------------------- |\n            // | Header   | 0      | 4       | function selector                           |\n            // | Params   |        | 4 * 32  | function parameters:                        |\n            // |          | 4      |         |   1. offset to assetData (*)                |\n            // |          | 36     |         |   2. from                                   |\n            // |          | 68     |         |   3. to                                     |\n            // |          | 100    |         |   4. amount                                 |\n            // | Data     |        |         | assetData:                                  |\n            // |          | 132    | 32      | assetData Length                            |\n            // |          | 164    | **      | assetData Contents                          |\n\n            assembly {\n                /////// Setup State ///////\n                // `cdStart` is the start of the calldata for `assetProxy.transferFrom` (equal to free memory ptr).\n                let cdStart := mload(64)\n                // `dataAreaLength` is the total number of words needed to store `assetData`\n                //  As-per the ABI spec, this value is padded up to the nearest multiple of 32,\n                //  and includes 32-bytes for length.\n                let dataAreaLength := and(add(mload(assetData), 63), 0xFFFFFFFFFFFE0)\n                // `cdEnd` is the end of the calldata for `assetProxy.transferFrom`.\n                let cdEnd := add(cdStart, add(132, dataAreaLength))\n\n                \n                /////// Setup Header Area ///////\n                // This area holds the 4-byte `transferFromSelector`.\n                // bytes4(keccak256(\"transferFrom(bytes,address,address,uint256)\")) = 0xa85e59e4\n                mstore(cdStart, 0xa85e59e400000000000000000000000000000000000000000000000000000000)\n                \n                /////// Setup Params Area ///////\n                // Each parameter is padded to 32-bytes. The entire Params Area is 128 bytes.\n                // Notes:\n                //   1. The offset to `assetData` is the length of the Params Area (128 bytes).\n                //   2. A 20-byte mask is applied to addresses to zero-out the unused bytes.\n                mstore(add(cdStart, 4), 128)\n                mstore(add(cdStart, 36), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\n                mstore(add(cdStart, 68), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\n                mstore(add(cdStart, 100), amount)\n                \n                /////// Setup Data Area ///////\n                // This area holds `assetData`.\n                let dataArea := add(cdStart, 132)\n                for {} lt(dataArea, cdEnd) {} {\n                    mstore(dataArea, mload(assetData))\n                    dataArea := add(dataArea, 32)\n                    assetData := add(assetData, 32)\n                }\n\n                /////// Call `assetProxy.transferFrom` using the constructed calldata ///////\n                let success := call(\n                    gas,                    // forward all gas\n                    assetProxy,             // call address of asset proxy\n                    0,                      // don't send any ETH\n                    cdStart,                // pointer to start of input\n                    sub(cdEnd, cdStart),    // length of input  \n                    cdStart,                // write output over input\n                    512                     // reserve 512 bytes for output\n                )\n                if iszero(success) {\n                    revert(cdStart, returndatasize())\n                }\n            }\n        }\n    }\n}\n",
		"2.0.0/protocol/Exchange/MixinExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./libs/LibConstants.sol\";\nimport \"./libs/LibFillResults.sol\";\nimport \"./libs/LibOrder.sol\";\nimport \"./libs/LibMath.sol\";\nimport \"./mixins/MExchangeCore.sol\";\nimport \"./mixins/MSignatureValidator.sol\";\nimport \"./mixins/MTransactions.sol\";\nimport \"./mixins/MAssetProxyDispatcher.sol\";\n\ncontract MixinExchangeCore is\n    LibConstants,\n    LibMath,\n    LibOrder,\n    LibFillResults,\n    MAssetProxyDispatcher,\n    MExchangeCore,\n    MSignatureValidator,\n    MTransactions\n{\n    // Mapping of orderHash => amount of takerAsset already bought by maker\n    mapping (bytes32 => uint256) public filled;\n\n    // Mapping of orderHash => cancelled\n    mapping (bytes32 => bool) public cancelled;\n\n    // Mapping of makerAddress => senderAddress => lowest salt an order can have in order to be fillable\n    // Orders with specified senderAddress and with a salt less than their epoch to are considered cancelled\n    mapping (address => mapping (address => uint256)) public orderEpoch;\n\n    ////// Core exchange functions //////\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external\n    {\n        address makerAddress = getCurrentContextAddress();\n        // If this function is called via `executeTransaction`, we only update the orderEpoch for the makerAddress/msg.sender combination.\n        // This allows external filter contracts to add rules to how orders are cancelled via this function.\n        address senderAddress = makerAddress == msg.sender ? address(0) : msg.sender;\n\n        // orderEpoch is initialized to 0, so to cancelUpTo we need salt + 1\n        uint256 newOrderEpoch = targetOrderEpoch + 1;  \n        uint256 oldOrderEpoch = orderEpoch[makerAddress][senderAddress];\n\n        // Ensure orderEpoch is monotonically increasing\n        require(\n            newOrderEpoch > oldOrderEpoch, \n            \"INVALID_NEW_ORDER_EPOCH\"\n        );\n\n        // Update orderEpoch\n        orderEpoch[makerAddress][senderAddress] = newOrderEpoch;\n        emit CancelUpTo(makerAddress, senderAddress, newOrderEpoch);\n    }\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (FillResults memory fillResults)\n    {\n        // Fetch order info\n        OrderInfo memory orderInfo = getOrderInfo(order);\n\n        // Fetch taker address\n        address takerAddress = getCurrentContextAddress();\n\n        // Get amount of takerAsset to fill\n        uint256 remainingTakerAssetAmount = safeSub(order.takerAssetAmount, orderInfo.orderTakerAssetFilledAmount);\n        uint256 takerAssetFilledAmount = min256(takerAssetFillAmount, remainingTakerAssetAmount);\n\n        // Validate context\n        assertValidFill(\n            order,\n            orderInfo,\n            takerAddress,\n            takerAssetFillAmount,\n            takerAssetFilledAmount,\n            signature\n        );\n\n        // Compute proportional fill amounts\n        fillResults = calculateFillResults(order, takerAssetFilledAmount);\n\n        // Update exchange internal state\n        updateFilledState(\n            order,\n            takerAddress,\n            orderInfo.orderHash,\n            orderInfo.orderTakerAssetFilledAmount,\n            fillResults\n        );\n    \n        // Settle order\n        settleOrder(order, takerAddress, fillResults);\n\n        return fillResults;\n    }\n\n    /// @dev After calling, the order can not be filled anymore.\n    ///      Throws if order is invalid or sender does not have permission to cancel.\n    /// @param order Order to cancel. Order must be OrderStatus.FILLABLE.\n    function cancelOrder(Order memory order)\n        public\n    {\n        // Fetch current order status\n        OrderInfo memory orderInfo = getOrderInfo(order);\n\n        // Validate context\n        assertValidCancel(order, orderInfo);\n\n        // Perform cancel\n        updateCancelledState(order, orderInfo.orderHash);\n    }\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///         See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(Order memory order)\n        public\n        view\n        returns (OrderInfo memory orderInfo)\n    {\n        // Compute the order hash\n        orderInfo.orderHash = getOrderHash(order);\n\n        // If order.makerAssetAmount is zero, we also reject the order.\n        // While the Exchange contract handles them correctly, they create\n        // edge cases in the supporting infrastructure because they have\n        // an 'infinite' price when computed by a simple division.\n        if (order.makerAssetAmount == 0) {\n            orderInfo.orderStatus = uint8(OrderStatus.INVALID_MAKER_ASSET_AMOUNT);\n            return orderInfo;\n        }\n\n        // If order.takerAssetAmount is zero, then the order will always\n        // be considered filled because 0 == takerAssetAmount == orderTakerAssetFilledAmount\n        // Instead of distinguishing between unfilled and filled zero taker\n        // amount orders, we choose not to support them.\n        if (order.takerAssetAmount == 0) {\n            orderInfo.orderStatus = uint8(OrderStatus.INVALID_TAKER_ASSET_AMOUNT);\n            return orderInfo;\n        }\n\n        // Validate order expiration\n        if (block.timestamp >= order.expirationTimeSeconds) {\n            orderInfo.orderStatus = uint8(OrderStatus.EXPIRED);\n            return orderInfo;\n        }\n\n        // Check if order has been cancelled\n        if (cancelled[orderInfo.orderHash]) {\n            orderInfo.orderStatus = uint8(OrderStatus.CANCELLED);\n            return orderInfo;\n        }\n        if (orderEpoch[order.makerAddress][order.senderAddress] > order.salt) {\n            orderInfo.orderStatus = uint8(OrderStatus.CANCELLED);\n            return orderInfo;\n        }\n\n        // Fetch filled amount and validate order availability\n        orderInfo.orderTakerAssetFilledAmount = filled[orderInfo.orderHash];\n        if (orderInfo.orderTakerAssetFilledAmount >= order.takerAssetAmount) {\n            orderInfo.orderStatus = uint8(OrderStatus.FULLY_FILLED);\n            return orderInfo;\n        }\n\n        // All other statuses are ruled out: order is Fillable\n        orderInfo.orderStatus = uint8(OrderStatus.FILLABLE);\n        return orderInfo;\n    }\n\n    /// @dev Updates state with results of a fill order.\n    /// @param order that was filled.\n    /// @param takerAddress Address of taker who filled the order.\n    /// @param orderTakerAssetFilledAmount Amount of order already filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function updateFilledState(\n        Order memory order,\n        address takerAddress,\n        bytes32 orderHash,\n        uint256 orderTakerAssetFilledAmount,\n        FillResults memory fillResults\n    )\n        internal\n    {\n        // Update state\n        filled[orderHash] = safeAdd(orderTakerAssetFilledAmount, fillResults.takerAssetFilledAmount);\n\n        // Log order\n        emit Fill(\n            order.makerAddress,\n            order.feeRecipientAddress,\n            takerAddress,\n            msg.sender,\n            fillResults.makerAssetFilledAmount,\n            fillResults.takerAssetFilledAmount,\n            fillResults.makerFeePaid,\n            fillResults.takerFeePaid,\n            orderHash,\n            order.makerAssetData,\n            order.takerAssetData\n        );\n    }\n\n    /// @dev Updates state with results of cancelling an order.\n    ///      State is only updated if the order is currently fillable.\n    ///      Otherwise, updating state would have no effect.\n    /// @param order that was cancelled.\n    /// @param orderHash Hash of order that was cancelled.\n    function updateCancelledState(\n        Order memory order,\n        bytes32 orderHash\n    )\n        internal\n    {\n        // Perform cancel\n        cancelled[orderHash] = true;\n\n        // Log cancel\n        emit Cancel(\n            order.makerAddress,\n            order.feeRecipientAddress,\n            msg.sender,\n            orderHash,\n            order.makerAssetData,\n            order.takerAssetData\n        );\n    }\n\n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    /// @param takerAddress Address of order taker.\n    /// @param takerAssetFillAmount Desired amount of order to fill by taker.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param signature Proof that the orders was created by its maker.\n    function assertValidFill(\n        Order memory order,\n        OrderInfo memory orderInfo,\n        address takerAddress,\n        uint256 takerAssetFillAmount,\n        uint256 takerAssetFilledAmount,\n        bytes memory signature\n    )\n        internal\n        view\n    {\n        // An order can only be filled if its status is FILLABLE.\n        require(\n            orderInfo.orderStatus == uint8(OrderStatus.FILLABLE),\n            \"ORDER_UNFILLABLE\"\n        );\n\n        // Revert if fill amount is invalid\n        require(\n            takerAssetFillAmount != 0,\n            \"INVALID_TAKER_AMOUNT\"\n        );\n\n        // Validate sender is allowed to fill this order\n        if (order.senderAddress != address(0)) {\n            require(\n                order.senderAddress == msg.sender,\n                \"INVALID_SENDER\"\n            );\n        }\n\n        // Validate taker is allowed to fill this order\n        if (order.takerAddress != address(0)) {\n            require(\n                order.takerAddress == takerAddress,\n                \"INVALID_TAKER\"\n            );\n        }\n\n        // Validate Maker signature (check only if first time seen)\n        if (orderInfo.orderTakerAssetFilledAmount == 0) {\n            require(\n                isValidSignature(\n                    orderInfo.orderHash,\n                    order.makerAddress,\n                    signature\n                ),\n                \"INVALID_ORDER_SIGNATURE\"\n            );\n        }\n\n        // Validate fill order rounding\n        require(\n            !isRoundingError(\n                takerAssetFilledAmount,\n                order.takerAssetAmount,\n                order.makerAssetAmount\n            ),\n            \"ROUNDING_ERROR\"\n        );\n    }\n\n    /// @dev Validates context for cancelOrder. Succeeds or throws.\n    /// @param order to be cancelled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    function assertValidCancel(\n        Order memory order,\n        OrderInfo memory orderInfo\n    )\n        internal\n        view\n    {\n        // Ensure order is valid\n        // An order can only be cancelled if its status is FILLABLE.\n        require(\n            orderInfo.orderStatus == uint8(OrderStatus.FILLABLE),\n            \"ORDER_UNFILLABLE\"\n        );\n\n        // Validate sender is allowed to cancel this order\n        if (order.senderAddress != address(0)) {\n            require(\n                order.senderAddress == msg.sender,\n                \"INVALID_SENDER\"\n            );\n        }\n\n        // Validate transaction signed by maker\n        address makerAddress = getCurrentContextAddress();\n        require(\n            order.makerAddress == makerAddress,\n            \"INVALID_MAKER\"\n        );\n    }\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        Order memory order,\n        uint256 takerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (FillResults memory fillResults)\n    {\n        // Compute proportional transfer amounts\n        // TODO: All three are multiplied by the same fraction. This can\n        // potentially be optimized.\n        fillResults.takerAssetFilledAmount = takerAssetFilledAmount;\n        fillResults.makerAssetFilledAmount = getPartialAmount(\n            fillResults.takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerAssetAmount\n        );\n        fillResults.makerFeePaid = getPartialAmount(\n            fillResults.takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerFee\n        );\n        fillResults.takerFeePaid = getPartialAmount(\n            fillResults.takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.takerFee\n        );\n\n        return fillResults;\n    }\n\n    /// @dev Settles an order by transferring assets between counterparties.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAddress Address selling takerAsset and buying makerAsset.\n    /// @param fillResults Amounts to be filled and fees paid by maker and taker.\n    function settleOrder(\n        LibOrder.Order memory order,\n        address takerAddress,\n        LibFillResults.FillResults memory fillResults\n    )\n        private\n    {\n        bytes memory zrxAssetData = ZRX_ASSET_DATA;\n        dispatchTransferFrom(\n            order.makerAssetData,\n            order.makerAddress,\n            takerAddress,\n            fillResults.makerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            order.takerAssetData,\n            takerAddress,\n            order.makerAddress,\n            fillResults.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            zrxAssetData,\n            order.makerAddress,\n            order.feeRecipientAddress,\n            fillResults.makerFeePaid\n        );\n        dispatchTransferFrom(\n            zrxAssetData,\n            takerAddress,\n            order.feeRecipientAddress,\n            fillResults.takerFeePaid\n        );\n    }\n}\n",
		"2.0.0/protocol/Exchange/MixinMatchOrders.sol": "/*\n  Copyright 2018 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./libs/LibConstants.sol\";\nimport \"./libs/LibMath.sol\";\nimport \"./libs/LibOrder.sol\";\nimport \"./libs/LibFillResults.sol\";\nimport \"./mixins/MExchangeCore.sol\";\nimport \"./mixins/MMatchOrders.sol\";\nimport \"./mixins/MTransactions.sol\";\nimport \"./mixins/MAssetProxyDispatcher.sol\";\n\ncontract MixinMatchOrders is\n    LibConstants,\n    LibMath,\n    MAssetProxyDispatcher,\n    MExchangeCore,\n    MMatchOrders,\n    MTransactions\n{\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    /// TODO: Make this function external once supported by Solidity (See Solidity Issues #3199, #1603)\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        // We assume that rightOrder.takerAssetData == leftOrder.makerAssetData and rightOrder.makerAssetData == leftOrder.takerAssetData.\n        // If this assumption isn't true, the match will fail at signature validation.\n        rightOrder.makerAssetData = leftOrder.takerAssetData;\n        rightOrder.takerAssetData = leftOrder.makerAssetData;\n\n        // Get left & right order info\n        LibOrder.OrderInfo memory leftOrderInfo = getOrderInfo(leftOrder);\n        LibOrder.OrderInfo memory rightOrderInfo = getOrderInfo(rightOrder);\n\n        // Fetch taker address\n        address takerAddress = getCurrentContextAddress();\n\n        // Either our context is valid or we revert\n        assertValidMatch(leftOrder, rightOrder);\n\n        // Compute proportional fill amounts\n        matchedFillResults = calculateMatchedFillResults(\n            leftOrder,\n            rightOrder,\n            leftOrderInfo.orderTakerAssetFilledAmount,\n            rightOrderInfo.orderTakerAssetFilledAmount\n        );\n\n        // Validate fill contexts\n        assertValidFill(\n            leftOrder,\n            leftOrderInfo,\n            takerAddress,\n            matchedFillResults.left.takerAssetFilledAmount,\n            matchedFillResults.left.takerAssetFilledAmount,\n            leftSignature\n        );\n        assertValidFill(\n            rightOrder,\n            rightOrderInfo,\n            takerAddress,\n            matchedFillResults.right.takerAssetFilledAmount,\n            matchedFillResults.right.takerAssetFilledAmount,\n            rightSignature\n        );\n\n        // Update exchange state\n        updateFilledState(\n            leftOrder,\n            takerAddress,\n            leftOrderInfo.orderHash,\n            leftOrderInfo.orderTakerAssetFilledAmount,\n            matchedFillResults.left\n        );\n        updateFilledState(\n            rightOrder,\n            takerAddress,\n            rightOrderInfo.orderHash,\n            rightOrderInfo.orderTakerAssetFilledAmount,\n            matchedFillResults.right\n        );\n    \n        // Settle matched orders. Succeeds or throws.\n        settleMatchedOrders(\n            leftOrder,\n            rightOrder,\n            takerAddress,\n            matchedFillResults\n        );\n\n        return matchedFillResults;\n    }\n\n    /// @dev Validates context for matchOrders. Succeeds or throws.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    function assertValidMatch(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder\n    )\n        internal\n        pure\n    {\n        // Make sure there is a profitable spread.\n        // There is a profitable spread iff the cost per unit bought (OrderA.MakerAmount/OrderA.TakerAmount) for each order is greater\n        // than the profit per unit sold of the matched order (OrderB.TakerAmount/OrderB.MakerAmount).\n        // This is satisfied by the equations below:\n        // <leftOrder.makerAssetAmount> / <leftOrder.takerAssetAmount> >= <rightOrder.takerAssetAmount> / <rightOrder.makerAssetAmount>\n        // AND\n        // <rightOrder.makerAssetAmount> / <rightOrder.takerAssetAmount> >= <leftOrder.takerAssetAmount> / <leftOrder.makerAssetAmount>\n        // These equations can be combined to get the following:\n        require(\n            safeMul(leftOrder.makerAssetAmount, rightOrder.makerAssetAmount) >=\n            safeMul(leftOrder.takerAssetAmount, rightOrder.takerAssetAmount),\n            \"NEGATIVE_SPREAD_REQUIRED\"\n        );\n    }\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        // We settle orders at the exchange rate of the right order.\n        // The amount saved by the left maker goes to the taker.\n        // Either the left or right order will be fully filled; possibly both.\n        // The left order is fully filled iff the right order can sell more than left can buy.\n        // That is: the amount required to fill the left order is less than or equal to\n        //          the amount we can spend from the right order:\n        //          <leftTakerAssetAmountRemaining> <= <rightTakerAssetAmountRemaining> * <rightMakerToTakerRatio>\n        //          <leftTakerAssetAmountRemaining> <= <rightTakerAssetAmountRemaining> * <rightOrder.makerAssetAmount> / <rightOrder.takerAssetAmount>\n        //          <leftTakerAssetAmountRemaining> * <rightOrder.takerAssetAmount> <= <rightTakerAssetAmountRemaining> * <rightOrder.makerAssetAmount>\n        uint256 leftTakerAssetAmountRemaining = safeSub(leftOrder.takerAssetAmount, leftOrderTakerAssetFilledAmount);\n        uint256 rightTakerAssetAmountRemaining = safeSub(rightOrder.takerAssetAmount, rightOrderTakerAssetFilledAmount);\n        uint256 leftTakerAssetFilledAmount;\n        uint256 rightTakerAssetFilledAmount;\n        if (\n            safeMul(leftTakerAssetAmountRemaining, rightOrder.takerAssetAmount) <=\n            safeMul(rightTakerAssetAmountRemaining, rightOrder.makerAssetAmount)\n        ) {\n            // Left order will be fully filled: maximally fill left\n            leftTakerAssetFilledAmount = leftTakerAssetAmountRemaining;\n\n            // The right order receives an amount proportional to how much was spent.\n            // TODO: Can we ensure rounding error is in the correct direction?\n            rightTakerAssetFilledAmount = getPartialAmount(\n                rightOrder.takerAssetAmount,\n                rightOrder.makerAssetAmount,\n                leftTakerAssetFilledAmount\n            );\n        } else {\n            // Right order will be fully filled: maximally fill right\n            rightTakerAssetFilledAmount = rightTakerAssetAmountRemaining;\n\n            // The left order receives an amount proportional to how much was spent.\n            // TODO: Can we ensure rounding error is in the correct direction?\n            leftTakerAssetFilledAmount = getPartialAmount(\n                rightOrder.makerAssetAmount,\n                rightOrder.takerAssetAmount,\n                rightTakerAssetFilledAmount\n            );\n        }\n\n        // Calculate fill results for left order\n        matchedFillResults.left = calculateFillResults(\n            leftOrder,\n            leftTakerAssetFilledAmount\n        );\n\n        // Calculate fill results for right order\n        matchedFillResults.right = calculateFillResults(\n            rightOrder,\n            rightTakerAssetFilledAmount\n        );\n\n        // Calculate amount given to taker\n        matchedFillResults.leftMakerAssetSpreadAmount = safeSub(\n            matchedFillResults.left.makerAssetFilledAmount,\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n\n        // Return fill results\n        return matchedFillResults;\n    }\n\n    /// @dev Settles matched order by transferring appropriate funds between order makers, taker, and fee recipient.\n    /// @param leftOrder First matched order.\n    /// @param rightOrder Second matched order.\n    /// @param takerAddress Address that matched the orders. The taker receives the spread between orders as profit.\n    /// @param matchedFillResults Struct holding amounts to transfer between makers, taker, and fee recipients.\n    function settleMatchedOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        address takerAddress,\n        LibFillResults.MatchedFillResults memory matchedFillResults\n    )\n        private\n    {\n        bytes memory zrxAssetData = ZRX_ASSET_DATA;\n        // Order makers and taker\n        dispatchTransferFrom(\n            leftOrder.makerAssetData,\n            leftOrder.makerAddress,\n            rightOrder.makerAddress,\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            rightOrder.makerAssetData,\n            rightOrder.makerAddress,\n            leftOrder.makerAddress,\n            matchedFillResults.left.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            leftOrder.makerAssetData,\n            leftOrder.makerAddress,\n            takerAddress,\n            matchedFillResults.leftMakerAssetSpreadAmount\n        );\n\n        // Maker fees\n        dispatchTransferFrom(\n            zrxAssetData,\n            leftOrder.makerAddress,\n            leftOrder.feeRecipientAddress,\n            matchedFillResults.left.makerFeePaid\n        );\n        dispatchTransferFrom(\n            zrxAssetData,\n            rightOrder.makerAddress,\n            rightOrder.feeRecipientAddress,\n            matchedFillResults.right.makerFeePaid\n        );\n\n        // Taker fees\n        if (leftOrder.feeRecipientAddress == rightOrder.feeRecipientAddress) {\n            dispatchTransferFrom(\n                zrxAssetData,\n                takerAddress,\n                leftOrder.feeRecipientAddress,\n                safeAdd(\n                    matchedFillResults.left.takerFeePaid,\n                    matchedFillResults.right.takerFeePaid\n                )\n            );\n        } else {\n            dispatchTransferFrom(\n                zrxAssetData,\n                takerAddress,\n                leftOrder.feeRecipientAddress,\n                matchedFillResults.left.takerFeePaid\n            );\n            dispatchTransferFrom(\n                zrxAssetData,\n                takerAddress,\n                rightOrder.feeRecipientAddress,\n                matchedFillResults.right.takerFeePaid\n            );\n        }\n    }\n}\n",
		"2.0.0/protocol/Exchange/MixinSignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../../utils/LibBytes/LibBytes.sol\";\nimport \"./mixins/MSignatureValidator.sol\";\nimport \"./mixins/MTransactions.sol\";\nimport \"./interfaces/IWallet.sol\";\nimport \"./interfaces/IValidator.sol\";\n\ncontract MixinSignatureValidator is\n    MSignatureValidator,\n    MTransactions\n{\n    using LibBytes for bytes;\n    \n    // Mapping of hash => signer => signed\n    mapping (bytes32 => mapping (address => bool)) public preSigned;\n\n    // Mapping of signer => validator => approved\n    mapping (address => mapping (address => bool)) public allowedValidators;\n\n    /// @dev Approves a hash on-chain using any valid signature type.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    function preSign(\n        bytes32 hash,\n        address signerAddress,\n        bytes signature\n    )\n        external\n    {\n        require(\n            isValidSignature(\n                hash,\n                signerAddress,\n                signature\n            ),\n            \"INVALID_SIGNATURE\"\n        );\n        preSigned[hash][signerAddress] = true;\n    }\n\n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external\n    {\n        address signerAddress = getCurrentContextAddress();\n        allowedValidators[signerAddress][validatorAddress] = approval;\n        emit SignatureValidatorApproval(\n            signerAddress,\n            validatorAddress,\n            approval\n        );\n    }\n\n    /// @dev Verifies that a hash has been signed by the given signer.\n    /// @param hash Any 32 byte hash.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return True if the address recovered from the provided signature matches the input signer address.\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid)\n    {\n        // TODO: Domain separation: make hash depend on role. (Taker sig should not be valid as maker sig, etc.)\n        require(\n            signature.length > 0,\n            \"LENGTH_GREATER_THAN_0_REQUIRED\"\n        );\n\n        // Ensure signature is supported\n        uint8 signatureTypeRaw = uint8(signature.popLastByte());\n        require(\n            signatureTypeRaw < uint8(SignatureType.NSignatureTypes),\n            \"SIGNATURE_UNSUPPORTED\"\n        );\n\n        // Pop last byte off of signature byte array.\n        SignatureType signatureType = SignatureType(signatureTypeRaw);\n\n        // Variables are not scoped in Solidity.\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        address recovered;\n\n        // Always illegal signature.\n        // This is always an implicit option since a signer can create a\n        // signature array with invalid type or length. We may as well make\n        // it an explicit option. This aids testing and analysis. It is\n        // also the initialization value for the enum type.\n        if (signatureType == SignatureType.Illegal) {\n            revert(\"SIGNATURE_ILLEGAL\");\n\n        // Always invalid signature.\n        // Like Illegal, this is always implicitly available and therefore\n        // offered explicitly. It can be implicitly created by providing\n        // a correctly formatted but incorrect signature.\n        } else if (signatureType == SignatureType.Invalid) {\n            require(\n                signature.length == 0,\n                \"LENGTH_0_REQUIRED\"\n            );\n            isValid = false;\n            return isValid;\n\n        // Signature using EIP712\n        } else if (signatureType == SignatureType.EIP712) {\n            require(\n                signature.length == 65,\n                \"LENGTH_65_REQUIRED\"\n            );\n            v = uint8(signature[0]);\n            r = signature.readBytes32(1);\n            s = signature.readBytes32(33);\n            recovered = ecrecover(hash, v, r, s);\n            isValid = signerAddress == recovered;\n            return isValid;\n\n        // Signed using web3.eth_sign\n        } else if (signatureType == SignatureType.EthSign) {\n            require(\n                signature.length == 65,\n                \"LENGTH_65_REQUIRED\"\n            );\n            v = uint8(signature[0]);\n            r = signature.readBytes32(1);\n            s = signature.readBytes32(33);\n            recovered = ecrecover(\n                keccak256(abi.encodePacked(\n                    \"\\x19Ethereum Signed Message:\\n32\",\n                    hash\n                )),\n                v,\n                r,\n                s\n            );\n            isValid = signerAddress == recovered;\n            return isValid;\n\n        // Implicitly signed by caller.\n        // The signer has initiated the call. In the case of non-contract\n        // accounts it means the transaction itself was signed.\n        // Example: let's say for a particular operation three signatures\n        // A, B and C are required. To submit the transaction, A and B can\n        // give a signature to C, who can then submit the transaction using\n        // `Caller` for his own signature. Or A and C can sign and B can\n        // submit using `Caller`. Having `Caller` allows this flexibility.\n        } else if (signatureType == SignatureType.Caller) {\n            require(\n                signature.length == 0,\n                \"LENGTH_0_REQUIRED\"\n            );\n            isValid = signerAddress == msg.sender;\n            return isValid;\n\n        // Signature verified by wallet contract.\n        // If used with an order, the maker of the order is the wallet contract.\n        } else if (signatureType == SignatureType.Wallet) {\n            isValid = IWallet(signerAddress).isValidSignature(hash, signature);\n            return isValid;\n\n        // Signature verified by validator contract.\n        // If used with an order, the maker of the order can still be an EOA.\n        // A signature using this type should be encoded as:\n        // | Offset   | Length | Contents                        |\n        // | 0x00     | x      | Signature to validate           |\n        // | 0x00 + x | 20     | Address of validator contract   |\n        // | 0x14 + x | 1      | Signature type is always \"\\x06\" |\n        } else if (signatureType == SignatureType.Validator) {\n            // Pop last 20 bytes off of signature byte array.\n\n            address validatorAddress = signature.popLast20Bytes();\n            \n            // Ensure signer has approved validator.\n            if (!allowedValidators[signerAddress][validatorAddress]) {\n                return false;\n            }\n            isValid = IValidator(validatorAddress).isValidSignature(\n                hash,\n                signerAddress,\n                signature\n            );\n            return isValid;\n\n        // Signer signed hash previously using the preSign function.\n        } else if (signatureType == SignatureType.PreSigned) {\n            isValid = preSigned[hash][signerAddress];\n            return isValid;\n\n        // Signature from Trezor hardware wallet.\n        // It differs from web3.eth_sign in the encoding of message length\n        // (Bitcoin varint encoding vs ascii-decimal, the latter is not\n        // self-terminating which leads to ambiguities).\n        // See also:\n        // https://en.bitcoin.it/wiki/Protocol_documentation#Variable_length_integer\n        // https://github.com/trezor/trezor-mcu/blob/master/firmware/ethereum.c#L602\n        // https://github.com/trezor/trezor-mcu/blob/master/firmware/crypto.c#L36\n        } else if (signatureType == SignatureType.Trezor) {\n            require(\n                signature.length == 65,\n                \"LENGTH_65_REQUIRED\"\n            );\n            v = uint8(signature[0]);\n            r = signature.readBytes32(1);\n            s = signature.readBytes32(33);\n            recovered = ecrecover(\n                keccak256(abi.encodePacked(\n                    \"\\x19Ethereum Signed Message:\\n\\x20\",\n                    hash\n                )),\n                v,\n                r,\n                s\n            );\n            isValid = signerAddress == recovered;\n            return isValid;\n        }\n\n        // Anything else is illegal (We do not return false because\n        // the signature may actually be valid, just not in a format\n        // that we currently support. In this case returning false\n        // may lead the caller to incorrectly believe that the\n        // signature was invalid.)\n        revert(\"SIGNATURE_UNSUPPORTED\");\n    }\n}\n",
		"2.0.0/protocol/Exchange/MixinTransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\n\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"./mixins/MSignatureValidator.sol\";\nimport \"./mixins/MTransactions.sol\";\nimport \"./libs/LibEIP712.sol\";\n\ncontract MixinTransactions is\n    LibEIP712,\n    MSignatureValidator,\n    MTransactions\n{\n\n    // Mapping of transaction hash => executed\n    // This prevents transactions from being executed more than once.\n    mapping (bytes32 => bool) public transactions;\n\n    // Address of current transaction signer\n    address public currentContextAddress;\n\n    // Hash for the EIP712 ZeroEx Transaction Schema\n    bytes32 constant EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"ZeroExTransaction(\",\n        \"uint256 salt,\",\n        \"address signerAddress,\",\n        \"bytes data\",\n        \")\"\n    ));\n\n    /// @dev Calculates EIP712 hash of the Transaction.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @return EIP712 hash of the Transaction.\n    function hashZeroExTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes memory data\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH;\n        bytes32 dataHash = keccak256(data);\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encode(\n        //   EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH,\n        //   salt,\n        //   signerAddress,\n        //   keccak256(data)\n        //  ));\n        assembly {\n            let memPtr := mload(64)\n            mstore(memPtr, schemaHash)\n            mstore(add(memPtr, 32), salt)\n            mstore(add(memPtr, 64), and(signerAddress, 0xffffffffffffffffffffffffffffffffffffffff))\n            mstore(add(memPtr, 96), dataHash)\n            result := keccak256(memPtr, 128)\n        }\n\n        return result;\n    }\n\n    /// @dev Executes an exchange method call in the context of signer.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @param signature Proof of signer transaction by signer.\n    function executeTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes data,\n        bytes signature\n    )\n        external\n    {\n        // Prevent reentrancy\n        require(\n            currentContextAddress == address(0),\n            \"REENTRANCY_ILLEGAL\"\n        );\n\n        bytes32 transactionHash = hashEIP712Message(hashZeroExTransaction(\n            salt,\n            signerAddress,\n            data\n        ));\n\n        // Validate transaction has not been executed\n        require(\n            !transactions[transactionHash],\n            \"INVALID_TX_HASH\"\n        );\n\n        // Transaction always valid if signer is sender of transaction\n        if (signerAddress != msg.sender) {\n            // Validate signature\n            require(\n                isValidSignature(\n                    transactionHash,\n                    signerAddress,\n                    signature\n                ),\n                \"INVALID_TX_SIGNATURE\"\n            );\n\n            // Set the current transaction signer\n            currentContextAddress = signerAddress;\n        }\n\n        // Execute transaction\n        transactions[transactionHash] = true;\n        require(\n            address(this).delegatecall(data),\n            \"FAILED_EXECUTION\"\n        );\n\n        // Reset current transaction signer\n        // TODO: Check if gas is paid when currentContextAddress is already 0.\n        currentContextAddress = address(0);\n    }\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function getCurrentContextAddress()\n        internal\n        view\n        returns (address)\n    {\n        address contextAddress = currentContextAddress == address(0) ? msg.sender : currentContextAddress;\n        return contextAddress;\n    }\n}\n",
		"2.0.0/protocol/Exchange/MixinWrapperFunctions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./libs/LibMath.sol\";\nimport \"./libs/LibOrder.sol\";\nimport \"./libs/LibFillResults.sol\";\nimport \"./mixins/MExchangeCore.sol\";\n\ncontract MixinWrapperFunctions is\n    LibMath,\n    LibFillResults,\n    MExchangeCore\n{\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (FillResults memory fillResults)\n    {\n        fillResults = fillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        require(\n            fillResults.takerAssetFilledAmount == takerAssetFillAmount,\n            \"COMPLETE_FILL_FAILED\"\n        );\n        return fillResults;\n    }\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (FillResults memory fillResults)\n    {\n        // We need to call MExchangeCore.fillOrder using a delegatecall in\n        // assembly so that we can intercept a call that throws. For this, we\n        // need the input encoded in memory in the Ethereum ABIv2 format [1].\n\n        // | Area     | Offset | Length  | Contents                                    |\n        // | -------- |--------|---------|-------------------------------------------- |\n        // | Header   | 0x00   | 4       | function selector                           |\n        // | Params   |        | 3 * 32  | function parameters:                        |\n        // |          | 0x00   |         |   1. offset to order (*)                    |\n        // |          | 0x20   |         |   2. takerAssetFillAmount                   |\n        // |          | 0x40   |         |   3. offset to signature (*)                |\n        // | Data     |        | 12 * 32 | order:                                      |\n        // |          | 0x000  |         |   1.  senderAddress                         |\n        // |          | 0x020  |         |   2.  makerAddress                          |\n        // |          | 0x040  |         |   3.  takerAddress                          |\n        // |          | 0x060  |         |   4.  feeRecipientAddress                   |\n        // |          | 0x080  |         |   5.  makerAssetAmount                      |\n        // |          | 0x0A0  |         |   6.  takerAssetAmount                      |\n        // |          | 0x0C0  |         |   7.  makerFeeAmount                        |\n        // |          | 0x0E0  |         |   8.  takerFeeAmount                        |\n        // |          | 0x100  |         |   9.  expirationTimeSeconds                 |\n        // |          | 0x120  |         |   10. salt                                  |\n        // |          | 0x140  |         |   11. Offset to makerAssetData (*)          |\n        // |          | 0x160  |         |   12. Offset to takerAssetData (*)          |\n        // |          | 0x180  | 32      | makerAssetData Length                       |\n        // |          | 0x1A0  | **      | makerAssetData Contents                     |\n        // |          | 0x1C0  | 32      | takerAssetData Length                       |\n        // |          | 0x1E0  | **      | takerAssetData Contents                     |\n        // |          | 0x200  | 32      | signature Length                            |\n        // |          | 0x220  | **      | signature Contents                          |\n\n        // * Offsets are calculated from the beginning of the current area: Header, Params, Data:\n        //     An offset stored in the Params area is calculated from the beginning of the Params section.\n        //     An offset stored in the Data area is calculated from the beginning of the Data section.\n\n        // ** The length of dynamic array contents are stored in the field immediately preceeding the contents.\n\n        // [1]: https://solidity.readthedocs.io/en/develop/abi-spec.html\n\n        bytes4 fillOrderSelector = this.fillOrder.selector;\n\n        assembly {\n\n            // Areas below may use the following variables:\n            //   1. <area>Start   -- Start of this area in memory\n            //   2. <area>End     -- End of this area in memory. This value may\n            //                       be precomputed (before writing contents),\n            //                       or it may be computed as contents are written.\n            //   3. <area>Offset  -- Current offset into area. If an area's End\n            //                       is precomputed, this variable tracks the\n            //                       offsets of contents as they are written.\n\n            /////// Setup Header Area ///////\n            // Load free memory pointer\n            let headerAreaStart := mload(0x40)\n            mstore(headerAreaStart, fillOrderSelector)\n            let headerAreaEnd := add(headerAreaStart, 0x4)\n\n            /////// Setup Params Area ///////\n            // This area is preallocated and written to later.\n            // This is because we need to fill in offsets that have not yet been calculated.\n            let paramsAreaStart := headerAreaEnd\n            let paramsAreaEnd := add(paramsAreaStart, 0x60)\n            let paramsAreaOffset := paramsAreaStart\n\n            /////// Setup Data Area ///////\n            let dataAreaStart := paramsAreaEnd\n            let dataAreaEnd := dataAreaStart\n\n            // Offset from the source data we're reading from\n            let sourceOffset := order\n            // arrayLenBytes and arrayLenWords track the length of a dynamically-allocated bytes array.\n            let arrayLenBytes := 0\n            let arrayLenWords := 0\n\n            /////// Write order Struct ///////\n            // Write memory location of Order, relative to the start of the\n            // parameter list, then increment the paramsAreaOffset respectively.\n            mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n            paramsAreaOffset := add(paramsAreaOffset, 0x20)\n\n            // Write values for each field in the order\n            // It would be nice to use a loop, but we save on gas by writing\n            // the stores sequentially.\n            mstore(dataAreaEnd, mload(sourceOffset))                            // makerAddress\n            mstore(add(dataAreaEnd, 0x20), mload(add(sourceOffset, 0x20)))      // takerAddress\n            mstore(add(dataAreaEnd, 0x40), mload(add(sourceOffset, 0x40)))      // feeRecipientAddress\n            mstore(add(dataAreaEnd, 0x60), mload(add(sourceOffset, 0x60)))      // senderAddress\n            mstore(add(dataAreaEnd, 0x80), mload(add(sourceOffset, 0x80)))      // makerAssetAmount\n            mstore(add(dataAreaEnd, 0xA0), mload(add(sourceOffset, 0xA0)))      // takerAssetAmount\n            mstore(add(dataAreaEnd, 0xC0), mload(add(sourceOffset, 0xC0)))      // makerFeeAmount\n            mstore(add(dataAreaEnd, 0xE0), mload(add(sourceOffset, 0xE0)))      // takerFeeAmount\n            mstore(add(dataAreaEnd, 0x100), mload(add(sourceOffset, 0x100)))    // expirationTimeSeconds\n            mstore(add(dataAreaEnd, 0x120), mload(add(sourceOffset, 0x120)))    // salt\n            mstore(add(dataAreaEnd, 0x140), mload(add(sourceOffset, 0x140)))    // Offset to makerAssetData\n            mstore(add(dataAreaEnd, 0x160), mload(add(sourceOffset, 0x160)))    // Offset to takerAssetData\n            dataAreaEnd := add(dataAreaEnd, 0x180)\n            sourceOffset := add(sourceOffset, 0x180)\n\n            // Write offset to <order.makerAssetData>\n            mstore(add(dataAreaStart, mul(10, 0x20)), sub(dataAreaEnd, dataAreaStart))\n\n            // Calculate length of <order.makerAssetData>\n            sourceOffset := mload(add(order, 0x140)) // makerAssetData\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of <order.makerAssetData>\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of <order.makerAssetData>\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            // Write offset to <order.takerAssetData>\n            mstore(add(dataAreaStart, mul(11, 0x20)), sub(dataAreaEnd, dataAreaStart))\n\n            // Calculate length of <order.takerAssetData>\n            sourceOffset := mload(add(order, 0x160)) // takerAssetData\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of <order.takerAssetData>\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of  <order.takerAssetData>\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            /////// Write takerAssetFillAmount ///////\n            mstore(paramsAreaOffset, takerAssetFillAmount)\n            paramsAreaOffset := add(paramsAreaOffset, 0x20)\n\n            /////// Write signature ///////\n            // Write offset to paramsArea\n            mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n\n            // Calculate length of signature\n            sourceOffset := signature\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of signature\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of signature\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            // Execute delegatecall\n            let success := delegatecall(\n                gas,                                // forward all gas, TODO: look into gas consumption of assert/throw\n                address,                            // call address of this contract\n                headerAreaStart,                    // pointer to start of input\n                sub(dataAreaEnd, headerAreaStart),  // length of input\n                headerAreaStart,                    // write output over input\n                128                                 // output size is 128 bytes\n            )\n            switch success\n            case 0 {\n                mstore(fillResults, 0)\n                mstore(add(fillResults, 32), 0)\n                mstore(add(fillResults, 64), 0)\n                mstore(add(fillResults, 96), 0)\n            }\n            case 1 {\n                mstore(fillResults, mload(headerAreaStart))\n                mstore(add(fillResults, 32), mload(add(headerAreaStart, 32)))\n                mstore(add(fillResults, 64), mload(add(headerAreaStart, 64)))\n                mstore(add(fillResults, 96), mload(add(headerAreaStart, 96)))\n            }\n        }\n        return fillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    ///         NOTE: makerAssetFilledAmount and takerAssetFilledAmount may include amounts filled of different assets.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            FillResults memory singleFillResults = fillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n            addFillResults(totalFillResults, singleFillResults);\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrKill.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    ///         NOTE: makerAssetFilledAmount and takerAssetFilledAmount may include amounts filled of different assets.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            FillResults memory singleFillResults = fillOrKillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n            addFillResults(totalFillResults, singleFillResults);\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    ///         NOTE: makerAssetFilledAmount and takerAssetFilledAmount may include amounts filled of different assets.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            FillResults memory singleFillResults = fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n            addFillResults(totalFillResults, singleFillResults);\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrders(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory takerAssetData = orders[0].takerAssetData;\n    \n        for (uint256 i = 0; i < orders.length; i++) {\n\n            // We assume that asset being sold by taker is the same for each order.\n            // Rather than passing this in as calldata, we use the takerAssetData from the first order in all later orders.\n            orders[i].takerAssetData = takerAssetData;\n\n            // Calculate the remaining amount of takerAsset to sell\n            uint256 remainingTakerAssetFillAmount = safeSub(takerAssetFillAmount, totalFillResults.takerAssetFilledAmount);\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrder(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of takerAsset has been sold\n            if (totalFillResults.takerAssetFilledAmount == takerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory takerAssetData = orders[0].takerAssetData;\n\n        for (uint256 i = 0; i < orders.length; i++) {\n\n            // We assume that asset being sold by taker is the same for each order.\n            // Rather than passing this in as calldata, we use the takerAssetData from the first order in all later orders.\n            orders[i].takerAssetData = takerAssetData;\n\n            // Calculate the remaining amount of takerAsset to sell\n            uint256 remainingTakerAssetFillAmount = safeSub(takerAssetFillAmount, totalFillResults.takerAssetFilledAmount);\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderNoThrow(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of takerAsset has been sold\n            if (totalFillResults.takerAssetFilledAmount == takerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrders(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory makerAssetData = orders[0].makerAssetData;\n\n        for (uint256 i = 0; i < orders.length; i++) {\n\n            // We assume that asset being bought by taker is the same for each order.\n            // Rather than passing this in as calldata, we copy the makerAssetData from the first order onto all later orders.\n            orders[i].makerAssetData = makerAssetData;\n\n            // Calculate the remaining amount of makerAsset to buy\n            uint256 remainingMakerAssetFillAmount = safeSub(makerAssetFillAmount, totalFillResults.makerAssetFilledAmount);\n\n            // Convert the remaining amount of makerAsset to buy into remaining amount\n            // of takerAsset to sell, assuming entire amount can be sold in the current order\n            uint256 remainingTakerAssetFillAmount = getPartialAmount(\n                orders[i].takerAssetAmount,\n                orders[i].makerAssetAmount,\n                remainingMakerAssetFillAmount\n            );\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrder(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of makerAsset has been bought\n            if (totalFillResults.makerAssetFilledAmount == makerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory makerAssetData = orders[0].makerAssetData;\n\n        for (uint256 i = 0; i < orders.length; i++) {\n\n            // We assume that asset being bought by taker is the same for each order.\n            // Rather than passing this in as calldata, we copy the makerAssetData from the first order onto all later orders.\n            orders[i].makerAssetData = makerAssetData;\n\n            // Calculate the remaining amount of makerAsset to buy\n            uint256 remainingMakerAssetFillAmount = safeSub(makerAssetFillAmount, totalFillResults.makerAssetFilledAmount);\n\n            // Convert the remaining amount of makerAsset to buy into remaining amount\n            // of takerAsset to sell, assuming entire amount can be sold in the current order\n            uint256 remainingTakerAssetFillAmount = getPartialAmount(\n                orders[i].takerAssetAmount,\n                orders[i].makerAssetAmount,\n                remainingMakerAssetFillAmount\n            );\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderNoThrow(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of makerAsset has been bought\n            if (totalFillResults.makerAssetFilledAmount == makerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously cancels multiple orders in a single transaction.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            cancelOrder(orders[i]);\n        }\n    }\n}\n",
		"2.0.0/protocol/Exchange/interfaces/IAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract IAssetProxyDispatcher {\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n",
		"2.0.0/protocol/Exchange/interfaces/IExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\n\ncontract IExchangeCore {\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrder(LibOrder.Order memory order)\n        public;\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n}\n",
		"2.0.0/protocol/Exchange/interfaces/IMatchOrders.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\n\ncontract IMatchOrders {\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    /// TODO: Make this function external once supported by Solidity (See Solidity Issues #3199, #1603)\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n",
		"2.0.0/protocol/Exchange/interfaces/ISignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract ISignatureValidator {\n\n    /// @dev Approves a hash on-chain using any valid signature type.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    function preSign(\n        bytes32 hash,\n        address signerAddress,\n        bytes signature\n    )\n        external;\n    \n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external;\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signerAddress Address of signer.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n}\n",
		"2.0.0/protocol/Exchange/interfaces/ITransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\n\ncontract ITransactions {\n\n    /// @dev Executes an exchange method call in the context of signer.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @param signature Proof of signer transaction by signer.\n    function executeTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes data,\n        bytes signature\n    )\n        external;\n}\n",
		"2.0.0/protocol/Exchange/interfaces/IValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.23;\n\ncontract IValidator {\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes signature\n    )\n        external\n        view\n        returns (bool isValid);\n}\n",
		"2.0.0/protocol/Exchange/interfaces/IWallet.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract IWallet {\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        bytes signature\n    )\n        external\n        view\n        returns (bool isValid);\n}\n",
		"2.0.0/protocol/Exchange/libs/LibConstants.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibConstants {\n   \n    // Asset data for ZRX token. Used for fee transfers.\n    // @TODO: Hardcode constant when we deploy. Currently \n    //        not constant to make testing easier.\n    bytes public ZRX_ASSET_DATA;\n\n    // @TODO: Remove when we deploy.\n    constructor (bytes memory zrxAssetData)\n        public\n    {\n        ZRX_ASSET_DATA = zrxAssetData;\n    }\n}\n",
		"2.0.0/protocol/Exchange/libs/LibEIP712.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibEIP712 {\n    // EIP191 header for EIP712 prefix\n    string constant EIP191_HEADER = \"\\x19\\x01\";\n\n    // EIP712 Domain Name value\n    string constant EIP712_DOMAIN_NAME = \"0x Protocol\";\n\n    // EIP712 Domain Version value\n    string constant EIP712_DOMAIN_VERSION = \"2\";\n\n    // Hash of the EIP712 Domain Separator Schema\n    bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"EIP712Domain(\",\n        \"string name,\",\n        \"string version,\",\n        \"address verifyingContract\",\n        \")\"\n    ));\n\n    // Hash of the EIP712 Domain Separator data\n    bytes32 public EIP712_DOMAIN_HASH;\n\n    constructor ()\n        public\n    {\n        EIP712_DOMAIN_HASH = keccak256(abi.encode(\n            EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n            keccak256(bytes(EIP712_DOMAIN_NAME)),\n            keccak256(bytes(EIP712_DOMAIN_VERSION)),\n            address(this)\n        ));\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct in this EIP712 Domain.\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to this EIP712 Domain.\n    function hashEIP712Message(bytes32 hashStruct)\n        internal\n        view\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(EIP191_HEADER, EIP712_DOMAIN_HASH, hashStruct));\n    }\n}\n",
		"2.0.0/protocol/Exchange/libs/LibExchangeErrors.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\n/// @dev This contract documents the revert reasons used in the Exchange contract.\n/// This contract is intended to serve as a reference, but is not actually used for efficiency reasons.\ncontract LibExchangeErrors {\n\n    /// Order validation errors ///\n    string constant ORDER_UNFILLABLE = \"ORDER_UNFILLABLE\";                              // Order cannot be filled.\n    string constant INVALID_MAKER = \"INVALID_MAKER\";                                    // Invalid makerAddress.\n    string constant INVALID_TAKER = \"INVALID_TAKER\";                                    // Invalid takerAddress.\n    string constant INVALID_SENDER = \"INVALID_SENDER\";                                  // Invalid `msg.sender`.\n    string constant INVALID_ORDER_SIGNATURE = \"INVALID_ORDER_SIGNATURE\";                // Signature validation failed. \n    \n    /// fillOrder validation errors ///\n    string constant INVALID_TAKER_AMOUNT = \"INVALID_TAKER_AMOUNT\";                      // takerAssetFillAmount cannot equal 0.\n    string constant ROUNDING_ERROR = \"ROUNDING_ERROR\";                                  // Rounding error greater than 0.1% of takerAssetFillAmount. \n    \n    /// Signature validation errors ///\n    string constant INVALID_SIGNATURE = \"INVALID_SIGNATURE\";                            // Signature validation failed. \n    string constant SIGNATURE_ILLEGAL = \"SIGNATURE_ILLEGAL\";                            // Signature type is illegal.\n    string constant SIGNATURE_UNSUPPORTED = \"SIGNATURE_UNSUPPORTED\";                    // Signature type unsupported.\n    \n    /// cancelOrdersUptTo errors ///\n    string constant INVALID_NEW_ORDER_EPOCH = \"INVALID_NEW_ORDER_EPOCH\";                // Specified salt must be greater than or equal to existing orderEpoch.\n\n    /// fillOrKillOrder errors ///\n    string constant COMPLETE_FILL_FAILED = \"COMPLETE_FILL_FAILED\";                      // Desired takerAssetFillAmount could not be completely filled. \n\n    /// matchOrders errors ///\n    string constant NEGATIVE_SPREAD_REQUIRED = \"NEGATIVE_SPREAD_REQUIRED\";              // Matched orders must have a negative spread.\n\n    /// Transaction errors ///\n    string constant REENTRANCY_ILLEGAL = \"REENTRANCY_ILLEGAL\";                          // Recursive reentrancy is not allowed. \n    string constant INVALID_TX_HASH = \"INVALID_TX_HASH\";                                // Transaction has already been executed. \n    string constant INVALID_TX_SIGNATURE = \"INVALID_TX_SIGNATURE\";                      // Signature validation failed. \n    string constant FAILED_EXECUTION = \"FAILED_EXECUTION\";                              // Transaction execution failed. \n    \n    /// registerAssetProxy errors ///\n    string constant ASSET_PROXY_ALREADY_EXISTS = \"ASSET_PROXY_ALREADY_EXISTS\";          // AssetProxy with same id already exists.\n\n    /// dispatchTransferFrom errors ///\n    string constant ASSET_PROXY_DOES_NOT_EXIST = \"ASSET_PROXY_DOES_NOT_EXIST\";          // No assetProxy registered at given id.\n    string constant TRANSFER_FAILED = \"TRANSFER_FAILED\";                                // Asset transfer unsuccesful.\n\n    /// Length validation errors ///\n    string constant LENGTH_GREATER_THAN_0_REQUIRED = \"LENGTH_GREATER_THAN_0_REQUIRED\";  // Byte array must have a length greater than 0.\n    string constant LENGTH_GREATER_THAN_3_REQUIRED = \"LENGTH_GREATER_THAN_3_REQUIRED\";  // Byte array must have a length greater than 3.\n    string constant LENGTH_0_REQUIRED = \"LENGTH_0_REQUIRED\";                            // Byte array must have a length of 0.\n    string constant LENGTH_65_REQUIRED = \"LENGTH_65_REQUIRED\";                          // Byte array must have a length of 65.\n}\n",
		"2.0.0/protocol/Exchange/libs/LibFillResults.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../../../utils/SafeMath/SafeMath.sol\";\n\ncontract LibFillResults is\n    SafeMath\n{\n\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of ZRX paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of ZRX paid by taker to feeRecipients(s).\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                    // Amounts filled and fees paid of left order.\n        FillResults right;                   // Amounts filled and fees paid of right order.\n        uint256 leftMakerAssetSpreadAmount;  // Spread between price of left and right order, denominated in the left order's makerAsset, paid to taker.\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    ///      Modifies the first FillResults instance specified.\n    /// @param totalFillResults Fill results instance that will be added onto.\n    /// @param singleFillResults Fill results instance that will be added to totalFillResults.\n    function addFillResults(FillResults memory totalFillResults, FillResults memory singleFillResults)\n        internal\n        pure\n    {\n        totalFillResults.makerAssetFilledAmount = safeAdd(totalFillResults.makerAssetFilledAmount, singleFillResults.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = safeAdd(totalFillResults.takerAssetFilledAmount, singleFillResults.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = safeAdd(totalFillResults.makerFeePaid, singleFillResults.makerFeePaid);\n        totalFillResults.takerFeePaid = safeAdd(totalFillResults.takerFeePaid, singleFillResults.takerFeePaid);\n    }\n}\n",
		"2.0.0/protocol/Exchange/libs/LibMath.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../../../utils/SafeMath/SafeMath.sol\";\n\ncontract LibMath is\n    SafeMath\n{\n\n    /// @dev Calculates partial value given a numerator and denominator.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target.\n    function getPartialAmount(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target)\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = safeDiv(\n            safeMul(numerator, target),\n            denominator\n        );\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error > 0.1%.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target)\n        internal\n        pure\n        returns (bool isError)\n    {\n        uint256 remainder = mulmod(target, numerator, denominator);\n        if (remainder == 0) {\n            return false; // No rounding error.\n        }\n\n        uint256 errPercentageTimes1000000 = safeDiv(\n            safeMul(remainder, 1000000),\n            safeMul(numerator, target)\n        );\n        isError = errPercentageTimes1000000 > 1000;\n        return isError;\n    }\n}\n",
		"2.0.0/protocol/Exchange/libs/LibOrder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"./LibEIP712.sol\";\n\ncontract LibOrder is\n    LibEIP712\n{\n\n    // Hash for the EIP712 Order Schema\n    bytes32 constant EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"Order(\",\n        \"address makerAddress,\",\n        \"address takerAddress,\",\n        \"address feeRecipientAddress,\",\n        \"address senderAddress,\",\n        \"uint256 makerAssetAmount,\",\n        \"uint256 takerAssetAmount,\",\n        \"uint256 makerFee,\",\n        \"uint256 takerFee,\",\n        \"uint256 expirationTimeSeconds,\",\n        \"uint256 salt,\",\n        \"bytes makerAssetData,\",\n        \"bytes takerAssetData\",\n        \")\"\n    ));\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's state is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    struct Order {\n        address makerAddress;           // Address that created the order.      \n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.          \n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.      \n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.        \n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.        \n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.          \n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.     \n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\n    }\n\n    struct OrderInfo {\n        uint8 orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 hash of the order (see LibOrder.getOrderHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates Keccak-256 hash of the order.\n    /// @param order The order structure.\n    /// @return Keccak-256 EIP712 hash of the order.\n    function getOrderHash(Order memory order)\n        internal\n        view\n        returns (bytes32 orderHash)\n    {\n        orderHash = hashEIP712Message(hashOrder(order));\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order.\n    function hashOrder(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = EIP712_ORDER_SCHEMA_HASH;\n        bytes32 makerAssetDataHash = keccak256(order.makerAssetData);\n        bytes32 takerAssetDataHash = keccak256(order.takerAssetData);\n        // Assembly for more efficiently computing:\n        //   keccak256(abi.encode(\n        //       order.makerAddress,\n        //       order.takerAddress,\n        //       order.feeRecipientAddress,\n        //       order.senderAddress,\n        //       order.makerAssetAmount,\n        //       order.takerAssetAmount,\n        //       order.makerFee,\n        //       order.takerFee,\n        //       order.expirationTimeSeconds,\n        //       order.salt,\n        //       keccak256(order.makerAssetData),\n        //       keccak256(order.takerAssetData)\n        //   ));\n        assembly {\n            // Backup\n            let temp1 := mload(sub(order,  32))\n            let temp2 := mload(add(order, 320))\n            let temp3 := mload(add(order, 352))\n            \n            // Hash in place\n            mstore(sub(order,  32), schemaHash)\n            mstore(add(order, 320), makerAssetDataHash)\n            mstore(add(order, 352), takerAssetDataHash)\n            result := keccak256(sub(order, 32), 416)\n            \n            // Restore\n            mstore(sub(order,  32), temp1)\n            mstore(add(order, 320), temp2)\n            mstore(add(order, 352), temp3)\n        }\n        return result;\n    }\n}\n",
		"2.0.0/protocol/Exchange/mixins/MAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IAssetProxyDispatcher.sol\";\n\ncontract MAssetProxyDispatcher is\n    IAssetProxyDispatcher\n{\n\n    // Logs registration of new asset proxy\n    event AssetProxyRegistered(\n        bytes4 id,              // Id of new registered AssetProxy.\n        address assetProxy      // Address of new registered AssetProxy.\n    );\n\n    /// @dev Forwards arguments to assetProxy and calls `transferFrom`. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the asset.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param amount Amount of token to transfer.\n    function dispatchTransferFrom(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal;\n}\n",
		"2.0.0/protocol/Exchange/mixins/MExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\nimport \"../interfaces/IExchangeCore.sol\";\n\ncontract MExchangeCore is\n    IExchangeCore\n{\n    // Fill event is emitted whenever an order is filled.\n    event Fill(\n        address indexed makerAddress,         // Address that created the order.      \n        address indexed feeRecipientAddress,  // Address that received fees.\n        address takerAddress,                 // Address that filled the order.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        uint256 makerAssetFilledAmount,       // Amount of makerAsset sold by maker and bought by taker. \n        uint256 takerAssetFilledAmount,       // Amount of takerAsset sold by taker and bought by maker.\n        uint256 makerFeePaid,                 // Amount of ZRX paid to feeRecipient by maker.\n        uint256 takerFeePaid,                 // Amount of ZRX paid to feeRecipient by taker.\n        bytes32 indexed orderHash,            // EIP712 hash of order (see LibOrder.getOrderHash).\n        bytes makerAssetData,                 // Encoded data specific to makerAsset. \n        bytes takerAssetData                  // Encoded data specific to takerAsset.\n    );\n\n    // Cancel event is emitted whenever an individual order is cancelled.\n    event Cancel(\n        address indexed makerAddress,         // Address that created the order.      \n        address indexed feeRecipientAddress,  // Address that would have recieved fees if order was filled.   \n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        bytes32 indexed orderHash,            // EIP712 hash of order (see LibOrder.getOrderHash).\n        bytes makerAssetData,                 // Encoded data specific to makerAsset. \n        bytes takerAssetData                  // Encoded data specific to takerAsset.\n    );\n\n    // CancelUpTo event is emitted whenever `cancelOrdersUpTo` is executed succesfully.\n    event CancelUpTo(\n        address indexed makerAddress,         // Orders cancelled must have been created by this address.\n        address indexed senderAddress,        // Orders cancelled must have a `senderAddress` equal to this address.\n        uint256 orderEpoch                    // Orders specified makerAddress and senderAddress with a salt <= this value are considered cancelled.\n    );\n\n    /// @dev Updates state with results of a fill order.\n    /// @param order that was filled.\n    /// @param takerAddress Address of taker who filled the order.\n    /// @param orderTakerAssetFilledAmount Amount of order already filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function updateFilledState(\n        LibOrder.Order memory order,\n        address takerAddress,\n        bytes32 orderHash,\n        uint256 orderTakerAssetFilledAmount,\n        LibFillResults.FillResults memory fillResults\n    )\n        internal;\n\n    /// @dev Updates state with results of cancelling an order.\n    ///      State is only updated if the order is currently fillable.\n    ///      Otherwise, updating state would have no effect.\n    /// @param order that was cancelled.\n    /// @param orderHash Hash of order that was cancelled.\n    function updateCancelledState(\n        LibOrder.Order memory order,\n        bytes32 orderHash\n    )\n        internal;\n\n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderInfo Status, orderHash, and amount already filled of order.\n    /// @param takerAddress Address of order taker.\n    /// @param takerAssetFillAmount Desired amount of order to fill by taker.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param signature Proof that the orders was created by its maker.\n    function assertValidFill(\n        LibOrder.Order memory order,\n        LibOrder.OrderInfo memory orderInfo,\n        address takerAddress,\n        uint256 takerAssetFillAmount,\n        uint256 takerAssetFilledAmount,\n        bytes memory signature\n    )\n        internal\n        view;\n\n\n    /// @dev Validates context for cancelOrder. Succeeds or throws.\n    /// @param order to be cancelled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    function assertValidCancel(\n        LibOrder.Order memory order,\n        LibOrder.OrderInfo memory orderInfo\n    )\n        internal\n        view;\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        LibOrder.Order memory order,\n        uint256 takerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (LibFillResults.FillResults memory fillResults);\n\n}\n",
		"2.0.0/protocol/Exchange/mixins/MMatchOrders.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\nimport \"../interfaces/IMatchOrders.sol\";\n\ncontract MMatchOrders is\n    IMatchOrders\n{\n\n    /// @dev Validates context for matchOrders. Succeeds or throws.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    function assertValidMatch(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder\n    )\n        internal\n        pure;\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n\n}\n",
		"2.0.0/protocol/Exchange/mixins/MSignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../interfaces/ISignatureValidator.sol\";\n\ncontract MSignatureValidator is\n    ISignatureValidator\n{\n    event SignatureValidatorApproval(\n        address indexed signerAddress,     // Address that approves or disapproves a contract to verify signatures.\n        address indexed validatorAddress,  // Address of signature validator contract.\n        bool approved                      // Approval or disapproval of validator contract.\n    );\n\n    // Allowed signature types.\n    enum SignatureType {\n        Illegal,         // 0x00, default value\n        Invalid,         // 0x01\n        EIP712,          // 0x02\n        EthSign,         // 0x03\n        Caller,          // 0x04\n        Wallet,          // 0x05\n        Validator,       // 0x06\n        PreSigned,       // 0x07\n        Trezor,          // 0x08\n        NSignatureTypes  // 0x09, number of signature types. Always leave at end.\n    }\n}\n",
		"2.0.0/protocol/Exchange/mixins/MTransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\n\nimport \"../interfaces/ITransactions.sol\";\n\ncontract MTransactions is\n    ITransactions\n{\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function getCurrentContextAddress()\n        internal\n        view\n        returns (address);\n}\n",
		"2.0.0/tokens/ERC20Token/IERC20Token.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\ncontract IERC20Token {\n\n    /// @notice send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value)\n        public\n        returns (bool);\n\n    /// @notice send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value)\n        public\n        returns (bool);\n    \n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value)\n        public\n        returns (bool);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner)\n        public view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        public view\n        returns (uint256);\n\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n    \n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n}\n",
		"2.0.0/tokens/ERC721Token/IERC721Token.sol": "/*\nThe MIT License (MIT)\n\nCopyright (c) 2016 Smart Contract Solutions, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n * Modified from https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC721/ERC721Basic.sol\n */\ncontract IERC721Token {\n    string internal name_;\n    string internal symbol_;\n\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _tokenId\n    );\n    event Approval(\n        address indexed _owner,\n        address indexed _approved,\n        uint256 _tokenId\n    );\n    event ApprovalForAll(\n        address indexed _owner,\n        address indexed _operator,\n        bool _approved\n    );\n\n    function name()\n        public\n        view\n        returns (string);\n    function symbol()\n        public\n        view\n        returns (string);\n\n    function balanceOf(address _owner)\n        public\n        view\n        returns (uint256 _balance);\n    function ownerOf(uint256 _tokenId)\n        public\n        view\n        returns (address _owner);\n    function exists(uint256 _tokenId)\n        public\n        view\n        returns (bool _exists);\n\n    function approve(address _to, uint256 _tokenId)\n        public;\n    function getApproved(uint256 _tokenId)\n        public\n        view\n        returns (address _operator);\n\n    function setApprovalForAll(address _operator, bool _approved)\n        public;\n    function isApprovedForAll(address _owner, address _operator)\n        public\n        view\n        returns (bool);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId)\n        public;\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId)\n        public;\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        bytes _data)\n        public;\n}\n",
		"2.0.0/tokens/WETH9/WETH9.sol": "// Copyright (C) 2015, 2016, 2017 Dapphub\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.4.18;\n\ncontract WETH9 {\n    string public name     = \"Wrapped Ether\";\n    string public symbol   = \"WETH\";\n    uint8  public decimals = 18;\n\n    event  Approval(address indexed src, address indexed guy, uint wad);\n    event  Transfer(address indexed src, address indexed dst, uint wad);\n    event  Deposit(address indexed dst, uint wad);\n    event  Withdrawal(address indexed src, uint wad);\n\n    mapping (address => uint)                       public  balanceOf;\n    mapping (address => mapping (address => uint))  public  allowance;\n\n    function() public payable {\n        deposit();\n    }\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        Deposit(msg.sender, msg.value);\n    }\n    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return this.balance;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\n\n/*\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n\n*/\n",
		"2.0.0/utils/LibBytes/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n    \n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n                    \n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n                    \n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n    \n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(bytes memory b, uint256 from, uint256 to)\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to < b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length);\n        return result;\n    }\n    \n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(bytes memory b, uint256 from, uint256 to)\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to < b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            \"GREATER_THAN_ZERO_LENGTH_REQUIRED\"\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(mload(add(b, index)), 0xffffffffffffffffffffffff0000000000000000000000000000000000000000)\n            \n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        return uint256(readBytes32(b, index));\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index)\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= index + 4,\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n        );\n        assembly {\n            result := mload(add(b, 32))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @dev NOTE: the returned value overlaps with the input value.\n    ///            Both should be treated as immutable.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytesWithLength(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n        \n        // Return a pointer to the byte array as it exists inside `b`\n        assembly {\n            result := add(b, index)\n        }\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytesWithLength(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 /* 32 bytes to store length */ + input.length,\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            b.contentAddress() + index,\n            input.rawAddress(), // includes length of <input>\n            input.length + 32   // +32 bytes to store <input> length\n        );\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function deepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        internal\n        pure\n    {\n        uint256 sourceLen = source.length;\n        // Dest length must be >= source length, or some bytes would not be copied.\n        require(\n            dest.length >= sourceLen,\n            \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\"\n        );\n        memCopy(\n            dest.contentAddress(),\n            source.contentAddress(),\n            sourceLen\n        );\n    }\n}\n",
		"2.0.0/utils/Ownable/IOwnable.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\n\ncontract IOwnable {\n    function transferOwnership(address newOwner)\n        public;\n}\n",
		"2.0.0/utils/Ownable/Ownable.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\n\nimport \"./IOwnable.sol\";\n\ncontract Ownable is IOwnable {\n    address public owner;\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"ONLY_CONTRACT_OWNER\"\n        );\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n",
		"2.0.0/utils/SafeMath/SafeMath.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\ncontract SafeMath {\n    function safeMul(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint c = a / b;\n        return c;\n    }\n\n    function safeSub(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n"
	},
	"sourceTreeHashHex": "0x438775ab24f436321a39dfefe1ed794909a32cf6baf3086f9de3356a5d6ab47b",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.4.24+commit.e67f0147.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"networks": {}
}