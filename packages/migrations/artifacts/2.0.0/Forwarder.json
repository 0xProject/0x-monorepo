{
	"schemaVersion": "2.0.0",
	"contractName": "Forwarder",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "makerAssetFillAmount",
						"type": "uint256"
					}
				],
				"name": "calculateMarketBuyFillResults",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "ALLOWABLE_EXCHANGE_PERCENTAGE",
				"outputs": [
					{
						"name": "",
						"type": "uint16"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "order",
						"type": "tuple"
					},
					{
						"name": "takerAssetFillAmount",
						"type": "uint256"
					}
				],
				"name": "calculateFillOrderFillResults",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "fillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					},
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "feeOrders",
						"type": "tuple[]"
					},
					{
						"name": "feeSignatures",
						"type": "bytes[]"
					},
					{
						"name": "feeProportion",
						"type": "uint16"
					},
					{
						"name": "feeRecipient",
						"type": "address"
					}
				],
				"name": "marketBuyTokens",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "",
						"type": "tuple"
					}
				],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "ERC20_PROXY_ID",
				"outputs": [
					{
						"name": "",
						"type": "uint8"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					},
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "feeOrders",
						"type": "tuple[]"
					},
					{
						"name": "feeSignatures",
						"type": "bytes[]"
					},
					{
						"name": "assetAmount",
						"type": "uint256"
					},
					{
						"name": "feeProportion",
						"type": "uint16"
					},
					{
						"name": "feeRecipient",
						"type": "address"
					}
				],
				"name": "buyExactAssets",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "ERC721_PROXY_ID",
				"outputs": [
					{
						"name": "",
						"type": "uint8"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "PERCENTAGE_DENOMINATOR",
				"outputs": [
					{
						"name": "",
						"type": "uint16"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "MAX_FEE",
				"outputs": [
					{
						"name": "",
						"type": "uint16"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "zrxAmount",
						"type": "uint256"
					}
				],
				"name": "calculateBuyFeesFillResults",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "erc20AssetProxyId",
						"type": "uint8"
					}
				],
				"name": "setERC20ProxyApproval",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "address"
					},
					{
						"name": "",
						"type": "uint256"
					},
					{
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC721Received",
				"outputs": [
					{
						"name": "",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "_exchange",
						"type": "address"
					},
					{
						"name": "_etherToken",
						"type": "address"
					},
					{
						"name": "_zrxToken",
						"type": "address"
					},
					{
						"name": "erc20AssetProxyId",
						"type": "uint8"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"payable": true,
				"stateMutability": "payable",
				"type": "fallback"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x80 DUP1 PUSH3 0x2E6E DUP4 CODECOPY DUP2 ADD DUP1 PUSH1 0x40 MSTORE PUSH3 0x33 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x377 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x0 DUP1 SLOAD DUP3 AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP8 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD DUP4 AND DUP7 DUP4 AND OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP1 SWAP3 AND SWAP1 DUP5 AND OR SWAP1 SSTORE PUSH3 0x8D DUP2 PUSH5 0x100000000 PUSH3 0x97 DUP2 MUL DIV JUMP JUMPDEST POP POP POP POP PUSH3 0x4CC JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH3 0xEA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xE1 SWAP1 PUSH3 0x47D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x92C1421E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x92C1421E SWAP1 PUSH3 0x135 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH3 0x495 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x150 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x165 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0x18B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x32D JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO PUSH3 0x2EA JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH3 0x1EC SWAP1 DUP5 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH3 0x45E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x21C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0x242 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x356 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH3 0x292 SWAP1 DUP5 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH3 0x45E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x2AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x2C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0x2E8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x356 JUMP JUMPDEST POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2FC DUP3 MLOAD PUSH3 0x4A5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2FC DUP3 MLOAD PUSH3 0x4BA JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2FC DUP3 MLOAD PUSH3 0x4BF JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2FC DUP3 MLOAD PUSH3 0x4B4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x34E DUP5 DUP5 PUSH3 0x2EE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x369 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x34E DUP5 DUP5 PUSH3 0x303 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x38E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x39C DUP8 DUP8 PUSH3 0x311 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH3 0x3AF DUP8 DUP3 DUP9 ADD PUSH3 0x311 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH3 0x3C2 DUP8 DUP3 DUP9 ADD PUSH3 0x311 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH3 0x3D5 DUP8 DUP3 DUP9 ADD PUSH3 0x31F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH3 0x3EC DUP2 PUSH3 0x4A5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x33 DUP2 MSTORE PUSH32 0x4F6E6C7920636F6E7472616374206F776E657220697320616C6C6F7765642074 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6F2063616C6C2074686973206D6574686F642E00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH3 0x3EC DUP2 PUSH3 0x4B1 JUMP JUMPDEST PUSH3 0x3EC DUP2 PUSH3 0x4B4 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH3 0x46E DUP3 DUP6 PUSH3 0x3E1 JUMP JUMPDEST PUSH3 0x2FC PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x448 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH3 0x48F DUP2 PUSH3 0x3F2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH3 0x48F DUP3 DUP5 PUSH3 0x453 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x48F DUP3 PUSH3 0x4A5 JUMP JUMPDEST PUSH2 0x2992 DUP1 PUSH3 0x4DC PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB6 JUMPI PUSH4 0xFFFFFFFF PUSH1 0xE0 PUSH1 0x2 EXP PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x1B67AD77 DUP2 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x20472CF7 EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x4A23B67B EQ PUSH2 0x18E JUMPI DUP1 PUSH4 0x8A637F3D EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x8EE1A642 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0x8FBB3EA6 EQ PUSH2 0x205 JUMPI DUP1 PUSH4 0xA28FE02E EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0xB3CD4254 EQ PUSH2 0x22D JUMPI DUP1 PUSH4 0xBC063E1A EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0xD3DF5F2D EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xDE5F8E41 EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0xF0B9E5BA EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2C6 JUMPI JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH32 0x44454641554C545F46554E4354494F4E5F574554485F434F4E54524143545F4F PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xE8 PUSH1 0x2 EXP PUSH3 0x4E4C59 MUL SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x133 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x156 PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0x22B7 JUMP JUMPDEST PUSH2 0x2E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x275C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x178 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0x435 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x27E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x156 PUSH2 0x1A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2361 JUMP JUMPDEST PUSH2 0x43B JUMP JUMPDEST PUSH2 0x156 PUSH2 0x1BC CALLDATASIZE PUSH1 0x4 PUSH2 0x20DE JUMP JUMPDEST PUSH2 0x56F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D6 PUSH2 0x6F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x26AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F8 PUSH2 0x703 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x2803 JUMP JUMPDEST PUSH2 0x156 PUSH2 0x213 CALLDATASIZE PUSH1 0x4 PUSH2 0x21C0 JUMP JUMPDEST PUSH2 0x708 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x224 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F8 PUSH2 0x9D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x239 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0x9DB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0x9E1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x156 PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0x22B7 JUMP JUMPDEST PUSH2 0x9E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x283 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x297 PUSH2 0x292 CALLDATASIZE PUSH1 0x4 PUSH2 0x2396 JUMP JUMPDEST PUSH2 0xBEF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x2B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x207A JUMP JUMPDEST PUSH2 0xDCE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x272D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x297 PUSH2 0x2E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x203E JUMP JUMPDEST PUSH2 0xDE1 JUMP JUMPDEST PUSH2 0x2EE PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2FB PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP7 MLOAD DUP5 LT ISZERO PUSH2 0x42B JUMPI PUSH2 0x34C DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x31A JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x338 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x28F9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x391 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x3A0 DUP7 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0xE84 JUMP JUMPDEST SWAP3 POP PUSH2 0x3E3 DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3B3 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP9 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3CF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0xE96 JUMP JUMPDEST SWAP2 POP PUSH2 0x406 DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3F6 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 PUSH2 0x43B JUMP JUMPDEST SWAP1 POP PUSH2 0x412 DUP6 DUP3 PUSH2 0xEB3 JUMP JUMPDEST DUP5 MLOAD DUP7 EQ ISZERO PUSH2 0x420 JUMPI PUSH2 0x42B JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x300 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x251C DUP2 JUMP JUMPDEST PUSH2 0x443 PUSH2 0x1C7F JUMP JUMPDEST PUSH2 0x44B PUSH2 0x1CA8 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xC75E0A81 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xC75E0A81 SWAP1 PUSH2 0x47F SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x276A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x499 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4AD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x4D1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2343 JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 MLOAD PUSH1 0x40 DUP1 DUP5 ADD MLOAD SWAP1 MLOAD PUSH1 0xE2 PUSH1 0x2 EXP PUSH4 0x1C13B407 MUL DUP2 MSTORE SWAP4 SWAP6 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND SWAP3 PUSH4 0x704ED01C SWAP3 PUSH2 0x513 SWAP3 DUP11 SWAP3 SWAP1 SWAP2 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x277B JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x52D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x541 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x565 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x23B4 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x577 PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x48 PUSH1 0x2 EXP PUSH23 0x56414C55455F475245415445525F5448414E5F5A45524F MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 CALLVALUE DUP3 LT PUSH2 0x5D0 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x5F9 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x5E3 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD MLOAD PUSH1 0x0 PUSH2 0xF15 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x3A PUSH1 0x2 EXP PUSH25 0x151052D15497D054D4D15517D5D1551217D491545552549151 MUL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND SWAP2 AND EQ PUSH2 0x660 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x66C CALLVALUE DUP7 DUP7 PUSH2 0xF91 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 PUSH1 0x2 EXP MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6D5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x6E7 DUP10 DUP10 DUP10 DUP10 DUP6 PUSH2 0x1079 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH2 0x710 PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 CALLVALUE GT PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x48 PUSH1 0x2 EXP PUSH23 0x56414C55455F475245415445525F5448414E5F5A45524F MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x76E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x781 DUP12 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x5E3 JUMPI INVALID JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x3A PUSH1 0x2 EXP PUSH25 0x151052D15497D054D4D15517D5D1551217D491545552549151 MUL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP5 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND SWAP2 AND EQ PUSH2 0x7E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x7F8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD PUSH1 0x1 DUP13 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x818 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD MLOAD SUB DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x835 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP2 POP PUSH1 0xFF DUP3 AND PUSH1 0x1 EQ DUP1 PUSH2 0x85D JUMPI POP PUSH1 0xFF DUP3 AND PUSH1 0x2 EQ JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x48 PUSH1 0x2 EXP PUSH23 0x554E535550504F525445445F544F4B454E5F50524F5859 MUL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x8B1 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP POP PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0xE4 PUSH1 0x2 EXP PUSH4 0xD0E30DB MUL DUP2 MSTORE SWAP1 MLOAD CALLVALUE SWAP3 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP2 PUSH4 0xD0E30DB0 SWAP2 DUP5 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x912 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0xFF DUP3 AND PUSH1 0x1 EQ ISZERO PUSH2 0x937 JUMPI PUSH2 0x930 DUP12 DUP12 DUP12 DUP12 DUP12 PUSH2 0x11FE JUMP JUMPDEST SWAP4 POP PUSH2 0x953 JUMP JUMPDEST PUSH1 0xFF DUP3 AND PUSH1 0x2 EQ ISZERO PUSH2 0x953 JUMPI PUSH2 0x950 DUP12 DUP12 DUP12 DUP12 DUP12 PUSH2 0x13DF JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH2 0x961 DUP2 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0xE84 JUMP JUMPDEST SWAP1 POP PUSH2 0x971 DUP2 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x1625 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x16 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2919 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x9B6 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x9C7 DUP2 DUP6 PUSH1 0x20 ADD MLOAD DUP9 DUP9 PUSH2 0x1642 JUMP JUMPDEST POP POP POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x2710 DUP2 JUMP JUMPDEST PUSH2 0x3E8 DUP2 JUMP JUMPDEST PUSH2 0x9EF PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x9FD PUSH2 0x1C7F JUMP JUMPDEST PUSH2 0xA25 DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA0F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD PUSH1 0x0 PUSH2 0xF15 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x42 PUSH1 0x2 EXP PUSH24 0x151052D15497D054D4D15517D6949617D491545552549151 MUL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP7 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP9 AND SWAP2 AND EQ PUSH2 0xA8B JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP JUMPDEST DUP8 MLOAD DUP5 LT ISZERO PUSH2 0xBE4 JUMPI PUSH2 0xAC9 DUP9 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAAB JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x338 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x28F9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0xB0E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0xB1D DUP8 DUP8 PUSH1 0x0 ADD MLOAD PUSH2 0xE84 JUMP JUMPDEST SWAP3 POP PUSH2 0xB84 DUP9 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB30 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH2 0xB7E DUP11 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB4F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP12 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB6B JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH2 0xE84 JUMP JUMPDEST DUP6 PUSH2 0xE96 JUMP JUMPDEST SWAP2 POP PUSH2 0xBAC DUP9 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB97 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x1A9 DUP5 PUSH1 0x1 PUSH2 0x1719 JUMP JUMPDEST SWAP1 POP PUSH2 0xBC0 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD PUSH2 0xE84 JUMP JUMPDEST DUP2 MSTORE PUSH2 0xBCC DUP7 DUP3 PUSH2 0xEB3 JUMP JUMPDEST DUP6 MLOAD DUP8 GT PUSH2 0xBD9 JUMPI PUSH2 0xBE4 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0xA91 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0xC1F JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP1 PUSH2 0x274C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0xE1 PUSH1 0x2 EXP PUSH4 0x4960A10F MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x92C1421E SWAP1 PUSH2 0xC52 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2803 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC80 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xCA4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x205C JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO PUSH2 0xDCA JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x95EA7B3 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH2 0xCEC SWAP1 DUP5 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH2 0x26E0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD1A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xD3E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2307 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x95EA7B3 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH2 0xD76 SWAP1 DUP5 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH2 0x26E0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDA4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xDC8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2307 JUMP JUMPDEST POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xE1 PUSH1 0x2 EXP PUSH4 0x785CF2DD MUL JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0xE0E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP1 PUSH2 0x274C JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO PUSH2 0xE39 JUMPI PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP5 MLOAD ADD DIV PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xE7B JUMPI PUSH1 0x20 DUP2 MUL DUP6 DUP2 ADD MLOAD SWAP1 DUP6 ADD MLOAD DUP1 DUP3 EQ SWAP5 POP DUP5 PUSH2 0xE71 JUMPI DUP4 SWAP3 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0xE4F JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xE90 JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEAB PUSH2 0xEA5 DUP6 DUP5 PUSH2 0x1728 JUMP JUMPDEST DUP5 PUSH2 0x174C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD PUSH2 0xEC1 SWAP2 SWAP1 PUSH2 0x1719 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0xED7 SWAP2 SWAP1 PUSH2 0x1719 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0xEF0 SWAP2 SWAP1 PUSH2 0x1719 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0xF09 SWAP2 SWAP1 PUSH2 0x1719 JUMP JUMPDEST PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2939 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790191817 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0xF7E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP POP ADD PUSH1 0x14 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x0 PUSH2 0xFFFF DUP5 AND DUP2 LT DUP1 ISZERO PUSH2 0xFAF JUMPI POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1071 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x40 PUSH1 0x2 EXP PUSH24 0x4645455F50524F504F5254494F4E5F544F4F5F4C41524745 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3E8 PUSH2 0xFFFF DUP7 AND GT ISZERO PUSH2 0x1010 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x102A PUSH2 0x1022 DUP4 DUP7 PUSH2 0xFFFF AND PUSH2 0x1728 JUMP JUMPDEST PUSH2 0x2710 PUSH2 0x174C JUMP JUMPDEST SWAP1 POP PUSH2 0x1036 DUP3 DUP3 PUSH2 0xE84 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x106F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1081 PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x108C PUSH2 0x1C7F JUMP JUMPDEST PUSH2 0x1094 PUSH2 0x1C7F JUMP JUMPDEST PUSH2 0x109C PUSH2 0x1C7F JUMP JUMPDEST DUP7 SWAP5 POP PUSH2 0x10B1 DUP12 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA0F JUMPI INVALID JUMPDEST SWAP4 POP PUSH2 0x10BD DUP12 DUP9 PUSH2 0x1763 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 DUP4 PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x10F8 JUMPI PUSH2 0x10DB DUP10 DUP10 DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x184B JUMP JUMPDEST SWAP2 POP PUSH2 0x10EB DUP6 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0xE84 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP5 ADD MLOAD SWAP1 DUP9 ADD MSTORE SWAP5 POP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0xE3 PUSH1 0x2 EXP PUSH4 0xFC3B301 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x7E1D9808 SWAP1 PUSH2 0x112F SWAP1 DUP15 SWAP1 DUP10 SWAP1 DUP16 SWAP1 PUSH1 0x4 ADD PUSH2 0x26FB JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1149 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x115D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1181 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2325 JUMP JUMPDEST SWAP1 POP PUSH2 0x118D DUP7 DUP3 PUSH2 0xEB3 JUMP JUMPDEST PUSH2 0x119B DUP8 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x1625 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x16 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2919 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x11E0 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x11F0 DUP5 CALLER DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x1AC1 JUMP JUMPDEST POP POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1206 PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1210 PUSH2 0x1C7F JUMP JUMPDEST PUSH2 0x1218 PUSH2 0x1C7F JUMP JUMPDEST PUSH2 0x1220 PUSH2 0x1C7F JUMP JUMPDEST PUSH2 0x1232 DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA0F JUMPI INVALID JUMPDEST PUSH1 0x2 SLOAD SWAP1 SWAP5 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND SWAP2 AND EQ ISZERO PUSH2 0x12A6 JUMPI PUSH2 0x1256 DUP11 DUP11 DUP9 PUSH2 0x184B JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x16 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2919 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP5 POP DUP8 GT ISZERO PUSH2 0x12A0 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x13B9 JUMP JUMPDEST PUSH2 0x12B0 DUP11 DUP8 PUSH2 0x2E6 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x12E5 JUMPI PUSH2 0x12CE DUP9 DUP9 DUP5 PUSH1 0x60 ADD MLOAD PUSH2 0x184B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP8 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MLOAD SWAP1 DUP8 ADD MSTORE SWAP1 POP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xE5FA431B MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xE5FA431B SWAP1 PUSH2 0x131C SWAP1 DUP14 SWAP1 DUP11 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x26FB JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1336 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x134A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x136E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2325 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x16 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2919 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP5 POP DUP8 EQ PUSH2 0x13B7 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP JUMPDEST PUSH2 0x13C3 DUP6 DUP5 PUSH2 0xEB3 JUMP JUMPDEST PUSH2 0x13D2 DUP5 CALLER DUP8 PUSH1 0x0 ADD MLOAD PUSH2 0x1AC1 JUMP JUMPDEST POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x13E7 PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x13F2 PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x13FD PUSH2 0x1C7F JUMP JUMPDEST DUP12 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH32 0x41535345545F414D4F554E545F4D5553545F4D415443485F4F524445525F5349 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xF0 PUSH1 0x2 EXP PUSH2 0x5A45 MUL SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP2 DUP11 EQ PUSH2 0x1468 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH1 0x0 SWAP6 POP JUMPDEST DUP13 MLOAD DUP7 LT ISZERO PUSH2 0x14A9 JUMPI PUSH2 0x149C DUP8 DUP15 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1489 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH2 0x1719 JUMP JUMPDEST SWAP7 POP PUSH1 0x1 SWAP1 SWAP6 ADD SWAP5 PUSH2 0x146E JUMP JUMPDEST PUSH1 0x0 DUP8 GT ISZERO PUSH2 0x14D4 JUMPI PUSH2 0x14BD DUP12 DUP12 DUP10 PUSH2 0x184B JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 ADD MLOAD SWAP1 DUP11 ADD MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP11 ADD MSTORE SWAP5 POP JUMPDEST PUSH2 0x14E6 DUP14 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA0F JUMPI INVALID JUMPDEST SWAP4 POP PUSH1 0x0 SWAP3 POP JUMPDEST DUP13 MLOAD DUP4 LT ISZERO PUSH2 0x1615 JUMPI PUSH1 0x0 SLOAD DUP14 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x64A3BC15 SWAP1 DUP16 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x1519 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP16 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1531 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP16 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x154D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 PUSH1 0x2 EXP MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1578 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x27B5 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x15A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x15CA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2325 JUMP JUMPDEST SWAP2 POP PUSH2 0x15D6 DUP9 DUP4 PUSH2 0xEB3 JUMP JUMPDEST PUSH2 0x15FD DUP14 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x15E7 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD PUSH1 0x14 PUSH2 0x1B96 JUMP JUMPDEST SWAP1 POP PUSH2 0x160A DUP5 CALLER DUP4 PUSH2 0x1BA2 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x14ED JUMP JUMPDEST POP POP POP POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1637 PUSH2 0x1022 DUP6 PUSH2 0x251C PUSH2 0x1728 JUMP JUMPDEST SWAP1 SWAP3 LT ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP7 GT ISZERO PUSH2 0x1710 JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x2E1A7D4D MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x1681 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x27F5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x169B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x16AF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP6 SWAP2 POP PUSH2 0x16CA DUP6 PUSH2 0x16C5 DUP8 DUP8 DUP8 PUSH2 0xF91 JUMP JUMPDEST PUSH2 0xE84 JUMP JUMPDEST SWAP1 POP PUSH2 0x16D6 DUP3 DUP3 PUSH2 0xE84 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 GT ISZERO PUSH2 0x1710 JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 DUP4 ISZERO PUSH2 0x8FC MUL SWAP1 DUP5 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x170E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xDDA JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 0x1744 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 0x1741 JUMPI INVALID JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 0xDDA JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 0x175A JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x176B PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1776 PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 SWAP3 POP JUMPDEST DUP6 MLOAD DUP4 LT ISZERO PUSH2 0x1842 JUMPI PUSH2 0x17B3 DUP7 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1795 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x338 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x28F9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x17F8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x1807 DUP6 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0xE84 JUMP JUMPDEST SWAP2 POP PUSH2 0x181A DUP7 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3F6 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x1826 DUP5 DUP3 PUSH2 0xEB3 JUMP JUMPDEST DUP5 DUP5 PUSH1 0x20 ADD MLOAD EQ ISZERO PUSH2 0x1837 JUMPI PUSH2 0x1842 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x177B JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1853 PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1861 PUSH2 0x1C7F JUMP JUMPDEST PUSH2 0x1873 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA0F JUMPI INVALID JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x42 PUSH1 0x2 EXP PUSH24 0x151052D15497D054D4D15517D6949617D491545552549151 MUL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP7 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP9 AND SWAP2 AND EQ PUSH2 0x18D9 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP JUMPDEST DUP9 MLOAD DUP5 LT ISZERO PUSH2 0x1AB5 JUMPI PUSH2 0x1917 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x18F9 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x338 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x28F9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x195C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x196B DUP8 DUP8 PUSH1 0x0 ADD MLOAD PUSH2 0xE84 JUMP JUMPDEST SWAP3 POP PUSH2 0x19B9 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x197E JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH2 0xB7E DUP12 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x199D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB6B JUMPI INVALID JUMPDEST PUSH1 0x0 SLOAD DUP11 MLOAD SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 PUSH4 0xB4BE83D5 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0x19DD JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x19F2 DUP6 PUSH1 0x1 PUSH2 0x1719 JUMP JUMPDEST DUP12 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1A00 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 PUSH1 0x2 EXP MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A2B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x27B5 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A59 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1A7D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2325 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A91 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD PUSH2 0xE84 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1A9D DUP7 DUP3 PUSH2 0xEB3 JUMP JUMPDEST DUP6 MLOAD DUP8 GT PUSH2 0x1AAA JUMPI PUSH2 0x1AB5 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x18DF JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xA9059CBB MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x1AF2 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x26E0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1B20 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1B44 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2307 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xF DUP2 MSTORE PUSH1 0x8A PUSH1 0x2 EXP PUSH15 0x1514905394D1915497D19052531151 MUL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x1B90 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP4 DUP4 PUSH2 0x1C0C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x23B872DD MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x1BD5 SWAP1 ADDRESS SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x26B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1C03 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2939 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790199917 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x1C75 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP3 CALLDATALOAD PUSH2 0x2888 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP3 MLOAD PUSH2 0x2888 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x1CF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1D04 PUSH2 0x1CFF DUP3 PUSH2 0x2837 JUMP JUMPDEST PUSH2 0x2811 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x42B JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x1D2C DUP9 DUP3 PUSH2 0x1DB7 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1D16 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x1D53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1D61 PUSH2 0x1CFF DUP3 PUSH2 0x2837 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x42B JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x1D89 DUP9 DUP3 PUSH2 0x1EC7 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1D73 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP3 MLOAD PUSH2 0x28B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP3 MLOAD PUSH2 0x28A8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x1DC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1DD6 PUSH2 0x1CFF DUP3 PUSH2 0x2857 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1DF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1842 DUP4 DUP3 DUP5 PUSH2 0x28B6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E19 PUSH1 0x80 PUSH2 0x2811 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1E27 DUP5 DUP5 PUSH2 0x1DAB JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x1E38 DUP5 DUP5 DUP4 ADD PUSH2 0x1DAB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1E4C DUP5 DUP3 DUP6 ADD PUSH2 0x1DAB JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x1E60 DUP5 DUP3 DUP6 ADD PUSH2 0x1DAB JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E88 PUSH1 0x60 PUSH2 0x2811 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1E96 DUP5 DUP5 PUSH2 0x2032 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x1EA7 DUP5 DUP5 DUP4 ADD PUSH2 0x1DAB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1EBB DUP5 DUP3 DUP6 ADD PUSH2 0x1DAB JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EE5 PUSH2 0x180 PUSH2 0x2811 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1EF3 DUP5 DUP5 PUSH2 0x1CC8 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x1F04 DUP5 DUP5 DUP4 ADD PUSH2 0x1CC8 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1F18 DUP5 DUP3 DUP6 ADD PUSH2 0x1CC8 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x1F2C DUP5 DUP3 DUP6 ADD PUSH2 0x1CC8 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x1F40 DUP5 DUP3 DUP6 ADD PUSH2 0x201A JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x1F54 DUP5 DUP3 DUP6 ADD PUSH2 0x201A JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x1F68 DUP5 DUP3 DUP6 ADD PUSH2 0x201A JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0x1F7C DUP5 DUP3 DUP6 ADD PUSH2 0x201A JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP PUSH2 0x100 PUSH2 0x1F91 DUP5 DUP3 DUP6 ADD PUSH2 0x201A JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH2 0x120 PUSH2 0x1FA7 DUP5 DUP3 DUP6 ADD PUSH2 0x201A JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MSTORE POP PUSH2 0x140 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x1FC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FD4 DUP5 DUP3 DUP6 ADD PUSH2 0x1DB7 JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MSTORE POP PUSH2 0x160 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x1FF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2001 DUP5 DUP3 DUP6 ADD PUSH2 0x1DB7 JUMP JUMPDEST PUSH2 0x160 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP3 CALLDATALOAD PUSH2 0x28A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP3 CALLDATALOAD PUSH2 0x28A8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP3 CALLDATALOAD PUSH2 0x28AB JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP3 MLOAD PUSH2 0x28AB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2050 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEAB DUP5 DUP5 PUSH2 0x1CC8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x206E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEAB DUP5 DUP5 PUSH2 0x1CD4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x208F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x209B DUP7 DUP7 PUSH2 0x1CC8 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x20AC DUP7 DUP3 DUP8 ADD PUSH2 0x201A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x20C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20D4 DUP7 DUP3 DUP8 ADD PUSH2 0x1DB7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x20F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x210D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2119 DUP10 DUP3 DUP11 ADD PUSH2 0x1D42 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x2135 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2141 DUP10 DUP3 DUP11 ADD PUSH2 0x1CE0 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x215D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2169 DUP10 DUP3 DUP11 ADD PUSH2 0x1D42 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x2185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2191 DUP10 DUP3 DUP11 ADD PUSH2 0x1CE0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x21A2 DUP10 DUP3 DUP11 ADD PUSH2 0x200E JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x21B3 DUP10 DUP3 DUP11 ADD PUSH2 0x1CC8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x21DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x21F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21FD DUP11 DUP3 DUP12 ADD PUSH2 0x1D42 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x2219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2225 DUP11 DUP3 DUP12 ADD PUSH2 0x1CE0 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x2241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x224D DUP11 DUP3 DUP12 ADD PUSH2 0x1D42 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x2269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2275 DUP11 DUP3 DUP12 ADD PUSH2 0x1CE0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x2286 DUP11 DUP3 DUP12 ADD PUSH2 0x201A JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x2297 DUP11 DUP3 DUP12 ADD PUSH2 0x200E JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x22A8 DUP11 DUP3 DUP12 ADD PUSH2 0x1CC8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x22CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x22E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22EC DUP6 DUP3 DUP7 ADD PUSH2 0x1D42 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x22FD DUP6 DUP3 DUP7 ADD PUSH2 0x201A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2319 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEAB DUP5 DUP5 PUSH2 0x1D9F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEAB DUP5 DUP5 PUSH2 0x1DFD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2355 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEAB DUP5 DUP5 PUSH2 0x1E6C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2374 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x238A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22EC DUP6 DUP3 DUP7 ADD PUSH2 0x1EC7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEAB DUP5 DUP5 PUSH2 0x2026 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xA0 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x23D3 DUP6 DUP6 PUSH2 0x2032 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x22FD DUP6 DUP3 DUP7 ADD PUSH2 0x1DFD JUMP JUMPDEST PUSH2 0x23ED DUP2 PUSH2 0x2888 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23FE DUP3 PUSH2 0x2884 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x2417 DUP6 PUSH2 0x287E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x244E JUMPI DUP4 DUP4 SUB DUP9 MSTORE PUSH2 0x2432 DUP4 DUP4 MLOAD PUSH2 0x24BE JUMP JUMPDEST SWAP3 POP PUSH2 0x243D DUP3 PUSH2 0x287E JUMP JUMPDEST PUSH1 0x20 SWAP9 SWAP1 SWAP9 ADD SWAP8 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x241A JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2465 DUP3 PUSH2 0x2884 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x247E DUP6 PUSH2 0x287E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x244E JUMPI DUP4 DUP4 SUB DUP9 MSTORE PUSH2 0x2499 DUP4 DUP4 MLOAD PUSH2 0x258C JUMP JUMPDEST SWAP3 POP PUSH2 0x24A4 DUP3 PUSH2 0x287E JUMP JUMPDEST PUSH1 0x20 SWAP9 SWAP1 SWAP9 ADD SWAP8 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x2481 JUMP JUMPDEST PUSH2 0x23ED DUP2 PUSH2 0x2894 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24C9 DUP3 PUSH2 0x2884 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x24DD DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x28C2 JUMP JUMPDEST PUSH2 0x24E6 DUP2 PUSH2 0x28EE JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x33 DUP2 MSTORE PUSH32 0x4F6E6C7920636F6E7472616374206F776E657220697320616C6C6F7765642074 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x69 PUSH1 0x2 EXP PUSH19 0x379031B0B636103A3434B99036B2BA3437B217 MUL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0x2553 DUP5 DUP3 PUSH2 0x2698 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2566 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2698 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2579 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x2698 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1B90 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x2698 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x180 DUP5 ADD SWAP1 PUSH2 0x25A1 DUP6 DUP3 PUSH2 0x23E4 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x25B4 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x23E4 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x25C7 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x23E4 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x25DA PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x23E4 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x25ED PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x2698 JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x2600 PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x2698 JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x2613 PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0x2698 JUMP JUMPDEST POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x2626 PUSH1 0xE0 DUP7 ADD DUP3 PUSH2 0x2698 JUMP JUMPDEST POP PUSH2 0x100 DUP4 ADD MLOAD PUSH2 0x263B PUSH2 0x100 DUP7 ADD DUP3 PUSH2 0x2698 JUMP JUMPDEST POP PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x2650 PUSH2 0x120 DUP7 ADD DUP3 PUSH2 0x2698 JUMP JUMPDEST POP PUSH2 0x140 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x140 DUP7 ADD MSTORE PUSH2 0x266A DUP3 DUP3 PUSH2 0x24BE JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x160 DUP7 ADD MSTORE PUSH2 0x2686 DUP3 DUP3 PUSH2 0x24BE JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x23ED DUP2 PUSH2 0x28A1 JUMP JUMPDEST PUSH2 0x23ED DUP2 PUSH2 0x28A8 JUMP JUMPDEST PUSH2 0x23ED DUP2 PUSH2 0x28AB JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xE7E DUP3 DUP5 PUSH2 0x23E4 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x26C6 DUP3 DUP7 PUSH2 0x23E4 JUMP JUMPDEST PUSH2 0x26D3 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x23E4 JUMP JUMPDEST PUSH2 0xEAB PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2698 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x26EE DUP3 DUP6 PUSH2 0x23E4 JUMP JUMPDEST PUSH2 0xDDA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2698 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x270C DUP2 DUP7 PUSH2 0x245A JUMP JUMPDEST SWAP1 POP PUSH2 0x271B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2698 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2686 DUP2 DUP5 PUSH2 0x23F3 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xE7E DUP3 DUP5 PUSH2 0x24B5 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xDDA DUP2 DUP5 PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xE7E DUP2 PUSH2 0x24F3 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xE7E DUP3 DUP5 PUSH2 0x2542 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xDDA DUP2 DUP5 PUSH2 0x258C JUMP JUMPDEST PUSH1 0x80 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x278C DUP2 DUP8 PUSH2 0x258C JUMP JUMPDEST SWAP1 POP PUSH2 0x279B PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x26A1 JUMP JUMPDEST PUSH2 0x27A8 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2698 JUMP JUMPDEST PUSH2 0x2686 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2698 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x27C6 DUP2 DUP7 PUSH2 0x258C JUMP JUMPDEST SWAP1 POP PUSH2 0x27D5 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2698 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2686 DUP2 DUP5 PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xE7E DUP3 DUP5 PUSH2 0x268F JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xE7E DUP3 DUP5 PUSH2 0x2698 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xE7E DUP3 DUP5 PUSH2 0x26A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x282F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP3 GT ISZERO PUSH2 0x284D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP3 GT ISZERO PUSH2 0x286D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 PUSH1 0x2 EXP SUB NOT AND SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x28DD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x28C5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1B90 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP STOP MSTORE8 COINBASE 0x4d GASLIMIT 0x5f COINBASE MSTORE8 MSTORE8 GASLIMIT SLOAD 0x5f SLOAD MSIZE POP GASLIMIT 0x5f MSTORE GASLIMIT MLOAD SSTORE 0x49 MSTORE GASLIMIT DIFFICULTY STOP STOP STOP STOP STOP STOP STOP STOP SSTORE 0x4e COINBASE NUMBER NUMBER GASLIMIT POP SLOAD COINBASE TIMESTAMP 0x4c GASLIMIT 0x5f SLOAD 0x48 MSTORE GASLIMIT MSTORE8 0x48 0x4f 0x4c DIFFICULTY STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP 0x4c PUSH6 0x6E677468206D PUSH22 0x73742062652067726561746572207468616E206F7220 PUSH6 0xA265627A7A72 ADDRESS PC KECCAK256 0xe SWAP16 MSTORE RETURNDATASIZE MLOAD 0xf5 GASLIMIT DUP1 ISZERO 0xb1 0xea 0xa8 MSTORE8 0xad MSTORE8 ADDRESS BLOCKHASH RETURNDATASIZE DUP7 PUSH9 0xA3E5B85B2C2E34302E JUMP LOG3 CALLDATACOPY PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
				"sourceMap": "208:1077:0:-;;;323:331;8:9:-1;5:2;;;30:1;27;20:12;5:2;323:331:0;;;;;;;;;;;;;;;;;;;;;;363:5:41;:18;;371:10;-1:-1:-1;;;;;;363:18:41;;;;;;;-1:-1:-1;511:20:0;;;;-1:-1:-1;;;;;511:20:0;;;;;;;;;;-1:-1:-1;541:25:0;;;;;;;;;;-1:-1:-1;576:21:0;;;;;;;;;;;607:40;629:17;607:21;;;;:40;:::i;:::-;323:331;;;;208:1077;;945:338;460:5:41;;1048:20:0;;-1:-1:-1;;;;;460:5:41;446:10;:19;425:117;;;;;;;;;;;;;;;;;;;;;;1071:8:0;;:41;;;;;-1:-1:-1;;;;;1071:8:0;;;;:22;;:41;;1094:17;;1071:41;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1071:41:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1071:41:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1071:41:0;;;;;;;;;1048:64;-1:-1:-1;;;;;;1126:26:0;;;1122:155;;1168:11;;:43;;;;;-1:-1:-1;;;;;1168:11:0;;;;:19;;:43;;1188:12;;-1:-1:-1;;692:12:5;1168:43:0;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1168:43:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1168:43:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1168:43:0;;;;;;;;;-1:-1:-1;1225:9:0;;:41;;;;;-1:-1:-1;;;;;1225:9:0;;;;:17;;:41;;1243:12;;-1:-1:-1;;692:12:5;1225:41:0;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1225:41:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1225:41:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1225:41:0;;;;;;;;;;1122:155;945:338;;:::o;5:122:-1:-;;83:39;114:6;108:13;83:39;;;74:48;68:59;-1:-1;;;68:59;134:116;;209:36;237:6;231:13;209:36;;257:156;;352:56;400:6;394:13;352:56;;740:118;;816:37;845:6;839:13;816:37;;865:263;;980:2;968:9;959:7;955:23;951:32;948:2;;;996:1;993;986:12;948:2;1031:1;1048:64;1104:7;1084:9;1048:64;;;1038:74;942:186;-1:-1;;;;942:186;1135:257;;1247:2;1235:9;1226:7;1222:23;1218:32;1215:2;;;1263:1;1260;1253:12;1215:2;1298:1;1315:61;1368:7;1348:9;1315:61;;1399:764;;;;;1611:3;1599:9;1590:7;1586:23;1582:33;1579:2;;;1628:1;1625;1618:12;1579:2;1663:1;1680:81;1753:7;1733:9;1680:81;;;1670:91;;1642:125;1798:2;1816:78;1886:7;1877:6;1866:9;1862:22;1816:78;;;1806:88;;1777:123;1931:2;1949:81;2022:7;2013:6;2002:9;1998:22;1949:81;;;1939:91;;1910:126;2067:2;2085:62;2139:7;2130:6;2119:9;2115:22;2085:62;;;2075:72;;2046:107;1573:590;;;;;;;;2170:110;2243:31;2268:5;2243:31;;;2238:3;2231:44;2225:55;;;2288:397;2443:2;2431:15;;2480:66;2475:2;2466:12;;2459:88;2581:66;2576:2;2567:12;;2560:88;2676:2;2667:12;;2424:261;2693:110;2766:31;2791:5;2766:31;;2810:104;2879:29;2902:5;2879:29;;2921:294;3057:2;3042:18;;3071:61;3046:9;3105:6;3071:61;;;3143:62;3201:2;3190:9;3186:18;3177:6;3143:62;;3222:387;3403:2;3417:47;;;3388:18;;3478:121;3388:18;3478:121;;;3470:129;3374:235;-1:-1;;3374:235;3616:185;3720:2;3705:18;;3734:57;3709:9;3764:6;3734:57;;3808:128;-1:-1;;;;;3877:54;;3860:76;3943:79;4012:5;3995:27;4029:88;4107:4;4096:16;;4079:38;4259:92;4332:13;4325:21;;4308:43;4358:122;;4444:31;4469:5;4444:31;;4427:53;208:1077:0;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052600436106100b65763ffffffff60e060020a6000350416631b67ad77811461013657806320472cf71461016c5780634a23b67b1461018e5780638a637f3d146101ae5780638da5cb5b146101c15780638ee1a642146101e35780638fbb3ea614610205578063a28fe02e14610218578063b3cd42541461022d578063bc063e1a14610242578063d3df5f2d14610257578063de5f8e4114610277578063f0b9e5ba14610299578063f2fde38b146102c6575b60015460408051606081018252602381527f44454641554c545f46554e4354494f4e5f574554485f434f4e54524143545f4f602082015260e860020a624e4c59029181019190915290600160a060020a031633146101335760405160e560020a62461bcd02815260040161012a919061273b565b60405180910390fd5b50005b34801561014257600080fd5b506101566101513660046122b7565b6102e6565b604051610163919061275c565b60405180910390f35b34801561017857600080fd5b50610181610435565b60405161016391906127e7565b34801561019a57600080fd5b506101566101a9366004612361565b61043b565b6101566101bc3660046120de565b61056f565b3480156101cd57600080fd5b506101d66106f4565b60405161016391906126aa565b3480156101ef57600080fd5b506101f8610703565b6040516101639190612803565b6101566102133660046121c0565b610708565b34801561022457600080fd5b506101f86109d6565b34801561023957600080fd5b506101816109db565b34801561024e57600080fd5b506101816109e1565b34801561026357600080fd5b506101566102723660046122b7565b6109e7565b34801561028357600080fd5b50610297610292366004612396565b610bef565b005b3480156102a557600080fd5b506102b96102b436600461207a565b610dce565b604051610163919061272d565b3480156102d257600080fd5b506102976102e136600461203e565b610de1565b6102ee611c7f565b60008060006102fb611c7f565b600093505b865184101561042b5761034c878581518110151561031a57fe5b90602001906020020151610140015188600081518110151561033857fe5b906020019060200201516101400151610e3c565b60408051808201909152601881526000805160206128f983398151915260208201529015156103915760405160e560020a62461bcd02815260040161012a919061273b565b506103a0868660000151610e84565b92506103e387858151811015156103b357fe5b9060200190602002015160a0015188868151811015156103cf57fe5b906020019060200201516080015185610e96565b915061040687858151811015156103f657fe5b906020019060200201518361043b565b90506104128582610eb3565b84518614156104205761042b565b600190930192610300565b5050505092915050565b61251c81565b610443611c7f565b61044b611ca8565b6000805460405160e060020a63c75e0a81028152600160a060020a039091169063c75e0a819061047f90889060040161276a565b606060405180830381600087803b15801561049957600080fd5b505af11580156104ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104d19190810190612343565b6000548151604080840151905160e260020a631c13b407028152939550600160a060020a039092169263704ed01c92610513928a929091908a9060040161277b565b60a060405180830381600087803b15801561052d57600080fd5b505af1158015610541573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061056591908101906123b4565b9695505050505050565b610577611c7f565b6040805180820190915260178152604860020a7656414c55455f475245415445525f5448414e5f5a45524f02602082015260009081903482106105d05760405160e560020a62461bcd02815260040161012a919061273b565b506105f98960008151811015156105e357fe5b9060200190602002015161016001516000610f15565b6001546040805180820190915260198152603a60020a78151052d15497d054d4d15517d5d1551217d491545552549151026020820152919350600160a060020a038085169116146106605760405160e560020a62461bcd02815260040161012a919061273b565b5061066c348686610f91565b9050600160009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0826040518263ffffffff1660e060020a0281526004016000604051808303818588803b1580156106c157600080fd5b505af11580156106d5573d6000803e3d6000fd5b50505050506106e78989898985611079565b9998505050505050505050565b600354600160a060020a031681565b600181565b610710611c7f565b6000806000803411604080519081016040528060178152602001604860020a7656414c55455f475245415445525f5448414e5f5a45524f0281525090151561076e5760405160e560020a62461bcd02815260040161012a919061273b565b506107818b60008151811015156105e357fe5b6001546040805180820190915260198152603a60020a78151052d15497d054d4d15517d5d1551217d491545552549151026020820152919450600160a060020a038086169116146107e85760405160e560020a62461bcd02815260040161012a919061273b565b508a60008151811015156107f857fe5b90602001906020020151610140015160018c600081518110151561081857fe5b906020019060200201516101400151510381518110151561083557fe5b016020015160f860020a90819004810204915060ff82166001148061085d575060ff82166002145b6040805180820190915260178152604860020a76554e535550504f525445445f544f4b454e5f50524f58590260208201529015156108b15760405160e560020a62461bcd02815260040161012a919061273b565b50506001546040805160e460020a630d0e30db02815290513492600160a060020a03169163d0e30db091849160048082019260009290919082900301818588803b1580156108fe57600080fd5b505af1158015610912573d6000803e3d6000fd5b505050505060ff821660011415610937576109308b8b8b8b8b6111fe565b9350610953565b60ff821660021415610953576109508b8b8b8b8b6113df565b93505b610961818560200151610e84565b9050610971818560200151611625565b604080518082019091526016815260008051602061291983398151915260208201529015156109b65760405160e560020a62461bcd02815260040161012a919061273b565b506109c78185602001518888611642565b50505050979650505050505050565b600281565b61271081565b6103e881565b6109ef611c7f565b6000806000806109fd611c7f565b610a25886000815181101515610a0f57fe5b9060200190602002015161014001516000610f15565b6002546040805180820190915260188152604260020a77151052d15497d054d4d15517d6949617d491545552549151026020820152919650600160a060020a03808816911614610a8b5760405160e560020a62461bcd02815260040161012a919061273b565b50600093505b8751841015610be457610ac98885815181101515610aab57fe5b90602001906020020151610140015189600081518110151561033857fe5b60408051808201909152601881526000805160206128f98339815191526020820152901515610b0e5760405160e560020a62461bcd02815260040161012a919061273b565b50610b1d878760000151610e84565b9250610b848885815181101515610b3057fe5b9060200190602002015160a00151610b7e8a87815181101515610b4f57fe5b90602001906020020151608001518b88815181101515610b6b57fe5b9060200190602002015160e00151610e84565b85610e96565b9150610bac8885815181101515610b9757fe5b906020019060200201516101a9846001611719565b9050610bc081600001518260600151610e84565b8152610bcc8682610eb3565b85518711610bd957610be4565b600190930192610a91565b505050505092915050565b600354600090600160a060020a03163314610c1f5760405160e560020a62461bcd02815260040161012a9061274c565b60005460405160e160020a634960a10f028152600160a060020a03909116906392c1421e90610c52908590600401612803565b602060405180830381600087803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ca4919081019061205c565b9050600160a060020a03811615610dca5760015460405160e060020a63095ea7b3028152600160a060020a039091169063095ea7b390610cec908490600019906004016126e0565b602060405180830381600087803b158015610d0657600080fd5b505af1158015610d1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d3e9190810190612307565b5060025460405160e060020a63095ea7b3028152600160a060020a039091169063095ea7b390610d76908490600019906004016126e0565b602060405180830381600087803b158015610d9057600080fd5b505af1158015610da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610dc89190810190612307565b505b5050565b60e160020a63785cf2dd025b9392505050565b600354600160a060020a03163314610e0e5760405160e560020a62461bcd02815260040161012a9061274c565b600160a060020a03811615610e395760038054600160a060020a031916600160a060020a0383161790555b50565b60006020601f8451010460018101905060005b81811015610e7b57602081028581015190850151808214945084610e71578392505b5050600101610e4f565b50505b92915050565b600082821115610e9057fe5b50900390565b6000610eab610ea58584611728565b8461174c565b949350505050565b81518151610ec19190611719565b825260208083015190820151610ed79190611719565b602083015260408083015190820151610ef09190611719565b604083015260608083015190820151610f099190611719565b60609092019190915250565b60008160140183511015606060405190810160405280602b8152602001600080516020612939833981519152815260200160a960020a6a38bab0b6103a379019181702815250901515610f7e5760405160e560020a62461bcd02815260040161012a919061273b565b50500160140151600160a060020a031690565b82600061ffff841681108015610faf5750600160a060020a03831615155b15611071576040805180820190915260188152604060020a774645455f50524f504f5254494f4e5f544f4f5f4c415247450260208201526103e861ffff861611156110105760405160e560020a62461bcd02815260040161012a919061273b565b5061102a611022838661ffff16611728565b61271061174c565b90506110368282610e84565b604051909250600160a060020a0384169082156108fc029083906000818181858888f1935050505015801561106f573d6000803e3d6000fd5b505b509392505050565b611081611c7f565b60008061108c611c7f565b611094611c7f565b61109c611c7f565b8694506110b18b6000815181101515610a0f57fe5b93506110bd8b88611763565b92506000836060015111156110f8576110db8989856060015161184b565b91506110eb858360200151610e84565b6060808401519088015294505b60005460405160e360020a630fc3b301028152600160a060020a0390911690637e1d98089061112f908e9089908f906004016126fb565b608060405180830381600087803b15801561114957600080fd5b505af115801561115d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111819190810190612325565b905061118d8682610eb3565b61119b878260200151611625565b604080518082019091526016815260008051602061291983398151915260208201529015156111e05760405160e560020a62461bcd02815260040161012a919061273b565b506111f084338360000151611ac1565b505050505095945050505050565b611206611c7f565b6000611210611c7f565b611218611c7f565b611220611c7f565b6112328a6000815181101515610a0f57fe5b600254909450600160a060020a03808616911614156112a6576112568a8a8861184b565b8051604080518082019091526016815260008051602061291983398151915260208201529194508711156112a05760405160e560020a62461bcd02815260040161012a919061273b565b506113b9565b6112b08a876102e6565b91506000826060015111156112e5576112ce8888846060015161184b565b602080820151908701526060808201519087015290505b60005460405160e060020a63e5fa431b028152600160a060020a039091169063e5fa431b9061131c908d908a908e906004016126fb565b608060405180830381600087803b15801561133657600080fd5b505af115801561134a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061136e9190810190612325565b80516040805180820190915260168152600080516020612919833981519152602082015291945087146113b75760405160e560020a62461bcd02815260040161012a919061273b565b505b6113c38584610eb3565b6113d284338760000151611ac1565b5050505095945050505050565b6113e7611c7f565b6000806113f2611c7f565b6000806113fd611c7f565b8b5160408051606081018252602281527f41535345545f414d4f554e545f4d5553545f4d415443485f4f524445525f5349602082015260f060020a615a4502918101919091526000918a146114685760405160e560020a62461bcd02815260040161012a919061273b565b50600095505b8c518610156114a95761149c878e8881518110151561148957fe5b9060200190602002015160e00151611719565b965060019095019461146e565b60008711156114d4576114bd8b8b8961184b565b606080820151908a0152602080820151908a015294505b6114e68d6000815181101515610a0f57fe5b9350600092505b8c51831015611615576000548d51600160a060020a03909116906364a3bc15908f908690811061151957fe5b906020019060200201518f8681518110151561153157fe5b9060200190602002015160a001518f8781518110151561154d57fe5b906020019060200201516040518463ffffffff1660e060020a028152600401611578939291906127b5565b608060405180830381600087803b15801561159257600080fd5b505af11580156115a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115ca9190810190612325565b91506115d68883610eb3565b6115fd8d848151811015156115e757fe5b9060200190602002015161014001516014611b96565b905061160a843383611ba2565b6001909201916114ed565b5050505050505095945050505050565b6000806116376110228561251c611728565b909210159392505050565b60008060008611156117105760015460405160e060020a632e1a7d4d028152600160a060020a0390911690632e1a7d4d906116819089906004016127f5565b600060405180830381600087803b15801561169b57600080fd5b505af11580156116af573d6000803e3d6000fd5b505050508591506116ca856116c5878787610f91565b610e84565b90506116d68282610e84565b9150600082111561171057604051339083156108fc029084906000818181858888f1935050505015801561170e573d6000803e3d6000fd5b505b50949350505050565b600082820183811015610dda57fe5b6000828202831580611744575082848281151561174157fe5b04145b1515610dda57fe5b600080828481151561175a57fe5b04949350505050565b61176b611c7f565b600080611776611c7f565b600092505b8551831015611842576117b3868481518110151561179557fe5b90602001906020020151610140015187600081518110151561033857fe5b60408051808201909152601881526000805160206128f983398151915260208201529015156117f85760405160e560020a62461bcd02815260040161012a919061273b565b50611807858560200151610e84565b915061181a86848151811015156103f657fe5b90506118268482610eb3565b848460200151141561183757611842565b60019092019161177b565b50505092915050565b611853611c7f565b600080600080611861611c7f565b611873896000815181101515610a0f57fe5b6002546040805180820190915260188152604260020a77151052d15497d054d4d15517d6949617d491545552549151026020820152919650600160a060020a038088169116146118d95760405160e560020a62461bcd02815260040161012a919061273b565b50600093505b8851841015611ab55761191789858151811015156118f957fe5b9060200190602002015161014001518a600081518110151561033857fe5b60408051808201909152601881526000805160206128f9833981519152602082015290151561195c5760405160e560020a62461bcd02815260040161012a919061273b565b5061196b878760000151610e84565b92506119b9898581518110151561197e57fe5b9060200190602002015160a00151610b7e8b8781518110151561199d57fe5b90602001906020020151608001518c88815181101515610b6b57fe5b6000548a51919350600160a060020a03169063b4be83d5908b90879081106119dd57fe5b906020019060200201516119f2856001611719565b8b88815181101515611a0057fe5b906020019060200201516040518463ffffffff1660e060020a028152600401611a2b939291906127b5565b608060405180830381600087803b158015611a4557600080fd5b505af1158015611a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a7d9190810190612325565b9050611a9181600001518260600151610e84565b8152611a9d8682610eb3565b85518711611aaa57611ab5565b6001909301926118df565b50505050509392505050565b60405160e060020a63a9059cbb028152600160a060020a0384169063a9059cbb90611af290859085906004016126e0565b602060405180830381600087803b158015611b0c57600080fd5b505af1158015611b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b449190810190612307565b60408051808201909152600f8152608a60020a6e1514905394d1915497d19052531151026020820152901515611b905760405160e560020a62461bcd02815260040161012a919061273b565b50505050565b6000610dda8383611c0c565b60405160e060020a6323b872dd028152600160a060020a038416906323b872dd90611bd5903090869086906004016126b8565b600060405180830381600087803b158015611bef57600080fd5b505af1158015611c03573d6000803e3d6000fd5b50505050505050565b60008160200183511015606060405190810160405280602b8152602001600080516020612939833981519152815260200160a960020a6a38bab0b6103a379019991702815250901515611c755760405160e560020a62461bcd02815260040161012a919061273b565b5050016020015190565b608060405190810160405280600081526020016000815260200160008152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b6000610dda8235612888565b6000610dda8251612888565b6000601f82018313611cf157600080fd5b8135611d04611cff82612837565b612811565b81815260209384019390925082018360005b8381101561042b5781358601611d2c8882611db7565b8452506020928301929190910190600101611d16565b6000601f82018313611d5357600080fd5b8135611d61611cff82612837565b81815260209384019390925082018360005b8381101561042b5781358601611d898882611ec7565b8452506020928301929190910190600101611d73565b6000610dda82516128b1565b6000610dda82516128a8565b6000601f82018313611dc857600080fd5b8135611dd6611cff82612857565b91508082526020830160208301858383011115611df257600080fd5b6118428382846128b6565b600060808284031215611e0f57600080fd5b611e196080612811565b90506000611e278484611dab565b8252506020611e3884848301611dab565b6020830152506040611e4c84828501611dab565b6040830152506060611e6084828501611dab565b60608301525092915050565b600060608284031215611e7e57600080fd5b611e886060612811565b90506000611e968484612032565b8252506020611ea784848301611dab565b6020830152506040611ebb84828501611dab565b60408301525092915050565b60006101808284031215611eda57600080fd5b611ee5610180612811565b90506000611ef38484611cc8565b8252506020611f0484848301611cc8565b6020830152506040611f1884828501611cc8565b6040830152506060611f2c84828501611cc8565b6060830152506080611f408482850161201a565b60808301525060a0611f548482850161201a565b60a08301525060c0611f688482850161201a565b60c08301525060e0611f7c8482850161201a565b60e083015250610100611f918482850161201a565b61010083015250610120611fa78482850161201a565b610120830152506101408201356001604060020a03811115611fc857600080fd5b611fd484828501611db7565b610140830152506101608201356001604060020a03811115611ff557600080fd5b61200184828501611db7565b6101608301525092915050565b6000610dda82356128a1565b6000610dda82356128a8565b6000610dda82356128ab565b6000610dda82516128ab565b60006020828403121561205057600080fd5b6000610eab8484611cc8565b60006020828403121561206e57600080fd5b6000610eab8484611cd4565b60008060006060848603121561208f57600080fd5b600061209b8686611cc8565b93505060206120ac8682870161201a565b92505060408401356001604060020a038111156120c857600080fd5b6120d486828701611db7565b9150509250925092565b60008060008060008060c087890312156120f757600080fd5b86356001604060020a0381111561210d57600080fd5b61211989828a01611d42565b96505060208701356001604060020a0381111561213557600080fd5b61214189828a01611ce0565b95505060408701356001604060020a0381111561215d57600080fd5b61216989828a01611d42565b94505060608701356001604060020a0381111561218557600080fd5b61219189828a01611ce0565b93505060806121a289828a0161200e565b92505060a06121b389828a01611cc8565b9150509295509295509295565b600080600080600080600060e0888a0312156121db57600080fd5b87356001604060020a038111156121f157600080fd5b6121fd8a828b01611d42565b97505060208801356001604060020a0381111561221957600080fd5b6122258a828b01611ce0565b96505060408801356001604060020a0381111561224157600080fd5b61224d8a828b01611d42565b95505060608801356001604060020a0381111561226957600080fd5b6122758a828b01611ce0565b94505060806122868a828b0161201a565b93505060a06122978a828b0161200e565b92505060c06122a88a828b01611cc8565b91505092959891949750929550565b600080604083850312156122ca57600080fd5b82356001604060020a038111156122e057600080fd5b6122ec85828601611d42565b92505060206122fd8582860161201a565b9150509250929050565b60006020828403121561231957600080fd5b6000610eab8484611d9f565b60006080828403121561233757600080fd5b6000610eab8484611dfd565b60006060828403121561235557600080fd5b6000610eab8484611e6c565b6000806040838503121561237457600080fd5b82356001604060020a0381111561238a57600080fd5b6122ec85828601611ec7565b6000602082840312156123a857600080fd5b6000610eab8484612026565b60008060a083850312156123c757600080fd5b60006123d38585612032565b92505060206122fd85828601611dfd565b6123ed81612888565b82525050565b60006123fe82612884565b808452602084019350836020820285016124178561287e565b60005b8481101561244e5783830388526124328383516124be565b925061243d8261287e565b60209890980197915060010161241a565b50909695505050505050565b600061246582612884565b8084526020840193508360208202850161247e8561287e565b60005b8481101561244e57838303885261249983835161258c565b92506124a48261287e565b602098909801979150600101612481565b6123ed81612894565b60006124c982612884565b8084526124dd8160208601602086016128c2565b6124e6816128ee565b9093016020019392505050565b603381527f4f6e6c7920636f6e7472616374206f776e657220697320616c6c6f77656420746020820152606960020a72379031b0b636103a3434b99036b2ba3437b21702604082015260600190565b805160808301906125538482612698565b5060208201516125666020850182612698565b5060408201516125796040850182612698565b506060820151611b906060850182612698565b80516000906101808401906125a185826123e4565b5060208301516125b460208601826123e4565b5060408301516125c760408601826123e4565b5060608301516125da60608601826123e4565b5060808301516125ed6080860182612698565b5060a083015161260060a0860182612698565b5060c083015161261360c0860182612698565b5060e083015161262660e0860182612698565b5061010083015161263b610100860182612698565b50610120830151612650610120860182612698565b5061014083015184820361014086015261266a82826124be565b91505061016083015184820361016086015261268682826124be565b95945050505050565b6123ed816128a1565b6123ed816128a8565b6123ed816128ab565b60208101610e7e82846123e4565b606081016126c682866123e4565b6126d360208301856123e4565b610eab6040830184612698565b604081016126ee82856123e4565b610dda6020830184612698565b6060808252810161270c818661245a565b905061271b6020830185612698565b818103604083015261268681846123f3565b60208101610e7e82846124b5565b60208082528101610dda81846124be565b60208082528101610e7e816124f3565b60808101610e7e8284612542565b60208082528101610dda818461258c565b6080808252810161278c818761258c565b905061279b60208301866126a1565b6127a86040830185612698565b6126866060830184612698565b606080825281016127c6818661258c565b90506127d56020830185612698565b818103604083015261268681846124be565b60208101610e7e828461268f565b60208101610e7e8284612698565b60208101610e7e82846126a1565b6040518181016001604060020a038111828210171561282f57600080fd5b604052919050565b60006001604060020a0382111561284d57600080fd5b5060209081020190565b60006001604060020a0382111561286d57600080fd5b506020601f91909101601f19160190565b60200190565b5190565b600160a060020a031690565b600160e060020a03191690565b61ffff1690565b90565b60ff1690565b151590565b82818337506000910152565b60005b838110156128dd5781810151838201526020016128c5565b83811115611b905750506000910152565b601f01601f191690560053414d455f41535345545f545950455f52455155495245440000000000000000554e41434345505441424c455f5448524553484f4c44000000000000000000004c656e677468206d7573742062652067726561746572207468616e206f722065a265627a7a723058200e9f523d51f5458015b1eaa853ad5330403d8668a3e5b85b2c2e34302e56a3376c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB6 JUMPI PUSH4 0xFFFFFFFF PUSH1 0xE0 PUSH1 0x2 EXP PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x1B67AD77 DUP2 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x20472CF7 EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x4A23B67B EQ PUSH2 0x18E JUMPI DUP1 PUSH4 0x8A637F3D EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x8EE1A642 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0x8FBB3EA6 EQ PUSH2 0x205 JUMPI DUP1 PUSH4 0xA28FE02E EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0xB3CD4254 EQ PUSH2 0x22D JUMPI DUP1 PUSH4 0xBC063E1A EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0xD3DF5F2D EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xDE5F8E41 EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0xF0B9E5BA EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2C6 JUMPI JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH32 0x44454641554C545F46554E4354494F4E5F574554485F434F4E54524143545F4F PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xE8 PUSH1 0x2 EXP PUSH3 0x4E4C59 MUL SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x133 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x156 PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0x22B7 JUMP JUMPDEST PUSH2 0x2E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x275C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x178 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0x435 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x27E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x156 PUSH2 0x1A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2361 JUMP JUMPDEST PUSH2 0x43B JUMP JUMPDEST PUSH2 0x156 PUSH2 0x1BC CALLDATASIZE PUSH1 0x4 PUSH2 0x20DE JUMP JUMPDEST PUSH2 0x56F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D6 PUSH2 0x6F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x26AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F8 PUSH2 0x703 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x2803 JUMP JUMPDEST PUSH2 0x156 PUSH2 0x213 CALLDATASIZE PUSH1 0x4 PUSH2 0x21C0 JUMP JUMPDEST PUSH2 0x708 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x224 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F8 PUSH2 0x9D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x239 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0x9DB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0x9E1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x156 PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0x22B7 JUMP JUMPDEST PUSH2 0x9E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x283 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x297 PUSH2 0x292 CALLDATASIZE PUSH1 0x4 PUSH2 0x2396 JUMP JUMPDEST PUSH2 0xBEF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x2B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x207A JUMP JUMPDEST PUSH2 0xDCE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x272D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x297 PUSH2 0x2E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x203E JUMP JUMPDEST PUSH2 0xDE1 JUMP JUMPDEST PUSH2 0x2EE PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2FB PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP7 MLOAD DUP5 LT ISZERO PUSH2 0x42B JUMPI PUSH2 0x34C DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x31A JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x338 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD PUSH2 0xE3C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x28F9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x391 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x3A0 DUP7 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0xE84 JUMP JUMPDEST SWAP3 POP PUSH2 0x3E3 DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3B3 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP9 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3CF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0xE96 JUMP JUMPDEST SWAP2 POP PUSH2 0x406 DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3F6 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 PUSH2 0x43B JUMP JUMPDEST SWAP1 POP PUSH2 0x412 DUP6 DUP3 PUSH2 0xEB3 JUMP JUMPDEST DUP5 MLOAD DUP7 EQ ISZERO PUSH2 0x420 JUMPI PUSH2 0x42B JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x300 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x251C DUP2 JUMP JUMPDEST PUSH2 0x443 PUSH2 0x1C7F JUMP JUMPDEST PUSH2 0x44B PUSH2 0x1CA8 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xC75E0A81 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xC75E0A81 SWAP1 PUSH2 0x47F SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x276A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x499 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4AD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x4D1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2343 JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 MLOAD PUSH1 0x40 DUP1 DUP5 ADD MLOAD SWAP1 MLOAD PUSH1 0xE2 PUSH1 0x2 EXP PUSH4 0x1C13B407 MUL DUP2 MSTORE SWAP4 SWAP6 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND SWAP3 PUSH4 0x704ED01C SWAP3 PUSH2 0x513 SWAP3 DUP11 SWAP3 SWAP1 SWAP2 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x277B JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x52D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x541 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x565 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x23B4 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x577 PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x48 PUSH1 0x2 EXP PUSH23 0x56414C55455F475245415445525F5448414E5F5A45524F MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 CALLVALUE DUP3 LT PUSH2 0x5D0 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x5F9 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x5E3 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD MLOAD PUSH1 0x0 PUSH2 0xF15 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x3A PUSH1 0x2 EXP PUSH25 0x151052D15497D054D4D15517D5D1551217D491545552549151 MUL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND SWAP2 AND EQ PUSH2 0x660 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x66C CALLVALUE DUP7 DUP7 PUSH2 0xF91 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 PUSH1 0x2 EXP MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6D5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x6E7 DUP10 DUP10 DUP10 DUP10 DUP6 PUSH2 0x1079 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH2 0x710 PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 CALLVALUE GT PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x48 PUSH1 0x2 EXP PUSH23 0x56414C55455F475245415445525F5448414E5F5A45524F MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x76E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x781 DUP12 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x5E3 JUMPI INVALID JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x3A PUSH1 0x2 EXP PUSH25 0x151052D15497D054D4D15517D5D1551217D491545552549151 MUL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP5 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND SWAP2 AND EQ PUSH2 0x7E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x7F8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD PUSH1 0x1 DUP13 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x818 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD MLOAD SUB DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x835 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP2 POP PUSH1 0xFF DUP3 AND PUSH1 0x1 EQ DUP1 PUSH2 0x85D JUMPI POP PUSH1 0xFF DUP3 AND PUSH1 0x2 EQ JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x48 PUSH1 0x2 EXP PUSH23 0x554E535550504F525445445F544F4B454E5F50524F5859 MUL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x8B1 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP POP PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0xE4 PUSH1 0x2 EXP PUSH4 0xD0E30DB MUL DUP2 MSTORE SWAP1 MLOAD CALLVALUE SWAP3 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP2 PUSH4 0xD0E30DB0 SWAP2 DUP5 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x912 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0xFF DUP3 AND PUSH1 0x1 EQ ISZERO PUSH2 0x937 JUMPI PUSH2 0x930 DUP12 DUP12 DUP12 DUP12 DUP12 PUSH2 0x11FE JUMP JUMPDEST SWAP4 POP PUSH2 0x953 JUMP JUMPDEST PUSH1 0xFF DUP3 AND PUSH1 0x2 EQ ISZERO PUSH2 0x953 JUMPI PUSH2 0x950 DUP12 DUP12 DUP12 DUP12 DUP12 PUSH2 0x13DF JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH2 0x961 DUP2 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0xE84 JUMP JUMPDEST SWAP1 POP PUSH2 0x971 DUP2 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x1625 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x16 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2919 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x9B6 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x9C7 DUP2 DUP6 PUSH1 0x20 ADD MLOAD DUP9 DUP9 PUSH2 0x1642 JUMP JUMPDEST POP POP POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x2710 DUP2 JUMP JUMPDEST PUSH2 0x3E8 DUP2 JUMP JUMPDEST PUSH2 0x9EF PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x9FD PUSH2 0x1C7F JUMP JUMPDEST PUSH2 0xA25 DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA0F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD PUSH1 0x0 PUSH2 0xF15 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x42 PUSH1 0x2 EXP PUSH24 0x151052D15497D054D4D15517D6949617D491545552549151 MUL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP7 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP9 AND SWAP2 AND EQ PUSH2 0xA8B JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP JUMPDEST DUP8 MLOAD DUP5 LT ISZERO PUSH2 0xBE4 JUMPI PUSH2 0xAC9 DUP9 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAAB JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x338 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x28F9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0xB0E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0xB1D DUP8 DUP8 PUSH1 0x0 ADD MLOAD PUSH2 0xE84 JUMP JUMPDEST SWAP3 POP PUSH2 0xB84 DUP9 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB30 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH2 0xB7E DUP11 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB4F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP12 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB6B JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH2 0xE84 JUMP JUMPDEST DUP6 PUSH2 0xE96 JUMP JUMPDEST SWAP2 POP PUSH2 0xBAC DUP9 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB97 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x1A9 DUP5 PUSH1 0x1 PUSH2 0x1719 JUMP JUMPDEST SWAP1 POP PUSH2 0xBC0 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD PUSH2 0xE84 JUMP JUMPDEST DUP2 MSTORE PUSH2 0xBCC DUP7 DUP3 PUSH2 0xEB3 JUMP JUMPDEST DUP6 MLOAD DUP8 GT PUSH2 0xBD9 JUMPI PUSH2 0xBE4 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0xA91 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0xC1F JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP1 PUSH2 0x274C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0xE1 PUSH1 0x2 EXP PUSH4 0x4960A10F MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x92C1421E SWAP1 PUSH2 0xC52 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2803 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC80 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xCA4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x205C JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO PUSH2 0xDCA JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x95EA7B3 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH2 0xCEC SWAP1 DUP5 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH2 0x26E0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD1A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xD3E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2307 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x95EA7B3 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH2 0xD76 SWAP1 DUP5 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH2 0x26E0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDA4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xDC8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2307 JUMP JUMPDEST POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xE1 PUSH1 0x2 EXP PUSH4 0x785CF2DD MUL JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0xE0E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP1 PUSH2 0x274C JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO PUSH2 0xE39 JUMPI PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP5 MLOAD ADD DIV PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xE7B JUMPI PUSH1 0x20 DUP2 MUL DUP6 DUP2 ADD MLOAD SWAP1 DUP6 ADD MLOAD DUP1 DUP3 EQ SWAP5 POP DUP5 PUSH2 0xE71 JUMPI DUP4 SWAP3 POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0xE4F JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xE90 JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEAB PUSH2 0xEA5 DUP6 DUP5 PUSH2 0x1728 JUMP JUMPDEST DUP5 PUSH2 0x174C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD PUSH2 0xEC1 SWAP2 SWAP1 PUSH2 0x1719 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0xED7 SWAP2 SWAP1 PUSH2 0x1719 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0xEF0 SWAP2 SWAP1 PUSH2 0x1719 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0xF09 SWAP2 SWAP1 PUSH2 0x1719 JUMP JUMPDEST PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2939 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790191817 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0xF7E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP POP ADD PUSH1 0x14 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x0 PUSH2 0xFFFF DUP5 AND DUP2 LT DUP1 ISZERO PUSH2 0xFAF JUMPI POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1071 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x40 PUSH1 0x2 EXP PUSH24 0x4645455F50524F504F5254494F4E5F544F4F5F4C41524745 MUL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3E8 PUSH2 0xFFFF DUP7 AND GT ISZERO PUSH2 0x1010 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x102A PUSH2 0x1022 DUP4 DUP7 PUSH2 0xFFFF AND PUSH2 0x1728 JUMP JUMPDEST PUSH2 0x2710 PUSH2 0x174C JUMP JUMPDEST SWAP1 POP PUSH2 0x1036 DUP3 DUP3 PUSH2 0xE84 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x106F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1081 PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x108C PUSH2 0x1C7F JUMP JUMPDEST PUSH2 0x1094 PUSH2 0x1C7F JUMP JUMPDEST PUSH2 0x109C PUSH2 0x1C7F JUMP JUMPDEST DUP7 SWAP5 POP PUSH2 0x10B1 DUP12 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA0F JUMPI INVALID JUMPDEST SWAP4 POP PUSH2 0x10BD DUP12 DUP9 PUSH2 0x1763 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 DUP4 PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x10F8 JUMPI PUSH2 0x10DB DUP10 DUP10 DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x184B JUMP JUMPDEST SWAP2 POP PUSH2 0x10EB DUP6 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0xE84 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP5 ADD MLOAD SWAP1 DUP9 ADD MSTORE SWAP5 POP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0xE3 PUSH1 0x2 EXP PUSH4 0xFC3B301 MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x7E1D9808 SWAP1 PUSH2 0x112F SWAP1 DUP15 SWAP1 DUP10 SWAP1 DUP16 SWAP1 PUSH1 0x4 ADD PUSH2 0x26FB JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1149 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x115D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1181 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2325 JUMP JUMPDEST SWAP1 POP PUSH2 0x118D DUP7 DUP3 PUSH2 0xEB3 JUMP JUMPDEST PUSH2 0x119B DUP8 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x1625 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x16 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2919 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x11E0 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x11F0 DUP5 CALLER DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x1AC1 JUMP JUMPDEST POP POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1206 PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1210 PUSH2 0x1C7F JUMP JUMPDEST PUSH2 0x1218 PUSH2 0x1C7F JUMP JUMPDEST PUSH2 0x1220 PUSH2 0x1C7F JUMP JUMPDEST PUSH2 0x1232 DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA0F JUMPI INVALID JUMPDEST PUSH1 0x2 SLOAD SWAP1 SWAP5 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND SWAP2 AND EQ ISZERO PUSH2 0x12A6 JUMPI PUSH2 0x1256 DUP11 DUP11 DUP9 PUSH2 0x184B JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x16 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2919 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP5 POP DUP8 GT ISZERO PUSH2 0x12A0 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x13B9 JUMP JUMPDEST PUSH2 0x12B0 DUP11 DUP8 PUSH2 0x2E6 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x12E5 JUMPI PUSH2 0x12CE DUP9 DUP9 DUP5 PUSH1 0x60 ADD MLOAD PUSH2 0x184B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP8 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MLOAD SWAP1 DUP8 ADD MSTORE SWAP1 POP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xE5FA431B MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xE5FA431B SWAP1 PUSH2 0x131C SWAP1 DUP14 SWAP1 DUP11 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x26FB JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1336 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x134A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x136E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2325 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x16 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2919 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP5 POP DUP8 EQ PUSH2 0x13B7 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP JUMPDEST PUSH2 0x13C3 DUP6 DUP5 PUSH2 0xEB3 JUMP JUMPDEST PUSH2 0x13D2 DUP5 CALLER DUP8 PUSH1 0x0 ADD MLOAD PUSH2 0x1AC1 JUMP JUMPDEST POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x13E7 PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x13F2 PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x13FD PUSH2 0x1C7F JUMP JUMPDEST DUP12 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH32 0x41535345545F414D4F554E545F4D5553545F4D415443485F4F524445525F5349 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xF0 PUSH1 0x2 EXP PUSH2 0x5A45 MUL SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP2 DUP11 EQ PUSH2 0x1468 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH1 0x0 SWAP6 POP JUMPDEST DUP13 MLOAD DUP7 LT ISZERO PUSH2 0x14A9 JUMPI PUSH2 0x149C DUP8 DUP15 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1489 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH2 0x1719 JUMP JUMPDEST SWAP7 POP PUSH1 0x1 SWAP1 SWAP6 ADD SWAP5 PUSH2 0x146E JUMP JUMPDEST PUSH1 0x0 DUP8 GT ISZERO PUSH2 0x14D4 JUMPI PUSH2 0x14BD DUP12 DUP12 DUP10 PUSH2 0x184B JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 ADD MLOAD SWAP1 DUP11 ADD MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP11 ADD MSTORE SWAP5 POP JUMPDEST PUSH2 0x14E6 DUP14 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA0F JUMPI INVALID JUMPDEST SWAP4 POP PUSH1 0x0 SWAP3 POP JUMPDEST DUP13 MLOAD DUP4 LT ISZERO PUSH2 0x1615 JUMPI PUSH1 0x0 SLOAD DUP14 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x64A3BC15 SWAP1 DUP16 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x1519 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP16 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1531 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP16 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x154D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 PUSH1 0x2 EXP MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1578 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x27B5 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x15A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x15CA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2325 JUMP JUMPDEST SWAP2 POP PUSH2 0x15D6 DUP9 DUP4 PUSH2 0xEB3 JUMP JUMPDEST PUSH2 0x15FD DUP14 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x15E7 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD PUSH1 0x14 PUSH2 0x1B96 JUMP JUMPDEST SWAP1 POP PUSH2 0x160A DUP5 CALLER DUP4 PUSH2 0x1BA2 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x14ED JUMP JUMPDEST POP POP POP POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1637 PUSH2 0x1022 DUP6 PUSH2 0x251C PUSH2 0x1728 JUMP JUMPDEST SWAP1 SWAP3 LT ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP7 GT ISZERO PUSH2 0x1710 JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x2E1A7D4D MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x1681 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x27F5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x169B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x16AF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP6 SWAP2 POP PUSH2 0x16CA DUP6 PUSH2 0x16C5 DUP8 DUP8 DUP8 PUSH2 0xF91 JUMP JUMPDEST PUSH2 0xE84 JUMP JUMPDEST SWAP1 POP PUSH2 0x16D6 DUP3 DUP3 PUSH2 0xE84 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 GT ISZERO PUSH2 0x1710 JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 DUP4 ISZERO PUSH2 0x8FC MUL SWAP1 DUP5 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x170E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xDDA JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 0x1744 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 0x1741 JUMPI INVALID JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 0xDDA JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 0x175A JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x176B PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1776 PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 SWAP3 POP JUMPDEST DUP6 MLOAD DUP4 LT ISZERO PUSH2 0x1842 JUMPI PUSH2 0x17B3 DUP7 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1795 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x338 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x28F9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x17F8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x1807 DUP6 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0xE84 JUMP JUMPDEST SWAP2 POP PUSH2 0x181A DUP7 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3F6 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x1826 DUP5 DUP3 PUSH2 0xEB3 JUMP JUMPDEST DUP5 DUP5 PUSH1 0x20 ADD MLOAD EQ ISZERO PUSH2 0x1837 JUMPI PUSH2 0x1842 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x177B JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1853 PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1861 PUSH2 0x1C7F JUMP JUMPDEST PUSH2 0x1873 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA0F JUMPI INVALID JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x42 PUSH1 0x2 EXP PUSH24 0x151052D15497D054D4D15517D6949617D491545552549151 MUL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP7 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP9 AND SWAP2 AND EQ PUSH2 0x18D9 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP JUMPDEST DUP9 MLOAD DUP5 LT ISZERO PUSH2 0x1AB5 JUMPI PUSH2 0x1917 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x18F9 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x338 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x28F9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x195C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP PUSH2 0x196B DUP8 DUP8 PUSH1 0x0 ADD MLOAD PUSH2 0xE84 JUMP JUMPDEST SWAP3 POP PUSH2 0x19B9 DUP10 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x197E JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH2 0xB7E DUP12 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x199D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xB6B JUMPI INVALID JUMPDEST PUSH1 0x0 SLOAD DUP11 MLOAD SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 PUSH4 0xB4BE83D5 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0x19DD JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x19F2 DUP6 PUSH1 0x1 PUSH2 0x1719 JUMP JUMPDEST DUP12 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1A00 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 PUSH1 0x2 EXP MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A2B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x27B5 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A59 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1A7D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2325 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A91 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD PUSH2 0xE84 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1A9D DUP7 DUP3 PUSH2 0xEB3 JUMP JUMPDEST DUP6 MLOAD DUP8 GT PUSH2 0x1AAA JUMPI PUSH2 0x1AB5 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x18DF JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xA9059CBB MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x1AF2 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x26E0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1B20 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1B44 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2307 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xF DUP2 MSTORE PUSH1 0x8A PUSH1 0x2 EXP PUSH15 0x1514905394D1915497D19052531151 MUL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH2 0x1B90 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP4 DUP4 PUSH2 0x1C0C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x23B872DD MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x1BD5 SWAP1 ADDRESS SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x26B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1C03 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2939 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA9 PUSH1 0x2 EXP PUSH11 0x38BAB0B6103A3790199917 MUL DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0x1C75 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST POP POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP3 CALLDATALOAD PUSH2 0x2888 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP3 MLOAD PUSH2 0x2888 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x1CF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1D04 PUSH2 0x1CFF DUP3 PUSH2 0x2837 JUMP JUMPDEST PUSH2 0x2811 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x42B JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x1D2C DUP9 DUP3 PUSH2 0x1DB7 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1D16 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x1D53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1D61 PUSH2 0x1CFF DUP3 PUSH2 0x2837 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x42B JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x1D89 DUP9 DUP3 PUSH2 0x1EC7 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1D73 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP3 MLOAD PUSH2 0x28B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP3 MLOAD PUSH2 0x28A8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x1DC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1DD6 PUSH2 0x1CFF DUP3 PUSH2 0x2857 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1DF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1842 DUP4 DUP3 DUP5 PUSH2 0x28B6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E19 PUSH1 0x80 PUSH2 0x2811 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1E27 DUP5 DUP5 PUSH2 0x1DAB JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x1E38 DUP5 DUP5 DUP4 ADD PUSH2 0x1DAB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1E4C DUP5 DUP3 DUP6 ADD PUSH2 0x1DAB JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x1E60 DUP5 DUP3 DUP6 ADD PUSH2 0x1DAB JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E88 PUSH1 0x60 PUSH2 0x2811 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1E96 DUP5 DUP5 PUSH2 0x2032 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x1EA7 DUP5 DUP5 DUP4 ADD PUSH2 0x1DAB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1EBB DUP5 DUP3 DUP6 ADD PUSH2 0x1DAB JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EE5 PUSH2 0x180 PUSH2 0x2811 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1EF3 DUP5 DUP5 PUSH2 0x1CC8 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x1F04 DUP5 DUP5 DUP4 ADD PUSH2 0x1CC8 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1F18 DUP5 DUP3 DUP6 ADD PUSH2 0x1CC8 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x1F2C DUP5 DUP3 DUP6 ADD PUSH2 0x1CC8 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x1F40 DUP5 DUP3 DUP6 ADD PUSH2 0x201A JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x1F54 DUP5 DUP3 DUP6 ADD PUSH2 0x201A JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x1F68 DUP5 DUP3 DUP6 ADD PUSH2 0x201A JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0x1F7C DUP5 DUP3 DUP6 ADD PUSH2 0x201A JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP PUSH2 0x100 PUSH2 0x1F91 DUP5 DUP3 DUP6 ADD PUSH2 0x201A JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH2 0x120 PUSH2 0x1FA7 DUP5 DUP3 DUP6 ADD PUSH2 0x201A JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MSTORE POP PUSH2 0x140 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x1FC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FD4 DUP5 DUP3 DUP6 ADD PUSH2 0x1DB7 JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MSTORE POP PUSH2 0x160 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x1FF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2001 DUP5 DUP3 DUP6 ADD PUSH2 0x1DB7 JUMP JUMPDEST PUSH2 0x160 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP3 CALLDATALOAD PUSH2 0x28A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP3 CALLDATALOAD PUSH2 0x28A8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP3 CALLDATALOAD PUSH2 0x28AB JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP3 MLOAD PUSH2 0x28AB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2050 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEAB DUP5 DUP5 PUSH2 0x1CC8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x206E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEAB DUP5 DUP5 PUSH2 0x1CD4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x208F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x209B DUP7 DUP7 PUSH2 0x1CC8 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x20AC DUP7 DUP3 DUP8 ADD PUSH2 0x201A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x20C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20D4 DUP7 DUP3 DUP8 ADD PUSH2 0x1DB7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x20F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x210D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2119 DUP10 DUP3 DUP11 ADD PUSH2 0x1D42 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x2135 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2141 DUP10 DUP3 DUP11 ADD PUSH2 0x1CE0 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x215D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2169 DUP10 DUP3 DUP11 ADD PUSH2 0x1D42 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x2185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2191 DUP10 DUP3 DUP11 ADD PUSH2 0x1CE0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0x21A2 DUP10 DUP3 DUP11 ADD PUSH2 0x200E JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH2 0x21B3 DUP10 DUP3 DUP11 ADD PUSH2 0x1CC8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x21DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x21F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21FD DUP11 DUP3 DUP12 ADD PUSH2 0x1D42 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x2219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2225 DUP11 DUP3 DUP12 ADD PUSH2 0x1CE0 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x2241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x224D DUP11 DUP3 DUP12 ADD PUSH2 0x1D42 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x2269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2275 DUP11 DUP3 DUP12 ADD PUSH2 0x1CE0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x2286 DUP11 DUP3 DUP12 ADD PUSH2 0x201A JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x2297 DUP11 DUP3 DUP12 ADD PUSH2 0x200E JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x22A8 DUP11 DUP3 DUP12 ADD PUSH2 0x1CC8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x22CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x22E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22EC DUP6 DUP3 DUP7 ADD PUSH2 0x1D42 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x22FD DUP6 DUP3 DUP7 ADD PUSH2 0x201A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2319 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEAB DUP5 DUP5 PUSH2 0x1D9F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEAB DUP5 DUP5 PUSH2 0x1DFD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2355 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEAB DUP5 DUP5 PUSH2 0x1E6C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2374 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT ISZERO PUSH2 0x238A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22EC DUP6 DUP3 DUP7 ADD PUSH2 0x1EC7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEAB DUP5 DUP5 PUSH2 0x2026 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xA0 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x23D3 DUP6 DUP6 PUSH2 0x2032 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x22FD DUP6 DUP3 DUP7 ADD PUSH2 0x1DFD JUMP JUMPDEST PUSH2 0x23ED DUP2 PUSH2 0x2888 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23FE DUP3 PUSH2 0x2884 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x2417 DUP6 PUSH2 0x287E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x244E JUMPI DUP4 DUP4 SUB DUP9 MSTORE PUSH2 0x2432 DUP4 DUP4 MLOAD PUSH2 0x24BE JUMP JUMPDEST SWAP3 POP PUSH2 0x243D DUP3 PUSH2 0x287E JUMP JUMPDEST PUSH1 0x20 SWAP9 SWAP1 SWAP9 ADD SWAP8 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x241A JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2465 DUP3 PUSH2 0x2884 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x247E DUP6 PUSH2 0x287E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x244E JUMPI DUP4 DUP4 SUB DUP9 MSTORE PUSH2 0x2499 DUP4 DUP4 MLOAD PUSH2 0x258C JUMP JUMPDEST SWAP3 POP PUSH2 0x24A4 DUP3 PUSH2 0x287E JUMP JUMPDEST PUSH1 0x20 SWAP9 SWAP1 SWAP9 ADD SWAP8 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x2481 JUMP JUMPDEST PUSH2 0x23ED DUP2 PUSH2 0x2894 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24C9 DUP3 PUSH2 0x2884 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x24DD DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x28C2 JUMP JUMPDEST PUSH2 0x24E6 DUP2 PUSH2 0x28EE JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x33 DUP2 MSTORE PUSH32 0x4F6E6C7920636F6E7472616374206F776E657220697320616C6C6F7765642074 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x69 PUSH1 0x2 EXP PUSH19 0x379031B0B636103A3434B99036B2BA3437B217 MUL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0x2553 DUP5 DUP3 PUSH2 0x2698 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2566 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2698 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2579 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x2698 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1B90 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x2698 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x180 DUP5 ADD SWAP1 PUSH2 0x25A1 DUP6 DUP3 PUSH2 0x23E4 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x25B4 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x23E4 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x25C7 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x23E4 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x25DA PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x23E4 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x25ED PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x2698 JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x2600 PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x2698 JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x2613 PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0x2698 JUMP JUMPDEST POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x2626 PUSH1 0xE0 DUP7 ADD DUP3 PUSH2 0x2698 JUMP JUMPDEST POP PUSH2 0x100 DUP4 ADD MLOAD PUSH2 0x263B PUSH2 0x100 DUP7 ADD DUP3 PUSH2 0x2698 JUMP JUMPDEST POP PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x2650 PUSH2 0x120 DUP7 ADD DUP3 PUSH2 0x2698 JUMP JUMPDEST POP PUSH2 0x140 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x140 DUP7 ADD MSTORE PUSH2 0x266A DUP3 DUP3 PUSH2 0x24BE JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x160 DUP7 ADD MSTORE PUSH2 0x2686 DUP3 DUP3 PUSH2 0x24BE JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x23ED DUP2 PUSH2 0x28A1 JUMP JUMPDEST PUSH2 0x23ED DUP2 PUSH2 0x28A8 JUMP JUMPDEST PUSH2 0x23ED DUP2 PUSH2 0x28AB JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xE7E DUP3 DUP5 PUSH2 0x23E4 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x26C6 DUP3 DUP7 PUSH2 0x23E4 JUMP JUMPDEST PUSH2 0x26D3 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x23E4 JUMP JUMPDEST PUSH2 0xEAB PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2698 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x26EE DUP3 DUP6 PUSH2 0x23E4 JUMP JUMPDEST PUSH2 0xDDA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2698 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x270C DUP2 DUP7 PUSH2 0x245A JUMP JUMPDEST SWAP1 POP PUSH2 0x271B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2698 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2686 DUP2 DUP5 PUSH2 0x23F3 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xE7E DUP3 DUP5 PUSH2 0x24B5 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xDDA DUP2 DUP5 PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xE7E DUP2 PUSH2 0x24F3 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xE7E DUP3 DUP5 PUSH2 0x2542 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xDDA DUP2 DUP5 PUSH2 0x258C JUMP JUMPDEST PUSH1 0x80 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x278C DUP2 DUP8 PUSH2 0x258C JUMP JUMPDEST SWAP1 POP PUSH2 0x279B PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x26A1 JUMP JUMPDEST PUSH2 0x27A8 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2698 JUMP JUMPDEST PUSH2 0x2686 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2698 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x27C6 DUP2 DUP7 PUSH2 0x258C JUMP JUMPDEST SWAP1 POP PUSH2 0x27D5 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2698 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2686 DUP2 DUP5 PUSH2 0x24BE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xE7E DUP3 DUP5 PUSH2 0x268F JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xE7E DUP3 DUP5 PUSH2 0x2698 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xE7E DUP3 DUP5 PUSH2 0x26A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x282F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP3 GT ISZERO PUSH2 0x284D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 PUSH1 0x2 EXP SUB DUP3 GT ISZERO PUSH2 0x286D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 PUSH1 0x2 EXP SUB NOT AND SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x28DD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x28C5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1B90 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP STOP MSTORE8 COINBASE 0x4d GASLIMIT 0x5f COINBASE MSTORE8 MSTORE8 GASLIMIT SLOAD 0x5f SLOAD MSIZE POP GASLIMIT 0x5f MSTORE GASLIMIT MLOAD SSTORE 0x49 MSTORE GASLIMIT DIFFICULTY STOP STOP STOP STOP STOP STOP STOP STOP SSTORE 0x4e COINBASE NUMBER NUMBER GASLIMIT POP SLOAD COINBASE TIMESTAMP 0x4c GASLIMIT 0x5f SLOAD 0x48 MSTORE GASLIMIT MSTORE8 0x48 0x4f 0x4c DIFFICULTY STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP 0x4c PUSH6 0x6E677468206D PUSH22 0x73742062652067726561746572207468616E206F7220 PUSH6 0xA265627A7A72 ADDRESS PC KECCAK256 0xe SWAP16 MSTORE RETURNDATASIZE MLOAD 0xf5 GASLIMIT DUP1 ISZERO 0xb1 0xea 0xa8 MSTORE8 0xad MSTORE8 ADDRESS BLOCKHASH RETURNDATASIZE DUP7 PUSH9 0xA3E5B85B2C2E34302E JUMP LOG3 CALLDATACOPY PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
				"sourceMap": "208:1077:0:-;;;;;;;;;-1:-1:-1;;;208:1077:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;818:11;;832:35;;;;;;;;;;;;;;;;-1:-1:-1;;;;;832:35:0;;;;;;;;-1:-1:-1;;;;;818:11:0;796:10;:34;788:80;;;;-1:-1:-1;;;;;788:80:0;;;;;;;;;;;;;;;;;;;208:1077;2727:1073:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2727:1073:6;;;;;;;;;;;;;;;;;;;;;;;;;591:60:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;591:60:5;;;;;;;;;;;;519:526:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;519:526:6;;;;;;;;;1546:784:7;;;;;;;;;;292:20:41;;8:9:-1;5:2;;;30:1;27;20:12;5:2;292:20:41;;;;;;;;;;;;326:40:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;326:40:1;;;;;;;;;;;;1762:1763;;;;;;;;;;372:41;;8:9:-1;5:2;;;30:1;27;20:12;5:2;372:41:1;;;;450:54:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;450:54:5;;;;540:38;;8:9:-1;5:2;;;30:1;27;20:12;5:2;540:38:5;;;;4205:1675:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4205:1675:6;;;;;;;;;945:338:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;945:338:0;;;;;;;;;;;252:153:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;252:153:3;;;;;;;;;;;;;;;;;566:167:41;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;566:167:41;;;;;;;;;2727:1073:6;2864:44;;:::i;:::-;2929:9;3096:37;3220;3427:54;;:::i;:::-;2941:1;2929:13;;2924:837;2948:6;:13;2944:1;:17;2924:837;;;2990:65;3004:6;3011:1;3004:9;;;;;;;;;;;;;;;;;;:24;;;3030:6;3037:1;3030:9;;;;;;;;;;;;;;;;;;:24;;;2990:13;:65::i;:::-;3057:24;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;3057:24:6;;;;;2982:100;;;;;;-1:-1:-1;;;;;2982:100:6;;;;;;;;;;;3136:70;3144:20;3166:16;:39;;;3136:7;:70::i;:::-;3096:110;;3260:152;3294:6;3301:1;3294:9;;;;;;;;;;;;;;;;;;:26;;;3338:6;3345:1;3338:9;;;;;;;;;;;;;;;;;;:26;;;3382:29;3260:16;:152::i;:::-;3220:192;;3484:71;3514:6;3521:1;3514:9;;;;;;;;;;;;;;;;;;3525:29;3484;:71::i;:::-;3427:128;;3570:60;3585:16;3603:26;3570:14;:60::i;:::-;3648:39;;:63;;3644:107;;;3731:5;;3644:107;2963:3;;;;;2924:837;;;2727:1073;;;;;;;;:::o;591:60:5:-;647:4;591:60;:::o;519:526:6:-;653:39;;:::i;:::-;708:35;;:::i;:::-;784:13;746:8;;:28;;-1:-1:-1;;;;;746:28:6;;-1:-1:-1;;;;;746:8:6;;;;:21;;:28;;768:5;;746:28;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;746:28:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;746:28:6;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;746:28:6;;;;;;;;;832:8;;894:21;;929:37;;;;;832:178;;-1:-1:-1;;;;;832:178:6;;708:66;;-1:-1:-1;;;;;;832:8:6;;;;:29;;:178;;875:5;;894:21;;929:37;980:20;;832:178;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;832:178:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;832:178:6;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;832:178:6;;;;;;;;;807:203;519:526;-1:-1:-1;;;;;;519:526:6:o;1546:784:7:-;1819:20;;:::i;:::-;1878:23;;;;;;;;;;;;-1:-1:-1;;;;;1878:23:7;;;;1912:13;;;;1863:9;:13;-1:-1:-1;1855:47:7;;;;-1:-1:-1;;;;;1855:47:7;;;;;;;;;;;1928:40;1940:6;1947:1;1940:9;;;;;;;;;;;;;;;;;;:24;;;1966:1;1928:11;:40::i;:::-;2003:11;;2017:25;;;;;;;;;;;;-1:-1:-1;;;;;2017:25:7;;;;1912:56;;-1:-1:-1;;;;;;1986:29:7;;;2003:11;;1986:29;1978:65;;;;-1:-1:-1;;;;;1978:65:7;;;;;;;;;;;2090:55;2106:9;2117:13;2132:12;2090:15;:55::i;:::-;2054:91;;2155:11;;;;;;;;;-1:-1:-1;;;;;2155:11:7;-1:-1:-1;;;;;2155:19:7;;2181:25;2155:54;;;;;-1:-1:-1;;;2155:54:7;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2155:54:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2155:54:7;;;;;2226:97;2251:6;2259:10;2271:9;2282:13;2297:25;2226:24;:97::i;:::-;2219:104;1546:784;-1:-1:-1;;;;;;;;;1546:784:7:o;292:20:41:-;;;-1:-1:-1;;;;;292:20:41;;:::o;326:40:1:-;365:1;326:40;:::o;1762:1763::-;2063:44;;:::i;:::-;2180:18;2331:13;2525:33;2143:1;2131:9;:13;2146:23;;;;;;;;;;;;;;-1:-1:-1;;;;;2146:23:1;;;2123:47;;;;;;;-1:-1:-1;;;;;2123:47:1;;;;;;;;;;;2201:40;2213:6;2220:1;2213:9;;;;;;;;;2201:40;2281:11;;2295:25;;;;;;;;;;;;-1:-1:-1;;;;;2295:25:1;;;;2180:61;;-1:-1:-1;;;;;;2259:34:1;;;2281:11;;2259:34;2251:70;;;;-1:-1:-1;;;;;2251:70:1;;;;;;;;;;;2353:6;2360:1;2353:9;;;;;;;;;;;;;;;;;;:24;;;2412:1;2378:6;2385:1;2378:9;;;;;;;;;;;;;;;;;;:24;;;:31;:35;2353:61;;;;;;;;;;;;;;-1:-1:-1;;;2353:61:1;;;;;;2347:68;;-1:-1:-1;2433:25:1;;;365:1;2433:25;;:55;;-1:-1:-1;2462:26:1;;;412:1;2462:26;2433:55;2490:23;;;;;;;;;;;;-1:-1:-1;;;;;2490:23:1;;;;;2425:89;;;;;;-1:-1:-1;;;;;2425:89:1;;;;;;;;;;-1:-1:-1;;2580:11:1;;:54;;;-1:-1:-1;;;;;2580:54:1;;;;2561:9;;-1:-1:-1;;;;;2580:11:1;;:19;;2561:9;;2580:54;;;;;:11;;:54;;;;;;;;2561:9;2580:11;:54;;;5:2:-1;;;;30:1;27;20:12;5:2;2580:54:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;;;;2648:25:1;;;365:1;2648:25;2644:330;;;2708:86;2736:6;2744:10;2756:9;2767:13;2782:11;2708:27;:86::i;:::-;2689:105;;2644:330;;;2815:26;;;412:1;2815:26;2811:163;;;2876:87;2905:6;2913:10;2925:9;2936:13;2951:11;2876:28;:87::i;:::-;2857:106;;2811:163;3011:75;3019:25;3046:16;:39;;;3011:7;:75::i;:::-;2983:103;;3196:122;3235:25;3278:16;:39;;;3196:21;:122::i;:::-;3332:22;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;3332:22:1;;;;;3175:180;;;;;;-1:-1:-1;;;;;3175:180:1;;;;;;;;;;;3365:120;3389:25;3416:16;:39;;;3457:13;3472:12;3365:23;:120::i;:::-;-1:-1:-1;1762:1763:1;;;;;;;;;;;;:::o;372:41::-;412:1;372:41;:::o;450:54:5:-;499:5;450:54;:::o;540:38::-;574:4;540:38;:::o;4205:1675:6:-;4346:44;;:::i;:::-;4406:13;4549:9;4716:37;5010;5278:44;;:::i;:::-;4422:40;4434:6;4441:1;4434:9;;;;;;;;;;;;;;;;;;:24;;;4460:1;4422:11;:40::i;:::-;4497:9;;4509:24;;;;;;;;;;;;-1:-1:-1;;;;;4509:24:6;;;;4406:56;;-1:-1:-1;;;;;;4480:27:6;;;4497:9;;4480:27;4472:62;;;;-1:-1:-1;;;;;4472:62:6;;;;;;;;;;;4561:1;4549:13;;4544:1297;4568:6;:13;4564:1;:17;4544:1297;;;4610:65;4624:6;4631:1;4624:9;;;;;;;;;;;;;;;;;;:24;;;4650:6;4657:1;4650:9;;;;;;;;;4610:65;4677:24;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;4677:24:6;;;;;4602:100;;;;;;-1:-1:-1;;;;;4602:100:6;;;;;;;;;;;4756:59;4764:9;4775:16;:39;;;4756:7;:59::i;:::-;4716:99;;5050:214;5084:6;5091:1;5084:9;;;;;;;;;;;;;;;;;;:26;;;5128:55;5136:6;5143:1;5136:9;;;;;;;;;;;;;;;;;;:26;;;5164:6;5171:1;5164:9;;;;;;;;;;;;;;;;;;:18;;;5128:7;:55::i;:::-;5234:29;5050:16;:214::i;:::-;5010:254;;5325:83;5355:6;5362:1;5355:9;;;;;;;;;;;;;;;;;;5366:41;5374:29;5405:1;5366:7;:41::i;5325:83::-;5278:130;;5465:79;5473:16;:39;;;5514:16;:29;;;5465:7;:79::i;:::-;5423:121;;5558:50;5573:16;5423;5558:14;:50::i;:::-;5739:39;;:52;-1:-1:-1;5735:96:6;;5811:5;;5735:96;4583:3;;;;;4544:1297;;;4205:1675;;;;;;;;;:::o;945:338:0:-;460:5:41;;1048:20:0;;-1:-1:-1;;;;;460:5:41;446:10;:19;425:117;;;;-1:-1:-1;;;;;425:117:41;;;;;;;;;1071:8:0;;:41;;-1:-1:-1;;;;;1071:41:0;;-1:-1:-1;;;;;1071:8:0;;;;:22;;:41;;1094:17;;1071:41;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1071:41:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1071:41:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1071:41:0;;;;;;;;;1048:64;-1:-1:-1;;;;;;1126:26:0;;;1122:155;;1168:11;;:43;;-1:-1:-1;;;;;1168:43:0;;-1:-1:-1;;;;;1168:11:0;;;;:19;;:43;;1188:12;;-1:-1:-1;;692:12:5;1168:43:0;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1168:43:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1168:43:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1168:43:0;;;;;;;;;-1:-1:-1;1225:9:0;;:41;;-1:-1:-1;;;;;1225:41:0;;-1:-1:-1;;;;;1225:9:0;;;;:17;;:41;;1243:12;;-1:-1:-1;;692:12:5;1225:41:0;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1225:41:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1225:41:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1225:41:0;;;;;;;;;;1122:155;945:338;;:::o;252:153:3:-;-1:-1:-1;;;;;252:153:3;;;;;;:::o;566:167:41:-;460:5;;-1:-1:-1;;;;;460:5:41;446:10;:19;425:117;;;;-1:-1:-1;;;;;425:117:41;;;;;;;;;-1:-1:-1;;;;;662:22:41;;;658:69;;700:5;:16;;-1:-1:-1;;;;;;700:16:41;-1:-1:-1;;;;;700:16:41;;;;;658:69;566:167;:::o;2575:921:39:-;2703:10;2856:4;2849;2843:3;2837:10;2833:21;2829:32;2986:3;2972:12;2968:22;2952:38;;3117:1;3103:356;3126:12;3123:1;3120:19;3103:356;;;3212:4;3205:12;;3196:22;;;3190:29;3257:22;;;3251:29;3306:20;;;;-1:-1:-1;3306:20:39;3343:2;;3415:12;3410:17;;3343:2;-1:-1:-1;;3153:1:39;3146:9;3103:356;;;-1:-1:-1;;2575:921:39;;;;;:::o;418:146:42:-;498:7;528:6;;;;521:14;;;;-1:-1:-1;552:5:42;;;418:146::o;1064:326:27:-;1218:21;1271:82;1292:26;1300:9;1311:6;1292:7;:26::i;:::-;1332:11;1271:7;:82::i;:::-;1255:98;1064:326;-1:-1:-1;;;;1064:326:27:o;1326:648:26:-;1519:39;;1560:40;;1511:90;;1519:39;1511:7;:90::i;:::-;1469:132;;1661:39;;;;;1702:40;;;;1653:90;;1661:39;1653:7;:90::i;:::-;1611:39;;;:132;1793:29;;;;;1824:30;;;;1785:70;;1793:29;1785:7;:70::i;:::-;1753:29;;;:102;1905:29;;;;;1936:30;;;;1897:70;;1905:29;1897:7;:70::i;:::-;1865:29;;;;:102;;;;-1:-1:-1;1326:648:26:o;3710:869:39:-;3831:14;3894:5;3902:2;3894:10;3882:1;:8;:22;;3946;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;3946:22:39;;;;-1:-1:-1;;;;;3946:22:39;;;3861:117;;;;;;;-1:-1:-1;;;;;3861:117:39;;;;;;;;;;-1:-1:-1;;4481:13:39;4226:2;4481:13;4475:20;-1:-1:-1;;;;;4471:69:39;;3710:869::o;1218:804:5:-;1449:16;1372:33;1479:17;;;;-1:-1:-1;1479:47:5;;;;-1:-1:-1;;;;;;1500:26:5;;;;1479:47;1475:499;;;1576:24;;;;;;;;;;;;-1:-1:-1;;;;;1576:24:5;;;;574:4;1550:24;;;;;1542:59;;;;-1:-1:-1;;;;;1542:59:5;;;;;;;;;;;1724:82;1732:49;1740:25;1767:13;1732:49;;:7;:49::i;:::-;499:5;1724:7;:82::i;:::-;1692:114;;1848:57;1856:25;1883:21;1848:7;:57::i;:::-;1919:44;;1820:85;;-1:-1:-1;;;;;;1919:21:5;;;:44;;;;;1941:21;;1919:44;;;;1941:21;1919;:44;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1919:44:5;1475:499;1218:804;;;;;;:::o;2336:1815:7:-;2575:44;;:::i;:::-;2635:25;2688;2767:55;;:::i;:::-;3051:44;;:::i;:::-;3486:50;;:::i;:::-;2663:15;2635:43;;2716:40;2728:6;2735:1;2728:9;;;;;;;;;2716:40;2688:68;;2825:55;2856:6;2864:15;2825:30;:55::i;:::-;2767:113;;2937:1;2894:27;:40;;;:44;2890:500;;;3098:105;3136:9;3147:13;3162:27;:40;;;3098:20;:105::i;:::-;3051:152;;3237:67;3245:17;3264:16;:39;;;3237:7;:67::i;:::-;3350:29;;;;;3318;;;:61;3217:87;-1:-1:-1;2890:500:7;3539:8;;:64;;-1:-1:-1;;;;;3539:64:7;;-1:-1:-1;;;;;3539:8:7;;;;:25;;:64;;3565:6;;3573:17;;3592:10;;3539:64;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3539:64:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3539:64:7;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3539:64:7;;;;;;;;;3486:117;;3674:56;3689:16;3707:22;3674:14;:56::i;:::-;3843:85;3865:15;3882:22;:45;;;3843:21;:85::i;:::-;3942:22;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;3942:22:7;;;;;3835:130;;;;;;-1:-1:-1;;;;;3835:130:7;;;;;;;;;;;4020:91;4034:17;4053:10;4065:22;:45;;;4020:13;:91::i;:::-;2336:1815;;;;;;;;;;;;:::o;3531:2197:1:-;3769:44;;:::i;:::-;3829:25;4136:49;;:::i;:::-;4553:54;;:::i;:::-;4842:43;;:::i;:::-;3857:40;3869:6;3876:1;3869:9;;;;;;;;;3857:40;4228:9;;3829:68;;-1:-1:-1;;;;;;4199:39:1;;;4228:9;;4199:39;4195:1289;;;4278:53;4299:6;4307:10;4319:11;4278:20;:53::i;:::-;4438:44;;4499:22;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;4499:22:1;;;;4254:77;;-1:-1:-1;4438:59:1;-1:-1:-1;4438:59:1;4430:92;;;;-1:-1:-1;;;;;4430:92:1;;;;;;;;;;;4195:1289;;;4610:50;4640:6;4648:11;4610:29;:50::i;:::-;4553:107;;4720:1;4678:26;:39;;;:43;4674:513;;;4888:108;4930:9;4941:13;4956:26;:39;;;4888:20;:108::i;:::-;5056:38;;;;;5014:39;;;:80;5144:28;;;;;5112:29;;;:60;4842:154;-1:-1:-1;4674:513:1;5310:8;;:57;;-1:-1:-1;;;;;5310:57:1;;-1:-1:-1;;;;;5310:8:1;;;;:24;;:57;;5335:6;;5343:11;;5356:10;;5310:57;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5310:57:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5310:57:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;5310:57:1;;;;;;;;;5389:44;;5450:22;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;5450:22:1;;;;5286:81;;-1:-1:-1;5389:59:1;;5381:92;;;;-1:-1:-1;;;;;5381:92:1;;;;;;;;;;;4195:1289;5493:55;5508:16;5526:21;5493:14;:55::i;:::-;5603:85;5617:17;5636:10;5648:16;:39;;;5603:13;:85::i;:::-;3531:2197;;;;;;;;;;;:::o;5734:1626::-;5973:44;;:::i;:::-;6111:22;6148:9;6410:43;;:::i;:::-;6706:25;6789:9;6916:44;;:::i;:::-;6056:13;;6071:29;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6071:29:1;;;;;;;7181:15;;6041:28;;6033:68;;;;-1:-1:-1;;;;;6033:68:1;;;;;;;;;;;6160:1;6148:13;;6143:129;6167:6;:13;6163:1;:17;6143:129;;;6218:43;6226:14;6242:6;6249:1;6242:9;;;;;;;;;;;;;;;;;;:18;;;6218:7;:43::i;:::-;6201:60;-1:-1:-1;6182:3:1;;;;;6143:129;;;6302:1;6285:14;:18;6281:416;;;6456:62;6477:9;6488:13;6503:14;6456:20;:62::i;:::-;6564:28;;;;;6532:29;;;:60;6648:38;;;;;6606:39;;;:80;6410:108;-1:-1:-1;6281:416:1;6734:40;6746:6;6753:1;6746:9;;;;;;;;;6734:40;6706:68;;6801:1;6789:13;;6784:537;6808:6;:13;6804:1;:17;6784:537;;;6963:8;;7005:9;;-1:-1:-1;;;;;6963:8:1;;;;:24;;7005:6;;7012:1;;7005:9;;;;;;;;;;;;;;7032:6;7039:1;7032:9;;;;;;;;;;;;;;;;;;:26;;;7076:10;7087:1;7076:13;;;;;;;;;;;;;;;;;;6963:140;;;;;-1:-1:-1;;;6963:140:1;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6963:140:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6963:140:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;6963:140:1;;;;;;;;;6916:187;;7117:50;7132:16;7150;7117:14;:50::i;:::-;7199:41;7211:6;7218:1;7211:9;;;;;;;;;;;;;;;;;;:24;;;7237:2;7199:11;:41::i;:::-;7181:59;;7254:56;7271:17;7290:10;7302:7;7254:16;:56::i;:::-;6823:3;;;;;6784:537;;;5734:1626;;;;;;;;;;;;;;:::o;7325:340:5:-;7458:4;;7509:93;7517:60;7525:20;647:4;7517:7;:60::i;7509:93::-;7619:39;;;;;7325:340;-1:-1:-1;;;7325:340:5:o;2761:906::-;2955:33;3285:17;3108:1;3091:14;:18;3087:532;;;3125:11;;:36;;-1:-1:-1;;;;;3125:36:5;;-1:-1:-1;;;;;3125:11:5;;;;:20;;:36;;3146:14;;3125:36;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3125:36:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3125:36:5;;;;3203:14;3175:42;;3305:89;3313:16;3331:62;3347:16;3365:13;3380:12;3331:15;:62::i;:::-;3305:7;:89::i;:::-;3285:109;;3436:45;3444:25;3471:9;3436:7;:45::i;:::-;3408:73;;3527:1;3499:25;:29;3495:114;;;3548:46;;:10;;:46;;;;;3568:25;;3548:46;;;;3568:25;3548:10;:46;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3548:46:5;3495:114;2761:906;;;;;;;:::o;570:166:42:-;650:7;682:5;;;704:6;;;;697:14;;;84:180;164:7;196:5;;;218:6;;;:20;;;237:1;232;228;:5;;;;;;;;:10;218:20;211:28;;;;;270:142;350:7;373:6;386:1;382;:5;;;;;;;;;270:142;-1:-1:-1;;;;270:142:42:o;1454:866:6:-;1594:44;;:::i;:::-;1659:9;1826:37;1951:52;;:::i;:::-;1671:1;1659:13;;1654:627;1678:6;:13;1674:1;:17;1654:627;;;1720:65;1734:6;1741:1;1734:9;;;;;;;;;;;;;;;;;;:24;;;1760:6;1767:1;1760:9;;;;;;;;;1720:65;1787:24;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1787:24:6;;;;;1712:100;;;;;;-1:-1:-1;;;;;1712:100:6;;;;;;;;;;;1866:70;1874:20;1896:16;:39;;;1866:7;:70::i;:::-;1826:110;;2006:71;2036:6;2043:1;2036:9;;;;;;;;;2006:71;1951:126;;2092:58;2107:16;2125:24;2092:14;:58::i;:::-;2211:20;2168:16;:39;;;:63;2164:107;;;2251:5;;2164:107;1693:3;;;;;1654:627;;;1454:866;;;;;;;:::o;4527:2184:5:-;4685:44;;:::i;:::-;4745:13;4888:9;5198:37;5493;5915:44;;:::i;:::-;4761:40;4773:6;4780:1;4773:9;;;;;;;;;4761:40;4836:9;;4848:24;;;;;;;;;;;;-1:-1:-1;;;;;4848:24:5;;;;4745:56;;-1:-1:-1;;;;;;4819:27:5;;;4836:9;;4819:27;4811:62;;;;-1:-1:-1;;;;;4811:62:5;;;;;;;;;;;4900:1;4888:13;;4883:1789;4907:6;:13;4903:1;:17;4883:1789;;;5024:65;5038:6;5045:1;5038:9;;;;;;;;;;;;;;;;;;:24;;;5064:6;5071:1;5064:9;;;;;;;;;5024:65;5091:24;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;5091:24:5;;;;;5016:100;;;;;;-1:-1:-1;;;;;5016:100:5;;;;;;;;;;;5238:59;5246:9;5257:16;:39;;;5238:7;:59::i;:::-;5198:99;;5533:214;5567:6;5574:1;5567:9;;;;;;;;;;;;;;;;;;:26;;;5611:55;5619:6;5626:1;5619:9;;;;;;;;;;;;;;;;;;:26;;;5647:6;5654:1;5647:9;;;;;;;;;5533:214;5962:8;;5998:9;;5493:254;;-1:-1:-1;;;;;;5962:8:5;;:18;;5998:6;;6005:1;;5998:9;;;;;;;;;;;;;;6025:41;6033:29;6064:1;6025:7;:41::i;:::-;6084:10;6095:1;6084:13;;;;;;;;;;;;;;;;;;5962:149;;;;;-1:-1:-1;;;5962:149:5;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5962:149:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5962:149:5;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;5962:149:5;;;;;;;;;5915:196;;6257:79;6265:16;:39;;;6306:16;:29;;;6257:7;:79::i;:::-;6215:121;;6420:50;6435:16;6215;6420:14;:50::i;:::-;6570:39;;:52;-1:-1:-1;6566:96:5;;6642:5;;6566:96;4922:3;;;;;4883:1789;;;4527:2184;;;;;;;;;;:::o;163:207:2:-;295:44;;-1:-1:-1;;;;;295:44:2;;-1:-1:-1;;;;;295:27:2;;;;;:44;;323:7;;332:6;;295:44;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;295:44:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;295:44:2;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;295:44:2;;;;;;;;;341:21;;;;;;;;;;;;-1:-1:-1;;;;;341:21:2;;;;;287:76;;;;;;-1:-1:-1;;;;;287:76:2;;;;;;;;;;;163:207;;;:::o;7846:195:39:-;7967:14;8012:21;8024:1;8027:5;8012:11;:21::i;411:192:3:-;537:59;;-1:-1:-1;;;;;537:59:3;;-1:-1:-1;;;;;537:31:3;;;;;:59;;577:4;;584:2;;588:7;;537:59;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;537:59:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;537:59:3;;;;411:192;;;:::o;6464:472:39:-;6585:14;6648:5;6656:2;6648:10;6636:1;:8;:22;;6672;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;6672:22:39;;;;-1:-1:-1;;;;;6672:22:39;;;6615:89;;;;;;;-1:-1:-1;;;;;6615:89:39;;;;;;;;;;-1:-1:-1;;6883:13:39;6785:2;6883:13;6877:20;;6464:472::o;208:1077:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;208:1077:0;;;;;;;;;;;;;;;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;130:122;;208:39;239:6;233:13;208:39;;275:693;;390:4;378:17;;374:27;-1:-1;364:2;;415:1;412;405:12;364:2;452:6;439:20;474:85;489:69;551:6;489:69;;;474:85;;;587:21;;;631:4;619:17;;;;465:94;;-1:-1;644:14;;619:17;739:1;724:238;749:6;746:1;743:13;724:238;;;832:3;819:17;811:6;807:30;856:42;894:3;882:10;856:42;;;844:55;;-1:-1;922:4;913:14;;;;941;;;;;771:1;764:9;724:238;;1008:735;;1137:4;1125:17;;1121:27;-1:-1;1111:2;;1162:1;1159;1152:12;1111:2;1199:6;1186:20;1221:99;1236:83;1312:6;1236:83;;1221:99;1348:21;;;1392:4;1380:17;;;;1212:108;;-1:-1;1405:14;;1380:17;1500:1;1485:252;1510:6;1507:1;1504:13;1485:252;;;1593:3;1580:17;1572:6;1568:30;1617:56;1669:3;1657:10;1617:56;;;1605:69;;-1:-1;1697:4;1688:14;;;;1716;;;;;1532:1;1525:9;1485:252;;1751:116;;1826:36;1854:6;1848:13;1826:36;;1874:122;;1952:39;1983:6;1977:13;1952:39;;2004:432;;2094:4;2082:17;;2078:27;-1:-1;2068:2;;2119:1;2116;2109:12;2068:2;2156:6;2143:20;2178:60;2193:44;2230:6;2193:44;;2178:60;2169:69;;2258:6;2251:5;2244:21;2294:4;2286:6;2282:17;2327:4;2320:5;2316:16;2362:3;2353:6;2348:3;2344:16;2341:25;2338:2;;;2379:1;2376;2369:12;2338:2;2389:41;2423:6;2418:3;2413;2389:41;;2933:865;;3062:4;3050:9;3045:3;3041:19;3037:30;3034:2;;;3080:1;3077;3070:12;3034:2;3098:20;3113:4;3098:20;;;3089:29;-1:-1;3186:1;3217:60;3273:3;3253:9;3217:60;;;3193:85;;-1:-1;3357:2;3390:60;3446:3;3422:22;;;3390:60;;;3383:4;3376:5;3372:16;3365:86;3299:163;3520:2;3553:60;3609:3;3600:6;3589:9;3585:22;3553:60;;;3546:4;3539:5;3535:16;3528:86;3472:153;3683:2;3716:60;3772:3;3763:6;3752:9;3748:22;3716:60;;;3709:4;3702:5;3698:16;3691:86;3635:153;3028:770;;;;;3837:689;;3964:4;3952:9;3947:3;3943:19;3939:30;3936:2;;;3982:1;3979;3972:12;3936:2;4000:20;4015:4;4000:20;;;3991:29;-1:-1;4077:1;4108:58;4162:3;4142:9;4108:58;;;4084:83;;-1:-1;4233:2;4266:60;4322:3;4298:22;;;4266:60;;;4259:4;4252:5;4248:16;4241:86;4188:150;4411:2;4444:60;4500:3;4491:6;4480:9;4476:22;4444:60;;;4437:4;4430:5;4426:16;4419:86;4348:168;3930:596;;;;;4561:2205;;4669:5;4657:9;4652:3;4648:19;4644:31;4641:2;;;4688:1;4685;4678:12;4641:2;4706:21;4721:5;4706:21;;;4697:30;-1:-1;4785:1;4816:49;4861:3;4841:9;4816:49;;;4792:74;;-1:-1;4935:2;4968:49;5013:3;4989:22;;;4968:49;;;4961:4;4954:5;4950:16;4943:75;4887:142;5094:2;5127:49;5172:3;5163:6;5152:9;5148:22;5127:49;;;5120:4;5113:5;5109:16;5102:75;5039:149;5247:2;5280:49;5325:3;5316:6;5305:9;5301:22;5280:49;;;5273:4;5266:5;5262:16;5255:75;5198:143;5403:3;5437:49;5482:3;5473:6;5462:9;5458:22;5437:49;;;5430:4;5423:5;5419:16;5412:75;5351:147;5560:3;5594:49;5639:3;5630:6;5619:9;5615:22;5594:49;;;5587:4;5580:5;5576:16;5569:75;5508:147;5709:3;5743:49;5788:3;5779:6;5768:9;5764:22;5743:49;;;5736:4;5729:5;5725:16;5718:75;5665:139;5858:3;5892:49;5937:3;5928:6;5917:9;5913:22;5892:49;;;5885:4;5878:5;5874:16;5867:75;5814:139;6020:3;6055:49;6100:3;6091:6;6080:9;6076:22;6055:49;;;6047:5;6040;6036:17;6029:76;5963:153;6166:3;6201:49;6246:3;6237:6;6226:9;6222:22;6201:49;;;6193:5;6186;6182:17;6175:76;6126:136;6350:3;6339:9;6335:19;6322:33;-1:-1;;;;;6367:6;6364:30;6361:2;;;6407:1;6404;6397:12;6361:2;6443:54;6493:3;6484:6;6473:9;6469:22;6443:54;;;6435:5;6428;6424:17;6417:81;6272:237;6597:3;6586:9;6582:19;6569:33;-1:-1;;;;;6614:6;6611:30;6608:2;;;6654:1;6651;6644:12;6608:2;6690:54;6740:3;6731:6;6720:9;6716:22;6690:54;;;6682:5;6675;6671:17;6664:81;6519:237;4635:2131;;;;;9017:116;;9083:45;9120:6;9107:20;9083:45;;9140:118;;9207:46;9245:6;9232:20;9207:46;;9394:114;;9459:44;9495:6;9482:20;9459:44;;9515:118;;9591:37;9620:6;9614:13;9591:37;;9640:241;;9744:2;9732:9;9723:7;9719:23;9715:32;9712:2;;;9760:1;9757;9750:12;9712:2;9795:1;9812:53;9857:7;9837:9;9812:53;;9888:263;;10003:2;9991:9;9982:7;9978:23;9974:32;9971:2;;;10019:1;10016;10009:12;9971:2;10054:1;10071:64;10127:7;10107:9;10071:64;;10158:595;;;;10305:2;10293:9;10284:7;10280:23;10276:32;10273:2;;;10321:1;10318;10311:12;10273:2;10356:1;10373:53;10418:7;10398:9;10373:53;;;10363:63;;10335:97;10463:2;10481:53;10526:7;10517:6;10506:9;10502:22;10481:53;;;10471:63;;10442:98;10599:2;10588:9;10584:18;10571:32;-1:-1;;;;;10615:6;10612:30;10609:2;;;10655:1;10652;10645:12;10609:2;10675:62;10729:7;10720:6;10709:9;10705:22;10675:62;;;10665:72;;10550:193;10267:486;;;;;;10760:1507;;;;;;;11096:3;11084:9;11075:7;11071:23;11067:33;11064:2;;;11113:1;11110;11103:12;11064:2;11148:31;;-1:-1;;;;;11188:30;;11185:2;;;11231:1;11228;11221:12;11185:2;11251:97;11340:7;11331:6;11320:9;11316:22;11251:97;;;11241:107;;11127:227;11413:2;11402:9;11398:18;11385:32;-1:-1;;;;;11429:6;11426:30;11423:2;;;11469:1;11466;11459:12;11423:2;11489:83;11564:7;11555:6;11544:9;11540:22;11489:83;;;11479:93;;11364:214;11637:2;11626:9;11622:18;11609:32;-1:-1;;;;;11653:6;11650:30;11647:2;;;11693:1;11690;11683:12;11647:2;11713:97;11802:7;11793:6;11782:9;11778:22;11713:97;;;11703:107;;11588:228;11875:2;11864:9;11860:18;11847:32;-1:-1;;;;;11891:6;11888:30;11885:2;;;11931:1;11928;11921:12;11885:2;11951:83;12026:7;12017:6;12006:9;12002:22;11951:83;;;11941:93;;11826:214;12071:3;12090:52;12134:7;12125:6;12114:9;12110:22;12090:52;;;12080:62;;12050:98;12179:3;12198:53;12243:7;12234:6;12223:9;12219:22;12198:53;;;12188:63;;12158:99;11058:1209;;;;;;;;;12274:1633;;;;;;;;12627:3;12615:9;12606:7;12602:23;12598:33;12595:2;;;12644:1;12641;12634:12;12595:2;12679:31;;-1:-1;;;;;12719:30;;12716:2;;;12762:1;12759;12752:12;12716:2;12782:97;12871:7;12862:6;12851:9;12847:22;12782:97;;;12772:107;;12658:227;12944:2;12933:9;12929:18;12916:32;-1:-1;;;;;12960:6;12957:30;12954:2;;;13000:1;12997;12990:12;12954:2;13020:83;13095:7;13086:6;13075:9;13071:22;13020:83;;;13010:93;;12895:214;13168:2;13157:9;13153:18;13140:32;-1:-1;;;;;13184:6;13181:30;13178:2;;;13224:1;13221;13214:12;13178:2;13244:97;13333:7;13324:6;13313:9;13309:22;13244:97;;;13234:107;;13119:228;13406:2;13395:9;13391:18;13378:32;-1:-1;;;;;13422:6;13419:30;13416:2;;;13462:1;13459;13452:12;13416:2;13482:83;13557:7;13548:6;13537:9;13533:22;13482:83;;;13472:93;;13357:214;13602:3;13621:53;13666:7;13657:6;13646:9;13642:22;13621:53;;;13611:63;;13581:99;13711:3;13730:52;13774:7;13765:6;13754:9;13750:22;13730:52;;;13720:62;;13690:98;13819:3;13838:53;13883:7;13874:6;13863:9;13859:22;13838:53;;;13828:63;;13798:99;12589:1318;;;;;;;;;;;13914:540;;;14079:2;14067:9;14058:7;14054:23;14050:32;14047:2;;;14095:1;14092;14085:12;14047:2;14130:31;;-1:-1;;;;;14170:30;;14167:2;;;14213:1;14210;14203:12;14167:2;14233:97;14322:7;14313:6;14302:9;14298:22;14233:97;;;14223:107;;14109:227;14367:2;14385:53;14430:7;14421:6;14410:9;14406:22;14385:53;;;14375:63;;14346:98;14041:413;;;;;;14461:257;;14573:2;14561:9;14552:7;14548:23;14544:32;14541:2;;;14589:1;14586;14579:12;14541:2;14624:1;14641:61;14694:7;14674:9;14641:61;;14725:322;;14869:3;14857:9;14848:7;14844:23;14840:33;14837:2;;;14886:1;14883;14876:12;14837:2;14921:1;14938:93;15023:7;15003:9;14938:93;;15054:317;;15196:2;15184:9;15175:7;15171:23;15167:32;15164:2;;;15212:1;15209;15202:12;15164:2;15247:1;15264:91;15347:7;15327:9;15264:91;;15378:498;;;15522:2;15510:9;15501:7;15497:23;15493:32;15490:2;;;15538:1;15535;15528:12;15490:2;15573:31;;-1:-1;;;;;15613:30;;15610:2;;;15656:1;15653;15646:12;15610:2;15676:76;15744:7;15735:6;15724:9;15720:22;15676:76;;15883:237;;15985:2;15973:9;15964:7;15960:23;15956:32;15953:2;;;16001:1;15998;15991:12;15953:2;16036:1;16053:51;16096:7;16076:9;16053:51;;16127:454;;;16286:3;16274:9;16265:7;16261:23;16257:33;16254:2;;;16303:1;16300;16293:12;16254:2;16338:1;16355:62;16409:7;16389:9;16355:62;;;16345:72;;16317:106;16454:2;16472:93;16557:7;16548:6;16537:9;16533:22;16472:93;;16588:110;16661:31;16686:5;16661:31;;;16656:3;16649:44;16643:55;;;16732:766;;16877:59;16930:5;16877:59;;;16954:6;16949:3;16942:19;16978:4;16973:3;16969:14;16962:21;;17026:3;17068:4;17060:6;17056:17;17051:3;17047:27;17094:61;17149:5;17094:61;;;17176:1;17161:298;17186:6;17183:1;17180:13;17161:298;;;17248:9;17242:4;17238:20;17233:3;17226:33;17274:68;17337:4;17328:6;17322:13;17274:68;;;17266:76;;17359:65;17417:6;17359:65;;;17447:4;17438:14;;;;;17349:75;-1:-1;17208:1;17201:9;17161:298;;;-1:-1;17472:4;;16856:642;-1:-1;;;;;;16856:642;17565:864;;17738:73;17805:5;17738:73;;;17829:6;17824:3;17817:19;17853:4;17848:3;17844:14;17837:21;;17901:3;17943:4;17935:6;17931:17;17926:3;17922:27;17969:75;18038:5;17969:75;;;18065:1;18050:340;18075:6;18072:1;18069:13;18050:340;;;18137:9;18131:4;18127:20;18122:3;18115:33;18163:96;18254:4;18245:6;18239:13;18163:96;;;18155:104;;18276:79;18348:6;18276:79;;;18378:4;18369:14;;;;;18266:89;-1:-1;18097:1;18090:9;18050:340;;18437:107;18508:30;18532:5;18508:30;;18551:289;;18647:34;18675:5;18647:34;;;18698:6;18693:3;18686:19;18710:63;18766:6;18759:4;18754:3;18750:14;18743:4;18736:5;18732:16;18710:63;;;18805:29;18827:6;18805:29;;;18785:50;;;18798:4;18785:50;;18627:213;-1:-1;;;18627:213;19147:397;19302:2;19290:15;;19339:66;19334:2;19325:12;;19318:88;-1:-1;;;;;19435:2;19426:12;;19419:88;19535:2;19526:12;;19283:261;19629:888;19857:22;;19770:4;19761:14;;;19891:61;19765:3;19857:22;19891:61;;;19790:174;20058:4;20051:5;20047:16;20041:23;20076:62;20132:4;20127:3;20123:14;20110:11;20076:62;;;19974:176;20234:4;20227:5;20223:16;20217:23;20252:62;20308:4;20303:3;20299:14;20286:11;20252:62;;;20160:166;20410:4;20403:5;20399:16;20393:23;20428:62;20484:4;20479:3;20475:14;20462:11;20428:62;;20577:2419;20792:22;;20577:2419;;20714:5;20705:15;;;20826:61;20709:3;20792:22;20826:61;;;20735:164;20983:4;20976:5;20972:16;20966:23;21001:62;21057:4;21052:3;21048:14;21035:11;21001:62;;;20909:166;21166:4;21159:5;21155:16;21149:23;21184:62;21240:4;21235:3;21231:14;21218:11;21184:62;;;21085:173;21343:4;21336:5;21332:16;21326:23;21361:62;21417:4;21412:3;21408:14;21395:11;21361:62;;;21268:167;21523:4;21516:5;21512:16;21506:23;21541:62;21597:4;21592:3;21588:14;21575:11;21541:62;;;21445:170;21703:4;21696:5;21692:16;21686:23;21721:62;21777:4;21772:3;21768:14;21755:11;21721:62;;;21625:170;21875:4;21868:5;21864:16;21858:23;21893:62;21949:4;21944:3;21940:14;21927:11;21893:62;;;21805:162;22047:4;22040:5;22036:16;22030:23;22065:62;22121:4;22116:3;22112:14;22099:11;22065:62;;;21977:162;22232:5;22225;22221:17;22215:24;22251:63;22307:5;22302:3;22298:15;22285:11;22251:63;;;22149:177;22402:5;22395;22391:17;22385:24;22421:63;22477:5;22472:3;22468:15;22455:11;22421:63;;;22336:160;22582:5;22575;22571:17;22565:24;22635:3;22629:4;22625:14;22617:5;22612:3;22608:15;22601:39;22655:66;22716:4;22703:11;22655:66;;;22647:74;;22506:227;22819:5;22812;22808:17;22802:24;22872:3;22866:4;22862:14;22854:5;22849:3;22845:15;22838:39;22892:66;22953:4;22940:11;22892:66;;;22884:74;20687:2309;-1:-1;;;;;20687:2309;25478:107;25549:30;25573:5;25549:30;;25592:110;25665:31;25690:5;25665:31;;25709:104;25778:29;25801:5;25778:29;;25820:193;25928:2;25913:18;;25942:61;25917:9;25976:6;25942:61;;26020:395;26184:2;26169:18;;26198:61;26173:9;26232:6;26198:61;;;26270:62;26328:2;26317:9;26313:18;26304:6;26270:62;;;26343;26401:2;26390:9;26386:18;26377:6;26343:62;;26422:294;26558:2;26543:18;;26572:61;26547:9;26606:6;26572:61;;;26644:62;26702:2;26691:9;26687:18;26678:6;26644:62;;26723:787;27035:2;27049:47;;;27020:18;;27110:136;27020:18;27232:6;27110:136;;;27102:144;;27257:62;27315:2;27304:9;27300:18;27291:6;27257:62;;;27367:9;27361:4;27357:20;27352:2;27341:9;27337:18;27330:48;27392:108;27495:4;27486:6;27392:108;;27517:189;27623:2;27608:18;;27637:59;27612:9;27669:6;27637:59;;27713:273;27837:2;27851:47;;;27822:18;;27912:64;27822:18;27962:6;27912:64;;27993:387;28174:2;28188:47;;;28159:18;;28249:121;28159:18;28249:121;;28387:310;28553:3;28538:19;;28568:119;28542:9;28660:6;28568:119;;28704:333;28858:2;28872:47;;;28843:18;;28933:94;28843:18;29013:6;28933:94;;29044:629;29278:3;29293:47;;;29263:19;;29354:94;29263:19;29434:6;29354:94;;;29346:102;;29459:58;29513:2;29502:9;29498:18;29489:6;29459:58;;;29528:62;29586:2;29575:9;29571:18;29562:6;29528:62;;;29601;29659:2;29648:9;29644:18;29635:6;29601:62;;29680:603;29900:2;29914:47;;;29885:18;;29975:90;29885:18;30051:6;29975:90;;;29967:98;;30076:62;30134:2;30123:9;30119:18;30110:6;30076:62;;;30186:9;30180:4;30176:20;30171:2;30160:9;30156:18;30149:48;30211:62;30268:4;30259:6;30211:62;;30290:189;30396:2;30381:18;;30410:59;30385:9;30442:6;30410:59;;30486:193;30594:2;30579:18;;30608:61;30583:9;30642:6;30608:61;;30686:185;30790:2;30775:18;;30804:57;30779:9;30834:6;30804:57;;30878:256;30940:2;30934:9;30966:17;;;-1:-1;;;;;31026:34;;31062:22;;;31023:62;31020:2;;;31098:1;31095;31088:12;31020:2;31114;31107:22;30918:216;;-1:-1;30918:216;31141:263;;-1:-1;;;;;31297:6;31294:30;31291:2;;;31337:1;31334;31327:12;31291:2;-1:-1;31366:4;31354:17;;;31384:15;;31228:176;31695:254;;-1:-1;;;;;31826:6;31823:30;31820:2;;;31866:1;31863;31856:12;31820:2;-1:-1;31939:4;31910;31887:17;;;;-1:-1;;31883:33;31929:15;;31757:192;32223:126;32337:4;32325:17;;32306:43;32509:112;32604:12;;32588:33;33236:128;-1:-1;;;;;33305:54;;33288:76;33371:151;-1:-1;;;;;;33439:78;;33422:100;33529:91;33608:6;33597:18;;33580:40;33627:79;33696:5;33679:27;33713:88;33791:4;33780:16;;33763:38;33943:92;34016:13;34009:21;;33992:43;34408:145;34489:6;34484:3;34479;34466:30;-1:-1;34545:1;34527:16;;34520:27;34459:94;34562:268;34627:1;34634:101;34648:6;34645:1;34642:13;34634:101;;;34715:11;;;34709:18;34696:11;;;34689:39;34670:2;34663:10;34634:101;;;34750:6;34747:1;34744:13;34741:2;;;-1:-1;;34815:1;34797:16;;34790:27;34611:219;34838:97;34926:2;34906:14;-1:-1;;34902:28;;34886:49"
			}
		}
	},
	"sources": {
		"current/forwarder/Forwarder.sol": {
			"id": 0
		},
		"current/forwarder/MixinBuyExactAssets.sol": {
			"id": 1
		},
		"current/forwarder/MixinERC20.sol": {
			"id": 2
		},
		"current/forwarder/MixinERC721.sol": {
			"id": 3
		},
		"current/forwarder/MixinErrorMessages.sol": {
			"id": 4
		},
		"current/forwarder/MixinForwarderCore.sol": {
			"id": 5
		},
		"current/forwarder/MixinForwarderExpectedResults.sol": {
			"id": 6
		},
		"current/forwarder/MixinMarketBuyTokens.sol": {
			"id": 7
		},
		"current/protocol/AssetProxy/interfaces/IAssetProxy.sol": {
			"id": 8
		},
		"current/protocol/AssetProxy/interfaces/IAuthorizable.sol": {
			"id": 9
		},
		"current/protocol/Exchange/Exchange.sol": {
			"id": 10
		},
		"current/protocol/Exchange/MixinAssetProxyDispatcher.sol": {
			"id": 11
		},
		"current/protocol/Exchange/MixinExchangeCore.sol": {
			"id": 12
		},
		"current/protocol/Exchange/MixinMatchOrders.sol": {
			"id": 13
		},
		"current/protocol/Exchange/MixinSettlement.sol": {
			"id": 14
		},
		"current/protocol/Exchange/MixinSignatureValidator.sol": {
			"id": 15
		},
		"current/protocol/Exchange/MixinTransactions.sol": {
			"id": 16
		},
		"current/protocol/Exchange/MixinWrapperFunctions.sol": {
			"id": 17
		},
		"current/protocol/Exchange/interfaces/IAssetProxyDispatcher.sol": {
			"id": 18
		},
		"current/protocol/Exchange/interfaces/IExchangeCore.sol": {
			"id": 19
		},
		"current/protocol/Exchange/interfaces/IMatchOrders.sol": {
			"id": 20
		},
		"current/protocol/Exchange/interfaces/ISignatureValidator.sol": {
			"id": 21
		},
		"current/protocol/Exchange/interfaces/ITransactions.sol": {
			"id": 22
		},
		"current/protocol/Exchange/interfaces/IValidator.sol": {
			"id": 23
		},
		"current/protocol/Exchange/interfaces/IWallet.sol": {
			"id": 24
		},
		"current/protocol/Exchange/libs/LibExchangeErrors.sol": {
			"id": 25
		},
		"current/protocol/Exchange/libs/LibFillResults.sol": {
			"id": 26
		},
		"current/protocol/Exchange/libs/LibMath.sol": {
			"id": 27
		},
		"current/protocol/Exchange/libs/LibOrder.sol": {
			"id": 28
		},
		"current/protocol/Exchange/libs/LibStatus.sol": {
			"id": 29
		},
		"current/protocol/Exchange/mixins/MAssetProxyDispatcher.sol": {
			"id": 30
		},
		"current/protocol/Exchange/mixins/MExchangeCore.sol": {
			"id": 31
		},
		"current/protocol/Exchange/mixins/MMatchOrders.sol": {
			"id": 32
		},
		"current/protocol/Exchange/mixins/MSettlement.sol": {
			"id": 33
		},
		"current/protocol/Exchange/mixins/MSignatureValidator.sol": {
			"id": 34
		},
		"current/protocol/Exchange/mixins/MTransactions.sol": {
			"id": 35
		},
		"current/tokens/ERC20Token/IERC20Token.sol": {
			"id": 36
		},
		"current/tokens/WETH9/WETH9.sol": {
			"id": 37
		},
		"current/tokens/ZRXToken/ZRXToken.sol": {
			"id": 38
		},
		"current/utils/LibBytes/LibBytes.sol": {
			"id": 39
		},
		"current/utils/Ownable/IOwnable.sol": {
			"id": 40
		},
		"current/utils/Ownable/Ownable.sol": {
			"id": 41
		},
		"current/utils/SafeMath/SafeMath.sol": {
			"id": 42
		},
		"previous/ERC20Token/ERC20Token_v1.sol": {
			"id": 43
		},
		"previous/Token/Token_v1.sol": {
			"id": 44
		},
		"previous/UnlimitedAllowanceToken/UnlimitedAllowanceToken_v1.sol": {
			"id": 45
		},
		"zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol": {
			"id": 46
		}
	},
	"sourceCodes": {
		"current/forwarder/Forwarder.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./MixinForwarderCore.sol\";\nimport \"./MixinBuyExactAssets.sol\";\nimport \"./MixinMarketBuyTokens.sol\";\nimport \"../utils/Ownable/Ownable.sol\";\n\ncontract Forwarder is\n    MixinForwarderCore,\n    MixinBuyExactAssets,\n    MixinMarketBuyTokens,\n    Ownable\n{\n    function Forwarder(\n        Exchange _exchange,\n        EtherToken _etherToken,\n        ZRXToken _zrxToken,\n        uint8 erc20AssetProxyId)\n        public\n        Ownable()\n    {\n        EXCHANGE = _exchange;\n        ETHER_TOKEN = _etherToken;\n        ZRX_TOKEN = _zrxToken;\n        setERC20ProxyApproval(erc20AssetProxyId);\n    }\n\n    /// @dev Default payabale function, this allows us to withdraw WETH\n    function()\n        public\n        payable\n    {\n        require(msg.sender == address(ETHER_TOKEN), DEFAULT_FUNCTION_WETH_CONTRACT_ONLY);\n    }\n\n    /// @dev Sets the allowances to the proxy for this contract\n    function setERC20ProxyApproval(uint8 erc20AssetProxyId)\n        public\n        onlyOwner\n    {\n        address proxyAddress = EXCHANGE.getAssetProxy(erc20AssetProxyId);\n        if (proxyAddress != address(0)) {\n            ETHER_TOKEN.approve(proxyAddress, MAX_UINT);\n            ZRX_TOKEN.approve(proxyAddress, MAX_UINT);\n        }\n    }\n}",
		"current/forwarder/MixinBuyExactAssets.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./MixinForwarderCore.sol\";\nimport \"./MixinForwarderExpectedResults.sol\";\nimport \"./MixinERC20.sol\";\nimport \"./MixinERC721.sol\";\n\ncontract MixinBuyExactAssets is\n    MixinForwarderCore,\n    MixinForwarderExpectedResults,\n    MixinERC20,\n    MixinERC721\n{\n    uint8 public constant ERC20_PROXY_ID = 1;\n    uint8 public constant ERC721_PROXY_ID = 2;\n    /// @dev Buys the exact amount of assets (ERC20 and ERC721), performing fee abstraction if required.\n    ///      All order assets must be of the same type. Deducts a proportional fee to fee recipient.\n    ///      This function is payable and will convert all incoming ETH into WETH and perform the trade on behalf of the caller.\n    ///      The caller is sent all assets from the fill of orders. This function will revert unless the requested amount of assets are purchased.\n    ///      Any excess ETH sent will be returned to the caller\n    /// @param orders An array of Order struct containing order specifications.\n    /// @param signatures An array of Proof that order has been created by maker.\n    /// @param feeOrders An array of Order struct containing order specifications for fees.\n    /// @param assetAmount The amount of maker asset to buy.\n    /// @param feeSignatures An array of Proof that order has been created by maker for the fee orders.\n    /// @param feeProportion A proportion deducted off the ETH spent and sent to feeRecipient. The maximum value for this\n    ///        is 1000, aka 10%. Supports up to 2 decimal places. I.e 0.59% is 59.\n    /// @param feeRecipient An address of the fee recipient whom receives feeProportion of ETH.\n    /// @return FillResults amounts filled and fees paid by maker and taker.\n    function buyExactAssets(\n        Order[] memory orders,\n        bytes[] memory signatures,\n        Order[] memory feeOrders,\n        bytes[] memory feeSignatures,\n        uint256 assetAmount,\n        uint16  feeProportion,\n        address feeRecipient)\n        payable\n        public\n        returns (Exchange.FillResults memory totalFillResults)\n    {\n        require(msg.value > 0, VALUE_GREATER_THAN_ZERO);\n        address takerAsset = readAddress(orders[0].takerAssetData, 0);\n        require(takerAsset == address(ETHER_TOKEN), TAKER_ASSET_WETH_REQUIRED);\n        uint8 proxyId = uint8(orders[0].makerAssetData[orders[0].makerAssetData.length - 1]);\n        require(proxyId == ERC20_PROXY_ID || proxyId == ERC721_PROXY_ID, UNSUPPORTED_TOKEN_PROXY);\n\n        uint256 remainingTakerAssetAmount = msg.value;\n        ETHER_TOKEN.deposit.value(remainingTakerAssetAmount)();\n        if (proxyId == ERC20_PROXY_ID) {\n            totalFillResults = buyExactERC20TokensInternal(orders, signatures, feeOrders, feeSignatures, assetAmount);\n        } else if (proxyId == ERC721_PROXY_ID) {\n            totalFillResults = buyExactERC721TokensInternal(orders, signatures, feeOrders, feeSignatures, assetAmount);\n        }\n        remainingTakerAssetAmount = safeSub(remainingTakerAssetAmount, totalFillResults.takerAssetFilledAmount);\n        // Prevent a user from paying too much in fees through fee abstraction\n        require(\n            isAcceptableThreshold(\n                remainingTakerAssetAmount,\n                totalFillResults.takerAssetFilledAmount),\n            UNACCEPTABLE_THRESHOLD);\n        withdrawPayAndDeductFee(remainingTakerAssetAmount, totalFillResults.takerAssetFilledAmount, feeProportion, feeRecipient);\n        return totalFillResults;\n    }\n\n    function buyExactERC20TokensInternal(\n        Order[] memory orders,\n        bytes[] memory signatures,\n        Order[] memory feeOrders,\n        bytes[] memory feeSignatures,\n        uint256 assetAmount)\n        private\n        returns (Exchange.FillResults memory totalFillResults)\n    {\n        address makerTokenAddress = readAddress(orders[0].makerAssetData, 0); \n        // We can short cut here for effeciency and use buyFeeTokensInternal if maker asset token is ZRX\n        // this buys us exactly that amount taking into account the fees. This saves gas and calculates the rate correctly\n        Exchange.FillResults memory requestedTokensResult;\n        if (makerTokenAddress == address(ZRX_TOKEN)) {\n            requestedTokensResult = buyFeeTokensInternal(orders, signatures, assetAmount);\n            // When buying ZRX we round up which can result in a small margin excess\n            require(requestedTokensResult.makerAssetFilledAmount >= assetAmount, UNACCEPTABLE_THRESHOLD);\n        } else {\n            Exchange.FillResults memory calculatedMarketBuyResults = calculateMarketBuyFillResults(orders, assetAmount);\n            if (calculatedMarketBuyResults.takerFeePaid > 0) {\n                // Fees are required for these orders. Buy enough ZRX to cover the future market buy\n                Exchange.FillResults memory feeTokensResult = buyFeeTokensInternal(\n                    feeOrders, feeSignatures, calculatedMarketBuyResults.takerFeePaid);\n                totalFillResults.takerAssetFilledAmount = feeTokensResult.takerAssetFilledAmount;\n                totalFillResults.takerFeePaid = feeTokensResult.takerFeePaid;\n            }\n            // Make our market buy of the requested tokens with the remaining balance\n            requestedTokensResult = EXCHANGE.marketBuyOrders(orders, assetAmount, signatures);\n            require(requestedTokensResult.makerAssetFilledAmount == assetAmount, UNACCEPTABLE_THRESHOLD);\n        }\n        addFillResults(totalFillResults, requestedTokensResult);\n        // Transfer all tokens to msg.sender\n        transferToken(makerTokenAddress, msg.sender, totalFillResults.makerAssetFilledAmount);\n        return totalFillResults;\n    }\n\n    function buyExactERC721TokensInternal(\n        Order[] memory orders,\n        bytes[] memory signatures,\n        Order[] memory feeOrders,\n        bytes[] memory feeSignatures,\n        uint256 assetAmount)\n        private\n        returns (Exchange.FillResults memory totalFillResults)\n    {\n        require(assetAmount == orders.length, ASSET_AMOUNT_MATCH_ORDER_SIZE);\n        uint256 totalFeeAmount;\n        for (uint256 i = 0; i < orders.length; i++) {\n            totalFeeAmount = safeAdd(totalFeeAmount, orders[i].takerFee);\n        }\n        if (totalFeeAmount > 0) {\n            // Fees are required for these orders. Buy enough ZRX to cover the future fill\n            Exchange.FillResults memory feeTokensResult = buyFeeTokensInternal(feeOrders, feeSignatures, totalFeeAmount);\n            totalFillResults.takerFeePaid = feeTokensResult.takerFeePaid;\n            totalFillResults.takerAssetFilledAmount = feeTokensResult.takerAssetFilledAmount;\n        }\n        address makerTokenAddress = readAddress(orders[0].makerAssetData, 0);\n        for (uint256 n = 0; n < orders.length; n++) {\n            // Fail if it wasn't fully filled otherwise we will keep WETH\n            Exchange.FillResults memory fillOrderResults = EXCHANGE.fillOrKillOrder(\n                orders[n],\n                orders[n].takerAssetAmount,\n                signatures[n]\n            );\n            addFillResults(totalFillResults, fillOrderResults);\n            uint256 tokenId = readUint256(orders[n].makerAssetData, 20);\n            transferNFTToken(makerTokenAddress, msg.sender, tokenId);\n        }\n        return totalFillResults;\n    }\n}\n",
		"current/forwarder/MixinERC20.sol": "pragma solidity ^0.4.24;\n\nimport \"../tokens/ERC20Token/IERC20Token.sol\";\ncontract MixinERC20 {\n    string constant ERROR_TRANSFER_FAILED = \"TRANSFER_FAILED\";\n\n    function transferToken(\n        address token,\n        address account,\n        uint amount)\n        internal\n    {\n        require(IERC20Token(token).transfer(account, amount), ERROR_TRANSFER_FAILED);\n    }\n}\n",
		"current/forwarder/MixinERC721.sol": "pragma solidity ^0.4.24;\n\nimport \"zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\";\n\ncontract MixinERC721 {\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n    function onERC721Received(address, uint256, bytes memory)\n        public\n        pure\n        returns(bytes4)\n    {\n        return ERC721_RECEIVED;\n    }\n\n    function transferNFTToken(\n        address token,\n        address to,\n        uint256 tokenId)\n        internal\n    {\n        ERC721Basic(token).transferFrom(address(this), to, tokenId);\n    }\n}",
		"current/forwarder/MixinErrorMessages.sol": "pragma solidity ^0.4.24;\n\ncontract MixinErrorMessages {\n    string constant VALUE_GREATER_THAN_ZERO = \"VALUE_GREATER_THAN_ZERO\";\n    string constant FEE_PROPORTION_TOO_LARGE = \"FEE_PROPORTION_TOO_LARGE\";\n    string constant TAKER_ASSET_ZRX_REQUIRED = \"TAKER_ASSET_ZRX_REQUIRED\";\n    string constant TAKER_ASSET_WETH_REQUIRED = \"TAKER_ASSET_WETH_REQUIRED\";\n    string constant SAME_ASSET_TYPE_REQUIRED = \"SAME_ASSET_TYPE_REQUIRED\";\n    string constant UNACCEPTABLE_THRESHOLD = \"UNACCEPTABLE_THRESHOLD\";\n    string constant UNSUPPORTED_TOKEN_PROXY = \"UNSUPPORTED_TOKEN_PROXY\";\n    string constant ASSET_AMOUNT_MATCH_ORDER_SIZE = \"ASSET_AMOUNT_MUST_MATCH_ORDER_SIZE\";\n    string constant DEFAULT_FUNCTION_WETH_CONTRACT_ONLY = \"DEFAULT_FUNCTION_WETH_CONTRACT_ONLY\";\n}",
		"current/forwarder/MixinForwarderCore.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./MixinErrorMessages.sol\";\nimport \"../protocol/Exchange/Exchange.sol\";\nimport \"../utils/SafeMath/SafeMath.sol\";\nimport { WETH9 as EtherToken } from \"../tokens/WETH9/WETH9.sol\";\nimport \"../tokens/ZRXToken/ZRXToken.sol\";\nimport \"../utils/LibBytes/LibBytes.sol\";\n\ncontract MixinForwarderCore is\n    MixinErrorMessages,\n    LibOrder,\n    LibFillResults,\n    LibMath,\n    LibBytes\n{\n    uint16  constant public PERCENTAGE_DENOMINATOR = 10000; // 9800 == 98%, 10000 == 100%\n    uint16  constant public MAX_FEE = 1000; // 10%\n    uint16  constant public ALLOWABLE_EXCHANGE_PERCENTAGE = 9500; // 95%\n    uint256 constant MAX_UINT = 2 ** 256 - 1;\n\n    Exchange EXCHANGE;\n    EtherToken ETHER_TOKEN;\n    ZRXToken ZRX_TOKEN;\n\n    /// @dev Deducts and Pays the feeRecipient feeProportion of the total takerTokenAmount\n    /// @param takerTokenAmount The total amount that was transacted in WETH, fees are calculated from this value.\n    /// @param feeProportion The proportion of fees\n    /// @param feeRecipient The recipient of the fees\n    /// @return remainingTakerTokenAmount the amount remaining after fees have been deducted and paid to feeRecipient.\n    function payAndDeductFee(\n        uint256 takerTokenAmount,\n        uint16 feeProportion,\n        address feeRecipient)\n        internal\n        returns (uint256 remainingTakerTokenAmount)\n    {\n        remainingTakerTokenAmount = takerTokenAmount;\n        if (feeProportion > 0 && feeRecipient != address(0)) {\n            require(feeProportion <= MAX_FEE, FEE_PROPORTION_TOO_LARGE);\n            // 1.5% is 150, allowing for 2 decimal precision, i.e 0.05% is 5\n            uint256 feeRecipientFeeAmount = safeDiv(safeMul(remainingTakerTokenAmount, feeProportion), PERCENTAGE_DENOMINATOR);\n            remainingTakerTokenAmount = safeSub(remainingTakerTokenAmount, feeRecipientFeeAmount);\n            feeRecipient.transfer(feeRecipientFeeAmount);\n        }\n        return remainingTakerTokenAmount;\n    }\n\n    /// @dev Withdraws the remaining WETH, deduct and pay fees from this amount based on the takerTokenAmount to the feeRecipient.\n    ///      If a user overpaid ETH initially, the fees are calculated from the amount traded and deducted from withdrawAmount.\n    ///      Any remaining ETH is sent back to the user.\n    /// @param withdrawAmount The amount to withdraw from the WETH contract.\n    /// @param takerTokenAmount The total amount that was transacted in WETH, fees are calculated from this value.\n    /// @param feeProportion The proportion of fees\n    /// @param feeRecipient The recipient of the fees\n    /// @return remainingTakerTokenAmount the amount remaining after fees have been deducted and paid to feeRecipient.\n    function withdrawPayAndDeductFee(\n        uint256 withdrawAmount,\n        uint256 takerTokenAmount,\n        uint16 feeProportion,\n        address feeRecipient)\n        internal\n        returns (uint256 remainingTakerTokenAmount)\n    {\n        // Return all of the excess WETH if any after deducting fees on the amount\n        if (withdrawAmount > 0) {\n            ETHER_TOKEN.withdraw(withdrawAmount);\n            remainingTakerTokenAmount = withdrawAmount;\n            // Fees proportional to the amount traded\n            uint256 feeAmount = safeSub(takerTokenAmount, payAndDeductFee(takerTokenAmount, feeProportion, feeRecipient));\n            remainingTakerTokenAmount = safeSub(remainingTakerTokenAmount, feeAmount);\n            if (remainingTakerTokenAmount > 0) {\n                msg.sender.transfer(remainingTakerTokenAmount);\n            }\n        }\n        return remainingTakerTokenAmount;\n    }\n\n    /// @dev Buys feeAmount of ZRX fee tokens, taking into account the fees on buying fee tokens. This will guarantee\n    ///      At least feeAmount of ZRX fee tokens are purchased (sometimes slightly over due to rounding issues).\n    ///      It is possible that a request to buy 200 ZRX fee tokens will require purchasing 202 ZRX tokens\n    ///      As 2 ZRX is required to purchase the 200 ZRX fee tokens. This guarantees at least 200 ZRX for future purchases.\n    /// @param orders An array of Order struct containing order specifications for fees.\n    /// @param signatures An array of Proof that order has been created by maker for the fee orders.\n    /// @param feeAmount The number of requested ZRX fee tokens.\n    /// @return totalFillResults Amounts filled and fees paid by maker and taker. makerTokenAmount is the zrx amount deducted of fees\n    function buyFeeTokensInternal(\n        Order[] memory orders,\n        bytes[] memory signatures,\n        uint256 feeAmount)\n        internal\n        returns (Exchange.FillResults memory totalFillResults)\n    {\n        address token = readAddress(orders[0].makerAssetData, 0);\n        require(token == address(ZRX_TOKEN), TAKER_ASSET_ZRX_REQUIRED);\n        for (uint256 i = 0; i < orders.length; i++) {\n            // Token being bought by taker must be the same for each order\n            require(areBytesEqual(orders[i].makerAssetData, orders[0].makerAssetData), SAME_ASSET_TYPE_REQUIRED);\n\n            // Calculate the remaining amount of makerToken to buy\n            uint256 remainingMakerTokenFillAmount = safeSub(feeAmount, totalFillResults.makerAssetFilledAmount);\n\n            // Convert the remaining amount of makerToken to buy into remaining amount\n            // of takerToken to sell, assuming entire amount can be sold in the current order\n            uint256 remainingTakerTokenFillAmount = getPartialAmount(\n                orders[i].takerAssetAmount,\n                safeSub(orders[i].makerAssetAmount, orders[i].takerFee), // our exchange rate after fees \n                remainingMakerTokenFillAmount);\n\n            // Attempt to sell the remaining amount of takerToken\n            // Round up the amount to ensure we don't under buy by a fractional amount\n            Exchange.FillResults memory singleFillResult = EXCHANGE.fillOrder(\n                orders[i],\n                safeAdd(remainingTakerTokenFillAmount, 1),\n                signatures[i]\n            );\n\n            // We didn't buy the full amount when buying ZRX as some were taken for fees\n            singleFillResult.makerAssetFilledAmount = safeSub(singleFillResult.makerAssetFilledAmount, singleFillResult.takerFeePaid);\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResult);\n\n            // Stop execution if the entire amount of makerToken has been bought\n            if (totalFillResults.makerAssetFilledAmount >= feeAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Checks whether the amount of tokens sold against the amount of tokens requested\n    ///      is within a certain threshold. This ensures the caller gets a fair deal when\n    ///      performing any token fee abstraction. Threshold is 95%. If fee abstraction costs more than\n    ///      5% of the total transaction, we return false.\n    /// @param requestedTokenAmount The amount the user requested, or sent in to a payable function\n    /// @param soldTokenAmount The amount of the token that was sold after fee abstraction\n    /// @return bool of whether this is within an acceptable threshold\n    function isAcceptableThreshold(uint256 requestedTokenAmount, uint256 soldTokenAmount)\n        internal\n        pure\n        returns (bool)\n    {\n        uint256 acceptableProportion = safeDiv(safeMul(requestedTokenAmount, ALLOWABLE_EXCHANGE_PERCENTAGE), PERCENTAGE_DENOMINATOR);\n        return soldTokenAmount >= acceptableProportion;\n    }\n}\n",
		"current/forwarder/MixinForwarderExpectedResults.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./MixinForwarderCore.sol\";\n\ncontract MixinForwarderExpectedResults is MixinForwarderCore {\n\n    /// @dev Simulates the 0x Exchange fillOrder validation and calculations, without performing any state changes.\n    /// @param order An Order struct containing order specifications.\n    /// @param takerAssetFillAmount A number representing the amount of this order to fill.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillOrderFillResults(Order memory order, uint256 takerAssetFillAmount)\n        public\n        view\n        returns (Exchange.FillResults memory fillResults)\n    {\n        Exchange.OrderInfo memory orderInfo = EXCHANGE.getOrderInfo(order);\n        uint8 _status;\n        (_status, fillResults) = EXCHANGE.calculateFillResults(\n            order,\n            orderInfo.orderStatus,\n            orderInfo.orderTakerAssetFilledAmount,\n            takerAssetFillAmount\n        );\n        return fillResults;\n    }\n\n    /// @dev Calculates a FillResults total for selling takerAssetFillAmount over all orders. \n    ///      Including the fees required to be paid. \n    /// @param orders An array of Order struct containing order specifications.\n    /// @param takerAssetFillAmount A number representing the amount of this order to fill.\n    /// @return totalFillResults Amounts filled and fees paid by maker and taker.\n    function calculateMarketSellFillResults(Order[] memory orders, uint256 takerAssetFillAmount)\n        internal\n        view\n        returns (Exchange.FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            require(areBytesEqual(orders[i].makerAssetData, orders[0].makerAssetData), SAME_ASSET_TYPE_REQUIRED);\n            uint256 remainingTakerAssetFillAmount = safeSub(takerAssetFillAmount, totalFillResults.takerAssetFilledAmount);\n\n            Exchange.FillResults memory fillOrderExpectedResults = calculateFillOrderFillResults(orders[i], remainingTakerAssetFillAmount);\n\n            addFillResults(totalFillResults, fillOrderExpectedResults);\n            if (totalFillResults.takerAssetFilledAmount == takerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Calculates a total FillResults for buying makerAssetFillAmount over all orders.\n    ///      Including the fees required to be paid. \n    /// @param orders An array of Order struct containing order specifications.\n    /// @param makerAssetFillAmount A number representing the amount of this order to fill.\n    /// @return totalFillResults Amounts filled and fees paid by maker and taker.\n    function calculateMarketBuyFillResults(Order[] memory orders, uint256 makerAssetFillAmount)\n        public\n        view\n        returns (Exchange.FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            require(areBytesEqual(orders[i].makerAssetData, orders[0].makerAssetData), SAME_ASSET_TYPE_REQUIRED);\n            uint256 remainingMakerAssetFillAmount = safeSub(makerAssetFillAmount, totalFillResults.makerAssetFilledAmount);\n            uint256 remainingTakerAssetFillAmount = getPartialAmount(\n                orders[i].takerAssetAmount,\n                orders[i].makerAssetAmount,\n                remainingMakerAssetFillAmount);\n\n            Exchange.FillResults memory calculatedFillOrderResults = calculateFillOrderFillResults(orders[i], remainingTakerAssetFillAmount);\n\n            addFillResults(totalFillResults, calculatedFillOrderResults);\n            if (totalFillResults.makerAssetFilledAmount == makerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Calculates fill results for buyFeeTokens. This handles fees on buying ZRX\n    ///      so the end result is the expected amount of ZRX (not less after fees).\n    /// @param orders An array of Order struct containing order specifications.\n    /// @param zrxAmount A number representing the amount zrx to buy\n    /// @return totalFillResults Expected fill result amounts from buying fees\n    function calculateBuyFeesFillResults(\n        Order[] memory orders,\n        uint256 zrxAmount)\n        public\n        view\n        returns (Exchange.FillResults memory totalFillResults)\n    {\n        address token = readAddress(orders[0].makerAssetData, 0);\n        require(token == address(ZRX_TOKEN), TAKER_ASSET_ZRX_REQUIRED);\n        for (uint256 i = 0; i < orders.length; i++) {\n            require(areBytesEqual(orders[i].makerAssetData, orders[0].makerAssetData), SAME_ASSET_TYPE_REQUIRED);\n            uint256 remainingMakerAssetFillAmount = safeSub(zrxAmount, totalFillResults.makerAssetFilledAmount);\n            // Convert the remaining amount of makerToken to buy into remaining amount\n            // of takerToken to sell, assuming entire amount can be sold in the current order\n            uint256 remainingTakerAssetFillAmount = getPartialAmount(\n                orders[i].takerAssetAmount,\n                safeSub(orders[i].makerAssetAmount, orders[i].takerFee), // our exchange rate after fees \n                remainingMakerAssetFillAmount);\n            Exchange.FillResults memory singleFillResult = calculateFillOrderFillResults(orders[i], safeAdd(remainingTakerAssetFillAmount, 1));\n\n            singleFillResult.makerAssetFilledAmount = safeSub(singleFillResult.makerAssetFilledAmount, singleFillResult.takerFeePaid);\n            addFillResults(totalFillResults, singleFillResult);\n            // As we compensate for the rounding issue above have slightly more ZRX than the requested zrxAmount\n            if (totalFillResults.makerAssetFilledAmount >= zrxAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n}",
		"current/forwarder/MixinMarketBuyTokens.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./MixinForwarderCore.sol\";\nimport \"./MixinForwarderExpectedResults.sol\";\nimport \"./MixinERC20.sol\";\n\ncontract MixinMarketBuyTokens is\n    MixinForwarderCore,\n    MixinForwarderExpectedResults,\n    MixinERC20\n{\n    /// @dev Market buys ERC20 tokens, performing fee abstraction if required. This does not support ERC721 tokens. This function is payable\n    ///      and will convert all incoming ETH into WETH and perform the trade on behalf of the caller.\n    ///      This function allows for a deduction of a proportion of incoming ETH sent to the feeRecipient.\n    ///      The caller is sent all tokens from the operation.\n    ///      If the purchased token amount does not meet an acceptable threshold then this function reverts.\n    /// @param orders An array of Order struct containing order specifications.\n    /// @param signatures An array of Proof that order has been created by maker.\n    /// @param feeOrders An array of Order struct containing order specifications for fees.\n    /// @param feeSignatures An array of Proof that order has been created by maker for the fee orders.\n    /// @param feeProportion A proportion deducted off the incoming ETH and sent to feeRecipient. The maximum value for this\n    ///        is 1000, aka 10%. Supports up to 2 decimal places. I.e 0.59% is 59.\n    /// @param feeRecipient An address of the fee recipient whom receives feeProportion of ETH.\n    /// @return FillResults amounts filled and fees paid by maker and taker.\n    function marketBuyTokens(\n        Order[] memory orders,\n        bytes[] memory signatures,\n        Order[] memory feeOrders,\n        bytes[] memory feeSignatures,\n        uint16  feeProportion,\n        address feeRecipient)\n        payable\n        public\n        returns (Exchange.FillResults)\n    {\n        require(msg.value > 0, VALUE_GREATER_THAN_ZERO);\n        address token = readAddress(orders[0].takerAssetData, 0);\n        require(token == address(ETHER_TOKEN), TAKER_ASSET_WETH_REQUIRED);\n\n        uint256 remainingTakerTokenAmount = payAndDeductFee(msg.value, feeProportion, feeRecipient);\n        ETHER_TOKEN.deposit.value(remainingTakerTokenAmount)();\n        return marketSellTokensInternal(orders, signatures, feeOrders, feeSignatures, remainingTakerTokenAmount);\n    }\n\n    function marketSellTokensInternal(\n        Order[] memory orders,\n        bytes[] memory signatures,\n        Order[] memory feeOrders,\n        bytes[] memory feeSignatures,\n        uint256 sellTokenAmount)\n        private\n        returns (Exchange.FillResults memory totalFillResults)\n    {\n        uint256 takerTokenBalance = sellTokenAmount;\n        address makerTokenAddress = readAddress(orders[0].makerAssetData, 0);\n\n        Exchange.FillResults memory calculatedMarketSellResults = calculateMarketSellFillResults(orders, sellTokenAmount);\n        if (calculatedMarketSellResults.takerFeePaid > 0) {\n            // Fees are required for these orders. Buy enough ZRX to cover the future market buy\n            Exchange.FillResults memory feeTokensResults = buyFeeTokensInternal(\n                feeOrders, feeSignatures, calculatedMarketSellResults.takerFeePaid);\n            takerTokenBalance = safeSub(takerTokenBalance, feeTokensResults.takerAssetFilledAmount);\n            totalFillResults.takerFeePaid = feeTokensResults.takerFeePaid;\n        }\n        // Make our market sell to buy the requested tokens with the remaining balance\n        Exchange.FillResults memory requestedTokensResults = EXCHANGE.marketSellOrders(orders, takerTokenBalance, signatures);\n        // Update our return FillResult with the market sell\n        addFillResults(totalFillResults, requestedTokensResults);\n        // Ensure the token abstraction was fair if fees were proportionally too high, we fail\n        require(isAcceptableThreshold(sellTokenAmount, requestedTokensResults.takerAssetFilledAmount),\n            UNACCEPTABLE_THRESHOLD);\n        // Transfer all tokens to msg.sender\n        transferToken(makerTokenAddress, msg.sender, requestedTokensResults.makerAssetFilledAmount);\n        return totalFillResults;\n    }\n}\n",
		"current/protocol/AssetProxy/interfaces/IAssetProxy.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./IAuthorizable.sol\";\n\ncontract IAssetProxy is\n    IAuthorizable\n{\n\n    /// @dev Transfers assets. Either succeeds or throws.\n    /// @param assetMetadata Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    function transferFrom(\n        bytes assetMetadata,\n        address from,\n        address to,\n        uint256 amount\n    )\n        external;\n    \n    /// @dev Makes multiple transfers of assets. Either succeeds or throws.\n    /// @param assetMetadata Array of byte arrays encoded for the respective asset proxy.\n    /// @param from Array of addresses to transfer assets from.\n    /// @param to Array of addresses to transfer assets to.\n    /// @param amounts Array of amounts of assets to transfer.\n    function batchTransferFrom(\n        bytes[] memory assetMetadata,\n        address[] memory from,\n        address[] memory to,\n        uint256[] memory amounts\n    )\n        public;\n\n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        view\n        returns (uint8);\n}\n\n",
		"current/protocol/AssetProxy/interfaces/IAuthorizable.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../../utils/Ownable/IOwnable.sol\";\n\ncontract IAuthorizable is\n    IOwnable\n{\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[]);\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n}\n",
		"current/protocol/Exchange/Exchange.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./MixinExchangeCore.sol\";\nimport \"./MixinSignatureValidator.sol\";\nimport \"./MixinSettlement.sol\";\nimport \"./MixinWrapperFunctions.sol\";\nimport \"./MixinAssetProxyDispatcher.sol\";\nimport \"./MixinTransactions.sol\";\nimport \"./MixinMatchOrders.sol\";\n\ncontract Exchange is\n    MixinExchangeCore,\n    MixinMatchOrders,\n    MixinSettlement,\n    MixinSignatureValidator,\n    MixinTransactions,\n    MixinAssetProxyDispatcher,\n    MixinWrapperFunctions\n{\n\n    string constant public VERSION = \"2.0.1-alpha\";\n\n    // Mixins are instantiated in the order they are inherited\n    constructor (bytes memory _zrxProxyData)\n        public\n        MixinExchangeCore()\n        MixinMatchOrders()\n        MixinSettlement(_zrxProxyData)\n        MixinSignatureValidator()\n        MixinTransactions()\n        MixinAssetProxyDispatcher()\n        MixinWrapperFunctions()\n    {}\n}\n",
		"current/protocol/Exchange/MixinAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../../utils/Ownable/Ownable.sol\";\nimport \"../AssetProxy/interfaces/IAssetProxy.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"./mixins/MAssetProxyDispatcher.sol\";\n\ncontract MixinAssetProxyDispatcher is\n    LibExchangeErrors,\n    Ownable,\n    MAssetProxyDispatcher\n{\n    // Mapping from Asset Proxy Id's to their respective Asset Proxy\n    mapping (uint8 => IAssetProxy) public assetProxies;\n\n    /// @dev Registers an asset proxy to an asset proxy id.\n    ///      An id can only be assigned to a single proxy at a given time.\n    /// @param assetProxyId Id to register`newAssetProxy` under.\n    /// @param newAssetProxy Address of new asset proxy to register, or 0x0 to unset assetProxyId.\n    /// @param oldAssetProxy Existing asset proxy to overwrite, or 0x0 if assetProxyId is currently unused.\n    function registerAssetProxy(\n        uint8 assetProxyId,\n        address newAssetProxy,\n        address oldAssetProxy\n    )\n        external\n        onlyOwner\n    {\n        // Ensure the existing asset proxy is not unintentionally overwritten\n        require(\n            oldAssetProxy == address(assetProxies[assetProxyId]),\n            OLD_ASSET_PROXY_MISMATCH\n        );\n\n        IAssetProxy assetProxy = IAssetProxy(newAssetProxy);\n\n        // Ensure that the id of newAssetProxy matches the passed in assetProxyId, unless it is being reset to 0.\n        if (newAssetProxy != address(0)) {\n            uint8 newAssetProxyId = assetProxy.getProxyId();\n            require(\n                newAssetProxyId == assetProxyId,\n                NEW_ASSET_PROXY_MISMATCH\n            );\n        }\n\n        // Add asset proxy and log registration.\n        assetProxies[assetProxyId] = assetProxy;\n        emit AssetProxySet(assetProxyId, newAssetProxy, oldAssetProxy);\n    }\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(uint8 assetProxyId)\n        external\n        view\n        returns (address)\n    {\n        address assetProxy = address(assetProxies[assetProxyId]);\n        return assetProxy;\n    }\n\n    /// @dev Forwards arguments to assetProxy and calls `transferFrom`. Either succeeds or throws.\n    /// @param assetMetadata Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param amount Amount of token to transfer.\n    function dispatchTransferFrom(\n        bytes memory assetMetadata,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        // Do nothing if no amount should be transferred.\n        if (amount > 0) {\n\n            // Lookup asset proxy\n            uint256 length = assetMetadata.length;\n            require(\n                length > 0,\n                GT_ZERO_LENGTH_REQUIRED\n            );\n            uint8 assetProxyId = uint8(assetMetadata[length - 1]);\n            IAssetProxy assetProxy = assetProxies[assetProxyId];\n\n            // transferFrom will either succeed or throw.\n            assetProxy.transferFrom(assetMetadata, from, to, amount);\n        }\n    }\n}\n",
		"current/protocol/Exchange/MixinExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./libs/LibFillResults.sol\";\nimport \"./libs/LibOrder.sol\";\nimport \"./libs/LibMath.sol\";\nimport \"./libs/LibStatus.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"./mixins/MExchangeCore.sol\";\nimport \"./mixins/MSettlement.sol\";\nimport \"./mixins/MSignatureValidator.sol\";\nimport \"./mixins/MTransactions.sol\";\n\ncontract MixinExchangeCore is\n    SafeMath,\n    LibMath,\n    LibStatus,\n    LibOrder,\n    LibFillResults,\n    LibExchangeErrors,\n    MExchangeCore,\n    MSettlement,\n    MSignatureValidator,\n    MTransactions\n{\n    // Mapping of orderHash => amount of takerAsset already bought by maker\n    mapping (bytes32 => uint256) public filled;\n\n    // Mapping of orderHash => cancelled\n    mapping (bytes32 => bool) public cancelled;\n\n    // Mapping of makerAddress => lowest salt an order can have in order to be fillable\n    // Orders with a salt less than their maker's epoch are considered cancelled\n    mapping (address => uint256) public makerEpoch;\n\n    ////// Core exchange functions //////\n\n    /// @dev Cancels all orders reated by sender with a salt less than or equal to the specified salt value.\n    /// @param salt Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 salt)\n        external\n    {\n        uint256 newMakerEpoch = salt + 1;  // makerEpoch is initialized to 0, so to cancelUpTo we need salt + 1\n        require(\n            newMakerEpoch > makerEpoch[msg.sender],  // epoch must be monotonically increasing\n            INVALID_NEW_MAKER_EPOCH\n        );\n        makerEpoch[msg.sender] = newMakerEpoch;\n        emit CancelUpTo(msg.sender, newMakerEpoch);\n    }\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (FillResults memory fillResults)\n    {\n        // Fetch order info\n        OrderInfo memory orderInfo = getOrderInfo(order);\n\n        // Fetch taker address\n        address takerAddress = getCurrentContextAddress();\n\n        // Either our context is valid or we revert\n        assertValidFill(\n            order,\n            orderInfo.orderStatus,\n            orderInfo.orderHash,\n            takerAddress,\n            orderInfo.orderTakerAssetFilledAmount,\n            takerAssetFillAmount,\n            signature\n        );\n\n        // Compute proportional fill amounts\n        uint8 status;\n        (status, fillResults) = calculateFillResults(\n            order,\n            orderInfo.orderStatus,\n            orderInfo.orderTakerAssetFilledAmount,\n            takerAssetFillAmount\n        );\n        if (status != uint8(Status.SUCCESS)) {\n            emit ExchangeStatus(uint8(status), orderInfo.orderHash);\n            return getNullFillResults();\n        }\n\n        // Settle order\n        settleOrder(order, takerAddress, fillResults);\n\n        // Update exchange internal state\n        updateFilledState(\n            order,\n            takerAddress,\n            orderInfo.orderHash,\n            orderInfo.orderTakerAssetFilledAmount,\n            fillResults\n        );\n        return fillResults;\n    }\n\n    /// @dev After calling, the order can not be filled anymore.\n    ///      Throws if order is invalid or sender does not have permission to cancel.\n    /// @param order Order to cancel. Order must be Status.FILLABLE.\n    /// @return True if the order state changed to cancelled.\n    ///         False if the order was valid, but in an\n    ///               unfillable state (see LibStatus.STATUS for order states)\n    function cancelOrder(Order memory order)\n        public\n        returns (bool)\n    {\n        // Fetch current order status\n        OrderInfo memory orderInfo = getOrderInfo(order);\n\n        // Validate context\n        assertValidCancel(order, orderInfo.orderStatus, orderInfo.orderHash);\n\n        // Perform cancel\n        return updateCancelledState(order, orderInfo.orderStatus, orderInfo.orderHash);\n    }\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo)\n    {\n        // Compute the order hash\n        orderInfo.orderHash = getOrderHash(order);\n\n        // If order.makerAssetAmount is zero, we also reject the order.\n        // While the Exchange contract handles them correctly, they create\n        // edge cases in the supporting infrastructure because they have\n        // an 'infinite' price when computed by a simple division.\n        if (order.makerAssetAmount == 0) {\n            orderInfo.orderStatus = uint8(Status.ORDER_INVALID_MAKER_ASSET_AMOUNT);\n            return orderInfo;\n        }\n\n        // If order.takerAssetAmount is zero, then the order will always\n        // be considered filled because 0 == takerAssetAmount == orderTakerAssetFilledAmount\n        // Instead of distinguishing between unfilled and filled zero taker\n        // amount orders, we choose not to support them.\n        if (order.takerAssetAmount == 0) {\n            orderInfo.orderStatus = uint8(Status.ORDER_INVALID_TAKER_ASSET_AMOUNT);\n            return orderInfo;\n        }\n\n        // Validate order expiration\n        if (block.timestamp >= order.expirationTimeSeconds) {\n            orderInfo.orderStatus = uint8(Status.ORDER_EXPIRED);\n            return orderInfo;\n        }\n\n        // Check if order has been cancelled\n        if (cancelled[orderInfo.orderHash]) {\n            orderInfo.orderStatus = uint8(Status.ORDER_CANCELLED);\n            return orderInfo;\n        }\n        if (makerEpoch[order.makerAddress] > order.salt) {\n            orderInfo.orderStatus = uint8(Status.ORDER_CANCELLED);\n            return orderInfo;\n        }\n\n        // Fetch filled amount and validate order availability\n        orderInfo.orderTakerAssetFilledAmount = filled[orderInfo.orderHash];\n        if (orderInfo.orderTakerAssetFilledAmount >= order.takerAssetAmount) {\n            orderInfo.orderStatus = uint8(Status.ORDER_FULLY_FILLED);\n            return orderInfo;\n        }\n\n        // All other statuses are ruled out: order is Fillable\n        orderInfo.orderStatus = uint8(Status.ORDER_FILLABLE);\n        return orderInfo;\n    }\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param orderStatus Status of order to be filled.\n    /// @param orderTakerAssetFilledAmount Amount of order already filled.\n    /// @param takerAssetFillAmount Desired amount of order to fill by taker.\n    /// @return status Return status of calculating fill amounts. Returns Status.SUCCESS on success.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        Order memory order,\n        uint8 orderStatus,\n        uint256 orderTakerAssetFilledAmount,\n        uint256 takerAssetFillAmount\n    )\n        public\n        pure\n        returns (\n            uint8 status,\n            FillResults memory fillResults\n        )\n    {\n        // Fill amount must be greater than 0\n        if (takerAssetFillAmount == 0) {\n            status = uint8(Status.TAKER_ASSET_FILL_AMOUNT_TOO_LOW);\n            return (status, fillResults);\n        }\n\n        // Ensure the order is fillable\n        if (orderStatus != uint8(Status.ORDER_FILLABLE)) {\n            status = orderStatus;\n            return (status, fillResults);\n        }\n\n        // Compute takerAssetFilledAmount\n        uint256 remainingTakerAssetAmount = safeSub(order.takerAssetAmount, orderTakerAssetFilledAmount);\n        uint256 takerAssetFilledAmount = min256(takerAssetFillAmount, remainingTakerAssetAmount);\n\n        // Validate fill order rounding\n        if (isRoundingError(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerAssetAmount))\n        {\n            status = uint8(Status.ROUNDING_ERROR_TOO_LARGE);\n            return (status, fillResults);\n        }\n\n        // Compute proportional transfer amounts\n        // TODO: All three are multiplied by the same fraction. This can\n        // potentially be optimized.\n        fillResults.takerAssetFilledAmount = takerAssetFilledAmount;\n        fillResults.makerAssetFilledAmount = getPartialAmount(\n            fillResults.takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerAssetAmount\n        );\n        fillResults.makerFeePaid = getPartialAmount(\n            fillResults.takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerFee\n        );\n        fillResults.takerFeePaid = getPartialAmount(\n            fillResults.takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.takerFee\n        );\n\n        status = uint8(Status.SUCCESS);\n        return (status, fillResults);\n    }\n\n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderStatus Status of order to be filled.\n    /// @param orderHash Hash of order to be filled.\n    /// @param takerAddress Address of order taker.\n    /// @param orderTakerAssetFilledAmount Amount of order already filled.\n    /// @param takerAssetFillAmount Desired amount of order to fill by taker.\n    /// @param signature Proof that the orders was created by its maker.\n    function assertValidFill(\n        Order memory order,\n        uint8 orderStatus,\n        bytes32 orderHash,\n        address takerAddress,\n        uint256 orderTakerAssetFilledAmount,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n    {\n        // Ensure order is valid\n        // An order can only be filled if its status is FILLABLE;\n        // however, only invalid statuses result in a throw.\n        // See LibStatus for a complete description of order statuses.\n        require(\n            orderStatus != uint8(Status.ORDER_INVALID_MAKER_ASSET_AMOUNT),\n            INVALID_ORDER_MAKER_ASSET_AMOUNT\n        );\n        require(\n            orderStatus != uint8(Status.ORDER_INVALID_TAKER_ASSET_AMOUNT),\n            INVALID_ORDER_TAKER_ASSET_AMOUNT\n        );\n\n        // Validate Maker signature (check only if first time seen)\n        if (orderTakerAssetFilledAmount == 0) {\n            require(\n                isValidSignature(orderHash, order.makerAddress, signature),\n                SIGNATURE_VALIDATION_FAILED\n            );\n        }\n\n        // Validate sender is allowed to fill this order\n        if (order.senderAddress != address(0)) {\n            require(\n                order.senderAddress == msg.sender,\n                INVALID_SENDER\n            );\n        }\n\n        // Validate taker is allowed to fill this order\n        if (order.takerAddress != address(0)) {\n            require(\n                order.takerAddress == takerAddress,\n                INVALID_CONTEXT\n            );\n        }\n        require(\n            takerAssetFillAmount > 0,\n            GT_ZERO_AMOUNT_REQUIRED\n        );\n    }\n\n    /// @dev Updates state with results of a fill order.\n    /// @param order that was filled.\n    /// @param takerAddress Address of taker who filled the order.\n    /// @param orderTakerAssetFilledAmount Amount of order already filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function updateFilledState(\n        Order memory order,\n        address takerAddress,\n        bytes32 orderHash,\n        uint256 orderTakerAssetFilledAmount,\n        FillResults memory fillResults\n    )\n        internal\n    {\n        // Update state\n        filled[orderHash] = safeAdd(orderTakerAssetFilledAmount, fillResults.takerAssetFilledAmount);\n\n        // Log order\n        emit Fill(\n            order.makerAddress,\n            takerAddress,\n            order.feeRecipientAddress,\n            fillResults.makerAssetFilledAmount,\n            fillResults.takerAssetFilledAmount,\n            fillResults.makerFeePaid,\n            fillResults.takerFeePaid,\n            orderHash,\n            order.makerAssetData,\n            order.takerAssetData\n        );\n    }\n\n    /// @dev Validates context for cancelOrder. Succeeds or throws.\n    /// @param order that was cancelled.\n    /// @param orderStatus Status of order that was cancelled.\n    /// @param orderHash Hash of order that was cancelled.\n    function assertValidCancel(\n        Order memory order,\n        uint8 orderStatus,\n        bytes32 orderHash\n    )\n        internal\n    {\n        // Ensure order is valid\n        // An order can only be cancelled if its status is FILLABLE;\n        // however, only invalid statuses result in a throw.\n        // See LibStatus for a complete description of order statuses.\n        require(\n            orderStatus != uint8(Status.ORDER_INVALID_MAKER_ASSET_AMOUNT),\n            INVALID_ORDER_MAKER_ASSET_AMOUNT\n        );\n        require(\n            orderStatus != uint8(Status.ORDER_INVALID_TAKER_ASSET_AMOUNT),\n            INVALID_ORDER_TAKER_ASSET_AMOUNT\n        );\n\n        // Validate transaction signed by maker\n        address makerAddress = getCurrentContextAddress();\n        require(\n            order.makerAddress == makerAddress,\n            INVALID_CONTEXT\n        );\n\n        // Validate sender is allowed to cancel this order\n        if (order.senderAddress != address(0)) {\n            require(\n                order.senderAddress == msg.sender,\n                INVALID_SENDER\n            );\n        }\n    }\n\n    /// @dev Updates state with results of cancelling an order.\n    ///      State is only updated if the order is currently fillable.\n    ///      Otherwise, updating state would have no effect.\n    /// @param order that was cancelled.\n    /// @param orderStatus Status of order that was cancelled.\n    /// @param orderHash Hash of order that was cancelled.\n    /// @return stateUpdated Returns true only if state was updated.\n    function updateCancelledState(\n        Order memory order,\n        uint8 orderStatus,\n        bytes32 orderHash\n    )\n        internal\n        returns (bool stateUpdated)\n    {\n        // Ensure order is fillable (otherwise cancelling does nothing)\n        // See LibStatus for a complete description of order statuses.\n        if (orderStatus != uint8(Status.ORDER_FILLABLE)) {\n            emit ExchangeStatus(uint8(orderStatus), orderHash);\n            stateUpdated = false;\n            return stateUpdated;\n        }\n\n        // Perform cancel\n        cancelled[orderHash] = true;\n        stateUpdated = true;\n\n        // Log cancel\n        emit Cancel(\n            order.makerAddress,\n            order.feeRecipientAddress,\n            orderHash,\n            order.makerAssetData,\n            order.takerAssetData\n        );\n\n        return stateUpdated;\n    }\n}\n",
		"current/protocol/Exchange/MixinMatchOrders.sol": "/*\n  Copyright 2018 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./mixins/MExchangeCore.sol\";\nimport \"./mixins/MMatchOrders.sol\";\nimport \"./mixins/MSettlement.sol\";\nimport \"./mixins/MTransactions.sol\";\nimport \"../../utils/SafeMath/SafeMath.sol\";\nimport \"./libs/LibMath.sol\";\nimport \"./libs/LibOrder.sol\";\nimport \"./libs/LibStatus.sol\";\nimport \"../../utils/LibBytes/LibBytes.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\n\ncontract MixinMatchOrders is\n    SafeMath,\n    LibBytes,\n    LibMath,\n    LibStatus,\n    LibOrder,\n    LibFillResults,\n    LibExchangeErrors,\n    MExchangeCore,\n    MMatchOrders,\n    MSettlement,\n    MTransactions\n{\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    /// TODO: Make this function external once supported by Solidity (See Solidity Issues #3199, #1603)\n    function matchOrders(\n        Order memory leftOrder,\n        Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Get left & right order info\n        OrderInfo memory leftOrderInfo = getOrderInfo(leftOrder);\n        OrderInfo memory rightOrderInfo = getOrderInfo(rightOrder);\n\n        // Fetch taker address\n        address takerAddress = getCurrentContextAddress();\n\n        // Either our context is valid or we revert\n        assertValidMatch(leftOrder, rightOrder);\n\n        // Compute proportional fill amounts\n        matchedFillResults = calculateMatchedFillResults(\n            leftOrder,\n            rightOrder,\n            leftOrderInfo.orderStatus,\n            rightOrderInfo.orderStatus,\n            leftOrderInfo.orderTakerAssetFilledAmount,\n            rightOrderInfo.orderTakerAssetFilledAmount\n        );\n\n        // Validate fill contexts\n        assertValidFill(\n            leftOrder,\n            leftOrderInfo.orderStatus,\n            leftOrderInfo.orderHash,\n            takerAddress,\n            leftOrderInfo.orderTakerAssetFilledAmount,\n            matchedFillResults.left.takerAssetFilledAmount,\n            leftSignature\n        );\n        assertValidFill(\n            rightOrder,\n            rightOrderInfo.orderStatus,\n            rightOrderInfo.orderHash,\n            takerAddress,\n            rightOrderInfo.orderTakerAssetFilledAmount,\n            matchedFillResults.right.takerAssetFilledAmount,\n            rightSignature\n        );\n\n        // Settle matched orders. Succeeds or throws.\n        settleMatchedOrders(\n            leftOrder,\n            rightOrder,\n            takerAddress,\n            matchedFillResults\n        );\n\n        // Update exchange state\n        updateFilledState(\n            leftOrder,\n            takerAddress,\n            leftOrderInfo.orderHash,\n            leftOrderInfo.orderTakerAssetFilledAmount,\n            matchedFillResults.left\n        );\n        updateFilledState(\n            rightOrder,\n            takerAddress,\n            rightOrderInfo.orderHash,\n            rightOrderInfo.orderTakerAssetFilledAmount,\n            matchedFillResults.right\n        );\n\n        return matchedFillResults;\n    }\n\n    /// @dev Validates context for matchOrders. Succeeds or throws.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    function assertValidMatch(\n        Order memory leftOrder,\n        Order memory rightOrder\n    )\n        internal\n    {\n        // The leftOrder maker asset must be the same as the rightOrder taker asset.\n        // TODO: Can we safely assume equality and expect a later failure otherwise?\n        require(\n            areBytesEqual(leftOrder.makerAssetData, rightOrder.takerAssetData),\n            ASSET_MISMATCH_MAKER_TAKER\n        );\n\n        // The leftOrder taker asset must be the same as the rightOrder maker asset.\n        // TODO: Can we safely assume equality and expect a later failure otherwise?\n        require(\n            areBytesEqual(leftOrder.takerAssetData, rightOrder.makerAssetData),\n            ASSET_MISMATCH_TAKER_MAKER\n        );\n\n        // Make sure there is a profitable spread.\n        // There is a profitable spread iff the cost per unit bought (OrderA.MakerAmount/OrderA.TakerAmount) for each order is greater\n        // than the profit per unit sold of the matched order (OrderB.TakerAmount/OrderB.MakerAmount).\n        // This is satisfied by the equations below:\n        // <leftOrder.makerAssetAmount> / <leftOrder.takerAssetAmount> >= <rightOrder.takerAssetAmount> / <rightOrder.makerAssetAmount>\n        // AND\n        // <rightOrder.makerAssetAmount> / <rightOrder.takerAssetAmount> >= <leftOrder.takerAssetAmount> / <leftOrder.makerAssetAmount>\n        // These equations can be combined to get the following:\n        require(\n            safeMul(leftOrder.makerAssetAmount, rightOrder.makerAssetAmount) >=\n            safeMul(leftOrder.takerAssetAmount, rightOrder.takerAssetAmount),\n            NEGATIVE_SPREAD\n        );\n    }\n\n    /// @dev Validates matched fill results. Succeeds or throws.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function assertValidMatchResults(MatchedFillResults memory matchedFillResults)\n        internal\n    {\n        // If the amount transferred from the left order is different than what is transferred, it is a rounding error amount.\n        // Ensure this difference is negligible by dividing the values with each other. The result should equal to ~1.\n        uint256 amountSpentByLeft = safeAdd(\n            matchedFillResults.right.takerAssetFilledAmount,\n            matchedFillResults.takerFillAmount\n        );\n        require(\n            !isRoundingError(\n                matchedFillResults.left.makerAssetFilledAmount,\n                amountSpentByLeft,\n                1\n            ),\n            ROUNDING_ERROR_TRANSFER_AMOUNTS\n        );\n\n        // If the amount transferred from the right order is different than what is transferred, it is a rounding error amount.\n        // Ensure this difference is negligible by dividing the values with each other. The result should equal to ~1.\n        require(\n            !isRoundingError(\n                matchedFillResults.right.makerAssetFilledAmount,\n                matchedFillResults.left.takerAssetFilledAmount,\n                1\n            ),\n            ROUNDING_ERROR_TRANSFER_AMOUNTS\n        );\n    }\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderStatus Order status of left order.\n    /// @param rightOrderStatus Order status of right order.\n    /// @param leftOrderFilledAmount Amount of left order already filled.\n    /// @param rightOrderFilledAmount Amount of right order already filled.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        Order memory leftOrder,\n        Order memory rightOrder,\n        uint8 leftOrderStatus,\n        uint8 rightOrderStatus,\n        uint256 leftOrderFilledAmount,\n        uint256 rightOrderFilledAmount\n    )\n        internal\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // We settle orders at the exchange rate of the right order.\n        // The amount saved by the left maker goes to the taker.\n        // Either the left or right order will be fully filled; possibly both.\n        // The left order is fully filled iff the right order can sell more than left can buy.\n        // That is: the amount required to fill the left order is less than or equal to\n        //          the amount we can spend from the right order:\n        //          <leftTakerAssetAmountRemaining> <= <rightTakerAssetAmountRemaining> * <rightMakerToTakerRatio>\n        //          <leftTakerAssetAmountRemaining> <= <rightTakerAssetAmountRemaining> * <rightOrder.makerAssetAmount> / <rightOrder.takerAssetAmount>\n        //          <leftTakerAssetAmountRemaining> * <rightOrder.takerAssetAmount> <= <rightTakerAssetAmountRemaining> * <rightOrder.makerAssetAmount>\n        uint256 rightTakerAssetAmountRemaining = safeSub(rightOrder.takerAssetAmount, rightOrderFilledAmount);\n        uint256 leftTakerAssetAmountRemaining = safeSub(leftOrder.takerAssetAmount, leftOrderFilledAmount);\n        uint256 leftOrderAmountToFill;\n        uint256 rightOrderAmountToFill;\n        if (\n            safeMul(leftTakerAssetAmountRemaining, rightOrder.takerAssetAmount) <=\n            safeMul(rightTakerAssetAmountRemaining, rightOrder.makerAssetAmount)\n        ) {\n            // Left order will be fully filled: maximally fill left\n            leftOrderAmountToFill = leftTakerAssetAmountRemaining;\n\n            // The right order receives an amount proportional to how much was spent.\n            // TODO: Can we ensure rounding error is in the correct direction?\n            rightOrderAmountToFill = safeGetPartialAmount(\n                rightOrder.takerAssetAmount,\n                rightOrder.makerAssetAmount,\n                leftOrderAmountToFill\n            );\n        } else {\n            // Right order will be fully filled: maximally fill right\n            rightOrderAmountToFill = rightTakerAssetAmountRemaining;\n\n            // The left order receives an amount proportional to how much was spent.\n            // TODO: Can we ensure rounding error is in the correct direction?\n            leftOrderAmountToFill = safeGetPartialAmount(\n                rightOrder.makerAssetAmount,\n                rightOrder.takerAssetAmount,\n                rightOrderAmountToFill\n            );\n        }\n\n        // Calculate fill results for left order\n        uint8 status;\n        (status, matchedFillResults.left) = calculateFillResults(\n            leftOrder,\n            leftOrderStatus,\n            leftOrderFilledAmount,\n            leftOrderAmountToFill\n        );\n        require(\n            status == uint8(Status.SUCCESS),\n            FAILED_TO_CALCULATE_FILL_RESULTS_FOR_LEFT_ORDER\n        );\n\n        // Calculate fill results for right order\n        (status, matchedFillResults.right) = calculateFillResults(\n            rightOrder,\n            rightOrderStatus,\n            rightOrderFilledAmount,\n            rightOrderAmountToFill\n        );\n        require(\n            status == uint8(Status.SUCCESS),\n            FAILED_TO_CALCULATE_FILL_RESULTS_FOR_RIGHT_ORDER\n        );\n\n        // Calculate amount given to taker\n        matchedFillResults.takerFillAmount = safeSub(\n            matchedFillResults.left.makerAssetFilledAmount,\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n\n        // Validate the fill results\n        assertValidMatchResults(matchedFillResults);\n\n        // Return fill results\n        return matchedFillResults;\n    }\n}\n",
		"current/protocol/Exchange/MixinSettlement.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./mixins/MSettlement.sol\";\nimport \"./mixins/MAssetProxyDispatcher.sol\";\nimport \"./libs/LibOrder.sol\";\nimport \"./libs/LibMath.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"./libs/LibFillResults.sol\";\nimport \"./mixins/MMatchOrders.sol\";\n\ncontract MixinSettlement is\n    LibMath,\n    LibFillResults,\n    LibExchangeErrors,\n    MMatchOrders,\n    MSettlement,\n    MAssetProxyDispatcher\n{\n    // ZRX metadata used for fee transfers.\n    // This will be constant throughout the life of the Exchange contract,\n    // since ZRX will always be transferred via the ERC20 AssetProxy.\n    bytes internal ZRX_PROXY_DATA;\n\n    /// @dev Gets the ZRX metadata used for fee transfers.\n    function zrxProxyData()\n        external\n        view\n        returns (bytes memory)\n    {\n        return ZRX_PROXY_DATA;\n    }\n\n    /// TODO: _zrxProxyData should be a constant in production.\n    /// @dev Constructor sets the metadata that will be used for paying ZRX fees.\n    /// @param _zrxProxyData Byte array containing ERC20 proxy id concatenated with address of ZRX.\n    constructor (bytes memory _zrxProxyData)\n        public\n    {\n        ZRX_PROXY_DATA = _zrxProxyData;\n    }\n\n    /// @dev Settles an order by transferring assets between counterparties.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAddress Address selling takerAsset and buying makerAsset.\n    /// @param fillResults Amounts to be filled and fees paid by maker and taker.\n    function settleOrder(\n        LibOrder.Order memory order,\n        address takerAddress,\n        FillResults memory fillResults\n    )\n        internal\n    {\n        dispatchTransferFrom(\n            order.makerAssetData,\n            order.makerAddress,\n            takerAddress,\n            fillResults.makerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            order.takerAssetData,\n            takerAddress,\n            order.makerAddress,\n            fillResults.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            ZRX_PROXY_DATA,\n            order.makerAddress,\n            order.feeRecipientAddress,\n            fillResults.makerFeePaid\n        );\n        dispatchTransferFrom(\n            ZRX_PROXY_DATA,\n            takerAddress,\n            order.feeRecipientAddress,\n            fillResults.takerFeePaid\n        );\n    }\n\n    /// @dev Settles matched order by transferring appropriate funds between order makers, taker, and fee recipient.\n    /// @param leftOrder First matched order.\n    /// @param rightOrder Second matched order.\n    /// @param takerAddress Address that matched the orders. The taker receives the spread between orders as profit.\n    /// @param matchedFillResults Struct holding amounts to transfer between makers, taker, and fee recipients.\n    function settleMatchedOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        address takerAddress,\n        MatchedFillResults memory matchedFillResults\n    )\n        internal\n    {\n        // Order makers and taker\n        dispatchTransferFrom(\n            leftOrder.makerAssetData,\n            leftOrder.makerAddress,\n            rightOrder.makerAddress,\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            rightOrder.makerAssetData,\n            rightOrder.makerAddress,\n            leftOrder.makerAddress,\n            matchedFillResults.left.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            leftOrder.makerAssetData,\n            leftOrder.makerAddress,\n            takerAddress,\n            matchedFillResults.takerFillAmount\n        );\n\n        // Maker fees\n        dispatchTransferFrom(\n            ZRX_PROXY_DATA,\n            leftOrder.makerAddress,\n            leftOrder.feeRecipientAddress,\n            matchedFillResults.left.makerFeePaid\n        );\n        dispatchTransferFrom(\n            ZRX_PROXY_DATA,\n            rightOrder.makerAddress,\n            rightOrder.feeRecipientAddress,\n            matchedFillResults.right.makerFeePaid\n        );\n\n        // Taker fees\n        if (leftOrder.feeRecipientAddress == rightOrder.feeRecipientAddress) {\n            dispatchTransferFrom(\n                ZRX_PROXY_DATA,\n                takerAddress,\n                leftOrder.feeRecipientAddress,\n                safeAdd(\n                    matchedFillResults.left.takerFeePaid,\n                    matchedFillResults.right.takerFeePaid\n                )\n            );\n        } else {\n            dispatchTransferFrom(\n                ZRX_PROXY_DATA,\n                takerAddress,\n                leftOrder.feeRecipientAddress,\n                matchedFillResults.left.takerFeePaid\n            );\n            dispatchTransferFrom(\n                ZRX_PROXY_DATA,\n                takerAddress,\n                rightOrder.feeRecipientAddress,\n                matchedFillResults.right.takerFeePaid\n            );\n        }\n    }\n}\n",
		"current/protocol/Exchange/MixinSignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"./mixins/MSignatureValidator.sol\";\nimport \"./mixins/MTransactions.sol\";\nimport \"./interfaces/IWallet.sol\";\nimport \"./interfaces/IValidator.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\nimport \"../../utils/LibBytes/LibBytes.sol\";\n\ncontract MixinSignatureValidator is\n    LibBytes,\n    LibExchangeErrors,\n    MSignatureValidator,\n    MTransactions\n{\n\n    // Mapping of hash => signer => signed\n    mapping (bytes32 => mapping (address => bool)) public preSigned;\n\n    // Mapping of signer => validator => approved\n    mapping (address => mapping (address => bool)) public allowedValidators;\n\n    /// @dev Approves a hash on-chain using any valid signature type.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param signer Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    function preSign(\n        bytes32 hash,\n        address signer,\n        bytes signature\n    )\n        external\n    {\n        require(\n            isValidSignature(hash, signer, signature),\n            SIGNATURE_VALIDATION_FAILED\n        );\n        preSigned[hash][signer] = true;\n    }\n\n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validator Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validator,\n        bool approval\n    )\n        external\n    {\n        address signer = getCurrentContextAddress();\n        allowedValidators[signer][validator] = approval;\n    }\n\n    /// @dev Verifies that a hash has been signed by the given signer.\n    /// @param hash Any 32 byte hash.\n    /// @param signer Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return True if the address recovered from the provided signature matches the input signer address.\n    function isValidSignature(\n        bytes32 hash,\n        address signer,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid)\n    {\n        // TODO: Domain separation: make hash depend on role. (Taker sig should not be valid as maker sig, etc.)\n        require(\n            signature.length >= 1,\n            INVALID_SIGNATURE_LENGTH\n        );\n\n        // Pop last byte off of signature byte array.\n        SignatureType signatureType = SignatureType(uint8(popByte(signature)));\n\n        // Variables are not scoped in Solidity.\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        address recovered;\n        \n        // Always illegal signature.\n        // This is always an implicit option since a signer can create a\n        // signature array with invalid type or length. We may as well make\n        // it an explicit option. This aids testing and analysis. It is\n        // also the initialization value for the enum type.\n        if (signatureType == SignatureType.Illegal) {\n            revert(ILLEGAL_SIGNATURE_TYPE);\n\n        // Always invalid signature.\n        // Like Illegal, this is always implicitly available and therefore\n        // offered explicitly. It can be implicitly created by providing\n        // a correctly formatted but incorrect signature.\n        } else if (signatureType == SignatureType.Invalid) {\n            require(\n                signature.length == 0,\n                INVALID_SIGNATURE_LENGTH\n            );\n            isValid = false;\n            return isValid;\n\n        // Signature using EIP712\n        } else if (signatureType == SignatureType.EIP712) {\n            require(\n                signature.length == 65,\n                INVALID_SIGNATURE_LENGTH\n            );\n            v = uint8(signature[0]);\n            r = readBytes32(signature, 1);\n            s = readBytes32(signature, 33);\n            recovered = ecrecover(hash, v, r, s);\n            isValid = signer == recovered;\n            return isValid;\n\n        // Signed using web3.eth_sign\n        } else if (signatureType == SignatureType.EthSign) {\n            require(\n                signature.length == 65,\n                INVALID_SIGNATURE_LENGTH\n            );\n            v = uint8(signature[0]);\n            r = readBytes32(signature, 1);\n            s = readBytes32(signature, 33);\n            recovered = ecrecover(\n                keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash),\n                v,\n                r,\n                s\n            );\n            isValid = signer == recovered;\n            return isValid;\n\n        // Implicitly signed by caller.\n        // The signer has initiated the call. In the case of non-contract\n        // accounts it means the transaction itself was signed.\n        // Example: let's say for a particular operation three signatures\n        // A, B and C are required. To submit the transaction, A and B can\n        // give a signature to C, who can then submit the transaction using\n        // `Caller` for his own signature. Or A and C can sign and B can\n        // submit using `Caller`. Having `Caller` allows this flexibility.\n        } else if (signatureType == SignatureType.Caller) {\n            require(\n                signature.length == 0,\n                INVALID_SIGNATURE_LENGTH\n            );\n            isValid = signer == msg.sender;\n            return isValid;\n\n        // Signature verified by wallet contract.\n        // If used with an order, the maker of the order is the wallet contract.\n        } else if (signatureType == SignatureType.Wallet) {\n            isValid = IWallet(signer).isValidSignature(hash, signature);\n            return isValid;\n\n        // Signature verified by validator contract.\n        // If used with an order, the maker of the order can still be an EOA.\n        // A signature using this type should be encoded as:\n        // | Offset   | Length | Contents                        |\n        // | 0x00     | x      | Signature to validate           |\n        // | 0x00 + x | 20     | Address of validator contract   |\n        // | 0x14 + x | 1      | Signature type is always \"\\x06\" |\n        } else if (signatureType == SignatureType.Validator) {\n            // Pop last 20 bytes off of signature byte array.\n            address validator = popAddress(signature);\n            // Ensure signer has approved validator.\n            if (!allowedValidators[signer][validator]) {\n                return false;\n            }\n            isValid = IValidator(validator).isValidSignature(\n                hash,\n                signer,\n                signature\n            );\n            return isValid;\n\n        // Signer signed hash previously using the preSign function.\n        } else if (signatureType == SignatureType.PreSigned) {\n            isValid = preSigned[hash][signer];\n            return isValid;\n\n        // Signature from Trezor hardware wallet.\n        // It differs from web3.eth_sign in the encoding of message length\n        // (Bitcoin varint encoding vs ascii-decimal, the latter is not\n        // self-terminating which leads to ambiguities).\n        // See also:\n        // https://en.bitcoin.it/wiki/Protocol_documentation#Variable_length_integer\n        // https://github.com/trezor/trezor-mcu/blob/master/firmware/ethereum.c#L602\n        // https://github.com/trezor/trezor-mcu/blob/master/firmware/crypto.c#L36\n        } else if (signatureType == SignatureType.Trezor) {\n            require(\n                signature.length == 65,\n                INVALID_SIGNATURE_LENGTH\n            );\n            v = uint8(signature[0]);\n            r = readBytes32(signature, 1);\n            s = readBytes32(signature, 33);\n            recovered = ecrecover(\n                keccak256(\"\\x19Ethereum Signed Message:\\n\\x41\", hash),\n                v,\n                r,\n                s\n            );\n            isValid = signer == recovered;\n            return isValid;\n\n        // Signer signed hash previously using the preSign function\n        } else if (signatureType == SignatureType.PreSigned) {\n            isValid = preSigned[hash][signer];\n            return isValid;\n        }\n\n        // Anything else is illegal (We do not return false because\n        // the signature may actually be valid, just not in a format\n        // that we currently support. In this case returning false\n        // may lead the caller to incorrectly believe that the\n        // signature was invalid.)\n        revert(UNSUPPORTED_SIGNATURE_TYPE);\n    }\n}\n",
		"current/protocol/Exchange/MixinTransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\n\nimport \"./mixins/MSignatureValidator.sol\";\nimport \"./mixins/MTransactions.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\n\ncontract MixinTransactions is\n    LibExchangeErrors,\n    MSignatureValidator,\n    MTransactions\n{\n\n    // Mapping of transaction hash => executed\n    // This prevents transactions from being executed more than once.\n    mapping (bytes32 => bool) public transactions;\n\n    // Address of current transaction signer\n    address public currentContextAddress;\n\n    /// @dev Executes an exchange method call in the context of signer.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signer Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @param signature Proof of signer transaction by signer.\n    function executeTransaction(\n        uint256 salt,\n        address signer,\n        bytes data,\n        bytes signature\n    )\n        external\n    {\n        // Prevent reentrancy\n        require(\n            currentContextAddress == address(0),\n            REENTRANCY_NOT_ALLOWED\n        );\n\n        // Calculate transaction hash\n        bytes32 transactionHash = keccak256(\n            address(this),\n            signer,\n            salt,\n            data\n        );\n\n        // Validate transaction has not been executed\n        require(\n            !transactions[transactionHash],\n            DUPLICATE_TRANSACTION_HASH\n        );\n\n        // TODO: is SignatureType.Caller necessary if we make this check?\n        if (signer != msg.sender) {\n            // Validate signature\n            require(\n                isValidSignature(transactionHash, signer, signature),\n                SIGNATURE_VALIDATION_FAILED\n            );\n\n            // Set the current transaction signer\n            currentContextAddress = signer;\n        }\n\n        // Execute transaction\n        transactions[transactionHash] = true;\n        require(\n            address(this).delegatecall(data),\n            TRANSACTION_EXECUTION_FAILED\n        );\n\n        // Reset current transaction signer\n        // TODO: Check if gas is paid when currentContextAddress is already 0.\n        currentContextAddress = address(0);\n    }\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function getCurrentContextAddress()\n        internal\n        view\n        returns (address)\n    {\n        address contextAddress = currentContextAddress == address(0) ? msg.sender : currentContextAddress;\n        return contextAddress;\n    }\n}\n",
		"current/protocol/Exchange/MixinWrapperFunctions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/LibBytes/LibBytes.sol\";\nimport \"./mixins/MExchangeCore.sol\";\nimport \"./libs/LibMath.sol\";\nimport \"./libs/LibOrder.sol\";\nimport \"./libs/LibFillResults.sol\";\nimport \"./libs/LibExchangeErrors.sol\";\n\ncontract MixinWrapperFunctions is\n    SafeMath,\n    LibBytes,\n    LibMath,\n    LibOrder,\n    LibFillResults,\n    LibExchangeErrors,\n    MExchangeCore\n{\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature)\n        public\n        returns (FillResults memory fillResults)\n    {\n        fillResults = fillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        require(\n            fillResults.takerAssetFilledAmount == takerAssetFillAmount,\n            COMPLETE_FILL_FAILED\n        );\n        return fillResults;\n    }\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderNoThrow(\n        Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature)\n        public\n        returns (FillResults memory fillResults)\n    {\n        // We need to call MExchangeCore.fillOrder using a delegatecall in\n        // assembly so that we can intercept a call that throws. For this, we\n        // need the input encoded in memory in the Ethereum ABIv2 format [1].\n\n        // | Area     | Offset | Length  | Contents                                    |\n        // | -------- |--------|---------|-------------------------------------------- |\n        // | Header   | 0x00   | 4       | function selector                           |\n        // | Params   |        | 3 * 32  | function parameters:                        |\n        // |          | 0x00   |         |   1. offset to order (*)                    |\n        // |          | 0x20   |         |   2. takerAssetFillAmount                   |\n        // |          | 0x40   |         |   3. offset to signature (*)                |\n        // | Data     |        | 12 * 32 | order:                                      |\n        // |          | 0x000  |         |   1.  senderAddress                         |\n        // |          | 0x020  |         |   2.  makerAddress                          |\n        // |          | 0x040  |         |   3.  takerAddress                          |\n        // |          | 0x060  |         |   4.  feeRecipientAddress                   |\n        // |          | 0x080  |         |   5.  makerAssetAmount                      |\n        // |          | 0x0A0  |         |   6.  takerAssetAmount                      |\n        // |          | 0x0C0  |         |   7.  makerFeeAmount                        |\n        // |          | 0x0E0  |         |   8.  takerFeeAmount                        |\n        // |          | 0x100  |         |   9.  expirationTimeSeconds                 |\n        // |          | 0x120  |         |   10. salt                                  |\n        // |          | 0x140  |         |   11. Offset to makerAssetProxyMetadata (*) |\n        // |          | 0x160  |         |   12. Offset to takerAssetProxyMetadata (*) |\n        // |          | 0x180  | 32      | makerAssetProxyMetadata Length              |\n        // |          | 0x1A0  | **      | makerAssetProxyMetadata Contents            |\n        // |          | 0x1C0  | 32      | takerAssetProxyMetadata Length              |\n        // |          | 0x1E0  | **      | takerAssetProxyMetadata Contents            |\n        // |          | 0x200  | 32      | signature Length                            |\n        // |          | 0x220  | **      | signature Contents                          |\n\n        // * Offsets are calculated from the beginning of the current area: Header, Params, Data:\n        //     An offset stored in the Params area is calculated from the beginning of the Params section.\n        //     An offset stored in the Data area is calculated from the beginning of the Data section.\n\n        // ** The length of dynamic array contents are stored in the field immediately preceeding the contents.\n\n        // [1]: https://solidity.readthedocs.io/en/develop/abi-spec.html\n\n        bytes4 fillOrderSelector = this.fillOrder.selector;\n\n        assembly {\n\n            // Areas below may use the following variables:\n            //   1. <area>Start   -- Start of this area in memory\n            //   2. <area>End     -- End of this area in memory. This value may\n            //                       be precomputed (before writing contents),\n            //                       or it may be computed as contents are written.\n            //   3. <area>Offset  -- Current offset into area. If an area's End\n            //                       is precomputed, this variable tracks the\n            //                       offsets of contents as they are written.\n\n            /////// Setup Header Area ///////\n            // Load free memory pointer\n            let headerAreaStart := mload(0x40)\n            mstore(headerAreaStart, fillOrderSelector)\n            let headerAreaEnd := add(headerAreaStart, 0x4)\n\n            /////// Setup Params Area ///////\n            // This area is preallocated and written to later.\n            // This is because we need to fill in offsets that have not yet been calculated.\n            let paramsAreaStart := headerAreaEnd\n            let paramsAreaEnd := add(paramsAreaStart, 0x60)\n            let paramsAreaOffset := paramsAreaStart\n\n            /////// Setup Data Area ///////\n            let dataAreaStart := paramsAreaEnd\n            let dataAreaEnd := dataAreaStart\n\n            // Offset from the source data we're reading from\n            let sourceOffset := order\n            // arrayLenBytes and arrayLenWords track the length of a dynamically-allocated bytes array.\n            let arrayLenBytes := 0\n            let arrayLenWords := 0\n\n            /////// Write order Struct ///////\n            // Write memory location of Order, relative to the start of the\n            // parameter list, then increment the paramsAreaOffset respectively.\n            mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n            paramsAreaOffset := add(paramsAreaOffset, 0x20)\n\n            // Write values for each field in the order\n            // It would be nice to use a loop, but we save on gas by writing\n            // the stores sequentially.\n            mstore(dataAreaEnd, mload(sourceOffset))                            // makerAddress\n            mstore(add(dataAreaEnd, 0x20), mload(add(sourceOffset, 0x20)))      // takerAddress\n            mstore(add(dataAreaEnd, 0x40), mload(add(sourceOffset, 0x40)))      // feeRecipientAddress\n            mstore(add(dataAreaEnd, 0x60), mload(add(sourceOffset, 0x60)))      // senderAddress\n            mstore(add(dataAreaEnd, 0x80), mload(add(sourceOffset, 0x80)))      // makerAssetAmount\n            mstore(add(dataAreaEnd, 0xA0), mload(add(sourceOffset, 0xA0)))      // takerAssetAmount\n            mstore(add(dataAreaEnd, 0xC0), mload(add(sourceOffset, 0xC0)))      // makerFeeAmount\n            mstore(add(dataAreaEnd, 0xE0), mload(add(sourceOffset, 0xE0)))      // takerFeeAmount\n            mstore(add(dataAreaEnd, 0x100), mload(add(sourceOffset, 0x100)))    // expirationTimeSeconds\n            mstore(add(dataAreaEnd, 0x120), mload(add(sourceOffset, 0x120)))    // salt\n            mstore(add(dataAreaEnd, 0x140), mload(add(sourceOffset, 0x140)))    // Offset to makerAssetProxyMetadata\n            mstore(add(dataAreaEnd, 0x160), mload(add(sourceOffset, 0x160)))    // Offset to takerAssetProxyMetadata\n            dataAreaEnd := add(dataAreaEnd, 0x180)\n            sourceOffset := add(sourceOffset, 0x180)\n\n            // Write offset to <order.makerAssetProxyMetadata>\n            mstore(add(dataAreaStart, mul(10, 0x20)), sub(dataAreaEnd, dataAreaStart))\n\n            // Calculate length of <order.makerAssetProxyMetadata>\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of <order.makerAssetProxyMetadata>\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of <order.makerAssetProxyMetadata>\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            // Write offset to <order.takerAssetProxyMetadata>\n            mstore(add(dataAreaStart, mul(11, 0x20)), sub(dataAreaEnd, dataAreaStart))\n\n            // Calculate length of <order.takerAssetProxyMetadata>\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of <order.takerAssetProxyMetadata>\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of  <order.takerAssetProxyMetadata>\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            /////// Write takerAssetFillAmount ///////\n            mstore(paramsAreaOffset, takerAssetFillAmount)\n            paramsAreaOffset := add(paramsAreaOffset, 0x20)\n\n            /////// Write signature ///////\n            // Write offset to paramsArea\n            mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n\n            // Calculate length of signature\n            sourceOffset := signature\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of signature\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of signature\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            // Execute delegatecall\n            let success := delegatecall(\n                gas,                                // forward all gas, TODO: look into gas consumption of assert/throw\n                address,                            // call address of this contract\n                headerAreaStart,                    // pointer to start of input\n                sub(dataAreaEnd, headerAreaStart),  // length of input\n                headerAreaStart,                    // write output over input\n                128                                 // output size is 128 bytes\n            )\n            switch success\n            case 0 {\n                mstore(fillResults, 0)\n                mstore(add(fillResults, 32), 0)\n                mstore(add(fillResults, 64), 0)\n                mstore(add(fillResults, 96), 0)\n            }\n            case 1 {\n                mstore(fillResults, mload(headerAreaStart))\n                mstore(add(fillResults, 32), mload(add(headerAreaStart, 32)))\n                mstore(add(fillResults, 64), mload(add(headerAreaStart, 64)))\n                mstore(add(fillResults, 96), mload(add(headerAreaStart, 96)))\n            }\n        }\n        return fillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    function batchFillOrders(\n        Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures)\n        public\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            fillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrKill.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    function batchFillOrKillOrders(\n        Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures)\n        public\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            fillOrKillOrder(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n    }\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    function batchFillOrdersNoThrow(\n        Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures)\n        public\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n        }\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrders(\n        Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures)\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n\n            // Token being sold by taker must be the same for each order\n            // TODO: optimize by only using takerAssetData for first order.\n            require(\n                areBytesEqual(orders[i].takerAssetData, orders[0].takerAssetData),\n                ASSET_DATA_MISMATCH\n            );\n\n            // Calculate the remaining amount of takerAsset to sell\n            uint256 remainingTakerAssetFillAmount = safeSub(takerAssetFillAmount, totalFillResults.takerAssetFilledAmount);\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrder(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of takerAsset has been sold\n            if (totalFillResults.takerAssetFilledAmount == takerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures)\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n\n            // Token being sold by taker must be the same for each order\n            // TODO: optimize by only using takerAssetData for first order.\n            require(\n                areBytesEqual(orders[i].takerAssetData, orders[0].takerAssetData),\n                ASSET_DATA_MISMATCH\n            );\n\n            // Calculate the remaining amount of takerAsset to sell\n            uint256 remainingTakerAssetFillAmount = safeSub(takerAssetFillAmount, totalFillResults.takerAssetFilledAmount);\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderNoThrow(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of takerAsset has been sold\n            if (totalFillResults.takerAssetFilledAmount == takerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrders(\n        Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures)\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n\n            // Token being bought by taker must be the same for each order\n            // TODO: optimize by only using makerAssetData for first order.\n            require(\n                areBytesEqual(orders[i].makerAssetData, orders[0].makerAssetData),\n                ASSET_DATA_MISMATCH\n            );\n\n            // Calculate the remaining amount of makerAsset to buy\n            uint256 remainingMakerAssetFillAmount = safeSub(makerAssetFillAmount, totalFillResults.makerAssetFilledAmount);\n\n            // Convert the remaining amount of makerAsset to buy into remaining amount\n            // of takerAsset to sell, assuming entire amount can be sold in the current order\n            uint256 remainingTakerAssetFillAmount = getPartialAmount(\n                orders[i].takerAssetAmount,\n                orders[i].makerAssetAmount,\n                remainingMakerAssetFillAmount\n            );\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrder(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of makerAsset has been bought\n            if (totalFillResults.makerAssetFilledAmount == makerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures)\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n\n            // Token being bought by taker must be the same for each order\n            // TODO: optimize by only using makerAssetData for first order.\n            require(\n                areBytesEqual(orders[i].makerAssetData, orders[0].makerAssetData),\n                ASSET_DATA_MISMATCH\n            );\n\n            // Calculate the remaining amount of makerAsset to buy\n            uint256 remainingMakerAssetFillAmount = safeSub(makerAssetFillAmount, totalFillResults.makerAssetFilledAmount);\n\n            // Convert the remaining amount of makerAsset to buy into remaining amount\n            // of takerAsset to sell, assuming entire amount can be sold in the current order\n            uint256 remainingTakerAssetFillAmount = getPartialAmount(\n                orders[i].takerAssetAmount,\n                orders[i].makerAssetAmount,\n                remainingMakerAssetFillAmount\n            );\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderNoThrow(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of makerAsset has been bought\n            if (totalFillResults.makerAssetFilledAmount == makerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously cancels multiple orders in a single transaction.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(Order[] memory orders)\n        public\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            cancelOrder(orders[i]);\n        }\n    }\n}\n",
		"current/protocol/Exchange/interfaces/IAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract IAssetProxyDispatcher {\n\n    /// @dev Registers an asset proxy to an asset proxy id.\n    ///      An id can only be assigned to a single proxy at a given time.\n    /// @param assetProxyId Id to register`newAssetProxy` under.\n    /// @param newAssetProxy Address of new asset proxy to register, or 0x0 to unset assetProxyId.\n    /// @param oldAssetProxy Existing asset proxy to overwrite, or 0x0 if assetProxyId is currently unused.\n    function registerAssetProxy(\n        uint8 assetProxyId,\n        address newAssetProxy,\n        address oldAssetProxy)\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(uint8 assetProxyId)\n        external\n        view\n        returns (address);\n}\n",
		"current/protocol/Exchange/interfaces/IExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\n\ncontract IExchangeCore {\n\n    /// @dev Cancels all orders reated by sender with a salt less than or equal to the specified salt value.\n    /// @param salt Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 salt)\n        external;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature)\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    /// @return True if the order state changed to cancelled.\n    ///         False if the transaction was already cancelled or expired.\n    function cancelOrder(LibOrder.Order memory order)\n        public\n        returns (bool);\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param orderStatus Status of order to be filled.\n    /// @param orderTakerAssetFilledAmount Amount of order already filled.\n    /// @param takerAssetFillAmount Desired amount of order to fill by taker.\n    /// @return status Return status of calculating fill amounts. Returns Status.SUCCESS on success.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        LibOrder.Order memory order,\n        uint8 orderStatus,\n        uint256 orderTakerAssetFilledAmount,\n        uint256 takerAssetFillAmount\n    )\n        public\n        pure\n        returns (\n            uint8 status,\n            LibFillResults.FillResults memory fillResults\n        );\n}\n",
		"current/protocol/Exchange/interfaces/IMatchOrders.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\n\ncontract IMatchOrders {\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    /// TODO: Make this function external once supported by Solidity (See Solidity Issues #3199, #1603)\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n",
		"current/protocol/Exchange/interfaces/ISignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract ISignatureValidator {\n\n    /// @dev Approves a hash on-chain using any valid signature type.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param signer Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    function preSign(\n        bytes32 hash,\n        address signer,\n        bytes signature\n    )\n        external;\n    \n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validator Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validator,\n        bool approval\n    )\n        external;\n}\n",
		"current/protocol/Exchange/interfaces/ITransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\n\ncontract ITransactions {\n\n    /// @dev Executes an exchange method call in the context of signer.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signer Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @param signature Proof of signer transaction by signer.\n    function executeTransaction(\n        uint256 salt,\n        address signer,\n        bytes data,\n        bytes signature)\n        external;\n}\n",
		"current/protocol/Exchange/interfaces/IValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.23;\n\ncontract IValidator {\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signer Address that should have signed the given hash.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        address signer,\n        bytes signature\n    )\n        external\n        view\n        returns (bool isValid);\n}\n",
		"current/protocol/Exchange/interfaces/IWallet.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract IWallet {\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        bytes signature\n    )\n        external\n        view\n        returns (bool isValid);\n}\n",
		"current/protocol/Exchange/libs/LibExchangeErrors.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibExchangeErrors {\n\n    // Core revert reasons\n    string constant GT_ZERO_AMOUNT_REQUIRED = \"Amount must be greater than 0.\";\n    string constant SIGNATURE_VALIDATION_FAILED = \"Signature validation failed.\";\n    string constant INVALID_SENDER = \"Invalid `msg.sender`.\";\n    string constant INVALID_CONTEXT = \"Function called in an invalid context.\";\n    string constant INVALID_NEW_MAKER_EPOCH = \"Specified salt must be greater than or equal to existing makerEpoch.\";\n\n    // Order revert reasons\n    string constant INVALID_ORDER_TAKER_ASSET_AMOUNT = \"Invalid order taker asset amount: expected a non-zero value.\";\n    string constant INVALID_ORDER_MAKER_ASSET_AMOUNT = \"Invalid order maker asset amount: expected a non-zero value.\";\n\n    // Transaction revert reasons\n    string constant REENTRANCY_NOT_ALLOWED = \"`executeTransaction` is not allowed to call itself recursively.\";\n    string constant DUPLICATE_TRANSACTION_HASH = \"Transaction has already been executed.\";\n    string constant TRANSACTION_EXECUTION_FAILED = \"Transaction execution failed.\";\n\n    // Wrapper revert reasons\n    string constant COMPLETE_FILL_FAILED = \"Desired fill amount could not be completely filled.\";\n    string constant ASSET_DATA_MISMATCH = \"Asset data must be the same for each order.\";\n\n    // Asset proxy dispatcher revert reasons\n    string constant GT_ZERO_LENGTH_REQUIRED = \"Length must be greater than 0.\";\n    string constant OLD_ASSET_PROXY_MISMATCH = \"Old asset proxy does not match asset proxy at given id.\";\n    string constant NEW_ASSET_PROXY_MISMATCH = \"New asset proxy id does not match given id.\";\n\n    // Signature validator revert reasons\n    string constant INVALID_SIGNATURE_LENGTH = \"Invalid signature length.\";\n    string constant ILLEGAL_SIGNATURE_TYPE = \"Illegal signature type.\";\n    string constant UNSUPPORTED_SIGNATURE_TYPE = \"Unsupported signature type.\";\n\n    // Order matching revert reasons\n    string constant ASSET_MISMATCH_MAKER_TAKER = \"Left order maker asset is different from right order taker asset.\";\n    string constant ASSET_MISMATCH_TAKER_MAKER = \"Left order taker asset is different from right order maker asset.\";\n    string constant NEGATIVE_SPREAD = \"Matched orders must have a positive spread.\";\n    string constant MISCALCULATED_TRANSFER_AMOUNTS = \"A miscalculation occurred: the left maker would receive more than the right maker would spend.\";\n    string constant ROUNDING_ERROR_TRANSFER_AMOUNTS = \"A rounding error occurred when calculating transfer amounts for matched orders.\";\n    string constant FAILED_TO_CALCULATE_FILL_RESULTS_FOR_LEFT_ORDER = \"Failed to calculate fill results for left order.\";\n    string constant FAILED_TO_CALCULATE_FILL_RESULTS_FOR_RIGHT_ORDER = \"Failed to calculate fill results for right order.\";\n}\n",
		"current/protocol/Exchange/libs/LibFillResults.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../../../utils/SafeMath/SafeMath.sol\";\n\ncontract LibFillResults is\n    SafeMath\n{\n\n    struct FillResults {\n        uint256 makerAssetFilledAmount;\n        uint256 takerAssetFilledAmount;\n        uint256 makerFeePaid;\n        uint256 takerFeePaid;\n    }\n\n    struct MatchedFillResults {\n        LibFillResults.FillResults left;\n        LibFillResults.FillResults right;\n        uint256 takerFillAmount;\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    ///      Modifies the first FillResults instance specified.\n    /// @param totalFillResults Fill results instance that will be added onto.\n    /// @param singleFillResults Fill results instance that will be added to totalFillResults.\n    function addFillResults(FillResults memory totalFillResults, FillResults memory singleFillResults)\n        internal\n        pure\n    {\n        totalFillResults.makerAssetFilledAmount = safeAdd(totalFillResults.makerAssetFilledAmount, singleFillResults.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = safeAdd(totalFillResults.takerAssetFilledAmount, singleFillResults.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = safeAdd(totalFillResults.makerFeePaid, singleFillResults.makerFeePaid);\n        totalFillResults.takerFeePaid = safeAdd(totalFillResults.takerFeePaid, singleFillResults.takerFeePaid);\n    }\n\n    /// @dev Returns a null fill results struct\n    function getNullFillResults()\n        internal\n        pure\n        returns (FillResults memory)\n    {\n        // returns zeroed out FillResults instance\n        return FillResults({\n            makerAssetFilledAmount: 0,\n            takerAssetFilledAmount: 0,\n            makerFeePaid: 0,\n            takerFeePaid: 0\n        });\n    }\n}\n",
		"current/protocol/Exchange/libs/LibMath.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../../../utils/SafeMath/SafeMath.sol\";\n\ncontract LibMath is\n    SafeMath\n{\n    string constant ROUNDING_ERROR_ON_PARTIAL_AMOUNT = \"A rounding error occurred when calculating partial transfer amounts.\";\n\n    /// @dev Calculates partial value given a numerator and denominator.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target.\n    function getPartialAmount(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target)\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = safeDiv(\n            safeMul(numerator, target),\n            denominator\n        );\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator.\n    ///      Throws if there is a rounding error.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target.\n    function safeGetPartialAmount(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target)\n        internal pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            !isRoundingError(numerator, denominator, target),\n            ROUNDING_ERROR_ON_PARTIAL_AMOUNT\n        );\n        return getPartialAmount(numerator, denominator, target);\n    }\n\n    /// @dev Checks if rounding error > 0.1%.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target)\n        internal\n        pure\n        returns (bool isError)\n    {\n        uint256 remainder = mulmod(target, numerator, denominator);\n        if (remainder == 0) {\n            return false; // No rounding error.\n        }\n\n        uint256 errPercentageTimes1000000 = safeDiv(\n            safeMul(remainder, 1000000),\n            safeMul(numerator, target)\n        );\n        isError = errPercentageTimes1000000 > 1000;\n        return isError;\n    }\n}\n",
		"current/protocol/Exchange/libs/LibOrder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibOrder {\n\n    bytes32 constant DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(\n        \"DomainSeparator(address contract)\"\n    );\n\n    bytes32 constant ORDER_SCHEMA_HASH = keccak256(\n        \"Order(\",\n        \"address makerAddress,\",\n        \"address takerAddress,\",\n        \"address feeRecipientAddress,\",\n        \"address senderAddress,\",\n        \"uint256 makerAssetAmount,\",\n        \"uint256 takerAssetAmount,\",\n        \"uint256 makerFee,\",\n        \"uint256 takerFee,\",\n        \"uint256 expirationTimeSeconds,\",\n        \"uint256 salt,\",\n        \"bytes makerAssetData,\",\n        \"bytes takerAssetData,\",\n        \")\"\n    );\n\n    struct Order {\n        address makerAddress;\n        address takerAddress;\n        address feeRecipientAddress;\n        address senderAddress;\n        uint256 makerAssetAmount;\n        uint256 takerAssetAmount;\n        uint256 makerFee;\n        uint256 takerFee;\n        uint256 expirationTimeSeconds;\n        uint256 salt;\n        bytes makerAssetData;\n        bytes takerAssetData;\n    }\n\n    struct OrderInfo {\n        // See LibStatus for a complete description of order statuses\n        uint8 orderStatus;\n        // Keccak-256 EIP712 hash of the order\n        bytes32 orderHash;\n        // Amount of order that has been filled\n        uint256 orderTakerAssetFilledAmount;\n    }\n\n    /// @dev Calculates Keccak-256 hash of the order.\n    /// @param order The order structure.\n    /// @return Keccak-256 EIP712 hash of the order.\n    function getOrderHash(Order memory order)\n        internal\n        view\n        returns (bytes32 orderHash)\n    {\n        // TODO: EIP712 is not finalized yet\n        // Source: https://github.com/ethereum/EIPs/pull/712\n        orderHash = keccak256(\n            DOMAIN_SEPARATOR_SCHEMA_HASH,\n            keccak256(address(this)),\n            ORDER_SCHEMA_HASH,\n            keccak256(\n                order.makerAddress,\n                order.takerAddress,\n                order.feeRecipientAddress,\n                order.senderAddress,\n                order.makerAssetAmount,\n                order.takerAssetAmount,\n                order.makerFee,\n                order.takerFee,\n                order.expirationTimeSeconds,\n                order.salt,\n                keccak256(order.makerAssetData),\n                keccak256(order.takerAssetData)\n            )\n        );\n        return orderHash;\n    }\n}\n",
		"current/protocol/Exchange/libs/LibStatus.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\ncontract LibStatus {\n\n    // Exchange Status Codes\n    enum Status {\n        /// Default Status ///\n        INVALID,                                // General invalid status\n\n        /// General Exchange Statuses ///\n        SUCCESS,                                // Indicates a successful operation\n        ROUNDING_ERROR_TOO_LARGE,               // Rounding error too large\n        INSUFFICIENT_BALANCE_OR_ALLOWANCE,      // Insufficient balance or allowance for token transfer\n        TAKER_ASSET_FILL_AMOUNT_TOO_LOW,        // takerAssetFillAmount is <= 0\n        INVALID_SIGNATURE,                      // Invalid signature\n        INVALID_SENDER,                         // Invalid sender\n        INVALID_TAKER,                          // Invalid taker\n        INVALID_MAKER,                          // Invalid maker\n\n        /// Order State Statuses ///\n        // A valid order remains fillable until it is expired, fully filled, or cancelled.\n        // An order's state is unaffected by external factors, like account balances.\n        ORDER_INVALID_MAKER_ASSET_AMOUNT,       // Order does not have a valid maker asset amount\n        ORDER_INVALID_TAKER_ASSET_AMOUNT,       // Order does not have a valid taker asset amount\n        ORDER_FILLABLE,                         // Order is fillable\n        ORDER_EXPIRED,                          // Order has already expired\n        ORDER_FULLY_FILLED,                     // Order is fully filled\n        ORDER_CANCELLED                         // Order has been cancelled\n    }\n\n    event ExchangeStatus(uint8 indexed statusId, bytes32 indexed orderHash);\n}\n",
		"current/protocol/Exchange/mixins/MAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IAssetProxyDispatcher.sol\";\n\ncontract MAssetProxyDispatcher is\n    IAssetProxyDispatcher\n{\n\n    // Logs registration of new asset proxy\n    event AssetProxySet(\n        uint8 id,\n        address newAssetProxy,\n        address oldAssetProxy\n    );\n\n    /// @dev Forwards arguments to assetProxy and calls `transferFrom`. Either succeeds or throws.\n    /// @param assetMetadata Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param amount Amount of token to transfer.\n    function dispatchTransferFrom(\n        bytes memory assetMetadata,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal;\n}\n",
		"current/protocol/Exchange/mixins/MExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\nimport \"../interfaces/IExchangeCore.sol\";\n\ncontract MExchangeCore is\n    IExchangeCore\n{\n\n    // Fill event is emitted whenever an order is filled.\n    event Fill(\n        address indexed makerAddress,\n        address takerAddress,\n        address indexed feeRecipientAddress,\n        uint256 makerAssetFilledAmount,\n        uint256 takerAssetFilledAmount,\n        uint256 makerFeePaid,\n        uint256 takerFeePaid,\n        bytes32 indexed orderHash,\n        bytes makerAssetData,\n        bytes takerAssetData\n    );\n\n    // Cancel event is emitted whenever an individual order is cancelled.\n    event Cancel(\n        address indexed makerAddress,\n        address indexed feeRecipientAddress,\n        bytes32 indexed orderHash,\n        bytes makerAssetData,\n        bytes takerAssetData\n    );\n\n    // CancelUpTo event is emitted whenever `cancelOrdersUpTo` is executed succesfully.\n    event CancelUpTo(\n        address indexed makerAddress,\n        uint256 makerEpoch\n    );\n\n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderStatus Status of order to be filled.\n    /// @param orderHash Hash of order to be filled.\n    /// @param takerAddress Address of order taker.\n    /// @param orderTakerAssetFilledAmount Amount of order already filled.\n    /// @param takerAssetFillAmount Desired amount of order to fill by taker.\n    /// @param signature Proof that the orders was created by its maker.\n    function assertValidFill(\n        LibOrder.Order memory order,\n        uint8 orderStatus,\n        bytes32 orderHash,\n        address takerAddress,\n        uint256 orderTakerAssetFilledAmount,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal;\n\n    /// @dev Updates state with results of a fill order.\n    /// @param order that was filled.\n    /// @param takerAddress Address of taker who filled the order.\n    /// @param orderTakerAssetFilledAmount Amount of order already filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function updateFilledState(\n        LibOrder.Order memory order,\n        address takerAddress,\n        bytes32 orderHash,\n        uint256 orderTakerAssetFilledAmount,\n        LibFillResults.FillResults memory fillResults\n    )\n        internal;\n\n    /// @dev Validates context for cancelOrder. Succeeds or throws.\n    /// @param order that was cancelled.\n    /// @param orderStatus Status of order that was cancelled.\n    /// @param orderHash Hash of order that was cancelled.\n    function assertValidCancel(\n        LibOrder.Order memory order,\n        uint8 orderStatus,\n        bytes32 orderHash\n    )\n        internal;\n\n    /// @dev Updates state with results of cancelling an order.\n    ///      State is only updated if the order is currently fillable.\n    ///      Otherwise, updating state would have no effect.\n    /// @param order that was cancelled.\n    /// @param orderStatus Status of order that was cancelled.\n    /// @param orderHash Hash of order that was cancelled.\n    /// @return stateUpdated Returns true only if state was updated.\n    function updateCancelledState(\n        LibOrder.Order memory order,\n        uint8 orderStatus,\n        bytes32 orderHash\n    )\n        internal\n        returns (bool stateUpdated);\n}\n",
		"current/protocol/Exchange/mixins/MMatchOrders.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibOrder.sol\";\nimport \"../libs/LibFillResults.sol\";\nimport \"./MExchangeCore.sol\";\nimport \"../interfaces/IMatchOrders.sol\";\n\ncontract MMatchOrders is\n    IMatchOrders\n{\n\n    /// @dev Validates context for matchOrders. Succeeds or throws.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    function assertValidMatch(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder\n    )\n        internal;\n\n    /// @dev Validates matched fill results. Succeeds or throws.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function assertValidMatchResults(LibFillResults.MatchedFillResults memory matchedFillResults)\n        internal;\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderStatus Order status of left order.\n    /// @param rightOrderStatus Order status of right order.\n    /// @param leftOrderFilledAmount Amount of left order already filled.\n    /// @param rightOrderFilledAmount Amount of right order already filled.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint8 leftOrderStatus,\n        uint8 rightOrderStatus,\n        uint256 leftOrderFilledAmount,\n        uint256 rightOrderFilledAmount\n    )\n        internal\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n",
		"current/protocol/Exchange/mixins/MSettlement.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../libs/LibOrder.sol\";\nimport \"./MMatchOrders.sol\";\nimport \"../libs/LibFillResults.sol\";\n\ncontract MSettlement {\n\n    /// @dev Settles an order by transferring assets between counterparties.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAddress Address selling takerAsset and buying makerAsset.\n    /// @param fillResults Amounts to be filled and fees paid by maker and taker.\n    function settleOrder(\n        LibOrder.Order memory order,\n        address takerAddress,\n        LibFillResults.FillResults memory fillResults\n    )\n        internal;\n\n    /// @dev Settles matched order by transferring appropriate funds between order makers, taker, and fee recipient.\n    /// @param leftOrder First matched order.\n    /// @param rightOrder Second matched order.\n    /// @param takerAddress Address that matched the orders. The taker receives the spread between orders as profit.\n    /// @param matchedFillResults Struct holding amounts to transfer between makers, taker, and fee recipients.\n    function settleMatchedOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        address takerAddress,\n        LibFillResults.MatchedFillResults memory matchedFillResults\n    )\n        internal;\n}\n",
		"current/protocol/Exchange/mixins/MSignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../interfaces/ISignatureValidator.sol\";\n\ncontract MSignatureValidator is\n    ISignatureValidator\n{\n    // Allowed signature types.\n    enum SignatureType {\n        Illegal,    // 0x00, default value\n        Invalid,    // 0x01\n        EIP712,     // 0x02\n        EthSign,    // 0x03\n        Caller,     // 0x04\n        Wallet,     // 0x05\n        Validator,  // 0x06\n        PreSigned,  // 0x07\n        Trezor      // 0x08\n    }\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signer Address of signer.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        address signer,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid);\n}\n",
		"current/protocol/Exchange/mixins/MTransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.4.24;\n\nimport \"../interfaces/ITransactions.sol\";\n\ncontract MTransactions is\n    ITransactions\n{\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function getCurrentContextAddress()\n        internal\n        view\n        returns (address);\n}\n",
		"current/tokens/ERC20Token/IERC20Token.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\ncontract IERC20Token {\n\n    /// @notice send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value)\n        public\n        returns (bool);\n\n    /// @notice send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value)\n        public\n        returns (bool);\n    \n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value)\n        public\n        returns (bool);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner)\n        public view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        public view\n        returns (uint256);\n\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n    \n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n}\n",
		"current/tokens/WETH9/WETH9.sol": "// Copyright (C) 2015, 2016, 2017 Dapphub\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.4.18;\n\ncontract WETH9 {\n    string public name     = \"Wrapped Ether\";\n    string public symbol   = \"WETH\";\n    uint8  public decimals = 18;\n\n    event  Approval(address indexed src, address indexed guy, uint wad);\n    event  Transfer(address indexed src, address indexed dst, uint wad);\n    event  Deposit(address indexed dst, uint wad);\n    event  Withdrawal(address indexed src, uint wad);\n\n    mapping (address => uint)                       public  balanceOf;\n    mapping (address => mapping (address => uint))  public  allowance;\n\n    function() public payable {\n        deposit();\n    }\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        Deposit(msg.sender, msg.value);\n    }\n    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return this.balance;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\n\n/*\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n\n*/\n",
		"current/tokens/ZRXToken/ZRXToken.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.11;\n\nimport { UnlimitedAllowanceToken_v1 as UnlimitedAllowanceToken } from \"../../../previous/UnlimitedAllowanceToken/UnlimitedAllowanceToken_v1.sol\";\n\ncontract ZRXToken is UnlimitedAllowanceToken {\n\n    uint8 constant public decimals = 18;\n    uint public totalSupply = 10**27; // 1 billion tokens, 18 decimal places\n    string constant public name = \"0x Protocol Token\";\n    string constant public symbol = \"ZRX\";\n\n    function ZRXToken() {\n        balances[msg.sender] = totalSupply;\n    }\n}\n",
		"current/utils/LibBytes/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibBytes {\n\n    // Revert reasons\n    string constant GT_ZERO_LENGTH_REQUIRED = \"Length must be greater than 0.\";\n    string constant GTE_4_LENGTH_REQUIRED = \"Length must be greater than or equal to 4.\";\n    string constant GTE_20_LENGTH_REQUIRED = \"Length must be greater than or equal to 20.\";\n    string constant GTE_32_LENGTH_REQUIRED = \"Length must be greater than or equal to 32.\";\n    string constant INDEX_OUT_OF_BOUNDS = \"Specified array index is out of bounds.\";\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            GT_ZERO_LENGTH_REQUIRED\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n        \n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popAddress(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            GTE_20_LENGTH_REQUIRED\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function areBytesEqual(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        assembly {\n            // Get the number of words occupied by <lhs>\n            let lenFullWords := div(add(mload(lhs), 0x1F), 0x20)\n\n            // Add 1 to the number of words, to account for the length field\n            lenFullWords := add(lenFullWords, 0x1)\n\n            // Test equality word-by-word.\n            // Terminates early if there is a mismatch.\n            for {let i := 0} lt(i, lenFullWords) {i := add(i, 1)} {\n                let lhsWord := mload(add(lhs, mul(i, 0x20)))\n                let rhsWord := mload(add(rhs, mul(i, 0x20)))\n                equal := eq(lhsWord, rhsWord)\n                if eq(equal, 0) {\n                    // Break\n                    i := lenFullWords\n                }\n            }\n       }\n\n       return equal;\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GTE_20_LENGTH_REQUIRED\n        ); \n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GTE_20_LENGTH_REQUIRED\n        ); \n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(mload(add(b, index)), 0xffffffffffffffffffffffff0000000000000000000000000000000000000000)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            GTE_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            GTE_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        return uint256(readBytes32(b, index));\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads the first 4 bytes from a byte array of arbitrary length.\n    /// @param b Byte array to read first 4 bytes from.\n    /// @return First 4 bytes of data.\n    function readFirst4(bytes memory b)\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= 4,\n            GTE_4_LENGTH_REQUIRED\n        );\n        assembly {\n            result := mload(add(b, 32))\n        }\n        return result;\n    }\n}\n",
		"current/utils/Ownable/IOwnable.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\n\ncontract IOwnable {\n    function transferOwnership(address newOwner)\n        public;\n}\n",
		"current/utils/Ownable/Ownable.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\n\nimport \"./IOwnable.sol\";\n\ncontract Ownable is IOwnable {\n    address public owner;\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"Only contract owner is allowed to call this method.\"\n        );\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n",
		"current/utils/SafeMath/SafeMath.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\ncontract SafeMath {\n    function safeMul(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint c = a / b;\n        return c;\n    }\n\n    function safeSub(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
		"previous/ERC20Token/ERC20Token_v1.sol": "pragma solidity ^0.4.11;\n\nimport { Token_v1 as Token } from \"../Token/Token_v1.sol\";\n\ncontract ERC20Token_v1 is Token {\n\n    function transfer(address _to, uint _value) returns (bool) {\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function transferFrom(address _from, address _to, uint _value) returns (bool) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function balanceOf(address _owner) constant returns (uint) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint _value) returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint) {\n        return allowed[_owner][_spender];\n    }\n\n    mapping (address => uint) balances;\n    mapping (address => mapping (address => uint)) allowed;\n    uint public totalSupply;\n}\n",
		"previous/Token/Token_v1.sol": "pragma solidity ^0.4.11;\n\ncontract Token_v1 {\n\n    /// @return total amount of tokens\n    function totalSupply() constant returns (uint supply) {}\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant returns (uint balance) {}\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint _value) returns (bool success) {}\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint _value) returns (bool success) {}\n\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint _value) returns (bool success) {}\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {}\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n",
		"previous/UnlimitedAllowanceToken/UnlimitedAllowanceToken_v1.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.11;\n\nimport { ERC20Token_v1 as ERC20Token } from \"../ERC20Token/ERC20Token_v1.sol\";\n\ncontract UnlimitedAllowanceToken_v1 is ERC20Token {\n\n    uint constant MAX_UINT = 2**256 - 1;\n\n    /// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited allowance.\n    /// @param _from Address to transfer from.\n    /// @param _to Address to transfer to.\n    /// @param _value Amount to transfer.\n    /// @return Success of transfer.\n    function transferFrom(address _from, address _to, uint _value)\n        public\n        returns (bool)\n    {\n        uint allowance = allowed[_from][msg.sender];\n        if (balances[_from] >= _value\n            && allowance >= _value\n            && balances[_to] + _value >= balances[_to]\n        ) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            if (allowance < MAX_UINT) {\n                allowed[_from][msg.sender] -= _value;\n            }\n            Transfer(_from, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n",
		"zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol": "pragma solidity ^0.4.18;\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic {\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);  \n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n  \n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId) public view returns (address _operator);\n  \n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;  \n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;\n}\n"
	},
	"sourceTreeHashHex": "0x942a44856e8e17b5bd08e6d944233b74b0aa11aa5868f8231308c2eedc29614d",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.4.24+commit.e67f0147.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 0
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"networks": {}
}