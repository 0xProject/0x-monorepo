{
	"schemaVersion": "2.0.0",
	"contractName": "BasketProxy",
	"compilerOutput": {
		"abi": [
			{
				"constant": false,
				"inputs": [
					{
						"name": "target",
						"type": "address"
					}
				],
				"name": "addAuthorizedAddress",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"name": "authorities",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "target",
						"type": "address"
					}
				],
				"name": "removeAuthorizedAddress",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "target",
						"type": "address"
					},
					{
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "removeAuthorizedAddressAtIndex",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getProxyId",
				"outputs": [
					{
						"name": "",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"name": "authorized",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "",
						"type": "address[][]"
					},
					{
						"name": "",
						"type": "uint256[][]"
					}
				],
				"name": "BasketTokens",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getAuthorizedAddresses",
				"outputs": [
					{
						"name": "",
						"type": "address[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "erc721Proxy",
						"type": "address"
					},
					{
						"name": "erc20Proxy",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "fallback"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "target",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "caller",
						"type": "address"
					}
				],
				"name": "AuthorizedAddressAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "target",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "caller",
						"type": "address"
					}
				],
				"name": "AuthorizedAddressRemoved",
				"type": "event"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x60806040523480156200001157600080fd5b50604051604080620016cd833981018060405262000033919081019062000085565b60008054600160a060020a0319908116331790915560038054600160a060020a0394851690831617905560048054929093169116179055620000d0565b60006200007e8251620000c4565b9392505050565b600080604083850312156200009957600080fd5b6000620000a7858562000070565b9250506020620000ba8582860162000070565b9150509250929050565b600160a060020a031690565b6115ed80620000e06000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166342f1181e81146105fa578063494503d41461061c57806370712939146106525780638da5cb5b146106725780639ad2674414610687578063ae25532e146106a7578063b9181611146106c9578063d11647ed146106f6578063d39de6e914610716578063f2fde38b14610738575b3480156100af57600080fd5b507fffffffff00000000000000000000000000000000000000000000000000000000600035167fa85e59e4000000000000000000000000000000000000000000000000000000008114156105f7576040805133815260016020820152908120541515610186577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c1553454e4445525f4e4f545f415554484f52495a454400000000000000604052600060605260646000fd5b60016064350315610202577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c0e494e56414c49445f414d4f554e540000000000000000000000000000604052600060605260646000fd5b7fa85e59e40000000000000000000000000000000000000000000000000000000060005260806004803760a460a83560c83560e835600281146102b0577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c0f5452414e534645525f4641494c454400000000000000000000000000604052600060605260646000fd5b838201600481013560028114610331577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c0f5452414e534645525f4641494c454400000000000000000000000000604052600060605260646000fd5b60a486013560648301358082146103b3577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c0f5452414e534645525f4641494c454400000000000000000000000000604052600060605260646000fd5b60c488016084850160446084527f02571792000000000000000000000000000000000000000000000000000000008a5260005b8481101561049257823560a852813560c85260208301925060208201915060008060e86000806003545af1801515610489577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c0f5452414e534645525f4641494c454400000000000000000000000000604052600060605260646000fd5b506001016103e6565b5060246084527ff47261b0000000000000000000000000000000000000000000000000000000008a52600060c8528135813580821461053c577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c0f5452414e534645525f4641494c454400000000000000000000000000604052600060605260646000fd5b60208401935060208301925060005b828110156105f757843560a852833560645260208501945060208401935060008060c86000806004545af18015156105ee577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c0f5452414e534645525f4641494c454400000000000000000000000000604052600060605260646000fd5b5060010161054b565b50005b34801561060657600080fd5b5061061a610615366004611248565b610758565b005b34801561062857600080fd5b5061063c610637366004611307565b6108e3565b604051610649919061148d565b60405180910390f35b34801561065e57600080fd5b5061061a61066d366004611248565b610918565b34801561067e57600080fd5b5061063c610ba7565b34801561069357600080fd5b5061061a6106a236600461126e565b610bc3565b3480156106b357600080fd5b506106bc610ea4565b60405161064991906114c0565b3480156106d557600080fd5b506106e96106e4366004611248565b610f00565b60405161064991906114b2565b34801561070257600080fd5b5061061a6107113660046112a8565b610f15565b34801561072257600080fd5b5061072b610f19565b60405161064991906114a1565b34801561074457600080fd5b5061061a610753366004611248565b610f88565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a99061150e565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205460ff1615610812576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a9906114ee565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260016020819052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168317905560028054928301815583527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055513392917f3147867c59d17e8fa9d522465651d44aae0a9e38f902f3475b97e58072f0ed4c91a350565b60028054829081106108f157fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6000805473ffffffffffffffffffffffffffffffffffffffff16331461096a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a99061150e565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604090205460ff1615156109cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a9906114ce565b5073ffffffffffffffffffffffffffffffffffffffff8116600090815260016020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555b600254811015610b60578173ffffffffffffffffffffffffffffffffffffffff16600282815481101515610a4857fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161415610b5857600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908110610aa057fe5b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff9092169183908110610ad357fe5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190610b529082611039565b50610b60565b600101610a18565b604051339073ffffffffffffffffffffffffffffffffffffffff8416907f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b090600090a35050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c14576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a99061150e565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604090205460ff161515610c75576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a9906114ce565b6002548110610cb0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a9906114fe565b8173ffffffffffffffffffffffffffffffffffffffff16600282815481101515610cd657fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614610d2f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a9906114de565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908110610daa57fe5b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff9092169183908110610ddd57fe5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190610e5c9082611039565b50604051339073ffffffffffffffffffffffffffffffffffffffff8416907f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b090600090a35050565b604080517f4261736b6574546f6b656e7328616464726573735b5d5b5d2c75696e7432353681527f5b5d5b5d29000000000000000000000000000000000000000000000000000000602082015290519081900360250190205b90565b60016020526000908152604090205460ff1681565b5050565b60606002805480602002602001604051908101604052809291908181526020018280548015610f7e57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610f53575b5050505050905090565b60005473ffffffffffffffffffffffffffffffffffffffff163314610fd9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a99061150e565b73ffffffffffffffffffffffffffffffffffffffff81161561103657600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790555b50565b81548183558181111561105d5760008381526020902061105d918101908301611062565b505050565b610efd91905b8082111561107c5760008155600101611068565b5090565b600061108c8235611570565b9392505050565b6000601f820183136110a457600080fd5b81356110b76110b282611545565b61151e565b915081818352602084019350602081019050838560208402820111156110dc57600080fd5b60005b8381101561110857816110f28882611080565b84525060209283019291909101906001016110df565b5050505092915050565b6000601f8201831361112357600080fd5b81356111316110b282611545565b81815260209384019390925082018360005b8381101561110857813586016111598882611093565b8452506020928301929190910190600101611143565b6000601f8201831361118057600080fd5b813561118e6110b282611545565b81815260209384019390925082018360005b8381101561110857813586016111b688826111cc565b84525060209283019291909101906001016111a0565b6000601f820183136111dd57600080fd5b81356111eb6110b282611545565b9150818183526020840193506020810190508385602084028201111561121057600080fd5b60005b838110156111085781611226888261123c565b8452506020928301929190910190600101611213565b600061108c8235610efd565b60006020828403121561125a57600080fd5b60006112668484611080565b949350505050565b6000806040838503121561128157600080fd5b600061128d8585611080565b925050602061129e8582860161123c565b9150509250929050565b600080604083850312156112bb57600080fd5b823567ffffffffffffffff8111156112d257600080fd5b6112de85828601611112565b925050602083013567ffffffffffffffff8111156112fb57600080fd5b61129e8582860161116f565b60006020828403121561131957600080fd5b6000611266848461123c565b61132e81611570565b82525050565b600061133f8261156c565b80845260208401935061135183611566565b60005b8281101561138157611367868351611325565b61137082611566565b602096909601959150600101611354565b5093949350505050565b61132e81611589565b61132e8161158e565b601581527f5441524745545f4e4f545f415554484f52495a45440000000000000000000000602082015260400190565b601b81527f415554484f52495a45445f414444524553535f4d49534d415443480000000000602082015260400190565b601981527f5441524745545f414c52454144595f415554484f52495a454400000000000000602082015260400190565b601381527f494e4445585f4f55545f4f465f424f554e445300000000000000000000000000602082015260400190565b601381527f4f4e4c595f434f4e54524143545f4f574e455200000000000000000000000000602082015260400190565b6020810161149b8284611325565b92915050565b6020808252810161108c8184611334565b6020810161149b828461138b565b6020810161149b8284611394565b6020808252810161149b8161139d565b6020808252810161149b816113cd565b6020808252810161149b816113fd565b6020808252810161149b8161142d565b6020808252810161149b8161145d565b60405181810167ffffffffffffffff8111828210171561153d57600080fd5b604052919050565b600067ffffffffffffffff82111561155c57600080fd5b5060209081020190565b60200190565b5190565b73ffffffffffffffffffffffffffffffffffffffff1690565b151590565b7fffffffff0000000000000000000000000000000000000000000000000000000016905600a265627a7a72305820d66180ea14f8174e51f0c2d00fe3f092ab632a60aac3157f92e5ff8eac7af32a6c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x40 DUP1 PUSH3 0x16CD DUP4 CODECOPY DUP2 ADD DUP1 PUSH1 0x40 MSTORE PUSH3 0x33 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x85 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT SWAP1 DUP2 AND CALLER OR SWAP1 SWAP2 SSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP5 DUP6 AND SWAP1 DUP4 AND OR SWAP1 SSTORE PUSH1 0x4 DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH3 0xD0 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x7E DUP3 MLOAD PUSH3 0xC4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0xA7 DUP6 DUP6 PUSH3 0x70 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH3 0xBA DUP6 DUP3 DUP7 ADD PUSH3 0x70 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x15ED DUP1 PUSH3 0xE0 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x42F1181E DUP2 EQ PUSH2 0x5FA JUMPI DUP1 PUSH4 0x494503D4 EQ PUSH2 0x61C JUMPI DUP1 PUSH4 0x70712939 EQ PUSH2 0x652 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x672 JUMPI DUP1 PUSH4 0x9AD26744 EQ PUSH2 0x687 JUMPI DUP1 PUSH4 0xAE25532E EQ PUSH2 0x6A7 JUMPI DUP1 PUSH4 0xB9181611 EQ PUSH2 0x6C9 JUMPI DUP1 PUSH4 0xD11647ED EQ PUSH2 0x6F6 JUMPI DUP1 PUSH4 0xD39DE6E9 EQ PUSH2 0x716 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x738 JUMPI JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD AND PUSH32 0xA85E59E400000000000000000000000000000000000000000000000000000000 DUP2 EQ ISZERO PUSH2 0x5F7 JUMPI PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x186 JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0x1553454E4445525F4E4F545F415554484F52495A454400000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x64 CALLDATALOAD SUB ISZERO PUSH2 0x202 JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xE494E56414C49445F414D4F554E540000000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST PUSH32 0xA85E59E400000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x80 PUSH1 0x4 DUP1 CALLDATACOPY PUSH1 0xA4 PUSH1 0xA8 CALLDATALOAD PUSH1 0xC8 CALLDATALOAD PUSH1 0xE8 CALLDATALOAD PUSH1 0x2 DUP2 EQ PUSH2 0x2B0 JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST DUP4 DUP3 ADD PUSH1 0x4 DUP2 ADD CALLDATALOAD PUSH1 0x2 DUP2 EQ PUSH2 0x331 JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xA4 DUP7 ADD CALLDATALOAD PUSH1 0x64 DUP4 ADD CALLDATALOAD DUP1 DUP3 EQ PUSH2 0x3B3 JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xC4 DUP9 ADD PUSH1 0x84 DUP6 ADD PUSH1 0x44 PUSH1 0x84 MSTORE PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 DUP11 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x492 JUMPI DUP3 CALLDATALOAD PUSH1 0xA8 MSTORE DUP2 CALLDATALOAD PUSH1 0xC8 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x0 DUP1 PUSH1 0xE8 PUSH1 0x0 DUP1 PUSH1 0x3 SLOAD GAS CALL DUP1 ISZERO ISZERO PUSH2 0x489 JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3E6 JUMP JUMPDEST POP PUSH1 0x24 PUSH1 0x84 MSTORE PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 DUP11 MSTORE PUSH1 0x0 PUSH1 0xC8 MSTORE DUP2 CALLDATALOAD DUP2 CALLDATALOAD DUP1 DUP3 EQ PUSH2 0x53C JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x5F7 JUMPI DUP5 CALLDATALOAD PUSH1 0xA8 MSTORE DUP4 CALLDATALOAD PUSH1 0x64 MSTORE PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x0 DUP1 PUSH1 0xC8 PUSH1 0x0 DUP1 PUSH1 0x4 SLOAD GAS CALL DUP1 ISZERO ISZERO PUSH2 0x5EE JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x54B JUMP JUMPDEST POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x606 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x61A PUSH2 0x615 CALLDATASIZE PUSH1 0x4 PUSH2 0x1248 JUMP JUMPDEST PUSH2 0x758 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x628 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x63C PUSH2 0x637 CALLDATASIZE PUSH1 0x4 PUSH2 0x1307 JUMP JUMPDEST PUSH2 0x8E3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x649 SWAP2 SWAP1 PUSH2 0x148D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x65E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x61A PUSH2 0x66D CALLDATASIZE PUSH1 0x4 PUSH2 0x1248 JUMP JUMPDEST PUSH2 0x918 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x63C PUSH2 0xBA7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x693 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x61A PUSH2 0x6A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x126E JUMP JUMPDEST PUSH2 0xBC3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6BC PUSH2 0xEA4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x649 SWAP2 SWAP1 PUSH2 0x14C0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6E9 PUSH2 0x6E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1248 JUMP JUMPDEST PUSH2 0xF00 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x649 SWAP2 SWAP1 PUSH2 0x14B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x702 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x61A PUSH2 0x711 CALLDATASIZE PUSH1 0x4 PUSH2 0x12A8 JUMP JUMPDEST PUSH2 0xF15 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x72B PUSH2 0xF19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x649 SWAP2 SWAP1 PUSH2 0x14A1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x744 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x61A PUSH2 0x753 CALLDATASIZE PUSH1 0x4 PUSH2 0x1248 JUMP JUMPDEST PUSH2 0xF88 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x7B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x150E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x812 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x14EE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP4 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP3 DUP4 ADD DUP2 SSTORE DUP4 MSTORE PUSH32 0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE SWAP1 SWAP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP5 OR SWAP1 SSTORE MLOAD CALLER SWAP3 SWAP2 PUSH32 0x3147867C59D17E8FA9D522465651D44AAE0A9E38F902F3475B97E58072F0ED4C SWAP2 LOG3 POP JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x8F1 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x96A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x150E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x9CB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x14CE JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0xB60 JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA48 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xB58 JUMPI PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 LT PUSH2 0xAA0 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x2 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0xAD3 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 PUSH2 0xB52 SWAP1 DUP3 PUSH2 0x1039 JUMP JUMPDEST POP PUSH2 0xB60 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xA18 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH32 0x1F32C1B084E2DE0713B8FB16BD46BB9DF710A3DBEAE2F3CA93AF46E016DCC6B0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xC14 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x150E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH2 0xC75 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x14CE JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 LT PUSH2 0xCB0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x14FE JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0xCD6 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD2F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x14DE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 LT PUSH2 0xDAA JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x2 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0xDDD JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 PUSH2 0xE5C SWAP1 DUP3 PUSH2 0x1039 JUMP JUMPDEST POP PUSH1 0x40 MLOAD CALLER SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH32 0x1F32C1B084E2DE0713B8FB16BD46BB9DF710A3DBEAE2F3CA93AF46E016DCC6B0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x4261736B6574546F6B656E7328616464726573735B5D5B5D2C75696E74323536 DUP2 MSTORE PUSH32 0x5B5D5B5D29000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x25 ADD SWAP1 KECCAK256 JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xF7E JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF53 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xFD9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x150E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x1036 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 GT ISZERO PUSH2 0x105D JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH2 0x105D SWAP2 DUP2 ADD SWAP1 DUP4 ADD PUSH2 0x1062 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xEFD SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x107C JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1068 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x108C DUP3 CALLDATALOAD PUSH2 0x1570 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x10A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x10B7 PUSH2 0x10B2 DUP3 PUSH2 0x1545 JUMP JUMPDEST PUSH2 0x151E JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x10DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1108 JUMPI DUP2 PUSH2 0x10F2 DUP9 DUP3 PUSH2 0x1080 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x10DF JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x1123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1131 PUSH2 0x10B2 DUP3 PUSH2 0x1545 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1108 JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x1159 DUP9 DUP3 PUSH2 0x1093 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1143 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x1180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x118E PUSH2 0x10B2 DUP3 PUSH2 0x1545 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1108 JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x11B6 DUP9 DUP3 PUSH2 0x11CC JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x11A0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x11DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11EB PUSH2 0x10B2 DUP3 PUSH2 0x1545 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x1210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1108 JUMPI DUP2 PUSH2 0x1226 DUP9 DUP3 PUSH2 0x123C JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1213 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x108C DUP3 CALLDATALOAD PUSH2 0xEFD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x125A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1266 DUP5 DUP5 PUSH2 0x1080 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x128D DUP6 DUP6 PUSH2 0x1080 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x129E DUP6 DUP3 DUP7 ADD PUSH2 0x123C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12DE DUP6 DUP3 DUP7 ADD PUSH2 0x1112 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x129E DUP6 DUP3 DUP7 ADD PUSH2 0x116F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1319 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1266 DUP5 DUP5 PUSH2 0x123C JUMP JUMPDEST PUSH2 0x132E DUP2 PUSH2 0x1570 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x133F DUP3 PUSH2 0x156C JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH2 0x1351 DUP4 PUSH2 0x1566 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1381 JUMPI PUSH2 0x1367 DUP7 DUP4 MLOAD PUSH2 0x1325 JUMP JUMPDEST PUSH2 0x1370 DUP3 PUSH2 0x1566 JUMP JUMPDEST PUSH1 0x20 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1354 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x132E DUP2 PUSH2 0x1589 JUMP JUMPDEST PUSH2 0x132E DUP2 PUSH2 0x158E JUMP JUMPDEST PUSH1 0x15 DUP2 MSTORE PUSH32 0x5441524745545F4E4F545F415554484F52495A45440000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1B DUP2 MSTORE PUSH32 0x415554484F52495A45445F414444524553535F4D49534D415443480000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x19 DUP2 MSTORE PUSH32 0x5441524745545F414C52454144595F415554484F52495A454400000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x13 DUP2 MSTORE PUSH32 0x494E4445585F4F55545F4F465F424F554E445300000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x13 DUP2 MSTORE PUSH32 0x4F4E4C595F434F4E54524143545F4F574E455200000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x149B DUP3 DUP5 PUSH2 0x1325 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x108C DUP2 DUP5 PUSH2 0x1334 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x149B DUP3 DUP5 PUSH2 0x138B JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x149B DUP3 DUP5 PUSH2 0x1394 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x149B DUP2 PUSH2 0x139D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x149B DUP2 PUSH2 0x13CD JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x149B DUP2 PUSH2 0x13FD JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x149B DUP2 PUSH2 0x142D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x149B DUP2 PUSH2 0x145D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x153D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x155C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 0xd6 PUSH2 0x80EA EQ 0xf8 OR 0x4e MLOAD CREATE 0xc2 0xd0 0xf 0xe3 CREATE SWAP3 0xab PUSH4 0x2A60AAC3 ISZERO PUSH32 0x92E5FF8EAC7AF32A6C6578706572696D656E74616CF500370000000000000000 ",
				"sourceMap": "719:15324:0:-;;;1171:149;8:9:-1;5:2;;;30:1;27;20:12;5:2;1171:149:0;;;;;;;;;;;;;;;;;;;;;;329:5:6;:18;;-1:-1:-1;;;;;;329:18:6;;;337:10;329:18;;;;1253:12:0;:26;;-1:-1:-1;;;;;1253:26:0;;;;;;;;;1289:11;:24;;;;;;;;;;;719:15324;;5:122:-1;;83:39;114:6;108:13;83:39;;;74:48;68:59;-1:-1;;;68:59;134:399;;;266:2;254:9;245:7;241:23;237:32;234:2;;;282:1;279;272:12;234:2;317:1;334:64;390:7;370:9;334:64;;;324:74;;296:108;435:2;453:64;509:7;500:6;489:9;485:22;453:64;;;443:74;;414:109;228:305;;;;;;540:128;-1:-1;;;;;609:54;;592:76;;719:15324:0;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166342f1181e81146105fa578063494503d41461061c57806370712939146106525780638da5cb5b146106725780639ad2674414610687578063ae25532e146106a7578063b9181611146106c9578063d11647ed146106f6578063d39de6e914610716578063f2fde38b14610738575b3480156100af57600080fd5b507fffffffff00000000000000000000000000000000000000000000000000000000600035167fa85e59e4000000000000000000000000000000000000000000000000000000008114156105f7576040805133815260016020820152908120541515610186577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c1553454e4445525f4e4f545f415554484f52495a454400000000000000604052600060605260646000fd5b60016064350315610202577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c0e494e56414c49445f414d4f554e540000000000000000000000000000604052600060605260646000fd5b7fa85e59e40000000000000000000000000000000000000000000000000000000060005260806004803760a460a83560c83560e835600281146102b0577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c0f5452414e534645525f4641494c454400000000000000000000000000604052600060605260646000fd5b838201600481013560028114610331577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c0f5452414e534645525f4641494c454400000000000000000000000000604052600060605260646000fd5b60a486013560648301358082146103b3577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c0f5452414e534645525f4641494c454400000000000000000000000000604052600060605260646000fd5b60c488016084850160446084527f02571792000000000000000000000000000000000000000000000000000000008a5260005b8481101561049257823560a852813560c85260208301925060208201915060008060e86000806003545af1801515610489577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c0f5452414e534645525f4641494c454400000000000000000000000000604052600060605260646000fd5b506001016103e6565b5060246084527ff47261b0000000000000000000000000000000000000000000000000000000008a52600060c8528135813580821461053c577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c0f5452414e534645525f4641494c454400000000000000000000000000604052600060605260646000fd5b60208401935060208301925060005b828110156105f757843560a852833560645260208501945060208401935060008060c86000806004545af18015156105ee577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c0f5452414e534645525f4641494c454400000000000000000000000000604052600060605260646000fd5b5060010161054b565b50005b34801561060657600080fd5b5061061a610615366004611248565b610758565b005b34801561062857600080fd5b5061063c610637366004611307565b6108e3565b604051610649919061148d565b60405180910390f35b34801561065e57600080fd5b5061061a61066d366004611248565b610918565b34801561067e57600080fd5b5061063c610ba7565b34801561069357600080fd5b5061061a6106a236600461126e565b610bc3565b3480156106b357600080fd5b506106bc610ea4565b60405161064991906114c0565b3480156106d557600080fd5b506106e96106e4366004611248565b610f00565b60405161064991906114b2565b34801561070257600080fd5b5061061a6107113660046112a8565b610f15565b34801561072257600080fd5b5061072b610f19565b60405161064991906114a1565b34801561074457600080fd5b5061061a610753366004611248565b610f88565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a99061150e565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205460ff1615610812576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a9906114ee565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260016020819052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168317905560028054928301815583527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055513392917f3147867c59d17e8fa9d522465651d44aae0a9e38f902f3475b97e58072f0ed4c91a350565b60028054829081106108f157fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6000805473ffffffffffffffffffffffffffffffffffffffff16331461096a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a99061150e565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604090205460ff1615156109cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a9906114ce565b5073ffffffffffffffffffffffffffffffffffffffff8116600090815260016020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555b600254811015610b60578173ffffffffffffffffffffffffffffffffffffffff16600282815481101515610a4857fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161415610b5857600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908110610aa057fe5b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff9092169183908110610ad357fe5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190610b529082611039565b50610b60565b600101610a18565b604051339073ffffffffffffffffffffffffffffffffffffffff8416907f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b090600090a35050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c14576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a99061150e565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604090205460ff161515610c75576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a9906114ce565b6002548110610cb0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a9906114fe565b8173ffffffffffffffffffffffffffffffffffffffff16600282815481101515610cd657fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614610d2f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a9906114de565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908110610daa57fe5b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff9092169183908110610ddd57fe5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190610e5c9082611039565b50604051339073ffffffffffffffffffffffffffffffffffffffff8416907f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b090600090a35050565b604080517f4261736b6574546f6b656e7328616464726573735b5d5b5d2c75696e7432353681527f5b5d5b5d29000000000000000000000000000000000000000000000000000000602082015290519081900360250190205b90565b60016020526000908152604090205460ff1681565b5050565b60606002805480602002602001604051908101604052809291908181526020018280548015610f7e57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610f53575b5050505050905090565b60005473ffffffffffffffffffffffffffffffffffffffff163314610fd9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a99061150e565b73ffffffffffffffffffffffffffffffffffffffff81161561103657600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790555b50565b81548183558181111561105d5760008381526020902061105d918101908301611062565b505050565b610efd91905b8082111561107c5760008155600101611068565b5090565b600061108c8235611570565b9392505050565b6000601f820183136110a457600080fd5b81356110b76110b282611545565b61151e565b915081818352602084019350602081019050838560208402820111156110dc57600080fd5b60005b8381101561110857816110f28882611080565b84525060209283019291909101906001016110df565b5050505092915050565b6000601f8201831361112357600080fd5b81356111316110b282611545565b81815260209384019390925082018360005b8381101561110857813586016111598882611093565b8452506020928301929190910190600101611143565b6000601f8201831361118057600080fd5b813561118e6110b282611545565b81815260209384019390925082018360005b8381101561110857813586016111b688826111cc565b84525060209283019291909101906001016111a0565b6000601f820183136111dd57600080fd5b81356111eb6110b282611545565b9150818183526020840193506020810190508385602084028201111561121057600080fd5b60005b838110156111085781611226888261123c565b8452506020928301929190910190600101611213565b600061108c8235610efd565b60006020828403121561125a57600080fd5b60006112668484611080565b949350505050565b6000806040838503121561128157600080fd5b600061128d8585611080565b925050602061129e8582860161123c565b9150509250929050565b600080604083850312156112bb57600080fd5b823567ffffffffffffffff8111156112d257600080fd5b6112de85828601611112565b925050602083013567ffffffffffffffff8111156112fb57600080fd5b61129e8582860161116f565b60006020828403121561131957600080fd5b6000611266848461123c565b61132e81611570565b82525050565b600061133f8261156c565b80845260208401935061135183611566565b60005b8281101561138157611367868351611325565b61137082611566565b602096909601959150600101611354565b5093949350505050565b61132e81611589565b61132e8161158e565b601581527f5441524745545f4e4f545f415554484f52495a45440000000000000000000000602082015260400190565b601b81527f415554484f52495a45445f414444524553535f4d49534d415443480000000000602082015260400190565b601981527f5441524745545f414c52454144595f415554484f52495a454400000000000000602082015260400190565b601381527f494e4445585f4f55545f4f465f424f554e445300000000000000000000000000602082015260400190565b601381527f4f4e4c595f434f4e54524143545f4f574e455200000000000000000000000000602082015260400190565b6020810161149b8284611325565b92915050565b6020808252810161108c8184611334565b6020810161149b828461138b565b6020810161149b8284611394565b6020808252810161149b8161139d565b6020808252810161149b816113cd565b6020808252810161149b816113fd565b6020808252810161149b8161142d565b6020808252810161149b8161145d565b60405181810167ffffffffffffffff8111828210171561153d57600080fd5b604052919050565b600067ffffffffffffffff82111561155c57600080fd5b5060209081020190565b60200190565b5190565b73ffffffffffffffffffffffffffffffffffffffff1690565b151590565b7fffffffff0000000000000000000000000000000000000000000000000000000016905600a265627a7a72305820d66180ea14f8174e51f0c2d00fe3f092ab632a60aac3157f92e5ff8eac7af32a6c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x42F1181E DUP2 EQ PUSH2 0x5FA JUMPI DUP1 PUSH4 0x494503D4 EQ PUSH2 0x61C JUMPI DUP1 PUSH4 0x70712939 EQ PUSH2 0x652 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x672 JUMPI DUP1 PUSH4 0x9AD26744 EQ PUSH2 0x687 JUMPI DUP1 PUSH4 0xAE25532E EQ PUSH2 0x6A7 JUMPI DUP1 PUSH4 0xB9181611 EQ PUSH2 0x6C9 JUMPI DUP1 PUSH4 0xD11647ED EQ PUSH2 0x6F6 JUMPI DUP1 PUSH4 0xD39DE6E9 EQ PUSH2 0x716 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x738 JUMPI JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD AND PUSH32 0xA85E59E400000000000000000000000000000000000000000000000000000000 DUP2 EQ ISZERO PUSH2 0x5F7 JUMPI PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x186 JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0x1553454E4445525F4E4F545F415554484F52495A454400000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x64 CALLDATALOAD SUB ISZERO PUSH2 0x202 JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xE494E56414C49445F414D4F554E540000000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST PUSH32 0xA85E59E400000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x80 PUSH1 0x4 DUP1 CALLDATACOPY PUSH1 0xA4 PUSH1 0xA8 CALLDATALOAD PUSH1 0xC8 CALLDATALOAD PUSH1 0xE8 CALLDATALOAD PUSH1 0x2 DUP2 EQ PUSH2 0x2B0 JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST DUP4 DUP3 ADD PUSH1 0x4 DUP2 ADD CALLDATALOAD PUSH1 0x2 DUP2 EQ PUSH2 0x331 JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xA4 DUP7 ADD CALLDATALOAD PUSH1 0x64 DUP4 ADD CALLDATALOAD DUP1 DUP3 EQ PUSH2 0x3B3 JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xC4 DUP9 ADD PUSH1 0x84 DUP6 ADD PUSH1 0x44 PUSH1 0x84 MSTORE PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 DUP11 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x492 JUMPI DUP3 CALLDATALOAD PUSH1 0xA8 MSTORE DUP2 CALLDATALOAD PUSH1 0xC8 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x0 DUP1 PUSH1 0xE8 PUSH1 0x0 DUP1 PUSH1 0x3 SLOAD GAS CALL DUP1 ISZERO ISZERO PUSH2 0x489 JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3E6 JUMP JUMPDEST POP PUSH1 0x24 PUSH1 0x84 MSTORE PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 DUP11 MSTORE PUSH1 0x0 PUSH1 0xC8 MSTORE DUP2 CALLDATALOAD DUP2 CALLDATALOAD DUP1 DUP3 EQ PUSH2 0x53C JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x5F7 JUMPI DUP5 CALLDATALOAD PUSH1 0xA8 MSTORE DUP4 CALLDATALOAD PUSH1 0x64 MSTORE PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x0 DUP1 PUSH1 0xC8 PUSH1 0x0 DUP1 PUSH1 0x4 SLOAD GAS CALL DUP1 ISZERO ISZERO PUSH2 0x5EE JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x54B JUMP JUMPDEST POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x606 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x61A PUSH2 0x615 CALLDATASIZE PUSH1 0x4 PUSH2 0x1248 JUMP JUMPDEST PUSH2 0x758 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x628 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x63C PUSH2 0x637 CALLDATASIZE PUSH1 0x4 PUSH2 0x1307 JUMP JUMPDEST PUSH2 0x8E3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x649 SWAP2 SWAP1 PUSH2 0x148D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x65E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x61A PUSH2 0x66D CALLDATASIZE PUSH1 0x4 PUSH2 0x1248 JUMP JUMPDEST PUSH2 0x918 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x63C PUSH2 0xBA7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x693 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x61A PUSH2 0x6A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x126E JUMP JUMPDEST PUSH2 0xBC3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6BC PUSH2 0xEA4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x649 SWAP2 SWAP1 PUSH2 0x14C0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6E9 PUSH2 0x6E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1248 JUMP JUMPDEST PUSH2 0xF00 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x649 SWAP2 SWAP1 PUSH2 0x14B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x702 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x61A PUSH2 0x711 CALLDATASIZE PUSH1 0x4 PUSH2 0x12A8 JUMP JUMPDEST PUSH2 0xF15 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x72B PUSH2 0xF19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x649 SWAP2 SWAP1 PUSH2 0x14A1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x744 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x61A PUSH2 0x753 CALLDATASIZE PUSH1 0x4 PUSH2 0x1248 JUMP JUMPDEST PUSH2 0xF88 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x7B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x150E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x812 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x14EE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP4 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP3 DUP4 ADD DUP2 SSTORE DUP4 MSTORE PUSH32 0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE SWAP1 SWAP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP5 OR SWAP1 SSTORE MLOAD CALLER SWAP3 SWAP2 PUSH32 0x3147867C59D17E8FA9D522465651D44AAE0A9E38F902F3475B97E58072F0ED4C SWAP2 LOG3 POP JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x8F1 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x96A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x150E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x9CB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x14CE JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0xB60 JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA48 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xB58 JUMPI PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 LT PUSH2 0xAA0 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x2 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0xAD3 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 PUSH2 0xB52 SWAP1 DUP3 PUSH2 0x1039 JUMP JUMPDEST POP PUSH2 0xB60 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xA18 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH32 0x1F32C1B084E2DE0713B8FB16BD46BB9DF710A3DBEAE2F3CA93AF46E016DCC6B0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xC14 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x150E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH2 0xC75 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x14CE JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 LT PUSH2 0xCB0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x14FE JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0xCD6 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD2F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x14DE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 LT PUSH2 0xDAA JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x2 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0xDDD JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 PUSH2 0xE5C SWAP1 DUP3 PUSH2 0x1039 JUMP JUMPDEST POP PUSH1 0x40 MLOAD CALLER SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH32 0x1F32C1B084E2DE0713B8FB16BD46BB9DF710A3DBEAE2F3CA93AF46E016DCC6B0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x4261736B6574546F6B656E7328616464726573735B5D5B5D2C75696E74323536 DUP2 MSTORE PUSH32 0x5B5D5B5D29000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x25 ADD SWAP1 KECCAK256 JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xF7E JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF53 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xFD9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x150E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x1036 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 GT ISZERO PUSH2 0x105D JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH2 0x105D SWAP2 DUP2 ADD SWAP1 DUP4 ADD PUSH2 0x1062 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xEFD SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x107C JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1068 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x108C DUP3 CALLDATALOAD PUSH2 0x1570 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x10A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x10B7 PUSH2 0x10B2 DUP3 PUSH2 0x1545 JUMP JUMPDEST PUSH2 0x151E JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x10DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1108 JUMPI DUP2 PUSH2 0x10F2 DUP9 DUP3 PUSH2 0x1080 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x10DF JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x1123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1131 PUSH2 0x10B2 DUP3 PUSH2 0x1545 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1108 JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x1159 DUP9 DUP3 PUSH2 0x1093 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1143 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x1180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x118E PUSH2 0x10B2 DUP3 PUSH2 0x1545 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1108 JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x11B6 DUP9 DUP3 PUSH2 0x11CC JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x11A0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x11DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11EB PUSH2 0x10B2 DUP3 PUSH2 0x1545 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x1210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1108 JUMPI DUP2 PUSH2 0x1226 DUP9 DUP3 PUSH2 0x123C JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1213 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x108C DUP3 CALLDATALOAD PUSH2 0xEFD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x125A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1266 DUP5 DUP5 PUSH2 0x1080 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x128D DUP6 DUP6 PUSH2 0x1080 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x129E DUP6 DUP3 DUP7 ADD PUSH2 0x123C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12DE DUP6 DUP3 DUP7 ADD PUSH2 0x1112 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x129E DUP6 DUP3 DUP7 ADD PUSH2 0x116F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1319 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1266 DUP5 DUP5 PUSH2 0x123C JUMP JUMPDEST PUSH2 0x132E DUP2 PUSH2 0x1570 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x133F DUP3 PUSH2 0x156C JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH2 0x1351 DUP4 PUSH2 0x1566 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1381 JUMPI PUSH2 0x1367 DUP7 DUP4 MLOAD PUSH2 0x1325 JUMP JUMPDEST PUSH2 0x1370 DUP3 PUSH2 0x1566 JUMP JUMPDEST PUSH1 0x20 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1354 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x132E DUP2 PUSH2 0x1589 JUMP JUMPDEST PUSH2 0x132E DUP2 PUSH2 0x158E JUMP JUMPDEST PUSH1 0x15 DUP2 MSTORE PUSH32 0x5441524745545F4E4F545F415554484F52495A45440000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1B DUP2 MSTORE PUSH32 0x415554484F52495A45445F414444524553535F4D49534D415443480000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x19 DUP2 MSTORE PUSH32 0x5441524745545F414C52454144595F415554484F52495A454400000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x13 DUP2 MSTORE PUSH32 0x494E4445585F4F55545F4F465F424F554E445300000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x13 DUP2 MSTORE PUSH32 0x4F4E4C595F434F4E54524143545F4F574E455200000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x149B DUP3 DUP5 PUSH2 0x1325 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x108C DUP2 DUP5 PUSH2 0x1334 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x149B DUP3 DUP5 PUSH2 0x138B JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x149B DUP3 DUP5 PUSH2 0x1394 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x149B DUP2 PUSH2 0x139D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x149B DUP2 PUSH2 0x13CD JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x149B DUP2 PUSH2 0x13FD JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x149B DUP2 PUSH2 0x142D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x149B DUP2 PUSH2 0x145D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x153D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x155C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 0xd6 PUSH2 0x80EA EQ 0xf8 OR 0x4e MLOAD CREATE 0xc2 0xd0 0xf 0xe3 CREATE SWAP3 0xab PUSH4 0x2A60AAC3 ISZERO PUSH32 0x92E5FF8EAC7AF32A6C6578706572696D656E74616CF500370000000000000000 ",
				"sourceMap": "719:15324:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;719:15324:0;1552:66;1548:1;1535:15;1531:88;2013:66;2003:8;2000:80;1997:2;;;2309;2303:9;;2347:6;2329:70;;2439:15;2434:2;2423:14;;2416:39;2550:20;;;2544:27;2537:35;2534:2;;;2673:66;2670:1;2663:77;2772:66;2768:2;2761:78;2871:66;2867:2;2860:78;2970:1;2966:2;2959:13;3003:3;3000:1;2993:14;2534:2;3182:1;3176:3;3163:17;3159:25;3156:2;;;3278:66;3275:1;3268:77;3377:66;3373:2;3366:78;3476:66;3472:2;3465:78;3575:1;3571:2;3564:13;3608:3;3605:1;3598:14;3156:2;4878:66;4875:1;4868:77;5130:3;5127:1;5124;5111:23;7321:3;7463:17;7450:31;7622:18;7609:32;7750:18;7737:32;7995:1;7964:33;;7958:2;;8096:66;8093:1;8086:77;8195:66;8191:2;8184:78;8294:66;8290:2;8283:78;8393:1;8389:2;8382:13;8426:3;8423:1;8416:14;7958:2;8535:36;;;8658:1;8629:31;;8616:45;8875:1;8850:27;;8844:2;;8976:66;8973:1;8966:77;9075:66;9071:2;9064:78;9174:66;9170:2;9163:78;9273:1;9269:2;9262:13;9306:3;9303:1;9296:14;8844:2;9446:3;9431:19;;9418:33;9627:3;9598:33;;9585:47;9730:42;;;9724:2;;9871:66;9868:1;9861:77;9970:66;9966:2;9959:78;10069:66;10065:2;10058:78;10168:1;10164:2;10157:13;10201:3;10198:1;10191:14;9724:2;10290:3;10279:9;10275:19;10368:3;10343:23;10339:33;10502:66;10497:3;10490:79;10658:66;10647:9;10640:85;10791:1;10777:1624;10800:21;10797:1;10794:28;10777:1624;;;10934:26;10921:40;10916:3;10909:53;11049:20;11036:34;11031:3;11024:47;11187:2;11159:26;11155:35;11125:65;;11261:2;11239:20;11235:29;11211:53;;11811:1;11747;11688:3;11619:1;11557;11477:17;11471:24;11412:3;11382:492;11960:14;;11957:2;;;12011:66;12008:1;12001:77;12114:66;12110:2;12103:78;12217:66;12213:2;12206:78;12320:1;12316:2;12309:13;12357:3;12354:1;12347:14;11957:2;-1:-1:-1;10836:1:0;10829:9;10777:1624;;;-1:-1:-1;12524:66:0;12519:3;12512:79;12679:66;12661:85;;12841:66;12836:3;12829:79;12954:40;;13037:34;;13160:44;;;13154:2;;13303:66;13300:1;13293:77;13402:66;13398:2;13391:78;13501:66;13497:2;13490:78;13600:1;13596:2;13589:13;13633:3;13630:1;13623:14;13154:2;13735;13707:26;13703:35;13673:65;;13805:2;13783:20;13779:29;13755:53;;13873:1;13859:1731;13882:20;13879:1;13876:27;13859:1731;;;14015:26;14002:40;13997:3;13990:53;14169:20;14156:34;14151:3;14144:47;14307:2;14279:26;14275:35;14245:65;;14381:2;14359:20;14355:29;14331:53;;14985:1;14910;14840:3;14760:1;14687;14608:16;14602:23;14532:3;14502:557;15083:14;;15080:2;;;15200:66;15197:1;15190:77;15303:66;15299:2;15292:78;15406:66;15402:2;15395:78;15509:1;15505:2;15498:13;15546:3;15543:1;15536:14;15080:2;-1:-1:-1;13917:1:0;13910:9;13859:1731;;;-1:-1:-1;15607:12:0;1146:320:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1146:320:1;;;;;;;;;;;1031:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1031:28:1;;;;;;;;;;;;;;;;;;;;;;;;;1580:547;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1580:547:1;;;;;;;;;258:20:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;258:20:6;;;;2300:643:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2300:643:1;;;;;;;;;15747:113:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15747:113:0;;;;;;;;;;;;982:43:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;982:43:1;;;;;;;;;;;;;;;;;15909:90:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;15909:90:0;;;;;;;;;3040:138:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3040:138:1;;;;;;;;;;;;500:167:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;500:167:6;;;;;;;;;1146:320:1;426:5:6;;;;412:10;:19;391:85;;;;;;;;;;;;;;;;;;;;;;1263:18:1;;;;;;;:10;:18;;;;;;;;1262:19;1241:91;;;;;;;;;;;;;;1343:18;;;;;;;1364:4;1343:18;;;;;;;;:25;;;;;;;;1378:11;27:10:-1;;23:18;;;45:23;;1378:24:1;;;;;;;;;;;;;;1417:42;1448:10;;1343:18;1417:42;;;1146:320;:::o;1031:28::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1031:28:1;:::o;1580:547::-;1815:9;426:5:6;;;;412:10;:19;391:85;;;;;;;;;;;;;;1699:18:1;;;;;;;:10;:18;;;;;;;;1678:86;;;;;;;;;;;;;;;;-1:-1:-1;1782:18:1;;;;;;;:10;:18;;;;;1775:25;;;;;;1810:252;1834:11;:18;1830:22;;1810:252;;;1895:6;1877:24;;:11;1889:1;1877:14;;;;;;;;;;;;;;;;;;;;;;:24;1873:179;;;1938:11;1950:18;;:22;;;;1938:35;;;;;;;;;;;;;;;;1921:11;:14;;1938:35;;;;;1933:1;;1921:14;;;;;;;;;;;;;;;:52;;;;;;;;;;;;;;;1991:11;:23;;;;;;;;;:::i;:::-;;2032:5;;1873:179;1854:3;;1810:252;;;2076:44;;2109:10;;2076:44;;;;;;;;;1580:547;;:::o;258:20:6:-;;;;;;:::o;2300:643:1:-;426:5:6;;;;412:10;:19;391:85;;;;;;;;;;;;;;2463:18:1;;;;;;;:10;:18;;;;;;;;2442:86;;;;;;;;;;;;;;;;2567:11;:18;2559:26;;2538:92;;;;;;;;;;;;;;2683:6;2661:28;;:11;2673:5;2661:18;;;;;;;;;;;;;;;;;;;;;;:28;2640:102;;;;;;;;;;;;;;2760:18;;;;;;;:10;:18;;;;;2753:25;;;;;;2809:11;2821:18;;:22;;;;2809:35;;;;;;;;;;;;;;;;2788:11;:18;;2809:35;;;;;2800:5;;2788:18;;;;;;;;;;;;;;;:56;;;;;;;;;;;;;;;2854:11;:23;;;;;;;;;:::i;:::-;-1:-1:-1;2892:44:1;;2925:10;;2892:44;;;;;;;;;2300:643;;:::o;15747:113:0:-;1113:50;;;;;;;;;;;;;;;;;;;;;15747:113;;:::o;982:43:1:-;;;;;;;;;;;;;;;:::o;15909:90:0:-;;;:::o;3040:138:1:-;3121:9;3160:11;3153:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3040:138;:::o;500:167:6:-;426:5;;;;412:10;:19;391:85;;;;;;;;;;;;;;596:22;;;;592:69;;634:5;:16;;;;;;;;;;592:69;500:167;:::o;719:15324:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;5:118:-1;;72:46;110:6;97:20;72:46;;;63:55;57:66;-1:-1;;;57:66;148:699;;254:4;242:17;;238:27;-1:-1;228:2;;279:1;276;269:12;228:2;316:6;303:20;338:76;353:60;406:6;353:60;;;338:76;;;329:85;;431:5;456:6;449:5;442:21;486:4;478:6;474:17;464:27;;508:4;503:3;499:14;492:21;;561:6;608:3;600:4;592:6;588:17;583:3;579:27;576:36;573:2;;;625:1;622;615:12;573:2;650:1;635:206;660:6;657:1;654:13;635:206;;;718:3;740:37;773:3;761:10;740:37;;;728:50;;-1:-1;801:4;792:14;;;;820;;;;;682:1;675:9;635:206;;;639:14;221:626;;;;;;;;875:741;;1006:4;994:17;;990:27;-1:-1;980:2;;1031:1;1028;1021:12;980:2;1068:6;1055:20;1090:101;1105:85;1183:6;1105:85;;1090:101;1219:21;;;1263:4;1251:17;;;;1081:110;;-1:-1;1276:14;;1251:17;1371:1;1356:254;1381:6;1378:1;1375:13;1356:254;;;1464:3;1451:17;1443:6;1439:30;1488:58;1542:3;1530:10;1488:58;;;1476:71;;-1:-1;1570:4;1561:14;;;;1589;;;;;1403:1;1396:9;1356:254;;1644:741;;1775:4;1763:17;;1759:27;-1:-1;1749:2;;1800:1;1797;1790:12;1749:2;1837:6;1824:20;1859:101;1874:85;1952:6;1874:85;;1859:101;1988:21;;;2032:4;2020:17;;;;1850:110;;-1:-1;2045:14;;2020:17;2140:1;2125:254;2150:6;2147:1;2144:13;2125:254;;;2233:3;2220:17;2212:6;2208:30;2257:58;2311:3;2299:10;2257:58;;;2245:71;;-1:-1;2339:4;2330:14;;;;2358;;;;;2172:1;2165:9;2125:254;;2411:699;;2517:4;2505:17;;2501:27;-1:-1;2491:2;;2542:1;2539;2532:12;2491:2;2579:6;2566:20;2601:76;2616:60;2669:6;2616:60;;2601:76;2592:85;;2694:5;2719:6;2712:5;2705:21;2749:4;2741:6;2737:17;2727:27;;2771:4;2766:3;2762:14;2755:21;;2824:6;2871:3;2863:4;2855:6;2851:17;2846:3;2842:27;2839:36;2836:2;;;2888:1;2885;2878:12;2836:2;2913:1;2898:206;2923:6;2920:1;2917:13;2898:206;;;2981:3;3003:37;3036:3;3024:10;3003:37;;;2991:50;;-1:-1;3064:4;3055:14;;;;3083;;;;;2945:1;2938:9;2898:206;;3118:118;;3185:46;3223:6;3210:20;3185:46;;3243:241;;3347:2;3335:9;3326:7;3322:23;3318:32;3315:2;;;3363:1;3360;3353:12;3315:2;3398:1;3415:53;3460:7;3440:9;3415:53;;;3405:63;3309:175;-1:-1;;;;3309:175;3491:366;;;3612:2;3600:9;3591:7;3587:23;3583:32;3580:2;;;3628:1;3625;3618:12;3580:2;3663:1;3680:53;3725:7;3705:9;3680:53;;;3670:63;;3642:97;3770:2;3788:53;3833:7;3824:6;3813:9;3809:22;3788:53;;;3778:63;;3749:98;3574:283;;;;;;3864:722;;;4077:2;4065:9;4056:7;4052:23;4048:32;4045:2;;;4093:1;4090;4083:12;4045:2;4128:31;;4179:18;4168:30;;4165:2;;;4211:1;4208;4201:12;4165:2;4231:99;4322:7;4313:6;4302:9;4298:22;4231:99;;;4221:109;;4107:229;4395:2;4384:9;4380:18;4367:32;4419:18;4411:6;4408:30;4405:2;;;4451:1;4448;4441:12;4405:2;4471:99;4562:7;4553:6;4542:9;4538:22;4471:99;;4593:241;;4697:2;4685:9;4676:7;4672:23;4668:32;4665:2;;;4713:1;4710;4703:12;4665:2;4748:1;4765:53;4810:7;4790:9;4765:53;;4841:110;4914:31;4939:5;4914:31;;;4909:3;4902:44;4896:55;;;4989:590;;5124:54;5172:5;5124:54;;;5196:6;5191:3;5184:19;5220:4;5215:3;5211:14;5204:21;;5265:56;5315:5;5265:56;;;5342:1;5327:230;5352:6;5349:1;5346:13;5327:230;;;5392:53;5441:3;5432:6;5426:13;5392:53;;;5462:60;5515:6;5462:60;;;5545:4;5536:14;;;;;5452:70;-1:-1;5374:1;5367:9;5327:230;;;-1:-1;5570:3;;5103:476;-1:-1;;;;5103:476;5587:101;5654:28;5676:5;5654:28;;5695:107;5766:30;5790:5;5766:30;;5810:296;5965:2;5953:15;;6002:66;5997:2;5988:12;;5981:88;6097:2;6088:12;;5946:160;6115:296;6270:2;6258:15;;6307:66;6302:2;6293:12;;6286:88;6402:2;6393:12;;6251:160;6420:296;6575:2;6563:15;;6612:66;6607:2;6598:12;;6591:88;6707:2;6698:12;;6556:160;6725:296;6880:2;6868:15;;6917:66;6912:2;6903:12;;6896:88;7012:2;7003:12;;6861:160;7030:296;7185:2;7173:15;;7222:66;7217:2;7208:12;;7201:88;7317:2;7308:12;;7166:160;7334:193;7442:2;7427:18;;7456:61;7431:9;7490:6;7456:61;;;7413:114;;;;;7534:341;7692:2;7706:47;;;7677:18;;7767:98;7677:18;7851:6;7767:98;;7882:181;7984:2;7969:18;;7998:55;7973:9;8026:6;7998:55;;8070:189;8176:2;8161:18;;8190:59;8165:9;8222:6;8190:59;;8266:387;8447:2;8461:47;;;8432:18;;8522:121;8432:18;8522:121;;8660:387;8841:2;8855:47;;;8826:18;;8916:121;8826:18;8916:121;;9054:387;9235:2;9249:47;;;9220:18;;9310:121;9220:18;9310:121;;9448:387;9629:2;9643:47;;;9614:18;;9704:121;9614:18;9704:121;;9842:387;10023:2;10037:47;;;10008:18;;10098:121;10008:18;10098:121;;10236:256;10298:2;10292:9;10324:17;;;10399:18;10384:34;;10420:22;;;10381:62;10378:2;;;10456:1;10453;10446:12;10378:2;10472;10465:22;10276:216;;-1:-1;10276:216;10499:254;;10654:18;10646:6;10643:30;10640:2;;;10686:1;10683;10676:12;10640:2;-1:-1;10715:4;10703:17;;;10733:15;;10577:176;11595:121;11704:4;11692:17;;11673:43;11725:107;11815:12;;11799:33;11970:128;12050:42;12039:54;;12022:76;12105:92;12178:13;12171:21;;12154:43;12204:151;12283:66;12272:78;;12255:100"
			}
		}
	},
	"sources": {
		"2.0.0/protocol/AssetProxy/BasketProxy.sol": {
			"id": 0
		},
		"2.0.0/protocol/AssetProxy/MixinAuthorizable.sol": {
			"id": 1
		},
		"2.0.0/protocol/AssetProxy/interfaces/IAuthorizable.sol": {
			"id": 2
		},
		"2.0.0/protocol/AssetProxy/mixins/MAuthorizable.sol": {
			"id": 3
		},
		"2.0.0/utils/LibBytes/LibBytes.sol": {
			"id": 4
		},
		"2.0.0/utils/Ownable/IOwnable.sol": {
			"id": 5
		},
		"2.0.0/utils/Ownable/Ownable.sol": {
			"id": 6
		}
	},
	"sourceCodes": {
		"2.0.0/protocol/AssetProxy/BasketProxy.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/LibBytes/LibBytes.sol\";\nimport \"./MixinAuthorizable.sol\";\n\n\ncontract BasketProxy is\n    MixinAuthorizable\n{\n    // solhint-disable var-name-mixedcase\n    address internal ERC721_PROXY;\n    address internal ERC20_PROXY;\n    // solhint-enable var-name-mixedcase\n\n    // Id of this proxy.\n    // address[0] == ERC721, address[1] == ERC20\n    // uint256[0] == ERC721 tokenIds, uint256[1] == ERC20 token amounts\n    bytes4 constant internal PROXY_ID = bytes4(keccak256(\"BasketTokens(address[][],uint256[][])\"));\n\n    constructor(address erc721Proxy, address erc20Proxy)\n        public\n    {\n        ERC721_PROXY = erc721Proxy;\n        ERC20_PROXY = erc20Proxy;\n    }\n\n    // solhint-disable-next-line payable-fallback\n    function ()\n        external\n    {\n        assembly {\n            // The first 4 bytes of calldata holds the function selector\n            let selector := and(calldataload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n            // `transferFrom` will be called with the following parameters:\n            // assetData Encoded byte array.\n            // from Address to transfer asset from.\n            // to Address to transfer asset to.\n            // amount Amount of asset to transfer.\n            // bytes4(keccak256(\"transferFrom(bytes,address,address,uint256)\")) = 0xa85e59e4\n            if eq(selector, 0xa85e59e400000000000000000000000000000000000000000000000000000000) {\n\n                // To lookup a value in a mapping, we load from the storage location keccak256(k, p),\n                // where k is the key left padded to 32 bytes and p is the storage slot\n                let start := mload(64)\n                mstore(start, and(caller, 0xffffffffffffffffffffffffffffffffffffffff))\n                mstore(add(start, 32), authorized_slot)\n\n                // Revert if authorized[msg.sender] == false\n                if iszero(sload(keccak256(start, 64))) {\n                    // Revert with `Error(\"SENDER_NOT_AUTHORIZED\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x0000001553454e4445525f4e4f545f415554484f52495a454400000000000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n\n                // There exists only 1 of each basket.\n                // require(amount == 1, \"INVALID_AMOUNT\")\n                if sub(calldataload(100), 1) {\n                    // Revert with `Error(\"INVALID_AMOUNT\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x0000000e494e56414c49445f414d4f554e540000000000000000000000000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n\n                // `transferFrom`.\n                // | Area     | Offset | Length  | Contents                            |\n                // |----------|--------|---------|-------------------------------------|\n                // | Header   | 0      | 4       | function selector                   |\n                // | Params   |        | 4 * 32  | function parameters:                |\n                // |          | 4      |         |   1. offset to assetData (*)        |\n                // |          | 36     |         |   2. from                           |\n                // |          | 68     |         |   3. to                             |\n                // |          | 100    |         |   4. amount                         |\n                // | Data     |        |         | assetData:                          |\n                // |          | 132    | 32      | assetData Length                    |\n                // |          | 164    | **      | assetData Contents                  |\n                //\n                // We will be forwarding this data to the respective proxies as a call to\n                // bytes4(keccak256(\"transferFrom(bytes,address,address,uint256)\")) = 0xa85e59e4\n                mstore(0, 0xa85e59e400000000000000000000000000000000000000000000000000000000)\n                // We copy the fields `assetDataOffset`, `from` `to`, `amount` in bulk\n                // from our own calldata to the new calldata.\n                calldatacopy(4, 4, 128)\n                // Asset function selector begins at 164 for 4 bytes\n                // Asset data begins at offset 168\n                // Asset data itself is encoded as follows:\n                // | Area     | Offset     | Length  | Contents                            |\n                // |----------|------------|---------|-------------------------------------|\n                // | Header   | 0          | 4       | function selector                   |\n                // | Params   |            |         | function parameters:                |\n                // |          | 4          | 32      |   1.  contracts[][] offset (O1)     |\n                // |          | 36         | 32      |   2.  tokenIds[][] offset  (O2)     |\n                // |          | 68         | 32      |   3.  contracts length (A)          |\n                // |          | 100        | 32      |   4.  contracts[0] offset           |\n                // |          | 132        | 32      |   5.  contracts[1] offset           |\n                // |   O1     | 164        | 32      |   6.  contracts[0].length (B1)      |\n                // |   ***    | 164+B*32   | 32      |       contracts[0][n] (erc721)      |\n                // |          |            | 32      |   7.  contracts[1].length (B2)      |\n                // |   ***    |            | 32      |       contracts[1][n] (erc20)       |\n                // |   O2     | O2         | 32      |   8.  tokenIds length (C)           |\n                // |          | O2+32      | 32      |   9.  tokenIds[0] offset            |\n                // |          | O2+64      | 32      |   10. tokenIds[1] offset            |\n                // |          | O2+96      | 32      |   11. tokenIds[0].length (D1)       |\n                // |   ***    | O2+128     | 32      |       tokenIds[0][n] (erc721)       |\n                // |          | O2+160     | 32      |   12. tokenIds[1].length (D2)       |\n                // |   ***    | O2+192     | 32      |       tokenIds[1][n] (erc20)        |\n                // *** may be optional depending on the size\n\n                // Offset to the BasketTokens data\n                let dataBegin := 164\n                // Offset (O1) into the Token Contracts by type (2d array)\n                let tokenContractsByTypeOffset := calldataload(add(dataBegin, 4))\n                // Offset (O2) into the Token Ids/Amounts by Token Type (2d array)\n                let tokenIdsByTypeOffset := calldataload(add(dataBegin, 36))\n\n                // Token Contract Addresses\n                let tokenContractsByTypeLength := calldataload(add(dataBegin, 68))\n                // Require this length to be 2 to avoid ambiguity\n                // [[erc721], [erc20]]\n                // [[erc721], []]\n                // [[], [erc20]]\n                if eq(eq(tokenContractsByTypeLength, 2), 0) {\n                    // Revert with `Error(\"TRANSFER_FAILED\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n                // Token Ids or Amount\n                let tokenIdsByTypeDataBegin := add(dataBegin, tokenIdsByTypeOffset)\n                let tokenIdsByTypeLength := calldataload(add(tokenIdsByTypeDataBegin, 4))\n                // Require this length to be 2 to avoid ambiguity\n                // [[id], [amount]]\n                // [[id], []]\n                // [[], [amount]]\n                if eq(eq(tokenIdsByTypeLength, 2), 0) {\n                    // Revert with `Error(\"TRANSFER_FAILED\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n                // ERC721 tokens length (B)\n                let erc721ContractsLength := calldataload(add(dataBegin, 164))\n                // Id Data data begin: length, [0] offset, [1] offset, [0] length, [1] length\n                let erc721IdsLength := calldataload(add(tokenIdsByTypeDataBegin, 100))\n                // Ensure ERC721 Contract length == ERC721 token id length\n                if eq(eq(erc721ContractsLength, erc721IdsLength), 0) {\n                    // Revert with `Error(\"TRANSFER_FAILED\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n\n                let currentTokenContractOffset := add(dataBegin, 196)\n                let currentTokenIdOffset := add(tokenIdsByTypeDataBegin, 132)\n\n                // ERC721\n                // write transferFrom ERC721 assetDataLength 4+32+32 = 68\n                mstore(132, 0x0000000000000000000000000000000000000000000000000000000000000044)\n                // Write ERC721 Proxy Id = 0x02571792\n                mstore(dataBegin, 0x0257179200000000000000000000000000000000000000000000000000000000)\n                // Transfer ERC721\n                for {let i := 0} lt(i, erc721ContractsLength) {i := add(i, 1)} {\n                    // Load the token contract\n                    mstore(168, calldataload(currentTokenContractOffset))\n                    // Load the token id\n                    mstore(200, calldataload(currentTokenIdOffset))\n                    // increment\n                    currentTokenContractOffset := add(currentTokenContractOffset, 32)\n                    currentTokenIdOffset := add(currentTokenIdOffset, 32)\n\n                    /////// Call `proxy.transferFrom` using the calldata ///////\n                    let success := call(\n                        gas,            // forward all gas\n                        sload(ERC721_PROXY_slot),   // call address of token contract\n                        0,              // don't send any ETH\n                        0,              // pointer to start of input\n                        232,            // length of input\n                        0,              // write output to null\n                        0               // output size is 0 bytes\n                    )\n                    // Revert with `Error(\"TRANSFER_FAILED\")`\n                    if eq(success, 0) {\n                        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                        mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\n                        mstore(96, 0)\n                        revert(0, 100)\n                    }\n                }\n                // ERC20\n                // write transferFrom ERC20 assetDataLength 4+32 =36\n                mstore(132, 0x0000000000000000000000000000000000000000000000000000000000000024)\n                // Write ERC20 Proxy Id = 0xf47261b0\n                mstore(dataBegin, 0xf47261b000000000000000000000000000000000000000000000000000000000)\n                // Clear any remaining data from erc721 token ids\n                mstore(200, 0x0000000000000000000000000000000000000000000000000000000000000000)\n\n                let erc20ContractsLength := calldataload(currentTokenContractOffset)\n                let erc20AmountsLength := calldataload(currentTokenIdOffset)\n                // Ensure ERC20 Contract length == amounts length\n                if eq(eq(erc20ContractsLength, erc20AmountsLength), 0) {\n                    // Revert with `Error(\"TRANSFER_FAILED\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n\n                currentTokenContractOffset := add(currentTokenContractOffset, 32)\n                currentTokenIdOffset := add(currentTokenIdOffset, 32)\n                // Transfer ERC20\n                for {let i := 0} lt(i, erc20ContractsLength) {i := add(i, 1)} {\n                    // Load the token contract\n                    mstore(168, calldataload(currentTokenContractOffset))\n                    // Token amount is in the transferFrom parameters for ERC20\n                    mstore(100, calldataload(currentTokenIdOffset))\n                    // increment\n                    currentTokenContractOffset := add(currentTokenContractOffset, 32)\n                    currentTokenIdOffset := add(currentTokenIdOffset, 32)\n\n                    /////// Call `proxy.transferFrom` using the calldata ///////\n                    let success := call(\n                        gas,                       // forward all gas\n                        sload(ERC20_PROXY_slot),   // call address of token contract\n                        0,                         // don't send any ETH\n                        0,                         // pointer to start of input\n                        200,                       // length of input\n                        0,                         // write output to null\n                        0                          // output size is 0 bytes\n                    )\n                    if eq(success, 0) {\n                        // Revert with `Error(\"TRANSFER_FAILED\")`\n                        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                        mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\n                        mstore(96, 0)\n                        revert(0, 100)\n                    }\n                }\n                return(0, 0)\n            }\n        }\n    }\n\n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        pure\n        returns (bytes4)\n    {\n        return PROXY_ID;\n    }\n\n    // solhint-disable func-name-mixedcase\n    function BasketTokens(address[][], uint256[][])\n        public\n    {\n        return;\n    }\n    // solhint-enable func-name-mixedcase\n}\n",
		"2.0.0/protocol/AssetProxy/MixinAuthorizable.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\nimport \"../../utils/Ownable/Ownable.sol\";\nimport \"./mixins/MAuthorizable.sol\";\n\n\ncontract MixinAuthorizable is\n    Ownable,\n    MAuthorizable\n{\n\n    /// @dev Only authorized addresses can invoke functions with this modifier.\n    modifier onlyAuthorized {\n        require(\n            authorized[msg.sender],\n            \"SENDER_NOT_AUTHORIZED\"\n        );\n        _;\n    }\n\n    mapping (address => bool) public authorized;\n    address[] public authorities;\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external\n        onlyOwner\n    {\n        require(\n            !authorized[target],\n            \"TARGET_ALREADY_AUTHORIZED\"\n        );\n\n        authorized[target] = true;\n        authorities.push(target);\n        emit AuthorizedAddressAdded(target, msg.sender);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external\n        onlyOwner\n    {\n        require(\n            authorized[target],\n            \"TARGET_NOT_AUTHORIZED\"\n        );\n\n        delete authorized[target];\n        for (uint256 i = 0; i < authorities.length; i++) {\n            if (authorities[i] == target) {\n                authorities[i] = authorities[authorities.length - 1];\n                authorities.length -= 1;\n                break;\n            }\n        }\n        emit AuthorizedAddressRemoved(target, msg.sender);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external\n        onlyOwner\n    {\n        require(\n            authorized[target],\n            \"TARGET_NOT_AUTHORIZED\"\n        );\n        require(\n            index < authorities.length,\n            \"INDEX_OUT_OF_BOUNDS\"\n        );\n        require(\n            authorities[index] == target,\n            \"AUTHORIZED_ADDRESS_MISMATCH\"\n        );\n\n        delete authorized[target];\n        authorities[index] = authorities[authorities.length - 1];\n        authorities.length -= 1;\n        emit AuthorizedAddressRemoved(target, msg.sender);\n    }\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[] memory)\n    {\n        return authorities;\n    }\n}\n",
		"2.0.0/protocol/AssetProxy/interfaces/IAuthorizable.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\nimport \"../../../utils/Ownable/IOwnable.sol\";\n\n\ncontract IAuthorizable is\n    IOwnable\n{\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n    \n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[] memory);\n}\n",
		"2.0.0/protocol/AssetProxy/mixins/MAuthorizable.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\nimport \"../interfaces/IAuthorizable.sol\";\n\n\ncontract MAuthorizable is\n    IAuthorizable\n{\n\n    // Event logged when a new address is authorized.\n    event AuthorizedAddressAdded(\n        address indexed target,\n        address indexed caller\n    );\n\n    // Event logged when a currently authorized address is unauthorized.\n    event AuthorizedAddressRemoved(\n        address indexed target,\n        address indexed caller\n    );\n\n    /// @dev Only authorized addresses can invoke functions with this modifier.\n    modifier onlyAuthorized { revert(); _; }\n}\n",
		"2.0.0/utils/LibBytes/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n    \n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n                    \n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n                    \n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to < b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length);\n        return result;\n    }\n    \n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to < b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            \"GREATER_THAN_ZERO_LENGTH_REQUIRED\"\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n            \n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        return uint256(readBytes32(b, index));\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= index + 4,\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n        );\n        assembly {\n            result := mload(add(b, 32))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @dev NOTE: the returned value overlaps with the input value.\n    ///            Both should be treated as immutable.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytesWithLength(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n        \n        // Return a pointer to the byte array as it exists inside `b`\n        assembly {\n            result := add(b, index)\n        }\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytesWithLength(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            b.contentAddress() + index,\n            input.rawAddress(), // includes length of <input>\n            input.length + 32   // +32 bytes to store <input> length\n        );\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function deepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        internal\n        pure\n    {\n        uint256 sourceLen = source.length;\n        // Dest length must be >= source length, or some bytes would not be copied.\n        require(\n            dest.length >= sourceLen,\n            \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\"\n        );\n        memCopy(\n            dest.contentAddress(),\n            source.contentAddress(),\n            sourceLen\n        );\n    }\n}\n",
		"2.0.0/utils/Ownable/IOwnable.sol": "pragma solidity 0.4.24;\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\n\ncontract IOwnable {\n    function transferOwnership(address newOwner)\n        public;\n}\n",
		"2.0.0/utils/Ownable/Ownable.sol": "pragma solidity 0.4.24;\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\n\nimport \"./IOwnable.sol\";\n\n\ncontract Ownable is IOwnable {\n    address public owner;\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"ONLY_CONTRACT_OWNER\"\n        );\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n"
	},
	"sourceTreeHashHex": "0xa9c808b3b5843101ccdd210f61ec7755bc12a4f3964e8e9ff36a59f11e674360",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.4.24+commit.e67f0147.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"networks": {}
}