{
	"schemaVersion": "2.0.0",
	"contractName": "ERC20Proxy",
	"compilerOutput": {
		"abi": [
			{
				"constant": false,
				"inputs": [
					{
						"name": "target",
						"type": "address"
					}
				],
				"name": "addAuthorizedAddress",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"name": "authorities",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "assetData",
						"type": "bytes[]"
					},
					{
						"name": "from",
						"type": "address[]"
					},
					{
						"name": "to",
						"type": "address[]"
					},
					{
						"name": "amounts",
						"type": "uint256[]"
					}
				],
				"name": "batchTransferFrom",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "target",
						"type": "address"
					}
				],
				"name": "removeAuthorizedAddress",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "target",
						"type": "address"
					},
					{
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "removeAuthorizedAddressAtIndex",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "assetData",
						"type": "bytes"
					},
					{
						"name": "from",
						"type": "address"
					},
					{
						"name": "to",
						"type": "address"
					},
					{
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getProxyId",
				"outputs": [
					{
						"name": "",
						"type": "uint8"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"name": "authorized",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getAuthorizedAddresses",
				"outputs": [
					{
						"name": "",
						"type": "address[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "target",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "caller",
						"type": "address"
					}
				],
				"name": "AuthorizedAddressAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "target",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "caller",
						"type": "address"
					}
				],
				"name": "AuthorizedAddressRemoved",
				"type": "event"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405260008054600160a060020a031916331790556115c8806100256000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166342f1181e81146100b3578063494503d4146100d5578063563c875d1461010b578063707129391461012b5780638da5cb5b1461014b5780639ad2674414610160578063a85e59e414610180578063ae25532e146101a0578063b9181611146101c2578063d39de6e9146101ef578063f2fde38b14610211575b600080fd5b3480156100bf57600080fd5b506100d36100ce366004611154565b610231565b005b3480156100e157600080fd5b506100f56100f03660046112f1565b6103f6565b6040516101029190611412565b60405180910390f35b34801561011757600080fd5b506100d36101263660046111b4565b61042b565b34801561013757600080fd5b506100d3610146366004611154565b610535565b34801561015757600080fd5b506100f56107fe565b34801561016c57600080fd5b506100d361017b36600461117a565b61081a565b34801561018c57600080fd5b506100d361019b366004611274565b610abd565b3480156101ac57600080fd5b506101b5610b80565b6040516101029190611460565b3480156101ce57600080fd5b506101e26101dd366004611154565b610b86565b6040516101029190611431565b3480156101fb57600080fd5b50610204610b9b565b6040516101029190611420565b34801561021d57600080fd5b506100d361022c366004611154565b610c0a565b60005473ffffffffffffffffffffffffffffffffffffffff16331461028b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028290611450565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020908152604091829020548251808401909352601983527f5441524745545f414c52454144595f415554484f52495a4544000000000000009183019190915260ff1615610324576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282919061143f565b5073ffffffffffffffffffffffffffffffffffffffff8116600081815260016020819052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168317905560028054928301815583527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055513392917f3147867c59d17e8fa9d522465651d44aae0a9e38f902f3475b97e58072f0ed4c91a350565b600280548290811061040457fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b336000908152600160209081526040808320548151808301909252601582527f53454e4445525f4e4f545f415554484f52495a45440000000000000000000000928201929092529060ff1615156104af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282919061143f565b50600090505b845181101561052e5761052685828151811015156104cf57fe5b9060200190602002015185838151811015156104e757fe5b9060200190602002015185848151811015156104ff57fe5b90602001906020020151858581518110151561051757fe5b90602001906020020151610cbb565b6001016104b5565b5050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028290611450565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020908152604091829020548251808401909352601583527f5441524745545f4e4f545f415554484f52495a454400000000000000000000009183019190915260ff161515610621576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282919061143f565b505073ffffffffffffffffffffffffffffffffffffffff8116600090815260016020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555b6002548110156107b7578173ffffffffffffffffffffffffffffffffffffffff1660028281548110151561069f57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156107af57600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081106106f757fe5b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff909216918390811061072a57fe5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01906107a99082610f0a565b506107b7565b60010161066f565b604051339073ffffffffffffffffffffffffffffffffffffffff8416907f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b090600090a35050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60025460408051808201909152601381527f494e4445585f4f55545f4f465f424f554e445300000000000000000000000000602082015290821061088b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282919061143f565b508173ffffffffffffffffffffffffffffffffffffffff166002828154811015156108b257fe5b6000918252602091829020015460408051808201909152601b81527f415554484f52495a45445f414444524553535f4d49534d41544348000000000092810192909252909173ffffffffffffffffffffffffffffffffffffffff90911614610947576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282919061143f565b5073ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081106109c357fe5b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff90921691839081106109f657fe5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190610a759082610f0a565b50604051339073ffffffffffffffffffffffffffffffffffffffff8416907f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b090600090a35050565b33600090815260016020908152604091829020548251808401909352601583527f53454e4445525f4e4f545f415554484f52495a454400000000000000000000009183019190915260ff161515610b41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282919061143f565b5061052e85858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050848484610cbb565b60015b90565b60016020526000908152604090205460ff1681565b60606002805480602002602001604051908101604052809291908181526020018280548015610c0057602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610bd5575b5050505050905090565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028290611450565b73ffffffffffffffffffffffffffffffffffffffff811615610cb857600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790555b50565b6000806000610ccb876000610e3f565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff898116600484015288166024830152604482018790529194509092506064808201906020908390816000895af192505050806040805190810160405280600f81526020017f5452414e534645525f4641494c45440000000000000000000000000000000000815250901515610da9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282919061143f565b503d15610dc7575060003d60201415610dc75760206000803e506000515b60408051808201909152600f81527f5452414e534645525f4641494c454400000000000000000000000000000000006020820152811515610e35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282919061143f565b5050505050505050565b60008160140183511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524581526020017f5155495245440000000000000000000000000000000000000000000000000000815250901515610ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282919061143f565b5050601481830181015191019073ffffffffffffffffffffffffffffffffffffffff165b92915050565b815481835581811115610f2e57600083815260209020610f2e918101908301610f33565b505050565b610b8391905b80821115610f4d5760008155600101610f39565b5090565b6000610f5d8235611506565b9392505050565b6000601f82018313610f7557600080fd5b8135610f88610f8382611495565b61146e565b91508181835260208401935060208101905083856020840282011115610fad57600080fd5b60005b83811015610fd95781610fc38882610f51565b8452506020928301929190910190600101610fb0565b5050505092915050565b6000601f82018313610ff457600080fd5b8135611002610f8382611495565b81815260209384019390925082018360005b83811015610fd9578135860161102a88826110f9565b8452506020928301929190910190600101611014565b6000601f8201831361105157600080fd5b813561105f610f8382611495565b9150818183526020840193506020810190508385602084028201111561108457600080fd5b60005b83811015610fd9578161109a8882611148565b8452506020928301929190910190600101611087565b600080601f830184136110c257600080fd5b50813567ffffffffffffffff8111156110da57600080fd5b6020830191508360018202830111156110f257600080fd5b9250929050565b6000601f8201831361110a57600080fd5b8135611118610f83826114b6565b9150808252602083016020830185838301111561113457600080fd5b61113f83828461152a565b50505092915050565b6000610f5d8235610b83565b60006020828403121561116657600080fd5b60006111728484610f51565b949350505050565b6000806040838503121561118d57600080fd5b60006111998585610f51565b92505060206111aa85828601611148565b9150509250929050565b600080600080608085870312156111ca57600080fd5b843567ffffffffffffffff8111156111e157600080fd5b6111ed87828801610fe3565b945050602085013567ffffffffffffffff81111561120a57600080fd5b61121687828801610f64565b935050604085013567ffffffffffffffff81111561123357600080fd5b61123f87828801610f64565b925050606085013567ffffffffffffffff81111561125c57600080fd5b61126887828801611040565b91505092959194509250565b60008060008060006080868803121561128c57600080fd5b853567ffffffffffffffff8111156112a357600080fd5b6112af888289016110b0565b955095505060206112c288828901610f51565b93505060406112d388828901610f51565b92505060606112e488828901611148565b9150509295509295909350565b60006020828403121561130357600080fd5b60006111728484611148565b61131881611506565b82525050565b600061132982611502565b80845260208401935061133b836114fc565b60005b8281101561136b5761135186835161130f565b61135a826114fc565b60209690960195915060010161133e565b5093949350505050565b6113188161151f565b600061138982611502565b80845261139d816020860160208601611536565b6113a681611566565b9093016020019392505050565b603381527f4f6e6c7920636f6e7472616374206f776e657220697320616c6c6f776564207460208201527f6f2063616c6c2074686973206d6574686f642e00000000000000000000000000604082015260600190565b61131881611524565b60208101610f04828461130f565b60208082528101610f5d818461131e565b60208101610f048284611375565b60208082528101610f5d818461137e565b60208082528101610f04816113b3565b60208101610f048284611409565b60405181810167ffffffffffffffff8111828210171561148d57600080fd5b604052919050565b600067ffffffffffffffff8211156114ac57600080fd5b5060209081020190565b600067ffffffffffffffff8211156114cd57600080fd5b506020601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b60200190565b5190565b73ffffffffffffffffffffffffffffffffffffffff1690565b151590565b60ff1690565b82818337506000910152565b60005b83811015611551578181015183820152602001611539565b83811115611560576000848401525b50505050565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016905600a265627a7a7230582011e7c67f7fc9783fddbd967a3636d2d4b2d521d1222720eb42e2e7b228de72786c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x15C8 DUP1 PUSH2 0x25 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xAE JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x42F1181E DUP2 EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x494503D4 EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x563C875D EQ PUSH2 0x10B JUMPI DUP1 PUSH4 0x70712939 EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x14B JUMPI DUP1 PUSH4 0x9AD26744 EQ PUSH2 0x160 JUMPI DUP1 PUSH4 0xA85E59E4 EQ PUSH2 0x180 JUMPI DUP1 PUSH4 0xAE25532E EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0xB9181611 EQ PUSH2 0x1C2 JUMPI DUP1 PUSH4 0xD39DE6E9 EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x211 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0xCE CALLDATASIZE PUSH1 0x4 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH2 0xF0 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F1 JUMP JUMPDEST PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x102 SWAP2 SWAP1 PUSH2 0x1412 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x117 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x126 CALLDATASIZE PUSH1 0x4 PUSH2 0x11B4 JUMP JUMPDEST PUSH2 0x42B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x137 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x146 CALLDATASIZE PUSH1 0x4 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0x535 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x157 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH2 0x7FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x17B CALLDATASIZE PUSH1 0x4 PUSH2 0x117A JUMP JUMPDEST PUSH2 0x81A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x1274 JUMP JUMPDEST PUSH2 0xABD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B5 PUSH2 0xB80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x102 SWAP2 SWAP1 PUSH2 0x1460 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E2 PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0xB86 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x102 SWAP2 SWAP1 PUSH2 0x1431 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0xB9B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x102 SWAP2 SWAP1 PUSH2 0x1420 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x22C CALLDATASIZE PUSH1 0x4 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0xC0A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x28B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP1 PUSH2 0x1450 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x19 DUP4 MSTORE PUSH32 0x5441524745545F414C52454144595F415554484F52495A454400000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xFF AND ISZERO PUSH2 0x324 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP4 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP3 DUP4 ADD DUP2 SSTORE DUP4 MSTORE PUSH32 0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE SWAP1 SWAP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP5 OR SWAP1 SSTORE MLOAD CALLER SWAP3 SWAP2 PUSH32 0x3147867C59D17E8FA9D522465651D44AAE0A9E38F902F3475B97E58072F0ED4C SWAP2 LOG3 POP JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x404 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x15 DUP3 MSTORE PUSH32 0x53454E4445525F4E4F545F415554484F52495A45440000000000000000000000 SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x4AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x52E JUMPI PUSH2 0x526 DUP6 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x4CF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x4E7 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x4FF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP6 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x517 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0xCBB JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x4B5 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x587 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP1 PUSH2 0x1450 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x15 DUP4 MSTORE PUSH32 0x5441524745545F4E4F545F415554484F52495A45440000000000000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x621 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0x7B7 JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x69F JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x7AF JUMPI PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 LT PUSH2 0x6F7 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x2 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x72A JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 PUSH2 0x7A9 SWAP1 DUP3 PUSH2 0xF0A JUMP JUMPDEST POP PUSH2 0x7B7 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x66F JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH32 0x1F32C1B084E2DE0713B8FB16BD46BB9DF710A3DBEAE2F3CA93AF46E016DCC6B0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x13 DUP2 MSTORE PUSH32 0x494E4445585F4F55545F4F465F424F554E445300000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP3 LT PUSH2 0x88B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x8B2 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 ADD SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH32 0x415554484F52495A45445F414444524553535F4D49534D415443480000000000 SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND EQ PUSH2 0x947 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 LT PUSH2 0x9C3 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x2 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x9F6 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 PUSH2 0xA75 SWAP1 DUP3 PUSH2 0xF0A JUMP JUMPDEST POP PUSH1 0x40 MLOAD CALLER SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH32 0x1F32C1B084E2DE0713B8FB16BD46BB9DF710A3DBEAE2F3CA93AF46E016DCC6B0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x15 DUP4 MSTORE PUSH32 0x53454E4445525F4E4F545F415554484F52495A45440000000000000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xFF AND ISZERO ISZERO PUSH2 0xB41 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST POP PUSH2 0x52E DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP DUP5 DUP5 DUP5 PUSH2 0xCBB JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xC00 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xBD5 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xC5B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP1 PUSH2 0x1450 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xCB8 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xCCB DUP8 PUSH1 0x0 PUSH2 0xE3F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND PUSH1 0x4 DUP5 ADD MSTORE DUP9 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP8 SWAP1 MSTORE SWAP2 SWAP5 POP SWAP1 SWAP3 POP PUSH1 0x64 DUP1 DUP3 ADD SWAP1 PUSH1 0x20 SWAP1 DUP4 SWAP1 DUP2 PUSH1 0x0 DUP10 GAS CALL SWAP3 POP POP POP DUP1 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5452414E534645525F4641494C45440000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0xDA9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST POP RETURNDATASIZE ISZERO PUSH2 0xDC7 JUMPI POP PUSH1 0x0 RETURNDATASIZE PUSH1 0x20 EQ ISZERO PUSH2 0xDC7 JUMPI PUSH1 0x20 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xF DUP2 MSTORE PUSH32 0x5452414E534645525F4641494C45440000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP2 ISZERO ISZERO PUSH2 0xE35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0xEE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST POP POP PUSH1 0x14 DUP2 DUP4 ADD DUP2 ADD MLOAD SWAP2 ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 GT ISZERO PUSH2 0xF2E JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH2 0xF2E SWAP2 DUP2 ADD SWAP1 DUP4 ADD PUSH2 0xF33 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xB83 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xF4D JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xF39 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF5D DUP3 CALLDATALOAD PUSH2 0x1506 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0xF75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xF88 PUSH2 0xF83 DUP3 PUSH2 0x1495 JUMP JUMPDEST PUSH2 0x146E JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xFAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFD9 JUMPI DUP2 PUSH2 0xFC3 DUP9 DUP3 PUSH2 0xF51 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xFB0 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0xFF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1002 PUSH2 0xF83 DUP3 PUSH2 0x1495 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFD9 JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x102A DUP9 DUP3 PUSH2 0x10F9 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1014 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x1051 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x105F PUSH2 0xF83 DUP3 PUSH2 0x1495 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x1084 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFD9 JUMPI DUP2 PUSH2 0x109A DUP9 DUP3 PUSH2 0x1148 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1087 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1F DUP4 ADD DUP5 SGT PUSH2 0x10C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x10F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x110A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1118 PUSH2 0xF83 DUP3 PUSH2 0x14B6 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x113F DUP4 DUP3 DUP5 PUSH2 0x152A JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF5D DUP3 CALLDATALOAD PUSH2 0xB83 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1172 DUP5 DUP5 PUSH2 0xF51 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x118D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1199 DUP6 DUP6 PUSH2 0xF51 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x11AA DUP6 DUP3 DUP7 ADD PUSH2 0x1148 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x11CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x11E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11ED DUP8 DUP3 DUP9 ADD PUSH2 0xFE3 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x120A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1216 DUP8 DUP3 DUP9 ADD PUSH2 0xF64 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1233 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x123F DUP8 DUP3 DUP9 ADD PUSH2 0xF64 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x125C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1268 DUP8 DUP3 DUP9 ADD PUSH2 0x1040 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x128C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12AF DUP9 DUP3 DUP10 ADD PUSH2 0x10B0 JUMP JUMPDEST SWAP6 POP SWAP6 POP POP PUSH1 0x20 PUSH2 0x12C2 DUP9 DUP3 DUP10 ADD PUSH2 0xF51 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x12D3 DUP9 DUP3 DUP10 ADD PUSH2 0xF51 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x12E4 DUP9 DUP3 DUP10 ADD PUSH2 0x1148 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1303 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1172 DUP5 DUP5 PUSH2 0x1148 JUMP JUMPDEST PUSH2 0x1318 DUP2 PUSH2 0x1506 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1329 DUP3 PUSH2 0x1502 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH2 0x133B DUP4 PUSH2 0x14FC JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x136B JUMPI PUSH2 0x1351 DUP7 DUP4 MLOAD PUSH2 0x130F JUMP JUMPDEST PUSH2 0x135A DUP3 PUSH2 0x14FC JUMP JUMPDEST PUSH1 0x20 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x133E JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1318 DUP2 PUSH2 0x151F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1389 DUP3 PUSH2 0x1502 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x139D DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1536 JUMP JUMPDEST PUSH2 0x13A6 DUP2 PUSH2 0x1566 JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x33 DUP2 MSTORE PUSH32 0x4F6E6C7920636F6E7472616374206F776E657220697320616C6C6F7765642074 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6F2063616C6C2074686973206D6574686F642E00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH2 0x1318 DUP2 PUSH2 0x1524 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xF04 DUP3 DUP5 PUSH2 0x130F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xF5D DUP2 DUP5 PUSH2 0x131E JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xF04 DUP3 DUP5 PUSH2 0x1375 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xF5D DUP2 DUP5 PUSH2 0x137E JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xF04 DUP2 PUSH2 0x13B3 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xF04 DUP3 DUP5 PUSH2 0x1409 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x148D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x14AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x14CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1551 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1539 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1560 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP1 JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 GT 0xe7 0xc6 PUSH32 0x7FC9783FDDBD967A3636D2D4B2D521D1222720EB42E2E7B228DE72786C657870 PUSH6 0x72696D656E74 PUSH2 0x6CF5 STOP CALLDATACOPY ",
				"sourceMap": "786:361:0:-;;;363:5:14;:18;;-1:-1:-1;;;;;;363:18:14;371:10;363:18;;;786:361:0;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166342f1181e81146100b3578063494503d4146100d5578063563c875d1461010b578063707129391461012b5780638da5cb5b1461014b5780639ad2674414610160578063a85e59e414610180578063ae25532e146101a0578063b9181611146101c2578063d39de6e9146101ef578063f2fde38b14610211575b600080fd5b3480156100bf57600080fd5b506100d36100ce366004611154565b610231565b005b3480156100e157600080fd5b506100f56100f03660046112f1565b6103f6565b6040516101029190611412565b60405180910390f35b34801561011757600080fd5b506100d36101263660046111b4565b61042b565b34801561013757600080fd5b506100d3610146366004611154565b610535565b34801561015757600080fd5b506100f56107fe565b34801561016c57600080fd5b506100d361017b36600461117a565b61081a565b34801561018c57600080fd5b506100d361019b366004611274565b610abd565b3480156101ac57600080fd5b506101b5610b80565b6040516101029190611460565b3480156101ce57600080fd5b506101e26101dd366004611154565b610b86565b6040516101029190611431565b3480156101fb57600080fd5b50610204610b9b565b6040516101029190611420565b34801561021d57600080fd5b506100d361022c366004611154565b610c0a565b60005473ffffffffffffffffffffffffffffffffffffffff16331461028b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028290611450565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020908152604091829020548251808401909352601983527f5441524745545f414c52454144595f415554484f52495a4544000000000000009183019190915260ff1615610324576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282919061143f565b5073ffffffffffffffffffffffffffffffffffffffff8116600081815260016020819052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168317905560028054928301815583527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055513392917f3147867c59d17e8fa9d522465651d44aae0a9e38f902f3475b97e58072f0ed4c91a350565b600280548290811061040457fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b336000908152600160209081526040808320548151808301909252601582527f53454e4445525f4e4f545f415554484f52495a45440000000000000000000000928201929092529060ff1615156104af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282919061143f565b50600090505b845181101561052e5761052685828151811015156104cf57fe5b9060200190602002015185838151811015156104e757fe5b9060200190602002015185848151811015156104ff57fe5b90602001906020020151858581518110151561051757fe5b90602001906020020151610cbb565b6001016104b5565b5050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028290611450565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020908152604091829020548251808401909352601583527f5441524745545f4e4f545f415554484f52495a454400000000000000000000009183019190915260ff161515610621576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282919061143f565b505073ffffffffffffffffffffffffffffffffffffffff8116600090815260016020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555b6002548110156107b7578173ffffffffffffffffffffffffffffffffffffffff1660028281548110151561069f57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156107af57600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081106106f757fe5b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff909216918390811061072a57fe5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01906107a99082610f0a565b506107b7565b60010161066f565b604051339073ffffffffffffffffffffffffffffffffffffffff8416907f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b090600090a35050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60025460408051808201909152601381527f494e4445585f4f55545f4f465f424f554e445300000000000000000000000000602082015290821061088b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282919061143f565b508173ffffffffffffffffffffffffffffffffffffffff166002828154811015156108b257fe5b6000918252602091829020015460408051808201909152601b81527f415554484f52495a45445f414444524553535f4d49534d41544348000000000092810192909252909173ffffffffffffffffffffffffffffffffffffffff90911614610947576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282919061143f565b5073ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081106109c357fe5b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff90921691839081106109f657fe5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190610a759082610f0a565b50604051339073ffffffffffffffffffffffffffffffffffffffff8416907f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b090600090a35050565b33600090815260016020908152604091829020548251808401909352601583527f53454e4445525f4e4f545f415554484f52495a454400000000000000000000009183019190915260ff161515610b41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282919061143f565b5061052e85858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050848484610cbb565b60015b90565b60016020526000908152604090205460ff1681565b60606002805480602002602001604051908101604052809291908181526020018280548015610c0057602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610bd5575b5050505050905090565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028290611450565b73ffffffffffffffffffffffffffffffffffffffff811615610cb857600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790555b50565b6000806000610ccb876000610e3f565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff898116600484015288166024830152604482018790529194509092506064808201906020908390816000895af192505050806040805190810160405280600f81526020017f5452414e534645525f4641494c45440000000000000000000000000000000000815250901515610da9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282919061143f565b503d15610dc7575060003d60201415610dc75760206000803e506000515b60408051808201909152600f81527f5452414e534645525f4641494c454400000000000000000000000000000000006020820152811515610e35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282919061143f565b5050505050505050565b60008160140183511015606060405190810160405280602681526020017f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524581526020017f5155495245440000000000000000000000000000000000000000000000000000815250901515610ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282919061143f565b5050601481830181015191019073ffffffffffffffffffffffffffffffffffffffff165b92915050565b815481835581811115610f2e57600083815260209020610f2e918101908301610f33565b505050565b610b8391905b80821115610f4d5760008155600101610f39565b5090565b6000610f5d8235611506565b9392505050565b6000601f82018313610f7557600080fd5b8135610f88610f8382611495565b61146e565b91508181835260208401935060208101905083856020840282011115610fad57600080fd5b60005b83811015610fd95781610fc38882610f51565b8452506020928301929190910190600101610fb0565b5050505092915050565b6000601f82018313610ff457600080fd5b8135611002610f8382611495565b81815260209384019390925082018360005b83811015610fd9578135860161102a88826110f9565b8452506020928301929190910190600101611014565b6000601f8201831361105157600080fd5b813561105f610f8382611495565b9150818183526020840193506020810190508385602084028201111561108457600080fd5b60005b83811015610fd9578161109a8882611148565b8452506020928301929190910190600101611087565b600080601f830184136110c257600080fd5b50813567ffffffffffffffff8111156110da57600080fd5b6020830191508360018202830111156110f257600080fd5b9250929050565b6000601f8201831361110a57600080fd5b8135611118610f83826114b6565b9150808252602083016020830185838301111561113457600080fd5b61113f83828461152a565b50505092915050565b6000610f5d8235610b83565b60006020828403121561116657600080fd5b60006111728484610f51565b949350505050565b6000806040838503121561118d57600080fd5b60006111998585610f51565b92505060206111aa85828601611148565b9150509250929050565b600080600080608085870312156111ca57600080fd5b843567ffffffffffffffff8111156111e157600080fd5b6111ed87828801610fe3565b945050602085013567ffffffffffffffff81111561120a57600080fd5b61121687828801610f64565b935050604085013567ffffffffffffffff81111561123357600080fd5b61123f87828801610f64565b925050606085013567ffffffffffffffff81111561125c57600080fd5b61126887828801611040565b91505092959194509250565b60008060008060006080868803121561128c57600080fd5b853567ffffffffffffffff8111156112a357600080fd5b6112af888289016110b0565b955095505060206112c288828901610f51565b93505060406112d388828901610f51565b92505060606112e488828901611148565b9150509295509295909350565b60006020828403121561130357600080fd5b60006111728484611148565b61131881611506565b82525050565b600061132982611502565b80845260208401935061133b836114fc565b60005b8281101561136b5761135186835161130f565b61135a826114fc565b60209690960195915060010161133e565b5093949350505050565b6113188161151f565b600061138982611502565b80845261139d816020860160208601611536565b6113a681611566565b9093016020019392505050565b603381527f4f6e6c7920636f6e7472616374206f776e657220697320616c6c6f776564207460208201527f6f2063616c6c2074686973206d6574686f642e00000000000000000000000000604082015260600190565b61131881611524565b60208101610f04828461130f565b60208082528101610f5d818461131e565b60208101610f048284611375565b60208082528101610f5d818461137e565b60208082528101610f04816113b3565b60208101610f048284611409565b60405181810167ffffffffffffffff8111828210171561148d57600080fd5b604052919050565b600067ffffffffffffffff8211156114ac57600080fd5b5060209081020190565b600067ffffffffffffffff8211156114cd57600080fd5b506020601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b60200190565b5190565b73ffffffffffffffffffffffffffffffffffffffff1690565b151590565b60ff1690565b82818337506000910152565b60005b83811015611551578181015183820152602001611539565b83811115611560576000848401525b50505050565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016905600a265627a7a7230582011e7c67f7fc9783fddbd967a3636d2d4b2d521d1222720eb42e2e7b228de72786c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xAE JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x42F1181E DUP2 EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x494503D4 EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x563C875D EQ PUSH2 0x10B JUMPI DUP1 PUSH4 0x70712939 EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x14B JUMPI DUP1 PUSH4 0x9AD26744 EQ PUSH2 0x160 JUMPI DUP1 PUSH4 0xA85E59E4 EQ PUSH2 0x180 JUMPI DUP1 PUSH4 0xAE25532E EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0xB9181611 EQ PUSH2 0x1C2 JUMPI DUP1 PUSH4 0xD39DE6E9 EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x211 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0xCE CALLDATASIZE PUSH1 0x4 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH2 0xF0 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F1 JUMP JUMPDEST PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x102 SWAP2 SWAP1 PUSH2 0x1412 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x117 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x126 CALLDATASIZE PUSH1 0x4 PUSH2 0x11B4 JUMP JUMPDEST PUSH2 0x42B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x137 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x146 CALLDATASIZE PUSH1 0x4 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0x535 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x157 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH2 0x7FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x17B CALLDATASIZE PUSH1 0x4 PUSH2 0x117A JUMP JUMPDEST PUSH2 0x81A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x1274 JUMP JUMPDEST PUSH2 0xABD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B5 PUSH2 0xB80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x102 SWAP2 SWAP1 PUSH2 0x1460 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E2 PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0xB86 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x102 SWAP2 SWAP1 PUSH2 0x1431 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH2 0xB9B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x102 SWAP2 SWAP1 PUSH2 0x1420 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x22C CALLDATASIZE PUSH1 0x4 PUSH2 0x1154 JUMP JUMPDEST PUSH2 0xC0A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x28B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP1 PUSH2 0x1450 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x19 DUP4 MSTORE PUSH32 0x5441524745545F414C52454144595F415554484F52495A454400000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xFF AND ISZERO PUSH2 0x324 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP4 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP3 DUP4 ADD DUP2 SSTORE DUP4 MSTORE PUSH32 0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE SWAP1 SWAP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP5 OR SWAP1 SSTORE MLOAD CALLER SWAP3 SWAP2 PUSH32 0x3147867C59D17E8FA9D522465651D44AAE0A9E38F902F3475B97E58072F0ED4C SWAP2 LOG3 POP JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x404 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x15 DUP3 MSTORE PUSH32 0x53454E4445525F4E4F545F415554484F52495A45440000000000000000000000 SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x4AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x52E JUMPI PUSH2 0x526 DUP6 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x4CF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x4E7 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x4FF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP6 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x517 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0xCBB JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x4B5 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x587 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP1 PUSH2 0x1450 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x15 DUP4 MSTORE PUSH32 0x5441524745545F4E4F545F415554484F52495A45440000000000000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x621 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0x7B7 JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x69F JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x7AF JUMPI PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 LT PUSH2 0x6F7 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x2 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x72A JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 PUSH2 0x7A9 SWAP1 DUP3 PUSH2 0xF0A JUMP JUMPDEST POP PUSH2 0x7B7 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x66F JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH32 0x1F32C1B084E2DE0713B8FB16BD46BB9DF710A3DBEAE2F3CA93AF46E016DCC6B0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x13 DUP2 MSTORE PUSH32 0x494E4445585F4F55545F4F465F424F554E445300000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP3 LT PUSH2 0x88B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x8B2 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 ADD SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH32 0x415554484F52495A45445F414444524553535F4D49534D415443480000000000 SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND EQ PUSH2 0x947 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 LT PUSH2 0x9C3 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x2 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x9F6 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 PUSH2 0xA75 SWAP1 DUP3 PUSH2 0xF0A JUMP JUMPDEST POP PUSH1 0x40 MLOAD CALLER SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH32 0x1F32C1B084E2DE0713B8FB16BD46BB9DF710A3DBEAE2F3CA93AF46E016DCC6B0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x15 DUP4 MSTORE PUSH32 0x53454E4445525F4E4F545F415554484F52495A45440000000000000000000000 SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xFF AND ISZERO ISZERO PUSH2 0xB41 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST POP PUSH2 0x52E DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP DUP5 DUP5 DUP5 PUSH2 0xCBB JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xC00 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xBD5 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xC5B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP1 PUSH2 0x1450 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xCB8 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xCCB DUP8 PUSH1 0x0 PUSH2 0xE3F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND PUSH1 0x4 DUP5 ADD MSTORE DUP9 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP8 SWAP1 MSTORE SWAP2 SWAP5 POP SWAP1 SWAP3 POP PUSH1 0x64 DUP1 DUP3 ADD SWAP1 PUSH1 0x20 SWAP1 DUP4 SWAP1 DUP2 PUSH1 0x0 DUP10 GAS CALL SWAP3 POP POP POP DUP1 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5452414E534645525F4641494C45440000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0xDA9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST POP RETURNDATASIZE ISZERO PUSH2 0xDC7 JUMPI POP PUSH1 0x0 RETURNDATASIZE PUSH1 0x20 EQ ISZERO PUSH2 0xDC7 JUMPI PUSH1 0x20 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xF DUP2 MSTORE PUSH32 0x5452414E534645525F4641494C45440000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP2 ISZERO ISZERO PUSH2 0xE35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 ISZERO ISZERO PUSH2 0xEE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x282 SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST POP POP PUSH1 0x14 DUP2 DUP4 ADD DUP2 ADD MLOAD SWAP2 ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 GT ISZERO PUSH2 0xF2E JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH2 0xF2E SWAP2 DUP2 ADD SWAP1 DUP4 ADD PUSH2 0xF33 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xB83 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xF4D JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xF39 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF5D DUP3 CALLDATALOAD PUSH2 0x1506 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0xF75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xF88 PUSH2 0xF83 DUP3 PUSH2 0x1495 JUMP JUMPDEST PUSH2 0x146E JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xFAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFD9 JUMPI DUP2 PUSH2 0xFC3 DUP9 DUP3 PUSH2 0xF51 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xFB0 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0xFF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1002 PUSH2 0xF83 DUP3 PUSH2 0x1495 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFD9 JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x102A DUP9 DUP3 PUSH2 0x10F9 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1014 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x1051 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x105F PUSH2 0xF83 DUP3 PUSH2 0x1495 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x1084 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFD9 JUMPI DUP2 PUSH2 0x109A DUP9 DUP3 PUSH2 0x1148 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1087 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1F DUP4 ADD DUP5 SGT PUSH2 0x10C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x10F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x110A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1118 PUSH2 0xF83 DUP3 PUSH2 0x14B6 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x113F DUP4 DUP3 DUP5 PUSH2 0x152A JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF5D DUP3 CALLDATALOAD PUSH2 0xB83 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1172 DUP5 DUP5 PUSH2 0xF51 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x118D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1199 DUP6 DUP6 PUSH2 0xF51 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x11AA DUP6 DUP3 DUP7 ADD PUSH2 0x1148 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x11CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x11E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11ED DUP8 DUP3 DUP9 ADD PUSH2 0xFE3 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x120A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1216 DUP8 DUP3 DUP9 ADD PUSH2 0xF64 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1233 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x123F DUP8 DUP3 DUP9 ADD PUSH2 0xF64 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x125C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1268 DUP8 DUP3 DUP9 ADD PUSH2 0x1040 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x128C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12AF DUP9 DUP3 DUP10 ADD PUSH2 0x10B0 JUMP JUMPDEST SWAP6 POP SWAP6 POP POP PUSH1 0x20 PUSH2 0x12C2 DUP9 DUP3 DUP10 ADD PUSH2 0xF51 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x12D3 DUP9 DUP3 DUP10 ADD PUSH2 0xF51 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x12E4 DUP9 DUP3 DUP10 ADD PUSH2 0x1148 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1303 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1172 DUP5 DUP5 PUSH2 0x1148 JUMP JUMPDEST PUSH2 0x1318 DUP2 PUSH2 0x1506 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1329 DUP3 PUSH2 0x1502 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH2 0x133B DUP4 PUSH2 0x14FC JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x136B JUMPI PUSH2 0x1351 DUP7 DUP4 MLOAD PUSH2 0x130F JUMP JUMPDEST PUSH2 0x135A DUP3 PUSH2 0x14FC JUMP JUMPDEST PUSH1 0x20 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x133E JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1318 DUP2 PUSH2 0x151F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1389 DUP3 PUSH2 0x1502 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x139D DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1536 JUMP JUMPDEST PUSH2 0x13A6 DUP2 PUSH2 0x1566 JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x33 DUP2 MSTORE PUSH32 0x4F6E6C7920636F6E7472616374206F776E657220697320616C6C6F7765642074 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6F2063616C6C2074686973206D6574686F642E00000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH2 0x1318 DUP2 PUSH2 0x1524 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xF04 DUP3 DUP5 PUSH2 0x130F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xF5D DUP2 DUP5 PUSH2 0x131E JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xF04 DUP3 DUP5 PUSH2 0x1375 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xF5D DUP2 DUP5 PUSH2 0x137E JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xF04 DUP2 PUSH2 0x13B3 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xF04 DUP3 DUP5 PUSH2 0x1409 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x148D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x14AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x14CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1551 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1539 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1560 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP1 JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 GT 0xe7 0xc6 PUSH32 0x7FC9783FDDBD967A3636D2D4B2D521D1222720EB42E2E7B228DE72786C657870 PUSH6 0x72696D656E74 PUSH2 0x6CF5 STOP CALLDATACOPY ",
				"sourceMap": "786:361:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1244:318:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1244:318:2;;;;;;;;;;;1129:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1129:28:2;;;;;;;;;;;;;;;;;;;;;;;;;1679:431:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1679:431:1;;;;;;;;;1676:542:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1676:542:2;;;;;;;;;292:20:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;292:20:14;;;;2391:525:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2391:525:2;;;;;;;;;1037:287:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1037:287:1;;;;;;;;;1033:112:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1033:112:0;;;;;;;;;;;;1080:43:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1080:43:2;;;;;;;;;;;;;;;;;3013:138;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3013:138:2;;;;;;;;;;;;566:167:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;566:167:14;;;;;;;;;1244:318:2;460:5:14;;;;446:10;:19;425:117;;;;;;;;;;;;;;;;;;;;;;1361:18:2;;;;;;;:10;:18;;;;;;;;;;1393:25;;;;;;;;;;;;;;;;;;;1361:18;;1360:19;1339:89;;;;;;;;;;;;;;;-1:-1:-1;1439:18:2;;;;;;;1460:4;1439:18;;;;;;;;:25;;;;;;;;1474:11;27:10:-1;;23:18;;;45:23;;1474:24:2;;;;;;;;;;;;;;1513:42;1544:10;;1439:18;1513:42;;;1244:318;:::o;1129:28::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1129:28:2;:::o;1679:431:1:-;1000:10:2;1897:9:1;989:22:2;;;:10;:22;;;;;;;;;1025:21;;;;;;;;;;;;;;;;;;;;989:22;;968:88;;;;;;;;;;;;;;;;;;1909:1:1;1897:13;;1892:212;1916:9;:16;1912:1;:20;1892:212;;;1953:140;1991:9;2001:1;1991:12;;;;;;;;;;;;;;;;;;2021:4;2026:1;2021:7;;;;;;;;;;;;;;;;;;2046:2;2049:1;2046:5;;;;;;;;;;;;;;;;;;2069:7;2077:1;2069:10;;;;;;;;;;;;;;;;;;1953:20;:140::i;:::-;1934:3;;1892:212;;;1679:431;;;;;:::o;1676:542:2:-;1909:6;460:5:14;;;;446:10;:19;425:117;;;;;;;;;;;;;;1795:18:2;;;;;;;:10;:18;;;;;;;;;;1827:21;;;;;;;;;;;;;;;;;;;1795:18;;1774:84;;;;;;;;;;;;;;;;;-1:-1:-1;;1876:18:2;;;;;;;:10;:18;;;;;1869:25;;;;;;1904:249;1925:11;:18;1921:22;;1904:249;;;1986:6;1968:24;;:11;1980:1;1968:14;;;;;;;;;;;;;;;;;;;;;;:24;1964:179;;;2029:11;2041:18;;:22;;;;2029:35;;;;;;;;;;;;;;;;2012:11;:14;;2029:35;;;;;2024:1;;2012:14;;;;;;;;;;;;;;;:52;;;;;;;;;;;;;;;2082:11;:23;;;;;;;;;:::i;:::-;;2123:5;;1964:179;1945:3;;1904:249;;;2167:44;;2200:10;;2167:44;;;;;;;;;1676:542;;:::o;292:20:14:-;;;;;;:::o;2391:525:2:-;2544:11;:18;2576:19;;;;;;;;;;;;;;;;;;2536:26;;2515:90;;;;;;;;;;;;;;;;2658:6;2636:28;;:11;2648:5;2636:18;;;;;;;;;;;;;;;;;;;;;2678:27;;;;;;;;;;;;;;;;;;;;;;2636:18;;;;:28;2615:100;;;;;;;;;;;;;;;-1:-1:-1;2733:18:2;;;;;;;:10;:18;;;;;2726:25;;;;;;2782:11;2794:18;;:22;;;;2782:35;;;;;;;;;;;;;;;;2761:11;:18;;2782:35;;;;;2773:5;;2761:18;;;;;;;;;;;;;;;:56;;;;;;;;;;;;;;;2827:11;:23;;;;;;;;;:::i;:::-;-1:-1:-1;2865:44:2;;2898:10;;2865:44;;;;;;;;;2391:525;;:::o;1037:287:1:-;1000:10:2;989:22;;;;:10;:22;;;;;;;;;;1025:21;;;;;;;;;;;;;;;;;;;989:22;;968:88;;;;;;;;;;;;;;;;;;1210:107:1;1244:9;;1210:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1267:4;1285:2;1301:6;1210:20;:107::i;1033:112:0:-;933:1;1033:112;;:::o;1080:43:2:-;;;;;;;;;;;;;;;:::o;3013:138::-;3094:9;3133:11;3126:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3013:138;:::o;566:167:14:-;460:5;;;;446:10;:19;425:117;;;;;;;;;;;;;;662:22;;;;658:69;;700:5;:16;;;;;;;;;;658:69;566:167;:::o;1092:3311:3:-;1287:13;2230:27;2310:12;1303:25;1315:9;1326:1;1303:11;:25::i;:::-;2523:2;2517:9;2260:40;2771:37;;;2260:31;3077:53;;;3073:1;3060:15;;3053:78;3169:51;;3164:2;3151:16;;3144:77;3254:2;3241:16;;3234:32;;;1287:41;;-1:-1:-1;2260:40:3;;-1:-1:-1;2641:3:3;2628:17;;;;3548:2;;2517:9;;;-1:-1:-1;1287:41:3;3398:3;3376:188;3365:199;;2341:1233;;3604:7;3625:15;;;;;;;;;;;;;;;;;;3583:67;;;;;;;;;;;;;;;;;;;4029:14;4026:2;;;-1:-1:-1;4073:1:3;4097:14;4113:2;4094:22;4091:2;;;4235;4232:1;4229;4214:24;-1:-1:-1;4276:1:3;4270:8;4091:2;4371:15;;;;;;;;;;;;;;;;;4329:67;;;;;;;;;;;;;;;;;;;1092:3311;;;;;;;:::o;2855:884:11:-;2976:14;3039:5;3047:2;3039:10;3027:1;:8;:22;;3091:38;;;;;;;;;;;;;;;;;;;;;;;3006:133;;;;;;;;;;;;;;;;;;-1:-1:-1;;3386:2:11;3641:13;;;;;3635:20;3377:11;;;3657:42;3631:69;2855:884;;;;;:::o;786:361:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;5:118:-1;;72:46;110:6;97:20;72:46;;;63:55;57:66;-1:-1;;;57:66;148:707;;258:4;246:17;;242:27;-1:-1;232:2;;283:1;280;273:12;232:2;320:6;307:20;342:80;357:64;414:6;357:64;;;342:80;;;333:89;;439:5;464:6;457:5;450:21;494:4;486:6;482:17;472:27;;516:4;511:3;507:14;500:21;;569:6;616:3;608:4;600:6;596:17;591:3;587:27;584:36;581:2;;;633:1;630;623:12;581:2;658:1;643:206;668:6;665:1;662:13;643:206;;;726:3;748:37;781:3;769:10;748:37;;;736:50;;-1:-1;809:4;800:14;;;;828;;;;;690:1;683:9;643:206;;;647:14;225:630;;;;;;;;879:693;;994:4;982:17;;978:27;-1:-1;968:2;;1019:1;1016;1009:12;968:2;1056:6;1043:20;1078:85;1093:69;1155:6;1093:69;;1078:85;1191:21;;;1235:4;1223:17;;;;1069:94;;-1:-1;1248:14;;1223:17;1343:1;1328:238;1353:6;1350:1;1347:13;1328:238;;;1436:3;1423:17;1415:6;1411:30;1460:42;1498:3;1486:10;1460:42;;;1448:55;;-1:-1;1526:4;1517:14;;;;1545;;;;;1375:1;1368:9;1328:238;;1598:707;;1708:4;1696:17;;1692:27;-1:-1;1682:2;;1733:1;1730;1723:12;1682:2;1770:6;1757:20;1792:80;1807:64;1864:6;1807:64;;1792:80;1783:89;;1889:5;1914:6;1907:5;1900:21;1944:4;1936:6;1932:17;1922:27;;1966:4;1961:3;1957:14;1950:21;;2019:6;2066:3;2058:4;2050:6;2046:17;2041:3;2037:27;2034:36;2031:2;;;2083:1;2080;2073:12;2031:2;2108:1;2093:206;2118:6;2115:1;2112:13;2093:206;;;2176:3;2198:37;2231:3;2219:10;2198:37;;;2186:50;;-1:-1;2259:4;2250:14;;;;2278;;;;;2140:1;2133:9;2093:206;;2327:335;;;2434:4;2422:17;;2418:27;-1:-1;2408:2;;2459:1;2456;2449:12;2408:2;-1:-1;2479:20;;2519:18;2508:30;;2505:2;;;2551:1;2548;2541:12;2505:2;2585:4;2577:6;2573:17;2561:29;;2635:3;2628;2620:6;2616:16;2606:8;2602:31;2599:40;2596:2;;;2652:1;2649;2642:12;2596:2;2401:261;;;;;;2671:432;;2761:4;2749:17;;2745:27;-1:-1;2735:2;;2786:1;2783;2776:12;2735:2;2823:6;2810:20;2845:60;2860:44;2897:6;2860:44;;2845:60;2836:69;;2925:6;2918:5;2911:21;2961:4;2953:6;2949:17;2994:4;2987:5;2983:16;3029:3;3020:6;3015:3;3011:16;3008:25;3005:2;;;3046:1;3043;3036:12;3005:2;3056:41;3090:6;3085:3;3080;3056:41;;;2728:375;;;;;;;;3111:118;;3178:46;3216:6;3203:20;3178:46;;3236:241;;3340:2;3328:9;3319:7;3315:23;3311:32;3308:2;;;3356:1;3353;3346:12;3308:2;3391:1;3408:53;3453:7;3433:9;3408:53;;;3398:63;3302:175;-1:-1;;;;3302:175;3484:366;;;3605:2;3593:9;3584:7;3580:23;3576:32;3573:2;;;3621:1;3618;3611:12;3573:2;3656:1;3673:53;3718:7;3698:9;3673:53;;;3663:63;;3635:97;3763:2;3781:53;3826:7;3817:6;3806:9;3802:22;3781:53;;;3771:63;;3742:98;3567:283;;;;;;3857:1171;;;;;4117:3;4105:9;4096:7;4092:23;4088:33;4085:2;;;4134:1;4131;4124:12;4085:2;4169:31;;4220:18;4209:30;;4206:2;;;4252:1;4249;4242:12;4206:2;4272:83;4347:7;4338:6;4327:9;4323:22;4272:83;;;4262:93;;4148:213;4420:2;4409:9;4405:18;4392:32;4444:18;4436:6;4433:30;4430:2;;;4476:1;4473;4466:12;4430:2;4496:78;4566:7;4557:6;4546:9;4542:22;4496:78;;;4486:88;;4371:209;4639:2;4628:9;4624:18;4611:32;4663:18;4655:6;4652:30;4649:2;;;4695:1;4692;4685:12;4649:2;4715:78;4785:7;4776:6;4765:9;4761:22;4715:78;;;4705:88;;4590:209;4858:2;4847:9;4843:18;4830:32;4882:18;4874:6;4871:30;4868:2;;;4914:1;4911;4904:12;4868:2;4934:78;5004:7;4995:6;4984:9;4980:22;4934:78;;;4924:88;;4809:209;4079:949;;;;;;;;5035:741;;;;;;5209:3;5197:9;5188:7;5184:23;5180:33;5177:2;;;5226:1;5223;5216:12;5177:2;5261:31;;5312:18;5301:30;;5298:2;;;5344:1;5341;5334:12;5298:2;5372:64;5428:7;5419:6;5408:9;5404:22;5372:64;;;5354:82;;;;5240:202;5473:2;5491:53;5536:7;5527:6;5516:9;5512:22;5491:53;;;5481:63;;5452:98;5581:2;5599:53;5644:7;5635:6;5624:9;5620:22;5599:53;;;5589:63;;5560:98;5689:2;5707:53;5752:7;5743:6;5732:9;5728:22;5707:53;;;5697:63;;5668:98;5171:605;;;;;;;;;5783:241;;5887:2;5875:9;5866:7;5862:23;5858:32;5855:2;;;5903:1;5900;5893:12;5855:2;5938:1;5955:53;6000:7;5980:9;5955:53;;6031:110;6104:31;6129:5;6104:31;;;6099:3;6092:44;6086:55;;;6179:590;;6314:54;6362:5;6314:54;;;6386:6;6381:3;6374:19;6410:4;6405:3;6401:14;6394:21;;6455:56;6505:5;6455:56;;;6532:1;6517:230;6542:6;6539:1;6536:13;6517:230;;;6582:53;6631:3;6622:6;6616:13;6582:53;;;6652:60;6705:6;6652:60;;;6735:4;6726:14;;;;;6642:70;-1:-1;6564:1;6557:9;6517:230;;;-1:-1;6760:3;;6293:476;-1:-1;;;;6293:476;6777:101;6844:28;6866:5;6844:28;;6885:292;;6983:35;7012:5;6983:35;;;7035:6;7030:3;7023:19;7047:63;7103:6;7096:4;7091:3;7087:14;7080:4;7073:5;7069:16;7047:63;;;7142:29;7164:6;7142:29;;;7122:50;;;7135:4;7122:50;;6963:214;-1:-1;;;6963:214;7185:397;7340:2;7328:15;;7377:66;7372:2;7363:12;;7356:88;7478:66;7473:2;7464:12;;7457:88;7573:2;7564:12;;7321:261;7590:104;7659:29;7682:5;7659:29;;7701:193;7809:2;7794:18;;7823:61;7798:9;7857:6;7823:61;;7901:341;8059:2;8073:47;;;8044:18;;8134:98;8044:18;8218:6;8134:98;;8249:181;8351:2;8336:18;;8365:55;8340:9;8393:6;8365:55;;8437:273;8561:2;8575:47;;;8546:18;;8636:64;8546:18;8686:6;8636:64;;8717:387;8898:2;8912:47;;;8883:18;;8973:121;8883:18;8973:121;;9111:185;9215:2;9200:18;;9229:57;9204:9;9259:6;9229:57;;9303:256;9365:2;9359:9;9391:17;;;9466:18;9451:34;;9487:22;;;9448:62;9445:2;;;9523:1;9520;9513:12;9445:2;9539;9532:22;9343:216;;-1:-1;9343:216;9566:258;;9725:18;9717:6;9714:30;9711:2;;;9757:1;9754;9747:12;9711:2;-1:-1;9786:4;9774:17;;;9804:15;;9648:176;10366:254;;10505:18;10497:6;10494:30;10491:2;;;10537:1;10534;10527:12;10491:2;-1:-1;10610:4;10581;10558:17;;;;10577:9;10554:33;10600:15;;10428:192;10629:121;10738:4;10726:17;;10707:43;10759:107;10849:12;;10833:33;11099:128;11179:42;11168:54;;11151:76;11234:92;11307:13;11300:21;;11283:43;11333:88;11411:4;11400:16;;11383:38;11650:145;11731:6;11726:3;11721;11708:30;-1:-1;11787:1;11769:16;;11762:27;11701:94;11804:268;11869:1;11876:101;11890:6;11887:1;11884:13;11876:101;;;11957:11;;;11951:18;11938:11;;;11931:39;11912:2;11905:10;11876:101;;;11992:6;11989:1;11986:13;11983:2;;;12057:1;12048:6;12043:3;12039:16;12032:27;11983:2;11853:219;;;;;12080:97;12168:2;12148:14;12164:7;12144:28;;12128:49"
			}
		}
	},
	"sources": {
		"current/protocol/AssetProxy/ERC20Proxy.sol": {
			"id": 0
		},
		"current/protocol/AssetProxy/MixinAssetProxy.sol": {
			"id": 1
		},
		"current/protocol/AssetProxy/MixinAuthorizable.sol": {
			"id": 2
		},
		"current/protocol/AssetProxy/MixinERC20Transfer.sol": {
			"id": 3
		},
		"current/protocol/AssetProxy/interfaces/IAssetProxy.sol": {
			"id": 4
		},
		"current/protocol/AssetProxy/interfaces/IAuthorizable.sol": {
			"id": 5
		},
		"current/protocol/AssetProxy/libs/LibAssetProxyErrors.sol": {
			"id": 6
		},
		"current/protocol/AssetProxy/libs/LibTransferErrors.sol": {
			"id": 7
		},
		"current/protocol/AssetProxy/mixins/MAssetProxy.sol": {
			"id": 8
		},
		"current/protocol/AssetProxy/mixins/MAuthorizable.sol": {
			"id": 9
		},
		"current/tokens/ERC20Token/IERC20Token.sol": {
			"id": 10
		},
		"current/utils/LibBytes/LibBytes.sol": {
			"id": 11
		},
		"current/utils/LibMem/LibMem.sol": {
			"id": 12
		},
		"current/utils/Ownable/IOwnable.sol": {
			"id": 13
		},
		"current/utils/Ownable/Ownable.sol": {
			"id": 14
		}
	},
	"sourceCodes": {
		"current/protocol/AssetProxy/ERC20Proxy.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/LibBytes/LibBytes.sol\";\nimport \"./MixinAssetProxy.sol\";\nimport \"./MixinAuthorizable.sol\";\nimport \"./MixinERC20Transfer.sol\";\n\ncontract ERC20Proxy is\n    MixinAssetProxy,\n    MixinAuthorizable,\n    MixinERC20Transfer\n{\n    // Id of this proxy.\n    uint8 constant PROXY_ID = 1;\n\n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        view\n        returns (uint8)\n    {\n        return PROXY_ID;\n    }\n}\n",
		"current/protocol/AssetProxy/MixinAssetProxy.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./mixins/MAuthorizable.sol\";\nimport \"./mixins/MAssetProxy.sol\";\n\ncontract MixinAssetProxy is\n    MAuthorizable,\n    MAssetProxy\n{\n\n    /// @dev Transfers assets. Either succeeds or throws.\n    /// @param assetData Encoded byte array.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    function transferFrom(\n        bytes assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        external\n        onlyAuthorized\n    {\n        transferFromInternal(\n            assetData,\n            from,\n            to,\n            amount\n        );\n    }\n\n    /// @dev Makes multiple transfers of assets. Either succeeds or throws.\n    /// @param assetData Array of byte arrays encoded for the respective asset proxy.\n    /// @param from Array of addresses to transfer assets from.\n    /// @param to Array of addresses to transfer assets to.\n    /// @param amounts Array of amounts of assets to transfer.\n    function batchTransferFrom(\n        bytes[] memory assetData,\n        address[] memory from,\n        address[] memory to,\n        uint256[] memory amounts\n    )\n        public\n        onlyAuthorized\n    {\n        for (uint256 i = 0; i < assetData.length; i++) {\n            transferFromInternal(\n                assetData[i],\n                from[i],\n                to[i],\n                amounts[i]\n            );\n        }\n    }\n}\n",
		"current/protocol/AssetProxy/MixinAuthorizable.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./libs/LibAssetProxyErrors.sol\";\nimport \"../../utils/Ownable/Ownable.sol\";\nimport \"./mixins/MAuthorizable.sol\";\n\ncontract MixinAuthorizable is\n    LibAssetProxyErrors,\n    Ownable,\n    MAuthorizable\n{\n\n    /// @dev Only authorized addresses can invoke functions with this modifier.\n    modifier onlyAuthorized {\n        require(\n            authorized[msg.sender],\n            SENDER_NOT_AUTHORIZED\n        );\n        _;\n    }\n\n    mapping (address => bool) public authorized;\n    address[] public authorities;\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external\n        onlyOwner\n    {\n        require(\n            !authorized[target],\n            TARGET_ALREADY_AUTHORIZED\n        );\n\n        authorized[target] = true;\n        authorities.push(target);\n        emit AuthorizedAddressAdded(target, msg.sender);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external\n        onlyOwner\n    {\n        require(\n            authorized[target],\n            TARGET_NOT_AUTHORIZED\n        );\n\n        delete authorized[target];\n        for (uint i = 0; i < authorities.length; i++) {\n            if (authorities[i] == target) {\n                authorities[i] = authorities[authorities.length - 1];\n                authorities.length -= 1;\n                break;\n            }\n        }\n        emit AuthorizedAddressRemoved(target, msg.sender);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external\n    {\n        require(\n            index < authorities.length,\n            INDEX_OUT_OF_BOUNDS\n        );\n        require(\n            authorities[index] == target,\n            AUTHORIZED_ADDRESS_MISMATCH\n        );\n\n        delete authorized[target];\n        authorities[index] = authorities[authorities.length - 1];\n        authorities.length -= 1;\n        emit AuthorizedAddressRemoved(target, msg.sender);\n    }\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[] memory)\n    {\n        return authorities;\n    }\n}\n",
		"current/protocol/AssetProxy/MixinERC20Transfer.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/LibBytes/LibBytes.sol\";\nimport \"../../tokens/ERC20Token/IERC20Token.sol\";\nimport \"./libs/LibTransferErrors.sol\";\n\ncontract MixinERC20Transfer is\n    LibBytes,\n    LibTransferErrors\n{\n    /// @dev Internal version of `transferFrom`.\n    /// @param assetData Encoded byte array.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    function transferFromInternal(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        // Decode asset data.\n        address token = readAddress(assetData, 0);\n\n        // Transfer tokens.\n        // We do a raw call so we can check the success separate\n        // from the return data.\n        // We construct calldata for the `token.transferFrom` ABI.\n        // The layout of this calldata is in the table below.\n        // \n        // | Area     | Offset | Length  | Contents                                    |\n        // | -------- |--------|---------|-------------------------------------------- |\n        // | Header   | 0      | 4       | function selector                           |\n        // | Params   |        | 3 * 32  | function parameters:                        |\n        // |          | 4      |         |   1. from                                   |\n        // |          | 36     |         |   2. to                                     |\n        // |          | 68     |         |   3. amount                                 |\n\n        bytes4 transferFromSelector = IERC20Token(token).transferFrom.selector;\n        bool success;\n        assembly {\n            /////// Setup State ///////\n            // `cdStart` is the start of the calldata for `token.transferFrom` (equal to free memory ptr).\n            let cdStart := mload(64)\n            // `cdEnd` is the end of the calldata for `token.transferFrom`.\n            let cdEnd := add(cdStart, 100)\n\n            /////// Setup Header Area ///////\n            // This area holds the 4-byte `transferFromSelector`.\n            mstore(cdStart, transferFromSelector)\n            \n            /////// Setup Params Area ///////\n            // Each parameter is padded to 32-bytes. The entire Params Area is 96 bytes.\n            // A 20-byte mask is applied to addresses to zero-out the unused bytes.\n            mstore(add(cdStart, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\n            mstore(add(cdStart, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\n            mstore(add(cdStart, 68), amount)\n\n            /////// Call `token.transferFrom` using the constructed calldata ///////\n            success := call(\n                gas,\n                token,\n                0,\n                cdStart,\n                sub(cdEnd, cdStart),\n                cdStart,\n                32\n            )\n        }\n        require(\n            success,\n            TRANSFER_FAILED\n        );\n        \n        // Check return data.\n        // If there is no return data, we assume the token incorrectly\n        // does not return a bool. In this case we expect it to revert\n        // on failure, which was handled above.\n        // If the token does return data, we require that it is a single\n        // value that evaluates to true.\n        assembly {\n            if returndatasize {\n                success := 0\n                if eq(returndatasize, 32) {\n                    // First 64 bytes of memory are reserved scratch space\n                    returndatacopy(0, 0, 32)\n                    success := mload(0)\n                }\n            }\n        }\n        require(\n            success,\n            TRANSFER_FAILED\n        );\n    }\n}\n",
		"current/protocol/AssetProxy/interfaces/IAssetProxy.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./IAuthorizable.sol\";\n\ncontract IAssetProxy is\n    IAuthorizable\n{\n\n    /// @dev Transfers assets. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    function transferFrom(\n        bytes assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        external;\n    \n    /// @dev Makes multiple transfers of assets. Either succeeds or throws.\n    /// @param assetData Array of byte arrays encoded for the respective asset proxy.\n    /// @param from Array of addresses to transfer assets from.\n    /// @param to Array of addresses to transfer assets to.\n    /// @param amounts Array of amounts of assets to transfer.\n    function batchTransferFrom(\n        bytes[] memory assetData,\n        address[] memory from,\n        address[] memory to,\n        uint256[] memory amounts\n    )\n        public;\n\n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        view\n        returns (uint8);\n}\n\n",
		"current/protocol/AssetProxy/interfaces/IAuthorizable.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../../../utils/Ownable/IOwnable.sol\";\n\ncontract IAuthorizable is\n    IOwnable\n{\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[]);\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n}\n",
		"current/protocol/AssetProxy/libs/LibAssetProxyErrors.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibAssetProxyErrors {\n    /// Authorizable errors ///\n    string constant SENDER_NOT_AUTHORIZED = \"SENDER_NOT_AUTHORIZED\";              // Sender not authorized to call this method.\n    string constant TARGET_NOT_AUTHORIZED = \"TARGET_NOT_AUTHORIZED\";              // Target address not authorized to call this method.\n    string constant TARGET_ALREADY_AUTHORIZED = \"TARGET_ALREADY_AUTHORIZED\";      // Target address must not already be authorized.\n    string constant INDEX_OUT_OF_BOUNDS = \"INDEX_OUT_OF_BOUNDS\";                  // Specified array index is out of bounds.\n    string constant AUTHORIZED_ADDRESS_MISMATCH = \"AUTHORIZED_ADDRESS_MISMATCH\";  // Address at index does not match given target address.\n}\n",
		"current/protocol/AssetProxy/libs/LibTransferErrors.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibTransferErrors {\n    /// Transfer errors ///\n    string constant INVALID_AMOUNT = \"INVALID_AMOUNT\";                            // Transfer amount must equal 1.\n    string constant TRANSFER_FAILED = \"TRANSFER_FAILED\";                          // Transfer failed.\n}\n",
		"current/protocol/AssetProxy/mixins/MAssetProxy.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IAssetProxy.sol\";\n\ncontract MAssetProxy is\n    IAssetProxy\n{\n\n    /// @dev Internal version of `transferFrom`.\n    /// @param assetData Encoded byte array.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    function transferFromInternal(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal;\n}\n",
		"current/protocol/AssetProxy/mixins/MAuthorizable.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IAuthorizable.sol\";\n\ncontract MAuthorizable is\n    IAuthorizable\n{\n\n    // Event logged when a new address is authorized.\n    event AuthorizedAddressAdded(\n        address indexed target,\n        address indexed caller\n    );\n\n    // Event logged when a currently authorized address is unauthorized.\n    event AuthorizedAddressRemoved(\n        address indexed target,\n        address indexed caller\n    );\n\n    /// @dev Only authorized addresses can invoke functions with this modifier.\n    modifier onlyAuthorized { revert(); _; }\n}\n",
		"current/tokens/ERC20Token/IERC20Token.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\ncontract IERC20Token {\n\n    /// @notice send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value)\n        public\n        returns (bool);\n\n    /// @notice send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value)\n        public\n        returns (bool);\n    \n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value)\n        public\n        returns (bool);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner)\n        public view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        public view\n        returns (uint256);\n\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n    \n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n}\n",
		"current/utils/LibBytes/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\nimport \"../LibMem/LibMem.sol\";\n\ncontract LibBytes is\n    LibMem\n{\n\n    // Revert reasons\n    string constant GREATER_THAN_ZERO_LENGTH_REQUIRED = \"GREATER_THAN_ZERO_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\";\n    string constant GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED = \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\";\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            GREATER_THAN_ZERO_LENGTH_REQUIRED\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(mload(add(b, index)), 0xffffffffffffffffffffffff0000000000000000000000000000000000000000)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        return uint256(readBytes32(b, index));\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads the first 4 bytes from a byte array of arbitrary length.\n    /// @param b Byte array to read first 4 bytes from.\n    /// @return First 4 bytes of data.\n    function readFirst4(bytes memory b)\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= 4,\n            GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\n        );\n        assembly {\n            result := mload(add(b, 32))\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytes(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\n        );\n\n        // Allocate memory and copy value to result\n        result = new bytes(nestedBytesLength);\n        memCopy(\n            getMemAddress(result) + 32, // +32 skips array length\n            getMemAddress(b) + index + 32,\n            nestedBytesLength\n        );\n\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytes(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 /* 32 bytes to store length */ + input.length,\n            GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            getMemAddress(b) + 32 + index,  // +32 to skip length of <b>\n            getMemAddress(input),           // includes length of <input>\n            input.length + 32               // +32 bytes to store <input> length\n        );\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function areBytesEqual(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        assembly {\n            // Get the number of words occupied by <lhs>\n            let lenFullWords := div(add(mload(lhs), 0x1F), 0x20)\n\n            // Add 1 to the number of words, to account for the length field\n            lenFullWords := add(lenFullWords, 0x1)\n\n            // Test equality word-by-word.\n            // Terminates early if there is a mismatch.\n            for {let i := 0} lt(i, lenFullWords) {i := add(i, 1)} {\n                let lhsWord := mload(add(lhs, mul(i, 0x20)))\n                let rhsWord := mload(add(rhs, mul(i, 0x20)))\n                equal := eq(lhsWord, rhsWord)\n                if eq(equal, 0) {\n                    // Break\n                    i := lenFullWords\n                }\n            }\n       }\n\n       return equal;\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function deepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        internal\n        pure\n    {\n        uint256 sourceLen = source.length;\n        // Dest length must be >= source length, or some bytes would not be copied.\n        require(\n            dest.length >= sourceLen,\n            GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\n        );\n        memCopy(\n            getMemAddress(dest) + 32,    // +32 to skip length of <dest>\n            getMemAddress(source) + 32,  // +32 to skip length of <source>\n            sourceLen\n        );\n    }\n}\n",
		"current/utils/LibMem/LibMem.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.4.24;\n\ncontract LibMem\n{\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array.\n    function getMemAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n                    \n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n                    \n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n}\n",
		"current/utils/Ownable/IOwnable.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\n\ncontract IOwnable {\n    function transferOwnership(address newOwner)\n        public;\n}\n",
		"current/utils/Ownable/Ownable.sol": "pragma solidity ^0.4.24;\npragma experimental ABIEncoderV2;\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\n\nimport \"./IOwnable.sol\";\n\ncontract Ownable is IOwnable {\n    address public owner;\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"Only contract owner is allowed to call this method.\"\n        );\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n"
	},
	"sourceTreeHashHex": "0xaa2562936492f6883858c88288142fbdcd77f10747c3e751c0b2634faf7ecd3f",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.4.24+commit.e67f0147.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"networks": {}
}